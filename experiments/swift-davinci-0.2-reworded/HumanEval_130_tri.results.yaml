language: swift
name: HumanEval_130_tri
results:
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [1, 3, 2]\n    if n == 0 {\n        return [1]\n    } else if n == 1 {\n \
    \       return [1, 3]\n    } else if n == 2 {\n        return [1, 3, 2]\n    }\
    \ else {\n        for i in 3...n {\n            if i % 2 == 0 {\n            \
    \    result.append(1 + i / 2)\n            } else {\n                result.append(result[i\
    \ - 1] + result[i - 2] + result[i - 3])\n            }\n        }\n    }\n   \
    \ return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(tri(n: 3) == [1, 3,\
    \ 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2,\
    \ 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    assert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmpxbxowlxy/tmpxbxowlxy.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7a2b542c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7a2b239b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7a2b239988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7a2b2387b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxbxowlxy                        0x0000562dddbd15ca <unavailable> + 5578

    5    libc.so.6                          0x00002b7a2b72e460 __libc_start_main +
    245

    6    tmpxbxowlxy                        0x0000562dddbd1209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659824630
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    for i in 0...n {\n        result.append(tri(n: i))\n    }\n \
    \   return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(tri(n: 3) == [1, 3,\
    \ 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2,\
    \ 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    assert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmp5rx3h4f5.swift:21:16: error: no exact matches in call to instance\
    \ method 'append'\n        result.append(tri(n: i))\n               ^\nSwift.Array:7:37:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(contentsOf:)')\n\
    \    @inlinable public mutating func append<S>(contentsOf newElements: __owned\
    \ S) where Element == S.Element, S : Sequence\n                              \
    \      ^\nSwift.RangeReplaceableCollection:5:37: note: incorrect labels for candidate\
    \ (have: '(_:)', expected: '(contentsOf:)')\n    @inlinable public mutating func\
    \ append<S>(contentsOf newElements: __owned S) where S : Sequence, Self.Element\
    \ == S.Element\n                                    ^\n"
  stdout: ''
  timestamp: 1659824629
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [1, 3, 2]\n    if n <= 2 {\n        return Array(result[0...n])\n    }\n \
    \   for i in 3...n {\n        result.append(result[i - 1] + result[i - 2] + result[i\
    \ - 3])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(tri(n:\
    \ 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5)\
    \ == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmpp0wm8n_e/tmpp0wm8n_e.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b36661e0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3665ed7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3665ed7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3665ed67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp0wm8n_e                        0x000056439b6ea7ba <unavailable> + 6074

    5    libc.so.6                          0x00002b36663cc460 __libc_start_main +
    245

    6    tmpp0wm8n_e                        0x000056439b6ea3f9 <unavailable> + 5113

    '
  stdout: ''
  timestamp: 1659824630
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [1, 3, 2]\n    if n <= 2 {\n        return result[0...n]\n    }\n    for i\
    \ in 3...n {\n        if i % 2 == 0 {\n            result.append(1 + i / 2)\n\
    \        } else {\n            result.append(result[i - 1] + result[i - 2] + result[i\
    \ + 1])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\n\
    assert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3,\
    \ 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1,\
    \ 3])"
  status: SyntaxError
  stderr: "/tmp/tmplkuvek47.swift:21:22: error: no 'subscript' candidates produce\
    \ the expected contextual result type '[Int]'\n        return result[0...n]\n\
    \                     ^\nSwift.Collection:2:23: note: 'subscript(_:)' produces\
    \ 'ArraySlice<Int>', not the expected contextual result type '[Int]'\n    @inlinable\
    \ public subscript<R>(r: R) -> Self.SubSequence where R : RangeExpression, Self.Index\
    \ == R.Bound { get }\n                      ^\nSwift.MutableCollection:2:23: note:\
    \ 'subscript(_:)' produces '@lvalue ArraySlice<Int>', not the expected contextual\
    \ result type '[Int]'\n    @inlinable public subscript<R>(r: R) -> Self.SubSequence\
    \ where R : RangeExpression, Self.Index == R.Bound { get set }\n             \
    \         ^\n"
  stdout: ''
  timestamp: 1659824630
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [1, 3, 2]\n    if n == 0 {\n        return [1]\n    } else if n == 1 {\n \
    \       return [1, 3]\n    } else if n == 2 {\n        return [1, 3, 2]\n    }\
    \ else {\n        for i in 3...n {\n            if i % 2 == 0 {\n            \
    \    result.append(1 + i / 2)\n            } else {\n                result.append(result[i\
    \ - 1] + result[i - 2] + result[i - 3])\n            }\n        }\n    }\n   \
    \ return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(tri(n: 3) == [1, 3,\
    \ 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2,\
    \ 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    assert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmpxbxowlxy/tmpxbxowlxy.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7a2b542c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7a2b239b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7a2b239988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7a2b2387b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxbxowlxy                        0x0000562dddbd15ca <unavailable> + 5578

    5    libc.so.6                          0x00002b7a2b72e460 __libc_start_main +
    245

    6    tmpxbxowlxy                        0x0000562dddbd1209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659824630
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [1, 3, 2]\n    guard n > 2 else { return Array(result[0...n]) }\n    for i\
    \ in 3...n {\n        if i % 2 == 0 {\n            result.append(1 + i / 2)\n\
    \        } else {\n            result.append(result[i - 1] + result[i - 2] + result[i\
    \ + 1])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\n\
    assert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3,\
    \ 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1,\
    \ 3])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b65834efc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b65831e6561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b65831e6286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b65831e613c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b65831e5bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b6582fe5e83 <unavailable> + 188035

    6    tmp8v1gq5gk                        0x000055ae172f667a <unavailable> + 9850

    7    tmp8v1gq5gk                        0x000055ae172f56db <unavailable> + 5851

    8    libc.so.6                          0x00002b65836db460 __libc_start_main +
    245

    9    tmp8v1gq5gk                        0x000055ae172f53f9 <unavailable> + 5113

    '
  stdout: ''
  timestamp: 1659824630
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [1, 3, 2]\n    for i in 3...n {\n        if i % 2 == 0 {\n            result.append(1\
    \ + i / 2)\n        } else {\n            result.append(result[i - 1] + result[i\
    \ - 2] + result[i + 1])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3,\
    \ 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1,\
    \ 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n:\
    \ 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n:\
    \ 1) == [1, 3])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ad2048b0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad2045a7561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ad2045a7286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ad2045a713c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ad2045a6bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ad2043a6e83 <unavailable> + 188035

    6    tmphoo0nmhz                        0x000056384653d419 <unavailable> + 9241

    7    tmphoo0nmhz                        0x000056384653c4eb <unavailable> + 5355

    8    libc.so.6                          0x00002ad204a9c460 __libc_start_main +
    245

    9    tmphoo0nmhz                        0x000056384653c209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659824630
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    for i in 0...n {\n        if i == 0 {\n            result.append(1)\n\
    \        } else if i == 1 {\n            result.append(3)\n        } else if i\
    \ == 2 {\n            result.append(2)\n        } else if i % 2 == 0 {\n     \
    \       result.append(1 + i / 2)\n        } else {\n            result.append(result[i\
    \ - 1] + result[i - 2] + result[i - 3])\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmpgbn7jc43/tmpgbn7jc43.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b21938dec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b21935d5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b21935d5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b21935d47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgbn7jc43                        0x0000562dbb49f61a <unavailable> + 5658

    5    libc.so.6                          0x00002b2193aca460 __libc_start_main +
    245

    6    tmpgbn7jc43                        0x0000562dbb49f259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659824630
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    for i in 0...n {\n        if i == 0 {\n            result.append(1)\n\
    \        } else if i == 1 {\n            result.append(3)\n        } else if i\
    \ == 2 {\n            result.append(2)\n        } else if i % 2 == 0 {\n     \
    \       result.append(1 + i / 2)\n        } else {\n            result.append(result[i\
    \ - 1] + result[i - 2] + result[i - 3])\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmpgbn7jc43/tmpgbn7jc43.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b21938dec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b21935d5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b21935d5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b21935d47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgbn7jc43                        0x0000562dbb49f61a <unavailable> + 5658

    5    libc.so.6                          0x00002b2193aca460 __libc_start_main +
    245

    6    tmpgbn7jc43                        0x0000562dbb49f259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659824630
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [1, 3, 2]\n    if n < 3 {\n        return Array(result[0...n])\n    }\n  \
    \  for i in 3...n {\n        if i % 2 == 0 {\n            result.append(1 + i\
    \ / 2)\n        } else {\n            result.append(result[i - 1] + result[i -\
    \ 2] + result[i + 1])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3,\
    \ 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1,\
    \ 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n:\
    \ 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n:\
    \ 1) == [1, 3])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002aac01482c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aac01179561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002aac01179286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002aac0117913c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002aac01178bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002aac00f78e83 <unavailable> + 188035

    6    tmp0oi1klnf                        0x0000563f4e17b843 <unavailable> + 10307

    7    tmp0oi1klnf                        0x0000563f4e17a6db <unavailable> + 5851

    8    libc.so.6                          0x00002aac0166e460 __libc_start_main +
    245

    9    tmp0oi1klnf                        0x0000563f4e17a3f9 <unavailable> + 5113

    '
  stdout: ''
  timestamp: 1659824630
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    for i in 0...n {\n        if i == 0 {\n            result.append(1)\n\
    \        } else if i == 1 {\n            result.append(3)\n        } else if i\
    \ == 2 {\n            result.append(2)\n        } else if i % 2 == 0 {\n     \
    \       result.append(1 + i / 2)\n        } else {\n            result.append(result[i\
    \ - 1] + result[i - 2] + result[i - 3])\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmpgbn7jc43/tmpgbn7jc43.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b21938dec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b21935d5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b21935d5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b21935d47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgbn7jc43                        0x0000562dbb49f61a <unavailable> + 5658

    5    libc.so.6                          0x00002b2193aca460 __libc_start_main +
    245

    6    tmpgbn7jc43                        0x0000562dbb49f259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659824630
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [1, 3, 2]\n    if n == 0 {\n        return [1]\n    } else if n == 1 {\n \
    \       return [1, 3]\n    } else if n == 2 {\n        return [1, 3, 2]\n    }\
    \ else {\n        for _ in 3...n {\n            let last = result.last!\n    \
    \        let secondLast = result[result.count - 2]\n            let thirdLast\
    \ = result[result.count - 3]\n            result.append(last + secondLast + thirdLast)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n:\
    \ 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmpbxqeyu5_/tmpbxqeyu5_.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3846613c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b384630ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b384630a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b38463097b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbxqeyu5_                        0x000055e52d49b6ba <unavailable> + 5818

    5    libc.so.6                          0x00002b38467ff460 __libc_start_main +
    245

    6    tmpbxqeyu5_                        0x000055e52d49b2f9 <unavailable> + 4857

    '
  stdout: ''
  timestamp: 1659824630
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [1, 3, 2]\n    if n <= 2 {\n        return Array(result[0...n])\n    }\n \
    \   for i in 3...n {\n        if i % 2 == 0 {\n            result.append(1 + i\
    \ / 2)\n        } else {\n            result.append(result[i - 1] + result[i -\
    \ 2] + result[i + 1])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3,\
    \ 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1,\
    \ 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n:\
    \ 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n:\
    \ 1) == [1, 3])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b65b1890c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b65b1587561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b65b1587286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b65b158713c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b65b1586bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b65b1386e83 <unavailable> + 188035

    6    tmpk57ye95c                        0x000055c2c4b6284f <unavailable> + 10319

    7    tmpk57ye95c                        0x000055c2c4b616db <unavailable> + 5851

    8    libc.so.6                          0x00002b65b1a7c460 __libc_start_main +
    245

    9    tmpk57ye95c                        0x000055c2c4b613f9 <unavailable> + 5113

    '
  stdout: ''
  timestamp: 1659824630
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    for i in 0...n {\n        result.append(tri(n: i))\n    }\n \
    \   return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(tri(n: 3) == [1, 3,\
    \ 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2,\
    \ 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    assert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmp5rx3h4f5.swift:21:16: error: no exact matches in call to instance\
    \ method 'append'\n        result.append(tri(n: i))\n               ^\nSwift.Array:7:37:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(contentsOf:)')\n\
    \    @inlinable public mutating func append<S>(contentsOf newElements: __owned\
    \ S) where Element == S.Element, S : Sequence\n                              \
    \      ^\nSwift.RangeReplaceableCollection:5:37: note: incorrect labels for candidate\
    \ (have: '(_:)', expected: '(contentsOf:)')\n    @inlinable public mutating func\
    \ append<S>(contentsOf newElements: __owned S) where S : Sequence, Self.Element\
    \ == S.Element\n                                    ^\n"
  stdout: ''
  timestamp: 1659824629
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    for i in 0...n {\n        if i == 0 {\n            result.append(1)\n\
    \        } else if i == 1 {\n            result.append(3)\n        } else if i\
    \ == 2 {\n            result.append(2)\n        } else if i % 2 == 0 {\n     \
    \       result.append(1 + i / 2)\n        } else {\n            result.append(result[i\
    \ - 1] + result[i - 2] + result[i - 3])\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmpgbn7jc43/tmpgbn7jc43.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b21938dec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b21935d5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b21935d5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b21935d47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgbn7jc43                        0x0000562dbb49f61a <unavailable> + 5658

    5    libc.so.6                          0x00002b2193aca460 __libc_start_main +
    245

    6    tmpgbn7jc43                        0x0000562dbb49f259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659824630
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    for i in 0...n {\n        if i == 0 {\n            result.append(1)\n\
    \        } else if i == 1 {\n            result.append(3)\n        } else if i\
    \ == 2 {\n            result.append(2)\n        } else if i % 2 == 0 {\n     \
    \       result.append(1 + i / 2)\n        } else {\n            result.append(result[i\
    \ - 1] + result[i - 2] + result[i - 3])\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmpgbn7jc43/tmpgbn7jc43.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b21938dec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b21935d5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b21935d5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b21935d47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgbn7jc43                        0x0000562dbb49f61a <unavailable> + 5658

    5    libc.so.6                          0x00002b2193aca460 __libc_start_main +
    245

    6    tmpgbn7jc43                        0x0000562dbb49f259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659824630
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [1, 3, 2]\n    if n == 0 {\n        return [1]\n    } else if n == 1 {\n \
    \       return [1, 3]\n    } else if n == 2 {\n        return [1, 3, 2]\n    }\
    \ else {\n        for i in 3...n {\n            if i % 2 == 0 {\n            \
    \    result.append(1 + i / 2)\n            } else {\n                result.append(result[i\
    \ - 1] + result[i - 2] + result[i - 3])\n            }\n        }\n    }\n   \
    \ return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(tri(n: 3) == [1, 3,\
    \ 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2,\
    \ 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    assert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmpxbxowlxy/tmpxbxowlxy.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7a2b542c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7a2b239b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7a2b239988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7a2b2387b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxbxowlxy                        0x0000562dddbd15ca <unavailable> + 5578

    5    libc.so.6                          0x00002b7a2b72e460 __libc_start_main +
    245

    6    tmpxbxowlxy                        0x0000562dddbd1209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659824630
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [1, 3, 2]\n    if n < 3 {\n        return Array(result[0...n])\n    }\n  \
    \  for i in 3...n {\n        result.append(result[i - 1] + result[i - 2] + result[i\
    \ - 3])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(tri(n:\
    \ 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5)\
    \ == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmpayls0e05/tmpayls0e05.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2c38bbcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2c388b3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2c388b3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2c388b27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpayls0e05                        0x000055778ee9c7ba <unavailable> + 6074

    5    libc.so.6                          0x00002b2c38da8460 __libc_start_main +
    245

    6    tmpayls0e05                        0x000055778ee9c3f9 <unavailable> + 5113

    '
  stdout: ''
  timestamp: 1659824630
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [1, 3, 2]\n    if n < 3 {\n        return Array(result[0...n])\n    }\n  \
    \  for i in 3...n {\n        let next = result[i - 1] + result[i - 2] + result[i\
    \ - 3]\n        result.append(next)\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3,\
    \ 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1,\
    \ 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n:\
    \ 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n:\
    \ 1) == [1, 3])"
  status: Exception
  stderr: 'tmp6bxieib0/tmp6bxieib0.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adb0e159c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adb0de50b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adb0de50988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adb0de4f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6bxieib0                        0x000055649e2027ba <unavailable> + 6074

    5    libc.so.6                          0x00002adb0e345460 __libc_start_main +
    245

    6    tmp6bxieib0                        0x000055649e2023f9 <unavailable> + 5113

    '
  stdout: ''
  timestamp: 1659824630
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [1, 3, 2]\n    if n == 0 {\n        return [1]\n    } else if n == 1 {\n \
    \       return [1, 3]\n    } else if n == 2 {\n        return [1, 3, 2]\n    }\
    \ else {\n        for i in 3...n {\n            if i % 2 == 0 {\n            \
    \    result.append(1 + i / 2)\n            } else {\n                result.append(result[i\
    \ - 1] + result[i - 2] + result[i - 3])\n            }\n        }\n    }\n   \
    \ return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(tri(n: 3) == [1, 3,\
    \ 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2,\
    \ 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    assert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmpxbxowlxy/tmpxbxowlxy.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7a2b542c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7a2b239b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7a2b239988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7a2b2387b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxbxowlxy                        0x0000562dddbd15ca <unavailable> + 5578

    5    libc.so.6                          0x00002b7a2b72e460 __libc_start_main +
    245

    6    tmpxbxowlxy                        0x0000562dddbd1209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659824630
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    if n ==\
    \ 0 {\n        return [1]\n    }\n    if n == 1 {\n        return [1, 3]\n   \
    \ }\n    if n == 2 {\n        return [1, 3, 2]\n    }\n    var result = [1, 3,\
    \ 2]\n    for i in 3...n {\n        if i % 2 == 0 {\n            result.append(1\
    \ + i / 2)\n        } else {\n            result.append(result[i - 1] + result[i\
    \ - 2] + result[i + 1])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3,\
    \ 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1,\
    \ 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n:\
    \ 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n:\
    \ 1) == [1, 3])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ba2870afc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba286da6561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ba286da6286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ba286da613c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ba286da5bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ba286ba5e83 <unavailable> + 188035

    6    tmp4_8i_oxx                        0x0000564310fd74ee <unavailable> + 9454

    7    tmp4_8i_oxx                        0x0000564310fd64eb <unavailable> + 5355

    8    libc.so.6                          0x00002ba28729b460 __libc_start_main +
    245

    9    tmp4_8i_oxx                        0x0000564310fd6209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659824630
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    for i in 0...n {\n        if i == 0 {\n            result.append(1)\n\
    \        } else if i == 1 {\n            result.append(3)\n        } else if i\
    \ == 2 {\n            result.append(2)\n        } else if i % 2 == 0 {\n     \
    \       result.append(1 + i / 2)\n        } else {\n            result.append(result[i\
    \ - 1] + result[i - 2] + result[i - 3])\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmpgbn7jc43/tmpgbn7jc43.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b21938dec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b21935d5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b21935d5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b21935d47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgbn7jc43                        0x0000562dbb49f61a <unavailable> + 5658

    5    libc.so.6                          0x00002b2193aca460 __libc_start_main +
    245

    6    tmpgbn7jc43                        0x0000562dbb49f259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659824630
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [1, 3, 2]\n    if n == 0 {\n        return [1]\n    } else if n == 1 {\n \
    \       return [1, 3]\n    } else if n == 2 {\n        return [1, 3, 2]\n    }\
    \ else {\n        for _ in 3...n {\n            let last = result.last!\n    \
    \        let secondLast = result[result.count - 2]\n            let thirdLast\
    \ = result[result.count - 3]\n            result.append(last + secondLast + thirdLast)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n:\
    \ 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmpbxqeyu5_/tmpbxqeyu5_.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3846613c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b384630ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b384630a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b38463097b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbxqeyu5_                        0x000055e52d49b6ba <unavailable> + 5818

    5    libc.so.6                          0x00002b38467ff460 __libc_start_main +
    245

    6    tmpbxqeyu5_                        0x000055e52d49b2f9 <unavailable> + 4857

    '
  stdout: ''
  timestamp: 1659824630
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [1, 3, 2]\n    if n < 3 {\n        return Array(result[0...n])\n    }\n  \
    \  for i in 3...n {\n        result.append(result[i - 1] + result[i - 2] + result[i\
    \ - 3])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(tri(n:\
    \ 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5)\
    \ == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmpayls0e05/tmpayls0e05.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2c38bbcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2c388b3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2c388b3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2c388b27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpayls0e05                        0x000055778ee9c7ba <unavailable> + 6074

    5    libc.so.6                          0x00002b2c38da8460 __libc_start_main +
    245

    6    tmpayls0e05                        0x000055778ee9c3f9 <unavailable> + 5113

    '
  stdout: ''
  timestamp: 1659824630
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [1, 3, 2]\n    if n < 3 {\n        return Array(result[0...n])\n    }\n  \
    \  for i in 3...n {\n        result.append(i % 2 == 0 ? 1 + i / 2 : result[i -\
    \ 1] + result[i - 2] + result[i - 3])\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3,\
    \ 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1,\
    \ 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n:\
    \ 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n:\
    \ 1) == [1, 3])"
  status: Exception
  stderr: 'tmpttcccr3m/tmpttcccr3m.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afd84cd1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afd849c8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afd849c8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afd849c77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpttcccr3m                        0x000055e050b217ba <unavailable> + 6074

    5    libc.so.6                          0x00002afd84ebd460 __libc_start_main +
    245

    6    tmpttcccr3m                        0x000055e050b213f9 <unavailable> + 5113

    '
  stdout: ''
  timestamp: 1659824630
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    guard n\
    \ > 0 else { return [] }\n    var result = [1, 3, 2]\n    for i in 3...n {\n \
    \       let last = result[i - 1]\n        let last2 = result[i - 2]\n        let\
    \ last3 = result[i - 3]\n        if i % 2 == 0 {\n            result.append(1\
    \ + i / 2)\n        } else {\n            result.append(last + last2 + last3)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n:\
    \ 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmppro5v4qn/tmppro5v4qn.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b47b97fbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b47b94f2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b47b94f2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b47b94f17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppro5v4qn                        0x000055e0c446d5ca <unavailable> + 5578

    5    libc.so.6                          0x00002b47b99e7460 __libc_start_main +
    245

    6    tmppro5v4qn                        0x000055e0c446d209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659824630
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [1, 3, 2]\n    if n == 0 {\n        return [1]\n    } else if n == 1 {\n \
    \       return [1, 3]\n    } else if n == 2 {\n        return [1, 3, 2]\n    }\
    \ else {\n        for i in 3...n {\n            if i % 2 == 0 {\n            \
    \    result.append(1 + i / 2)\n            } else {\n                result.append(result[i\
    \ - 1] + result[i - 2] + result[i - 3])\n            }\n        }\n    }\n   \
    \ return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(tri(n: 3) == [1, 3,\
    \ 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2,\
    \ 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    assert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmpxbxowlxy/tmpxbxowlxy.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7a2b542c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7a2b239b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7a2b239988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7a2b2387b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxbxowlxy                        0x0000562dddbd15ca <unavailable> + 5578

    5    libc.so.6                          0x00002b7a2b72e460 __libc_start_main +
    245

    6    tmpxbxowlxy                        0x0000562dddbd1209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659824630
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [1, 3, 2]\n    guard n > 2 else { return Array(result[0...n]) }\n    for i\
    \ in 3...n {\n        result.append(i % 2 == 0 ? 1 + i / 2 : result[i - 1] + result[i\
    \ - 2] + result[i + 1])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2,\
    \ 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3,\
    \ 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n:\
    \ 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n:\
    \ 1) == [1, 3])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b29777a2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2977499561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b2977499286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b297749913c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b2977498bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b2977298e83 <unavailable> + 188035

    6    tmp7m7i3lm2                        0x000055e293b1d66a <unavailable> + 9834

    7    tmp7m7i3lm2                        0x000055e293b1c6db <unavailable> + 5851

    8    libc.so.6                          0x00002b297798e460 __libc_start_main +
    245

    9    tmp7m7i3lm2                        0x000055e293b1c3f9 <unavailable> + 5113

    '
  stdout: ''
  timestamp: 1659824630
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    for i in 0...n {\n        if i == 0 {\n            result.append(1)\n\
    \        } else if i == 1 {\n            result.append(3)\n        } else if i\
    \ == 2 {\n            result.append(2)\n        } else if i % 2 == 0 {\n     \
    \       result.append(1 + i / 2)\n        } else {\n            result.append(result[i\
    \ - 1] + result[i - 2] + result[i - 3])\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmpgbn7jc43/tmpgbn7jc43.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b21938dec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b21935d5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b21935d5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b21935d47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgbn7jc43                        0x0000562dbb49f61a <unavailable> + 5658

    5    libc.so.6                          0x00002b2193aca460 __libc_start_main +
    245

    6    tmpgbn7jc43                        0x0000562dbb49f259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659824630
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [1, 3, 2]\n    if n <= 2 {\n        return Array(result[0...n])\n    }\n \
    \   for _ in 3...n {\n        result.append(result[result.count - 1] + result[result.count\
    \ - 2] + result[result.count - 3])\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3,\
    \ 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1,\
    \ 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n:\
    \ 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n:\
    \ 1) == [1, 3])"
  status: Exception
  stderr: 'tmp9c2i3p38/tmp9c2i3p38.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac24545dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac245154b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac245154988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac2451537b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9c2i3p38                        0x000055735fb8a81a <unavailable> + 6170

    5    libc.so.6                          0x00002ac245649460 __libc_start_main +
    245

    6    tmp9c2i3p38                        0x000055735fb8a459 <unavailable> + 5209

    '
  stdout: ''
  timestamp: 1659824630
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [1, 3, 2]\n    if n == 0 {\n        return [1]\n    } else if n == 1 {\n \
    \       return [1, 3]\n    } else if n == 2 {\n        return [1, 3, 2]\n    }\
    \ else {\n        for i in 3...n {\n            if i % 2 == 0 {\n            \
    \    result.append(1 + i / 2)\n            } else {\n                result.append(result[i\
    \ - 1] + result[i - 2] + result[i - 3])\n            }\n        }\n    }\n   \
    \ return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(tri(n: 3) == [1, 3,\
    \ 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2,\
    \ 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    assert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmpxbxowlxy/tmpxbxowlxy.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7a2b542c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7a2b239b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7a2b239988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7a2b2387b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxbxowlxy                        0x0000562dddbd15ca <unavailable> + 5578

    5    libc.so.6                          0x00002b7a2b72e460 __libc_start_main +
    245

    6    tmpxbxowlxy                        0x0000562dddbd1209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659824630
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    for i in 0...n {\n        if i == 0 {\n            result.append(1)\n\
    \        } else if i == 1 {\n            result.append(3)\n        } else if i\
    \ == 2 {\n            result.append(2)\n        } else if i % 2 == 0 {\n     \
    \       result.append(1 + i / 2)\n        } else {\n            result.append(result[i\
    \ - 1] + result[i - 2] + result[i - 3])\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmpgbn7jc43/tmpgbn7jc43.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b21938dec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b21935d5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b21935d5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b21935d47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgbn7jc43                        0x0000562dbb49f61a <unavailable> + 5658

    5    libc.so.6                          0x00002b2193aca460 __libc_start_main +
    245

    6    tmpgbn7jc43                        0x0000562dbb49f259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659824630
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [1, 3, 2]\n    guard n > 2 else {\n        return Array(result[0...n])\n \
    \   }\n    for i in 3...n {\n        result.append(i % 2 == 0 ? 1 + i / 2 : result[i\
    \ - 1] + result[i - 2] + result[i + 1])\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b58c8183c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b58c7e7a561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b58c7e7a286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b58c7e7a13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b58c7e79bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b58c7c79e83 <unavailable> + 188035

    6    tmpz_ko00hi                        0x0000557abec9f66a <unavailable> + 9834

    7    tmpz_ko00hi                        0x0000557abec9e6db <unavailable> + 5851

    8    libc.so.6                          0x00002b58c836f460 __libc_start_main +
    245

    9    tmpz_ko00hi                        0x0000557abec9e3f9 <unavailable> + 5113

    '
  stdout: ''
  timestamp: 1659824630
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [1, 3, 2]\n    if n == 0 {\n        return [1]\n    } else if n == 1 {\n \
    \       return [1, 3]\n    } else if n == 2 {\n        return [1, 3, 2]\n    }\
    \ else {\n        for i in 3...n {\n            if i % 2 == 0 {\n            \
    \    result.append(1 + i / 2)\n            } else {\n                result.append(result[i\
    \ - 1] + result[i - 2] + result[i - 3])\n            }\n        }\n    }\n   \
    \ return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(tri(n: 3) == [1, 3,\
    \ 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2,\
    \ 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    assert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmpxbxowlxy/tmpxbxowlxy.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7a2b542c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7a2b239b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7a2b239988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7a2b2387b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxbxowlxy                        0x0000562dddbd15ca <unavailable> + 5578

    5    libc.so.6                          0x00002b7a2b72e460 __libc_start_main +
    245

    6    tmpxbxowlxy                        0x0000562dddbd1209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659824630
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    for i in 0...n {\n        switch i {\n        case 0:\n     \
    \       result.append(1)\n        case 1:\n            result.append(3)\n    \
    \    case 2:\n            result.append(2)\n        default:\n            if i\
    \ % 2 == 0 {\n                result.append(1 + i / 2)\n            } else {\n\
    \                result.append(result[i - 1] + result[i - 2] + result[i - 3])\n\
    \            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2,\
    \ 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3,\
    \ 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n:\
    \ 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n:\
    \ 1) == [1, 3])"
  status: Exception
  stderr: 'tmpbgbc40v9/tmpbgbc40v9.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6d5a691c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6d5a388b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6d5a388988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6d5a3877b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbgbc40v9                        0x0000561eed22861a <unavailable> + 5658

    5    libc.so.6                          0x00002b6d5a87d460 __libc_start_main +
    245

    6    tmpbgbc40v9                        0x0000561eed228259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659824630
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    for i in 0...n {\n        if i == 0 {\n            result.append(1)\n\
    \        } else if i == 1 {\n            result.append(3)\n        } else if i\
    \ == 2 {\n            result.append(2)\n        } else if i % 2 == 0 {\n     \
    \       result.append(1 + i / 2)\n        } else {\n            result.append(result[i\
    \ - 1] + result[i - 2] + result[i - 3])\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmpgbn7jc43/tmpgbn7jc43.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b21938dec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b21935d5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b21935d5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b21935d47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgbn7jc43                        0x0000562dbb49f61a <unavailable> + 5658

    5    libc.so.6                          0x00002b2193aca460 __libc_start_main +
    245

    6    tmpgbn7jc43                        0x0000562dbb49f259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659824630
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    for i in 0...n {\n        if i == 0 {\n            result.append(1)\n\
    \        } else if i == 1 {\n            result.append(3)\n        } else if i\
    \ == 2 {\n            result.append(2)\n        } else if i % 2 == 0 {\n     \
    \       result.append(1 + i / 2)\n        } else {\n            result.append(result[i\
    \ - 1] + result[i - 2] + result[i - 3])\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmpgbn7jc43/tmpgbn7jc43.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b21938dec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b21935d5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b21935d5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b21935d47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgbn7jc43                        0x0000562dbb49f61a <unavailable> + 5658

    5    libc.so.6                          0x00002b2193aca460 __libc_start_main +
    245

    6    tmpgbn7jc43                        0x0000562dbb49f259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659824630
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [1, 3, 2]\n    guard n > 2 else { return result }\n    for i in 3...n {\n\
    \        if i % 2 == 0 {\n            result.append(1 + i / 2)\n        } else\
    \ {\n            result.append(result[i - 1] + result[i - 2] + result[i + 1])\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n:\
    \ 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b4402e35c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4402b2c561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b4402b2c286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b4402b2c13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b4402b2bbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b440292be83 <unavailable> + 188035

    6    tmpbqjdaz6i                        0x00005566c08d7454 <unavailable> + 9300

    7    tmpbqjdaz6i                        0x00005566c08d64eb <unavailable> + 5355

    8    libc.so.6                          0x00002b4403021460 __libc_start_main +
    245

    9    tmpbqjdaz6i                        0x00005566c08d6209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659824630
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    for i in 0...n {\n        if i == 0 {\n            result.append(1)\n\
    \        } else if i == 1 {\n            result.append(3)\n        } else if i\
    \ == 2 {\n            result.append(2)\n        } else if i % 2 == 0 {\n     \
    \       result.append(1 + i / 2)\n        } else {\n            result.append(result[i\
    \ - 1] + result[i - 2] + result[i - 3])\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmpgbn7jc43/tmpgbn7jc43.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b21938dec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b21935d5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b21935d5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b21935d47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgbn7jc43                        0x0000562dbb49f61a <unavailable> + 5658

    5    libc.so.6                          0x00002b2193aca460 __libc_start_main +
    245

    6    tmpgbn7jc43                        0x0000562dbb49f259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659824630
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [1, 3, 2]\n    if n == 0 {\n        return [1]\n    } else if n == 1 {\n \
    \       return [1, 3]\n    } else if n == 2 {\n        return [1, 3, 2]\n    }\
    \ else {\n        for i in 3...n {\n            if i % 2 == 0 {\n            \
    \    result.append(1 + i / 2)\n            } else {\n                result.append(result[i\
    \ - 1] + result[i - 2] + result[i - 3])\n            }\n        }\n    }\n   \
    \ return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(tri(n: 3) == [1, 3,\
    \ 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2,\
    \ 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    assert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmpxbxowlxy/tmpxbxowlxy.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7a2b542c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7a2b239b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7a2b239988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7a2b2387b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxbxowlxy                        0x0000562dddbd15ca <unavailable> + 5578

    5    libc.so.6                          0x00002b7a2b72e460 __libc_start_main +
    245

    6    tmpxbxowlxy                        0x0000562dddbd1209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659824630
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var arr\
    \ = [1, 3, 2]\n    guard n > 2 else { return arr[0...n] }\n    for i in 3...n\
    \ {\n        if i % 2 == 0 {\n            arr.append(1 + i / 2)\n        } else\
    \ {\n            arr.append(arr[i - 1] + arr[i - 2] + arr[i + 1])\n        }\n\
    \    }\n    return arr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(tri(n: 3)\
    \ == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) ==\
    \ [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmp3afzveu1.swift:20:34: error: no 'subscript' candidates produce\
    \ the expected contextual result type '[Int]'\n    guard n > 2 else { return arr[0...n]\
    \ }\n                                 ^\nSwift.Collection:2:23: note: 'subscript(_:)'\
    \ produces 'ArraySlice<Int>', not the expected contextual result type '[Int]'\n\
    \    @inlinable public subscript<R>(r: R) -> Self.SubSequence where R : RangeExpression,\
    \ Self.Index == R.Bound { get }\n                      ^\nSwift.MutableCollection:2:23:\
    \ note: 'subscript(_:)' produces '@lvalue ArraySlice<Int>', not the expected contextual\
    \ result type '[Int]'\n    @inlinable public subscript<R>(r: R) -> Self.SubSequence\
    \ where R : RangeExpression, Self.Index == R.Bound { get set }\n             \
    \         ^\n"
  stdout: ''
  timestamp: 1659824630
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result:\
    \ [Int] = [1, 3, 2]\n    for i in 3...n {\n        if i % 2 == 0 {\n         \
    \   result.append(1 + i / 2)\n        } else {\n            result.append(result[i\
    \ - 1] + result[i - 2] + result[i + 1])\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ae39777cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae397473561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ae397473286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ae39747313c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ae397472bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ae397272e83 <unavailable> + 188035

    6    tmpecvuq2am                        0x00005579eec6c419 <unavailable> + 9241

    7    tmpecvuq2am                        0x00005579eec6b4eb <unavailable> + 5355

    8    libc.so.6                          0x00002ae397968460 __libc_start_main +
    245

    9    tmpecvuq2am                        0x00005579eec6b209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659824630
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [1, 3, 2]\n    if n < 3 {\n        return Array(result[0...n])\n    }\n  \
    \  for i in 3...n {\n        if i % 2 == 0 {\n            result.append(1 + i\
    \ / 2)\n        } else {\n            result.append(result[i - 1] + result[i -\
    \ 2] + result[i + 1])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3,\
    \ 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1,\
    \ 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n:\
    \ 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n:\
    \ 1) == [1, 3])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002aac01482c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aac01179561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002aac01179286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002aac0117913c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002aac01178bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002aac00f78e83 <unavailable> + 188035

    6    tmp0oi1klnf                        0x0000563f4e17b843 <unavailable> + 10307

    7    tmp0oi1klnf                        0x0000563f4e17a6db <unavailable> + 5851

    8    libc.so.6                          0x00002aac0166e460 __libc_start_main +
    245

    9    tmp0oi1klnf                        0x0000563f4e17a3f9 <unavailable> + 5113

    '
  stdout: ''
  timestamp: 1659824630
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [1, 3, 2]\n    if n <= 2 {\n        return Array(result[0...n])\n    }\n \
    \   for i in 3...n {\n        result.append(result[i - 1] + result[i - 2] + result[i\
    \ - 3])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(tri(n:\
    \ 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5)\
    \ == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmpp0wm8n_e/tmpp0wm8n_e.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b36661e0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3665ed7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3665ed7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3665ed67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp0wm8n_e                        0x000056439b6ea7ba <unavailable> + 6074

    5    libc.so.6                          0x00002b36663cc460 __libc_start_main +
    245

    6    tmpp0wm8n_e                        0x000056439b6ea3f9 <unavailable> + 5113

    '
  stdout: ''
  timestamp: 1659824630
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    return [Int](0...n).map\
    \ {\n        switch $0 {\n        case 0: return 1\n        case 1: return 3\n\
    \        case 2: return 2\n        default:\n            return tri(n: $0 - 1)\
    \ + tri(n: $0 - 2) + tri(n: $0 - 3)\n        }\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2,\
    \ 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3,\
    \ 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n:\
    \ 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n:\
    \ 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpeqg34tul.swift:25:52: error: cannot convert return expression of\
    \ type 'Array<Int>' to return type 'Int'\n            return tri(n: $0 - 1) +\
    \ tri(n: $0 - 2) + tri(n: $0 - 3)\n                   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824630
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    for i in 0...n {\n        if i == 0 {\n            result.append(1)\n\
    \        } else if i == 1 {\n            result.append(3)\n        } else if i\
    \ == 2 {\n            result.append(2)\n        } else if i % 2 == 0 {\n     \
    \       result.append(1 + i / 2)\n        } else {\n            result.append(result[i\
    \ - 1] + result[i - 2] + result[i - 3])\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmpgbn7jc43/tmpgbn7jc43.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b21938dec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b21935d5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b21935d5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b21935d47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgbn7jc43                        0x0000562dbb49f61a <unavailable> + 5658

    5    libc.so.6                          0x00002b2193aca460 __libc_start_main +
    245

    6    tmpgbn7jc43                        0x0000562dbb49f259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659824630
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [1, 3, 2]\n    if n < 3 {\n        return Array(result[0...n])\n    }\n  \
    \  for i in 3...n {\n        result.append(result[i - 1] + result[i - 2] + result[i\
    \ - 3])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(tri(n:\
    \ 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5)\
    \ == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmpayls0e05/tmpayls0e05.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2c38bbcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2c388b3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2c388b3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2c388b27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpayls0e05                        0x000055778ee9c7ba <unavailable> + 6074

    5    libc.so.6                          0x00002b2c38da8460 __libc_start_main +
    245

    6    tmpayls0e05                        0x000055778ee9c3f9 <unavailable> + 5113

    '
  stdout: ''
  timestamp: 1659824630
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    guard n\
    \ > 0 else { return [] }\n    var result = [1, 3, 2]\n    var i = 3\n    while\
    \ i <= n {\n        if i % 2 == 0 {\n            result.append(1 + i / 2)\n  \
    \      } else {\n            result.append(result[i - 1] + result[i - 2] + result[i\
    \ + 1])\n        }\n        i += 1\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3,\
    \ 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1,\
    \ 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n:\
    \ 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n:\
    \ 1) == [1, 3])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b1edba5bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1edb752561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b1edb752286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b1edb75213c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b1edb751bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b1edb551e83 <unavailable> + 188035

    6    tmp2svewl4y                        0x000055d5b903a221 <unavailable> + 8737

    7    tmp2svewl4y                        0x000055d5b90393fb <unavailable> + 5115

    8    libc.so.6                          0x00002b1edbc47460 __libc_start_main +
    245

    9    tmp2svewl4y                        0x000055d5b9039119 <unavailable> + 4377

    '
  stdout: ''
  timestamp: 1659824630
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [1, 3, 2]\n    if n < 3 {\n        return Array(result[0...n])\n    }\n  \
    \  for i in 3...n {\n        if i % 2 == 0 {\n            result.append(1 + i\
    \ / 2)\n        } else {\n            result.append(result[i - 1] + result[i -\
    \ 2] + result[i + 1])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3,\
    \ 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1,\
    \ 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n:\
    \ 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n:\
    \ 1) == [1, 3])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002aac01482c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aac01179561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002aac01179286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002aac0117913c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002aac01178bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002aac00f78e83 <unavailable> + 188035

    6    tmp0oi1klnf                        0x0000563f4e17b843 <unavailable> + 10307

    7    tmp0oi1klnf                        0x0000563f4e17a6db <unavailable> + 5851

    8    libc.so.6                          0x00002aac0166e460 __libc_start_main +
    245

    9    tmp0oi1klnf                        0x0000563f4e17a3f9 <unavailable> + 5113

    '
  stdout: ''
  timestamp: 1659824630
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    for i in 0...n {\n        if i == 0 {\n            result.append(1)\n\
    \        } else if i == 1 {\n            result.append(3)\n        } else if i\
    \ == 2 {\n            result.append(2)\n        } else if i % 2 == 0 {\n     \
    \       result.append(1 + i / 2)\n        } else {\n            result.append(result[i\
    \ - 1] + result[i - 2] + result[i - 3])\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmpgbn7jc43/tmpgbn7jc43.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b21938dec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b21935d5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b21935d5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b21935d47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgbn7jc43                        0x0000562dbb49f61a <unavailable> + 5658

    5    libc.so.6                          0x00002b2193aca460 __libc_start_main +
    245

    6    tmpgbn7jc43                        0x0000562dbb49f259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659824630
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [1, 3, 2]\n    if n < 3 {\n        return Array(result[0...n])\n    }\n  \
    \  for i in 3...n {\n        if i % 2 == 0 {\n            result.append(1 + i\
    \ / 2)\n        } else {\n            result.append(result[i - 1] + result[i -\
    \ 2] + result[i + 1])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3,\
    \ 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1,\
    \ 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n:\
    \ 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n:\
    \ 1) == [1, 3])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002aac01482c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aac01179561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002aac01179286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002aac0117913c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002aac01178bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002aac00f78e83 <unavailable> + 188035

    6    tmp0oi1klnf                        0x0000563f4e17b843 <unavailable> + 10307

    7    tmp0oi1klnf                        0x0000563f4e17a6db <unavailable> + 5851

    8    libc.so.6                          0x00002aac0166e460 __libc_start_main +
    245

    9    tmp0oi1klnf                        0x0000563f4e17a3f9 <unavailable> + 5113

    '
  stdout: ''
  timestamp: 1659824630
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [1, 3, 2]\n    guard n > 2 else { return result }\n    for i in 3...n {\n\
    \        result.append(i % 2 == 0 ? 1 + i / 2 : result[i - 1] + result[i - 2]\
    \ + result[i + 1])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\n\
    assert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3,\
    \ 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1,\
    \ 3])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ae889c51c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae889948561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ae889948286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ae88994813c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ae889947bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ae889747e83 <unavailable> + 188035

    6    tmpyix3dkrm                        0x000055db61fb1444 <unavailable> + 9284

    7    tmpyix3dkrm                        0x000055db61fb04eb <unavailable> + 5355

    8    libc.so.6                          0x00002ae889e3d460 __libc_start_main +
    245

    9    tmpyix3dkrm                        0x000055db61fb0209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659824630
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var tri\
    \ = [1, 3, 2]\n    for i in 3...n {\n        tri.append(tri[i - 1] + tri[i - 2]\
    \ + tri[i - 3])\n    }\n    return tri\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n:\
    \ 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmpw8z9hlw6/tmpw8z9hlw6.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac6d7c36c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac6d792db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac6d792d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac6d792c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpw8z9hlw6                        0x000055c8144235ca <unavailable> + 5578

    5    libc.so.6                          0x00002ac6d7e22460 __libc_start_main +
    245

    6    tmpw8z9hlw6                        0x000055c814423209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659824630
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [1, 3, 2]\n    for i in 3...n {\n        if i % 2 == 0 {\n            result.append(1\
    \ + i / 2)\n        } else {\n            result.append(result[i - 1] + result[i\
    \ - 2] + result[i + 1])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3,\
    \ 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1,\
    \ 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n:\
    \ 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n:\
    \ 1) == [1, 3])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ad2048b0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad2045a7561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ad2045a7286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ad2045a713c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ad2045a6bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ad2043a6e83 <unavailable> + 188035

    6    tmphoo0nmhz                        0x000056384653d419 <unavailable> + 9241

    7    tmphoo0nmhz                        0x000056384653c4eb <unavailable> + 5355

    8    libc.so.6                          0x00002ad204a9c460 __libc_start_main +
    245

    9    tmphoo0nmhz                        0x000056384653c209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659824630
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [1, 3, 2]\n    if n <= 2 {\n        return Array(result[0...n])\n    }\n \
    \   for i in 3...n {\n        result.append(result[i - 1] + result[i - 2] + result[i\
    \ - 3])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(tri(n:\
    \ 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5)\
    \ == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmpp0wm8n_e/tmpp0wm8n_e.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b36661e0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3665ed7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3665ed7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3665ed67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp0wm8n_e                        0x000056439b6ea7ba <unavailable> + 6074

    5    libc.so.6                          0x00002b36663cc460 __libc_start_main +
    245

    6    tmpp0wm8n_e                        0x000056439b6ea3f9 <unavailable> + 5113

    '
  stdout: ''
  timestamp: 1659824630
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [1, 3, 2]\n    guard n > 2 else { return result }\n    for i in 3...n {\n\
    \        result.append(i % 2 == 0 ? 1 + i / 2 : result[i - 1] + result[i - 2]\
    \ + result[i + 1])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\n\
    assert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3,\
    \ 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1,\
    \ 3])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ae889c51c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae889948561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ae889948286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ae88994813c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ae889947bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ae889747e83 <unavailable> + 188035

    6    tmpyix3dkrm                        0x000055db61fb1444 <unavailable> + 9284

    7    tmpyix3dkrm                        0x000055db61fb04eb <unavailable> + 5355

    8    libc.so.6                          0x00002ae889e3d460 __libc_start_main +
    245

    9    tmpyix3dkrm                        0x000055db61fb0209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659824630
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [1, 3, 2]\n    if n < 3 {\n        return Array(result[0...n])\n    }\n  \
    \  for i in 3...n {\n        if i % 2 == 0 {\n            result.append(1 + i\
    \ / 2)\n        } else {\n            result.append(result[i - 1] + result[i -\
    \ 2] + result[i + 1])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3,\
    \ 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1,\
    \ 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n:\
    \ 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n:\
    \ 1) == [1, 3])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002aac01482c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aac01179561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002aac01179286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002aac0117913c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002aac01178bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002aac00f78e83 <unavailable> + 188035

    6    tmp0oi1klnf                        0x0000563f4e17b843 <unavailable> + 10307

    7    tmp0oi1klnf                        0x0000563f4e17a6db <unavailable> + 5851

    8    libc.so.6                          0x00002aac0166e460 __libc_start_main +
    245

    9    tmp0oi1klnf                        0x0000563f4e17a3f9 <unavailable> + 5113

    '
  stdout: ''
  timestamp: 1659824630
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    if n ==\
    \ 0 {\n        return [1]\n    }\n    if n == 1 {\n        return [1, 3]\n   \
    \ }\n    if n == 2 {\n        return [1, 3, 2]\n    }\n    var result = [1, 3,\
    \ 2]\n    var i = 3\n    while i <= n {\n        if i % 2 == 0 {\n           \
    \ result.append(1 + i / 2)\n        } else {\n            result.append(result[i\
    \ - 1] + result[i - 2] + result[i + 1])\n        }\n        i += 1\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(tri(n: 3) == [1, 3,\
    \ 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2,\
    \ 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    assert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002af196b6ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af196861561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002af196861286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002af19686113c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002af196860bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002af196660e83 <unavailable> + 188035

    6    tmpux9k7arg                        0x000055aac0a222de <unavailable> + 8926

    7    tmpux9k7arg                        0x000055aac0a213fb <unavailable> + 5115

    8    libc.so.6                          0x00002af196d56460 __libc_start_main +
    245

    9    tmpux9k7arg                        0x000055aac0a21119 <unavailable> + 4377

    '
  stdout: ''
  timestamp: 1659824630
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    for i in 0...n {\n        if i == 0 {\n            result.append(1)\n\
    \        } else if i == 1 {\n            result.append(3)\n        } else if i\
    \ == 2 {\n            result.append(2)\n        } else if i % 2 == 0 {\n     \
    \       result.append(1 + i / 2)\n        } else {\n            result.append(result[i\
    \ - 1] + result[i - 2] + result[i - 3])\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmpgbn7jc43/tmpgbn7jc43.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b21938dec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b21935d5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b21935d5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b21935d47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgbn7jc43                        0x0000562dbb49f61a <unavailable> + 5658

    5    libc.so.6                          0x00002b2193aca460 __libc_start_main +
    245

    6    tmpgbn7jc43                        0x0000562dbb49f259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659824630
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [1, 3, 2]\n    if n == 0 {\n        return [1]\n    } else if n == 1 {\n \
    \       return [1, 3]\n    } else if n == 2 {\n        return [1, 3, 2]\n    }\
    \ else {\n        for i in 3...n {\n            if i % 2 == 0 {\n            \
    \    result.append(1 + i / 2)\n            } else {\n                result.append(result[i\
    \ - 1] + result[i - 2] + result[i - 3])\n            }\n        }\n    }\n   \
    \ return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(tri(n: 3) == [1, 3,\
    \ 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2,\
    \ 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    assert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmpxbxowlxy/tmpxbxowlxy.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7a2b542c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7a2b239b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7a2b239988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7a2b2387b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxbxowlxy                        0x0000562dddbd15ca <unavailable> + 5578

    5    libc.so.6                          0x00002b7a2b72e460 __libc_start_main +
    245

    6    tmpxbxowlxy                        0x0000562dddbd1209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659824630
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [1, 3, 2]\n    guard n > 2 else { return result }\n    for i in 3...n {\n\
    \        result.append(i % 2 == 0 ? 1 + i / 2 : result[i - 1] + result[i - 2]\
    \ + result[i + 1])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\n\
    assert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3,\
    \ 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1,\
    \ 3])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ae889c51c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae889948561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ae889948286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ae88994813c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ae889947bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ae889747e83 <unavailable> + 188035

    6    tmpyix3dkrm                        0x000055db61fb1444 <unavailable> + 9284

    7    tmpyix3dkrm                        0x000055db61fb04eb <unavailable> + 5355

    8    libc.so.6                          0x00002ae889e3d460 __libc_start_main +
    245

    9    tmpyix3dkrm                        0x000055db61fb0209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659824630
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [1, 3, 2]\n    if n < 3 {\n        return Array(result[0...n])\n    }\n  \
    \  for i in 3...n {\n        result.append(result[i - 1] + result[i - 2] + result[i\
    \ - 3])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(tri(n:\
    \ 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5)\
    \ == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmpayls0e05/tmpayls0e05.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2c38bbcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2c388b3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2c388b3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2c388b27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpayls0e05                        0x000055778ee9c7ba <unavailable> + 6074

    5    libc.so.6                          0x00002b2c38da8460 __libc_start_main +
    245

    6    tmpayls0e05                        0x000055778ee9c3f9 <unavailable> + 5113

    '
  stdout: ''
  timestamp: 1659824630
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [1, 3, 2]\n    if n < 3 {\n        return Array(result[0...n])\n    }\n  \
    \  for i in 3...n {\n        result.append(result[i - 1] + result[i - 2] + result[i\
    \ - 3])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(tri(n:\
    \ 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5)\
    \ == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmpayls0e05/tmpayls0e05.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2c38bbcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2c388b3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2c388b3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2c388b27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpayls0e05                        0x000055778ee9c7ba <unavailable> + 6074

    5    libc.so.6                          0x00002b2c38da8460 __libc_start_main +
    245

    6    tmpayls0e05                        0x000055778ee9c3f9 <unavailable> + 5113

    '
  stdout: ''
  timestamp: 1659824630
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    if n ==\
    \ 0 {\n        return [1]\n    }\n    if n == 1 {\n        return [1, 3]\n   \
    \ }\n    if n == 2 {\n        return [1, 3, 2]\n    }\n    var result = [1, 3,\
    \ 2]\n    for i in 3...n {\n        result.append(result[i - 1] + result[i - 2]\
    \ + result[i - 3])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\n\
    assert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3,\
    \ 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1,\
    \ 3])"
  status: Exception
  stderr: 'tmplb_2ubm0/tmplb_2ubm0.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b90f8527c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b90f821eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b90f821e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b90f821d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplb_2ubm0                        0x00005638d7c845ca <unavailable> + 5578

    5    libc.so.6                          0x00002b90f8713460 __libc_start_main +
    245

    6    tmplb_2ubm0                        0x00005638d7c84209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659824630
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    for i in 0...n {\n        if i == 0 {\n            result.append(1)\n\
    \        } else if i == 1 {\n            result.append(3)\n        } else if i\
    \ == 2 {\n            result.append(2)\n        } else if i % 2 == 0 {\n     \
    \       result.append(1 + i / 2)\n        } else {\n            result.append(result[i\
    \ - 1] + result[i - 2] + result[i - 3])\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmpgbn7jc43/tmpgbn7jc43.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b21938dec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b21935d5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b21935d5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b21935d47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgbn7jc43                        0x0000562dbb49f61a <unavailable> + 5658

    5    libc.so.6                          0x00002b2193aca460 __libc_start_main +
    245

    6    tmpgbn7jc43                        0x0000562dbb49f259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659824630
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    for i in 0...n {\n        result.append(tri(n: i))\n    }\n \
    \   return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(tri(n: 3) == [1, 3,\
    \ 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2,\
    \ 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    assert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmp5rx3h4f5.swift:21:16: error: no exact matches in call to instance\
    \ method 'append'\n        result.append(tri(n: i))\n               ^\nSwift.Array:7:37:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(contentsOf:)')\n\
    \    @inlinable public mutating func append<S>(contentsOf newElements: __owned\
    \ S) where Element == S.Element, S : Sequence\n                              \
    \      ^\nSwift.RangeReplaceableCollection:5:37: note: incorrect labels for candidate\
    \ (have: '(_:)', expected: '(contentsOf:)')\n    @inlinable public mutating func\
    \ append<S>(contentsOf newElements: __owned S) where S : Sequence, Self.Element\
    \ == S.Element\n                                    ^\n"
  stdout: ''
  timestamp: 1659824629
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [1, 3, 2]\n    if n == 0 {\n        return [1]\n    } else if n == 1 {\n \
    \       return [1, 3]\n    } else if n == 2 {\n        return [1, 3, 2]\n    }\
    \ else {\n        for i in 3...n {\n            if i % 2 == 0 {\n            \
    \    result.append(1 + i / 2)\n            } else {\n                result.append(result[i\
    \ - 1] + result[i - 2] + result[i - 3])\n            }\n        }\n    }\n   \
    \ return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(tri(n: 3) == [1, 3,\
    \ 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2,\
    \ 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    assert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmpxbxowlxy/tmpxbxowlxy.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7a2b542c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7a2b239b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7a2b239988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7a2b2387b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxbxowlxy                        0x0000562dddbd15ca <unavailable> + 5578

    5    libc.so.6                          0x00002b7a2b72e460 __libc_start_main +
    245

    6    tmpxbxowlxy                        0x0000562dddbd1209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659824630
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    if n == 0 {\n        return result\n    }\n    result.append(1)\n\
    \    if n == 1 {\n        return result\n    }\n    result.append(3)\n    if n\
    \ == 2 {\n        return result\n    }\n    result.append(2)\n    if n == 3 {\n\
    \        return result\n    }\n    for i in 3...n {\n        if i % 2 == 0 {\n\
    \            result.append(1 + i / 2)\n        } else {\n            result.append(result[i\
    \ - 1] + result[i - 2] + result[i + 1])\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmpyh6u9mnb/tmpyh6u9mnb.swift:58: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b43aaabec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b43aa7b5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b43aa7b5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b43aa7b47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyh6u9mnb                        0x0000562f86ce361a <unavailable> + 5658

    5    libc.so.6                          0x00002b43aacaa460 __libc_start_main +
    245

    6    tmpyh6u9mnb                        0x0000562f86ce3259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659824630
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [1, 3, 2]\n    for i in 3...n {\n        if i % 2 == 0 {\n            result.append(1\
    \ + i / 2)\n        } else {\n            result.append(result[i - 1] + result[i\
    \ - 2] + result[i + 1])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3,\
    \ 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1,\
    \ 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n:\
    \ 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n:\
    \ 1) == [1, 3])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ad2048b0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad2045a7561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ad2045a7286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ad2045a713c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ad2045a6bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ad2043a6e83 <unavailable> + 188035

    6    tmphoo0nmhz                        0x000056384653d419 <unavailable> + 9241

    7    tmphoo0nmhz                        0x000056384653c4eb <unavailable> + 5355

    8    libc.so.6                          0x00002ad204a9c460 __libc_start_main +
    245

    9    tmphoo0nmhz                        0x000056384653c209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659824630
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [1, 3, 2]\n    if n < 3 {\n        return Array(result[0...n])\n    }\n  \
    \  for i in 3...n {\n        result.append(result[i - 1] + result[i - 2] + result[i\
    \ - 3])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(tri(n:\
    \ 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5)\
    \ == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmpayls0e05/tmpayls0e05.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2c38bbcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2c388b3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2c388b3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2c388b27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpayls0e05                        0x000055778ee9c7ba <unavailable> + 6074

    5    libc.so.6                          0x00002b2c38da8460 __libc_start_main +
    245

    6    tmpayls0e05                        0x000055778ee9c3f9 <unavailable> + 5113

    '
  stdout: ''
  timestamp: 1659824630
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result:\
    \ [Int] = [1, 3, 2]\n    if n <= 2 {\n        return Array(result[0...n])\n  \
    \  }\n    for i in 3...n {\n        if i % 2 == 0 {\n            result.append(1\
    \ + i / 2)\n        } else {\n            result.append(result[i - 1] + result[i\
    \ - 2] + result[i + 1])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3,\
    \ 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1,\
    \ 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n:\
    \ 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n:\
    \ 1) == [1, 3])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b29918acc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b29915a3561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b29915a3286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b29915a313c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b29915a2bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b29913a2e83 <unavailable> + 188035

    6    tmpr6yys_ch                        0x000055b6a1b8e84f <unavailable> + 10319

    7    tmpr6yys_ch                        0x000055b6a1b8d6db <unavailable> + 5851

    8    libc.so.6                          0x00002b2991a98460 __libc_start_main +
    245

    9    tmpr6yys_ch                        0x000055b6a1b8d3f9 <unavailable> + 5113

    '
  stdout: ''
  timestamp: 1659824630
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    for i in 0...n {\n        if i == 0 {\n            result.append(1)\n\
    \        } else if i == 1 {\n            result.append(3)\n        } else if i\
    \ == 2 {\n            result.append(2)\n        } else if i % 2 == 0 {\n     \
    \       result.append(1 + i / 2)\n        } else {\n            result.append(result[i\
    \ - 1] + result[i - 2] + result[i - 3])\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmpgbn7jc43/tmpgbn7jc43.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b21938dec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b21935d5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b21935d5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b21935d47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgbn7jc43                        0x0000562dbb49f61a <unavailable> + 5658

    5    libc.so.6                          0x00002b2193aca460 __libc_start_main +
    245

    6    tmpgbn7jc43                        0x0000562dbb49f259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659824630
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [1, 3, 2]\n    for i in 3...n {\n        if i % 2 == 0 {\n            result.append(1\
    \ + i / 2)\n        } else {\n            result.append(result[i - 1] + result[i\
    \ - 2] + result[i + 1])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3,\
    \ 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1,\
    \ 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n:\
    \ 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n:\
    \ 1) == [1, 3])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ad2048b0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad2045a7561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ad2045a7286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ad2045a713c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ad2045a6bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ad2043a6e83 <unavailable> + 188035

    6    tmphoo0nmhz                        0x000056384653d419 <unavailable> + 9241

    7    tmphoo0nmhz                        0x000056384653c4eb <unavailable> + 5355

    8    libc.so.6                          0x00002ad204a9c460 __libc_start_main +
    245

    9    tmphoo0nmhz                        0x000056384653c209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659824630
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    if n ==\
    \ 0 {\n        return [1]\n    }\n    if n == 1 {\n        return [1, 3]\n   \
    \ }\n    if n == 2 {\n        return [1, 3, 2]\n    }\n    var result = [1, 3,\
    \ 2]\n    for i in 3...n {\n        result.append(result[i - 1] + result[i - 2]\
    \ + result[i - 3])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\n\
    assert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3,\
    \ 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1,\
    \ 3])"
  status: Exception
  stderr: 'tmplb_2ubm0/tmplb_2ubm0.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b90f8527c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b90f821eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b90f821e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b90f821d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplb_2ubm0                        0x00005638d7c845ca <unavailable> + 5578

    5    libc.so.6                          0x00002b90f8713460 __libc_start_main +
    245

    6    tmplb_2ubm0                        0x00005638d7c84209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659824630
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [1, 3, 2]\n    guard n > 2 else { return Array(result[0...n]) }\n    for i\
    \ in 3...n {\n        if i % 2 == 0 {\n            result.append(1 + i / 2)\n\
    \        } else {\n            result.append(result[i - 1] + result[i - 2] + result[i\
    \ + 1])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\n\
    assert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3,\
    \ 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1,\
    \ 3])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b65834efc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b65831e6561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b65831e6286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b65831e613c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b65831e5bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b6582fe5e83 <unavailable> + 188035

    6    tmp8v1gq5gk                        0x000055ae172f667a <unavailable> + 9850

    7    tmp8v1gq5gk                        0x000055ae172f56db <unavailable> + 5851

    8    libc.so.6                          0x00002b65836db460 __libc_start_main +
    245

    9    tmp8v1gq5gk                        0x000055ae172f53f9 <unavailable> + 5113

    '
  stdout: ''
  timestamp: 1659824630
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [1, 3, 2]\n    if n == 0 {\n        return [1]\n    } else if n == 1 {\n \
    \       return [1, 3]\n    } else if n == 2 {\n        return [1, 3, 2]\n    }\
    \ else {\n        for i in 3...n {\n            if i % 2 == 0 {\n            \
    \    result.append(1 + i / 2)\n            } else {\n                result.append(result[i\
    \ - 1] + result[i - 2] + result[i - 3])\n            }\n        }\n    }\n   \
    \ return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(tri(n: 3) == [1, 3,\
    \ 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2,\
    \ 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    assert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmpxbxowlxy/tmpxbxowlxy.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7a2b542c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7a2b239b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7a2b239988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7a2b2387b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxbxowlxy                        0x0000562dddbd15ca <unavailable> + 5578

    5    libc.so.6                          0x00002b7a2b72e460 __libc_start_main +
    245

    6    tmpxbxowlxy                        0x0000562dddbd1209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659824630
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    for i in 0...n {\n        result.append(tri(n: i))\n    }\n \
    \   return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(tri(n: 3) == [1, 3,\
    \ 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2,\
    \ 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    assert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmp5rx3h4f5.swift:21:16: error: no exact matches in call to instance\
    \ method 'append'\n        result.append(tri(n: i))\n               ^\nSwift.Array:7:37:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(contentsOf:)')\n\
    \    @inlinable public mutating func append<S>(contentsOf newElements: __owned\
    \ S) where Element == S.Element, S : Sequence\n                              \
    \      ^\nSwift.RangeReplaceableCollection:5:37: note: incorrect labels for candidate\
    \ (have: '(_:)', expected: '(contentsOf:)')\n    @inlinable public mutating func\
    \ append<S>(contentsOf newElements: __owned S) where S : Sequence, Self.Element\
    \ == S.Element\n                                    ^\n"
  stdout: ''
  timestamp: 1659824629
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [1, 3, 2]\n    if n <= 2 {\n        return Array(result[0...n])\n    }\n \
    \   for i in 3...n {\n        if i % 2 == 0 {\n            result.append(1 + i\
    \ / 2)\n        } else {\n            result.append(result[i - 1] + result[i -\
    \ 2] + result[i + 1])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3,\
    \ 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1,\
    \ 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n:\
    \ 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n:\
    \ 1) == [1, 3])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b65b1890c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b65b1587561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b65b1587286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b65b158713c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b65b1586bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b65b1386e83 <unavailable> + 188035

    6    tmpk57ye95c                        0x000055c2c4b6284f <unavailable> + 10319

    7    tmpk57ye95c                        0x000055c2c4b616db <unavailable> + 5851

    8    libc.so.6                          0x00002b65b1a7c460 __libc_start_main +
    245

    9    tmpk57ye95c                        0x000055c2c4b613f9 <unavailable> + 5113

    '
  stdout: ''
  timestamp: 1659824630
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [1, 3, 2]\n    if n < 3 {\n        return Array(result[0...n])\n    }\n  \
    \  for i in 3...n {\n        result.append(result[i - 1] + result[i - 2] + result[i\
    \ - 3])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(tri(n:\
    \ 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5)\
    \ == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmpayls0e05/tmpayls0e05.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2c38bbcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2c388b3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2c388b3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2c388b27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpayls0e05                        0x000055778ee9c7ba <unavailable> + 6074

    5    libc.so.6                          0x00002b2c38da8460 __libc_start_main +
    245

    6    tmpayls0e05                        0x000055778ee9c3f9 <unavailable> + 5113

    '
  stdout: ''
  timestamp: 1659824630
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [1, 3, 2]\n    for i in 3...n {\n        if i % 2 == 0 {\n            result.append(1\
    \ + i / 2)\n        } else {\n            result.append(result[i - 1] + result[i\
    \ - 2] + result[i + 1])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3,\
    \ 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1,\
    \ 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n:\
    \ 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n:\
    \ 1) == [1, 3])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ad2048b0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad2045a7561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ad2045a7286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ad2045a713c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ad2045a6bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ad2043a6e83 <unavailable> + 188035

    6    tmphoo0nmhz                        0x000056384653d419 <unavailable> + 9241

    7    tmphoo0nmhz                        0x000056384653c4eb <unavailable> + 5355

    8    libc.so.6                          0x00002ad204a9c460 __libc_start_main +
    245

    9    tmphoo0nmhz                        0x000056384653c209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659824630
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [1, 3, 2]\n    if n < 3 {\n        return Array(result[0...n])\n    }\n  \
    \  var i = 3\n    while i <= n {\n        let newValue = result[i - 1] + result[i\
    \ - 2] + result[i - 3]\n        result.append(newValue)\n        i += 1\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(tri(n: 3) == [1, 3,\
    \ 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2,\
    \ 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    assert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmph08x8u6c/tmph08x8u6c.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba1e7fd2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba1e7cc9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba1e7cc9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba1e7cc87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmph08x8u6c                        0x0000562466ff56ca <unavailable> + 5834

    5    libc.so.6                          0x00002ba1e81be460 __libc_start_main +
    245

    6    tmph08x8u6c                        0x0000562466ff5309 <unavailable> + 4873

    '
  stdout: ''
  timestamp: 1659824630
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [1, 3, 2]\n    guard n > 2 else { return result }\n    for i in 3...n {\n\
    \        let last = result.last!\n        let secondLast = result[result.count\
    \ - 2]\n        let thirdLast = result[result.count - 3]\n        result.append(i\
    \ % 2 == 0 ? 1 + i / 2 : last + secondLast + thirdLast)\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmpv2wv5z4f/tmpv2wv5z4f.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af22426bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af223f62b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af223f62988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af223f617b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpv2wv5z4f                        0x0000561f8a42d6ba <unavailable> + 5818

    5    libc.so.6                          0x00002af224457460 __libc_start_main +
    245

    6    tmpv2wv5z4f                        0x0000561f8a42d2f9 <unavailable> + 4857

    '
  stdout: ''
  timestamp: 1659824630
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [1, 3, 2]\n    guard n > 2 else { return result }\n    for i in 3...n {\n\
    \        if i % 2 == 0 {\n            result.append(1 + i / 2)\n        } else\
    \ {\n            result.append(result[i - 1] + result[i - 2] + result[i + 1])\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n:\
    \ 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b4402e35c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4402b2c561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b4402b2c286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b4402b2c13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b4402b2bbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b440292be83 <unavailable> + 188035

    6    tmpbqjdaz6i                        0x00005566c08d7454 <unavailable> + 9300

    7    tmpbqjdaz6i                        0x00005566c08d64eb <unavailable> + 5355

    8    libc.so.6                          0x00002b4403021460 __libc_start_main +
    245

    9    tmpbqjdaz6i                        0x00005566c08d6209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659824630
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    for i in 0...n {\n        if i == 0 {\n            result.append(1)\n\
    \        } else if i == 1 {\n            result.append(3)\n        } else if i\
    \ == 2 {\n            result.append(2)\n        } else {\n            result.append(result[i\
    \ - 1] + result[i - 2] + result[i - 3])\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmpxn6l2q4f/tmpxn6l2q4f.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9b817b1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9b814a8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9b814a8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9b814a77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxn6l2q4f                        0x0000557b0d60561a <unavailable> + 5658

    5    libc.so.6                          0x00002b9b8199d460 __libc_start_main +
    245

    6    tmpxn6l2q4f                        0x0000557b0d605259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659824630
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [1, 3, 2]\n    if n <= 2 {\n        return result[0...n]\n    }\n    for i\
    \ in 3...n {\n        result.append(i % 2 == 0 ? 1 + i / 2 : result[i - 1] + result[i\
    \ - 2] + result[i - 3])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2,\
    \ 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3,\
    \ 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n:\
    \ 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n:\
    \ 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmptaoyprbd.swift:21:22: error: no 'subscript' candidates produce\
    \ the expected contextual result type '[Int]'\n        return result[0...n]\n\
    \                     ^\nSwift.Collection:2:23: note: 'subscript(_:)' produces\
    \ 'ArraySlice<Int>', not the expected contextual result type '[Int]'\n    @inlinable\
    \ public subscript<R>(r: R) -> Self.SubSequence where R : RangeExpression, Self.Index\
    \ == R.Bound { get }\n                      ^\nSwift.MutableCollection:2:23: note:\
    \ 'subscript(_:)' produces '@lvalue ArraySlice<Int>', not the expected contextual\
    \ result type '[Int]'\n    @inlinable public subscript<R>(r: R) -> Self.SubSequence\
    \ where R : RangeExpression, Self.Index == R.Bound { get set }\n             \
    \         ^\n"
  stdout: ''
  timestamp: 1659824630
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    for i in 0...n {\n        switch i {\n        case 0:\n     \
    \       result.append(1)\n        case 1:\n            result.append(3)\n    \
    \    case 2:\n            result.append(2)\n        default:\n            result.append(result[i\
    \ - 1] + result[i - 2] + result[i - 3])\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmpz5kte2px/tmpz5kte2px.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1daa959c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1daa650b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1daa650988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1daa64f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpz5kte2px                        0x0000558d7612661a <unavailable> + 5658

    5    libc.so.6                          0x00002b1daab45460 __libc_start_main +
    245

    6    tmpz5kte2px                        0x0000558d76126259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659824630
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [1, 3, 2]\n    if n == 0 {\n        return [1]\n    } else if n == 1 {\n \
    \       return [1, 3]\n    } else if n == 2 {\n        return [1, 3, 2]\n    }\
    \ else {\n        for i in 3...n {\n            if i % 2 == 0 {\n            \
    \    result.append(1 + i / 2)\n            } else {\n                result.append(result[i\
    \ - 1] + result[i - 2] + result[i - 3])\n            }\n        }\n    }\n   \
    \ return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(tri(n: 3) == [1, 3,\
    \ 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2,\
    \ 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    assert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmpxbxowlxy/tmpxbxowlxy.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7a2b542c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7a2b239b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7a2b239988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7a2b2387b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxbxowlxy                        0x0000562dddbd15ca <unavailable> + 5578

    5    libc.so.6                          0x00002b7a2b72e460 __libc_start_main +
    245

    6    tmpxbxowlxy                        0x0000562dddbd1209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659824630
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [1, 3, 2]\n    if n == 0 {\n        return [1]\n    } else if n == 1 {\n \
    \       return [1, 3]\n    } else if n == 2 {\n        return [1, 3, 2]\n    }\
    \ else {\n        for i in 3...n {\n            if i % 2 == 0 {\n            \
    \    result.append(1 + i / 2)\n            } else {\n                result.append(result[i\
    \ - 1] + result[i - 2] + result[i + 1])\n            }\n        }\n    }\n   \
    \ return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(tri(n: 3) == [1, 3,\
    \ 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2,\
    \ 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    assert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b0d5b059c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0d5ad50561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b0d5ad50286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b0d5ad5013c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b0d5ad4fbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b0d5ab4fe83 <unavailable> + 188035

    6    tmpan36m1nn                        0x000055c784a3653a <unavailable> + 9530

    7    tmpan36m1nn                        0x000055c784a354eb <unavailable> + 5355

    8    libc.so.6                          0x00002b0d5b245460 __libc_start_main +
    245

    9    tmpan36m1nn                        0x000055c784a35209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659824630
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [1, 3, 2]\n    for i in 3...n {\n        if i % 2 == 0 {\n            result.append(1\
    \ + i / 2)\n        } else {\n            result.append(result[i - 1] + result[i\
    \ - 2] + result[i + 1])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3,\
    \ 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1,\
    \ 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n:\
    \ 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n:\
    \ 1) == [1, 3])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ad2048b0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad2045a7561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ad2045a7286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ad2045a713c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ad2045a6bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ad2043a6e83 <unavailable> + 188035

    6    tmphoo0nmhz                        0x000056384653d419 <unavailable> + 9241

    7    tmphoo0nmhz                        0x000056384653c4eb <unavailable> + 5355

    8    libc.so.6                          0x00002ad204a9c460 __libc_start_main +
    245

    9    tmphoo0nmhz                        0x000056384653c209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659824630
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [1, 3, 2]\n    if n <= 2 {\n        return Array(result[0...n])\n    }\n \
    \   for i in 3...n {\n        if i % 2 == 0 {\n            result.append(1 + i\
    \ / 2)\n        } else {\n            result.append(result[i - 1] + result[i -\
    \ 2] + result[i + 1])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3,\
    \ 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1,\
    \ 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n:\
    \ 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n:\
    \ 1) == [1, 3])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b65b1890c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b65b1587561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b65b1587286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b65b158713c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b65b1586bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b65b1386e83 <unavailable> + 188035

    6    tmpk57ye95c                        0x000055c2c4b6284f <unavailable> + 10319

    7    tmpk57ye95c                        0x000055c2c4b616db <unavailable> + 5851

    8    libc.so.6                          0x00002b65b1a7c460 __libc_start_main +
    245

    9    tmpk57ye95c                        0x000055c2c4b613f9 <unavailable> + 5113

    '
  stdout: ''
  timestamp: 1659824630
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    for i in 0...n {\n        if i == 0 {\n            result.append(1)\n\
    \        } else if i == 1 {\n            result.append(3)\n        } else if i\
    \ == 2 {\n            result.append(2)\n        } else {\n            result.append(result[i\
    \ - 1] + result[i - 2] + result[i - 3])\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmpxn6l2q4f/tmpxn6l2q4f.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9b817b1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9b814a8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9b814a8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9b814a77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxn6l2q4f                        0x0000557b0d60561a <unavailable> + 5658

    5    libc.so.6                          0x00002b9b8199d460 __libc_start_main +
    245

    6    tmpxn6l2q4f                        0x0000557b0d605259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659824630
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [1, 3, 2]\n    if n < 3 {\n        return Array(result[0...n])\n    }\n  \
    \  for i in 3...n {\n        let next = result[i - 1] + result[i - 2] + result[i\
    \ - 3]\n        result.append(next)\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3,\
    \ 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1,\
    \ 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n:\
    \ 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n:\
    \ 1) == [1, 3])"
  status: Exception
  stderr: 'tmp6bxieib0/tmp6bxieib0.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adb0e159c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adb0de50b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adb0de50988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adb0de4f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6bxieib0                        0x000055649e2027ba <unavailable> + 6074

    5    libc.so.6                          0x00002adb0e345460 __libc_start_main +
    245

    6    tmp6bxieib0                        0x000055649e2023f9 <unavailable> + 5113

    '
  stdout: ''
  timestamp: 1659824630
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    if n == 0 {\n        return result\n    }\n    result.append(1)\n\
    \    if n == 1 {\n        return result\n    }\n    result.append(3)\n    if n\
    \ == 2 {\n        return result\n    }\n    result.append(2)\n    if n == 3 {\n\
    \        return result\n    }\n    for i in 3...n {\n        if i % 2 == 0 {\n\
    \            result.append(1 + i / 2)\n        } else {\n            result.append(result[i\
    \ - 1] + result[i - 2] + result[i + 1])\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmpyh6u9mnb/tmpyh6u9mnb.swift:58: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b43aaabec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b43aa7b5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b43aa7b5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b43aa7b47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyh6u9mnb                        0x0000562f86ce361a <unavailable> + 5658

    5    libc.so.6                          0x00002b43aacaa460 __libc_start_main +
    245

    6    tmpyh6u9mnb                        0x0000562f86ce3259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659824630
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [1, 3, 2]\n    if n < 3 {\n        return Array(result[0...n])\n    }\n  \
    \  for i in 3...n {\n        if i % 2 == 0 {\n            result.append(1 + i\
    \ / 2)\n        } else {\n            result.append(result[i - 1] + result[i -\
    \ 2] + result[i + 1])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3,\
    \ 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1,\
    \ 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n:\
    \ 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n:\
    \ 1) == [1, 3])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002aac01482c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aac01179561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002aac01179286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002aac0117913c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002aac01178bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002aac00f78e83 <unavailable> + 188035

    6    tmp0oi1klnf                        0x0000563f4e17b843 <unavailable> + 10307

    7    tmp0oi1klnf                        0x0000563f4e17a6db <unavailable> + 5851

    8    libc.so.6                          0x00002aac0166e460 __libc_start_main +
    245

    9    tmp0oi1klnf                        0x0000563f4e17a3f9 <unavailable> + 5113

    '
  stdout: ''
  timestamp: 1659824630
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    guard n\
    \ > 0 else { return [] }\n    var result = [1, 3, 2]\n    for i in 3...n {\n \
    \       result.append(result[i - 1] + result[i - 2] + result[i - 3])\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(tri(n: 3) == [1, 3,\
    \ 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2,\
    \ 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    assert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmp9qbz1wd_/tmp9qbz1wd_.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac8954a8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac89519fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac89519f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac89519e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9qbz1wd_                        0x000055a661dbf5ca <unavailable> + 5578

    5    libc.so.6                          0x00002ac895694460 __libc_start_main +
    245

    6    tmp9qbz1wd_                        0x000055a661dbf209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659824630
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [1, 3, 2]\n    if n < 3 {\n        return Array(result[0...n])\n    }\n  \
    \  for i in 3...n {\n        result.append(result[i - 1] + result[i - 2] + result[i\
    \ - 3])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(tri(n:\
    \ 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5)\
    \ == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmpayls0e05/tmpayls0e05.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2c38bbcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2c388b3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2c388b3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2c388b27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpayls0e05                        0x000055778ee9c7ba <unavailable> + 6074

    5    libc.so.6                          0x00002b2c38da8460 __libc_start_main +
    245

    6    tmpayls0e05                        0x000055778ee9c3f9 <unavailable> + 5113

    '
  stdout: ''
  timestamp: 1659824630
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [1, 3, 2]\n    for i in 3...n {\n        result.append(result[i - 1] + result[i\
    \ - 2] + result[i - 3])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2,\
    \ 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3,\
    \ 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n:\
    \ 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n:\
    \ 1) == [1, 3])"
  status: Exception
  stderr: 'tmpgyh3xiby/tmpgyh3xiby.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7f40a13c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7f4070ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7f4070a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7f407097b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgyh3xiby                        0x0000560c21e8f5ca <unavailable> + 5578

    5    libc.so.6                          0x00002b7f40bff460 __libc_start_main +
    245

    6    tmpgyh3xiby                        0x0000560c21e8f209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659824630
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [1, 3, 2]\n    guard n > 2 else { return Array(result[0...n]) }\n    for i\
    \ in 3...n {\n        if i % 2 == 0 {\n            result.append(1 + i / 2)\n\
    \        } else {\n            result.append(result[i - 1] + result[i - 2] + result[i\
    \ + 1])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\n\
    assert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3,\
    \ 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1,\
    \ 3])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b65834efc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b65831e6561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b65831e6286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b65831e613c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b65831e5bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b6582fe5e83 <unavailable> + 188035

    6    tmp8v1gq5gk                        0x000055ae172f667a <unavailable> + 9850

    7    tmp8v1gq5gk                        0x000055ae172f56db <unavailable> + 5851

    8    libc.so.6                          0x00002b65836db460 __libc_start_main +
    245

    9    tmp8v1gq5gk                        0x000055ae172f53f9 <unavailable> + 5113

    '
  stdout: ''
  timestamp: 1659824630
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [1, 3, 2]\n    if n < 3 {\n        return Array(result[0...n])\n    }\n  \
    \  for i in 3...n {\n        if i % 2 == 0 {\n            result.append(1 + i\
    \ / 2)\n        } else {\n            result.append(result[i - 1] + result[i -\
    \ 2] + result[i + 1])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3,\
    \ 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1,\
    \ 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n:\
    \ 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n:\
    \ 1) == [1, 3])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002aac01482c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aac01179561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002aac01179286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002aac0117913c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002aac01178bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002aac00f78e83 <unavailable> + 188035

    6    tmp0oi1klnf                        0x0000563f4e17b843 <unavailable> + 10307

    7    tmp0oi1klnf                        0x0000563f4e17a6db <unavailable> + 5851

    8    libc.so.6                          0x00002aac0166e460 __libc_start_main +
    245

    9    tmp0oi1klnf                        0x0000563f4e17a3f9 <unavailable> + 5113

    '
  stdout: ''
  timestamp: 1659824630
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [1, 3, 2]\n    if n == 0 {\n        return [1]\n    } else if n == 1 {\n \
    \       return [1, 3]\n    } else if n == 2 {\n        return [1, 3, 2]\n    }\
    \ else {\n        for i in 3...n {\n            if i % 2 == 0 {\n            \
    \    result.append(1 + i / 2)\n            } else {\n                result.append(result[i\
    \ - 1] + result[i - 2] + result[i - 3])\n            }\n        }\n    }\n   \
    \ return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(tri(n: 3) == [1, 3,\
    \ 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2,\
    \ 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    assert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmpxbxowlxy/tmpxbxowlxy.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7a2b542c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7a2b239b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7a2b239988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7a2b2387b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxbxowlxy                        0x0000562dddbd15ca <unavailable> + 5578

    5    libc.so.6                          0x00002b7a2b72e460 __libc_start_main +
    245

    6    tmpxbxowlxy                        0x0000562dddbd1209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659824630
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [1, 3, 2]\n    for i in 3...n {\n        if i % 2 == 0 {\n            result.append(1\
    \ + i / 2)\n        } else {\n            result.append(result[i - 1] + result[i\
    \ - 2] + result[i + 1])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3,\
    \ 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1,\
    \ 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n:\
    \ 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n:\
    \ 1) == [1, 3])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ad2048b0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad2045a7561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ad2045a7286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ad2045a713c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ad2045a6bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ad2043a6e83 <unavailable> + 188035

    6    tmphoo0nmhz                        0x000056384653d419 <unavailable> + 9241

    7    tmphoo0nmhz                        0x000056384653c4eb <unavailable> + 5355

    8    libc.so.6                          0x00002ad204a9c460 __libc_start_main +
    245

    9    tmphoo0nmhz                        0x000056384653c209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659824630
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [1, 3, 2]\n    if n < 3 {\n        return Array(result[0...n])\n    }\n  \
    \  for i in 3...n {\n        if i % 2 == 0 {\n            result.append(1 + i\
    \ / 2)\n        } else {\n            result.append(result[i - 1] + result[i -\
    \ 2] + result[i + 1])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3,\
    \ 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1,\
    \ 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n:\
    \ 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n:\
    \ 1) == [1, 3])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002aac01482c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aac01179561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002aac01179286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002aac0117913c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002aac01178bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002aac00f78e83 <unavailable> + 188035

    6    tmp0oi1klnf                        0x0000563f4e17b843 <unavailable> + 10307

    7    tmp0oi1klnf                        0x0000563f4e17a6db <unavailable> + 5851

    8    libc.so.6                          0x00002aac0166e460 __libc_start_main +
    245

    9    tmp0oi1klnf                        0x0000563f4e17a3f9 <unavailable> + 5113

    '
  stdout: ''
  timestamp: 1659824630
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [1, 3, 2]\n    if n <= 2 {\n        return Array(result[0...n])\n    }\n \
    \   for i in 3...n {\n        if i % 2 == 0 {\n            result.append(1 + i\
    \ / 2)\n        } else {\n            result.append(result[i - 1] + result[i -\
    \ 2] + result[i + 1])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3,\
    \ 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1,\
    \ 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n:\
    \ 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n:\
    \ 1) == [1, 3])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b65b1890c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b65b1587561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b65b1587286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b65b158713c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b65b1586bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b65b1386e83 <unavailable> + 188035

    6    tmpk57ye95c                        0x000055c2c4b6284f <unavailable> + 10319

    7    tmpk57ye95c                        0x000055c2c4b616db <unavailable> + 5851

    8    libc.so.6                          0x00002b65b1a7c460 __libc_start_main +
    245

    9    tmpk57ye95c                        0x000055c2c4b613f9 <unavailable> + 5113

    '
  stdout: ''
  timestamp: 1659824630
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    for i in 0...n {\n        if i == 0 {\n            result.append(1)\n\
    \        } else if i == 1 {\n            result.append(3)\n        } else if i\
    \ == 2 {\n            result.append(2)\n        } else if i % 2 == 0 {\n     \
    \       result.append(1 + i / 2)\n        } else {\n            result.append(result[i\
    \ - 1] + result[i - 2] + result[i - 3])\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmpgbn7jc43/tmpgbn7jc43.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b21938dec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b21935d5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b21935d5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b21935d47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgbn7jc43                        0x0000562dbb49f61a <unavailable> + 5658

    5    libc.so.6                          0x00002b2193aca460 __libc_start_main +
    245

    6    tmpgbn7jc43                        0x0000562dbb49f259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659824630
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [1, 3, 2]\n    if n <= 2 {\n        return Array(result[0...n])\n    }\n \
    \   for i in 3...n {\n        let next = result[i - 1] + result[i - 2] + result[i\
    \ - 3]\n        result.append(next)\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3,\
    \ 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1,\
    \ 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n:\
    \ 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n:\
    \ 1) == [1, 3])"
  status: Exception
  stderr: 'tmpa9n1nyil/tmpa9n1nyil.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3c65bcdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3c658c4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3c658c4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3c658c37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpa9n1nyil                        0x000055c2eda407ba <unavailable> + 6074

    5    libc.so.6                          0x00002b3c65db9460 __libc_start_main +
    245

    6    tmpa9n1nyil                        0x000055c2eda403f9 <unavailable> + 5113

    '
  stdout: ''
  timestamp: 1659824630
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [1, 3, 2]\n    if n == 0 {\n        return [1]\n    } else if n == 1 {\n \
    \       return [1, 3]\n    } else if n == 2 {\n        return [1, 3, 2]\n    }\
    \ else {\n        for i in 3...n {\n            if i % 2 == 0 {\n            \
    \    result.append(1 + i / 2)\n            } else {\n                result.append(result[i\
    \ - 1] + result[i - 2] + result[i - 3])\n            }\n        }\n    }\n   \
    \ return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(tri(n: 3) == [1, 3,\
    \ 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2,\
    \ 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    assert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmpxbxowlxy/tmpxbxowlxy.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7a2b542c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7a2b239b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7a2b239988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7a2b2387b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxbxowlxy                        0x0000562dddbd15ca <unavailable> + 5578

    5    libc.so.6                          0x00002b7a2b72e460 __libc_start_main +
    245

    6    tmpxbxowlxy                        0x0000562dddbd1209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659824630
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [1, 3, 2]\n    for i in 3...n {\n        if i % 2 == 0 {\n            result.append(1\
    \ + i / 2)\n        } else {\n            result.append(result[i - 1] + result[i\
    \ - 2] + result[i + 1])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3,\
    \ 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1,\
    \ 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n:\
    \ 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n:\
    \ 1) == [1, 3])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ad2048b0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad2045a7561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ad2045a7286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ad2045a713c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ad2045a6bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ad2043a6e83 <unavailable> + 188035

    6    tmphoo0nmhz                        0x000056384653d419 <unavailable> + 9241

    7    tmphoo0nmhz                        0x000056384653c4eb <unavailable> + 5355

    8    libc.so.6                          0x00002ad204a9c460 __libc_start_main +
    245

    9    tmphoo0nmhz                        0x000056384653c209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659824630
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [1, 3, 2]\n    if n <= 2 {\n        return Array(result[0...n])\n    }\n \
    \   for i in 3...n {\n        if i % 2 == 0 {\n            result.append(1 + i\
    \ / 2)\n        } else {\n            result.append(result[i - 1] + result[i -\
    \ 2] + result[i + 1])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3,\
    \ 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1,\
    \ 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n:\
    \ 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n:\
    \ 1) == [1, 3])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b65b1890c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b65b1587561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b65b1587286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b65b158713c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b65b1586bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b65b1386e83 <unavailable> + 188035

    6    tmpk57ye95c                        0x000055c2c4b6284f <unavailable> + 10319

    7    tmpk57ye95c                        0x000055c2c4b616db <unavailable> + 5851

    8    libc.so.6                          0x00002b65b1a7c460 __libc_start_main +
    245

    9    tmpk57ye95c                        0x000055c2c4b613f9 <unavailable> + 5113

    '
  stdout: ''
  timestamp: 1659824630
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [1, 3, 2]\n    if n == 0 {\n        return [1]\n    } else if n == 1 {\n \
    \       return [1, 3]\n    } else if n == 2 {\n        return [1, 3, 2]\n    }\
    \ else {\n        for i in 3...n {\n            if i % 2 == 0 {\n            \
    \    result.append(1 + i / 2)\n            } else {\n                result.append(result[i\
    \ - 1] + result[i - 2] + result[i - 3])\n            }\n        }\n    }\n   \
    \ return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(tri(n: 3) == [1, 3,\
    \ 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2,\
    \ 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    assert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmpxbxowlxy/tmpxbxowlxy.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7a2b542c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7a2b239b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7a2b239988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7a2b2387b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxbxowlxy                        0x0000562dddbd15ca <unavailable> + 5578

    5    libc.so.6                          0x00002b7a2b72e460 __libc_start_main +
    245

    6    tmpxbxowlxy                        0x0000562dddbd1209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659824630
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    for i in 0...n {\n        if i == 0 {\n            result.append(1)\n\
    \        } else if i == 1 {\n            result.append(3)\n        } else if i\
    \ == 2 {\n            result.append(2)\n        } else if i % 2 == 0 {\n     \
    \       result.append(1 + i / 2)\n        } else {\n            result.append(result[i\
    \ - 1] + result[i - 2] + result[i - 3])\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmpgbn7jc43/tmpgbn7jc43.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b21938dec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b21935d5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b21935d5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b21935d47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgbn7jc43                        0x0000562dbb49f61a <unavailable> + 5658

    5    libc.so.6                          0x00002b2193aca460 __libc_start_main +
    245

    6    tmpgbn7jc43                        0x0000562dbb49f259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659824630
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [1, 3, 2]\n    if n == 0 {\n        return [1]\n    } else if n == 1 {\n \
    \       return [1, 3]\n    } else if n == 2 {\n        return [1, 3, 2]\n    }\
    \ else {\n        for i in 3...n {\n            if i % 2 == 0 {\n            \
    \    result.append(1 + i / 2)\n            } else {\n                result.append(result[i\
    \ - 1] + result[i - 2] + result[i - 3])\n            }\n        }\n    }\n   \
    \ return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(tri(n: 3) == [1, 3,\
    \ 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2,\
    \ 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    assert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmpxbxowlxy/tmpxbxowlxy.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7a2b542c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7a2b239b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7a2b239988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7a2b2387b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxbxowlxy                        0x0000562dddbd15ca <unavailable> + 5578

    5    libc.so.6                          0x00002b7a2b72e460 __libc_start_main +
    245

    6    tmpxbxowlxy                        0x0000562dddbd1209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659824630
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [1, 3, 2]\n    guard n > 2 else { return result }\n    for i in 3...n {\n\
    \        result.append(i % 2 == 0 ? 1 + i / 2 : result[i - 1] + result[i - 2]\
    \ + result[i + 1])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\n\
    assert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3,\
    \ 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1,\
    \ 3])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ae889c51c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae889948561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ae889948286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ae88994813c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ae889947bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ae889747e83 <unavailable> + 188035

    6    tmpyix3dkrm                        0x000055db61fb1444 <unavailable> + 9284

    7    tmpyix3dkrm                        0x000055db61fb04eb <unavailable> + 5355

    8    libc.so.6                          0x00002ae889e3d460 __libc_start_main +
    245

    9    tmpyix3dkrm                        0x000055db61fb0209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659824630
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    guard n\
    \ > 0 else { return [] }\n    var result = [1, 3, 2]\n    for i in 3...n {\n \
    \       if i % 2 == 0 {\n            result.append(1 + i / 2)\n        } else\
    \ {\n            result.append(result[i - 1] + result[i - 2] + result[i + 1])\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n:\
    \ 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ba635048c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba634d3f561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ba634d3f286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ba634d3f13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ba634d3ebb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ba634b3ee83 <unavailable> + 188035

    6    tmpfn6bbfp_                        0x000055b32db7d428 <unavailable> + 9256

    7    tmpfn6bbfp_                        0x000055b32db7c4eb <unavailable> + 5355

    8    libc.so.6                          0x00002ba635234460 __libc_start_main +
    245

    9    tmpfn6bbfp_                        0x000055b32db7c209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659824630
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [1, 3, 2]\n    guard n > 2 else { return Array(result[0...n]) }\n    for i\
    \ in 3...n {\n        if i % 2 == 0 {\n            result.append(1 + i / 2)\n\
    \        } else {\n            result.append(result[i - 1] + result[i - 2] + result[i\
    \ + 1])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\n\
    assert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3,\
    \ 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1,\
    \ 3])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b65834efc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b65831e6561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b65831e6286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b65831e613c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b65831e5bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b6582fe5e83 <unavailable> + 188035

    6    tmp8v1gq5gk                        0x000055ae172f667a <unavailable> + 9850

    7    tmp8v1gq5gk                        0x000055ae172f56db <unavailable> + 5851

    8    libc.so.6                          0x00002b65836db460 __libc_start_main +
    245

    9    tmp8v1gq5gk                        0x000055ae172f53f9 <unavailable> + 5113

    '
  stdout: ''
  timestamp: 1659824630
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [1, 3, 2]\n    if n <= 2 {\n        return Array(result[0...n])\n    }\n \
    \   for i in 3...n {\n        result.append(result[i - 1] + result[i - 2] + result[i\
    \ - 3])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(tri(n:\
    \ 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5)\
    \ == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmpp0wm8n_e/tmpp0wm8n_e.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b36661e0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3665ed7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3665ed7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3665ed67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp0wm8n_e                        0x000056439b6ea7ba <unavailable> + 6074

    5    libc.so.6                          0x00002b36663cc460 __libc_start_main +
    245

    6    tmpp0wm8n_e                        0x000056439b6ea3f9 <unavailable> + 5113

    '
  stdout: ''
  timestamp: 1659824630
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result:\
    \ [Int] = []\n    for i in 0...n {\n        if i == 0 {\n            result.append(1)\n\
    \        } else if i == 1 {\n            result.append(3)\n        } else if i\
    \ == 2 {\n            result.append(2)\n        } else if i % 2 == 0 {\n     \
    \       result.append(1 + i / 2)\n        } else {\n            result.append(result[i\
    \ - 1] + result[i - 2] + result[i - 3])\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmpw_x5ujmq/tmpw_x5ujmq.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae3e0e8dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae3e0b84b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae3e0b84988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae3e0b837b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpw_x5ujmq                        0x00005654d2e9d5ca <unavailable> + 5578

    5    libc.so.6                          0x00002ae3e1079460 __libc_start_main +
    245

    6    tmpw_x5ujmq                        0x00005654d2e9d209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659824630
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    for i in 0...n {\n        switch i {\n        case 0:\n     \
    \       result.append(1)\n        case 1:\n            result.append(3)\n    \
    \    case 2:\n            result.append(2)\n        default:\n            if i\
    \ % 2 == 0 {\n                result.append(1 + i / 2)\n            } else {\n\
    \                result.append(result[i - 1] + result[i - 2] + result[i - 3])\n\
    \            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2,\
    \ 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3,\
    \ 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n:\
    \ 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n:\
    \ 1) == [1, 3])"
  status: Exception
  stderr: 'tmpbgbc40v9/tmpbgbc40v9.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6d5a691c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6d5a388b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6d5a388988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6d5a3877b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbgbc40v9                        0x0000561eed22861a <unavailable> + 5658

    5    libc.so.6                          0x00002b6d5a87d460 __libc_start_main +
    245

    6    tmpbgbc40v9                        0x0000561eed228259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659824630
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [1, 3, 2]\n    if n == 0 {\n        return [1]\n    } else if n == 1 {\n \
    \       return [1, 3]\n    } else if n == 2 {\n        return [1, 3, 2]\n    }\
    \ else {\n        for i in 3...n {\n            if i % 2 == 0 {\n            \
    \    result.append(1 + i / 2)\n            } else {\n                result.append(result[i\
    \ - 1] + result[i - 2] + result[i - 3])\n            }\n        }\n    }\n   \
    \ return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(tri(n: 3) == [1, 3,\
    \ 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2,\
    \ 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    assert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmpxbxowlxy/tmpxbxowlxy.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7a2b542c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7a2b239b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7a2b239988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7a2b2387b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxbxowlxy                        0x0000562dddbd15ca <unavailable> + 5578

    5    libc.so.6                          0x00002b7a2b72e460 __libc_start_main +
    245

    6    tmpxbxowlxy                        0x0000562dddbd1209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659824630
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    for i in 0...n {\n        if i == 0 {\n            result.append(1)\n\
    \        } else if i == 1 {\n            result.append(3)\n        } else if i\
    \ == 2 {\n            result.append(2)\n        } else if i % 2 == 0 {\n     \
    \       result.append(1 + i / 2)\n        } else {\n            result.append(result[i\
    \ - 1] + result[i - 2] + result[i - 3])\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmpgbn7jc43/tmpgbn7jc43.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b21938dec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b21935d5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b21935d5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b21935d47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgbn7jc43                        0x0000562dbb49f61a <unavailable> + 5658

    5    libc.so.6                          0x00002b2193aca460 __libc_start_main +
    245

    6    tmpgbn7jc43                        0x0000562dbb49f259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659824630
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [1, 3, 2]\n    if n < 3 {\n        return Array(result[0...n])\n    }\n  \
    \  for i in 3...n {\n        result.append(result[i - 1] + result[i - 2] + result[i\
    \ - 3])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(tri(n:\
    \ 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5)\
    \ == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmpayls0e05/tmpayls0e05.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2c38bbcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2c388b3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2c388b3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2c388b27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpayls0e05                        0x000055778ee9c7ba <unavailable> + 6074

    5    libc.so.6                          0x00002b2c38da8460 __libc_start_main +
    245

    6    tmpayls0e05                        0x000055778ee9c3f9 <unavailable> + 5113

    '
  stdout: ''
  timestamp: 1659824630
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [1, 3, 2]\n    if n == 0 {\n        return [1]\n    } else if n == 1 {\n \
    \       return [1, 3]\n    } else if n == 2 {\n        return [1, 3, 2]\n    }\
    \ else {\n        for i in 3...n {\n            if i % 2 == 0 {\n            \
    \    result.append(1 + i / 2)\n            } else {\n                result.append(result[i\
    \ - 1] + result[i - 2] + result[i - 3])\n            }\n        }\n    }\n   \
    \ return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(tri(n: 3) == [1, 3,\
    \ 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2,\
    \ 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    assert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmpxbxowlxy/tmpxbxowlxy.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7a2b542c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7a2b239b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7a2b239988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7a2b2387b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxbxowlxy                        0x0000562dddbd15ca <unavailable> + 5578

    5    libc.so.6                          0x00002b7a2b72e460 __libc_start_main +
    245

    6    tmpxbxowlxy                        0x0000562dddbd1209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659824630
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    for i in 0...n {\n        if i == 0 {\n            result.append(1)\n\
    \        } else if i == 1 {\n            result.append(3)\n        } else if i\
    \ == 2 {\n            result.append(2)\n        } else if i % 2 == 0 {\n     \
    \       result.append(1 + i / 2)\n        } else {\n            result.append(result[i\
    \ - 1] + result[i - 2] + result[i - 3])\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmpgbn7jc43/tmpgbn7jc43.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b21938dec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b21935d5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b21935d5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b21935d47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgbn7jc43                        0x0000562dbb49f61a <unavailable> + 5658

    5    libc.so.6                          0x00002b2193aca460 __libc_start_main +
    245

    6    tmpgbn7jc43                        0x0000562dbb49f259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659824630
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [1, 3, 2]\n    for i in 3...n {\n        if i % 2 == 0 {\n            result.append(1\
    \ + i / 2)\n        } else {\n            result.append(result[i - 1] + result[i\
    \ - 2] + result[i + 1])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3,\
    \ 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1,\
    \ 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n:\
    \ 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n:\
    \ 1) == [1, 3])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ad2048b0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad2045a7561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ad2045a7286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ad2045a713c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ad2045a6bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ad2043a6e83 <unavailable> + 188035

    6    tmphoo0nmhz                        0x000056384653d419 <unavailable> + 9241

    7    tmphoo0nmhz                        0x000056384653c4eb <unavailable> + 5355

    8    libc.so.6                          0x00002ad204a9c460 __libc_start_main +
    245

    9    tmphoo0nmhz                        0x000056384653c209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659824630
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    for i in 0...n {\n        if i == 0 {\n            result.append(1)\n\
    \        } else if i == 1 {\n            result.append(3)\n        } else if i\
    \ == 2 {\n            result.append(2)\n        } else if i % 2 == 0 {\n     \
    \       result.append(1 + i / 2)\n        } else {\n            result.append(result[i\
    \ - 1] + result[i - 2] + result[i - 3])\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmpgbn7jc43/tmpgbn7jc43.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b21938dec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b21935d5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b21935d5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b21935d47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgbn7jc43                        0x0000562dbb49f61a <unavailable> + 5658

    5    libc.so.6                          0x00002b2193aca460 __libc_start_main +
    245

    6    tmpgbn7jc43                        0x0000562dbb49f259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659824630
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    if n ==\
    \ 0 {\n        return [1]\n    }\n    if n == 1 {\n        return [1, 3]\n   \
    \ }\n    if n == 2 {\n        return [1, 3, 2]\n    }\n    var result = [1, 3,\
    \ 2]\n    for i in 3...n {\n        result.append(result[i - 1] + result[i - 2]\
    \ + result[i - 3])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\n\
    assert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3,\
    \ 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1,\
    \ 3])"
  status: Exception
  stderr: 'tmplb_2ubm0/tmplb_2ubm0.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b90f8527c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b90f821eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b90f821e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b90f821d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplb_2ubm0                        0x00005638d7c845ca <unavailable> + 5578

    5    libc.so.6                          0x00002b90f8713460 __libc_start_main +
    245

    6    tmplb_2ubm0                        0x00005638d7c84209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659824630
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [1, 3, 2]\n    guard n > 2 else { return result }\n    for i in 3...n {\n\
    \        if i % 2 == 0 {\n            result.append(1 + i / 2)\n        } else\
    \ {\n            result.append(result[i - 1] + result[i - 2] + result[i + 1])\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n:\
    \ 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b4402e35c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4402b2c561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b4402b2c286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b4402b2c13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b4402b2bbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b440292be83 <unavailable> + 188035

    6    tmpbqjdaz6i                        0x00005566c08d7454 <unavailable> + 9300

    7    tmpbqjdaz6i                        0x00005566c08d64eb <unavailable> + 5355

    8    libc.so.6                          0x00002b4403021460 __libc_start_main +
    245

    9    tmpbqjdaz6i                        0x00005566c08d6209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659824630
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [1, 3, 2]\n    if n == 0 {\n        return [1]\n    } else if n == 1 {\n \
    \       return [1, 3]\n    } else if n == 2 {\n        return [1, 3, 2]\n    }\
    \ else {\n        for i in 3...n {\n            if i % 2 == 0 {\n            \
    \    result.append(1 + i / 2)\n            } else {\n                result.append(result[i\
    \ - 1] + result[i - 2] + result[i - 3])\n            }\n        }\n    }\n   \
    \ return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(tri(n: 3) == [1, 3,\
    \ 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2,\
    \ 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    assert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmpxbxowlxy/tmpxbxowlxy.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7a2b542c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7a2b239b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7a2b239988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7a2b2387b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxbxowlxy                        0x0000562dddbd15ca <unavailable> + 5578

    5    libc.so.6                          0x00002b7a2b72e460 __libc_start_main +
    245

    6    tmpxbxowlxy                        0x0000562dddbd1209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659824630
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    if n ==\
    \ 0 {\n        return [1]\n    }\n    if n == 1 {\n        return [1, 3]\n   \
    \ }\n    if n == 2 {\n        return [1, 3, 2]\n    }\n    var result = [1, 3,\
    \ 2]\n    for i in 3...n {\n        if i % 2 == 0 {\n            result.append(1\
    \ + i / 2)\n        } else {\n            result.append(result[i - 1] + result[i\
    \ - 2] + result[i + 1])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3,\
    \ 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1,\
    \ 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n:\
    \ 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n:\
    \ 1) == [1, 3])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ba2870afc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba286da6561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ba286da6286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ba286da613c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ba286da5bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ba286ba5e83 <unavailable> + 188035

    6    tmp4_8i_oxx                        0x0000564310fd74ee <unavailable> + 9454

    7    tmp4_8i_oxx                        0x0000564310fd64eb <unavailable> + 5355

    8    libc.so.6                          0x00002ba28729b460 __libc_start_main +
    245

    9    tmp4_8i_oxx                        0x0000564310fd6209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659824630
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    for i in 0...n {\n        if i == 0 {\n            result.append(1)\n\
    \        } else if i == 1 {\n            result.append(3)\n        } else if i\
    \ == 2 {\n            result.append(2)\n        } else if i % 2 == 0 {\n     \
    \       result.append(1 + i / 2)\n        } else {\n            result.append(result[i\
    \ - 1] + result[i - 2] + result[i - 3])\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmpgbn7jc43/tmpgbn7jc43.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b21938dec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b21935d5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b21935d5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b21935d47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgbn7jc43                        0x0000562dbb49f61a <unavailable> + 5658

    5    libc.so.6                          0x00002b2193aca460 __libc_start_main +
    245

    6    tmpgbn7jc43                        0x0000562dbb49f259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659824630
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [1, 3, 2]\n    if n < 3 {\n        return Array(result[0...n])\n    }\n  \
    \  for i in 3...n {\n        result.append(result[i - 1] + result[i - 2] + result[i\
    \ - 3])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(tri(n:\
    \ 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5)\
    \ == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmpayls0e05/tmpayls0e05.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2c38bbcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2c388b3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2c388b3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2c388b27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpayls0e05                        0x000055778ee9c7ba <unavailable> + 6074

    5    libc.so.6                          0x00002b2c38da8460 __libc_start_main +
    245

    6    tmpayls0e05                        0x000055778ee9c3f9 <unavailable> + 5113

    '
  stdout: ''
  timestamp: 1659824630
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [1, 3, 2]\n    for i in 3...n {\n        if i % 2 == 0 {\n            result.append(1\
    \ + i / 2)\n        } else {\n            result.append(result[i - 1] + result[i\
    \ - 2] + result[i + 1])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3,\
    \ 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1,\
    \ 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n:\
    \ 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n:\
    \ 1) == [1, 3])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ad2048b0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad2045a7561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ad2045a7286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ad2045a713c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ad2045a6bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ad2043a6e83 <unavailable> + 188035

    6    tmphoo0nmhz                        0x000056384653d419 <unavailable> + 9241

    7    tmphoo0nmhz                        0x000056384653c4eb <unavailable> + 5355

    8    libc.so.6                          0x00002ad204a9c460 __libc_start_main +
    245

    9    tmphoo0nmhz                        0x000056384653c209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659824630
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [1, 3, 2]\n    if n == 0 {\n        return [1]\n    } else if n == 1 {\n \
    \       return [1, 3]\n    } else if n == 2 {\n        return [1, 3, 2]\n    }\
    \ else {\n        for _ in 3...n {\n            result.append(result[result.count\
    \ - 1] + result[result.count - 2] + result[result.count - 3])\n        }\n   \
    \ }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(tri(n: 3)\
    \ == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) ==\
    \ [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmpy1m655p3/tmpy1m655p3.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af4fd989c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af4fd680b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af4fd680988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af4fd67f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpy1m655p3                        0x00005633c890461a <unavailable> + 5658

    5    libc.so.6                          0x00002af4fdb75460 __libc_start_main +
    245

    6    tmpy1m655p3                        0x00005633c8904259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659824630
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    return [Int](0...n).map\
    \ {\n        switch $0 {\n        case 0: return 1\n        case 1: return 3\n\
    \        case 2: return 2\n        default:\n            return tri(n: $0 - 1)\
    \ + tri(n: $0 - 2) + tri(n: $0 - 3)\n        }\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2,\
    \ 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3,\
    \ 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n:\
    \ 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n:\
    \ 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpeqg34tul.swift:25:52: error: cannot convert return expression of\
    \ type 'Array<Int>' to return type 'Int'\n            return tri(n: $0 - 1) +\
    \ tri(n: $0 - 2) + tri(n: $0 - 3)\n                   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824630
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [1, 3, 2]\n    if n == 0 {\n        return [1]\n    } else if n == 1 {\n \
    \       return [1, 3]\n    } else if n == 2 {\n        return [1, 3, 2]\n    }\
    \ else {\n        for i in 3...n {\n            if i % 2 == 0 {\n            \
    \    result.append(1 + i / 2)\n            } else {\n                result.append(result[i\
    \ - 1] + result[i - 2] + result[i - 3])\n            }\n        }\n    }\n   \
    \ return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(tri(n: 3) == [1, 3,\
    \ 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2,\
    \ 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    assert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmpxbxowlxy/tmpxbxowlxy.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7a2b542c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7a2b239b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7a2b239988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7a2b2387b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxbxowlxy                        0x0000562dddbd15ca <unavailable> + 5578

    5    libc.so.6                          0x00002b7a2b72e460 __libc_start_main +
    245

    6    tmpxbxowlxy                        0x0000562dddbd1209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659824630
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [1, 3, 2]\n    if n < 3 {\n        return Array(result[0...n])\n    }\n  \
    \  for i in 3...n {\n        let value = result[i - 1] + result[i - 2] + result[i\
    \ - 3]\n        result.append(value)\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3,\
    \ 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1,\
    \ 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n:\
    \ 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n:\
    \ 1) == [1, 3])"
  status: Exception
  stderr: 'tmpkkmqmxx6/tmpkkmqmxx6.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b15e1e47c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b15e1b3eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b15e1b3e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b15e1b3d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkkmqmxx6                        0x000056285624c7ba <unavailable> + 6074

    5    libc.so.6                          0x00002b15e2033460 __libc_start_main +
    245

    6    tmpkkmqmxx6                        0x000056285624c3f9 <unavailable> + 5113

    '
  stdout: ''
  timestamp: 1659824630
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result:\
    \ [Int] = [1, 3, 2]\n    guard n > 2 else { return result }\n    for i in 3...n\
    \ {\n        if i % 2 == 0 {\n            result.append(1 + i / 2)\n        }\
    \ else {\n            result.append(result[i - 1] + result[i - 2] + result[i +\
    \ 1])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\n\
    assert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3,\
    \ 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1,\
    \ 3])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b50fa965c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b50fa65c561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b50fa65c286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b50fa65c13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b50fa65bbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b50fa45be83 <unavailable> + 188035

    6    tmpp3uraqpp                        0x000055f4f37ff454 <unavailable> + 9300

    7    tmpp3uraqpp                        0x000055f4f37fe4eb <unavailable> + 5355

    8    libc.so.6                          0x00002b50fab51460 __libc_start_main +
    245

    9    tmpp3uraqpp                        0x000055f4f37fe209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659824630
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    for i in 0...n {\n        if i == 0 {\n            result.append(1)\n\
    \        } else if i == 1 {\n            result.append(3)\n        } else if i\
    \ == 2 {\n            result.append(2)\n        } else {\n            result.append(result[i\
    \ - 1] + result[i - 2] + result[i - 3])\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmpxn6l2q4f/tmpxn6l2q4f.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9b817b1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9b814a8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9b814a8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9b814a77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxn6l2q4f                        0x0000557b0d60561a <unavailable> + 5658

    5    libc.so.6                          0x00002b9b8199d460 __libc_start_main +
    245

    6    tmpxn6l2q4f                        0x0000557b0d605259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659824630
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [1, 3, 2]\n    if n < 3 {\n        return Array(result[0...n])\n    }\n  \
    \  for i in 3...n {\n        if i % 2 == 0 {\n            result.append(1 + i\
    \ / 2)\n        } else {\n            result.append(result[i - 1] + result[i -\
    \ 2] + result[i + 1])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3,\
    \ 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1,\
    \ 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n:\
    \ 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n:\
    \ 1) == [1, 3])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002aac01482c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aac01179561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002aac01179286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002aac0117913c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002aac01178bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002aac00f78e83 <unavailable> + 188035

    6    tmp0oi1klnf                        0x0000563f4e17b843 <unavailable> + 10307

    7    tmp0oi1klnf                        0x0000563f4e17a6db <unavailable> + 5851

    8    libc.so.6                          0x00002aac0166e460 __libc_start_main +
    245

    9    tmp0oi1klnf                        0x0000563f4e17a3f9 <unavailable> + 5113

    '
  stdout: ''
  timestamp: 1659824630
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [1, 3, 2]\n    if n < 3 {\n        return Array(result[0...n])\n    }\n  \
    \  for i in 3...n {\n        if i % 2 == 0 {\n            result.append(1 + i\
    \ / 2)\n        } else {\n            result.append(result[i - 1] + result[i -\
    \ 2] + result[i + 1])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3,\
    \ 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1,\
    \ 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n:\
    \ 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n:\
    \ 1) == [1, 3])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002aac01482c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aac01179561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002aac01179286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002aac0117913c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002aac01178bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002aac00f78e83 <unavailable> + 188035

    6    tmp0oi1klnf                        0x0000563f4e17b843 <unavailable> + 10307

    7    tmp0oi1klnf                        0x0000563f4e17a6db <unavailable> + 5851

    8    libc.so.6                          0x00002aac0166e460 __libc_start_main +
    245

    9    tmp0oi1klnf                        0x0000563f4e17a3f9 <unavailable> + 5113

    '
  stdout: ''
  timestamp: 1659824630
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [1, 3, 2]\n    if n <= 2 {\n        return result\n    }\n    for i in 3...n\
    \ {\n        result.append(i % 2 == 0 ? 1 + i / 2 : result[i - 1] + result[i -\
    \ 2] + result[i + 1])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\n\
    assert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3,\
    \ 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1,\
    \ 3])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b6af51f0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6af4ee7561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b6af4ee7286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b6af4ee713c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b6af4ee6bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b6af4ce6e83 <unavailable> + 188035

    6    tmpqnlp53wh                        0x000055bff8ada465 <unavailable> + 9317

    7    tmpqnlp53wh                        0x000055bff8ad94eb <unavailable> + 5355

    8    libc.so.6                          0x00002b6af53dc460 __libc_start_main +
    245

    9    tmpqnlp53wh                        0x000055bff8ad9209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659824630
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [1, 3, 2]\n    for i in 3...n {\n        if i % 2 == 0 {\n            result.append(1\
    \ + i / 2)\n        } else {\n            result.append(result[i - 1] + result[i\
    \ - 2] + result[i + 1])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3,\
    \ 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1,\
    \ 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n:\
    \ 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n:\
    \ 1) == [1, 3])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ad2048b0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad2045a7561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ad2045a7286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ad2045a713c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ad2045a6bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ad2043a6e83 <unavailable> + 188035

    6    tmphoo0nmhz                        0x000056384653d419 <unavailable> + 9241

    7    tmphoo0nmhz                        0x000056384653c4eb <unavailable> + 5355

    8    libc.so.6                          0x00002ad204a9c460 __libc_start_main +
    245

    9    tmphoo0nmhz                        0x000056384653c209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659824630
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [1, 3, 2]\n    guard n > 2 else { return result }\n    for i in 3...n {\n\
    \        result.append(i % 2 == 0 ? 1 + i / 2 : result[i - 1] + result[i - 2]\
    \ + result[i + 1])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\n\
    assert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3,\
    \ 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1,\
    \ 3])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ae889c51c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae889948561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ae889948286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ae88994813c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ae889947bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ae889747e83 <unavailable> + 188035

    6    tmpyix3dkrm                        0x000055db61fb1444 <unavailable> + 9284

    7    tmpyix3dkrm                        0x000055db61fb04eb <unavailable> + 5355

    8    libc.so.6                          0x00002ae889e3d460 __libc_start_main +
    245

    9    tmpyix3dkrm                        0x000055db61fb0209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659824630
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var tribonacci\
    \ = [1, 3, 2]\n    for i in 3...n {\n        if i % 2 == 0 {\n            tribonacci.append(1\
    \ + i / 2)\n        } else {\n            tribonacci.append(tribonacci[i - 1]\
    \ + tribonacci[i - 2] + tribonacci[i + 1])\n        }\n    }\n    return tribonacci\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b18884f6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b18881ed561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b18881ed286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b18881ed13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b18881ecbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b1887fece83 <unavailable> + 188035

    6    tmpf2z9w9tx                        0x00005575b98ba419 <unavailable> + 9241

    7    tmpf2z9w9tx                        0x00005575b98b94eb <unavailable> + 5355

    8    libc.so.6                          0x00002b18886e2460 __libc_start_main +
    245

    9    tmpf2z9w9tx                        0x00005575b98b9209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659824630
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    guard n\
    \ > 0 else { return [] }\n    var result = [1, 3, 2]\n    for i in 3...n {\n \
    \       result.append(result[i - 1] + result[i - 2] + result[i - 3])\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(tri(n: 3) == [1, 3,\
    \ 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2,\
    \ 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    assert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmp9qbz1wd_/tmp9qbz1wd_.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac8954a8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac89519fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac89519f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac89519e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9qbz1wd_                        0x000055a661dbf5ca <unavailable> + 5578

    5    libc.so.6                          0x00002ac895694460 __libc_start_main +
    245

    6    tmp9qbz1wd_                        0x000055a661dbf209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659824630
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [1, 3, 2]\n    if n < 3 {\n        return Array(result[0...n])\n    }\n  \
    \  for i in 3...n {\n        if i % 2 == 0 {\n            result.append(1 + i\
    \ / 2)\n        } else {\n            result.append(result[i - 1] + result[i -\
    \ 2] + result[i + 1])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3,\
    \ 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1,\
    \ 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n:\
    \ 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n:\
    \ 1) == [1, 3])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002aac01482c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aac01179561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002aac01179286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002aac0117913c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002aac01178bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002aac00f78e83 <unavailable> + 188035

    6    tmp0oi1klnf                        0x0000563f4e17b843 <unavailable> + 10307

    7    tmp0oi1klnf                        0x0000563f4e17a6db <unavailable> + 5851

    8    libc.so.6                          0x00002aac0166e460 __libc_start_main +
    245

    9    tmp0oi1klnf                        0x0000563f4e17a3f9 <unavailable> + 5113

    '
  stdout: ''
  timestamp: 1659824630
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [1, 3, 2]\n    if n < 3 {\n        return Array(result[0...n])\n    }\n  \
    \  for i in 3...n {\n        result.append(result[i - 1] + result[i - 2] + result[i\
    \ - 3])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(tri(n:\
    \ 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5)\
    \ == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmpayls0e05/tmpayls0e05.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2c38bbcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2c388b3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2c388b3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2c388b27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpayls0e05                        0x000055778ee9c7ba <unavailable> + 6074

    5    libc.so.6                          0x00002b2c38da8460 __libc_start_main +
    245

    6    tmpayls0e05                        0x000055778ee9c3f9 <unavailable> + 5113

    '
  stdout: ''
  timestamp: 1659824630
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [1, 3, 2]\n    if n == 0 {\n        return [1]\n    } else if n == 1 {\n \
    \       return [1, 3]\n    } else if n == 2 {\n        return [1, 3, 2]\n    }\
    \ else {\n        for i in 3...n {\n            if i % 2 == 0 {\n            \
    \    result.append(1 + i / 2)\n            } else {\n                result.append(result[i\
    \ - 1] + result[i - 2] + result[i - 3])\n            }\n        }\n    }\n   \
    \ return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(tri(n: 3) == [1, 3,\
    \ 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2,\
    \ 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    assert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmpxbxowlxy/tmpxbxowlxy.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7a2b542c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7a2b239b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7a2b239988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7a2b2387b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxbxowlxy                        0x0000562dddbd15ca <unavailable> + 5578

    5    libc.so.6                          0x00002b7a2b72e460 __libc_start_main +
    245

    6    tmpxbxowlxy                        0x0000562dddbd1209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659824630
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [1, 3, 2]\n    guard n > 2 else { return result }\n    for i in 3...n {\n\
    \        if i % 2 == 0 {\n            result.append(1 + i / 2)\n        } else\
    \ {\n            result.append(result[i - 1] + result[i - 2] + result[i + 1])\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n:\
    \ 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b4402e35c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4402b2c561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b4402b2c286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b4402b2c13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b4402b2bbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b440292be83 <unavailable> + 188035

    6    tmpbqjdaz6i                        0x00005566c08d7454 <unavailable> + 9300

    7    tmpbqjdaz6i                        0x00005566c08d64eb <unavailable> + 5355

    8    libc.so.6                          0x00002b4403021460 __libc_start_main +
    245

    9    tmpbqjdaz6i                        0x00005566c08d6209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659824630
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [1, 3, 2]\n    if n < 3 {\n        return Array(result[0...n])\n    }\n  \
    \  for i in 3...n {\n        result.append(result[i - 1] + result[i - 2] + result[i\
    \ - 3])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(tri(n:\
    \ 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5)\
    \ == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmpayls0e05/tmpayls0e05.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2c38bbcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2c388b3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2c388b3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2c388b27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpayls0e05                        0x000055778ee9c7ba <unavailable> + 6074

    5    libc.so.6                          0x00002b2c38da8460 __libc_start_main +
    245

    6    tmpayls0e05                        0x000055778ee9c3f9 <unavailable> + 5113

    '
  stdout: ''
  timestamp: 1659824630
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [1, 3, 2]\n    if n < 3 {\n        return Array(result[0...n])\n    }\n  \
    \  for i in 3...n {\n        let last = result[i - 1]\n        let secondLast\
    \ = result[i - 2]\n        let thirdLast = result[i - 3]\n        if i % 2 ==\
    \ 0 {\n            result.append(1 + i / 2)\n        } else {\n            result.append(last\
    \ + secondLast + thirdLast)\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmp4mkuduqr/tmp4mkuduqr.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b306334cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3063043b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3063043988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b30630427b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4mkuduqr                        0x000055c37bb257ba <unavailable> + 6074

    5    libc.so.6                          0x00002b3063538460 __libc_start_main +
    245

    6    tmp4mkuduqr                        0x000055c37bb253f9 <unavailable> + 5113

    '
  stdout: ''
  timestamp: 1659824630
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    for i in 0...n {\n        if i == 0 {\n            result.append(1)\n\
    \        } else if i == 1 {\n            result.append(3)\n        } else if i\
    \ == 2 {\n            result.append(2)\n        } else if i % 2 == 0 {\n     \
    \       result.append(1 + i / 2)\n        } else {\n            result.append(result[i\
    \ - 1] + result[i - 2] + result[i - 3])\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmpgbn7jc43/tmpgbn7jc43.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b21938dec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b21935d5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b21935d5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b21935d47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgbn7jc43                        0x0000562dbb49f61a <unavailable> + 5658

    5    libc.so.6                          0x00002b2193aca460 __libc_start_main +
    245

    6    tmpgbn7jc43                        0x0000562dbb49f259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659824630
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [1, 3, 2]\n    if n == 0 {\n        return [1]\n    } else if n == 1 {\n \
    \       return [1, 3]\n    } else if n == 2 {\n        return [1, 3, 2]\n    }\
    \ else {\n        for i in 3...n {\n            if i % 2 == 0 {\n            \
    \    result.append(1 + i / 2)\n            } else {\n                result.append(result[i\
    \ - 1] + result[i - 2] + result[i - 3])\n            }\n        }\n    }\n   \
    \ return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(tri(n: 3) == [1, 3,\
    \ 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2,\
    \ 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    assert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmpxbxowlxy/tmpxbxowlxy.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7a2b542c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7a2b239b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7a2b239988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7a2b2387b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxbxowlxy                        0x0000562dddbd15ca <unavailable> + 5578

    5    libc.so.6                          0x00002b7a2b72e460 __libc_start_main +
    245

    6    tmpxbxowlxy                        0x0000562dddbd1209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659824630
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [1, 3, 2]\n    if n == 0 {\n        return [1]\n    } else if n == 1 {\n \
    \       return [1, 3]\n    } else if n == 2 {\n        return [1, 3, 2]\n    }\
    \ else {\n        for i in 3...n {\n            if i % 2 == 0 {\n            \
    \    result.append(1 + i / 2)\n            } else {\n                result.append(result[i\
    \ - 1] + result[i - 2] + result[i - 3])\n            }\n        }\n    }\n   \
    \ return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(tri(n: 3) == [1, 3,\
    \ 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2,\
    \ 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    assert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmpxbxowlxy/tmpxbxowlxy.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7a2b542c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7a2b239b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7a2b239988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7a2b2387b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxbxowlxy                        0x0000562dddbd15ca <unavailable> + 5578

    5    libc.so.6                          0x00002b7a2b72e460 __libc_start_main +
    245

    6    tmpxbxowlxy                        0x0000562dddbd1209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659824630
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result:\
    \ [Int] = []\n    for i in 0...n {\n        if i == 0 {\n            result.append(1)\n\
    \        } else if i == 1 {\n            result.append(3)\n        } else if i\
    \ == 2 {\n            result.append(2)\n        } else if i % 2 == 0 {\n     \
    \       result.append(1 + i / 2)\n        } else {\n            result.append(result[i\
    \ - 1] + result[i - 2] + result[i - 3])\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmpw_x5ujmq/tmpw_x5ujmq.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae3e0e8dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae3e0b84b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae3e0b84988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae3e0b837b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpw_x5ujmq                        0x00005654d2e9d5ca <unavailable> + 5578

    5    libc.so.6                          0x00002ae3e1079460 __libc_start_main +
    245

    6    tmpw_x5ujmq                        0x00005654d2e9d209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659824630
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    if n ==\
    \ 0 {\n        return [1]\n    }\n    if n == 1 {\n        return [1, 3]\n   \
    \ }\n    if n == 2 {\n        return [1, 3, 2]\n    }\n    var result = [1, 3,\
    \ 2]\n    for i in 3...n {\n        result.append(result[i - 1] + result[i - 2]\
    \ + result[i - 3])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\n\
    assert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3,\
    \ 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1,\
    \ 3])"
  status: Exception
  stderr: 'tmplb_2ubm0/tmplb_2ubm0.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b90f8527c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b90f821eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b90f821e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b90f821d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplb_2ubm0                        0x00005638d7c845ca <unavailable> + 5578

    5    libc.so.6                          0x00002b90f8713460 __libc_start_main +
    245

    6    tmplb_2ubm0                        0x00005638d7c84209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659824630
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [1, 3, 2]\n    if n < 3 {\n        return Array(result[0...n])\n    }\n  \
    \  for i in 3...n {\n        result.append(result[i - 1] + result[i - 2] + result[i\
    \ - 3])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(tri(n:\
    \ 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5)\
    \ == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmpayls0e05/tmpayls0e05.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2c38bbcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2c388b3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2c388b3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2c388b27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpayls0e05                        0x000055778ee9c7ba <unavailable> + 6074

    5    libc.so.6                          0x00002b2c38da8460 __libc_start_main +
    245

    6    tmpayls0e05                        0x000055778ee9c3f9 <unavailable> + 5113

    '
  stdout: ''
  timestamp: 1659824630
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var arr\
    \ = [1, 3, 2]\n    if n < 3 {\n        return Array(arr[0...n])\n    }\n    for\
    \ i in 3...n {\n        arr.append(arr[i - 1] + arr[i - 2] + arr[i - 3])\n   \
    \ }\n    return arr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(tri(n: 3) == [1, 3,\
    \ 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2,\
    \ 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    assert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmpq_xex5ol/tmpq_xex5ol.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aff68c32c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aff68929b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aff68929988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aff689287b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpq_xex5ol                        0x000055fd1b2b17ba <unavailable> + 6074

    5    libc.so.6                          0x00002aff68e1e460 __libc_start_main +
    245

    6    tmpq_xex5ol                        0x000055fd1b2b13f9 <unavailable> + 5113

    '
  stdout: ''
  timestamp: 1659824630
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var tri\
    \ = [1, 3, 2]\n    if n < 3 {\n        return Array(tri[0...n])\n    }\n    for\
    \ i in 3...n {\n        tri.append(tri[i - 1] + tri[i - 2] + tri[i - 3])\n   \
    \ }\n    return tri\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(tri(n: 3) == [1, 3,\
    \ 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2,\
    \ 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    assert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmp36vwt9cm/tmp36vwt9cm.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b31104f8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b31101efb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b31101ef988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b31101ee7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp36vwt9cm                        0x0000560274a407ba <unavailable> + 6074

    5    libc.so.6                          0x00002b31106e4460 __libc_start_main +
    245

    6    tmp36vwt9cm                        0x0000560274a403f9 <unavailable> + 5113

    '
  stdout: ''
  timestamp: 1659824630
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    for i in 0...n {\n        if i == 0 {\n            result.append(1)\n\
    \        } else if i == 1 {\n            result.append(3)\n        } else if i\
    \ == 2 {\n            result.append(2)\n        } else if i % 2 == 0 {\n     \
    \       result.append(1 + i / 2)\n        } else {\n            result.append(result[i\
    \ - 1] + result[i - 2] + result[i - 3])\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmpgbn7jc43/tmpgbn7jc43.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b21938dec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b21935d5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b21935d5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b21935d47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgbn7jc43                        0x0000562dbb49f61a <unavailable> + 5658

    5    libc.so.6                          0x00002b2193aca460 __libc_start_main +
    245

    6    tmpgbn7jc43                        0x0000562dbb49f259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659824630
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    for i in 0...n {\n        if i == 0 {\n            result.append(1)\n\
    \        } else if i == 1 {\n            result.append(3)\n        } else if i\
    \ == 2 {\n            result.append(2)\n        } else if i % 2 == 0 {\n     \
    \       result.append(1 + i / 2)\n        } else {\n            result.append(result[i\
    \ - 1] + result[i - 2] + result[i - 3])\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmpgbn7jc43/tmpgbn7jc43.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b21938dec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b21935d5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b21935d5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b21935d47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgbn7jc43                        0x0000562dbb49f61a <unavailable> + 5658

    5    libc.so.6                          0x00002b2193aca460 __libc_start_main +
    245

    6    tmpgbn7jc43                        0x0000562dbb49f259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659824630
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    for i in 0...n {\n        result.append(tri(n: i))\n    }\n \
    \   return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(tri(n: 3) == [1, 3,\
    \ 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2,\
    \ 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    assert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmp5rx3h4f5.swift:21:16: error: no exact matches in call to instance\
    \ method 'append'\n        result.append(tri(n: i))\n               ^\nSwift.Array:7:37:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(contentsOf:)')\n\
    \    @inlinable public mutating func append<S>(contentsOf newElements: __owned\
    \ S) where Element == S.Element, S : Sequence\n                              \
    \      ^\nSwift.RangeReplaceableCollection:5:37: note: incorrect labels for candidate\
    \ (have: '(_:)', expected: '(contentsOf:)')\n    @inlinable public mutating func\
    \ append<S>(contentsOf newElements: __owned S) where S : Sequence, Self.Element\
    \ == S.Element\n                                    ^\n"
  stdout: ''
  timestamp: 1659824629
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [1, 3, 2]\n    if n < 3 {\n        return Array(result[0...n])\n    }\n  \
    \  for i in 3...n {\n        let value = result[i - 1] + result[i - 2] + result[i\
    \ - 3]\n        result.append(value)\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3,\
    \ 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1,\
    \ 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n:\
    \ 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n:\
    \ 1) == [1, 3])"
  status: Exception
  stderr: 'tmpkkmqmxx6/tmpkkmqmxx6.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b15e1e47c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b15e1b3eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b15e1b3e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b15e1b3d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkkmqmxx6                        0x000056285624c7ba <unavailable> + 6074

    5    libc.so.6                          0x00002b15e2033460 __libc_start_main +
    245

    6    tmpkkmqmxx6                        0x000056285624c3f9 <unavailable> + 5113

    '
  stdout: ''
  timestamp: 1659824630
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [1, 3, 2]\n    guard n > 2 else { return result }\n    for i in 3...n {\n\
    \        result.append(i % 2 == 0 ? 1 + i / 2 : result[i - 1] + result[i - 2]\
    \ + result[i + 1])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\n\
    assert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3,\
    \ 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1,\
    \ 3])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ae889c51c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae889948561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ae889948286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ae88994813c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ae889947bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ae889747e83 <unavailable> + 188035

    6    tmpyix3dkrm                        0x000055db61fb1444 <unavailable> + 9284

    7    tmpyix3dkrm                        0x000055db61fb04eb <unavailable> + 5355

    8    libc.so.6                          0x00002ae889e3d460 __libc_start_main +
    245

    9    tmpyix3dkrm                        0x000055db61fb0209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659824630
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    for i in 0...n {\n        if i == 0 {\n            result.append(1)\n\
    \        } else if i == 1 {\n            result.append(3)\n        } else if i\
    \ == 2 {\n            result.append(2)\n        } else if i % 2 == 0 {\n     \
    \       result.append(1 + i / 2)\n        } else {\n            result.append(result[i\
    \ - 1] + result[i - 2] + result[i - 3])\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmpgbn7jc43/tmpgbn7jc43.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b21938dec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b21935d5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b21935d5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b21935d47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgbn7jc43                        0x0000562dbb49f61a <unavailable> + 5658

    5    libc.so.6                          0x00002b2193aca460 __libc_start_main +
    245

    6    tmpgbn7jc43                        0x0000562dbb49f259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659824630
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [1, 3, 2]\n    if n < 3 {\n        return Array(result[0...n])\n    }\n  \
    \  for i in 3...n {\n        let tri = result[i - 1] + result[i - 2] + result[i\
    \ - 3]\n        result.append(tri)\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3,\
    \ 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1,\
    \ 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n:\
    \ 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n:\
    \ 1) == [1, 3])"
  status: Exception
  stderr: 'tmpey4j_vye/tmpey4j_vye.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4b5e773c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4b5e46ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4b5e46a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4b5e4697b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpey4j_vye                        0x000055daade237ba <unavailable> + 6074

    5    libc.so.6                          0x00002b4b5e95f460 __libc_start_main +
    245

    6    tmpey4j_vye                        0x000055daade233f9 <unavailable> + 5113

    '
  stdout: ''
  timestamp: 1659824630
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [1, 3, 2]\n    if n == 0 {\n        return [1]\n    } else if n == 1 {\n \
    \       return [1, 3]\n    } else if n == 2 {\n        return [1, 3, 2]\n    }\
    \ else {\n        for i in 3...n {\n            if i % 2 == 0 {\n            \
    \    result.append(1 + i / 2)\n            } else {\n                result.append(result[i\
    \ - 1] + result[i - 2] + result[i - 3])\n            }\n        }\n    }\n   \
    \ return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(tri(n: 3) == [1, 3,\
    \ 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2,\
    \ 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    assert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmpxbxowlxy/tmpxbxowlxy.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7a2b542c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7a2b239b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7a2b239988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7a2b2387b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxbxowlxy                        0x0000562dddbd15ca <unavailable> + 5578

    5    libc.so.6                          0x00002b7a2b72e460 __libc_start_main +
    245

    6    tmpxbxowlxy                        0x0000562dddbd1209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659824630
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [1, 3, 2]\n    if n < 3 {\n        return result[0...n]\n    }\n    for i\
    \ in 3...n {\n        result.append(result[i - 1] + result[i - 2] + result[i -\
    \ 3])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(tri(n:\
    \ 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5)\
    \ == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpoua5npu_.swift:21:22: error: no 'subscript' candidates produce\
    \ the expected contextual result type '[Int]'\n        return result[0...n]\n\
    \                     ^\nSwift.Collection:2:23: note: 'subscript(_:)' produces\
    \ 'ArraySlice<Int>', not the expected contextual result type '[Int]'\n    @inlinable\
    \ public subscript<R>(r: R) -> Self.SubSequence where R : RangeExpression, Self.Index\
    \ == R.Bound { get }\n                      ^\nSwift.MutableCollection:2:23: note:\
    \ 'subscript(_:)' produces '@lvalue ArraySlice<Int>', not the expected contextual\
    \ result type '[Int]'\n    @inlinable public subscript<R>(r: R) -> Self.SubSequence\
    \ where R : RangeExpression, Self.Index == R.Bound { get set }\n             \
    \         ^\n"
  stdout: ''
  timestamp: 1659824630
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    for i in 0...n {\n        if i == 0 {\n            result.append(1)\n\
    \        } else if i == 1 {\n            result.append(3)\n        } else if i\
    \ == 2 {\n            result.append(2)\n        } else if i % 2 == 0 {\n     \
    \       result.append(1 + i / 2)\n        } else {\n            result.append(result[i\
    \ - 1] + result[i - 2] + result[i - 3])\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmpgbn7jc43/tmpgbn7jc43.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b21938dec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b21935d5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b21935d5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b21935d47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgbn7jc43                        0x0000562dbb49f61a <unavailable> + 5658

    5    libc.so.6                          0x00002b2193aca460 __libc_start_main +
    245

    6    tmpgbn7jc43                        0x0000562dbb49f259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659824630
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [1, 3, 2]\n    if n <= 2 {\n        return Array(result[0...n])\n    }\n \
    \   for i in 3...n {\n        result.append(result[i - 1] + result[i - 2] + result[i\
    \ - 3])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(tri(n:\
    \ 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5)\
    \ == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmpp0wm8n_e/tmpp0wm8n_e.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b36661e0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3665ed7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3665ed7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3665ed67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp0wm8n_e                        0x000056439b6ea7ba <unavailable> + 6074

    5    libc.so.6                          0x00002b36663cc460 __libc_start_main +
    245

    6    tmpp0wm8n_e                        0x000056439b6ea3f9 <unavailable> + 5113

    '
  stdout: ''
  timestamp: 1659824630
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [1, 3, 2]\n    if n <= 2 {\n        return Array(result[0...n])\n    }\n \
    \   for i in 3...n {\n        result.append(result[i - 1] + result[i - 2] + result[i\
    \ - 3])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(tri(n:\
    \ 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5)\
    \ == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmpp0wm8n_e/tmpp0wm8n_e.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b36661e0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3665ed7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3665ed7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3665ed67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp0wm8n_e                        0x000056439b6ea7ba <unavailable> + 6074

    5    libc.so.6                          0x00002b36663cc460 __libc_start_main +
    245

    6    tmpp0wm8n_e                        0x000056439b6ea3f9 <unavailable> + 5113

    '
  stdout: ''
  timestamp: 1659824630
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [1, 3, 2]\n    guard n > 2 else { return result }\n    for i in 3...n {\n\
    \        if i % 2 == 0 {\n            result.append(1 + i / 2)\n        } else\
    \ {\n            result.append(result[i - 1] + result[i - 2] + result[i + 1])\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n:\
    \ 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b4402e35c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4402b2c561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b4402b2c286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b4402b2c13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b4402b2bbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b440292be83 <unavailable> + 188035

    6    tmpbqjdaz6i                        0x00005566c08d7454 <unavailable> + 9300

    7    tmpbqjdaz6i                        0x00005566c08d64eb <unavailable> + 5355

    8    libc.so.6                          0x00002b4403021460 __libc_start_main +
    245

    9    tmpbqjdaz6i                        0x00005566c08d6209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659824630
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [1, 3, 2]\n    if n <= 2 {\n        return Array(result[0...n])\n    }\n \
    \   for i in 3...n {\n        result.append(result[i - 1] + result[i - 2] + result[i\
    \ - 3])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(tri(n:\
    \ 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5)\
    \ == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmpp0wm8n_e/tmpp0wm8n_e.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b36661e0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3665ed7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3665ed7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3665ed67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp0wm8n_e                        0x000056439b6ea7ba <unavailable> + 6074

    5    libc.so.6                          0x00002b36663cc460 __libc_start_main +
    245

    6    tmpp0wm8n_e                        0x000056439b6ea3f9 <unavailable> + 5113

    '
  stdout: ''
  timestamp: 1659824630
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [1, 3, 2]\n    if n <= 2 {\n        return result\n    }\n    for _ in 3...n\
    \ {\n        result.append(result[result.count - 1] + result[result.count - 2]\
    \ + result[result.count - 3])\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3,\
    \ 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1,\
    \ 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n:\
    \ 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n:\
    \ 1) == [1, 3])"
  status: Exception
  stderr: 'tmp4uhplow0/tmp4uhplow0.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3f672adc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3f66fa4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3f66fa4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3f66fa37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4uhplow0                        0x000055c7933e661a <unavailable> + 5658

    5    libc.so.6                          0x00002b3f67499460 __libc_start_main +
    245

    6    tmp4uhplow0                        0x000055c7933e6259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659824631
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    for i in 0...n {\n        if i == 0 {\n            result.append(1)\n\
    \        } else if i == 1 {\n            result.append(3)\n        } else if i\
    \ == 2 {\n            result.append(2)\n        } else {\n            result.append(result[i\
    \ - 1] + result[i - 2] + result[i - 3])\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmpxn6l2q4f/tmpxn6l2q4f.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9b817b1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9b814a8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9b814a8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9b814a77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxn6l2q4f                        0x0000557b0d60561a <unavailable> + 5658

    5    libc.so.6                          0x00002b9b8199d460 __libc_start_main +
    245

    6    tmpxn6l2q4f                        0x0000557b0d605259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659824630
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [1, 3, 2]\n    guard n > 2 else { return result }\n    for i in 3...n {\n\
    \        result.append(i % 2 == 0 ? 1 + i / 2 : result[i - 1] + result[i - 2]\
    \ + result[i + 1])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\n\
    assert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3,\
    \ 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1,\
    \ 3])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ae889c51c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae889948561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ae889948286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ae88994813c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ae889947bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ae889747e83 <unavailable> + 188035

    6    tmpyix3dkrm                        0x000055db61fb1444 <unavailable> + 9284

    7    tmpyix3dkrm                        0x000055db61fb04eb <unavailable> + 5355

    8    libc.so.6                          0x00002ae889e3d460 __libc_start_main +
    245

    9    tmpyix3dkrm                        0x000055db61fb0209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659824630
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [1, 3, 2]\n    for i in 3...n {\n        result.append(result[i - 1] + result[i\
    \ - 2] + result[i - 3])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2,\
    \ 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3,\
    \ 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n:\
    \ 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n:\
    \ 1) == [1, 3])"
  status: Exception
  stderr: 'tmpgyh3xiby/tmpgyh3xiby.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7f40a13c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7f4070ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7f4070a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7f407097b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgyh3xiby                        0x0000560c21e8f5ca <unavailable> + 5578

    5    libc.so.6                          0x00002b7f40bff460 __libc_start_main +
    245

    6    tmpgyh3xiby                        0x0000560c21e8f209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659824630
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    for i in 0...n {\n        if i == 0 {\n            result.append(1)\n\
    \        } else if i == 1 {\n            result.append(3)\n        } else if i\
    \ == 2 {\n            result.append(2)\n        } else if i % 2 == 0 {\n     \
    \       result.append(1 + i / 2)\n        } else {\n            result.append(result[i\
    \ - 1] + result[i - 2] + result[i - 3])\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmpgbn7jc43/tmpgbn7jc43.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b21938dec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b21935d5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b21935d5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b21935d47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgbn7jc43                        0x0000562dbb49f61a <unavailable> + 5658

    5    libc.so.6                          0x00002b2193aca460 __libc_start_main +
    245

    6    tmpgbn7jc43                        0x0000562dbb49f259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659824630
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var tri\
    \ = [1, 3, 2]\n    guard n > 2 else { return tri }\n    for i in 3...n {\n   \
    \     tri.append(i % 2 == 0 ? 1 + i / 2 : tri[i - 1] + tri[i - 2] + tri[i + 1])\n\
    \    }\n    return tri\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(tri(n: 3)\
    \ == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) ==\
    \ [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b8c2d03ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8c2cd31561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b8c2cd31286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b8c2cd3113c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b8c2cd30bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b8c2cb30e83 <unavailable> + 188035

    6    tmp_k3q15uz                        0x0000563fe4c78444 <unavailable> + 9284

    7    tmp_k3q15uz                        0x0000563fe4c774eb <unavailable> + 5355

    8    libc.so.6                          0x00002b8c2d226460 __libc_start_main +
    245

    9    tmp_k3q15uz                        0x0000563fe4c77209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659824631
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [1, 3, 2]\n    if n <= 2 {\n        return result\n    }\n    for _ in 3...n\
    \ {\n        let last = result.last!\n        let secondToLast = result[result.count\
    \ - 2]\n        let thirdToLast = result[result.count - 3]\n        result.append(last\
    \ + secondToLast + thirdToLast)\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3,\
    \ 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1,\
    \ 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n:\
    \ 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n:\
    \ 1) == [1, 3])"
  status: Exception
  stderr: 'tmpgdnvjlcp/tmpgdnvjlcp.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad75a091c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad759d88b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad759d88988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad759d877b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgdnvjlcp                        0x000055cbb54606ba <unavailable> + 5818

    5    libc.so.6                          0x00002ad75a27d460 __libc_start_main +
    245

    6    tmpgdnvjlcp                        0x000055cbb54602f9 <unavailable> + 4857

    '
  stdout: ''
  timestamp: 1659824631
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [1, 3, 2]\n    if n < 3 {\n        return Array(result[0...n])\n    }\n  \
    \  for i in 3...n {\n        let val = result[i - 1] + result[i - 2] + result[i\
    \ - 3]\n        result.append(val)\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3,\
    \ 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1,\
    \ 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n:\
    \ 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n:\
    \ 1) == [1, 3])"
  status: Exception
  stderr: 'tmpho1ghvz7/tmpho1ghvz7.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b16b4a22c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b16b4719b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b16b4719988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b16b47187b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpho1ghvz7                        0x0000563a8e50d7ba <unavailable> + 6074

    5    libc.so.6                          0x00002b16b4c0e460 __libc_start_main +
    245

    6    tmpho1ghvz7                        0x0000563a8e50d3f9 <unavailable> + 5113

    '
  stdout: ''
  timestamp: 1659824631
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    for i in 0...n {\n        if i == 0 {\n            result.append(1)\n\
    \        } else if i == 1 {\n            result.append(3)\n        } else if i\
    \ == 2 {\n            result.append(2)\n        } else if i % 2 == 0 {\n     \
    \       result.append(1 + i / 2)\n        } else {\n            result.append(result[i\
    \ - 1] + result[i - 2] + result[i - 3])\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmpgbn7jc43/tmpgbn7jc43.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b21938dec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b21935d5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b21935d5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b21935d47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgbn7jc43                        0x0000562dbb49f61a <unavailable> + 5658

    5    libc.so.6                          0x00002b2193aca460 __libc_start_main +
    245

    6    tmpgbn7jc43                        0x0000562dbb49f259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659824630
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [1, 3, 2]\n    if n <= 2 {\n        return Array(result[0...n])\n    }\n \
    \   for i in 3...n {\n        result.append(result[i - 1] + result[i - 2] + result[i\
    \ - 3])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(tri(n:\
    \ 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5)\
    \ == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmpp0wm8n_e/tmpp0wm8n_e.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b36661e0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3665ed7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3665ed7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3665ed67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp0wm8n_e                        0x000056439b6ea7ba <unavailable> + 6074

    5    libc.so.6                          0x00002b36663cc460 __libc_start_main +
    245

    6    tmpp0wm8n_e                        0x000056439b6ea3f9 <unavailable> + 5113

    '
  stdout: ''
  timestamp: 1659824630
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    for i in 0...n {\n        if i == 0 {\n            result.append(1)\n\
    \        } else if i == 1 {\n            result.append(3)\n        } else if i\
    \ == 2 {\n            result.append(2)\n        } else if i % 2 == 0 {\n     \
    \       result.append(1 + i / 2)\n        } else {\n            result.append(result[i\
    \ - 1] + result[i - 2] + result[i - 3])\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmpgbn7jc43/tmpgbn7jc43.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b21938dec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b21935d5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b21935d5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b21935d47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgbn7jc43                        0x0000562dbb49f61a <unavailable> + 5658

    5    libc.so.6                          0x00002b2193aca460 __libc_start_main +
    245

    6    tmpgbn7jc43                        0x0000562dbb49f259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659824630
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [1, 3, 2]\n    guard n > 2 else { return result }\n    for i in 3...n {\n\
    \        result.append(i % 2 == 0 ? 1 + i / 2 : result[i - 1] + result[i - 2]\
    \ + result[i + 1])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\n\
    assert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3,\
    \ 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1,\
    \ 3])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ae889c51c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae889948561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ae889948286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ae88994813c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ae889947bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ae889747e83 <unavailable> + 188035

    6    tmpyix3dkrm                        0x000055db61fb1444 <unavailable> + 9284

    7    tmpyix3dkrm                        0x000055db61fb04eb <unavailable> + 5355

    8    libc.so.6                          0x00002ae889e3d460 __libc_start_main +
    245

    9    tmpyix3dkrm                        0x000055db61fb0209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659824630
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result:\
    \ [Int] = []\n    for i in 0...n {\n        if i == 0 {\n            result.append(1)\n\
    \        } else if i == 1 {\n            result.append(3)\n        } else if i\
    \ == 2 {\n            result.append(2)\n        } else if i % 2 == 0 {\n     \
    \       result.append(1 + i / 2)\n        } else {\n            result.append(result[i\
    \ - 1] + result[i - 2] + result[i - 3])\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmpw_x5ujmq/tmpw_x5ujmq.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae3e0e8dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae3e0b84b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae3e0b84988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae3e0b837b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpw_x5ujmq                        0x00005654d2e9d5ca <unavailable> + 5578

    5    libc.so.6                          0x00002ae3e1079460 __libc_start_main +
    245

    6    tmpw_x5ujmq                        0x00005654d2e9d209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659824630
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    for i in 0...n {\n        result.append(tri(n: i))\n    }\n \
    \   return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(tri(n: 3) == [1, 3,\
    \ 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2,\
    \ 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    assert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmp5rx3h4f5.swift:21:16: error: no exact matches in call to instance\
    \ method 'append'\n        result.append(tri(n: i))\n               ^\nSwift.Array:7:37:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(contentsOf:)')\n\
    \    @inlinable public mutating func append<S>(contentsOf newElements: __owned\
    \ S) where Element == S.Element, S : Sequence\n                              \
    \      ^\nSwift.RangeReplaceableCollection:5:37: note: incorrect labels for candidate\
    \ (have: '(_:)', expected: '(contentsOf:)')\n    @inlinable public mutating func\
    \ append<S>(contentsOf newElements: __owned S) where S : Sequence, Self.Element\
    \ == S.Element\n                                    ^\n"
  stdout: ''
  timestamp: 1659824629
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [1, 3, 2]\n    if n == 0 {\n        return [1]\n    } else if n == 1 {\n \
    \       return [1, 3]\n    } else if n == 2 {\n        return [1, 3, 2]\n    }\
    \ else {\n        for i in 3...n {\n            if i % 2 == 0 {\n            \
    \    result.append(1 + i / 2)\n            } else {\n                result.append(result[i\
    \ - 1] + result[i - 2] + result[i - 3])\n            }\n        }\n    }\n   \
    \ return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(tri(n: 3) == [1, 3,\
    \ 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2,\
    \ 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    assert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmpxbxowlxy/tmpxbxowlxy.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7a2b542c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7a2b239b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7a2b239988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7a2b2387b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxbxowlxy                        0x0000562dddbd15ca <unavailable> + 5578

    5    libc.so.6                          0x00002b7a2b72e460 __libc_start_main +
    245

    6    tmpxbxowlxy                        0x0000562dddbd1209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659824630
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var tribonacci\
    \ = [1, 3, 2]\n    if n < 3 {\n        return Array(tribonacci[0...n])\n    }\n\
    \    for i in 3...n {\n        let last = tribonacci[i - 1]\n        let secondLast\
    \ = tribonacci[i - 2]\n        let thirdLast = tribonacci[i - 3]\n        if i\
    \ % 2 == 0 {\n            tribonacci.append(1 + i / 2)\n        } else {\n   \
    \         tribonacci.append(last + secondLast + thirdLast)\n        }\n    }\n\
    \    return tribonacci\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(tri(n: 3)\
    \ == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) ==\
    \ [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmpjf38yo2z/tmpjf38yo2z.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1514053c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1513d4ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1513d4a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1513d497b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjf38yo2z                        0x000055b6fdb017ba <unavailable> + 6074

    5    libc.so.6                          0x00002b151423f460 __libc_start_main +
    245

    6    tmpjf38yo2z                        0x000055b6fdb013f9 <unavailable> + 5113

    '
  stdout: ''
  timestamp: 1659824631
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [1, 3, 2]\n    guard n > 2 else { return result }\n    for i in 3...n {\n\
    \        if i % 2 == 0 {\n            result.append(1 + i / 2)\n        } else\
    \ {\n            result.append(result[i - 1] + result[i - 2] + result[i + 1])\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n:\
    \ 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b4402e35c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4402b2c561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b4402b2c286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b4402b2c13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b4402b2bbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b440292be83 <unavailable> + 188035

    6    tmpbqjdaz6i                        0x00005566c08d7454 <unavailable> + 9300

    7    tmpbqjdaz6i                        0x00005566c08d64eb <unavailable> + 5355

    8    libc.so.6                          0x00002b4403021460 __libc_start_main +
    245

    9    tmpbqjdaz6i                        0x00005566c08d6209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659824630
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [1, 3, 2]\n    if n < 3 {\n        return Array(result[0...n])\n    }\n  \
    \  for i in 3...n {\n        result.append(result[i - 1] + result[i - 2] + result[i\
    \ - 3])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(tri(n:\
    \ 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5)\
    \ == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmpayls0e05/tmpayls0e05.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2c38bbcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2c388b3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2c388b3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2c388b27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpayls0e05                        0x000055778ee9c7ba <unavailable> + 6074

    5    libc.so.6                          0x00002b2c38da8460 __libc_start_main +
    245

    6    tmpayls0e05                        0x000055778ee9c3f9 <unavailable> + 5113

    '
  stdout: ''
  timestamp: 1659824630
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    for i in 0...n {\n        if i == 0 {\n            result.append(1)\n\
    \        } else if i == 1 {\n            result.append(3)\n        } else if i\
    \ == 2 {\n            result.append(2)\n        } else if i % 2 == 0 {\n     \
    \       result.append(1 + i / 2)\n        } else {\n            result.append(result[i\
    \ - 1] + result[i - 2] + result[i - 3])\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmpgbn7jc43/tmpgbn7jc43.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b21938dec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b21935d5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b21935d5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b21935d47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgbn7jc43                        0x0000562dbb49f61a <unavailable> + 5658

    5    libc.so.6                          0x00002b2193aca460 __libc_start_main +
    245

    6    tmpgbn7jc43                        0x0000562dbb49f259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659824630
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [1, 3, 2]\n    if n <= 2 {\n        return Array(result[0...n])\n    }\n \
    \   for i in 3...n {\n        if i % 2 == 0 {\n            result.append(1 + i\
    \ / 2)\n        } else {\n            result.append(result[i - 1] + result[i -\
    \ 2] + result[i + 1])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3,\
    \ 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1,\
    \ 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n:\
    \ 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n:\
    \ 1) == [1, 3])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b65b1890c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b65b1587561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b65b1587286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b65b158713c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b65b1586bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b65b1386e83 <unavailable> + 188035

    6    tmpk57ye95c                        0x000055c2c4b6284f <unavailable> + 10319

    7    tmpk57ye95c                        0x000055c2c4b616db <unavailable> + 5851

    8    libc.so.6                          0x00002b65b1a7c460 __libc_start_main +
    245

    9    tmpk57ye95c                        0x000055c2c4b613f9 <unavailable> + 5113

    '
  stdout: ''
  timestamp: 1659824630
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [1, 3, 2]\n    guard n > 2 else { return result }\n    for i in 3...n {\n\
    \        result.append(i % 2 == 0 ? 1 + i / 2 : result[i - 1] + result[i - 2]\
    \ + result[i + 1])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\n\
    assert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3,\
    \ 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1,\
    \ 3])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ae889c51c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae889948561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ae889948286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ae88994813c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ae889947bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ae889747e83 <unavailable> + 188035

    6    tmpyix3dkrm                        0x000055db61fb1444 <unavailable> + 9284

    7    tmpyix3dkrm                        0x000055db61fb04eb <unavailable> + 5355

    8    libc.so.6                          0x00002ae889e3d460 __libc_start_main +
    245

    9    tmpyix3dkrm                        0x000055db61fb0209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659824630
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    for i in 0...n {\n        if i == 0 {\n            result.append(1)\n\
    \        } else if i == 1 {\n            result.append(3)\n        } else if i\
    \ == 2 {\n            result.append(2)\n        } else if i % 2 == 0 {\n     \
    \       result.append(1 + i / 2)\n        } else {\n            result.append(result[i\
    \ - 1] + result[i - 2] + result[i - 3])\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmpgbn7jc43/tmpgbn7jc43.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b21938dec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b21935d5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b21935d5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b21935d47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgbn7jc43                        0x0000562dbb49f61a <unavailable> + 5658

    5    libc.so.6                          0x00002b2193aca460 __libc_start_main +
    245

    6    tmpgbn7jc43                        0x0000562dbb49f259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659824630
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [1, 3, 2]\n    if n <= 2 {\n        return result[0...n]\n    }\n    for i\
    \ in 3...n {\n        result.append(result[i - 1] + result[i - 2] + result[i -\
    \ 3])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(tri(n:\
    \ 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5)\
    \ == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmprxsksgf5.swift:21:22: error: no 'subscript' candidates produce\
    \ the expected contextual result type '[Int]'\n        return result[0...n]\n\
    \                     ^\nSwift.Collection:2:23: note: 'subscript(_:)' produces\
    \ 'ArraySlice<Int>', not the expected contextual result type '[Int]'\n    @inlinable\
    \ public subscript<R>(r: R) -> Self.SubSequence where R : RangeExpression, Self.Index\
    \ == R.Bound { get }\n                      ^\nSwift.MutableCollection:2:23: note:\
    \ 'subscript(_:)' produces '@lvalue ArraySlice<Int>', not the expected contextual\
    \ result type '[Int]'\n    @inlinable public subscript<R>(r: R) -> Self.SubSequence\
    \ where R : RangeExpression, Self.Index == R.Bound { get set }\n             \
    \         ^\n"
  stdout: ''
  timestamp: 1659824630
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    for i in 0...n {\n        if i == 0 {\n            result.append(1)\n\
    \        } else if i == 1 {\n            result.append(3)\n        } else if i\
    \ == 2 {\n            result.append(2)\n        } else if i % 2 == 0 {\n     \
    \       result.append(1 + i / 2)\n        } else {\n            result.append(result[i\
    \ - 1] + result[i - 2] + result[i - 3])\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmpgbn7jc43/tmpgbn7jc43.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b21938dec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b21935d5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b21935d5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b21935d47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgbn7jc43                        0x0000562dbb49f61a <unavailable> + 5658

    5    libc.so.6                          0x00002b2193aca460 __libc_start_main +
    245

    6    tmpgbn7jc43                        0x0000562dbb49f259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659824630
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    guard n\
    \ > 0 else { return [] }\n    var result = [1, 3, 2]\n    for i in 3...n {\n \
    \       if i % 2 == 0 {\n            result.append(1 + i / 2)\n        } else\
    \ {\n            result.append(result[i - 1] + result[i - 2] + result[i + 1])\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n:\
    \ 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ba635048c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba634d3f561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ba634d3f286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ba634d3f13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ba634d3ebb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ba634b3ee83 <unavailable> + 188035

    6    tmpfn6bbfp_                        0x000055b32db7d428 <unavailable> + 9256

    7    tmpfn6bbfp_                        0x000055b32db7c4eb <unavailable> + 5355

    8    libc.so.6                          0x00002ba635234460 __libc_start_main +
    245

    9    tmpfn6bbfp_                        0x000055b32db7c209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659824630
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    for i in 0...n {\n        if i == 0 {\n            result.append(1)\n\
    \        } else if i == 1 {\n            result.append(3)\n        } else if i\
    \ == 2 {\n            result.append(2)\n        } else if i % 2 == 0 {\n     \
    \       result.append(1 + i / 2)\n        } else {\n            result.append(result[i\
    \ - 1] + result[i - 2] + result[i - 3])\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmpgbn7jc43/tmpgbn7jc43.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b21938dec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b21935d5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b21935d5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b21935d47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgbn7jc43                        0x0000562dbb49f61a <unavailable> + 5658

    5    libc.so.6                          0x00002b2193aca460 __libc_start_main +
    245

    6    tmpgbn7jc43                        0x0000562dbb49f259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659824630
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [1, 3, 2]\n    guard n > 2 else { return result }\n    for i in 3...n {\n\
    \        if i % 2 == 0 {\n            result.append(1 + i / 2)\n        } else\
    \ {\n            result.append(result[i - 1] + result[i - 2] + result[i + 1])\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n:\
    \ 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b4402e35c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4402b2c561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b4402b2c286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b4402b2c13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b4402b2bbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b440292be83 <unavailable> + 188035

    6    tmpbqjdaz6i                        0x00005566c08d7454 <unavailable> + 9300

    7    tmpbqjdaz6i                        0x00005566c08d64eb <unavailable> + 5355

    8    libc.so.6                          0x00002b4403021460 __libc_start_main +
    245

    9    tmpbqjdaz6i                        0x00005566c08d6209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659824630
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    for i in 0...n {\n        if i == 0 {\n            result.append(1)\n\
    \        } else if i == 1 {\n            result.append(3)\n        } else if i\
    \ == 2 {\n            result.append(2)\n        } else if i % 2 == 0 {\n     \
    \       result.append(1 + i / 2)\n        } else {\n            result.append(result[i\
    \ - 1] + result[i - 2] + result[i - 3])\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmpgbn7jc43/tmpgbn7jc43.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b21938dec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b21935d5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b21935d5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b21935d47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgbn7jc43                        0x0000562dbb49f61a <unavailable> + 5658

    5    libc.so.6                          0x00002b2193aca460 __libc_start_main +
    245

    6    tmpgbn7jc43                        0x0000562dbb49f259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659824630
