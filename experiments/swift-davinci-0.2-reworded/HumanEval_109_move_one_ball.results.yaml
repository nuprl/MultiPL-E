language: swift
name: HumanEval_109_move_one_ball
results:
- exit_code: 1
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    var arr = arr\n    var count = 0\n\
    \    while !is_sorted(arr: arr) {\n        if count == arr.count {\n         \
    \   return false\n        }\n        arr = shift_right(arr: arr)\n        count\
    \ += 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr:\
    \ [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpza20wk3c.swift:26:12: error: cannot find 'is_sorted' in scope\n\
    \    while !is_sorted(arr: arr) {\n           ^~~~~~~~~\n/tmp/tmpza20wk3c.swift:30:15:\
    \ error: cannot find 'shift_right' in scope\n        arr = shift_right(arr: arr)\n\
    \              ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824793
- exit_code: 0
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    if arr.count == 0 {\n        return\
    \ true\n    }\n    var arr = arr\n    var count = 0\n    while arr != arr.sorted()\
    \ {\n        arr.insert(arr.removeLast(), at: 0)\n        count += 1\n       \
    \ if count > arr.count {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr: [3,\
    \ 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824793
- exit_code: 0
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    if arr.count == 0 {\n        return\
    \ true\n    }\n    var arr = arr\n    var count = 0\n    var i = 0\n    while\
    \ i < arr.count - 1 {\n        if arr[i] > arr[i + 1] {\n            count +=\
    \ 1\n            if count > 1 {\n                return false\n            }\n\
    \            var j = i + 1\n            while j < arr.count - 1 {\n          \
    \      if arr[j] > arr[j + 1] {\n                    return false\n          \
    \      }\n                j += 1\n            }\n        }\n        i += 1\n \
    \   }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr:\
    \ [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824794
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    // TODO: Write your code here\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr:\
    \ [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmppxc807fi/tmppxc807fi.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acf5d537c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acf5d22eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acf5d22e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acf5d22d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppxc807fi                        0x000055a5f82ee30a <unavailable> + 4874

    5    libc.so.6                          0x00002acf5d723460 __libc_start_main +
    245

    6    tmppxc807fi                        0x000055a5f82edf69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659824793
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    var arr = arr\n    var i = arr.count\
    \ - 1\n    while i > 0 {\n        if arr[i] < arr[i - 1] {\n            let temp\
    \ = arr[i]\n            arr[i] = arr[i - 1]\n            arr[i - 1] = temp\n \
    \           i -= 1\n        } else {\n            i -= 1\n        }\n    }\n \
    \   return arr == arr.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr:\
    \ [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmpf61hful6/tmpf61hful6.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1f2082cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1f20523b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1f20523988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1f205227b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpf61hful6                        0x000055d678c2250a <unavailable> + 5386

    5    libc.so.6                          0x00002b1f20a18460 __libc_start_main +
    245

    6    tmpf61hful6                        0x000055d678c22169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659824794
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    if arr.count == 0 {\n        return\
    \ true\n    }\n    var arr = arr\n    var count = 0\n    for i in 0..<arr.count\
    \ {\n        if arr[i] == i + 1 {\n            count += 1\n        }\n    }\n\
    \    if count == arr.count {\n        return true\n    }\n    for i in 0..<arr.count\
    \ {\n        if arr[i] != i + 1 {\n            if arr[i] == arr.count {\n    \
    \            arr.remove(at: i)\n                arr.insert(arr[i - 1], at: 0)\n\
    \            } else {\n                arr.remove(at: i)\n                arr.insert(arr[i],\
    \ at: arr[i] - 1)\n            }\n            break\n        }\n    }\n    return\
    \ move_one_ball(arr: arr)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr:\
    \ [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b246617fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2465e76561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b2465e76286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b2465e7613c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b2465e75bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b2465c75e83 <unavailable> + 188035

    6    tmpgrxnexzn                        0x000055b619227efe <unavailable> + 7934

    7    tmpgrxnexzn                        0x000055b61922802b <unavailable> + 8235

    8    tmpgrxnexzn                        0x000055b61922802b <unavailable> + 8235

    9    tmpgrxnexzn                        0x000055b619227585 <unavailable> + 5509

    10   libc.so.6                          0x00002b246636b460 __libc_start_main +
    245

    11   tmpgrxnexzn                        0x000055b619227259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659824794
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    // TODO: Implement this function\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr:\
    \ [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmplm04e3qr/tmplm04e3qr.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af86a6ffc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af86a3f6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af86a3f6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af86a3f57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplm04e3qr                        0x000055ba61eda30a <unavailable> + 4874

    5    libc.so.6                          0x00002af86a8eb460 __libc_start_main +
    245

    6    tmplm04e3qr                        0x000055ba61ed9f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659824793
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    var arr = arr\n    var count = 0\n\
    \    for i in 0..<arr.count {\n        if arr[i] == i + 1 {\n            count\
    \ += 1\n        }\n    }\n    if count == arr.count {\n        return true\n \
    \   }\n    for i in 0..<arr.count {\n        if arr[i] == i + 1 {\n          \
    \  continue\n        }\n        if arr[i] == arr.count {\n            arr.insert(arr.remove(at:\
    \ i), at: 0)\n            return move_one_ball(arr: arr)\n        }\n        return\
    \ false\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr:\
    \ [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmp420t0scj/tmp420t0scj.swift:60: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aea36ad3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aea367cab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aea367ca988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aea367c97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp420t0scj                        0x0000562e6f37f5fa <unavailable> + 5626

    5    libc.so.6                          0x00002aea36cbf460 __libc_start_main +
    245

    6    tmp420t0scj                        0x0000562e6f37f259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659824794
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    if arr.count == 0 {\n        return\
    \ true\n    }\n    var arr = arr\n    var count = 0\n    var i = arr.count - 1\n\
    \    while i > 0 {\n        if arr[i] < arr[i - 1] {\n            count += 1\n\
    \            if count > 1 {\n                return false\n            }\n   \
    \         arr.insert(arr.remove(at: i), at: 0)\n        }\n        i -= 1\n  \
    \  }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr:\
    \ [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmpf0fe2onr/tmpf0fe2onr.swift:58: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b09d39edc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b09d36e4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b09d36e4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b09d36e37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpf0fe2onr                        0x000055e6b12b65fe <unavailable> + 5630

    5    libc.so.6                          0x00002b09d3bd9460 __libc_start_main +
    245

    6    tmpf0fe2onr                        0x000055e6b12b60c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1659824794
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    if arr.count == 0 {\n        return\
    \ true\n    }\n    var arr = arr\n    var min = arr[0]\n    for i in 1..<arr.count\
    \ {\n        if arr[i] < min {\n            return false\n        }\n        min\
    \ = arr[i]\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr: [4, 3, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr:\
    \ [] as [Int]) == true)"
  status: Exception
  stderr: 'tmpmj9gn2le/tmpmj9gn2le.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae8ee1e6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae8ededdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae8ededd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae8ededc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmj9gn2le                        0x0000557978fc854a <unavailable> + 5450

    5    libc.so.6                          0x00002ae8ee3d2460 __libc_start_main +
    245

    6    tmpmj9gn2le                        0x0000557978fc81a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824794
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    if arr.count == 0 {\n        return\
    \ true\n    }\n    var arr = arr\n    var i = 0\n    while i < arr.count - 1 {\n\
    \        if arr[i] > arr[i + 1] {\n            break\n        }\n        i +=\
    \ 1\n    }\n    if i == arr.count - 1 {\n        return true\n    }\n    var j\
    \ = i + 1\n    while j < arr.count - 1 {\n        if arr[j] < arr[j + 1] {\n \
    \           break\n        }\n        j += 1\n    }\n    if j == arr.count - 1\
    \ {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr: [4, 3, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr:\
    \ [] as [Int]) == true)"
  status: Exception
  stderr: 'tmp7jb9hq92/tmp7jb9hq92.swift:64: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adc0f765c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adc0f45cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adc0f45c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adc0f45b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7jb9hq92                        0x000055d424c953ba <unavailable> + 5050

    5    libc.so.6                          0x00002adc0f951460 __libc_start_main +
    245

    6    tmp7jb9hq92                        0x000055d424c95019 <unavailable> + 4121

    '
  stdout: ''
  timestamp: 1659824794
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    if arr.count == 0 {\n        return\
    \ true\n    }\n    var arr = arr\n    var count = 0\n    while arr.last! > arr.first!\
    \ {\n        arr.insert(arr.removeLast(), at: 0)\n        count += 1\n    }\n\
    \    if count == arr.count {\n        return true\n    }\n    return false\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmp4o3h6job/tmp4o3h6job.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6b21468c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6b2115fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6b2115f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6b2115e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4o3h6job                        0x0000560a9524163a <unavailable> + 5690

    5    libc.so.6                          0x00002b6b21654460 __libc_start_main +
    245

    6    tmp4o3h6job                        0x0000560a95241299 <unavailable> + 4761

    '
  stdout: ''
  timestamp: 1659824794
- exit_code: 1
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    var arr = arr\n    var count = 0\n\
    \    while !is_sorted(arr: arr) {\n        if count > arr.count {\n          \
    \  return false\n        }\n        arr = right_shift(arr: arr)\n        count\
    \ += 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr:\
    \ [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp7fc2ehmw.swift:26:12: error: cannot find 'is_sorted' in scope\n\
    \    while !is_sorted(arr: arr) {\n           ^~~~~~~~~\n/tmp/tmp7fc2ehmw.swift:30:15:\
    \ error: cannot find 'right_shift' in scope\n        arr = right_shift(arr: arr)\n\
    \              ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824793
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    guard arr.count > 0 else { return\
    \ true }\n    var arr = arr\n    var count = 0\n    var i = 0\n    while i < arr.count\
    \ - 1 {\n        if arr[i] > arr[i + 1] {\n            count += 1\n          \
    \  if count > 1 {\n                return false\n            }\n            let\
    \ temp = arr[i]\n            arr[i] = arr[i + 1]\n            arr[i + 1] = temp\n\
    \            i += 1\n        } else {\n            i += 1\n        }\n    }\n\
    \    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr:\
    \ [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmpdboi5fu6/tmpdboi5fu6.swift:58: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8bcedfac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8bceaf1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8bceaf1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8bceaf07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdboi5fu6                        0x00005650d9ad141a <unavailable> + 5146

    5    libc.so.6                          0x00002b8bcefe6460 __libc_start_main +
    245

    6    tmpdboi5fu6                        0x00005650d9ad1079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1659824794
- exit_code: 1
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    var arr = arr\n    var count = 0\n\
    \    while !is_sorted(arr: arr) {\n        if count == arr.count {\n         \
    \   return false\n        }\n        count += 1\n        arr = shift_right(arr:\
    \ arr)\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr:\
    \ [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpfucbsd13.swift:26:12: error: cannot find 'is_sorted' in scope\n\
    \    while !is_sorted(arr: arr) {\n           ^~~~~~~~~\n/tmp/tmpfucbsd13.swift:31:15:\
    \ error: cannot find 'shift_right' in scope\n        arr = shift_right(arr: arr)\n\
    \              ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824793
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    // TODO: Write your code here\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr:\
    \ [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmppxc807fi/tmppxc807fi.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acf5d537c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acf5d22eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acf5d22e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acf5d22d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppxc807fi                        0x000055a5f82ee30a <unavailable> + 4874

    5    libc.so.6                          0x00002acf5d723460 __libc_start_main +
    245

    6    tmppxc807fi                        0x000055a5f82edf69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659824793
- exit_code: 0
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    if arr.count == 0 {\n        return\
    \ true\n    }\n    var arr = arr\n    var count = 0\n    while arr != arr.sorted()\
    \ {\n        if count == arr.count {\n            return false\n        }\n  \
    \      arr.insert(arr.removeLast(), at: 0)\n        count += 1\n    }\n    return\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr: [3,\
    \ 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824794
- exit_code: 0
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    var arr = arr\n    var count = 0\n\
    \    while arr != arr.sorted() {\n        let last = arr.removeLast()\n      \
    \  arr.insert(last, at: 0)\n        count += 1\n        if count > arr.count {\n\
    \            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr: [4, 3, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr:\
    \ [] as [Int]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824793
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    guard arr.count > 0 else { return\
    \ true }\n    var arr = arr\n    var count = 0\n    for i in 1..<arr.count {\n\
    \        if arr[i] < arr[i - 1] {\n            count += 1\n        }\n    }\n\
    \    if count > 1 {\n        return false\n    }\n    var min = arr[0]\n    for\
    \ i in 1..<arr.count {\n        if arr[i] < min {\n            min = arr[i]\n\
    \        }\n    }\n    var index = 0\n    for i in 0..<arr.count {\n        if\
    \ arr[i] == min {\n            index = i\n            break\n        }\n    }\n\
    \    if index == 0 {\n        return true\n    }\n    for i in 0..<index {\n \
    \       if arr[i] > min {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr: [3,\
    \ 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmpc5qlswuo/tmpc5qlswuo.swift:72: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9059981c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9059678b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9059678988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b90596777b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpc5qlswuo                        0x0000564b2be7a54a <unavailable> + 5450

    5    libc.so.6                          0x00002b9059b6d460 __libc_start_main +
    245

    6    tmpc5qlswuo                        0x0000564b2be7a1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824794
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    // TODO: Implement this function\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr:\
    \ [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmplm04e3qr/tmplm04e3qr.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af86a6ffc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af86a3f6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af86a3f6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af86a3f57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplm04e3qr                        0x000055ba61eda30a <unavailable> + 4874

    5    libc.so.6                          0x00002af86a8eb460 __libc_start_main +
    245

    6    tmplm04e3qr                        0x000055ba61ed9f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659824793
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    // TODO: Implement this function\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr:\
    \ [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmplm04e3qr/tmplm04e3qr.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af86a6ffc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af86a3f6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af86a3f6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af86a3f57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplm04e3qr                        0x000055ba61eda30a <unavailable> + 4874

    5    libc.so.6                          0x00002af86a8eb460 __libc_start_main +
    245

    6    tmplm04e3qr                        0x000055ba61ed9f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659824793
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    if arr.count == 0 {\n        return\
    \ true\n    }\n    var arr = arr\n    var i = arr.count - 1\n    while i > 0 {\n\
    \        if arr[i] < arr[i - 1] {\n            let temp = arr[i]\n           \
    \ arr[i] = arr[i - 1]\n            arr[i - 1] = temp\n            i = arr.count\
    \ - 1\n        } else {\n            i -= 1\n        }\n    }\n    for i in 0..<arr.count\
    \ - 1 {\n        if arr[i] > arr[i + 1] {\n            return false\n        }\n\
    \    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr:\
    \ [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmpktto6x4p/tmpktto6x4p.swift:62: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b28bc7f3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b28bc4eab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b28bc4ea988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b28bc4e97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpktto6x4p                        0x000055b13697e72e <unavailable> + 5934

    5    libc.so.6                          0x00002b28bc9df460 __libc_start_main +
    245

    6    tmpktto6x4p                        0x000055b13697e1f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659824794
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    if arr.count == 0 {\n        return\
    \ true\n    }\n    var arr = arr\n    var i = arr.count - 1\n    while i > 0 {\n\
    \        if arr[i] < arr[i - 1] {\n            break\n        }\n        i -=\
    \ 1\n    }\n    if i == 0 {\n        return true\n    }\n    var j = i\n    while\
    \ j > 0 {\n        if arr[j] < arr[j - 1] {\n            return false\n      \
    \  }\n        j -= 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr: [4, 3, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr:\
    \ [] as [Int]) == true)"
  status: Exception
  stderr: 'tmpc57mr2fk/tmpc57mr2fk.swift:61: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad607cd6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad6079cdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad6079cd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad6079cc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpc57mr2fk                        0x000055d4bd5503ba <unavailable> + 5050

    5    libc.so.6                          0x00002ad607ec2460 __libc_start_main +
    245

    6    tmpc57mr2fk                        0x000055d4bd550019 <unavailable> + 4121

    '
  stdout: ''
  timestamp: 1659824794
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    if arr.count == 0 {\n        return\
    \ true\n    }\n    var sortedArr = arr.sorted()\n    var count = 0\n    for i\
    \ in 0..<arr.count {\n        if arr[i] != sortedArr[i] {\n            count +=\
    \ 1\n        }\n    }\n    return count <= 1\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr: [4, 3, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr:\
    \ [] as [Int]) == true)"
  status: Exception
  stderr: 'tmp8dyjgwmv/tmp8dyjgwmv.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b11d03efc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b11d00e6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b11d00e6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b11d00e57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8dyjgwmv                        0x00005590a4d555ea <unavailable> + 5610

    5    libc.so.6                          0x00002b11d05db460 __libc_start_main +
    245

    6    tmp8dyjgwmv                        0x00005590a4d55249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659824794
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    // TODO: Write your code here\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr:\
    \ [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmppxc807fi/tmppxc807fi.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acf5d537c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acf5d22eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acf5d22e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acf5d22d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppxc807fi                        0x000055a5f82ee30a <unavailable> + 4874

    5    libc.so.6                          0x00002acf5d723460 __libc_start_main +
    245

    6    tmppxc807fi                        0x000055a5f82edf69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659824793
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    var arr = arr\n    if arr.count\
    \ == 0 {\n        return true\n    }\n    var i = 0\n    while i < arr.count -\
    \ 1 {\n        if arr[i] > arr[i + 1] {\n            break\n        }\n      \
    \  i += 1\n    }\n    if i == arr.count - 1 {\n        return true\n    }\n  \
    \  var j = i + 1\n    while j < arr.count - 1 {\n        if arr[j] < arr[j + 1]\
    \ {\n            break\n        }\n        j += 1\n    }\n    if j == arr.count\
    \ - 1 {\n        return true\n    }\n    var k = j + 1\n    while k < arr.count\
    \ - 1 {\n        if arr[k] > arr[k + 1] {\n            break\n        }\n    \
    \    k += 1\n    }\n    if k == arr.count - 1 {\n        return true\n    }\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr:\
    \ [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmplroeroig/tmplroeroig.swift:76: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7fd165ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7fd1351b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7fd1351988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7fd13507b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplroeroig                        0x00005604facb654e <unavailable> + 5454

    5    libc.so.6                          0x00002b7fd1846460 __libc_start_main +
    245

    6    tmplroeroig                        0x00005604facb6019 <unavailable> + 4121

    '
  stdout: ''
  timestamp: 1659824794
- exit_code: 0
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    if arr.count == 0 {\n        return\
    \ true\n    }\n    var arr = arr\n    var count = 0\n    while arr != arr.sorted()\
    \ {\n        count += 1\n        let last = arr.removeLast()\n        arr.insert(last,\
    \ at: 0)\n        if count > arr.count {\n            return false\n        }\n\
    \    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr:\
    \ [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824794
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    if arr.count == 0 {\n        return\
    \ true\n    }\n    var arr = arr\n    var i = arr.count - 1\n    while i > 0 {\n\
    \        if arr[i] < arr[i - 1] {\n            break\n        }\n        i -=\
    \ 1\n    }\n    if i == 0 {\n        return true\n    }\n    var j = i\n    while\
    \ j > 0 {\n        if arr[j] < arr[j - 1] {\n            return false\n      \
    \  }\n        j -= 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr: [4, 3, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr:\
    \ [] as [Int]) == true)"
  status: Exception
  stderr: 'tmpc57mr2fk/tmpc57mr2fk.swift:61: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad607cd6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad6079cdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad6079cd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad6079cc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpc57mr2fk                        0x000055d4bd5503ba <unavailable> + 5050

    5    libc.so.6                          0x00002ad607ec2460 __libc_start_main +
    245

    6    tmpc57mr2fk                        0x000055d4bd550019 <unavailable> + 4121

    '
  stdout: ''
  timestamp: 1659824794
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    // TODO: Implement\n    return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmp9aps1mij/tmp9aps1mij.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aea197afc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aea194a6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aea194a6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aea194a57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9aps1mij                        0x0000558c02f4a30a <unavailable> + 4874

    5    libc.so.6                          0x00002aea1999b460 __libc_start_main +
    245

    6    tmp9aps1mij                        0x0000558c02f49f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659824794
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    if arr.count == 0 {\n        return\
    \ true\n    }\n    var arr = arr\n    var i = 0\n    while i < arr.count - 1 {\n\
    \        if arr[i] > arr[i + 1] {\n            let temp = arr[i]\n           \
    \ arr[i] = arr[i + 1]\n            arr[i + 1] = temp\n            i = 0\n    \
    \    } else {\n            i += 1\n        }\n    }\n    return arr == arr.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmpvfysey5_/tmpvfysey5_.swift:57: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5f97e29c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5f97b20b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5f97b20988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5f97b1f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvfysey5_                        0x0000561214ca269e <unavailable> + 5790

    5    libc.so.6                          0x00002b5f98015460 __libc_start_main +
    245

    6    tmpvfysey5_                        0x0000561214ca2169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659824794
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    // TODO: Implement this function\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr:\
    \ [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmplm04e3qr/tmplm04e3qr.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af86a6ffc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af86a3f6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af86a3f6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af86a3f57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplm04e3qr                        0x000055ba61eda30a <unavailable> + 4874

    5    libc.so.6                          0x00002af86a8eb460 __libc_start_main +
    245

    6    tmplm04e3qr                        0x000055ba61ed9f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659824793
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    // TODO: Write your code here\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr:\
    \ [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmppxc807fi/tmppxc807fi.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acf5d537c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acf5d22eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acf5d22e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acf5d22d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppxc807fi                        0x000055a5f82ee30a <unavailable> + 4874

    5    libc.so.6                          0x00002acf5d723460 __libc_start_main +
    245

    6    tmppxc807fi                        0x000055a5f82edf69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659824793
- exit_code: 0
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    guard arr.count > 0 else { return\
    \ true }\n    var arr = arr\n    var count = 0\n    var i = 0\n    while i < arr.count\
    \ - 1 {\n        if arr[i] > arr[i + 1] {\n            count += 1\n          \
    \  if count > 1 {\n                return false\n            }\n            i\
    \ += 1\n        } else {\n            i += 1\n        }\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [] as [Int]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824794
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    // TODO: Implement this function\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr:\
    \ [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmplm04e3qr/tmplm04e3qr.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af86a6ffc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af86a3f6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af86a3f6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af86a3f57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplm04e3qr                        0x000055ba61eda30a <unavailable> + 4874

    5    libc.so.6                          0x00002af86a8eb460 __libc_start_main +
    245

    6    tmplm04e3qr                        0x000055ba61ed9f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659824793
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    if arr.count == 0 {\n        return\
    \ true\n    }\n    var arr = arr\n    var i = 0\n    while i < arr.count - 1 {\n\
    \        if arr[i] > arr[i + 1] {\n            let temp = arr[i]\n           \
    \ arr[i] = arr[i + 1]\n            arr[i + 1] = temp\n            i = 0\n    \
    \    } else {\n            i += 1\n        }\n    }\n    for i in 0..<arr.count\
    \ - 1 {\n        if arr[i] > arr[i + 1] {\n            return false\n        }\n\
    \    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr:\
    \ [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmpz1rnwdws/tmpz1rnwdws.swift:62: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0dcb6f6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0dcb3edb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0dcb3ed988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0dcb3ec7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpz1rnwdws                        0x000055976638072e <unavailable> + 5934

    5    libc.so.6                          0x00002b0dcb8e2460 __libc_start_main +
    245

    6    tmpz1rnwdws                        0x00005597663801f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659824794
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    if arr.count == 0 {\n        return\
    \ true\n    }\n    var arr = arr\n    var i = arr.count - 1\n    while i > 0 {\n\
    \        if arr[i] < arr[i - 1] {\n            let temp = arr[i]\n           \
    \ arr[i] = arr[i - 1]\n            arr[i - 1] = temp\n            i = arr.count\
    \ - 1\n        } else {\n            i -= 1\n        }\n    }\n    for i in 0..<arr.count\
    \ - 1 {\n        if arr[i] > arr[i + 1] {\n            return false\n        }\n\
    \    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr:\
    \ [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmpktto6x4p/tmpktto6x4p.swift:62: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b28bc7f3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b28bc4eab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b28bc4ea988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b28bc4e97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpktto6x4p                        0x000055b13697e72e <unavailable> + 5934

    5    libc.so.6                          0x00002b28bc9df460 __libc_start_main +
    245

    6    tmpktto6x4p                        0x000055b13697e1f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659824794
- exit_code: 0
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    var arr = arr\n    var count = 0\n\
    \    var i = 0\n    while i < arr.count - 1 {\n        if arr[i] > arr[i + 1]\
    \ {\n            count += 1\n        }\n        i += 1\n    }\n    if count >\
    \ 1 {\n        return false\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr: [4, 3, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr:\
    \ [] as [Int]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824794
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    if arr.count == 0 {\n        return\
    \ true\n    }\n    var arr = arr\n    var count = 0\n    while arr.count > 1 {\n\
    \        if arr[0] > arr[1] {\n            arr.append(arr[0])\n            arr.remove(at:\
    \ 0)\n            count += 1\n        } else {\n            arr.remove(at: 0)\n\
    \        }\n    }\n    return count % 2 == 0\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr: [4, 3, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr:\
    \ [] as [Int]) == true)"
  status: Exception
  stderr: 'tmpqi_2k5l1/tmpqi_2k5l1.swift:54: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab097c64c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab09795bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab09795b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab09795a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqi_2k5l1                        0x0000555cb983d4fa <unavailable> + 5370

    5    libc.so.6                          0x00002ab097e50460 __libc_start_main +
    245

    6    tmpqi_2k5l1                        0x0000555cb983d159 <unavailable> + 4441

    '
  stdout: ''
  timestamp: 1659824794
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    if arr.count == 0 {\n        return\
    \ true\n    }\n    var sortedArr = arr.sorted()\n    var count = 0\n    for i\
    \ in 0..<arr.count {\n        if arr[i] != sortedArr[i] {\n            count +=\
    \ 1\n        }\n    }\n    return count <= 1\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr: [4, 3, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr:\
    \ [] as [Int]) == true)"
  status: Exception
  stderr: 'tmp8dyjgwmv/tmp8dyjgwmv.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b11d03efc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b11d00e6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b11d00e6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b11d00e57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8dyjgwmv                        0x00005590a4d555ea <unavailable> + 5610

    5    libc.so.6                          0x00002b11d05db460 __libc_start_main +
    245

    6    tmp8dyjgwmv                        0x00005590a4d55249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659824794
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    if arr.count == 0 {\n        return\
    \ true\n    }\n    var arr = arr\n    var i = arr.count - 1\n    while i > 0 {\n\
    \        if arr[i] < arr[i - 1] {\n            let temp = arr[i]\n           \
    \ arr[i] = arr[i - 1]\n            arr[i - 1] = temp\n            i = arr.count\
    \ - 1\n        } else {\n            i -= 1\n        }\n    }\n    return arr\
    \ == arr.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr:\
    \ [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmpzjec73y8/tmpzjec73y8.swift:57: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4e268fec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4e265f5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4e265f5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4e265f47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzjec73y8                        0x00005582d9af369e <unavailable> + 5790

    5    libc.so.6                          0x00002b4e26aea460 __libc_start_main +
    245

    6    tmpzjec73y8                        0x00005582d9af3169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659824794
- exit_code: 0
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    var arr = arr\n    var count = 0\n\
    \    while arr != arr.sorted() {\n        arr.insert(arr.removeLast(), at: 0)\n\
    \        count += 1\n        if count > arr.count {\n            return false\n\
    \        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr: [4, 3, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr:\
    \ [] as [Int]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824794
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    if arr.count == 0 {\n        return\
    \ true\n    }\n    var arr = arr\n    var i = 0\n    while i < arr.count - 1 {\n\
    \        if arr[i] > arr[i + 1] {\n            break\n        }\n        i +=\
    \ 1\n    }\n    if i == arr.count - 1 {\n        return true\n    }\n    var j\
    \ = i + 1\n    while j < arr.count - 1 {\n        if arr[j] < arr[j + 1] {\n \
    \           break\n        }\n        j += 1\n    }\n    if j == arr.count - 1\
    \ {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr: [4, 3, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr:\
    \ [] as [Int]) == true)"
  status: Exception
  stderr: 'tmp7jb9hq92/tmp7jb9hq92.swift:64: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adc0f765c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adc0f45cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adc0f45c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adc0f45b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7jb9hq92                        0x000055d424c953ba <unavailable> + 5050

    5    libc.so.6                          0x00002adc0f951460 __libc_start_main +
    245

    6    tmp7jb9hq92                        0x000055d424c95019 <unavailable> + 4121

    '
  stdout: ''
  timestamp: 1659824794
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    if arr.count == 0 {\n        return\
    \ true\n    }\n    var min = arr[0]\n    for i in 1..<arr.count {\n        if\
    \ arr[i] < min {\n            return false\n        }\n        min = arr[i]\n\
    \    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr:\
    \ [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmpm85k6m2w/tmpm85k6m2w.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afe293dcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afe290d3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afe290d3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afe290d27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpm85k6m2w                        0x0000556c63c0a54a <unavailable> + 5450

    5    libc.so.6                          0x00002afe295c8460 __libc_start_main +
    245

    6    tmpm85k6m2w                        0x0000556c63c0a1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824794
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    if arr.count == 0 {\n        return\
    \ true\n    }\n    var arr = arr\n    var i = arr.count - 1\n    while i > 0 {\n\
    \        if arr[i] < arr[i - 1] {\n            let temp = arr[i]\n           \
    \ arr[i] = arr[i - 1]\n            arr[i - 1] = temp\n            i = arr.count\
    \ - 1\n        } else {\n            i -= 1\n        }\n    }\n    for i in 0..<arr.count\
    \ - 1 {\n        if arr[i] > arr[i + 1] {\n            return false\n        }\n\
    \    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr:\
    \ [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmpktto6x4p/tmpktto6x4p.swift:62: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b28bc7f3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b28bc4eab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b28bc4ea988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b28bc4e97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpktto6x4p                        0x000055b13697e72e <unavailable> + 5934

    5    libc.so.6                          0x00002b28bc9df460 __libc_start_main +
    245

    6    tmpktto6x4p                        0x000055b13697e1f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659824794
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    if arr.count == 0 {\n        return\
    \ true\n    }\n    var arr = arr\n    var i = arr.count - 1\n    while i > 0 {\n\
    \        if arr[i] < arr[i - 1] {\n            break\n        }\n        i -=\
    \ 1\n    }\n    if i == 0 {\n        return true\n    }\n    var j = i - 1\n \
    \   while j > 0 {\n        if arr[j] > arr[j - 1] {\n            break\n     \
    \   }\n        j -= 1\n    }\n    if j == 0 {\n        return true\n    }\n  \
    \  return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr:\
    \ [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmpj8ac1gh3/tmpj8ac1gh3.swift:64: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab7bd0d2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab7bcdc9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab7bcdc9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab7bcdc87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpj8ac1gh3                        0x00005586a591b3ba <unavailable> + 5050

    5    libc.so.6                          0x00002ab7bd2be460 __libc_start_main +
    245

    6    tmpj8ac1gh3                        0x00005586a591b019 <unavailable> + 4121

    '
  stdout: ''
  timestamp: 1659824794
- exit_code: 1
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    var arr = arr\n    var count = 0\n\
    \    while !is_sorted(arr: arr) {\n        let last = arr.removeLast()\n     \
    \   arr.insert(last, at: 0)\n        count += 1\n        if count > arr.count\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [] as [Int]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpmhgxsnu3.swift:26:12: error: cannot find 'is_sorted' in scope\n\
    \    while !is_sorted(arr: arr) {\n           ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824794
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    // TODO: Implement this function\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr:\
    \ [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmplm04e3qr/tmplm04e3qr.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af86a6ffc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af86a3f6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af86a3f6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af86a3f57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplm04e3qr                        0x000055ba61eda30a <unavailable> + 4874

    5    libc.so.6                          0x00002af86a8eb460 __libc_start_main +
    245

    6    tmplm04e3qr                        0x000055ba61ed9f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659824793
- exit_code: 1
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    var arr = arr\n    var count = 0\n\
    \    while !is_sorted(arr: arr) {\n        count += 1\n        if count > arr.count\
    \ {\n            return false\n        }\n        arr = shift_right(arr: arr)\n\
    \    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr:\
    \ [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpru0ix6l1.swift:26:12: error: cannot find 'is_sorted' in scope\n\
    \    while !is_sorted(arr: arr) {\n           ^~~~~~~~~\n/tmp/tmpru0ix6l1.swift:31:15:\
    \ error: cannot find 'shift_right' in scope\n        arr = shift_right(arr: arr)\n\
    \              ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824794
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    // TODO: Write some code to solve\
    \ this coding challenge\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr: [4, 3, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr:\
    \ [] as [Int]) == true)"
  status: Exception
  stderr: 'tmpo6yml78o/tmpo6yml78o.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adb41e25c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adb41b1cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adb41b1c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adb41b1b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpo6yml78o                        0x0000559f3898f30a <unavailable> + 4874

    5    libc.so.6                          0x00002adb42011460 __libc_start_main +
    245

    6    tmpo6yml78o                        0x0000559f3898ef69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659824794
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    if arr.count == 0 {\n        return\
    \ true\n    }\n    var arr = arr\n    var i = arr.count - 1\n    while i > 0 {\n\
    \        if arr[i] < arr[i - 1] {\n            let temp = arr[i]\n           \
    \ arr[i] = arr[i - 1]\n            arr[i - 1] = temp\n            i = arr.count\
    \ - 1\n        } else {\n            i -= 1\n        }\n    }\n    for i in 0..<arr.count\
    \ - 1 {\n        if arr[i] > arr[i + 1] {\n            return false\n        }\n\
    \    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr:\
    \ [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmpktto6x4p/tmpktto6x4p.swift:62: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b28bc7f3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b28bc4eab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b28bc4ea988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b28bc4e97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpktto6x4p                        0x000055b13697e72e <unavailable> + 5934

    5    libc.so.6                          0x00002b28bc9df460 __libc_start_main +
    245

    6    tmpktto6x4p                        0x000055b13697e1f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659824794
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    // TODO: Implement this function\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr:\
    \ [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmplm04e3qr/tmplm04e3qr.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af86a6ffc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af86a3f6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af86a3f6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af86a3f57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplm04e3qr                        0x000055ba61eda30a <unavailable> + 4874

    5    libc.so.6                          0x00002af86a8eb460 __libc_start_main +
    245

    6    tmplm04e3qr                        0x000055ba61ed9f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659824793
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    // TODO: Implement this function\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr:\
    \ [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmplm04e3qr/tmplm04e3qr.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af86a6ffc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af86a3f6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af86a3f6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af86a3f57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplm04e3qr                        0x000055ba61eda30a <unavailable> + 4874

    5    libc.so.6                          0x00002af86a8eb460 __libc_start_main +
    245

    6    tmplm04e3qr                        0x000055ba61ed9f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659824793
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    if arr.count == 0 {\n        return\
    \ true\n    }\n    var arr = arr\n    var i = 0\n    while i < arr.count - 1 {\n\
    \        if arr[i] > arr[i + 1] {\n            let temp = arr[i]\n           \
    \ arr[i] = arr[i + 1]\n            arr[i + 1] = temp\n            i = 0\n    \
    \    } else {\n            i += 1\n        }\n    }\n    return true\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmpjout4dg5/tmpjout4dg5.swift:57: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b51d38afc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b51d35a6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b51d35a6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b51d35a57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjout4dg5                        0x00005555da7c75ae <unavailable> + 5550

    5    libc.so.6                          0x00002b51d3a9b460 __libc_start_main +
    245

    6    tmpjout4dg5                        0x00005555da7c7079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1659824794
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    if arr.count == 0 {\n        return\
    \ true\n    }\n    var arr = arr\n    var i = 0\n    while i < arr.count - 1 {\n\
    \        if arr[i] > arr[i + 1] {\n            break\n        }\n        i +=\
    \ 1\n    }\n    if i == arr.count - 1 {\n        return true\n    }\n    var j\
    \ = i + 1\n    while j < arr.count - 1 {\n        if arr[j] < arr[j + 1] {\n \
    \           break\n        }\n        j += 1\n    }\n    if j == arr.count - 1\
    \ {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr: [4, 3, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr:\
    \ [] as [Int]) == true)"
  status: Exception
  stderr: 'tmp7jb9hq92/tmp7jb9hq92.swift:64: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adc0f765c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adc0f45cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adc0f45c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adc0f45b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7jb9hq92                        0x000055d424c953ba <unavailable> + 5050

    5    libc.so.6                          0x00002adc0f951460 __libc_start_main +
    245

    6    tmp7jb9hq92                        0x000055d424c95019 <unavailable> + 4121

    '
  stdout: ''
  timestamp: 1659824794
- exit_code: 0
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    if arr.count == 0 {\n        return\
    \ true\n    }\n    var arr = arr\n    var count = 0\n    while arr != arr.sorted()\
    \ {\n        arr.insert(arr.removeLast(), at: 0)\n        count += 1\n       \
    \ if count > arr.count {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr: [3,\
    \ 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824793
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    if arr.count == 0 {\n        return\
    \ true\n    }\n    var arr = arr\n    var i = arr.count - 1\n    while i > 0 {\n\
    \        if arr[i] < arr[i - 1] {\n            break\n        }\n        i -=\
    \ 1\n    }\n    if i == 0 {\n        return true\n    }\n    var j = i - 1\n \
    \   while j > 0 {\n        if arr[j] > arr[j - 1] {\n            break\n     \
    \   }\n        j -= 1\n    }\n    if j == 0 {\n        return true\n    }\n  \
    \  return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr:\
    \ [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmpj8ac1gh3/tmpj8ac1gh3.swift:64: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab7bd0d2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab7bcdc9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab7bcdc9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab7bcdc87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpj8ac1gh3                        0x00005586a591b3ba <unavailable> + 5050

    5    libc.so.6                          0x00002ab7bd2be460 __libc_start_main +
    245

    6    tmpj8ac1gh3                        0x00005586a591b019 <unavailable> + 4121

    '
  stdout: ''
  timestamp: 1659824794
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    // TODO: Implement this function\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr:\
    \ [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmplm04e3qr/tmplm04e3qr.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af86a6ffc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af86a3f6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af86a3f6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af86a3f57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplm04e3qr                        0x000055ba61eda30a <unavailable> + 4874

    5    libc.so.6                          0x00002af86a8eb460 __libc_start_main +
    245

    6    tmplm04e3qr                        0x000055ba61ed9f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659824793
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    // TODO: Implement this function\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr:\
    \ [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmplm04e3qr/tmplm04e3qr.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af86a6ffc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af86a3f6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af86a3f6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af86a3f57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplm04e3qr                        0x000055ba61eda30a <unavailable> + 4874

    5    libc.so.6                          0x00002af86a8eb460 __libc_start_main +
    245

    6    tmplm04e3qr                        0x000055ba61ed9f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659824793
- exit_code: 0
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    var arr = arr\n    if arr.count\
    \ == 0 {\n        return true\n    }\n    var count = 0\n    while arr.count >\
    \ 1 {\n        if arr[0] > arr[1] {\n            arr.append(arr[0])\n        \
    \    arr.remove(at: 0)\n            count += 1\n        } else {\n           \
    \ arr.remove(at: 0)\n        }\n    }\n    if count > 1 {\n        return false\n\
    \    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr:\
    \ [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824794
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    if arr.count == 0 {\n        return\
    \ true\n    }\n    var arr = arr\n    var i = 0\n    while i < arr.count - 1 {\n\
    \        if arr[i] > arr[i + 1] {\n            let temp = arr[i]\n           \
    \ arr[i] = arr[i + 1]\n            arr[i + 1] = temp\n            i = 0\n    \
    \    } else {\n            i += 1\n        }\n    }\n    return arr == arr.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmpvfysey5_/tmpvfysey5_.swift:57: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5f97e29c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5f97b20b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5f97b20988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5f97b1f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvfysey5_                        0x0000561214ca269e <unavailable> + 5790

    5    libc.so.6                          0x00002b5f98015460 __libc_start_main +
    245

    6    tmpvfysey5_                        0x0000561214ca2169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659824794
- exit_code: -1
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    var arr = arr\n    var i = 0\n \
    \   while i < arr.count - 1 {\n        if arr[i] > arr[i + 1] {\n            arr.remove(at:\
    \ i)\n            arr.insert(arr[arr.count - 1], at: 0)\n            i = 0\n \
    \       } else {\n            i += 1\n        }\n    }\n    return true\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [] as [Int]) == true)"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659824799
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    if arr.count == 0 {\n        return\
    \ true\n    }\n    var arr = arr\n    var i = 0\n    var j = arr.count - 1\n \
    \   while i < j {\n        if arr[i] > arr[i + 1] {\n            let temp = arr[i]\n\
    \            arr[i] = arr[i + 1]\n            arr[i + 1] = temp\n            i\
    \ += 1\n        } else if arr[j] < arr[j - 1] {\n            let temp = arr[j]\n\
    \            arr[j] = arr[j - 1]\n            arr[j - 1] = temp\n            j\
    \ -= 1\n        } else {\n            i += 1\n            j -= 1\n        }\n\
    \    }\n    return arr.sorted() == arr\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr: [4, 3, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr:\
    \ [] as [Int]) == true)"
  status: Exception
  stderr: 'tmp6s6ggi34/tmp6s6ggi34.swift:62: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2fbdc90c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2fbd987b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2fbd987988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2fbd9867b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6s6ggi34                        0x00005624978ce50a <unavailable> + 5386

    5    libc.so.6                          0x00002b2fbde7c460 __libc_start_main +
    245

    6    tmp6s6ggi34                        0x00005624978ce169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659824794
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    if arr.count == 0 {\n        return\
    \ true\n    }\n    var arr = arr\n    var i = arr.count - 1\n    while i > 0 {\n\
    \        if arr[i] < arr[i - 1] {\n            let temp = arr[i]\n           \
    \ arr[i] = arr[i - 1]\n            arr[i - 1] = temp\n            i = arr.count\
    \ - 1\n        } else {\n            i -= 1\n        }\n    }\n    return arr\
    \ == arr.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr:\
    \ [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmpzjec73y8/tmpzjec73y8.swift:57: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4e268fec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4e265f5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4e265f5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4e265f47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzjec73y8                        0x00005582d9af369e <unavailable> + 5790

    5    libc.so.6                          0x00002b4e26aea460 __libc_start_main +
    245

    6    tmpzjec73y8                        0x00005582d9af3169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659824794
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    if arr.count == 0 {\n        return\
    \ true\n    }\n    var arr = arr\n    var i = 0\n    while i < arr.count - 1 {\n\
    \        if arr[i] > arr[i + 1] {\n            break\n        }\n        i +=\
    \ 1\n    }\n    if i == arr.count - 1 {\n        return true\n    }\n    var j\
    \ = i + 1\n    while j < arr.count - 1 {\n        if arr[j] < arr[j + 1] {\n \
    \           break\n        }\n        j += 1\n    }\n    if j == arr.count - 1\
    \ {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr: [4, 3, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr:\
    \ [] as [Int]) == true)"
  status: Exception
  stderr: 'tmp7jb9hq92/tmp7jb9hq92.swift:64: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adc0f765c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adc0f45cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adc0f45c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adc0f45b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7jb9hq92                        0x000055d424c953ba <unavailable> + 5050

    5    libc.so.6                          0x00002adc0f951460 __libc_start_main +
    245

    6    tmp7jb9hq92                        0x000055d424c95019 <unavailable> + 4121

    '
  stdout: ''
  timestamp: 1659824794
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    if arr.count == 0 {\n        return\
    \ true\n    }\n    var arr = arr\n    var i = 0\n    while i < arr.count - 1 {\n\
    \        if arr[i] > arr[i + 1] {\n            arr.remove(at: i)\n           \
    \ arr.insert(arr[i], at: 0)\n            i = 0\n        } else {\n           \
    \ i += 1\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr: [4, 3, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr:\
    \ [] as [Int]) == true)"
  status: Exception
  stderr: 'tmp4xjv4dk8/tmp4xjv4dk8.swift:56: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b484afe8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b484acdfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b484acdf988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b484acde7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4xjv4dk8                        0x000056489c2965fe <unavailable> + 5630

    5    libc.so.6                          0x00002b484b1d4460 __libc_start_main +
    245

    6    tmp4xjv4dk8                        0x000056489c2960c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1659824794
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    // TODO: Implement this function\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr:\
    \ [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmplm04e3qr/tmplm04e3qr.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af86a6ffc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af86a3f6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af86a3f6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af86a3f57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplm04e3qr                        0x000055ba61eda30a <unavailable> + 4874

    5    libc.so.6                          0x00002af86a8eb460 __libc_start_main +
    245

    6    tmplm04e3qr                        0x000055ba61ed9f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659824793
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    if arr.count == 0 {\n        return\
    \ true\n    }\n    var arr = arr\n    var i = 0\n    while i < arr.count - 1 {\n\
    \        if arr[i] > arr[i + 1] {\n            break\n        }\n        i +=\
    \ 1\n    }\n    if i == arr.count - 1 {\n        return true\n    }\n    var j\
    \ = i + 1\n    while j < arr.count - 1 {\n        if arr[j] < arr[j + 1] {\n \
    \           break\n        }\n        j += 1\n    }\n    if j == arr.count - 1\
    \ {\n        return true\n    }\n    var k = j + 1\n    while k < arr.count -\
    \ 1 {\n        if arr[k] > arr[k + 1] {\n            break\n        }\n      \
    \  k += 1\n    }\n    if k == arr.count - 1 {\n        return true\n    }\n  \
    \  return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr:\
    \ [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmpasn_pe55/tmpasn_pe55.swift:76: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b574ee9bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b574eb92b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b574eb92988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b574eb917b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpasn_pe55                        0x00005562590b754e <unavailable> + 5454

    5    libc.so.6                          0x00002b574f087460 __libc_start_main +
    245

    6    tmpasn_pe55                        0x00005562590b7019 <unavailable> + 4121

    '
  stdout: ''
  timestamp: 1659824794
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    if arr.count == 0 {\n        return\
    \ true\n    }\n    var arr = arr\n    var count = 0\n    for i in 1..<arr.count\
    \ {\n        if arr[i] < arr[i-1] {\n            count += 1\n        }\n    }\n\
    \    if count > 1 {\n        return false\n    }\n    var min = arr[0]\n    for\
    \ i in 1..<arr.count {\n        if arr[i] < min {\n            min = arr[i]\n\
    \        }\n    }\n    var index = 0\n    for i in 0..<arr.count {\n        if\
    \ arr[i] == min {\n            index = i\n            break\n        }\n    }\n\
    \    var temp = arr[index]\n    for i in index..<arr.count-1 {\n        arr[i]\
    \ = arr[i+1]\n    }\n    arr[arr.count-1] = temp\n    var flag = true\n    for\
    \ i in 1..<arr.count {\n        if arr[i] < arr[i-1] {\n            flag = false\n\
    \            break\n        }\n    }\n    return flag\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr: [4, 3, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr:\
    \ [] as [Int]) == true)"
  status: Exception
  stderr: 'tmpx1tz0gm_/tmpx1tz0gm_.swift:78: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afebf9d0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afebf6c7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afebf6c7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afebf6c67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpx1tz0gm_                        0x000055ecbb84d59a <unavailable> + 5530

    5    libc.so.6                          0x00002afebfbbc460 __libc_start_main +
    245

    6    tmpx1tz0gm_                        0x000055ecbb84d1f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659824794
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    // TODO: Implement this function\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr:\
    \ [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmplm04e3qr/tmplm04e3qr.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af86a6ffc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af86a3f6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af86a3f6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af86a3f57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplm04e3qr                        0x000055ba61eda30a <unavailable> + 4874

    5    libc.so.6                          0x00002af86a8eb460 __libc_start_main +
    245

    6    tmplm04e3qr                        0x000055ba61ed9f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659824793
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    guard arr.count > 0 else { return\
    \ true }\n    var sortedArr = arr.sorted()\n    var count = 0\n    for i in 0..<arr.count\
    \ {\n        if arr[i] != sortedArr[i] {\n            count += 1\n        }\n\
    \    }\n    return count <= 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr:\
    \ [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmp01eqnw_4/tmp01eqnw_4.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aaf7a668c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aaf7a35fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aaf7a35f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aaf7a35e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp01eqnw_4                        0x00005581fd8b45ea <unavailable> + 5610

    5    libc.so.6                          0x00002aaf7a854460 __libc_start_main +
    245

    6    tmp01eqnw_4                        0x00005581fd8b4249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659824794
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    guard arr.count > 0 else { return\
    \ true }\n    var arr = arr\n    var i = arr.count - 1\n    while i > 0 {\n  \
    \      if arr[i] < arr[i - 1] {\n            let temp = arr[i]\n            arr[i]\
    \ = arr[i - 1]\n            arr[i - 1] = temp\n            i -= 1\n        } else\
    \ {\n            i -= 1\n        }\n    }\n    return arr == arr.sorted()\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmpttniej3p/tmpttniej3p.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba40cf0fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba40cc06b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba40cc06988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba40cc057b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpttniej3p                        0x000055d45c8dc50a <unavailable> + 5386

    5    libc.so.6                          0x00002ba40d0fb460 __libc_start_main +
    245

    6    tmpttniej3p                        0x000055d45c8dc169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659824794
- exit_code: -1
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    var arr = arr\n    if arr.count\
    \ == 0 {\n        return true\n    }\n    var i = 0\n    while i < arr.count -\
    \ 1 {\n        if arr[i] > arr[i + 1] {\n            arr.insert(arr.remove(at:\
    \ i), at: 0)\n            i = 0\n        } else {\n            i += 1\n      \
    \  }\n    }\n    return arr == arr.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr: [4, 3, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr:\
    \ [] as [Int]) == true)"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659824799
- exit_code: 0
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    if arr.count == 0 {\n        return\
    \ true\n    }\n    var arr = arr\n    var count = 0\n    while arr != arr.sorted()\
    \ {\n        arr.insert(arr.removeLast(), at: 0)\n        count += 1\n       \
    \ if count == arr.count {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr: [3,\
    \ 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824794
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    // TODO: Write your code here\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr:\
    \ [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmppxc807fi/tmppxc807fi.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acf5d537c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acf5d22eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acf5d22e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acf5d22d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppxc807fi                        0x000055a5f82ee30a <unavailable> + 4874

    5    libc.so.6                          0x00002acf5d723460 __libc_start_main +
    245

    6    tmppxc807fi                        0x000055a5f82edf69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659824793
- exit_code: 1
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    var arr = arr\n    var count = 0\n\
    \    while !is_sorted(arr: arr) {\n        if count == arr.count {\n         \
    \   return false\n        }\n        arr = shift_right(arr: arr)\n        count\
    \ += 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr:\
    \ [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpza20wk3c.swift:26:12: error: cannot find 'is_sorted' in scope\n\
    \    while !is_sorted(arr: arr) {\n           ^~~~~~~~~\n/tmp/tmpza20wk3c.swift:30:15:\
    \ error: cannot find 'shift_right' in scope\n        arr = shift_right(arr: arr)\n\
    \              ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824793
- exit_code: 0
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    if arr.count == 0 {\n        return\
    \ true\n    }\n    var arr = arr\n    var count = 0\n    while arr != arr.sorted()\
    \ {\n        arr.insert(arr.removeLast(), at: 0)\n        count += 1\n       \
    \ if count == arr.count {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr: [3,\
    \ 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824794
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    var arr = arr\n    var i = 0\n \
    \   while i < arr.count - 1 {\n        if arr[i] > arr[i + 1] {\n            let\
    \ temp = arr[i]\n            arr[i] = arr[i + 1]\n            arr[i + 1] = temp\n\
    \            i = 0\n        } else {\n            i += 1\n        }\n    }\n \
    \   return arr == arr.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr:\
    \ [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmpguzez56i/tmpguzez56i.swift:54: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8ff9ca9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8ff99a0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8ff99a0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8ff999f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpguzez56i                        0x00005576e009069e <unavailable> + 5790

    5    libc.so.6                          0x00002b8ff9e95460 __libc_start_main +
    245

    6    tmpguzez56i                        0x00005576e0090169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659824794
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    if arr.count == 0 {\n        return\
    \ true\n    }\n    var arr = arr\n    var i = arr.count - 1\n    while i > 0 {\n\
    \        if arr[i] < arr[i - 1] {\n            let temp = arr[i]\n           \
    \ arr[i] = arr[i - 1]\n            arr[i - 1] = temp\n            i = arr.count\
    \ - 1\n        } else {\n            i -= 1\n        }\n    }\n    return arr\
    \ == arr.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr:\
    \ [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmpzjec73y8/tmpzjec73y8.swift:57: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4e268fec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4e265f5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4e265f5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4e265f47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzjec73y8                        0x00005582d9af369e <unavailable> + 5790

    5    libc.so.6                          0x00002b4e26aea460 __libc_start_main +
    245

    6    tmpzjec73y8                        0x00005582d9af3169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659824794
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    if arr.count == 0 {\n        return\
    \ true\n    }\n    var min = arr[0]\n    for i in 1..<arr.count {\n        if\
    \ arr[i] < min {\n            return false\n        }\n        min = arr[i]\n\
    \    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr:\
    \ [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmpm85k6m2w/tmpm85k6m2w.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afe293dcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afe290d3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afe290d3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afe290d27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpm85k6m2w                        0x0000556c63c0a54a <unavailable> + 5450

    5    libc.so.6                          0x00002afe295c8460 __libc_start_main +
    245

    6    tmpm85k6m2w                        0x0000556c63c0a1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824794
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    if arr.count == 0 {\n        return\
    \ true\n    }\n    var min = arr[0]\n    for i in 1..<arr.count {\n        if\
    \ arr[i] < min {\n            return false\n        }\n        min = arr[i]\n\
    \    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr:\
    \ [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmpm85k6m2w/tmpm85k6m2w.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afe293dcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afe290d3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afe290d3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afe290d27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpm85k6m2w                        0x0000556c63c0a54a <unavailable> + 5450

    5    libc.so.6                          0x00002afe295c8460 __libc_start_main +
    245

    6    tmpm85k6m2w                        0x0000556c63c0a1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824794
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    // TODO: Implement this function\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr:\
    \ [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmplm04e3qr/tmplm04e3qr.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af86a6ffc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af86a3f6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af86a3f6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af86a3f57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplm04e3qr                        0x000055ba61eda30a <unavailable> + 4874

    5    libc.so.6                          0x00002af86a8eb460 __libc_start_main +
    245

    6    tmplm04e3qr                        0x000055ba61ed9f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659824793
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    // TODO: Implement this function\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr:\
    \ [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmplm04e3qr/tmplm04e3qr.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af86a6ffc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af86a3f6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af86a3f6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af86a3f57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplm04e3qr                        0x000055ba61eda30a <unavailable> + 4874

    5    libc.so.6                          0x00002af86a8eb460 __libc_start_main +
    245

    6    tmplm04e3qr                        0x000055ba61ed9f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659824793
- exit_code: 0
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    guard arr.count > 0 else { return\
    \ true }\n    var arr = arr\n    var count = 0\n    for i in 0..<arr.count - 1\
    \ {\n        if arr[i] > arr[i + 1] {\n            count += 1\n        }\n   \
    \ }\n    if count > 1 {\n        return false\n    }\n    return true\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [] as [Int]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824794
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    var arr = arr\n    var i = 0\n \
    \   while i < arr.count - 1 {\n        if arr[i] > arr[i + 1] {\n            let\
    \ temp = arr[i]\n            arr[i] = arr[i + 1]\n            arr[i + 1] = temp\n\
    \            i = 0\n        } else {\n            i += 1\n        }\n    }\n \
    \   return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr:\
    \ [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmpo5wdqud3/tmpo5wdqud3.swift:54: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b93b3adac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b93b37d1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b93b37d1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b93b37d07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpo5wdqud3                        0x000055e4550835ae <unavailable> + 5550

    5    libc.so.6                          0x00002b93b3cc6460 __libc_start_main +
    245

    6    tmpo5wdqud3                        0x000055e455083079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1659824794
- exit_code: 0
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    if arr.count == 0 {\n        return\
    \ true\n    }\n    var arr = arr\n    var count = 0\n    while arr != arr.sorted()\
    \ {\n        count += 1\n        let last = arr.removeLast()\n        arr.insert(last,\
    \ at: 0)\n        if count > arr.count {\n            return false\n        }\n\
    \    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr:\
    \ [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824794
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    if arr.count == 0 {\n        return\
    \ true\n    }\n    var arr = arr\n    var i = 0\n    while i < arr.count - 1 {\n\
    \        if arr[i] > arr[i + 1] {\n            break\n        }\n        i +=\
    \ 1\n    }\n    if i == arr.count - 1 {\n        return true\n    }\n    var j\
    \ = i + 1\n    while j < arr.count - 1 {\n        if arr[j] < arr[j + 1] {\n \
    \           break\n        }\n        j += 1\n    }\n    if j == arr.count - 1\
    \ {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr: [4, 3, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr:\
    \ [] as [Int]) == true)"
  status: Exception
  stderr: 'tmp7jb9hq92/tmp7jb9hq92.swift:64: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adc0f765c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adc0f45cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adc0f45c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adc0f45b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7jb9hq92                        0x000055d424c953ba <unavailable> + 5050

    5    libc.so.6                          0x00002adc0f951460 __libc_start_main +
    245

    6    tmp7jb9hq92                        0x000055d424c95019 <unavailable> + 4121

    '
  stdout: ''
  timestamp: 1659824794
- exit_code: 0
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    var arr = arr\n    var count = 0\n\
    \    while arr != arr.sorted() {\n        let last = arr.removeLast()\n      \
    \  arr.insert(last, at: 0)\n        count += 1\n        if count > arr.count {\n\
    \            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr: [4, 3, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr:\
    \ [] as [Int]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824793
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    var arr = arr\n    var count = 0\n\
    \    while arr.count > 0 {\n        let min = arr.min()!\n        if arr[0] ==\
    \ min {\n            arr.removeFirst()\n        } else {\n            arr.append(arr.removeFirst())\n\
    \            count += 1\n        }\n    }\n    return count % 2 == 0\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmpnctkusen/tmpnctkusen.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8284d68c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8284a5fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8284a5f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8284a5e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnctkusen                        0x000055c3e210c5ea <unavailable> + 5610

    5    libc.so.6                          0x00002b8284f54460 __libc_start_main +
    245

    6    tmpnctkusen                        0x000055c3e210c249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659824794
- exit_code: 1
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    if arr.count == 0 {\n        return\
    \ true\n    }\n    var arr = arr\n    var i = arr.count - 1\n    while i > 0 {\n\
    \        if arr[i] < arr[i - 1] {\n            let temp = arr[i]\n           \
    \ arr[i] = arr[i - 1]\n            arr[i - 1] = temp\n            i = arr.count\
    \ - 1\n        } else {\n            i -= 1\n        }\n    }\n    return is_sorted(arr:\
    \ arr)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr: [3,\
    \ 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpppwgf6bw.swift:39:12: error: cannot find 'is_sorted' in scope\n\
    \    return is_sorted(arr: arr)\n           ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824794
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    if arr.count == 0 {\n        return\
    \ true\n    }\n    var arr = arr\n    var i = 0\n    while i < arr.count - 1 {\n\
    \        if arr[i] > arr[i + 1] {\n            break\n        }\n        i +=\
    \ 1\n    }\n    if i == arr.count - 1 {\n        return true\n    }\n    var j\
    \ = i + 1\n    while j < arr.count - 1 {\n        if arr[j] < arr[j + 1] {\n \
    \           break\n        }\n        j += 1\n    }\n    if j == arr.count - 1\
    \ {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr: [4, 3, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr:\
    \ [] as [Int]) == true)"
  status: Exception
  stderr: 'tmp7jb9hq92/tmp7jb9hq92.swift:64: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adc0f765c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adc0f45cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adc0f45c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adc0f45b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7jb9hq92                        0x000055d424c953ba <unavailable> + 5050

    5    libc.so.6                          0x00002adc0f951460 __libc_start_main +
    245

    6    tmp7jb9hq92                        0x000055d424c95019 <unavailable> + 4121

    '
  stdout: ''
  timestamp: 1659824794
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    // TODO: Implement this function\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr:\
    \ [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmplm04e3qr/tmplm04e3qr.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af86a6ffc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af86a3f6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af86a3f6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af86a3f57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplm04e3qr                        0x000055ba61eda30a <unavailable> + 4874

    5    libc.so.6                          0x00002af86a8eb460 __libc_start_main +
    245

    6    tmplm04e3qr                        0x000055ba61ed9f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659824793
- exit_code: 1
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    if arr.count == 0 {\n        return\
    \ true\n    }\n    var arr = arr\n    var count = 0\n    while !is_sorted(arr:\
    \ arr) {\n        let last = arr.removeLast()\n        arr.insert(last, at: 0)\n\
    \        count += 1\n        if count > arr.count {\n            return false\n\
    \        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr: [4, 3, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr:\
    \ [] as [Int]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp2ab1pddg.swift:29:12: error: cannot find 'is_sorted' in scope\n\
    \    while !is_sorted(arr: arr) {\n           ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824794
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    // TODO: Write your code here\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr:\
    \ [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmppxc807fi/tmppxc807fi.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acf5d537c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acf5d22eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acf5d22e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acf5d22d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppxc807fi                        0x000055a5f82ee30a <unavailable> + 4874

    5    libc.so.6                          0x00002acf5d723460 __libc_start_main +
    245

    6    tmppxc807fi                        0x000055a5f82edf69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659824793
- exit_code: 0
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    var arr = arr\n    var count = 0\n\
    \    while arr != arr.sorted() {\n        arr.insert(arr.removeLast(), at: 0)\n\
    \        count += 1\n        if count > arr.count {\n            return false\n\
    \        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr: [4, 3, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr:\
    \ [] as [Int]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824794
- exit_code: 0
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    if arr.count == 0 {\n        return\
    \ true\n    }\n    var arr = arr\n    var count = 0\n    while arr.last! < arr.first!\
    \ {\n        let last = arr.removeLast()\n        arr.insert(last, at: 0)\n  \
    \      count += 1\n    }\n    for i in 0..<arr.count - 1 {\n        if arr[i]\
    \ > arr[i + 1] {\n            return false\n        }\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [] as [Int]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824794
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    var arr = arr\n    var i = 0\n \
    \   while i < arr.count - 1 {\n        if arr[i] > arr[i + 1] {\n            let\
    \ temp = arr[i]\n            arr[i] = arr[i + 1]\n            arr[i + 1] = temp\n\
    \            i = 0\n        } else {\n            i += 1\n        }\n    }\n \
    \   return arr == arr.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr:\
    \ [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmpguzez56i/tmpguzez56i.swift:54: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8ff9ca9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8ff99a0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8ff99a0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8ff999f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpguzez56i                        0x00005576e009069e <unavailable> + 5790

    5    libc.so.6                          0x00002b8ff9e95460 __libc_start_main +
    245

    6    tmpguzez56i                        0x00005576e0090169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659824794
- exit_code: 1
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    var arr = arr\n    var count = 0\n\
    \    while !isSorted(arr: arr) {\n        if count > arr.count {\n           \
    \ return false\n        }\n        arr = shiftRight(arr: arr)\n        count +=\
    \ 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr:\
    \ [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpzqy7a6nz.swift:26:12: error: cannot find 'isSorted' in scope\n\
    \    while !isSorted(arr: arr) {\n           ^~~~~~~~\n/tmp/tmpzqy7a6nz.swift:30:15:\
    \ error: cannot find 'shiftRight' in scope\n        arr = shiftRight(arr: arr)\n\
    \              ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824794
- exit_code: 1
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    var arr = arr\n    var count = 0\n\
    \    while !is_sorted(arr: arr) {\n        if count > arr.count {\n          \
    \  return false\n        }\n        arr = shift_right(arr: arr)\n        count\
    \ += 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr:\
    \ [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpu7kzdscv.swift:26:12: error: cannot find 'is_sorted' in scope\n\
    \    while !is_sorted(arr: arr) {\n           ^~~~~~~~~\n/tmp/tmpu7kzdscv.swift:30:15:\
    \ error: cannot find 'shift_right' in scope\n        arr = shift_right(arr: arr)\n\
    \              ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824794
- exit_code: 1
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    var arr = arr\n    var count = 0\n\
    \    while !is_sorted(arr: arr) {\n        if count > arr.count {\n          \
    \  return false\n        }\n        arr = right_shift(arr: arr)\n        count\
    \ += 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr:\
    \ [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp7fc2ehmw.swift:26:12: error: cannot find 'is_sorted' in scope\n\
    \    while !is_sorted(arr: arr) {\n           ^~~~~~~~~\n/tmp/tmp7fc2ehmw.swift:30:15:\
    \ error: cannot find 'right_shift' in scope\n        arr = right_shift(arr: arr)\n\
    \              ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824793
- exit_code: 0
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    if arr.count == 0 {\n        return\
    \ true\n    }\n    var arr = arr\n    var count = 0\n    while arr.last! < arr[0]\
    \ {\n        let temp = arr.removeLast()\n        arr.insert(temp, at: 0)\n  \
    \      count += 1\n    }\n    for i in 0..<arr.count - 1 {\n        if arr[i]\
    \ > arr[i + 1] {\n            return false\n        }\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [] as [Int]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824795
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    if arr.count == 0 {\n        return\
    \ true\n    }\n    var arr = arr\n    var i = arr.count - 1\n    while i > 0 {\n\
    \        if arr[i] < arr[i - 1] {\n            break\n        }\n        i -=\
    \ 1\n    }\n    if i == 0 {\n        return true\n    }\n    var j = i - 1\n \
    \   while j > 0 {\n        if arr[j] > arr[j - 1] {\n            break\n     \
    \   }\n        j -= 1\n    }\n    if j == 0 {\n        return true\n    }\n  \
    \  return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr:\
    \ [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmpj8ac1gh3/tmpj8ac1gh3.swift:64: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab7bd0d2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab7bcdc9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab7bcdc9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab7bcdc87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpj8ac1gh3                        0x00005586a591b3ba <unavailable> + 5050

    5    libc.so.6                          0x00002ab7bd2be460 __libc_start_main +
    245

    6    tmpj8ac1gh3                        0x00005586a591b019 <unavailable> + 4121

    '
  stdout: ''
  timestamp: 1659824794
- exit_code: 0
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    var arr = arr\n    var count = 0\n\
    \    while arr != arr.sorted() {\n        let last = arr.removeLast()\n      \
    \  arr.insert(last, at: 0)\n        count += 1\n        if count > arr.count {\n\
    \            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr: [4, 3, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr:\
    \ [] as [Int]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824793
- exit_code: 0
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    var arr = arr\n    var count = 0\n\
    \    while arr != arr.sorted() {\n        count += 1\n        if count > arr.count\
    \ {\n            return false\n        }\n        let last = arr.removeLast()\n\
    \        arr.insert(last, at: 0)\n    }\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr: [4, 3, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr:\
    \ [] as [Int]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824794
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    var arr = arr\n    var count = 0\n\
    \    let n = arr.count\n    if n == 0 {\n        return true\n    }\n    for i\
    \ in 0..<n-1 {\n        if arr[i] > arr[i+1] {\n            count += 1\n     \
    \   }\n    }\n    if count > 1 {\n        return false\n    }\n    for i in 0..<n-1\
    \ {\n        if arr[i] > arr[i+1] {\n            let temp = arr[i]\n         \
    \   arr[i] = arr[i+1]\n            arr[i+1] = temp\n            break\n      \
    \  }\n    }\n    for i in 0..<n-1 {\n        if arr[i] > arr[i+1] {\n        \
    \    return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr: [4, 3, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr:\
    \ [] as [Int]) == true)"
  status: Exception
  stderr: 'tmpomvxw_fs/tmpomvxw_fs.swift:67: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b72e5d0bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b72e5a02b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b72e5a02988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b72e5a017b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpomvxw_fs                        0x000056525baae59a <unavailable> + 5530

    5    libc.so.6                          0x00002b72e5ef7460 __libc_start_main +
    245

    6    tmpomvxw_fs                        0x000056525baae1f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659824795
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    if arr.count == 0 {\n        return\
    \ true\n    }\n    var min = arr[0]\n    for i in 1..<arr.count {\n        if\
    \ arr[i] < min {\n            return false\n        }\n        min = arr[i]\n\
    \    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr:\
    \ [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmpm85k6m2w/tmpm85k6m2w.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afe293dcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afe290d3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afe290d3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afe290d27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpm85k6m2w                        0x0000556c63c0a54a <unavailable> + 5450

    5    libc.so.6                          0x00002afe295c8460 __libc_start_main +
    245

    6    tmpm85k6m2w                        0x0000556c63c0a1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824794
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    if arr.count == 0 {\n        return\
    \ true\n    }\n    var arr = arr\n    var count = 0\n    for i in 0..<arr.count\
    \ {\n        if arr[i] > arr[i+1] {\n            count += 1\n        }\n    }\n\
    \    if count > 1 {\n        return false\n    }\n    return true\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b56bbef6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b56bbbed561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b56bbbed286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b56bbbed13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b56bbbecbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b56bb9ece83 <unavailable> + 188035

    6    tmpfi37wf4w                        0x000055e86910faa6 <unavailable> + 6822

    7    tmpfi37wf4w                        0x000055e86910f4d5 <unavailable> + 5333

    8    libc.so.6                          0x00002b56bc0e2460 __libc_start_main +
    245

    9    tmpfi37wf4w                        0x000055e86910f1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824795
- exit_code: 0
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    if arr.count == 0 {\n        return\
    \ true\n    }\n    var arr = arr\n    var count = 0\n    while arr != arr.sorted()\
    \ {\n        arr.insert(arr.removeLast(), at: 0)\n        count += 1\n       \
    \ if count == arr.count {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr: [3,\
    \ 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824794
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    // TODO: Implement this function\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr:\
    \ [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmplm04e3qr/tmplm04e3qr.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af86a6ffc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af86a3f6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af86a3f6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af86a3f57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplm04e3qr                        0x000055ba61eda30a <unavailable> + 4874

    5    libc.so.6                          0x00002af86a8eb460 __libc_start_main +
    245

    6    tmplm04e3qr                        0x000055ba61ed9f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659824793
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    var arr = arr\n    var i = arr.count\
    \ - 1\n    while i > 0 {\n        if arr[i] < arr[i - 1] {\n            let temp\
    \ = arr[i]\n            arr[i] = arr[i - 1]\n            arr[i - 1] = temp\n \
    \           i -= 1\n        } else {\n            i -= 1\n        }\n    }\n \
    \   for i in 0..<arr.count - 1 {\n        if arr[i] > arr[i + 1] {\n         \
    \   return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr: [4, 3, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr:\
    \ [] as [Int]) == true)"
  status: Exception
  stderr: 'tmptz6gug2z/tmptz6gug2z.swift:57: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5c320f6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5c31dedb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5c31ded988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5c31dec7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptz6gug2z                        0x0000560bb3fe459a <unavailable> + 5530

    5    libc.so.6                          0x00002b5c322e2460 __libc_start_main +
    245

    6    tmptz6gug2z                        0x0000560bb3fe41f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659824795
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    var arr = arr\n    var i = arr.count\
    \ - 1\n    while i > 0 {\n        if arr[i] < arr[i - 1] {\n            let temp\
    \ = arr[i]\n            arr[i] = arr[i - 1]\n            arr[i - 1] = temp\n \
    \           i -= 1\n        } else {\n            i -= 1\n        }\n    }\n \
    \   return arr == arr.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr:\
    \ [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmpf61hful6/tmpf61hful6.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1f2082cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1f20523b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1f20523988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1f205227b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpf61hful6                        0x000055d678c2250a <unavailable> + 5386

    5    libc.so.6                          0x00002b1f20a18460 __libc_start_main +
    245

    6    tmpf61hful6                        0x000055d678c22169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659824794
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    var arr = arr\n    if arr.count\
    \ == 0 {\n        return true\n    }\n    var i = 0\n    while i < arr.count -\
    \ 1 {\n        if arr[i] > arr[i + 1] {\n            let temp = arr[i]\n     \
    \       arr[i] = arr[i + 1]\n            arr[i + 1] = temp\n            i = 0\n\
    \        } else {\n            i += 1\n        }\n    }\n    return arr == arr.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmpt_hrgetw/tmpt_hrgetw.swift:57: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b62fcffac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b62fccf1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b62fccf1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b62fccf07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpt_hrgetw                        0x000055795264269e <unavailable> + 5790

    5    libc.so.6                          0x00002b62fd1e6460 __libc_start_main +
    245

    6    tmpt_hrgetw                        0x0000557952642169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659824795
- exit_code: 1
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    var arr = arr\n    var count = 0\n\
    \    while !is_sorted(arr: arr) {\n        if count > arr.count {\n          \
    \  return false\n        }\n        let last = arr.removeLast()\n        arr.insert(last,\
    \ at: 0)\n        count += 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr: [4, 3, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr:\
    \ [] as [Int]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmplgdptpxi.swift:26:12: error: cannot find 'is_sorted' in scope\n\
    \    while !is_sorted(arr: arr) {\n           ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824794
- exit_code: 0
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    var arr = arr\n    var count = 0\n\
    \    var i = 0\n    while i < arr.count - 1 {\n        if arr[i] > arr[i + 1]\
    \ {\n            count += 1\n        }\n        i += 1\n    }\n    if count >\
    \ 1 {\n        return false\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr: [4, 3, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr:\
    \ [] as [Int]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824794
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    if arr.count == 0 {\n        return\
    \ true\n    }\n    var arr = arr\n    var i = 0\n    while i < arr.count - 1 {\n\
    \        if arr[i] > arr[i + 1] {\n            let temp = arr[i]\n           \
    \ arr[i] = arr[i + 1]\n            arr[i + 1] = temp\n            i = 0\n    \
    \    } else {\n            i += 1\n        }\n    }\n    return arr == arr.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmpvfysey5_/tmpvfysey5_.swift:57: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5f97e29c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5f97b20b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5f97b20988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5f97b1f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvfysey5_                        0x0000561214ca269e <unavailable> + 5790

    5    libc.so.6                          0x00002b5f98015460 __libc_start_main +
    245

    6    tmpvfysey5_                        0x0000561214ca2169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659824794
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    if arr.count == 0 {\n        return\
    \ true\n    }\n    var arr = arr\n    var i = arr.count - 1\n    while i > 0 {\n\
    \        if arr[i] < arr[i - 1] {\n            let temp = arr[i]\n           \
    \ arr[i] = arr[i - 1]\n            arr[i - 1] = temp\n            i -= 1\n   \
    \     } else {\n            i -= 1\n        }\n    }\n    for i in 0..<arr.count\
    \ - 1 {\n        if arr[i] > arr[i + 1] {\n            return false\n        }\n\
    \    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr:\
    \ [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmpi6wnl81i/tmpi6wnl81i.swift:60: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab899244c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab898f3bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab898f3b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab898f3a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpi6wnl81i                        0x0000560f7361759a <unavailable> + 5530

    5    libc.so.6                          0x00002ab899430460 __libc_start_main +
    245

    6    tmpi6wnl81i                        0x0000560f736171f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659824795
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    if arr.count == 0 {\n        return\
    \ true\n    }\n    var arr = arr\n    var i = arr.count - 1\n    while i > 0 {\n\
    \        if arr[i] < arr[i - 1] {\n            break\n        }\n        i -=\
    \ 1\n    }\n    if i == 0 {\n        return true\n    }\n    var j = i - 1\n \
    \   while j > 0 {\n        if arr[j] > arr[j - 1] {\n            break\n     \
    \   }\n        j -= 1\n    }\n    if j == 0 {\n        return true\n    }\n  \
    \  return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr:\
    \ [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmpj8ac1gh3/tmpj8ac1gh3.swift:64: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab7bd0d2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab7bcdc9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab7bcdc9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab7bcdc87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpj8ac1gh3                        0x00005586a591b3ba <unavailable> + 5050

    5    libc.so.6                          0x00002ab7bd2be460 __libc_start_main +
    245

    6    tmpj8ac1gh3                        0x00005586a591b019 <unavailable> + 4121

    '
  stdout: ''
  timestamp: 1659824794
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    // TODO: Implement\n    return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmp9aps1mij/tmp9aps1mij.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aea197afc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aea194a6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aea194a6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aea194a57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9aps1mij                        0x0000558c02f4a30a <unavailable> + 4874

    5    libc.so.6                          0x00002aea1999b460 __libc_start_main +
    245

    6    tmp9aps1mij                        0x0000558c02f49f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659824794
- exit_code: 1
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    var arr = arr\n    var count = 0\n\
    \    while !is_sorted(arr: arr) {\n        count += 1\n        if count > arr.count\
    \ {\n            return false\n        }\n        arr = shift_right(arr: arr)\n\
    \    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr:\
    \ [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpru0ix6l1.swift:26:12: error: cannot find 'is_sorted' in scope\n\
    \    while !is_sorted(arr: arr) {\n           ^~~~~~~~~\n/tmp/tmpru0ix6l1.swift:31:15:\
    \ error: cannot find 'shift_right' in scope\n        arr = shift_right(arr: arr)\n\
    \              ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824794
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    if arr.count == 0 {\n        return\
    \ true\n    }\n    var arr = arr\n    var i = 0\n    while i < arr.count - 1 {\n\
    \        if arr[i] > arr[i + 1] {\n            let temp = arr[i]\n           \
    \ arr[i] = arr[i + 1]\n            arr[i + 1] = temp\n            i = 0\n    \
    \    } else {\n            i += 1\n        }\n    }\n    return arr == arr.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmpvfysey5_/tmpvfysey5_.swift:57: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5f97e29c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5f97b20b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5f97b20988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5f97b1f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvfysey5_                        0x0000561214ca269e <unavailable> + 5790

    5    libc.so.6                          0x00002b5f98015460 __libc_start_main +
    245

    6    tmpvfysey5_                        0x0000561214ca2169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659824794
- exit_code: 1
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    if arr.count == 0 {\n        return\
    \ true\n    }\n    var arr = arr\n    var count = 0\n    while !isSorted(arr:\
    \ arr) {\n        arr = shiftRight(arr: arr)\n        count += 1\n        if count\
    \ > arr.count {\n            return false\n        }\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [] as [Int]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpfjoebylj.swift:29:12: error: cannot find 'isSorted' in scope\n\
    \    while !isSorted(arr: arr) {\n           ^~~~~~~~\n/tmp/tmpfjoebylj.swift:30:15:\
    \ error: cannot find 'shiftRight' in scope\n        arr = shiftRight(arr: arr)\n\
    \              ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824794
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    if arr.count == 0 {\n        return\
    \ true\n    }\n    var arr = arr\n    var i = 0\n    while i < arr.count - 1 {\n\
    \        if arr[i] > arr[i + 1] {\n            break\n        }\n        i +=\
    \ 1\n    }\n    if i == arr.count - 1 {\n        return true\n    }\n    var j\
    \ = i + 1\n    while j < arr.count - 1 {\n        if arr[j] < arr[j + 1] {\n \
    \           break\n        }\n        j += 1\n    }\n    if j == arr.count - 1\
    \ {\n        return true\n    }\n    var k = j + 1\n    while k < arr.count -\
    \ 1 {\n        if arr[k] > arr[k + 1] {\n            break\n        }\n      \
    \  k += 1\n    }\n    if k == arr.count - 1 {\n        return true\n    }\n  \
    \  return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr:\
    \ [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmpasn_pe55/tmpasn_pe55.swift:76: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b574ee9bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b574eb92b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b574eb92988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b574eb917b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpasn_pe55                        0x00005562590b754e <unavailable> + 5454

    5    libc.so.6                          0x00002b574f087460 __libc_start_main +
    245

    6    tmpasn_pe55                        0x00005562590b7019 <unavailable> + 4121

    '
  stdout: ''
  timestamp: 1659824794
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    var arr = arr\n    var sorted =\
    \ false\n    while !sorted {\n        sorted = true\n        for i in 0..<arr.count\
    \ - 1 {\n            if arr[i] > arr[i + 1] {\n                sorted = false\n\
    \                let temp = arr[i]\n                arr[i] = arr[i + 1]\n    \
    \            arr[i + 1] = temp\n            }\n        }\n    }\n    return arr\
    \ == arr.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr:\
    \ [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmpkq3jh2le/tmpkq3jh2le.swift:55: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2ea4907c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2ea45feb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2ea45fe988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2ea45fd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkq3jh2le                        0x00005632b790382e <unavailable> + 6190

    5    libc.so.6                          0x00002b2ea4af3460 __libc_start_main +
    245

    6    tmpkq3jh2le                        0x00005632b79032f9 <unavailable> + 4857

    '
  stdout: ''
  timestamp: 1659824795
- exit_code: 0
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    if arr.count == 0 {\n        return\
    \ true\n    }\n    var arr = arr\n    var count = 0\n    while arr.last! < arr[0]\
    \ {\n        arr.insert(arr.removeLast(), at: 0)\n        count += 1\n    }\n\
    \    for i in 1..<arr.count {\n        if arr[i] < arr[i - 1] {\n            return\
    \ false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr: [4, 3, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr:\
    \ [] as [Int]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824795
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    // TODO: Implement this function\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr:\
    \ [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmplm04e3qr/tmplm04e3qr.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af86a6ffc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af86a3f6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af86a3f6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af86a3f57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplm04e3qr                        0x000055ba61eda30a <unavailable> + 4874

    5    libc.so.6                          0x00002af86a8eb460 __libc_start_main +
    245

    6    tmplm04e3qr                        0x000055ba61ed9f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659824793
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    var arr = arr\n    var i = 0\n \
    \   while i < arr.count - 1 {\n        if arr[i] > arr[i + 1] {\n            let\
    \ temp = arr[i]\n            arr[i] = arr[i + 1]\n            arr[i + 1] = temp\n\
    \            i = 0\n        } else {\n            i += 1\n        }\n    }\n \
    \   return arr == arr.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr:\
    \ [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmpguzez56i/tmpguzez56i.swift:54: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8ff9ca9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8ff99a0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8ff99a0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8ff999f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpguzez56i                        0x00005576e009069e <unavailable> + 5790

    5    libc.so.6                          0x00002b8ff9e95460 __libc_start_main +
    245

    6    tmpguzez56i                        0x00005576e0090169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659824794
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    guard arr.count > 0 else { return\
    \ true }\n    var arr = arr\n    var last = arr.removeLast()\n    for i in (0..<arr.count).reversed()\
    \ {\n        if arr[i] > last {\n            return false\n        }\n       \
    \ last = arr[i]\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr: [4, 3, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr:\
    \ [] as [Int]) == true)"
  status: Exception
  stderr: 'tmpie8ponxj/tmpie8ponxj.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6544016c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6543d0db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6543d0d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6543d0c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpie8ponxj                        0x0000560bb83cb7fa <unavailable> + 6138

    5    libc.so.6                          0x00002b6544202460 __libc_start_main +
    245

    6    tmpie8ponxj                        0x0000560bb83cb459 <unavailable> + 5209

    '
  stdout: ''
  timestamp: 1659824795
- exit_code: -1
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    if arr.count == 0 {\n        return\
    \ true\n    }\n    var arr = arr\n    var i = 0\n    while i < arr.count - 1 {\n\
    \        if arr[i] > arr[i + 1] {\n            arr.remove(at: i)\n           \
    \ arr.insert(arr[arr.count - 1], at: 0)\n            i = 0\n        } else {\n\
    \            i += 1\n        }\n    }\n    return arr == arr.sorted()\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [] as [Int]) == true)"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659824800
- exit_code: 1
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    var arr = arr\n    var count = 0\n\
    \    while !is_sorted(arr: arr) {\n        arr = shift_right(arr: arr)\n     \
    \   count += 1\n        if count > arr.count {\n            return false\n   \
    \     }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr:\
    \ [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpxlq84sm5.swift:26:12: error: cannot find 'is_sorted' in scope\n\
    \    while !is_sorted(arr: arr) {\n           ^~~~~~~~~\n/tmp/tmpxlq84sm5.swift:27:15:\
    \ error: cannot find 'shift_right' in scope\n        arr = shift_right(arr: arr)\n\
    \              ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824794
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    guard arr.count > 0 else { return\
    \ true }\n    var min = arr[0]\n    for i in 1..<arr.count {\n        if arr[i]\
    \ < min {\n            return false\n        }\n        min = arr[i]\n    }\n\
    \    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr:\
    \ [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmpr3_l9eht/tmpr3_l9eht.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af843d47c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af843a3eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af843a3e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af843a3d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpr3_l9eht                        0x000055e31a8ed54a <unavailable> + 5450

    5    libc.so.6                          0x00002af843f33460 __libc_start_main +
    245

    6    tmpr3_l9eht                        0x000055e31a8ed1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824795
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    var arr = arr\n    if arr.count\
    \ == 0 {\n        return true\n    }\n    if arr.count == 1 {\n        return\
    \ true\n    }\n    var i = arr.count - 1\n    while i > 0 {\n        if arr[i]\
    \ < arr[i - 1] {\n            let temp = arr[i]\n            arr[i] = arr[i -\
    \ 1]\n            arr[i - 1] = temp\n            i -= 1\n        } else {\n  \
    \          i -= 1\n        }\n    }\n    if arr == arr.sorted() {\n        return\
    \ true\n    } else {\n        return false\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr: [4, 3, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr:\
    \ [] as [Int]) == true)"
  status: Exception
  stderr: 'tmpay6gvrrc/tmpay6gvrrc.swift:62: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b668fdbbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b668fab2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b668fab2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b668fab17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpay6gvrrc                        0x000055b7af54d50a <unavailable> + 5386

    5    libc.so.6                          0x00002b668ffa7460 __libc_start_main +
    245

    6    tmpay6gvrrc                        0x000055b7af54d169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659824795
- exit_code: 0
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    if arr.count == 0 {\n        return\
    \ true\n    }\n    var arr = arr\n    var count = 0\n    while arr != arr.sorted()\
    \ {\n        arr.insert(arr.removeLast(), at: 0)\n        count += 1\n       \
    \ if count > arr.count {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr: [3,\
    \ 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824793
- exit_code: 0
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    var arr = arr\n    var count = 0\n\
    \    while arr != arr.sorted() {\n        arr.insert(arr.removeLast(), at: 0)\n\
    \        count += 1\n        if count > arr.count {\n            return false\n\
    \        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr: [4, 3, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr:\
    \ [] as [Int]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824794
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr: [4, 3, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr:\
    \ [] as [Int]) == true)"
  status: Exception
  stderr: 'tmpmqt_5iw1/tmpmqt_5iw1.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2c56626c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2c5631db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2c5631d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2c5631c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmqt_5iw1                        0x000055da17a1b30a <unavailable> + 4874

    5    libc.so.6                          0x00002b2c56812460 __libc_start_main +
    245

    6    tmpmqt_5iw1                        0x000055da17a1af69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659824795
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    var arr = arr\n    if arr.count\
    \ == 0 {\n        return true\n    }\n    var i = arr.count - 1\n    while i >\
    \ 0 {\n        if arr[i] < arr[i - 1] {\n            break\n        }\n      \
    \  i -= 1\n    }\n    if i == 0 {\n        return true\n    }\n    while i < arr.count\
    \ - 1 {\n        if arr[i] > arr[i + 1] {\n            return false\n        }\n\
    \        i += 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr: [4, 3, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr:\
    \ [] as [Int]) == true)"
  status: Exception
  stderr: 'tmp_9rfhia7/tmp_9rfhia7.swift:62: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b52e5fe4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b52e5cdbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b52e5cdb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b52e5cda7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_9rfhia7                        0x000055e81b6ef54e <unavailable> + 5454

    5    libc.so.6                          0x00002b52e61d0460 __libc_start_main +
    245

    6    tmp_9rfhia7                        0x000055e81b6ef019 <unavailable> + 4121

    '
  stdout: ''
  timestamp: 1659824795
- exit_code: 1
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    var arr = arr\n    var count = 0\n\
    \    while !is_sorted(arr: arr) {\n        if count == arr.count {\n         \
    \   return false\n        }\n        arr = right_shift(arr: arr)\n        count\
    \ += 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr:\
    \ [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp6m0xqr92.swift:26:12: error: cannot find 'is_sorted' in scope\n\
    \    while !is_sorted(arr: arr) {\n           ^~~~~~~~~\n/tmp/tmp6m0xqr92.swift:30:15:\
    \ error: cannot find 'right_shift' in scope\n        arr = right_shift(arr: arr)\n\
    \              ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824795
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    // TODO: Implement this function\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr:\
    \ [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmplm04e3qr/tmplm04e3qr.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af86a6ffc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af86a3f6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af86a3f6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af86a3f57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplm04e3qr                        0x000055ba61eda30a <unavailable> + 4874

    5    libc.so.6                          0x00002af86a8eb460 __libc_start_main +
    245

    6    tmplm04e3qr                        0x000055ba61ed9f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659824793
- exit_code: 1
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    var arr = arr\n    var count = 0\n\
    \    while !is_sorted(arr: arr) {\n        if count == arr.count {\n         \
    \   return false\n        }\n        arr = right_shift(arr: arr)\n        count\
    \ += 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr:\
    \ [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp6m0xqr92.swift:26:12: error: cannot find 'is_sorted' in scope\n\
    \    while !is_sorted(arr: arr) {\n           ^~~~~~~~~\n/tmp/tmp6m0xqr92.swift:30:15:\
    \ error: cannot find 'right_shift' in scope\n        arr = right_shift(arr: arr)\n\
    \              ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824795
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    guard arr.count > 0 else { return\
    \ true }\n    var arr = arr\n    var count = 0\n    while arr.count > 0 {\n  \
    \      let first = arr.removeFirst()\n        if first > arr.first ?? Int.min\
    \ {\n            count += 1\n        }\n    }\n    return count <= 1\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmpjoxq5s18/tmpjoxq5s18.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7b71e30c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7b71b27b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7b71b27988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7b71b267b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjoxq5s18                        0x0000556a1f7d04aa <unavailable> + 5290

    5    libc.so.6                          0x00002b7b7201c460 __libc_start_main +
    245

    6    tmpjoxq5s18                        0x0000556a1f7d0109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1659824795
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    guard arr.count > 1 else { return\
    \ true }\n    var arr = arr\n    var i = arr.count - 1\n    while i > 0 {\n  \
    \      if arr[i] < arr[i - 1] {\n            let temp = arr[i]\n            arr[i]\
    \ = arr[i - 1]\n            arr[i - 1] = temp\n            i -= 1\n        } else\
    \ {\n            break\n        }\n    }\n    for i in 0..<arr.count - 1 {\n \
    \       if arr[i] > arr[i + 1] {\n            return false\n        }\n    }\n\
    \    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr:\
    \ [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmpx8z2ar5z/tmpx8z2ar5z.swift:58: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba5a1e65c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba5a1b5cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba5a1b5c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba5a1b5b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpx8z2ar5z                        0x000055cbd3e3f59a <unavailable> + 5530

    5    libc.so.6                          0x00002ba5a2051460 __libc_start_main +
    245

    6    tmpx8z2ar5z                        0x000055cbd3e3f1f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659824795
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    guard arr.count > 0 else { return\
    \ true }\n    var arr = arr\n    var i = 0\n    while i < arr.count - 1 {\n  \
    \      if arr[i] > arr[i + 1] {\n            arr.remove(at: i)\n            arr.insert(arr[i],\
    \ at: 0)\n            i = 0\n        } else {\n            i += 1\n        }\n\
    \    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr:\
    \ [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmpunvmgaj9/tmpunvmgaj9.swift:54: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9d7b5ffc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9d7b2f6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9d7b2f6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9d7b2f57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpunvmgaj9                        0x000055739295f5fe <unavailable> + 5630

    5    libc.so.6                          0x00002b9d7b7eb460 __libc_start_main +
    245

    6    tmpunvmgaj9                        0x000055739295f0c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1659824795
- exit_code: 0
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    var arr = arr\n    var count = 0\n\
    \    while arr != arr.sorted() {\n        arr.insert(arr.removeLast(), at: 0)\n\
    \        count += 1\n        if count > arr.count {\n            return false\n\
    \        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr: [4, 3, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr:\
    \ [] as [Int]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824794
- exit_code: 1
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    var arr = arr\n    var count = 0\n\
    \    while !is_sorted(arr: arr) {\n        arr = right_shift(arr: arr)\n     \
    \   count += 1\n        if count > arr.count {\n            return false\n   \
    \     }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr:\
    \ [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpmw6zgtdi.swift:26:12: error: cannot find 'is_sorted' in scope\n\
    \    while !is_sorted(arr: arr) {\n           ^~~~~~~~~\n/tmp/tmpmw6zgtdi.swift:27:15:\
    \ error: cannot find 'right_shift' in scope\n        arr = right_shift(arr: arr)\n\
    \              ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824795
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    if arr.count == 0 {\n        return\
    \ true\n    }\n    var sortedArr = arr.sorted()\n    var count = 0\n    for i\
    \ in 0..<arr.count {\n        if arr[i] != sortedArr[i] {\n            count +=\
    \ 1\n        }\n    }\n    return count <= 1\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr: [4, 3, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr:\
    \ [] as [Int]) == true)"
  status: Exception
  stderr: 'tmp8dyjgwmv/tmp8dyjgwmv.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b11d03efc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b11d00e6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b11d00e6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b11d00e57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8dyjgwmv                        0x00005590a4d555ea <unavailable> + 5610

    5    libc.so.6                          0x00002b11d05db460 __libc_start_main +
    245

    6    tmp8dyjgwmv                        0x00005590a4d55249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659824794
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    var arr = arr\n    if arr.count\
    \ == 0 {\n        return true\n    }\n    var i = arr.count - 1\n    while i >\
    \ 0 {\n        if arr[i] < arr[i - 1] {\n            let temp = arr[i]\n     \
    \       arr[i] = arr[i - 1]\n            arr[i - 1] = temp\n            i -= 1\n\
    \        } else {\n            i -= 1\n        }\n    }\n    for i in 0..<arr.count\
    \ - 1 {\n        if arr[i] > arr[i + 1] {\n            return false\n        }\n\
    \    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr:\
    \ [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmpt9jyr998/tmpt9jyr998.swift:60: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9884a34c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b988472bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b988472b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b988472a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpt9jyr998                        0x000055a5a95c159a <unavailable> + 5530

    5    libc.so.6                          0x00002b9884c20460 __libc_start_main +
    245

    6    tmpt9jyr998                        0x000055a5a95c11f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659824795
- exit_code: 1
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    var arr = arr\n    var count = 0\n\
    \    while !is_sorted(arr: arr) {\n        if count == arr.count {\n         \
    \   return false\n        }\n        arr = shift_right(arr: arr)\n        count\
    \ += 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr:\
    \ [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpza20wk3c.swift:26:12: error: cannot find 'is_sorted' in scope\n\
    \    while !is_sorted(arr: arr) {\n           ^~~~~~~~~\n/tmp/tmpza20wk3c.swift:30:15:\
    \ error: cannot find 'shift_right' in scope\n        arr = shift_right(arr: arr)\n\
    \              ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824793
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    guard arr.count > 1 else { return\
    \ true }\n    var min = arr[0]\n    for i in 1..<arr.count {\n        if arr[i]\
    \ < min {\n            return false\n        }\n        min = arr[i]\n    }\n\
    \    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr:\
    \ [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmpg81b5wm4/tmpg81b5wm4.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b65ab849c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b65ab540b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b65ab540988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b65ab53f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpg81b5wm4                        0x000055a85961e54a <unavailable> + 5450

    5    libc.so.6                          0x00002b65aba35460 __libc_start_main +
    245

    6    tmpg81b5wm4                        0x000055a85961e1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824795
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    guard arr.count > 0 else { return\
    \ true }\n    var arr = arr\n    var min = arr[0]\n    for i in 1..<arr.count\
    \ {\n        if arr[i] < min {\n            return false\n        }\n        min\
    \ = arr[i]\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr: [4, 3, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr:\
    \ [] as [Int]) == true)"
  status: Exception
  stderr: 'tmpv_3lfoit/tmpv_3lfoit.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5d03dd7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5d03aceb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5d03ace988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5d03acd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpv_3lfoit                        0x000055664e58b54a <unavailable> + 5450

    5    libc.so.6                          0x00002b5d03fc3460 __libc_start_main +
    245

    6    tmpv_3lfoit                        0x000055664e58b1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824795
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    // TODO: Write your code here\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr:\
    \ [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmppxc807fi/tmppxc807fi.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acf5d537c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acf5d22eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acf5d22e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acf5d22d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppxc807fi                        0x000055a5f82ee30a <unavailable> + 4874

    5    libc.so.6                          0x00002acf5d723460 __libc_start_main +
    245

    6    tmppxc807fi                        0x000055a5f82edf69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659824793
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    if arr.count == 0 {\n        return\
    \ true\n    }\n    var arr = arr\n    var count = 0\n    for i in 0..<arr.count\
    \ - 1 {\n        if arr[i] > arr[i + 1] {\n            count += 1\n        }\n\
    \    }\n    if count > 1 {\n        return false\n    }\n    var min = arr[0]\n\
    \    var min_index = 0\n    for i in 1..<arr.count {\n        if arr[i] < min\
    \ {\n            min = arr[i]\n            min_index = i\n        }\n    }\n \
    \   if min_index == 0 {\n        return true\n    }\n    for i in 0..<min_index\
    \ {\n        if arr[i] > min {\n            return false\n        }\n    }\n \
    \   return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr:\
    \ [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmprw410s6u/tmprw410s6u.swift:69: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aea655e4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aea652dbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aea652db988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aea652da7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprw410s6u                        0x00005572e1cdf54a <unavailable> + 5450

    5    libc.so.6                          0x00002aea657d0460 __libc_start_main +
    245

    6    tmprw410s6u                        0x00005572e1cdf1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824795
- exit_code: 0
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    var arr = arr\n    var count = 0\n\
    \    while arr != arr.sorted() {\n        arr.insert(arr.removeLast(), at: 0)\n\
    \        count += 1\n        if count > arr.count {\n            return false\n\
    \        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr: [4, 3, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr:\
    \ [] as [Int]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824794
- exit_code: 0
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    if arr.count == 0 {\n        return\
    \ true\n    }\n    var arr = arr\n    var count = 0\n    while arr.count > 0 {\n\
    \        let first = arr.removeFirst()\n        if arr.count > 0 {\n         \
    \   if first > arr.first! {\n                count += 1\n            }\n     \
    \   }\n    }\n    return count <= 1\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr: [4, 3, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr:\
    \ [] as [Int]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824795
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    if arr.count == 0 {\n        return\
    \ true\n    }\n    var arr = arr\n    var i = 0\n    while i < arr.count - 1 {\n\
    \        if arr[i] > arr[i + 1] {\n            break\n        }\n        i +=\
    \ 1\n    }\n    if i == arr.count - 1 {\n        return true\n    }\n    var j\
    \ = i + 1\n    while j < arr.count - 1 {\n        if arr[j] < arr[j + 1] {\n \
    \           break\n        }\n        j += 1\n    }\n    if j == arr.count - 1\
    \ {\n        return true\n    }\n    var k = j + 1\n    while k < arr.count -\
    \ 1 {\n        if arr[k] > arr[k + 1] {\n            break\n        }\n      \
    \  k += 1\n    }\n    if k == arr.count - 1 {\n        return true\n    }\n  \
    \  return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr:\
    \ [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmpasn_pe55/tmpasn_pe55.swift:76: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b574ee9bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b574eb92b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b574eb92988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b574eb917b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpasn_pe55                        0x00005562590b754e <unavailable> + 5454

    5    libc.so.6                          0x00002b574f087460 __libc_start_main +
    245

    6    tmpasn_pe55                        0x00005562590b7019 <unavailable> + 4121

    '
  stdout: ''
  timestamp: 1659824794
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    guard arr.count > 0 else {\n   \
    \     return true\n    }\n    var arr = arr\n    var i = arr.count - 1\n    while\
    \ i > 0 {\n        if arr[i] < arr[i - 1] {\n            let temp = arr[i]\n \
    \           arr[i] = arr[i - 1]\n            arr[i - 1] = temp\n            i\
    \ = arr.count - 1\n        } else {\n            i -= 1\n        }\n    }\n  \
    \  for i in 0..<arr.count - 1 {\n        if arr[i] > arr[i + 1] {\n          \
    \  return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr: [4, 3, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr:\
    \ [] as [Int]) == true)"
  status: Exception
  stderr: 'tmpfqlc9zxh/tmpfqlc9zxh.swift:62: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7e2ec59c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7e2e950b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7e2e950988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7e2e94f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfqlc9zxh                        0x00005608bba5172e <unavailable> + 5934

    5    libc.so.6                          0x00002b7e2ee45460 __libc_start_main +
    245

    6    tmpfqlc9zxh                        0x00005608bba511f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659824795
- exit_code: -1
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    guard arr.count > 0 else { return\
    \ true }\n    var arr = arr\n    var i = 0\n    while i < arr.count - 1 {\n  \
    \      if arr[i] > arr[i + 1] {\n            arr.insert(arr.removeLast(), at:\
    \ 0)\n            i = 0\n        } else {\n            i += 1\n        }\n   \
    \ }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr:\
    \ [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659824800
- exit_code: 0
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    if arr.count == 0 {\n        return\
    \ true\n    }\n    var arr = arr\n    var count = 0\n    while arr.last! < arr[0]\
    \ {\n        let temp = arr.removeLast()\n        arr.insert(temp, at: 0)\n  \
    \      count += 1\n    }\n    for i in 0..<arr.count - 1 {\n        if arr[i]\
    \ > arr[i + 1] {\n            return false\n        }\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [] as [Int]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824795
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    // TODO: Implement this function\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr:\
    \ [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmplm04e3qr/tmplm04e3qr.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af86a6ffc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af86a3f6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af86a3f6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af86a3f57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplm04e3qr                        0x000055ba61eda30a <unavailable> + 4874

    5    libc.so.6                          0x00002af86a8eb460 __libc_start_main +
    245

    6    tmplm04e3qr                        0x000055ba61ed9f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659824793
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    // TODO: Implement this function\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr:\
    \ [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmplm04e3qr/tmplm04e3qr.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af86a6ffc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af86a3f6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af86a3f6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af86a3f57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplm04e3qr                        0x000055ba61eda30a <unavailable> + 4874

    5    libc.so.6                          0x00002af86a8eb460 __libc_start_main +
    245

    6    tmplm04e3qr                        0x000055ba61ed9f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659824793
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    if arr.count == 0 {\n        return\
    \ true\n    }\n    var arr = arr\n    var i = 0\n    while i < arr.count - 1 {\n\
    \        if arr[i] > arr[i + 1] {\n            let temp = arr[i]\n           \
    \ arr[i] = arr[i + 1]\n            arr[i + 1] = temp\n            i = 0\n    \
    \    } else {\n            i += 1\n        }\n    }\n    return arr == arr.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmpvfysey5_/tmpvfysey5_.swift:57: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5f97e29c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5f97b20b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5f97b20988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5f97b1f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvfysey5_                        0x0000561214ca269e <unavailable> + 5790

    5    libc.so.6                          0x00002b5f98015460 __libc_start_main +
    245

    6    tmpvfysey5_                        0x0000561214ca2169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659824794
- exit_code: 0
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    if arr.count == 0 {\n        return\
    \ true\n    }\n    var arr = arr\n    var count = 0\n    while arr.last! < arr[0]\
    \ {\n        arr.insert(arr.removeLast(), at: 0)\n        count += 1\n    }\n\
    \    for i in 1..<arr.count {\n        if arr[i] < arr[i - 1] {\n            return\
    \ false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr: [4, 3, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr:\
    \ [] as [Int]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824795
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    // TODO: Write your code here\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr:\
    \ [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmppxc807fi/tmppxc807fi.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acf5d537c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acf5d22eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acf5d22e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acf5d22d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppxc807fi                        0x000055a5f82ee30a <unavailable> + 4874

    5    libc.so.6                          0x00002acf5d723460 __libc_start_main +
    245

    6    tmppxc807fi                        0x000055a5f82edf69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659824793
- exit_code: -1
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    if arr.count == 0 {\n        return\
    \ true\n    }\n    var arr = arr\n    var count = 0\n    while arr.sorted() !=\
    \ arr {\n        let last = arr.removeLast()\n        arr.insert(last, at: 0)\n\
    \        count += 1\n    }\n    return count <= arr.count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr: [4, 3, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr:\
    \ [] as [Int]) == true)"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659824800
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    if arr.count == 0 {\n        return\
    \ true\n    }\n    var arr = arr\n    var i = arr.count - 1\n    while i > 0 {\n\
    \        if arr[i] < arr[i - 1] {\n            break\n        }\n        i -=\
    \ 1\n    }\n    if i == 0 {\n        return true\n    }\n    var j = i - 1\n \
    \   while j > 0 {\n        if arr[j] > arr[j - 1] {\n            break\n     \
    \   }\n        j -= 1\n    }\n    if j == 0 {\n        return true\n    }\n  \
    \  return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr:\
    \ [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmpj8ac1gh3/tmpj8ac1gh3.swift:64: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab7bd0d2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab7bcdc9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab7bcdc9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab7bcdc87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpj8ac1gh3                        0x00005586a591b3ba <unavailable> + 5050

    5    libc.so.6                          0x00002ab7bd2be460 __libc_start_main +
    245

    6    tmpj8ac1gh3                        0x00005586a591b019 <unavailable> + 4121

    '
  stdout: ''
  timestamp: 1659824794
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    // TODO: Implement this function\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr:\
    \ [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmplm04e3qr/tmplm04e3qr.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af86a6ffc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af86a3f6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af86a3f6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af86a3f57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplm04e3qr                        0x000055ba61eda30a <unavailable> + 4874

    5    libc.so.6                          0x00002af86a8eb460 __libc_start_main +
    245

    6    tmplm04e3qr                        0x000055ba61ed9f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659824793
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    var arr = arr\n    if arr.count\
    \ == 0 {\n        return true\n    }\n    var i = 0\n    while i < arr.count -\
    \ 1 {\n        if arr[i] > arr[i + 1] {\n            let temp = arr[i]\n     \
    \       arr[i] = arr[i + 1]\n            arr[i + 1] = temp\n            i = 0\n\
    \        } else {\n            i += 1\n        }\n    }\n    return true\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmpg_xi0onj/tmpg_xi0onj.swift:57: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6756171c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6755e68b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6755e68988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6755e677b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpg_xi0onj                        0x0000559b350b75ae <unavailable> + 5550

    5    libc.so.6                          0x00002b675635d460 __libc_start_main +
    245

    6    tmpg_xi0onj                        0x0000559b350b7079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1659824795
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    if arr.count == 0 {\n        return\
    \ true\n    }\n    var arr = arr\n    var i = arr.count - 1\n    while i > 0 {\n\
    \        if arr[i] < arr[i - 1] {\n            return false\n        }\n     \
    \   i -= 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr: [4, 3, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr:\
    \ [] as [Int]) == true)"
  status: Exception
  stderr: 'tmp_hbr2onj/tmp_hbr2onj.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac8dd828c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac8dd51fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac8dd51f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac8dd51e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_hbr2onj                        0x000055cef15753ba <unavailable> + 5050

    5    libc.so.6                          0x00002ac8dda14460 __libc_start_main +
    245

    6    tmp_hbr2onj                        0x000055cef1575019 <unavailable> + 4121

    '
  stdout: ''
  timestamp: 1659824795
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    if arr.count == 0 {\n        return\
    \ true\n    }\n    var min = arr[0]\n    for i in 1..<arr.count {\n        if\
    \ arr[i] < min {\n            return false\n        }\n        min = arr[i]\n\
    \    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr:\
    \ [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmpm85k6m2w/tmpm85k6m2w.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afe293dcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afe290d3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afe290d3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afe290d27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpm85k6m2w                        0x0000556c63c0a54a <unavailable> + 5450

    5    libc.so.6                          0x00002afe295c8460 __libc_start_main +
    245

    6    tmpm85k6m2w                        0x0000556c63c0a1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824794
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    if arr.count == 0 {\n        return\
    \ true\n    }\n    var arr = arr\n    var i = 0\n    while i < arr.count - 1 {\n\
    \        if arr[i] > arr[i + 1] {\n            break\n        }\n        i +=\
    \ 1\n    }\n    if i == arr.count - 1 {\n        return true\n    }\n    var j\
    \ = i + 1\n    while j < arr.count - 1 {\n        if arr[j] < arr[j + 1] {\n \
    \           break\n        }\n        j += 1\n    }\n    if j == arr.count - 1\
    \ {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr: [4, 3, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr:\
    \ [] as [Int]) == true)"
  status: Exception
  stderr: 'tmp7jb9hq92/tmp7jb9hq92.swift:64: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adc0f765c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adc0f45cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adc0f45c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adc0f45b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7jb9hq92                        0x000055d424c953ba <unavailable> + 5050

    5    libc.so.6                          0x00002adc0f951460 __libc_start_main +
    245

    6    tmp7jb9hq92                        0x000055d424c95019 <unavailable> + 4121

    '
  stdout: ''
  timestamp: 1659824794
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    if arr.count == 0 {\n        return\
    \ true\n    }\n    var arr = arr\n    var i = 0\n    while i < arr.count - 1 {\n\
    \        if arr[i] > arr[i + 1] {\n            let temp = arr[i]\n           \
    \ arr[i] = arr[i + 1]\n            arr[i + 1] = temp\n            i = 0\n    \
    \    } else {\n            i += 1\n        }\n    }\n    for i in 0..<arr.count\
    \ - 1 {\n        if arr[i] > arr[i + 1] {\n            return false\n        }\n\
    \    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr:\
    \ [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmpz1rnwdws/tmpz1rnwdws.swift:62: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0dcb6f6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0dcb3edb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0dcb3ed988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0dcb3ec7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpz1rnwdws                        0x000055976638072e <unavailable> + 5934

    5    libc.so.6                          0x00002b0dcb8e2460 __libc_start_main +
    245

    6    tmpz1rnwdws                        0x00005597663801f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659824794
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    if arr.count == 0 {\n        return\
    \ true\n    }\n    var arr = arr\n    var i = 0\n    while i < arr.count - 1 {\n\
    \        if arr[i] > arr[i + 1] {\n            let temp = arr[i]\n           \
    \ arr[i] = arr[i + 1]\n            arr[i + 1] = temp\n            i = 0\n    \
    \    } else {\n            i += 1\n        }\n    }\n    return arr == arr.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmpvfysey5_/tmpvfysey5_.swift:57: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5f97e29c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5f97b20b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5f97b20988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5f97b1f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvfysey5_                        0x0000561214ca269e <unavailable> + 5790

    5    libc.so.6                          0x00002b5f98015460 __libc_start_main +
    245

    6    tmpvfysey5_                        0x0000561214ca2169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659824794
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    if arr.count == 0 {\n        return\
    \ true\n    }\n    var arr = arr\n    var count = 0\n    while arr.last! < arr.first!\
    \ {\n        arr.insert(arr.removeLast(), at: 0)\n        count += 1\n    }\n\
    \    return count < arr.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr:\
    \ [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmp7x6w6306/tmp7x6w6306.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8d1aebec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8d1abb5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8d1abb5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8d1abb47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7x6w6306                        0x00005652c097e7ce <unavailable> + 6094

    5    libc.so.6                          0x00002b8d1b0aa460 __libc_start_main +
    245

    6    tmp7x6w6306                        0x00005652c097e299 <unavailable> + 4761

    '
  stdout: ''
  timestamp: 1659824795
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    if arr.count == 0 {\n        return\
    \ true\n    }\n    var sortedArr = arr.sorted()\n    var count = 0\n    for i\
    \ in 0..<arr.count {\n        if arr[i] != sortedArr[i] {\n            count +=\
    \ 1\n        }\n    }\n    return count <= 1\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr: [4, 3, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr:\
    \ [] as [Int]) == true)"
  status: Exception
  stderr: 'tmp8dyjgwmv/tmp8dyjgwmv.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b11d03efc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b11d00e6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b11d00e6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b11d00e57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8dyjgwmv                        0x00005590a4d555ea <unavailable> + 5610

    5    libc.so.6                          0x00002b11d05db460 __libc_start_main +
    245

    6    tmp8dyjgwmv                        0x00005590a4d55249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659824794
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    if arr.count == 0 {\n        return\
    \ true\n    }\n    var arr = arr\n    var min = arr[0]\n    for i in 1..<arr.count\
    \ {\n        if arr[i] < min {\n            return false\n        }\n        min\
    \ = arr[i]\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr: [4, 3, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr:\
    \ [] as [Int]) == true)"
  status: Exception
  stderr: 'tmpmj9gn2le/tmpmj9gn2le.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae8ee1e6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae8ededdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae8ededd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae8ededc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmj9gn2le                        0x0000557978fc854a <unavailable> + 5450

    5    libc.so.6                          0x00002ae8ee3d2460 __libc_start_main +
    245

    6    tmpmj9gn2le                        0x0000557978fc81a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824794
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    guard arr.count > 0 else { return\
    \ true }\n    var arr = arr\n    var count = 0\n    for i in 0..<arr.count {\n\
    \        if arr[i] > arr[i+1] {\n            count += 1\n        }\n    }\n  \
    \  return count <= 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr:\
    \ [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ad1a83aac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad1a80a1561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ad1a80a1286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ad1a80a113c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ad1a80a0bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ad1a7ea0e83 <unavailable> + 188035

    6    tmpm4rl1dba                        0x00005604f26dca9b <unavailable> + 6811

    7    tmpm4rl1dba                        0x00005604f26dc4d5 <unavailable> + 5333

    8    libc.so.6                          0x00002ad1a8596460 __libc_start_main +
    245

    9    tmpm4rl1dba                        0x00005604f26dc1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824795
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    // TODO: Implement this function\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr:\
    \ [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmplm04e3qr/tmplm04e3qr.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af86a6ffc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af86a3f6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af86a3f6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af86a3f57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplm04e3qr                        0x000055ba61eda30a <unavailable> + 4874

    5    libc.so.6                          0x00002af86a8eb460 __libc_start_main +
    245

    6    tmplm04e3qr                        0x000055ba61ed9f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659824793
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    if arr.count == 0 {\n        return\
    \ true\n    }\n    var arr = arr\n    var i = arr.count - 1\n    while i > 0 {\n\
    \        if arr[i] < arr[i - 1] {\n            let temp = arr[i]\n           \
    \ arr[i] = arr[i - 1]\n            arr[i - 1] = temp\n            i -= 1\n   \
    \     } else {\n            i -= 1\n        }\n    }\n    return arr == arr.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmp0vmwjzv7/tmp0vmwjzv7.swift:55: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7538383c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b753807ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b753807a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b75380797b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0vmwjzv7                        0x000055c41a09b50a <unavailable> + 5386

    5    libc.so.6                          0x00002b753856f460 __libc_start_main +
    245

    6    tmp0vmwjzv7                        0x000055c41a09b169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659824795
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    if arr.count == 0 {\n        return\
    \ true\n    }\n    var arr = arr\n    var count = 0\n    while arr.first != arr.min()\
    \ {\n        arr.append(arr.removeFirst())\n        count += 1\n    }\n    return\
    \ count < arr.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr:\
    \ [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmpa4c2on4y/tmpa4c2on4y.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6415dc1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6415ab8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6415ab8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6415ab77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpa4c2on4y                        0x0000558677d6b72e <unavailable> + 5934

    5    libc.so.6                          0x00002b6415fad460 __libc_start_main +
    245

    6    tmpa4c2on4y                        0x0000558677d6b1f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659824795
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    if arr.count == 0 {\n        return\
    \ true\n    }\n    var arr = arr\n    var min = arr[0]\n    for i in 1..<arr.count\
    \ {\n        if arr[i] < min {\n            return false\n        }\n        min\
    \ = arr[i]\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr: [4, 3, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr:\
    \ [] as [Int]) == true)"
  status: Exception
  stderr: 'tmpmj9gn2le/tmpmj9gn2le.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae8ee1e6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae8ededdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae8ededd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae8ededc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmj9gn2le                        0x0000557978fc854a <unavailable> + 5450

    5    libc.so.6                          0x00002ae8ee3d2460 __libc_start_main +
    245

    6    tmpmj9gn2le                        0x0000557978fc81a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824794
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    // TODO: Write your code here\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr:\
    \ [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmppxc807fi/tmppxc807fi.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acf5d537c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acf5d22eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acf5d22e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acf5d22d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppxc807fi                        0x000055a5f82ee30a <unavailable> + 4874

    5    libc.so.6                          0x00002acf5d723460 __libc_start_main +
    245

    6    tmppxc807fi                        0x000055a5f82edf69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659824793
- exit_code: 0
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    var arr = arr\n    var count = 0\n\
    \    while arr != arr.sorted() {\n        let last = arr.removeLast()\n      \
    \  arr.insert(last, at: 0)\n        count += 1\n        if count > arr.count {\n\
    \            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr: [4, 3, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr:\
    \ [] as [Int]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824793
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    if arr.count == 0 {\n        return\
    \ true\n    }\n    var sortedArr = arr.sorted()\n    var count = 0\n    for i\
    \ in 0..<arr.count {\n        if arr[i] != sortedArr[i] {\n            count +=\
    \ 1\n        }\n    }\n    return count <= 1\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr: [4, 3, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr:\
    \ [] as [Int]) == true)"
  status: Exception
  stderr: 'tmp8dyjgwmv/tmp8dyjgwmv.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b11d03efc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b11d00e6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b11d00e6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b11d00e57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8dyjgwmv                        0x00005590a4d555ea <unavailable> + 5610

    5    libc.so.6                          0x00002b11d05db460 __libc_start_main +
    245

    6    tmp8dyjgwmv                        0x00005590a4d55249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659824794
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    if arr.count == 0 {\n        return\
    \ true\n    }\n    var arr = arr\n    var count = 0\n    while arr.last! < arr.first!\
    \ {\n        arr.insert(arr.removeLast(), at: 0)\n        count += 1\n    }\n\
    \    return count < arr.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr:\
    \ [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmp7x6w6306/tmp7x6w6306.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8d1aebec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8d1abb5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8d1abb5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8d1abb47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7x6w6306                        0x00005652c097e7ce <unavailable> + 6094

    5    libc.so.6                          0x00002b8d1b0aa460 __libc_start_main +
    245

    6    tmp7x6w6306                        0x00005652c097e299 <unavailable> + 4761

    '
  stdout: ''
  timestamp: 1659824795
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    if arr.count == 0 {\n        return\
    \ true\n    }\n    var arr = arr\n    var i = 0\n    var j = arr.count - 1\n \
    \   while i < j {\n        if arr[i] > arr[i + 1] {\n            arr[i] = arr[i\
    \ + 1]\n            i += 1\n        } else if arr[j] < arr[j - 1] {\n        \
    \    arr[j] = arr[j - 1]\n            j -= 1\n        } else {\n            return\
    \ false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr: [4, 3, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr:\
    \ [] as [Int]) == true)"
  status: Exception
  stderr: 'tmp7nqa0mno/tmp7nqa0mno.swift:57: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4c76303c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4c75ffab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4c75ffa988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4c75ff97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7nqa0mno                        0x000055b73985741a <unavailable> + 5146

    5    libc.so.6                          0x00002b4c764ef460 __libc_start_main +
    245

    6    tmp7nqa0mno                        0x000055b739857079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1659824795
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    if arr.count == 0 {\n        return\
    \ true\n    }\n    var arr = arr\n    var i = 0\n    while i < arr.count - 1 {\n\
    \        if arr[i] > arr[i + 1] {\n            let temp = arr[i]\n           \
    \ arr[i] = arr[i + 1]\n            arr[i + 1] = temp\n            i = 0\n    \
    \    } else {\n            i += 1\n        }\n    }\n    return arr == arr.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmpvfysey5_/tmpvfysey5_.swift:57: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5f97e29c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5f97b20b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5f97b20988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5f97b1f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvfysey5_                        0x0000561214ca269e <unavailable> + 5790

    5    libc.so.6                          0x00002b5f98015460 __libc_start_main +
    245

    6    tmpvfysey5_                        0x0000561214ca2169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659824794
- exit_code: 1
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    var arr = arr\n    var count = 0\n\
    \    while !is_sorted(arr: arr) {\n        let last = arr.removeLast()\n     \
    \   arr.insert(last, at: 0)\n        count += 1\n        if count > arr.count\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [] as [Int]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpmhgxsnu3.swift:26:12: error: cannot find 'is_sorted' in scope\n\
    \    while !is_sorted(arr: arr) {\n           ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824794
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    if arr.count == 0 {\n        return\
    \ true\n    }\n    var arr = arr\n    var min = arr[0]\n    for i in 1..<arr.count\
    \ {\n        if arr[i] < min {\n            return false\n        }\n        min\
    \ = arr[i]\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr: [4, 3, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr:\
    \ [] as [Int]) == true)"
  status: Exception
  stderr: 'tmpmj9gn2le/tmpmj9gn2le.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae8ee1e6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae8ededdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae8ededd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae8ededc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmj9gn2le                        0x0000557978fc854a <unavailable> + 5450

    5    libc.so.6                          0x00002ae8ee3d2460 __libc_start_main +
    245

    6    tmpmj9gn2le                        0x0000557978fc81a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824794
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    // TODO: Implement\n    return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmp9aps1mij/tmp9aps1mij.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aea197afc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aea194a6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aea194a6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aea194a57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9aps1mij                        0x0000558c02f4a30a <unavailable> + 4874

    5    libc.so.6                          0x00002aea1999b460 __libc_start_main +
    245

    6    tmp9aps1mij                        0x0000558c02f49f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659824794
- exit_code: 1
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    var arr = arr\n    var count = 0\n\
    \    while count < arr.count {\n        if arr.isSorted() {\n            return\
    \ true\n        }\n        arr.rotate(shift: 1)\n        count += 1\n    }\n \
    \   return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr:\
    \ [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpnkq9bi8k.swift:27:16: error: value of type '[Int]' has no member\
    \ 'isSorted'\n        if arr.isSorted() {\n           ~~~ ^~~~~~~~\n/tmp/tmpnkq9bi8k.swift:30:13:\
    \ error: value of type '[Int]' has no member 'rotate'\n        arr.rotate(shift:\
    \ 1)\n        ~~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824795
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    // TODO: Implement this function\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr:\
    \ [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmplm04e3qr/tmplm04e3qr.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af86a6ffc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af86a3f6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af86a3f6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af86a3f57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplm04e3qr                        0x000055ba61eda30a <unavailable> + 4874

    5    libc.so.6                          0x00002af86a8eb460 __libc_start_main +
    245

    6    tmplm04e3qr                        0x000055ba61ed9f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659824793
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    var arr = arr\n    var i = 0\n \
    \   while i < arr.count - 1 {\n        if arr[i] > arr[i + 1] {\n            let\
    \ temp = arr[i]\n            arr[i] = arr[i + 1]\n            arr[i + 1] = temp\n\
    \            i = 0\n        } else {\n            i += 1\n        }\n    }\n \
    \   return arr == arr.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr:\
    \ [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmpguzez56i/tmpguzez56i.swift:54: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8ff9ca9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8ff99a0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8ff99a0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8ff999f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpguzez56i                        0x00005576e009069e <unavailable> + 5790

    5    libc.so.6                          0x00002b8ff9e95460 __libc_start_main +
    245

    6    tmpguzez56i                        0x00005576e0090169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659824794
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    // TODO: Implement this function\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr:\
    \ [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmplm04e3qr/tmplm04e3qr.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af86a6ffc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af86a3f6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af86a3f6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af86a3f57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplm04e3qr                        0x000055ba61eda30a <unavailable> + 4874

    5    libc.so.6                          0x00002af86a8eb460 __libc_start_main +
    245

    6    tmplm04e3qr                        0x000055ba61ed9f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659824793
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    guard arr.count > 0 else { return\
    \ true }\n    var arr = arr\n    var i = 0\n    while i < arr.count - 1 {\n  \
    \      if arr[i] > arr[i + 1] {\n            let temp = arr[i]\n            arr[i]\
    \ = arr[i + 1]\n            arr[i + 1] = temp\n            i = 0\n        } else\
    \ {\n            i += 1\n        }\n    }\n    return arr.sorted() == arr\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmpy3f8n00r/tmpy3f8n00r.swift:55: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b98a9ac4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b98a97bbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b98a97bb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b98a97ba7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpy3f8n00r                        0x000055cef392a69e <unavailable> + 5790

    5    libc.so.6                          0x00002b98a9cb0460 __libc_start_main +
    245

    6    tmpy3f8n00r                        0x000055cef392a169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659824795
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    if arr.count == 0 {\n        return\
    \ true\n    }\n    var arr = arr\n    var i = 0\n    while i < arr.count - 1 {\n\
    \        if arr[i] > arr[i + 1] {\n            break\n        }\n        i +=\
    \ 1\n    }\n    if i == arr.count - 1 {\n        return true\n    }\n    var j\
    \ = i + 1\n    while j < arr.count - 1 {\n        if arr[j] < arr[j + 1] {\n \
    \           break\n        }\n        j += 1\n    }\n    if j == arr.count - 1\
    \ {\n        return true\n    }\n    var k = j + 1\n    while k < arr.count -\
    \ 1 {\n        if arr[k] > arr[k + 1] {\n            break\n        }\n      \
    \  k += 1\n    }\n    if k == arr.count - 1 {\n        return true\n    }\n  \
    \  return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr:\
    \ [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmpasn_pe55/tmpasn_pe55.swift:76: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b574ee9bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b574eb92b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b574eb92988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b574eb917b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpasn_pe55                        0x00005562590b754e <unavailable> + 5454

    5    libc.so.6                          0x00002b574f087460 __libc_start_main +
    245

    6    tmpasn_pe55                        0x00005562590b7019 <unavailable> + 4121

    '
  stdout: ''
  timestamp: 1659824794
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    // TODO: Implement this function\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr:\
    \ [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmplm04e3qr/tmplm04e3qr.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af86a6ffc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af86a3f6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af86a3f6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af86a3f57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplm04e3qr                        0x000055ba61eda30a <unavailable> + 4874

    5    libc.so.6                          0x00002af86a8eb460 __libc_start_main +
    245

    6    tmplm04e3qr                        0x000055ba61ed9f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659824793
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    if arr.count == 0 {\n        return\
    \ true\n    }\n    var arr = arr\n    var i = 0\n    while i < arr.count - 1 {\n\
    \        if arr[i] > arr[i + 1] {\n            let temp = arr[i]\n           \
    \ arr[i] = arr[i + 1]\n            arr[i + 1] = temp\n            i = 0\n    \
    \    } else {\n            i += 1\n        }\n    }\n    return arr == arr.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmpvfysey5_/tmpvfysey5_.swift:57: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5f97e29c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5f97b20b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5f97b20988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5f97b1f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvfysey5_                        0x0000561214ca269e <unavailable> + 5790

    5    libc.so.6                          0x00002b5f98015460 __libc_start_main +
    245

    6    tmpvfysey5_                        0x0000561214ca2169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659824794
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    guard arr.count > 0 else { return\
    \ true }\n    var arr = arr\n    var i = arr.count - 1\n    while i > 0 {\n  \
    \      if arr[i] < arr[i - 1] {\n            let temp = arr[i]\n            arr[i]\
    \ = arr[i - 1]\n            arr[i - 1] = temp\n            i -= 1\n        } else\
    \ {\n            i -= 1\n        }\n    }\n    return arr == arr.sorted()\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmpttniej3p/tmpttniej3p.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba40cf0fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba40cc06b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba40cc06988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba40cc057b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpttniej3p                        0x000055d45c8dc50a <unavailable> + 5386

    5    libc.so.6                          0x00002ba40d0fb460 __libc_start_main +
    245

    6    tmpttniej3p                        0x000055d45c8dc169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659824794
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    // TODO: Implement\n    return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmp9aps1mij/tmp9aps1mij.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aea197afc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aea194a6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aea194a6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aea194a57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9aps1mij                        0x0000558c02f4a30a <unavailable> + 4874

    5    libc.so.6                          0x00002aea1999b460 __libc_start_main +
    245

    6    tmp9aps1mij                        0x0000558c02f49f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659824794
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    // TODO: Implement this function\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr:\
    \ [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmplm04e3qr/tmplm04e3qr.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af86a6ffc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af86a3f6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af86a3f6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af86a3f57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplm04e3qr                        0x000055ba61eda30a <unavailable> + 4874

    5    libc.so.6                          0x00002af86a8eb460 __libc_start_main +
    245

    6    tmplm04e3qr                        0x000055ba61ed9f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659824793
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    guard arr.count > 0 else { return\
    \ true }\n    var arr = arr\n    var min = arr[0]\n    for i in 1..<arr.count\
    \ {\n        if arr[i] < min {\n            return false\n        }\n        min\
    \ = arr[i]\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr: [4, 3, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr:\
    \ [] as [Int]) == true)"
  status: Exception
  stderr: 'tmpv_3lfoit/tmpv_3lfoit.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5d03dd7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5d03aceb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5d03ace988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5d03acd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpv_3lfoit                        0x000055664e58b54a <unavailable> + 5450

    5    libc.so.6                          0x00002b5d03fc3460 __libc_start_main +
    245

    6    tmpv_3lfoit                        0x000055664e58b1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824795
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    if arr.count == 0 {\n        return\
    \ true\n    }\n    var arr = arr\n    var count = 0\n    while arr.last! < arr.first!\
    \ {\n        arr.insert(arr.removeLast(), at: 0)\n        count += 1\n    }\n\
    \    if count == arr.count {\n        return false\n    }\n    return true\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmpfv9kky87/tmpfv9kky87.swift:54: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aea05385c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aea0507cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aea0507c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aea0507b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfv9kky87                        0x0000556fd080c7ce <unavailable> + 6094

    5    libc.so.6                          0x00002aea05571460 __libc_start_main +
    245

    6    tmpfv9kky87                        0x0000556fd080c299 <unavailable> + 4761

    '
  stdout: ''
  timestamp: 1659824795
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    if arr.count == 0 {\n        return\
    \ true\n    }\n    var sortedArr = arr.sorted()\n    var count = 0\n    for i\
    \ in 0..<arr.count {\n        if arr[i] != sortedArr[i] {\n            count +=\
    \ 1\n        }\n    }\n    return count == 1\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr: [4, 3, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr:\
    \ [] as [Int]) == true)"
  status: Exception
  stderr: 'tmp3i5_2moz/tmp3i5_2moz.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b73778f2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b73775e9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b73775e9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b73775e87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3i5_2moz                        0x0000559ee18655ea <unavailable> + 5610

    5    libc.so.6                          0x00002b7377ade460 __libc_start_main +
    245

    6    tmp3i5_2moz                        0x0000559ee1865249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659824795
