name: HumanEval_19_sort_numbers
language: swift
prompt: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
  /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
  \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to\
  \ largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three five\"\
  \nfunc sort_numbers(numbers: String) -> String {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
  \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\") ==\
  \ \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven nine\
  \ eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
  \ \"six five four three two one zero\") == \"zero one two three four five six\")"
completions: ["    let numbers = numbers.split(separator: \" \")\n    let sortedNumbers\
    \ = numbers.sorted { (first, second) -> Bool in\n        return first < second\n\
    \    }\n    return sortedNumbers.joined(separator: \" \")", "    let numberals\
    \ = [\"zero\", \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\"\
    , \"eight\", \"nine\"]\n    let sorted = numbers.split(separator: \" \").sorted\
    \ {\n        numberals.firstIndex(of: String($0))! < numberals.firstIndex(of:\
    \ String($1))!\n    }\n    return sorted.joined(separator: \" \")", "    let nums\
    \ = numbers.components(separatedBy: \" \")\n    let sorted = nums.sorted { (a,\
    \ b) -> Bool in\n        return number_to_int(number: a) < number_to_int(number:\
    \ b)\n    }\n    return sorted.joined(separator: \" \")", "    let nums = numbers.split(separator:\
    \ \" \")\n    let nums_sorted = nums.sorted { (a, b) -> Bool in\n        return\
    \ Int(a)! < Int(b)!\n    }\n    return nums_sorted.joined(separator: \" \")",
  "    let numbers = numbers.split(separator: \" \")\n    let sortedNumbers = numbers.sorted\
    \ { (lhs, rhs) -> Bool in\n        return Int(lhs)! < Int(rhs)!\n    }\n    return\
    \ sortedNumbers.joined(separator: \" \")", "    let numbers = numbers.components(separatedBy:\
    \ \" \")\n    let sortedNumbers = numbers.sorted { (a, b) -> Bool in\n       \
    \ return number_to_int(number: a) < number_to_int(number: b)\n    }\n    return\
    \ sortedNumbers.joined(separator: \" \")", "    let number_map = [\"zero\": 0,\
    \ \"one\": 1, \"two\": 2, \"three\": 3, \"four\": 4, \"five\": 5, \"six\": 6,\
    \ \"seven\": 7, \"eight\": 8, \"nine\": 9]\n    let numbers_array = numbers.components(separatedBy:\
    \ \" \")\n    let sorted_numbers = numbers_array.sorted { (a, b) -> Bool in\n\
    \        return number_map[a]! < number_map[b]!\n    }\n    return sorted_numbers.joined(separator:\
    \ \" \")", "    let nums = numbers.components(separatedBy: \" \")\n    let sorted\
    \ = nums.sorted { (a, b) -> Bool in\n        return numeral_to_int(numeral: a)\
    \ < numeral_to_int(numeral: b)\n    }\n    return sorted.joined(separator: \"\
    \ \")", "    let nums = numbers.split(separator: \" \")\n    let sorted = nums.sorted\
    \ { (a, b) -> Bool in\n        return Int(a)! < Int(b)!\n    }\n    return sorted.joined(separator:\
    \ \" \")", "    let nums = numbers.split(separator: \" \")\n    let sorted = nums.sorted\
    \ { (a, b) -> Bool in\n        return numeral_to_int(numeral: String(a)) < numeral_to_int(numeral:\
    \ String(b))\n    }\n    return sorted.joined(separator: \" \")", "    let nums\
    \ = numbers.components(separatedBy: \" \")\n    let sorted = nums.sorted { (a,\
    \ b) -> Bool in\n        return number_to_int(number: a) < number_to_int(number:\
    \ b)\n    }\n    return sorted.joined(separator: \" \")", "    let numbers = numbers.split(separator:\
    \ \" \")\n    let sortedNumbers = numbers.sorted {\n        switch ($0, $1) {\n\
    \        case (\"zero\", \"zero\"): return false\n        case (\"zero\", _):\
    \ return true\n        case (_, \"zero\"): return false\n        case (\"one\"\
    , \"one\"): return false\n        case (\"one\", _): return true\n        case\
    \ (_, \"one\"): return false\n        case (\"two\", \"two\"): return false\n\
    \        case (\"two\", _): return true\n        case (_, \"two\"): return false\n\
    \        case (\"three\", \"three\"): return false\n        case (\"three\", _):\
    \ return true\n        case (_, \"three\"): return false\n        case (\"four\"\
    , \"four\"): return false\n        case (\"four\", _): return true\n        case\
    \ (_, \"four\"): return false\n        case (\"five\", \"five\"): return false\n\
    \        case (\"five\", _): return true\n        case (_, \"five\"): return false\n\
    \        case (\"six\", \"six\"): return false\n        case (\"six\", _): return\
    \ true\n        case (_, \"six\"): return false\n        case (\"seven\", \"seven\"\
    ): return false\n        case (\"seven\", _): return true\n        case (_, \"\
    seven\"): return false\n        case (\"eight\", \"eight\"): return false\n  \
    \      case (\"eight\", _): return true\n        case (_, \"eight\"): return false\n\
    \        case (\"nine\", \"nine\"): return false\n        case (\"nine\", _):\
    \ return true\n        case (_, \"nine\"): return false\n        default: return\
    \ false\n        }\n    }\n    return sortedNumbers.joined(separator: \" \")",
  "    let nums = numbers.components(separatedBy: \" \")\n    let sorted = nums.sorted\
    \ { (num1, num2) -> Bool in\n        return num_to_int(num: num1) < num_to_int(num:\
    \ num2)\n    }\n    return sorted.joined(separator: \" \")", "    let numbers\
    \ = numbers.split(separator: \" \")\n    let sortedNumbers = numbers.sorted {\
    \ (lhs, rhs) -> Bool in\n        return lhs < rhs\n    }\n    return sortedNumbers.joined(separator:\
    \ \" \")", "    let nums = numbers.split(separator: \" \")\n    let sorted = nums.sorted\
    \ { (a, b) -> Bool in\n        return Int(a)! < Int(b)!\n    }\n    return sorted.joined(separator:\
    \ \" \")", "    let nums = numbers.split(separator: \" \")\n    let sorted = nums.sorted\
    \ { (lhs, rhs) -> Bool in\n        return lhs < rhs\n    }\n    return sorted.joined(separator:\
    \ \" \")", "    let numbers = numbers.components(separatedBy: \" \")\n    let\
    \ sorted = numbers.sorted { (a, b) -> Bool in\n        return number_to_int(number:\
    \ a) < number_to_int(number: b)\n    }\n    return sorted.joined(separator: \"\
    \ \")", "    let numberals = numbers.split(separator: \" \")\n    let sorted =\
    \ numberals.sorted { (lhs, rhs) -> Bool in\n        return lhs < rhs\n    }\n\
    \    return sorted.joined(separator: \" \")", "    let nums = numbers.split(separator:\
    \ \" \")\n    let sorted = nums.sorted {\n        switch $0 {\n        case \"\
    zero\":\n            return true\n        case \"one\":\n            return $1\
    \ != \"zero\"\n        case \"two\":\n            return $1 != \"zero\" && $1\
    \ != \"one\"\n        case \"three\":\n            return $1 != \"zero\" && $1\
    \ != \"one\" && $1 != \"two\"\n        case \"four\":\n            return $1 !=\
    \ \"zero\" && $1 != \"one\" && $1 != \"two\" && $1 != \"three\"\n        case\
    \ \"five\":\n            return $1 != \"zero\" && $1 != \"one\" && $1 != \"two\"\
    \ && $1 != \"three\" && $1 != \"four\"\n        case \"six\":\n            return\
    \ $1 != \"zero\" && $1 != \"one\" && $1 != \"two\" && $1 != \"three\" && $1 !=\
    \ \"four\" && $1 != \"five\"\n        case \"seven\":\n            return $1 !=\
    \ \"zero\" && $1 != \"one\" && $1 != \"two\" && $1 != \"three\" && $1 != \"four\"\
    \ && $1 != \"five\" && $1 != \"six\"\n        case \"eight\":\n            return\
    \ $1 != \"zero\" && $1 != \"one\" && $1 != \"two\" && $1 != \"three\" && $1 !=\
    \ \"four\" && $1 != \"five\" && $1 != \"six\" && $1 != \"seven\"\n        case\
    \ \"nine\":\n            return $1 != \"zero\" && $1 != \"one\" && $1 != \"two\"\
    \ && $1 != \"three\" && $1 != \"four\" && $1 != \"five\" && $1 != \"six\" && $1\
    \ != \"seven\" && $1 != \"eight\"\n        default:\n            return false\n\
    \        }\n    }\n    return sorted.joined(separator: \" \")", "    let numberals\
    \ = [\"zero\", \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\"\
    , \"eight\", \"nine\"]\n    let sorted = numbers.split(separator: \" \").sorted\
    \ {\n        numberals.firstIndex(of: String($0))! < numberals.firstIndex(of:\
    \ String($1))!\n    }\n    return sorted.joined(separator: \" \")"]
stop_tokens:
- "\n}"
