language: swift
name: HumanEval_151_double_the_difference
results:
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    var sum =\
    \ 0\n    for num in lst {\n        if num > 0 && num.truncatingRemainder(dividingBy:\
    \ 1) == 0 && num % 2 != 0 {\n            sum += Int(pow(num, 2))\n        }\n\
    \    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpc45cu18h.swift:16:74: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if num > 0 && num.truncatingRemainder(dividingBy:\
    \ 1) == 0 && num % 2 != 0 {\n                                                \
    \                         ^\nSwift.%:2:13: note: '%' has been explicitly marked\
    \ unavailable here\npublic func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n\
    \            ^\n/tmp/tmpc45cu18h.swift:17:24: error: cannot find 'pow' in scope\n\
    \            sum += Int(pow(num, 2))\n                       ^~~\n"
  stdout: ''
  timestamp: 1659824369
- exit_code: 0
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    var sum =\
    \ 0\n    for i in lst {\n        if i < 0 {\n            continue\n        }\n\
    \        if i.truncatingRemainder(dividingBy: 2) == 0 {\n            continue\n\
    \        }\n        sum += Int(i * i)\n    }\n    return sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(double_the_difference(lst: [] as [Double]) == 0)\nassert(double_the_difference(lst:\
    \ [5.0, 4.0]) == 25)\nassert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\n\
    assert(double_the_difference(lst: [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst:\
    \ [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0])\
    \ == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824369
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    var sum =\
    \ 0\n    for i in lst {\n        if i > 0 && i.truncatingRemainder(dividingBy:\
    \ 1) == 0 {\n            if i % 2 == 1 {\n                sum += Int(i * i)\n\
    \            }\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(double_the_difference(lst: [] as [Double]) == 0)\nassert(double_the_difference(lst:\
    \ [5.0, 4.0]) == 25)\nassert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\n\
    assert(double_the_difference(lst: [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst:\
    \ [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0])\
    \ == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpzdcasvf9.swift:17:18: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n            if i % 2 == 1 {\n     \
    \            ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable\
    \ here\npublic func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n\
    \            ^\n"
  stdout: ''
  timestamp: 1659824369
- exit_code: 0
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    var sum =\
    \ 0\n    for num in lst {\n        if num.truncatingRemainder(dividingBy: 2) ==\
    \ 1 && num > 0 {\n            sum += Int(num * num)\n        }\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824369
- exit_code: 0
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    var sum =\
    \ 0\n    for num in lst {\n        if num.truncatingRemainder(dividingBy: 2) ==\
    \ 1 && num > 0 {\n            sum += Int(num * num)\n        }\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824369
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    var sum =\
    \ 0\n    for i in lst {\n        if i > 0 && i.truncatingRemainder(dividingBy:\
    \ 1) == 0 {\n            if i % 2 == 1 {\n                sum += Int(i * i)\n\
    \            }\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(double_the_difference(lst: [] as [Double]) == 0)\nassert(double_the_difference(lst:\
    \ [5.0, 4.0]) == 25)\nassert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\n\
    assert(double_the_difference(lst: [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst:\
    \ [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0])\
    \ == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpzdcasvf9.swift:17:18: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n            if i % 2 == 1 {\n     \
    \            ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable\
    \ here\npublic func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n\
    \            ^\n"
  stdout: ''
  timestamp: 1659824369
- exit_code: 0
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    var sum =\
    \ 0\n    for num in lst {\n        if num.truncatingRemainder(dividingBy: 2) ==\
    \ 1 {\n            sum += Int(num * num)\n        }\n    }\n    return sum\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824369
- exit_code: 0
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    var sum =\
    \ 0\n    for num in lst {\n        if num.truncatingRemainder(dividingBy: 2) ==\
    \ 1 && num > 0 {\n            sum += Int(num * num)\n        }\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824369
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    var sum =\
    \ 0\n    for i in lst {\n        if i > 0 && i.truncatingRemainder(dividingBy:\
    \ 1) == 0 {\n            sum += Int(pow(i, 2))\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpnmvxz0cy.swift:17:24: error: cannot find 'pow' in scope\n     \
    \       sum += Int(pow(i, 2))\n                       ^~~\n"
  stdout: ''
  timestamp: 1659824369
- exit_code: -4
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    // YOUR CODE\
    \ HERE\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: Exception
  stderr: 'tmp91jahoum/tmp91jahoum.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b74b46a8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b74b439fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b74b439f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b74b439e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp91jahoum                        0x00005560b50bd3e2 <unavailable> + 5090

    5    libc.so.6                          0x00002b74b4894460 __libc_start_main +
    245

    6    tmp91jahoum                        0x00005560b50bcfa9 <unavailable> + 4009

    '
  stdout: ''
  timestamp: 1659824369
- exit_code: 0
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    var sum =\
    \ 0\n    for num in lst {\n        if num.truncatingRemainder(dividingBy: 2) ==\
    \ 1 && num > 0 {\n            sum += Int(num * num)\n        }\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824369
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    var sum =\
    \ 0\n    for num in lst {\n        if num > 0 && num.truncatingRemainder(dividingBy:\
    \ 1) == 0 {\n            if num % 2 == 1 {\n                sum += Int(pow(num,\
    \ 2))\n            }\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(double_the_difference(lst: [] as [Double]) == 0)\nassert(double_the_difference(lst:\
    \ [5.0, 4.0]) == 25)\nassert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\n\
    assert(double_the_difference(lst: [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst:\
    \ [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0])\
    \ == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpfb5ez46v.swift:17:20: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n            if num % 2 == 1 {\n   \
    \                ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable\
    \ here\npublic func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n\
    \            ^\n/tmp/tmpfb5ez46v.swift:18:28: error: cannot find 'pow' in scope\n\
    \                sum += Int(pow(num, 2))\n                           ^~~\n"
  stdout: ''
  timestamp: 1659824369
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    var sum =\
    \ 0\n    for num in lst {\n        if num > 0 && num.truncatingRemainder(dividingBy:\
    \ 1) == 0 {\n            if num % 2 == 1 {\n                sum += Int(pow(num,\
    \ 2))\n            }\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(double_the_difference(lst: [] as [Double]) == 0)\nassert(double_the_difference(lst:\
    \ [5.0, 4.0]) == 25)\nassert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\n\
    assert(double_the_difference(lst: [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst:\
    \ [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0])\
    \ == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpfb5ez46v.swift:17:20: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n            if num % 2 == 1 {\n   \
    \                ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable\
    \ here\npublic func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n\
    \            ^\n/tmp/tmpfb5ez46v.swift:18:28: error: cannot find 'pow' in scope\n\
    \                sum += Int(pow(num, 2))\n                           ^~~\n"
  stdout: ''
  timestamp: 1659824369
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    var sum =\
    \ 0\n    for i in lst {\n        if i > 0 && i.truncatingRemainder(dividingBy:\
    \ 1) == 0 {\n            sum += Int(pow(i, 2))\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpnmvxz0cy.swift:17:24: error: cannot find 'pow' in scope\n     \
    \       sum += Int(pow(i, 2))\n                       ^~~\n"
  stdout: ''
  timestamp: 1659824369
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    var sum =\
    \ 0\n    for i in lst {\n        if i > 0 && i.truncatingRemainder(dividingBy:\
    \ 1) == 0 && i % 2 != 0 {\n            sum += Int(i * i)\n        }\n    }\n \
    \   return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmp922wmada.swift:16:68: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if i > 0 && i.truncatingRemainder(dividingBy:\
    \ 1) == 0 && i % 2 != 0 {\n                                                  \
    \                 ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable\
    \ here\npublic func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n\
    \            ^\n"
  stdout: ''
  timestamp: 1659824369
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    var sum =\
    \ 0\n    for i in lst {\n        if i > 0 && i.truncatingRemainder(dividingBy:\
    \ 1) == 0 {\n            sum += Int(pow(i, 2))\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpnmvxz0cy.swift:17:24: error: cannot find 'pow' in scope\n     \
    \       sum += Int(pow(i, 2))\n                       ^~~\n"
  stdout: ''
  timestamp: 1659824369
- exit_code: 0
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    var sum =\
    \ 0\n    for num in lst {\n        if num.truncatingRemainder(dividingBy: 2) ==\
    \ 1 && num > 0 {\n            sum += Int(num * num)\n        }\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824369
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    var sum =\
    \ 0\n    for num in lst {\n        if num > 0 && num.truncatingRemainder(dividingBy:\
    \ 1) == 0 {\n            if num % 2 == 1 {\n                sum += Int(pow(num,\
    \ 2))\n            }\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(double_the_difference(lst: [] as [Double]) == 0)\nassert(double_the_difference(lst:\
    \ [5.0, 4.0]) == 25)\nassert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\n\
    assert(double_the_difference(lst: [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst:\
    \ [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0])\
    \ == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpfb5ez46v.swift:17:20: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n            if num % 2 == 1 {\n   \
    \                ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable\
    \ here\npublic func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n\
    \            ^\n/tmp/tmpfb5ez46v.swift:18:28: error: cannot find 'pow' in scope\n\
    \                sum += Int(pow(num, 2))\n                           ^~~\n"
  stdout: ''
  timestamp: 1659824369
- exit_code: 0
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    var sum =\
    \ 0\n    for num in lst {\n        if num.truncatingRemainder(dividingBy: 2) ==\
    \ 1 && num > 0 {\n            sum += Int(num * num)\n        }\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824369
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    var sum =\
    \ 0\n    for i in lst {\n        if i > 0 && i.truncatingRemainder(dividingBy:\
    \ 1) == 0 && i % 2 != 0 {\n            sum += Int(i * i)\n        }\n    }\n \
    \   return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmp922wmada.swift:16:68: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if i > 0 && i.truncatingRemainder(dividingBy:\
    \ 1) == 0 && i % 2 != 0 {\n                                                  \
    \                 ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable\
    \ here\npublic func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n\
    \            ^\n"
  stdout: ''
  timestamp: 1659824369
- exit_code: 0
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    var sum =\
    \ 0\n    for num in lst {\n        if num.truncatingRemainder(dividingBy: 2) ==\
    \ 1 {\n            sum += Int(num * num)\n        }\n    }\n    return sum\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824369
- exit_code: 0
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    var sum =\
    \ 0\n    for num in lst {\n        if num.truncatingRemainder(dividingBy: 2) ==\
    \ 1 {\n            sum += Int(num * num)\n        }\n    }\n    return sum\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824369
- exit_code: 0
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    // YOUR CODE\
    \ HERE\n    var sum = 0\n    for i in lst {\n        if i > 0 && i.truncatingRemainder(dividingBy:\
    \ 2) != 0 {\n            sum += Int(i * i)\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824369
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    var sum =\
    \ 0\n    for num in lst {\n        if num > 0 && num.truncatingRemainder(dividingBy:\
    \ 1) == 0 {\n            if num % 2 == 1 {\n                sum += Int(num * num)\n\
    \            }\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(double_the_difference(lst: [] as [Double]) == 0)\nassert(double_the_difference(lst:\
    \ [5.0, 4.0]) == 25)\nassert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\n\
    assert(double_the_difference(lst: [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst:\
    \ [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0])\
    \ == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmp6h0y0yk_.swift:17:20: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n            if num % 2 == 1 {\n   \
    \                ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable\
    \ here\npublic func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n\
    \            ^\n"
  stdout: ''
  timestamp: 1659824369
- exit_code: -4
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    return 0\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: Exception
  stderr: 'tmpj6caa6bs/tmpj6caa6bs.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b792386dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7923564b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7923564988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b79235637b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpj6caa6bs                        0x000055785c1fa3e2 <unavailable> + 5090

    5    libc.so.6                          0x00002b7923a59460 __libc_start_main +
    245

    6    tmpj6caa6bs                        0x000055785c1f9fa9 <unavailable> + 4009

    '
  stdout: ''
  timestamp: 1659824369
- exit_code: 0
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    var sum =\
    \ 0\n    for i in lst {\n        if i.truncatingRemainder(dividingBy: 2) == 1\
    \ && i > 0 {\n            sum += Int(i * i)\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824369
- exit_code: 0
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    var sum =\
    \ 0\n    for num in lst {\n        if num.truncatingRemainder(dividingBy: 2) ==\
    \ 1 && num > 0 {\n            sum += Int(num * num)\n        }\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824369
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    var sum =\
    \ 0\n    for i in lst {\n        if i > 0 && i.truncatingRemainder(dividingBy:\
    \ 1) == 0 {\n            if i % 2 == 1 {\n                sum += Int(i * i)\n\
    \            }\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(double_the_difference(lst: [] as [Double]) == 0)\nassert(double_the_difference(lst:\
    \ [5.0, 4.0]) == 25)\nassert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\n\
    assert(double_the_difference(lst: [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst:\
    \ [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0])\
    \ == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpzdcasvf9.swift:17:18: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n            if i % 2 == 1 {\n     \
    \            ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable\
    \ here\npublic func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n\
    \            ^\n"
  stdout: ''
  timestamp: 1659824369
- exit_code: 0
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    var sum =\
    \ 0\n    for num in lst {\n        if num.truncatingRemainder(dividingBy: 2) ==\
    \ 1 {\n            sum += Int(num * num)\n        }\n    }\n    return sum\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824369
- exit_code: 0
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    var sum =\
    \ 0\n    for i in lst {\n        if i.truncatingRemainder(dividingBy: 2) == 1\
    \ {\n            sum += Int(i * i)\n        }\n    }\n    return sum\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824369
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    var sum =\
    \ 0\n    for i in lst {\n        if i > 0 && i.truncatingRemainder(dividingBy:\
    \ 1) == 0 {\n            sum += Int(pow(i, 2))\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpnmvxz0cy.swift:17:24: error: cannot find 'pow' in scope\n     \
    \       sum += Int(pow(i, 2))\n                       ^~~\n"
  stdout: ''
  timestamp: 1659824369
- exit_code: 0
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    var sum =\
    \ 0\n    for num in lst {\n        if num.truncatingRemainder(dividingBy: 2) ==\
    \ 1 {\n            sum += Int(num * num)\n        }\n    }\n    return sum\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824369
- exit_code: 0
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    var sum =\
    \ 0\n    for i in lst {\n        if i > 0 && i.truncatingRemainder(dividingBy:\
    \ 1) == 0 && i.truncatingRemainder(dividingBy: 2) != 0 {\n            sum += Int(i\
    \ * i)\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(double_the_difference(lst: [] as [Double]) == 0)\nassert(double_the_difference(lst:\
    \ [5.0, 4.0]) == 25)\nassert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\n\
    assert(double_the_difference(lst: [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst:\
    \ [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0])\
    \ == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824369
- exit_code: 0
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    var sum =\
    \ 0\n    for num in lst {\n        if num.truncatingRemainder(dividingBy: 2) ==\
    \ 1 && num > 0 {\n            sum += Int(num * num)\n        }\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824369
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    var sum =\
    \ 0\n    for num in lst {\n        if num > 0 && num.truncatingRemainder(dividingBy:\
    \ 1) == 0 && num % 2 != 0 {\n            sum += Int(pow(num, 2))\n        }\n\
    \    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpc45cu18h.swift:16:74: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if num > 0 && num.truncatingRemainder(dividingBy:\
    \ 1) == 0 && num % 2 != 0 {\n                                                \
    \                         ^\nSwift.%:2:13: note: '%' has been explicitly marked\
    \ unavailable here\npublic func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n\
    \            ^\n/tmp/tmpc45cu18h.swift:17:24: error: cannot find 'pow' in scope\n\
    \            sum += Int(pow(num, 2))\n                       ^~~\n"
  stdout: ''
  timestamp: 1659824369
- exit_code: 0
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    var sum =\
    \ 0\n    for num in lst {\n        if num.truncatingRemainder(dividingBy: 2) ==\
    \ 1 && num > 0 {\n            sum += Int(num * num)\n        }\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824369
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    var sum =\
    \ 0\n    for i in lst {\n        if i > 0 && i.truncatingRemainder(dividingBy:\
    \ 1) == 0 && i % 2 != 0 {\n            sum += Int(i * i)\n        }\n    }\n \
    \   return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmp922wmada.swift:16:68: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if i > 0 && i.truncatingRemainder(dividingBy:\
    \ 1) == 0 && i % 2 != 0 {\n                                                  \
    \                 ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable\
    \ here\npublic func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n\
    \            ^\n"
  stdout: ''
  timestamp: 1659824369
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    var sum =\
    \ 0\n    for i in lst {\n        if i > 0 && i.truncatingRemainder(dividingBy:\
    \ 1) == 0 && i % 2 != 0 {\n            sum += Int(i * i)\n        }\n    }\n \
    \   return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmp922wmada.swift:16:68: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if i > 0 && i.truncatingRemainder(dividingBy:\
    \ 1) == 0 && i % 2 != 0 {\n                                                  \
    \                 ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable\
    \ here\npublic func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n\
    \            ^\n"
  stdout: ''
  timestamp: 1659824369
- exit_code: 0
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    var sum =\
    \ 0\n    for num in lst {\n        if num.truncatingRemainder(dividingBy: 2) ==\
    \ 1 && num > 0 {\n            sum += Int(num * num)\n        }\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824369
- exit_code: 0
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    var sum =\
    \ 0\n    for num in lst {\n        if num.truncatingRemainder(dividingBy: 2) ==\
    \ 1 && num > 0 {\n            sum += Int(num * num)\n        }\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824369
- exit_code: 0
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    var sum =\
    \ 0\n    for num in lst {\n        if num.truncatingRemainder(dividingBy: 2) ==\
    \ 1 && num > 0 {\n            sum += Int(num * num)\n        }\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824369
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    var sum =\
    \ 0\n    for i in lst {\n        if i > 0 && i.truncatingRemainder(dividingBy:\
    \ 1) == 0 {\n            if i % 2 == 1 {\n                sum += Int(i * i)\n\
    \            }\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(double_the_difference(lst: [] as [Double]) == 0)\nassert(double_the_difference(lst:\
    \ [5.0, 4.0]) == 25)\nassert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\n\
    assert(double_the_difference(lst: [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst:\
    \ [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0])\
    \ == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpzdcasvf9.swift:17:18: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n            if i % 2 == 1 {\n     \
    \            ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable\
    \ here\npublic func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n\
    \            ^\n"
  stdout: ''
  timestamp: 1659824369
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    var sum =\
    \ 0\n    for num in lst {\n        if (num > 0 && num.truncatingRemainder(dividingBy:\
    \ 1) == 0 && num % 2 != 0) {\n            sum += Int(pow(num, 2))\n        }\n\
    \    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmp57cieyil.swift:16:75: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if (num > 0 && num.truncatingRemainder(dividingBy:\
    \ 1) == 0 && num % 2 != 0) {\n                                               \
    \                           ^\nSwift.%:2:13: note: '%' has been explicitly marked\
    \ unavailable here\npublic func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n\
    \            ^\n/tmp/tmp57cieyil.swift:17:24: error: cannot find 'pow' in scope\n\
    \            sum += Int(pow(num, 2))\n                       ^~~\n"
  stdout: ''
  timestamp: 1659824369
- exit_code: 0
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    var sum =\
    \ 0\n    for num in lst {\n        if num.truncatingRemainder(dividingBy: 2) ==\
    \ 1 && num > 0 {\n            sum += Int(num * num)\n        }\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824369
- exit_code: 0
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    var sum =\
    \ 0\n    for i in lst {\n        if i.truncatingRemainder(dividingBy: 2) == 1\
    \ {\n            sum += Int(i * i)\n        }\n    }\n    return sum\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824369
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    var sum =\
    \ 0\n    for num in lst {\n        if num > 0 && num.truncatingRemainder(dividingBy:\
    \ 1) == 0 && num % 2 != 0 {\n            sum += Int(pow(num, 2))\n        }\n\
    \    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpc45cu18h.swift:16:74: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if num > 0 && num.truncatingRemainder(dividingBy:\
    \ 1) == 0 && num % 2 != 0 {\n                                                \
    \                         ^\nSwift.%:2:13: note: '%' has been explicitly marked\
    \ unavailable here\npublic func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n\
    \            ^\n/tmp/tmpc45cu18h.swift:17:24: error: cannot find 'pow' in scope\n\
    \            sum += Int(pow(num, 2))\n                       ^~~\n"
  stdout: ''
  timestamp: 1659824369
- exit_code: 0
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    var sum =\
    \ 0\n    for num in lst {\n        if num.truncatingRemainder(dividingBy: 2) ==\
    \ 1 && num > 0 {\n            sum += Int(num * num)\n        }\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824369
- exit_code: 0
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    var sum =\
    \ 0\n    for num in lst {\n        if num.truncatingRemainder(dividingBy: 2) ==\
    \ 1 && num > 0 {\n            sum += Int(num * num)\n        }\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824369
- exit_code: -4
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    return 0\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: Exception
  stderr: 'tmpj6caa6bs/tmpj6caa6bs.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b792386dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7923564b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7923564988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b79235637b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpj6caa6bs                        0x000055785c1fa3e2 <unavailable> + 5090

    5    libc.so.6                          0x00002b7923a59460 __libc_start_main +
    245

    6    tmpj6caa6bs                        0x000055785c1f9fa9 <unavailable> + 4009

    '
  stdout: ''
  timestamp: 1659824369
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    var sum =\
    \ 0\n    for i in lst {\n        if i > 0 && i.truncatingRemainder(dividingBy:\
    \ 1) == 0 {\n            sum += Int(pow(i, 2))\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpnmvxz0cy.swift:17:24: error: cannot find 'pow' in scope\n     \
    \       sum += Int(pow(i, 2))\n                       ^~~\n"
  stdout: ''
  timestamp: 1659824369
- exit_code: -4
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    return 0\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: Exception
  stderr: 'tmpj6caa6bs/tmpj6caa6bs.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b792386dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7923564b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7923564988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b79235637b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpj6caa6bs                        0x000055785c1fa3e2 <unavailable> + 5090

    5    libc.so.6                          0x00002b7923a59460 __libc_start_main +
    245

    6    tmpj6caa6bs                        0x000055785c1f9fa9 <unavailable> + 4009

    '
  stdout: ''
  timestamp: 1659824369
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    var sum =\
    \ 0\n    for num in lst {\n        if num > 0 && num.truncatingRemainder(dividingBy:\
    \ 1) == 0 {\n            if num % 2 == 1 {\n                sum += Int(num * num)\n\
    \            }\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(double_the_difference(lst: [] as [Double]) == 0)\nassert(double_the_difference(lst:\
    \ [5.0, 4.0]) == 25)\nassert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\n\
    assert(double_the_difference(lst: [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst:\
    \ [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0])\
    \ == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmp6h0y0yk_.swift:17:20: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n            if num % 2 == 1 {\n   \
    \                ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable\
    \ here\npublic func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n\
    \            ^\n"
  stdout: ''
  timestamp: 1659824369
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    var sum =\
    \ 0\n    for i in lst {\n        if i > 0 && i.truncatingRemainder(dividingBy:\
    \ 1) == 0 {\n            sum += Int(pow(i, 2))\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpnmvxz0cy.swift:17:24: error: cannot find 'pow' in scope\n     \
    \       sum += Int(pow(i, 2))\n                       ^~~\n"
  stdout: ''
  timestamp: 1659824369
- exit_code: 0
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    var sum =\
    \ 0\n    for num in lst {\n        if num.truncatingRemainder(dividingBy: 2) ==\
    \ 1 {\n            sum += Int(num * num)\n        }\n    }\n    return sum\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824369
- exit_code: 0
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    var sum =\
    \ 0\n    for i in lst {\n        if i > 0 && i.truncatingRemainder(dividingBy:\
    \ 1) == 0 && i.truncatingRemainder(dividingBy: 2) != 0 {\n            sum += Int(i\
    \ * i)\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(double_the_difference(lst: [] as [Double]) == 0)\nassert(double_the_difference(lst:\
    \ [5.0, 4.0]) == 25)\nassert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\n\
    assert(double_the_difference(lst: [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst:\
    \ [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0])\
    \ == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824369
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    var sum =\
    \ 0\n    for num in lst {\n        if num > 0 && num.truncatingRemainder(dividingBy:\
    \ 1) == 0 {\n            if num % 2 == 1 {\n                sum += Int(num * num)\n\
    \            }\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(double_the_difference(lst: [] as [Double]) == 0)\nassert(double_the_difference(lst:\
    \ [5.0, 4.0]) == 25)\nassert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\n\
    assert(double_the_difference(lst: [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst:\
    \ [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0])\
    \ == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmp6h0y0yk_.swift:17:20: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n            if num % 2 == 1 {\n   \
    \                ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable\
    \ here\npublic func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n\
    \            ^\n"
  stdout: ''
  timestamp: 1659824369
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    var sum =\
    \ 0\n    for num in lst {\n        if num > 0 && num.truncatingRemainder(dividingBy:\
    \ 1) == 0 {\n            if num % 2 == 1 {\n                sum += Int(num * num)\n\
    \            }\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(double_the_difference(lst: [] as [Double]) == 0)\nassert(double_the_difference(lst:\
    \ [5.0, 4.0]) == 25)\nassert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\n\
    assert(double_the_difference(lst: [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst:\
    \ [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0])\
    \ == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmp6h0y0yk_.swift:17:20: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n            if num % 2 == 1 {\n   \
    \                ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable\
    \ here\npublic func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n\
    \            ^\n"
  stdout: ''
  timestamp: 1659824369
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    var sum =\
    \ 0\n    for num in lst {\n        if num > 0 && num.truncatingRemainder(dividingBy:\
    \ 1) == 0 {\n            sum += Int(pow(num, 2))\n        }\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmp4eg75hac.swift:17:24: error: cannot find 'pow' in scope\n     \
    \       sum += Int(pow(num, 2))\n                       ^~~\n"
  stdout: ''
  timestamp: 1659824369
- exit_code: 0
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    var sum =\
    \ 0\n    for num in lst {\n        if num.truncatingRemainder(dividingBy: 2) ==\
    \ 1 && num > 0 {\n            sum += Int(num * num)\n        }\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824369
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    var sum =\
    \ 0\n    for num in lst {\n        if num > 0 && num.truncatingRemainder(dividingBy:\
    \ 1) == 0 {\n            if num % 2 == 1 {\n                sum += Int(num * num)\n\
    \            }\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(double_the_difference(lst: [] as [Double]) == 0)\nassert(double_the_difference(lst:\
    \ [5.0, 4.0]) == 25)\nassert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\n\
    assert(double_the_difference(lst: [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst:\
    \ [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0])\
    \ == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmp6h0y0yk_.swift:17:20: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n            if num % 2 == 1 {\n   \
    \                ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable\
    \ here\npublic func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n\
    \            ^\n"
  stdout: ''
  timestamp: 1659824369
- exit_code: 0
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    var sum =\
    \ 0\n    for i in lst {\n        if i.truncatingRemainder(dividingBy: 2) == 1\
    \ && i > 0 {\n            sum += Int(i * i)\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824369
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    var sum =\
    \ 0\n    for num in lst {\n        if num > 0 && num.truncatingRemainder(dividingBy:\
    \ 1) == 0 && num % 2 != 0 {\n            sum += Int(pow(num, 2))\n        }\n\
    \    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpc45cu18h.swift:16:74: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if num > 0 && num.truncatingRemainder(dividingBy:\
    \ 1) == 0 && num % 2 != 0 {\n                                                \
    \                         ^\nSwift.%:2:13: note: '%' has been explicitly marked\
    \ unavailable here\npublic func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n\
    \            ^\n/tmp/tmpc45cu18h.swift:17:24: error: cannot find 'pow' in scope\n\
    \            sum += Int(pow(num, 2))\n                       ^~~\n"
  stdout: ''
  timestamp: 1659824369
- exit_code: 0
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    var sum =\
    \ 0\n    for num in lst {\n        if num.truncatingRemainder(dividingBy: 2) ==\
    \ 1 && num > 0 {\n            sum += Int(num * num)\n        }\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824369
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    var sum =\
    \ 0\n    for i in lst {\n        if i > 0 && i.truncatingRemainder(dividingBy:\
    \ 1) == 0 && i % 2 != 0 {\n            sum += Int(i * i)\n        }\n    }\n \
    \   return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmp922wmada.swift:16:68: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if i > 0 && i.truncatingRemainder(dividingBy:\
    \ 1) == 0 && i % 2 != 0 {\n                                                  \
    \                 ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable\
    \ here\npublic func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n\
    \            ^\n"
  stdout: ''
  timestamp: 1659824369
- exit_code: -4
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    return 0\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: Exception
  stderr: 'tmpj6caa6bs/tmpj6caa6bs.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b792386dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7923564b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7923564988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b79235637b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpj6caa6bs                        0x000055785c1fa3e2 <unavailable> + 5090

    5    libc.so.6                          0x00002b7923a59460 __libc_start_main +
    245

    6    tmpj6caa6bs                        0x000055785c1f9fa9 <unavailable> + 4009

    '
  stdout: ''
  timestamp: 1659824369
- exit_code: 0
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    var sum =\
    \ 0\n    for num in lst {\n        if num.truncatingRemainder(dividingBy: 2) ==\
    \ 1 {\n            sum += Int(num * num)\n        }\n    }\n    return sum\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824369
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    var sum =\
    \ 0\n    for i in lst {\n        if i > 0 && i.truncatingRemainder(dividingBy:\
    \ 1) == 0 {\n            sum += Int(pow(i, 2))\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpnmvxz0cy.swift:17:24: error: cannot find 'pow' in scope\n     \
    \       sum += Int(pow(i, 2))\n                       ^~~\n"
  stdout: ''
  timestamp: 1659824369
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    var sum =\
    \ 0\n    for num in lst {\n        if num > 0 && num.truncatingRemainder(dividingBy:\
    \ 1) == 0 {\n            if num % 2 == 1 {\n                sum += Int(num * num)\n\
    \            }\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(double_the_difference(lst: [] as [Double]) == 0)\nassert(double_the_difference(lst:\
    \ [5.0, 4.0]) == 25)\nassert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\n\
    assert(double_the_difference(lst: [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst:\
    \ [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0])\
    \ == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmp6h0y0yk_.swift:17:20: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n            if num % 2 == 1 {\n   \
    \                ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable\
    \ here\npublic func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n\
    \            ^\n"
  stdout: ''
  timestamp: 1659824369
- exit_code: -4
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    // Your code\
    \ here\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: Exception
  stderr: 'tmp4e1q364s/tmp4e1q364s.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7c41e5bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7c41b52b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7c41b52988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7c41b517b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4e1q364s                        0x000055e3bb64a3e2 <unavailable> + 5090

    5    libc.so.6                          0x00002b7c42047460 __libc_start_main +
    245

    6    tmp4e1q364s                        0x000055e3bb649fa9 <unavailable> + 4009

    '
  stdout: ''
  timestamp: 1659824369
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    var sum =\
    \ 0\n    for i in lst {\n        if i > 0 && i.truncatingRemainder(dividingBy:\
    \ 1) == 0 {\n            if i % 2 == 1 {\n                sum += Int(i * i)\n\
    \            }\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(double_the_difference(lst: [] as [Double]) == 0)\nassert(double_the_difference(lst:\
    \ [5.0, 4.0]) == 25)\nassert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\n\
    assert(double_the_difference(lst: [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst:\
    \ [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0])\
    \ == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpzdcasvf9.swift:17:18: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n            if i % 2 == 1 {\n     \
    \            ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable\
    \ here\npublic func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n\
    \            ^\n"
  stdout: ''
  timestamp: 1659824369
- exit_code: -4
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    return 0\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: Exception
  stderr: 'tmpj6caa6bs/tmpj6caa6bs.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b792386dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7923564b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7923564988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b79235637b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpj6caa6bs                        0x000055785c1fa3e2 <unavailable> + 5090

    5    libc.so.6                          0x00002b7923a59460 __libc_start_main +
    245

    6    tmpj6caa6bs                        0x000055785c1f9fa9 <unavailable> + 4009

    '
  stdout: ''
  timestamp: 1659824369
- exit_code: 0
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    var sum =\
    \ 0\n    for num in lst {\n        if num.truncatingRemainder(dividingBy: 2) ==\
    \ 1 && num > 0 {\n            sum += Int(num * num)\n        }\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824369
- exit_code: -4
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    return 0\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: Exception
  stderr: 'tmpj6caa6bs/tmpj6caa6bs.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b792386dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7923564b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7923564988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b79235637b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpj6caa6bs                        0x000055785c1fa3e2 <unavailable> + 5090

    5    libc.so.6                          0x00002b7923a59460 __libc_start_main +
    245

    6    tmpj6caa6bs                        0x000055785c1f9fa9 <unavailable> + 4009

    '
  stdout: ''
  timestamp: 1659824369
- exit_code: -4
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    return 0\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: Exception
  stderr: 'tmpj6caa6bs/tmpj6caa6bs.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b792386dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7923564b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7923564988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b79235637b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpj6caa6bs                        0x000055785c1fa3e2 <unavailable> + 5090

    5    libc.so.6                          0x00002b7923a59460 __libc_start_main +
    245

    6    tmpj6caa6bs                        0x000055785c1f9fa9 <unavailable> + 4009

    '
  stdout: ''
  timestamp: 1659824369
- exit_code: 0
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    var sum =\
    \ 0\n    for num in lst {\n        if num.truncatingRemainder(dividingBy: 2) ==\
    \ 1 {\n            sum += Int(num * num)\n        }\n    }\n    return sum\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824369
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    var sum =\
    \ 0\n    for num in lst {\n        if num > 0 && num.truncatingRemainder(dividingBy:\
    \ 1) == 0 && num % 2 != 0 {\n            sum += Int(pow(num, 2))\n        }\n\
    \    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpc45cu18h.swift:16:74: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if num > 0 && num.truncatingRemainder(dividingBy:\
    \ 1) == 0 && num % 2 != 0 {\n                                                \
    \                         ^\nSwift.%:2:13: note: '%' has been explicitly marked\
    \ unavailable here\npublic func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n\
    \            ^\n/tmp/tmpc45cu18h.swift:17:24: error: cannot find 'pow' in scope\n\
    \            sum += Int(pow(num, 2))\n                       ^~~\n"
  stdout: ''
  timestamp: 1659824369
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    var sum =\
    \ 0\n    for i in lst {\n        if i > 0 && i.truncatingRemainder(dividingBy:\
    \ 1) == 0 {\n            if i % 2 == 1 {\n                sum += Int(i * i)\n\
    \            }\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(double_the_difference(lst: [] as [Double]) == 0)\nassert(double_the_difference(lst:\
    \ [5.0, 4.0]) == 25)\nassert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\n\
    assert(double_the_difference(lst: [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst:\
    \ [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0])\
    \ == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpzdcasvf9.swift:17:18: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n            if i % 2 == 1 {\n     \
    \            ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable\
    \ here\npublic func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n\
    \            ^\n"
  stdout: ''
  timestamp: 1659824369
- exit_code: -4
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    return 0\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: Exception
  stderr: 'tmpj6caa6bs/tmpj6caa6bs.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b792386dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7923564b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7923564988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b79235637b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpj6caa6bs                        0x000055785c1fa3e2 <unavailable> + 5090

    5    libc.so.6                          0x00002b7923a59460 __libc_start_main +
    245

    6    tmpj6caa6bs                        0x000055785c1f9fa9 <unavailable> + 4009

    '
  stdout: ''
  timestamp: 1659824369
- exit_code: 0
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    var sum =\
    \ 0\n    for num in lst {\n        if num.truncatingRemainder(dividingBy: 2) ==\
    \ 1 && num > 0 {\n            sum += Int(num * num)\n        }\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824369
- exit_code: -4
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    return 0\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: Exception
  stderr: 'tmpj6caa6bs/tmpj6caa6bs.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b792386dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7923564b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7923564988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b79235637b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpj6caa6bs                        0x000055785c1fa3e2 <unavailable> + 5090

    5    libc.so.6                          0x00002b7923a59460 __libc_start_main +
    245

    6    tmpj6caa6bs                        0x000055785c1f9fa9 <unavailable> + 4009

    '
  stdout: ''
  timestamp: 1659824369
- exit_code: 0
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    var sum =\
    \ 0\n    for num in lst {\n        if num.truncatingRemainder(dividingBy: 2) ==\
    \ 1 && num > 0 {\n            sum += Int(num * num)\n        }\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824369
- exit_code: -4
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    return 0\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: Exception
  stderr: 'tmpj6caa6bs/tmpj6caa6bs.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b792386dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7923564b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7923564988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b79235637b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpj6caa6bs                        0x000055785c1fa3e2 <unavailable> + 5090

    5    libc.so.6                          0x00002b7923a59460 __libc_start_main +
    245

    6    tmpj6caa6bs                        0x000055785c1f9fa9 <unavailable> + 4009

    '
  stdout: ''
  timestamp: 1659824369
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    var sum =\
    \ 0\n    for num in lst {\n        if num > 0 && num.truncatingRemainder(dividingBy:\
    \ 1) == 0 {\n            if num % 2 == 1 {\n                sum += Int(num * num)\n\
    \            }\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(double_the_difference(lst: [] as [Double]) == 0)\nassert(double_the_difference(lst:\
    \ [5.0, 4.0]) == 25)\nassert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\n\
    assert(double_the_difference(lst: [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst:\
    \ [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0])\
    \ == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmp6h0y0yk_.swift:17:20: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n            if num % 2 == 1 {\n   \
    \                ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable\
    \ here\npublic func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n\
    \            ^\n"
  stdout: ''
  timestamp: 1659824369
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    var sum =\
    \ 0\n    for num in lst {\n        if num > 0 && num.truncatingRemainder(dividingBy:\
    \ 1) == 0 {\n            sum += Int(pow(num, 2))\n        }\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmp4eg75hac.swift:17:24: error: cannot find 'pow' in scope\n     \
    \       sum += Int(pow(num, 2))\n                       ^~~\n"
  stdout: ''
  timestamp: 1659824369
- exit_code: 0
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    var sum =\
    \ 0\n    for num in lst {\n        if num.truncatingRemainder(dividingBy: 2) ==\
    \ 1 && num > 0 {\n            sum += Int(num * num)\n        }\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824369
- exit_code: 0
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    var sum =\
    \ 0\n    for i in lst {\n        if i.truncatingRemainder(dividingBy: 2) == 1\
    \ && i > 0 {\n            sum += Int(i * i)\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824369
- exit_code: 0
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    var sum =\
    \ 0\n    for i in lst {\n        if i.truncatingRemainder(dividingBy: 2) == 1\
    \ && i > 0 {\n            sum += Int(i * i)\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824369
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    var sum =\
    \ 0\n    for num in lst {\n        if num > 0 && num.truncatingRemainder(dividingBy:\
    \ 1) == 0 {\n            if num % 2 == 1 {\n                sum += Int(num * num)\n\
    \            }\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(double_the_difference(lst: [] as [Double]) == 0)\nassert(double_the_difference(lst:\
    \ [5.0, 4.0]) == 25)\nassert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\n\
    assert(double_the_difference(lst: [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst:\
    \ [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0])\
    \ == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmp6h0y0yk_.swift:17:20: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n            if num % 2 == 1 {\n   \
    \                ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable\
    \ here\npublic func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n\
    \            ^\n"
  stdout: ''
  timestamp: 1659824369
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    var sum =\
    \ 0\n    for i in lst {\n        if i > 0 && i.truncatingRemainder(dividingBy:\
    \ 1) == 0 {\n            sum += Int(pow(i, 2))\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpnmvxz0cy.swift:17:24: error: cannot find 'pow' in scope\n     \
    \       sum += Int(pow(i, 2))\n                       ^~~\n"
  stdout: ''
  timestamp: 1659824369
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    var sum =\
    \ 0\n    for num in lst {\n        if num > 0 && num.truncatingRemainder(dividingBy:\
    \ 1) == 0 {\n            if num % 2 == 1 {\n                sum += Int(num * num)\n\
    \            }\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(double_the_difference(lst: [] as [Double]) == 0)\nassert(double_the_difference(lst:\
    \ [5.0, 4.0]) == 25)\nassert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\n\
    assert(double_the_difference(lst: [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst:\
    \ [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0])\
    \ == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmp6h0y0yk_.swift:17:20: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n            if num % 2 == 1 {\n   \
    \                ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable\
    \ here\npublic func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n\
    \            ^\n"
  stdout: ''
  timestamp: 1659824369
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    var sum =\
    \ 0\n    for i in lst {\n        if i > 0 && i.truncatingRemainder(dividingBy:\
    \ 1) == 0 {\n            sum += Int(pow(i, 2))\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpnmvxz0cy.swift:17:24: error: cannot find 'pow' in scope\n     \
    \       sum += Int(pow(i, 2))\n                       ^~~\n"
  stdout: ''
  timestamp: 1659824369
- exit_code: 0
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    var sum =\
    \ 0\n    for i in lst {\n        if i.truncatingRemainder(dividingBy: 2) == 1\
    \ && i > 0 {\n            sum += Int(i * i)\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824369
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    var sum =\
    \ 0\n    for i in lst {\n        if i > 0 && i.truncatingRemainder(dividingBy:\
    \ 1) == 0 {\n            if i % 2 == 1 {\n                sum += Int(i * i)\n\
    \            }\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(double_the_difference(lst: [] as [Double]) == 0)\nassert(double_the_difference(lst:\
    \ [5.0, 4.0]) == 25)\nassert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\n\
    assert(double_the_difference(lst: [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst:\
    \ [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0])\
    \ == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpzdcasvf9.swift:17:18: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n            if i % 2 == 1 {\n     \
    \            ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable\
    \ here\npublic func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n\
    \            ^\n"
  stdout: ''
  timestamp: 1659824369
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    var sum =\
    \ 0\n    for i in lst {\n        if i > 0 && i.truncatingRemainder(dividingBy:\
    \ 1) == 0 && i % 2 != 0 {\n            sum += Int(i * i)\n        }\n    }\n \
    \   return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmp922wmada.swift:16:68: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if i > 0 && i.truncatingRemainder(dividingBy:\
    \ 1) == 0 && i % 2 != 0 {\n                                                  \
    \                 ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable\
    \ here\npublic func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n\
    \            ^\n"
  stdout: ''
  timestamp: 1659824369
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    var sum =\
    \ 0\n    for i in lst {\n        if i > 0 && i.truncatingRemainder(dividingBy:\
    \ 1) == 0 && i % 2 != 0 {\n            sum += Int(i * i)\n        }\n    }\n \
    \   return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmp922wmada.swift:16:68: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if i > 0 && i.truncatingRemainder(dividingBy:\
    \ 1) == 0 && i % 2 != 0 {\n                                                  \
    \                 ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable\
    \ here\npublic func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n\
    \            ^\n"
  stdout: ''
  timestamp: 1659824369
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    var sum =\
    \ 0\n    for i in lst {\n        if i > 0 && i.truncatingRemainder(dividingBy:\
    \ 1) == 0 {\n            if i % 2 == 1 {\n                sum += Int(i * i)\n\
    \            }\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(double_the_difference(lst: [] as [Double]) == 0)\nassert(double_the_difference(lst:\
    \ [5.0, 4.0]) == 25)\nassert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\n\
    assert(double_the_difference(lst: [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst:\
    \ [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0])\
    \ == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpzdcasvf9.swift:17:18: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n            if i % 2 == 1 {\n     \
    \            ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable\
    \ here\npublic func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n\
    \            ^\n"
  stdout: ''
  timestamp: 1659824369
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    var sum =\
    \ 0\n    for num in lst {\n        if num > 0 && num.truncatingRemainder(dividingBy:\
    \ 1) == 0 {\n            sum += Int(pow(num, 2))\n        }\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmp4eg75hac.swift:17:24: error: cannot find 'pow' in scope\n     \
    \       sum += Int(pow(num, 2))\n                       ^~~\n"
  stdout: ''
  timestamp: 1659824369
- exit_code: 0
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    var sum =\
    \ 0\n    for num in lst {\n        if num.truncatingRemainder(dividingBy: 2) ==\
    \ 1 && num >= 0 {\n            sum += Int(num * num)\n        }\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824369
- exit_code: 0
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    var sum =\
    \ 0\n    for num in lst {\n        if num.truncatingRemainder(dividingBy: 2) ==\
    \ 1 && num > 0 {\n            sum += Int(num * num)\n        }\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824369
- exit_code: -4
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    return 0\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: Exception
  stderr: 'tmpj6caa6bs/tmpj6caa6bs.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b792386dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7923564b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7923564988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b79235637b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpj6caa6bs                        0x000055785c1fa3e2 <unavailable> + 5090

    5    libc.so.6                          0x00002b7923a59460 __libc_start_main +
    245

    6    tmpj6caa6bs                        0x000055785c1f9fa9 <unavailable> + 4009

    '
  stdout: ''
  timestamp: 1659824369
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    var sum =\
    \ 0\n    for i in lst {\n        if i > 0 && i.truncatingRemainder(dividingBy:\
    \ 1) == 0 {\n            sum += Int(pow(i, 2))\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpnmvxz0cy.swift:17:24: error: cannot find 'pow' in scope\n     \
    \       sum += Int(pow(i, 2))\n                       ^~~\n"
  stdout: ''
  timestamp: 1659824369
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    var sum =\
    \ 0\n    for i in lst {\n        if i > 0 && i.truncatingRemainder(dividingBy:\
    \ 1) == 0 {\n            sum += Int(pow(i, 2))\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpnmvxz0cy.swift:17:24: error: cannot find 'pow' in scope\n     \
    \       sum += Int(pow(i, 2))\n                       ^~~\n"
  stdout: ''
  timestamp: 1659824369
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    var sum =\
    \ 0\n    for i in lst {\n        if i > 0 && i.truncatingRemainder(dividingBy:\
    \ 1) == 0 {\n            sum += Int(pow(i, 2))\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpnmvxz0cy.swift:17:24: error: cannot find 'pow' in scope\n     \
    \       sum += Int(pow(i, 2))\n                       ^~~\n"
  stdout: ''
  timestamp: 1659824369
- exit_code: -4
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    // YOUR CODE\
    \ HERE\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: Exception
  stderr: 'tmp91jahoum/tmp91jahoum.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b74b46a8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b74b439fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b74b439f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b74b439e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp91jahoum                        0x00005560b50bd3e2 <unavailable> + 5090

    5    libc.so.6                          0x00002b74b4894460 __libc_start_main +
    245

    6    tmp91jahoum                        0x00005560b50bcfa9 <unavailable> + 4009

    '
  stdout: ''
  timestamp: 1659824369
- exit_code: 0
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    var sum =\
    \ 0\n    for num in lst {\n        if num.truncatingRemainder(dividingBy: 2) ==\
    \ 1 && num > 0 {\n            sum += Int(num * num)\n        }\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824369
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    var sum =\
    \ 0\n    for num in lst {\n        if num > 0 && num.truncatingRemainder(dividingBy:\
    \ 1) == 0 {\n            if num % 2 == 1 {\n                sum += Int(pow(num,\
    \ 2))\n            }\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(double_the_difference(lst: [] as [Double]) == 0)\nassert(double_the_difference(lst:\
    \ [5.0, 4.0]) == 25)\nassert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\n\
    assert(double_the_difference(lst: [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst:\
    \ [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0])\
    \ == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpfb5ez46v.swift:17:20: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n            if num % 2 == 1 {\n   \
    \                ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable\
    \ here\npublic func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n\
    \            ^\n/tmp/tmpfb5ez46v.swift:18:28: error: cannot find 'pow' in scope\n\
    \                sum += Int(pow(num, 2))\n                           ^~~\n"
  stdout: ''
  timestamp: 1659824369
- exit_code: 0
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    var sum =\
    \ 0\n    for num in lst {\n        if num.truncatingRemainder(dividingBy: 2) ==\
    \ 1 && num > 0 {\n            sum += Int(num * num)\n        }\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824369
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    var sum =\
    \ 0\n    for i in lst {\n        if i > 0 && i.truncatingRemainder(dividingBy:\
    \ 1) == 0 {\n            sum += Int(pow(i, 2))\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpnmvxz0cy.swift:17:24: error: cannot find 'pow' in scope\n     \
    \       sum += Int(pow(i, 2))\n                       ^~~\n"
  stdout: ''
  timestamp: 1659824369
- exit_code: 0
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    var sum =\
    \ 0\n    for num in lst {\n        if num.truncatingRemainder(dividingBy: 2) ==\
    \ 1 {\n            sum += Int(num * num)\n        }\n    }\n    return sum\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824369
- exit_code: 0
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    var sum =\
    \ 0\n    for num in lst {\n        if num.truncatingRemainder(dividingBy: 2) ==\
    \ 1 && num > 0 {\n            sum += Int(num * num)\n        }\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824369
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    var sum =\
    \ 0\n    for num in lst {\n        if num > 0 && num.truncatingRemainder(dividingBy:\
    \ 1) == 0 {\n            if num % 2 == 1 {\n                sum += Int(num * num)\n\
    \            }\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(double_the_difference(lst: [] as [Double]) == 0)\nassert(double_the_difference(lst:\
    \ [5.0, 4.0]) == 25)\nassert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\n\
    assert(double_the_difference(lst: [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst:\
    \ [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0])\
    \ == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmp6h0y0yk_.swift:17:20: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n            if num % 2 == 1 {\n   \
    \                ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable\
    \ here\npublic func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n\
    \            ^\n"
  stdout: ''
  timestamp: 1659824369
- exit_code: -4
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    return 0\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: Exception
  stderr: 'tmpj6caa6bs/tmpj6caa6bs.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b792386dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7923564b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7923564988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b79235637b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpj6caa6bs                        0x000055785c1fa3e2 <unavailable> + 5090

    5    libc.so.6                          0x00002b7923a59460 __libc_start_main +
    245

    6    tmpj6caa6bs                        0x000055785c1f9fa9 <unavailable> + 4009

    '
  stdout: ''
  timestamp: 1659824369
- exit_code: 0
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    var sum =\
    \ 0\n    for num in lst {\n        if num.truncatingRemainder(dividingBy: 2) ==\
    \ 1 && num > 0 {\n            sum += Int(num * num)\n        }\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824369
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    var sum =\
    \ 0\n    for num in lst {\n        if num > 0 && floor(num) == num && num.truncatingRemainder(dividingBy:\
    \ 2) != 0 {\n            sum += Int(pow(num, 2))\n        }\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpmxw80fr_.swift:16:23: error: cannot find 'floor' in scope\n   \
    \     if num > 0 && floor(num) == num && num.truncatingRemainder(dividingBy: 2)\
    \ != 0 {\n                      ^~~~~\n/tmp/tmpmxw80fr_.swift:17:24: error: cannot\
    \ find 'pow' in scope\n            sum += Int(pow(num, 2))\n                 \
    \      ^~~\n"
  stdout: ''
  timestamp: 1659824369
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    var sum =\
    \ 0\n    for num in lst {\n        if num > 0 && num.truncatingRemainder(dividingBy:\
    \ 1) == 0 {\n            if num % 2 == 1 {\n                sum += Int(num) *\
    \ Int(num)\n            }\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(double_the_difference(lst: [] as [Double]) == 0)\nassert(double_the_difference(lst:\
    \ [5.0, 4.0]) == 25)\nassert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\n\
    assert(double_the_difference(lst: [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst:\
    \ [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0])\
    \ == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpcfrji_86.swift:17:20: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n            if num % 2 == 1 {\n   \
    \                ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable\
    \ here\npublic func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n\
    \            ^\n"
  stdout: ''
  timestamp: 1659824369
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    var sum =\
    \ 0\n    for num in lst {\n        if num > 0 && num.truncatingRemainder(dividingBy:\
    \ 1) == 0 {\n            if num % 2 == 1 {\n                sum += Int(pow(num,\
    \ 2))\n            }\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(double_the_difference(lst: [] as [Double]) == 0)\nassert(double_the_difference(lst:\
    \ [5.0, 4.0]) == 25)\nassert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\n\
    assert(double_the_difference(lst: [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst:\
    \ [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0])\
    \ == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpfb5ez46v.swift:17:20: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n            if num % 2 == 1 {\n   \
    \                ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable\
    \ here\npublic func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n\
    \            ^\n/tmp/tmpfb5ez46v.swift:18:28: error: cannot find 'pow' in scope\n\
    \                sum += Int(pow(num, 2))\n                           ^~~\n"
  stdout: ''
  timestamp: 1659824369
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    var sum =\
    \ 0\n    for num in lst {\n        if num > 0 && num.truncatingRemainder(dividingBy:\
    \ 1) == 0 {\n            if num % 2 == 1 {\n                sum += Int(pow(num,\
    \ 2))\n            }\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(double_the_difference(lst: [] as [Double]) == 0)\nassert(double_the_difference(lst:\
    \ [5.0, 4.0]) == 25)\nassert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\n\
    assert(double_the_difference(lst: [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst:\
    \ [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0])\
    \ == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpfb5ez46v.swift:17:20: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n            if num % 2 == 1 {\n   \
    \                ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable\
    \ here\npublic func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n\
    \            ^\n/tmp/tmpfb5ez46v.swift:18:28: error: cannot find 'pow' in scope\n\
    \                sum += Int(pow(num, 2))\n                           ^~~\n"
  stdout: ''
  timestamp: 1659824369
- exit_code: 0
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    var sum =\
    \ 0\n    for num in lst {\n        if num.truncatingRemainder(dividingBy: 2) ==\
    \ 1 {\n            sum += Int(num * num)\n        }\n    }\n    return sum\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824369
- exit_code: 0
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    // YOUR CODE\
    \ HERE\n    var sum = 0\n    for i in lst {\n        if i > 0 && i.truncatingRemainder(dividingBy:\
    \ 2) != 0 {\n            sum += Int(i * i)\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824369
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    var sum =\
    \ 0\n    for i in lst {\n        if i > 0 && i.truncatingRemainder(dividingBy:\
    \ 1) == 0 {\n            sum += Int(pow(i, 2))\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpnmvxz0cy.swift:17:24: error: cannot find 'pow' in scope\n     \
    \       sum += Int(pow(i, 2))\n                       ^~~\n"
  stdout: ''
  timestamp: 1659824369
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    var sum =\
    \ 0\n    for num in lst {\n        if num > 0 && num.truncatingRemainder(dividingBy:\
    \ 1) == 0 {\n            if num % 2 == 1 {\n                sum += Int(pow(num,\
    \ 2))\n            }\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(double_the_difference(lst: [] as [Double]) == 0)\nassert(double_the_difference(lst:\
    \ [5.0, 4.0]) == 25)\nassert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\n\
    assert(double_the_difference(lst: [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst:\
    \ [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0])\
    \ == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpfb5ez46v.swift:17:20: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n            if num % 2 == 1 {\n   \
    \                ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable\
    \ here\npublic func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n\
    \            ^\n/tmp/tmpfb5ez46v.swift:18:28: error: cannot find 'pow' in scope\n\
    \                sum += Int(pow(num, 2))\n                           ^~~\n"
  stdout: ''
  timestamp: 1659824369
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    var sum =\
    \ 0\n    for num in lst {\n        if num > 0 && num.truncatingRemainder(dividingBy:\
    \ 1) == 0 {\n            sum += Int(pow(num, 2))\n        }\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmp4eg75hac.swift:17:24: error: cannot find 'pow' in scope\n     \
    \       sum += Int(pow(num, 2))\n                       ^~~\n"
  stdout: ''
  timestamp: 1659824369
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    var sum =\
    \ 0\n    for i in lst {\n        if i > 0 && i.truncatingRemainder(dividingBy:\
    \ 1) == 0 {\n            sum += Int(pow(i, 2))\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpnmvxz0cy.swift:17:24: error: cannot find 'pow' in scope\n     \
    \       sum += Int(pow(i, 2))\n                       ^~~\n"
  stdout: ''
  timestamp: 1659824369
- exit_code: 0
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    var sum =\
    \ 0\n    for num in lst {\n        if num.truncatingRemainder(dividingBy: 2) ==\
    \ 1 && num > 0 {\n            sum += Int(num * num)\n        }\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824369
- exit_code: -4
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    return 0\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: Exception
  stderr: 'tmpj6caa6bs/tmpj6caa6bs.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b792386dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7923564b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7923564988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b79235637b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpj6caa6bs                        0x000055785c1fa3e2 <unavailable> + 5090

    5    libc.so.6                          0x00002b7923a59460 __libc_start_main +
    245

    6    tmpj6caa6bs                        0x000055785c1f9fa9 <unavailable> + 4009

    '
  stdout: ''
  timestamp: 1659824369
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    var sum =\
    \ 0\n    for i in lst {\n        if i > 0 && i.truncatingRemainder(dividingBy:\
    \ 1) == 0 && i % 2 != 0 {\n            sum += Int(i * i)\n        }\n    }\n \
    \   return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmp922wmada.swift:16:68: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if i > 0 && i.truncatingRemainder(dividingBy:\
    \ 1) == 0 && i % 2 != 0 {\n                                                  \
    \                 ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable\
    \ here\npublic func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n\
    \            ^\n"
  stdout: ''
  timestamp: 1659824369
- exit_code: -4
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    // YOUR CODE\
    \ HERE\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: Exception
  stderr: 'tmp91jahoum/tmp91jahoum.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b74b46a8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b74b439fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b74b439f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b74b439e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp91jahoum                        0x00005560b50bd3e2 <unavailable> + 5090

    5    libc.so.6                          0x00002b74b4894460 __libc_start_main +
    245

    6    tmp91jahoum                        0x00005560b50bcfa9 <unavailable> + 4009

    '
  stdout: ''
  timestamp: 1659824369
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    var sum =\
    \ 0\n    for i in lst {\n        if i > 0 && i.truncatingRemainder(dividingBy:\
    \ 1) == 0 && i % 2 != 0 {\n            sum += Int(i * i)\n        }\n    }\n \
    \   return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmp922wmada.swift:16:68: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if i > 0 && i.truncatingRemainder(dividingBy:\
    \ 1) == 0 && i % 2 != 0 {\n                                                  \
    \                 ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable\
    \ here\npublic func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n\
    \            ^\n"
  stdout: ''
  timestamp: 1659824369
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    var sum =\
    \ 0\n    for i in lst {\n        if i > 0 && i.truncatingRemainder(dividingBy:\
    \ 1) == 0 {\n            if i % 2 == 1 {\n                sum += Int(i * i)\n\
    \            }\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(double_the_difference(lst: [] as [Double]) == 0)\nassert(double_the_difference(lst:\
    \ [5.0, 4.0]) == 25)\nassert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\n\
    assert(double_the_difference(lst: [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst:\
    \ [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0])\
    \ == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpzdcasvf9.swift:17:18: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n            if i % 2 == 1 {\n     \
    \            ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable\
    \ here\npublic func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n\
    \            ^\n"
  stdout: ''
  timestamp: 1659824369
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    var sum =\
    \ 0\n    for i in lst {\n        if i > 0 && i.truncatingRemainder(dividingBy:\
    \ 1) == 0 {\n            if i % 2 == 1 {\n                sum += Int(i * i)\n\
    \            }\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(double_the_difference(lst: [] as [Double]) == 0)\nassert(double_the_difference(lst:\
    \ [5.0, 4.0]) == 25)\nassert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\n\
    assert(double_the_difference(lst: [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst:\
    \ [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0])\
    \ == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpzdcasvf9.swift:17:18: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n            if i % 2 == 1 {\n     \
    \            ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable\
    \ here\npublic func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n\
    \            ^\n"
  stdout: ''
  timestamp: 1659824369
- exit_code: -4
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    return 0\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: Exception
  stderr: 'tmpj6caa6bs/tmpj6caa6bs.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b792386dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7923564b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7923564988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b79235637b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpj6caa6bs                        0x000055785c1fa3e2 <unavailable> + 5090

    5    libc.so.6                          0x00002b7923a59460 __libc_start_main +
    245

    6    tmpj6caa6bs                        0x000055785c1f9fa9 <unavailable> + 4009

    '
  stdout: ''
  timestamp: 1659824369
- exit_code: 0
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    var sum =\
    \ 0\n    for i in lst {\n        if i.truncatingRemainder(dividingBy: 2) == 1\
    \ {\n            sum += Int(i * i)\n        }\n    }\n    return sum\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824369
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    var sum =\
    \ 0\n    for i in lst {\n        if i > 0 && i.truncatingRemainder(dividingBy:\
    \ 1) == 0 {\n            sum += Int(pow(i, 2))\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpnmvxz0cy.swift:17:24: error: cannot find 'pow' in scope\n     \
    \       sum += Int(pow(i, 2))\n                       ^~~\n"
  stdout: ''
  timestamp: 1659824369
- exit_code: -4
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    return 0\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: Exception
  stderr: 'tmpj6caa6bs/tmpj6caa6bs.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b792386dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7923564b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7923564988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b79235637b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpj6caa6bs                        0x000055785c1fa3e2 <unavailable> + 5090

    5    libc.so.6                          0x00002b7923a59460 __libc_start_main +
    245

    6    tmpj6caa6bs                        0x000055785c1f9fa9 <unavailable> + 4009

    '
  stdout: ''
  timestamp: 1659824369
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    var sum =\
    \ 0\n    for num in lst {\n        if num > 0 && num.truncatingRemainder(dividingBy:\
    \ 1) == 0 {\n            if num % 2 == 1 {\n                sum += Int(num * num)\n\
    \            }\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(double_the_difference(lst: [] as [Double]) == 0)\nassert(double_the_difference(lst:\
    \ [5.0, 4.0]) == 25)\nassert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\n\
    assert(double_the_difference(lst: [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst:\
    \ [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0])\
    \ == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmp6h0y0yk_.swift:17:20: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n            if num % 2 == 1 {\n   \
    \                ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable\
    \ here\npublic func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n\
    \            ^\n"
  stdout: ''
  timestamp: 1659824369
- exit_code: 0
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    var sum =\
    \ 0\n    for num in lst {\n        if num.truncatingRemainder(dividingBy: 2) ==\
    \ 1 && num > 0 {\n            sum += Int(num * num)\n        }\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824369
- exit_code: 0
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    var sum =\
    \ 0\n    for num in lst {\n        if num.truncatingRemainder(dividingBy: 2) ==\
    \ 1 && num > 0 {\n            sum += Int(num * num)\n        }\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824369
- exit_code: -4
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    return 0\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: Exception
  stderr: 'tmpj6caa6bs/tmpj6caa6bs.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b792386dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7923564b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7923564988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b79235637b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpj6caa6bs                        0x000055785c1fa3e2 <unavailable> + 5090

    5    libc.so.6                          0x00002b7923a59460 __libc_start_main +
    245

    6    tmpj6caa6bs                        0x000055785c1f9fa9 <unavailable> + 4009

    '
  stdout: ''
  timestamp: 1659824369
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    var sum =\
    \ 0\n    for num in lst {\n        if num > 0 && num.truncatingRemainder(dividingBy:\
    \ 1) == 0 {\n            if num % 2 == 1 {\n                sum += Int(num * num)\n\
    \            }\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(double_the_difference(lst: [] as [Double]) == 0)\nassert(double_the_difference(lst:\
    \ [5.0, 4.0]) == 25)\nassert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\n\
    assert(double_the_difference(lst: [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst:\
    \ [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0])\
    \ == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmp6h0y0yk_.swift:17:20: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n            if num % 2 == 1 {\n   \
    \                ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable\
    \ here\npublic func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n\
    \            ^\n"
  stdout: ''
  timestamp: 1659824369
- exit_code: 0
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    var sum =\
    \ 0\n    for num in lst {\n        if num.truncatingRemainder(dividingBy: 2) ==\
    \ 1 && num > 0 {\n            sum += Int(num * num)\n        }\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824369
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    var sum =\
    \ 0\n    for i in lst {\n        if i > 0 && i.truncatingRemainder(dividingBy:\
    \ 1) == 0 && i % 2 != 0 {\n            sum += Int(i * i)\n        }\n    }\n \
    \   return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmp922wmada.swift:16:68: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if i > 0 && i.truncatingRemainder(dividingBy:\
    \ 1) == 0 && i % 2 != 0 {\n                                                  \
    \                 ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable\
    \ here\npublic func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n\
    \            ^\n"
  stdout: ''
  timestamp: 1659824369
- exit_code: 0
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    var sum =\
    \ 0\n    for num in lst {\n        if num.truncatingRemainder(dividingBy: 2) ==\
    \ 1 && num > 0 {\n            sum += Int(num * num)\n        }\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824369
- exit_code: 0
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    var sum =\
    \ 0\n    for num in lst {\n        if num.truncatingRemainder(dividingBy: 2) ==\
    \ 1 && num > 0 {\n            sum += Int(num * num)\n        }\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824369
- exit_code: -4
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    return 0\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: Exception
  stderr: 'tmpj6caa6bs/tmpj6caa6bs.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b792386dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7923564b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7923564988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b79235637b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpj6caa6bs                        0x000055785c1fa3e2 <unavailable> + 5090

    5    libc.so.6                          0x00002b7923a59460 __libc_start_main +
    245

    6    tmpj6caa6bs                        0x000055785c1f9fa9 <unavailable> + 4009

    '
  stdout: ''
  timestamp: 1659824369
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    var sum =\
    \ 0\n    for i in lst {\n        if i > 0 && i.truncatingRemainder(dividingBy:\
    \ 1) == 0 {\n            sum += Int(pow(i, 2))\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpnmvxz0cy.swift:17:24: error: cannot find 'pow' in scope\n     \
    \       sum += Int(pow(i, 2))\n                       ^~~\n"
  stdout: ''
  timestamp: 1659824369
- exit_code: -4
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    return 0\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: Exception
  stderr: 'tmpj6caa6bs/tmpj6caa6bs.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b792386dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7923564b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7923564988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b79235637b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpj6caa6bs                        0x000055785c1fa3e2 <unavailable> + 5090

    5    libc.so.6                          0x00002b7923a59460 __libc_start_main +
    245

    6    tmpj6caa6bs                        0x000055785c1f9fa9 <unavailable> + 4009

    '
  stdout: ''
  timestamp: 1659824369
- exit_code: 0
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    var sum =\
    \ 0\n    for num in lst {\n        if num.truncatingRemainder(dividingBy: 2) ==\
    \ 1 {\n            sum += Int(num * num)\n        }\n    }\n    return sum\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824369
- exit_code: 0
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    var sum =\
    \ 0\n    for i in lst {\n        if i > 0 && i.truncatingRemainder(dividingBy:\
    \ 1) == 0 && i.truncatingRemainder(dividingBy: 2) != 0 {\n            sum += Int(i\
    \ * i)\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(double_the_difference(lst: [] as [Double]) == 0)\nassert(double_the_difference(lst:\
    \ [5.0, 4.0]) == 25)\nassert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\n\
    assert(double_the_difference(lst: [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst:\
    \ [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0])\
    \ == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824369
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    var sum:\
    \ Int = 0\n    for num in lst {\n        if num.truncatingRemainder(dividingBy:\
    \ 2) == 1 {\n            sum += Int(pow(num, 2))\n        }\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmp0p30ix5t.swift:17:24: error: cannot find 'pow' in scope\n     \
    \       sum += Int(pow(num, 2))\n                       ^~~\n"
  stdout: ''
  timestamp: 1659824369
- exit_code: 0
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    var sum =\
    \ 0\n    for num in lst {\n        if num.truncatingRemainder(dividingBy: 2) ==\
    \ 1 && num > 0 {\n            sum += Int(num * num)\n        }\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824369
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    var sum =\
    \ 0\n    for num in lst {\n        if num > 0 && num.truncatingRemainder(dividingBy:\
    \ 1) == 0 && num % 2 != 0 {\n            sum += Int(pow(num, 2))\n        }\n\
    \    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpc45cu18h.swift:16:74: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if num > 0 && num.truncatingRemainder(dividingBy:\
    \ 1) == 0 && num % 2 != 0 {\n                                                \
    \                         ^\nSwift.%:2:13: note: '%' has been explicitly marked\
    \ unavailable here\npublic func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n\
    \            ^\n/tmp/tmpc45cu18h.swift:17:24: error: cannot find 'pow' in scope\n\
    \            sum += Int(pow(num, 2))\n                       ^~~\n"
  stdout: ''
  timestamp: 1659824369
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    var sum =\
    \ 0\n    for item in lst {\n        if item > 0 && item.truncatingRemainder(dividingBy:\
    \ 1) == 0 && item % 2 != 0 {\n            sum += Int(item * item)\n        }\n\
    \    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmp3rlu5biv.swift:16:77: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if item > 0 && item.truncatingRemainder(dividingBy:\
    \ 1) == 0 && item % 2 != 0 {\n                                               \
    \                             ^\nSwift.%:2:13: note: '%' has been explicitly marked\
    \ unavailable here\npublic func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n\
    \            ^\n"
  stdout: ''
  timestamp: 1659824369
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    var sum =\
    \ 0\n    for num in lst {\n        if num > 0 && num.truncatingRemainder(dividingBy:\
    \ 1) == 0 {\n            sum += Int(pow(num, 2))\n        }\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmp4eg75hac.swift:17:24: error: cannot find 'pow' in scope\n     \
    \       sum += Int(pow(num, 2))\n                       ^~~\n"
  stdout: ''
  timestamp: 1659824369
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    var sum =\
    \ 0\n    for num in lst {\n        if num > 0 && num.truncatingRemainder(dividingBy:\
    \ 1) == 0 {\n            sum += Int(pow(num, 2))\n        }\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmp4eg75hac.swift:17:24: error: cannot find 'pow' in scope\n     \
    \       sum += Int(pow(num, 2))\n                       ^~~\n"
  stdout: ''
  timestamp: 1659824369
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    var sum =\
    \ 0\n    for num in lst {\n        if num > 0 && num.truncatingRemainder(dividingBy:\
    \ 1) == 0 {\n            if num % 2 == 1 {\n                sum += Int(num * num)\n\
    \            }\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(double_the_difference(lst: [] as [Double]) == 0)\nassert(double_the_difference(lst:\
    \ [5.0, 4.0]) == 25)\nassert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\n\
    assert(double_the_difference(lst: [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst:\
    \ [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0])\
    \ == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmp6h0y0yk_.swift:17:20: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n            if num % 2 == 1 {\n   \
    \                ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable\
    \ here\npublic func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n\
    \            ^\n"
  stdout: ''
  timestamp: 1659824369
- exit_code: 0
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    var sum =\
    \ 0\n    for num in lst {\n        if num.truncatingRemainder(dividingBy: 2) ==\
    \ 1 && num >= 0 {\n            sum += Int(num * num)\n        }\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824369
- exit_code: 0
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    var sum =\
    \ 0\n    for i in lst {\n        if i > 0 && i.truncatingRemainder(dividingBy:\
    \ 1) == 0 && i.truncatingRemainder(dividingBy: 2) != 0 {\n            sum += Int(i\
    \ * i)\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(double_the_difference(lst: [] as [Double]) == 0)\nassert(double_the_difference(lst:\
    \ [5.0, 4.0]) == 25)\nassert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\n\
    assert(double_the_difference(lst: [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst:\
    \ [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0])\
    \ == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824369
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    var sum =\
    \ 0\n    for i in lst {\n        if i > 0 && i.truncatingRemainder(dividingBy:\
    \ 1) == 0 && i % 2 != 0 {\n            sum += Int(i * i)\n        }\n    }\n \
    \   return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmp922wmada.swift:16:68: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if i > 0 && i.truncatingRemainder(dividingBy:\
    \ 1) == 0 && i % 2 != 0 {\n                                                  \
    \                 ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable\
    \ here\npublic func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n\
    \            ^\n"
  stdout: ''
  timestamp: 1659824369
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    var sum =\
    \ 0\n    for i in lst {\n        if i > 0 && i.truncatingRemainder(dividingBy:\
    \ 1) == 0 {\n            if i % 2 == 1 {\n                sum += Int(i * i)\n\
    \            }\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(double_the_difference(lst: [] as [Double]) == 0)\nassert(double_the_difference(lst:\
    \ [5.0, 4.0]) == 25)\nassert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\n\
    assert(double_the_difference(lst: [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst:\
    \ [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0])\
    \ == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpzdcasvf9.swift:17:18: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n            if i % 2 == 1 {\n     \
    \            ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable\
    \ here\npublic func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n\
    \            ^\n"
  stdout: ''
  timestamp: 1659824369
- exit_code: 0
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    var sum =\
    \ 0\n    for num in lst {\n        if num.truncatingRemainder(dividingBy: 2) ==\
    \ 1 && num > 0 {\n            sum += Int(num * num)\n        }\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824369
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    var sum =\
    \ 0\n    for num in lst {\n        if num > 0 && num.truncatingRemainder(dividingBy:\
    \ 1) == 0 {\n            if num % 2 == 1 {\n                sum += Int(num * num)\n\
    \            }\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(double_the_difference(lst: [] as [Double]) == 0)\nassert(double_the_difference(lst:\
    \ [5.0, 4.0]) == 25)\nassert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\n\
    assert(double_the_difference(lst: [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst:\
    \ [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0])\
    \ == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmp6h0y0yk_.swift:17:20: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n            if num % 2 == 1 {\n   \
    \                ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable\
    \ here\npublic func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n\
    \            ^\n"
  stdout: ''
  timestamp: 1659824369
- exit_code: -4
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    return 0\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: Exception
  stderr: 'tmpj6caa6bs/tmpj6caa6bs.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b792386dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7923564b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7923564988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b79235637b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpj6caa6bs                        0x000055785c1fa3e2 <unavailable> + 5090

    5    libc.so.6                          0x00002b7923a59460 __libc_start_main +
    245

    6    tmpj6caa6bs                        0x000055785c1f9fa9 <unavailable> + 4009

    '
  stdout: ''
  timestamp: 1659824369
- exit_code: 0
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    var sum =\
    \ 0\n    for num in lst {\n        if num.truncatingRemainder(dividingBy: 2) ==\
    \ 1 && num > 0 {\n            sum += Int(num * num)\n        }\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824369
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    var sum =\
    \ 0\n    for num in lst {\n        if num > 0 && num.truncatingRemainder(dividingBy:\
    \ 1) == 0 {\n            if num % 2 == 1 {\n                sum += Int(num * num)\n\
    \            }\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(double_the_difference(lst: [] as [Double]) == 0)\nassert(double_the_difference(lst:\
    \ [5.0, 4.0]) == 25)\nassert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\n\
    assert(double_the_difference(lst: [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst:\
    \ [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0])\
    \ == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmp6h0y0yk_.swift:17:20: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n            if num % 2 == 1 {\n   \
    \                ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable\
    \ here\npublic func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n\
    \            ^\n"
  stdout: ''
  timestamp: 1659824369
- exit_code: 0
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    var sum =\
    \ 0\n    for num in lst {\n        if num.truncatingRemainder(dividingBy: 2) ==\
    \ 1 {\n            sum += Int(num * num)\n        }\n    }\n    return sum\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824369
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    var sum =\
    \ 0\n    for i in lst {\n        if i > 0 && i.truncatingRemainder(dividingBy:\
    \ 1) == 0 {\n            sum += Int(pow(i, 2))\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpnmvxz0cy.swift:17:24: error: cannot find 'pow' in scope\n     \
    \       sum += Int(pow(i, 2))\n                       ^~~\n"
  stdout: ''
  timestamp: 1659824369
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    var sum =\
    \ 0\n    for num in lst {\n        if num > 0 && num.truncatingRemainder(dividingBy:\
    \ 1) == 0 {\n            if num % 2 == 1 {\n                sum += Int(num * num)\n\
    \            }\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(double_the_difference(lst: [] as [Double]) == 0)\nassert(double_the_difference(lst:\
    \ [5.0, 4.0]) == 25)\nassert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\n\
    assert(double_the_difference(lst: [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst:\
    \ [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0])\
    \ == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmp6h0y0yk_.swift:17:20: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n            if num % 2 == 1 {\n   \
    \                ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable\
    \ here\npublic func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n\
    \            ^\n"
  stdout: ''
  timestamp: 1659824369
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    var sum =\
    \ 0\n    for num in lst {\n        if num > 0 && num.truncatingRemainder(dividingBy:\
    \ 1) == 0 {\n            sum += Int(pow(num, 2))\n        }\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmp4eg75hac.swift:17:24: error: cannot find 'pow' in scope\n     \
    \       sum += Int(pow(num, 2))\n                       ^~~\n"
  stdout: ''
  timestamp: 1659824369
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    var sum =\
    \ 0\n    for num in lst {\n        if num > 0 && num.truncatingRemainder(dividingBy:\
    \ 1) == 0 {\n            if num % 2 == 1 {\n                sum += Int(num * num)\n\
    \            }\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(double_the_difference(lst: [] as [Double]) == 0)\nassert(double_the_difference(lst:\
    \ [5.0, 4.0]) == 25)\nassert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\n\
    assert(double_the_difference(lst: [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst:\
    \ [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0])\
    \ == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmp6h0y0yk_.swift:17:20: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n            if num % 2 == 1 {\n   \
    \                ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable\
    \ here\npublic func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n\
    \            ^\n"
  stdout: ''
  timestamp: 1659824369
- exit_code: 0
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    var sum =\
    \ 0\n    for num in lst {\n        if num.truncatingRemainder(dividingBy: 2) ==\
    \ 1 && num >= 0 {\n            sum += Int(num * num)\n        }\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824369
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    var sum =\
    \ 0\n    for num in lst {\n        if num > 0 && num.truncatingRemainder(dividingBy:\
    \ 1) == 0 {\n            if num % 2 == 1 {\n                sum += Int(num * num)\n\
    \            }\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(double_the_difference(lst: [] as [Double]) == 0)\nassert(double_the_difference(lst:\
    \ [5.0, 4.0]) == 25)\nassert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\n\
    assert(double_the_difference(lst: [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst:\
    \ [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0])\
    \ == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmp6h0y0yk_.swift:17:20: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n            if num % 2 == 1 {\n   \
    \                ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable\
    \ here\npublic func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n\
    \            ^\n"
  stdout: ''
  timestamp: 1659824369
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    var sum =\
    \ 0\n    for i in lst {\n        if i > 0 && i.truncatingRemainder(dividingBy:\
    \ 1) == 0 {\n            sum += Int(pow(i, 2))\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpnmvxz0cy.swift:17:24: error: cannot find 'pow' in scope\n     \
    \       sum += Int(pow(i, 2))\n                       ^~~\n"
  stdout: ''
  timestamp: 1659824369
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    var sum =\
    \ 0\n    for i in lst {\n        if i > 0 && i.truncatingRemainder(dividingBy:\
    \ 1) == 0 && i % 2 != 0 {\n            sum += Int(i * i)\n        }\n    }\n \
    \   return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmp922wmada.swift:16:68: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if i > 0 && i.truncatingRemainder(dividingBy:\
    \ 1) == 0 && i % 2 != 0 {\n                                                  \
    \                 ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable\
    \ here\npublic func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n\
    \            ^\n"
  stdout: ''
  timestamp: 1659824369
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    var sum =\
    \ 0\n    for num in lst {\n        if num > 0 && num.truncatingRemainder(dividingBy:\
    \ 1) == 0 {\n            if num % 2 == 1 {\n                sum += Int(num * num)\n\
    \            }\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(double_the_difference(lst: [] as [Double]) == 0)\nassert(double_the_difference(lst:\
    \ [5.0, 4.0]) == 25)\nassert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\n\
    assert(double_the_difference(lst: [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst:\
    \ [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0])\
    \ == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmp6h0y0yk_.swift:17:20: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n            if num % 2 == 1 {\n   \
    \                ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable\
    \ here\npublic func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n\
    \            ^\n"
  stdout: ''
  timestamp: 1659824369
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    var sum =\
    \ 0\n    for num in lst {\n        if num > 0 && num.truncatingRemainder(dividingBy:\
    \ 1) == 0 {\n            sum += Int(pow(num, 2))\n        }\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmp4eg75hac.swift:17:24: error: cannot find 'pow' in scope\n     \
    \       sum += Int(pow(num, 2))\n                       ^~~\n"
  stdout: ''
  timestamp: 1659824369
- exit_code: -4
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    return 0\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: Exception
  stderr: 'tmpj6caa6bs/tmpj6caa6bs.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b792386dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7923564b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7923564988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b79235637b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpj6caa6bs                        0x000055785c1fa3e2 <unavailable> + 5090

    5    libc.so.6                          0x00002b7923a59460 __libc_start_main +
    245

    6    tmpj6caa6bs                        0x000055785c1f9fa9 <unavailable> + 4009

    '
  stdout: ''
  timestamp: 1659824369
- exit_code: -4
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    return 0\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: Exception
  stderr: 'tmpj6caa6bs/tmpj6caa6bs.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b792386dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7923564b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7923564988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b79235637b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpj6caa6bs                        0x000055785c1fa3e2 <unavailable> + 5090

    5    libc.so.6                          0x00002b7923a59460 __libc_start_main +
    245

    6    tmpj6caa6bs                        0x000055785c1f9fa9 <unavailable> + 4009

    '
  stdout: ''
  timestamp: 1659824369
- exit_code: -4
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    // YOUR CODE\
    \ HERE\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: Exception
  stderr: 'tmp91jahoum/tmp91jahoum.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b74b46a8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b74b439fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b74b439f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b74b439e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp91jahoum                        0x00005560b50bd3e2 <unavailable> + 5090

    5    libc.so.6                          0x00002b74b4894460 __libc_start_main +
    245

    6    tmp91jahoum                        0x00005560b50bcfa9 <unavailable> + 4009

    '
  stdout: ''
  timestamp: 1659824369
- exit_code: 0
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    var sum =\
    \ 0\n    for num in lst {\n        if num.truncatingRemainder(dividingBy: 2) ==\
    \ 1 && num >= 0 {\n            sum += Int(num * num)\n        }\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824369
- exit_code: 0
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    var sum =\
    \ 0\n    for i in lst {\n        if i.truncatingRemainder(dividingBy: 2) == 1\
    \ && i > 0 {\n            sum += Int(i * i)\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824369
- exit_code: 0
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    var sum =\
    \ 0\n    for num in lst {\n        if num.truncatingRemainder(dividingBy: 2) ==\
    \ 1 && num > 0 {\n            sum += Int(num * num)\n        }\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824369
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    var sum =\
    \ 0\n    for num in lst {\n        if num > 0 && num.truncatingRemainder(dividingBy:\
    \ 1) == 0 {\n            if num % 2 == 1 {\n                sum += Int(num * num)\n\
    \            }\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(double_the_difference(lst: [] as [Double]) == 0)\nassert(double_the_difference(lst:\
    \ [5.0, 4.0]) == 25)\nassert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\n\
    assert(double_the_difference(lst: [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst:\
    \ [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0])\
    \ == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmp6h0y0yk_.swift:17:20: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n            if num % 2 == 1 {\n   \
    \                ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable\
    \ here\npublic func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n\
    \            ^\n"
  stdout: ''
  timestamp: 1659824369
- exit_code: 0
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    var sum =\
    \ 0\n    for i in lst {\n        if i > 0 && i.truncatingRemainder(dividingBy:\
    \ 1) == 0 && i.truncatingRemainder(dividingBy: 2) != 0 {\n            sum += Int(i\
    \ * i)\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(double_the_difference(lst: [] as [Double]) == 0)\nassert(double_the_difference(lst:\
    \ [5.0, 4.0]) == 25)\nassert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\n\
    assert(double_the_difference(lst: [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst:\
    \ [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0])\
    \ == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824369
- exit_code: 0
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    var sum =\
    \ 0\n    for num in lst {\n        if num.truncatingRemainder(dividingBy: 2) ==\
    \ 1 {\n            sum += Int(num * num)\n        }\n    }\n    return sum\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824369
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    var sum =\
    \ 0\n    for num in lst {\n        if num > 0 && num.truncatingRemainder(dividingBy:\
    \ 1) == 0 {\n            if num % 2 == 1 {\n                sum += Int(num * num)\n\
    \            }\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(double_the_difference(lst: [] as [Double]) == 0)\nassert(double_the_difference(lst:\
    \ [5.0, 4.0]) == 25)\nassert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\n\
    assert(double_the_difference(lst: [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst:\
    \ [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0])\
    \ == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmp6h0y0yk_.swift:17:20: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n            if num % 2 == 1 {\n   \
    \                ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable\
    \ here\npublic func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n\
    \            ^\n"
  stdout: ''
  timestamp: 1659824369
- exit_code: -4
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    return 0\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: Exception
  stderr: 'tmpj6caa6bs/tmpj6caa6bs.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b792386dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7923564b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7923564988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b79235637b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpj6caa6bs                        0x000055785c1fa3e2 <unavailable> + 5090

    5    libc.so.6                          0x00002b7923a59460 __libc_start_main +
    245

    6    tmpj6caa6bs                        0x000055785c1f9fa9 <unavailable> + 4009

    '
  stdout: ''
  timestamp: 1659824369
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    var sum =\
    \ 0\n    for num in lst {\n        if num > 0 && num.truncatingRemainder(dividingBy:\
    \ 1) == 0 {\n            sum += Int(pow(num, 2))\n        }\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmp4eg75hac.swift:17:24: error: cannot find 'pow' in scope\n     \
    \       sum += Int(pow(num, 2))\n                       ^~~\n"
  stdout: ''
  timestamp: 1659824369
- exit_code: 0
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    var sum =\
    \ 0\n    for i in lst {\n        if i.truncatingRemainder(dividingBy: 2) == 1\
    \ {\n            sum += Int(i * i)\n        }\n    }\n    return sum\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824369
- exit_code: -4
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    return 0\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: Exception
  stderr: 'tmpj6caa6bs/tmpj6caa6bs.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b792386dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7923564b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7923564988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b79235637b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpj6caa6bs                        0x000055785c1fa3e2 <unavailable> + 5090

    5    libc.so.6                          0x00002b7923a59460 __libc_start_main +
    245

    6    tmpj6caa6bs                        0x000055785c1f9fa9 <unavailable> + 4009

    '
  stdout: ''
  timestamp: 1659824369
- exit_code: 0
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    var sum =\
    \ 0\n    for num in lst {\n        if num.truncatingRemainder(dividingBy: 2) ==\
    \ 1 && num > 0 {\n            sum += Int(num * num)\n        }\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824369
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    var sum =\
    \ 0\n    for i in lst {\n        if i > 0 && i.truncatingRemainder(dividingBy:\
    \ 1) == 0 && i % 2 != 0 {\n            sum += Int(i * i)\n        }\n    }\n \
    \   return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmp922wmada.swift:16:68: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if i > 0 && i.truncatingRemainder(dividingBy:\
    \ 1) == 0 && i % 2 != 0 {\n                                                  \
    \                 ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable\
    \ here\npublic func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n\
    \            ^\n"
  stdout: ''
  timestamp: 1659824369
- exit_code: 0
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    var sum =\
    \ 0\n    for i in lst {\n        if i > 0 && i.truncatingRemainder(dividingBy:\
    \ 1) == 0 && i.truncatingRemainder(dividingBy: 2) != 0 {\n            sum += Int(i\
    \ * i)\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(double_the_difference(lst: [] as [Double]) == 0)\nassert(double_the_difference(lst:\
    \ [5.0, 4.0]) == 25)\nassert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\n\
    assert(double_the_difference(lst: [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst:\
    \ [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0])\
    \ == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824369
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    var sum =\
    \ 0\n    for num in lst {\n        if num > 0 && num.truncatingRemainder(dividingBy:\
    \ 1) == 0 {\n            if num % 2 == 1 {\n                sum += Int(pow(num,\
    \ 2))\n            }\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(double_the_difference(lst: [] as [Double]) == 0)\nassert(double_the_difference(lst:\
    \ [5.0, 4.0]) == 25)\nassert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\n\
    assert(double_the_difference(lst: [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst:\
    \ [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0])\
    \ == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpfb5ez46v.swift:17:20: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n            if num % 2 == 1 {\n   \
    \                ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable\
    \ here\npublic func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n\
    \            ^\n/tmp/tmpfb5ez46v.swift:18:28: error: cannot find 'pow' in scope\n\
    \                sum += Int(pow(num, 2))\n                           ^~~\n"
  stdout: ''
  timestamp: 1659824369
- exit_code: 0
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    var sum =\
    \ 0\n    for num in lst {\n        if num.truncatingRemainder(dividingBy: 2) ==\
    \ 1 {\n            sum += Int(num * num)\n        }\n    }\n    return sum\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824369
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    var sum =\
    \ 0\n    for num in lst {\n        if num > 0 && num.truncatingRemainder(dividingBy:\
    \ 1) == 0 && num % 2 != 0 {\n            sum += Int(pow(num, 2))\n        }\n\
    \    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpc45cu18h.swift:16:74: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if num > 0 && num.truncatingRemainder(dividingBy:\
    \ 1) == 0 && num % 2 != 0 {\n                                                \
    \                         ^\nSwift.%:2:13: note: '%' has been explicitly marked\
    \ unavailable here\npublic func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n\
    \            ^\n/tmp/tmpc45cu18h.swift:17:24: error: cannot find 'pow' in scope\n\
    \            sum += Int(pow(num, 2))\n                       ^~~\n"
  stdout: ''
  timestamp: 1659824369
- exit_code: 0
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    var sum =\
    \ 0\n    for num in lst {\n        if num.truncatingRemainder(dividingBy: 2) ==\
    \ 1 && num > 0 {\n            sum += Int(num * num)\n        }\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824369
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    var sum =\
    \ 0\n    for i in lst {\n        if i > 0 && i.truncatingRemainder(dividingBy:\
    \ 1) == 0 {\n            sum += Int(pow(i, 2))\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpnmvxz0cy.swift:17:24: error: cannot find 'pow' in scope\n     \
    \       sum += Int(pow(i, 2))\n                       ^~~\n"
  stdout: ''
  timestamp: 1659824369
- exit_code: -4
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    return 0\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: Exception
  stderr: 'tmpj6caa6bs/tmpj6caa6bs.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b792386dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7923564b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7923564988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b79235637b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpj6caa6bs                        0x000055785c1fa3e2 <unavailable> + 5090

    5    libc.so.6                          0x00002b7923a59460 __libc_start_main +
    245

    6    tmpj6caa6bs                        0x000055785c1f9fa9 <unavailable> + 4009

    '
  stdout: ''
  timestamp: 1659824369
- exit_code: -4
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    return 0\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: Exception
  stderr: 'tmpj6caa6bs/tmpj6caa6bs.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b792386dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7923564b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7923564988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b79235637b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpj6caa6bs                        0x000055785c1fa3e2 <unavailable> + 5090

    5    libc.so.6                          0x00002b7923a59460 __libc_start_main +
    245

    6    tmpj6caa6bs                        0x000055785c1f9fa9 <unavailable> + 4009

    '
  stdout: ''
  timestamp: 1659824369
- exit_code: 0
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    var sum =\
    \ 0\n    for num in lst {\n        if num.truncatingRemainder(dividingBy: 2) ==\
    \ 1 && num >= 0 {\n            sum += Int(num * num)\n        }\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824369
