language: swift
name: HumanEval_108_count_nums
results:
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter\
    \ { $0.digits.reduce(0, +) > 0 }.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp8zmkraxo.swift:13:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n     \
    \                   ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012555
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter\
    \ { $0.digits.reduce(0, +) > 0 }.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp8zmkraxo.swift:13:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n     \
    \                   ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012555
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter\
    \ { $0.digits.reduce(0, +) > 0 }.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp8zmkraxo.swift:13:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n     \
    \                   ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012555
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter\
    \ { $0.digits.reduce(0, +) > 0 }.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp8zmkraxo.swift:13:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n     \
    \                   ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012555
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter\
    \ { $0.digits.reduce(0, +) > 0 }.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp8zmkraxo.swift:13:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n     \
    \                   ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012555
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter\
    \ { $0.digits.reduce(0, +) > 0 }.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp8zmkraxo.swift:13:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n     \
    \                   ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012555
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter\
    \ { $0.digits.reduce(0, +) > 0 }.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp8zmkraxo.swift:13:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n     \
    \                   ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012555
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter\
    \ { $0.digits.reduce(0, +) > 0 }.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp8zmkraxo.swift:13:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n     \
    \                   ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012555
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter\
    \ { $0.digits.reduce(0, +) > 0 }.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp8zmkraxo.swift:13:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n     \
    \                   ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012555
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter\
    \ { $0.digits.reduce(0, +) > 0 }.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp8zmkraxo.swift:13:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n     \
    \                   ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012555
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter\
    \ { $0.digits.reduce(0, +) > 0 }.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp8zmkraxo.swift:13:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n     \
    \                   ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012555
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter\
    \ { $0.digits.reduce(0, +) > 0 }.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp8zmkraxo.swift:13:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n     \
    \                   ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012555
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter\
    \ { $0.digits.reduce(0, +) > 0 }.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp8zmkraxo.swift:13:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n     \
    \                   ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012555
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter\
    \ { $0.digits.reduce(0, +) > 0 }.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp8zmkraxo.swift:13:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n     \
    \                   ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012555
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter\
    \ { $0.digits.reduce(0, +) > 0 }.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp8zmkraxo.swift:13:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n     \
    \                   ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012555
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter({\
    \ (n) -> Bool in\n        return n.digits.reduce(0, +) > 0\n    }).count\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpf1pn59o1.swift:14:18: error: value of type 'Int' has no member\
    \ 'digits'\n        return n.digits.reduce(0, +) > 0\n               ~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012555
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter\
    \ { $0.digits.reduce(0, +) > 0 }.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp8zmkraxo.swift:13:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n     \
    \                   ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012555
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter\
    \ {\n        $0.digits.reduce(0, +) > 0\n    }.count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpng06ns4v.swift:14:12: error: value of type 'Int' has no member\
    \ 'digits'\n        $0.digits.reduce(0, +) > 0\n        ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012555
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter\
    \ { $0.digits.reduce(0, +) > 0 }.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp8zmkraxo.swift:13:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n     \
    \                   ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012555
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter\
    \ { $0.digits.reduce(0, +) > 0 }.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp8zmkraxo.swift:13:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n     \
    \                   ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012555
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter\
    \ { $0.digits.reduce(0, +) > 0 }.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp8zmkraxo.swift:13:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n     \
    \                   ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012555
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter\
    \ { $0.digits.reduce(0, +) > 0 }.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp8zmkraxo.swift:13:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n     \
    \                   ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012555
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter\
    \ { $0.digits.reduce(0, +) > 0 }.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp8zmkraxo.swift:13:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n     \
    \                   ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012555
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for num in arr {\n        if num < 0 {\n            if num % 10 != 0 {\n\
    \                count += 1\n            }\n        } else {\n            var\
    \ sum = 0\n            var num = num\n            while num > 0 {\n          \
    \      sum += num % 10\n                num /= 10\n            }\n           \
    \ if sum > 0 {\n                count += 1\n            }\n        }\n    }\n\
    \    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(count_nums(arr: []\
    \ as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: Exception
  stderr: 'tmp3n2jcpvg/tmp3n2jcpvg.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4d0affdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4d0acf4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4d0acf4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4d0acf37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3n2jcpvg                        0x000055b21c6e85a0 <unavailable> + 5536

    5    libc.so.6                          0x00002b4d0b1e9460 __libc_start_main +
    245

    6    tmp3n2jcpvg                        0x000055b21c6e8169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660012555
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter\
    \ { $0.digits.reduce(0, +) > 0 }.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp8zmkraxo.swift:13:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n     \
    \                   ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012555
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter\
    \ { $0.digits.reduce(0, +) > 0 }.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp8zmkraxo.swift:13:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n     \
    \                   ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012555
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter\
    \ { $0.digits.reduce(0, +) > 0 }.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp8zmkraxo.swift:13:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n     \
    \                   ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012555
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter\
    \ { $0.digits.reduce(0, +) > 0 }.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp8zmkraxo.swift:13:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n     \
    \                   ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012555
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter({\
    \ $0.digits.reduce(0, +) > 0 }).count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpdsu9ua4u.swift:13:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter({ $0.digits.reduce(0, +) > 0 }).count\n    \
    \                    ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012555
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter\
    \ { $0.digits.reduce(0, +) > 0 }.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp8zmkraxo.swift:13:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n     \
    \                   ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012555
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter\
    \ { $0 != 0 }.filter { $0.digits.reduce(0, +) > 0 }.count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpbianbf_u.swift:13:47: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter { $0 != 0 }.filter { $0.digits.reduce(0, +)\
    \ > 0 }.count\n                                           ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012555
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter\
    \ { $0.digits.reduce(0, +) > 0 }.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp8zmkraxo.swift:13:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n     \
    \                   ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012555
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter\
    \ { $0.digits.reduce(0, +) > 0 }.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp8zmkraxo.swift:13:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n     \
    \                   ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012555
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter\
    \ { $0.digits.reduce(0, +) > 0 }.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp8zmkraxo.swift:13:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n     \
    \                   ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012555
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter\
    \ { $0.digits.reduce(0, +) > 0 }.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp8zmkraxo.swift:13:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n     \
    \                   ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012555
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter\
    \ { $0.digits.reduce(0, +) > 0 }.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp8zmkraxo.swift:13:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n     \
    \                   ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012555
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter\
    \ { $0.digits.reduce(0, +) > 0 }.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp8zmkraxo.swift:13:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n     \
    \                   ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012555
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for i in arr {\n        if i < 0 {\n            if i.digits.reduce(0, +)\
    \ > 0 {\n                count += 1\n            }\n        } else {\n       \
    \     if i.digits.reduce(0, +) > 0 {\n                count += 1\n           \
    \ }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpkdc2zabz.swift:16:18: error: value of type 'Int' has no member\
    \ 'digits'\n            if i.digits.reduce(0, +) > 0 {\n               ~ ^~~~~~\n\
    /tmp/tmpkdc2zabz.swift:20:18: error: value of type 'Int' has no member 'digits'\n\
    \            if i.digits.reduce(0, +) > 0 {\n               ~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012555
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter({$0.digits.reduce(0,\
    \ +) > 0}).count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(count_nums(arr: []\
    \ as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp_9fmhjyc.swift:13:27: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter({$0.digits.reduce(0, +) > 0}).count\n      \
    \                 ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012555
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter({\
    \ $0 != 0 && $0.digits.reduce(0, +) > 0 }).count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpjgn4skfm.swift:13:39: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter({ $0 != 0 && $0.digits.reduce(0, +) > 0 }).count\n\
    \                                   ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012555
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter\
    \ { $0.digits.reduce(0, +) > 0 }.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp8zmkraxo.swift:13:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n     \
    \                   ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012555
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter\
    \ { $0.digits.reduce(0, +) > 0 }.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp8zmkraxo.swift:13:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n     \
    \                   ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012555
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter\
    \ { $0.digits.reduce(0, +) > 0 }.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp8zmkraxo.swift:13:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n     \
    \                   ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012555
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter({\
    \ (num) -> Bool in\n        return num.digits.reduce(0, +) > 0\n    }).count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp38_nrck5.swift:14:20: error: value of type 'Int' has no member\
    \ 'digits'\n        return num.digits.reduce(0, +) > 0\n               ~~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012555
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter\
    \ { $0.digits.reduce(0, +) > 0 }.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp8zmkraxo.swift:13:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n     \
    \                   ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012555
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter\
    \ { $0.digits.reduce(0, +) > 0 }.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp8zmkraxo.swift:13:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n     \
    \                   ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012555
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter({\n\
    \        $0 != 0 && $0.digits.reduce(0, +) > 0\n    }).count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpd847m1kl.swift:14:23: error: value of type 'Int' has no member\
    \ 'digits'\n        $0 != 0 && $0.digits.reduce(0, +) > 0\n                  \
    \ ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012555
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter\
    \ { $0.digits.reduce(0, +) > 0 }.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp8zmkraxo.swift:13:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n     \
    \                   ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012555
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter\
    \ { $0.digits.reduce(0, +) > 0 }.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp8zmkraxo.swift:13:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n     \
    \                   ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012555
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for num in arr {\n        if num < 0 {\n            if num % 10 != 0 {\n\
    \                count += 1\n            }\n        } else {\n            if num\
    \ % 10 != 0 {\n                count += 1\n            }\n        }\n    }\n \
    \   return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(count_nums(arr: []\
    \ as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: Exception
  stderr: 'tmp0q1jry97/tmp0q1jry97.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7f40237c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7f3ff2eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7f3ff2e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7f3ff2d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0q1jry97                        0x000055ab2da6d5a0 <unavailable> + 5536

    5    libc.so.6                          0x00002b7f40423460 __libc_start_main +
    245

    6    tmp0q1jry97                        0x000055ab2da6d169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660012555
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter({\
    \ $0 != 0 }).filter({ $0.digits.reduce(0, +) > 0 }).count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp0z8i3j94.swift:13:48: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter({ $0 != 0 }).filter({ $0.digits.reduce(0, +)\
    \ > 0 }).count\n                                            ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012555
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter\
    \ { $0.digits.reduce(0, +) > 0 }.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp8zmkraxo.swift:13:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n     \
    \                   ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012555
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter\
    \ { $0.digits.reduce(0, +) > 0 }.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp8zmkraxo.swift:13:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n     \
    \                   ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012555
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter\
    \ { $0.digits.reduce(0, +) > 0 }.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp8zmkraxo.swift:13:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n     \
    \                   ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012555
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter\
    \ { $0.digits.reduce(0, +) > 0 }.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp8zmkraxo.swift:13:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n     \
    \                   ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012555
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for num in arr {\n        if sum_digits(num: num) > 0 {\n            count\
    \ += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1,\
    \ -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpjcu0x_yh.swift:15:12: error: cannot find 'sum_digits' in scope\n\
    \        if sum_digits(num: num) > 0 {\n           ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660012555
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter\
    \ { $0.digits.reduce(0, +) > 0 }.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp8zmkraxo.swift:13:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n     \
    \                   ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012555
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter\
    \ {\n        $0.digits.reduce(0, +) > 0\n    }.count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpng06ns4v.swift:14:12: error: value of type 'Int' has no member\
    \ 'digits'\n        $0.digits.reduce(0, +) > 0\n        ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012555
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter({\
    \ $0 != 0 }).filter({ $0.digitsSum() > 0 }).count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpgmp37wje.swift:13:48: error: value of type 'Int' has no member\
    \ 'digitsSum'\n    return arr.filter({ $0 != 0 }).filter({ $0.digitsSum() > 0\
    \ }).count\n                                            ~~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660012555
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for i in arr {\n        if i < 0 {\n            if i % 10 == 0 {\n      \
    \          count += 1\n            }\n        } else {\n            var sum =\
    \ 0\n            var j = i\n            while j > 0 {\n                sum +=\
    \ j % 10\n                j /= 10\n            }\n            if sum > 0 {\n \
    \               count += 1\n            }\n        }\n    }\n    return count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmptgb_2xkf/tmptgb_2xkf.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b99f2f3fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b99f2c36b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b99f2c36988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b99f2c357b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptgb_2xkf                        0x00005578e144695a <unavailable> + 6490

    5    libc.so.6                          0x00002b99f312b460 __libc_start_main +
    245

    6    tmptgb_2xkf                        0x00005578e1446169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660012555
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.reduce(0)\
    \ {\n        $0 + ($1.digits.reduce(0, +) > 0 ? 1 : 0)\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpjfdsgp4l.swift:14:18: error: value of type 'Int' has no member\
    \ 'digits'\n        $0 + ($1.digits.reduce(0, +) > 0 ? 1 : 0)\n              ~~\
    \ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012577
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter\
    \ { $0.digits.reduce(0, +) > 0 }.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp8zmkraxo.swift:13:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n     \
    \                   ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012555
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter({\
    \ $0.digits.reduce(0, +) > 0 }).count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpdsu9ua4u.swift:13:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter({ $0.digits.reduce(0, +) > 0 }).count\n    \
    \                    ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012555
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter({\
    \ $0 != 0 }).filter({ abs($0) % 10 != 0 }).count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmpsaahzapc/tmpsaahzapc.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9bde920c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9bde617b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9bde617988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9bde6167b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsaahzapc                        0x000055f154d42640 <unavailable> + 5696

    5    libc.so.6                          0x00002b9bdeb0c460 __libc_start_main +
    245

    6    tmpsaahzapc                        0x000055f154d42209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660012555
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter\
    \ { $0.digits.reduce(0, +) > 0 }.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp8zmkraxo.swift:13:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n     \
    \                   ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012555
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter\
    \ { $0.digits.reduce(0, +) > 0 }.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp8zmkraxo.swift:13:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n     \
    \                   ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012555
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter\
    \ { $0.digits.reduce(0, +) > 0 }.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp8zmkraxo.swift:13:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n     \
    \                   ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012555
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter({\
    \ $0.digits.reduce(0, +) > 0 }).count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpdsu9ua4u.swift:13:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter({ $0.digits.reduce(0, +) > 0 }).count\n    \
    \                    ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012555
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter({\
    \ $0 != 0 }).filter({ $0.digits.reduce(0, +) > 0 }).count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp0z8i3j94.swift:13:48: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter({ $0 != 0 }).filter({ $0.digits.reduce(0, +)\
    \ > 0 }).count\n                                            ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012555
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter({\
    \ $0 != 0 }).reduce(0, { $0 + $1.digits.reduce(0, +) })\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpcuk2zpz4.swift:13:56: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter({ $0 != 0 }).reduce(0, { $0 + $1.digits.reduce(0,\
    \ +) })\n                                                    ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012555
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter\
    \ {\n        $0.digits.reduce(0, +) > 0\n    }.count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpng06ns4v.swift:14:12: error: value of type 'Int' has no member\
    \ 'digits'\n        $0.digits.reduce(0, +) > 0\n        ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012555
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter({\n\
    \        $0.digits.reduce(0, +) > 0\n    }).count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpkaorvezh.swift:14:12: error: value of type 'Int' has no member\
    \ 'digits'\n        $0.digits.reduce(0, +) > 0\n        ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012555
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter\
    \ { $0.digits.reduce(0, +) > 0 }.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp8zmkraxo.swift:13:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n     \
    \                   ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012555
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for num in arr {\n        var sum = 0\n        var num = num\n        if\
    \ num < 0 {\n            num = -num\n        }\n        while num > 0 {\n    \
    \        sum += num % 10\n            num /= 10\n        }\n        if sum > 0\
    \ {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmpw5ifjy25/tmpw5ifjy25.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae787ee0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae787bd7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae787bd7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae787bd67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpw5ifjy25                        0x0000559a8e53b5a0 <unavailable> + 5536

    5    libc.so.6                          0x00002ae7880cc460 __libc_start_main +
    245

    6    tmpw5ifjy25                        0x0000559a8e53b169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660012555
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter\
    \ { $0.digits.reduce(0, +) > 0 }.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp8zmkraxo.swift:13:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n     \
    \                   ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012555
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter\
    \ { $0.digits.reduce(0, +) > 0 }.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp8zmkraxo.swift:13:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n     \
    \                   ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012555
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter\
    \ { $0.digits.reduce(0, +) > 0 }.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp8zmkraxo.swift:13:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n     \
    \                   ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012555
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter\
    \ {\n        $0.digits.reduce(0, +) > 0\n    }.count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpng06ns4v.swift:14:12: error: value of type 'Int' has no member\
    \ 'digits'\n        $0.digits.reduce(0, +) > 0\n        ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012555
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter\
    \ { $0.digits.reduce(0, +) > 0 }.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp8zmkraxo.swift:13:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n     \
    \                   ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012555
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter\
    \ { $0.digits.reduce(0, +) > 0 }.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp8zmkraxo.swift:13:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n     \
    \                   ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012555
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter\
    \ { $0.digits.reduce(0, +) > 0 }.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp8zmkraxo.swift:13:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n     \
    \                   ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012555
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter\
    \ { $0.digits.reduce(0, +) > 0 }.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp8zmkraxo.swift:13:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n     \
    \                   ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012555
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter\
    \ { $0.digits.reduce(0, +) > 0 }.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp8zmkraxo.swift:13:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n     \
    \                   ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012555
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for num in arr {\n        if num < 0 {\n            if num % 10 != 0 {\n\
    \                count += 1\n            }\n        } else {\n            if num\
    \ % 10 != 0 {\n                count += 1\n            }\n        }\n    }\n \
    \   return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(count_nums(arr: []\
    \ as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: Exception
  stderr: 'tmp0q1jry97/tmp0q1jry97.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7f40237c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7f3ff2eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7f3ff2e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7f3ff2d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0q1jry97                        0x000055ab2da6d5a0 <unavailable> + 5536

    5    libc.so.6                          0x00002b7f40423460 __libc_start_main +
    245

    6    tmp0q1jry97                        0x000055ab2da6d169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660012555
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter\
    \ { $0.digits.reduce(0, +) > 0 }.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp8zmkraxo.swift:13:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n     \
    \                   ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012555
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter\
    \ { $0.digits.reduce(0, +) > 0 }.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp8zmkraxo.swift:13:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n     \
    \                   ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012555
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter\
    \ { $0.digits.reduce(0, +) > 0 }.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp8zmkraxo.swift:13:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n     \
    \                   ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012555
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter\
    \ { $0.digits.reduce(0, +) > 0 }.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp8zmkraxo.swift:13:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n     \
    \                   ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012555
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter\
    \ { $0.digits.reduce(0, +) > 0 }.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp8zmkraxo.swift:13:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n     \
    \                   ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012555
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter\
    \ { $0.sum_of_digits > 0 }.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(count_nums(arr:\
    \ [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp0_lczzm1.swift:13:28: error: value of type 'Int' has no member\
    \ 'sum_of_digits'\n    return arr.filter { $0.sum_of_digits > 0 }.count\n    \
    \                    ~~ ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660012555
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter\
    \ { $0.digits.reduce(0, +) > 0 }.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp8zmkraxo.swift:13:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n     \
    \                   ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012555
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter({\
    \ $0 != 0 }).filter({ $0.digits.reduce(0, +) > 0 }).count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp0z8i3j94.swift:13:48: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter({ $0 != 0 }).filter({ $0.digits.reduce(0, +)\
    \ > 0 }).count\n                                            ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012555
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter\
    \ { $0.digits.reduce(0, +) > 0 }.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp8zmkraxo.swift:13:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n     \
    \                   ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012555
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for num in arr {\n        if num < 0 {\n            count += 1\n        }\n\
    \    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(count_nums(arr:\
    \ [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: Exception
  stderr: 'tmpqi575reo/tmpqi575reo.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b78e0a8ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b78e0781b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b78e0781988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b78e07807b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqi575reo                        0x000056098419c510 <unavailable> + 5392

    5    libc.so.6                          0x00002b78e0c76460 __libc_start_main +
    245

    6    tmpqi575reo                        0x000056098419c0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660012555
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter\
    \ { $0.digits.reduce(0, +) > 0 }.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp8zmkraxo.swift:13:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n     \
    \                   ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012555
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter\
    \ {\n        $0 != 0 && $0.digits.reduce(0, +) > 0\n    }.count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpi80thfv9.swift:14:23: error: value of type 'Int' has no member\
    \ 'digits'\n        $0 != 0 && $0.digits.reduce(0, +) > 0\n                  \
    \ ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012555
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter\
    \ { $0.digits.reduce(0, +) > 0 }.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp8zmkraxo.swift:13:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n     \
    \                   ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012555
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter({\n\
    \        var sum = 0\n        var num = $0\n        if num < 0 {\n           \
    \ num = -num\n        }\n        while num > 0 {\n            sum += num % 10\n\
    \            num /= 10\n        }\n        return sum > 0\n    }).count\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmp_yy3kolt/tmp_yy3kolt.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab026dddc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab026ad4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab026ad4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab026ad37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_yy3kolt                        0x000055e104e4d560 <unavailable> + 5472

    5    libc.so.6                          0x00002ab026fc9460 __libc_start_main +
    245

    6    tmp_yy3kolt                        0x000055e104e4d129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660012555
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter({$0.digits.reduce(0,\
    \ +) > 0}).count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(count_nums(arr: []\
    \ as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp_9fmhjyc.swift:13:27: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter({$0.digits.reduce(0, +) > 0}).count\n      \
    \                 ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012555
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter\
    \ { $0.digits.reduce(0, +) > 0 }.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp8zmkraxo.swift:13:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n     \
    \                   ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012555
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter\
    \ { $0.digits.reduce(0, +) > 0 }.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp8zmkraxo.swift:13:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n     \
    \                   ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012555
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter\
    \ { $0.digits.reduce(0, +) > 0 }.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp8zmkraxo.swift:13:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n     \
    \                   ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012555
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter\
    \ { $0.digits.reduce(0, +) > 0 }.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp8zmkraxo.swift:13:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n     \
    \                   ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012555
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter\
    \ { $0.digits.reduce(0, +) > 0 }.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp8zmkraxo.swift:13:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n     \
    \                   ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012555
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter\
    \ { $0.digits.reduce(0, +) > 0 }.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp8zmkraxo.swift:13:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n     \
    \                   ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012555
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter\
    \ { $0.digits.reduce(0, +) > 0 }.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp8zmkraxo.swift:13:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n     \
    \                   ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012555
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter\
    \ { $0.digits.reduce(0, +) > 0 }.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp8zmkraxo.swift:13:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n     \
    \                   ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012555
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter\
    \ { $0.digits.reduce(0, +) > 0 }.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp8zmkraxo.swift:13:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n     \
    \                   ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012555
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter\
    \ { $0.digits.reduce(0, +) > 0 }.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp8zmkraxo.swift:13:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n     \
    \                   ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012555
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter\
    \ { $0.digits.reduce(0, +) > 0 }.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp8zmkraxo.swift:13:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n     \
    \                   ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012555
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter({$0.digits.reduce(0,\
    \ +) > 0}).count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(count_nums(arr: []\
    \ as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp_9fmhjyc.swift:13:27: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter({$0.digits.reduce(0, +) > 0}).count\n      \
    \                 ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012555
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter({$0.digits.reduce(0,\
    \ +) > 0}).count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(count_nums(arr: []\
    \ as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp_9fmhjyc.swift:13:27: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter({$0.digits.reduce(0, +) > 0}).count\n      \
    \                 ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012555
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter({\
    \ $0 != 0 }).filter({ $0.digits.reduce(0, +) > 0 }).count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp0z8i3j94.swift:13:48: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter({ $0 != 0 }).filter({ $0.digits.reduce(0, +)\
    \ > 0 }).count\n                                            ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012555
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter\
    \ { $0.digits.reduce(0, +) > 0 }.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp8zmkraxo.swift:13:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n     \
    \                   ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012555
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter({$0.digits.reduce(0,\
    \ +) > 0}).count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(count_nums(arr: []\
    \ as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp_9fmhjyc.swift:13:27: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter({$0.digits.reduce(0, +) > 0}).count\n      \
    \                 ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012555
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter\
    \ { $0.signedDigits.reduce(0, +) > 0 }.count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1,\
    \ -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmph_khl322.swift:13:28: error: value of type 'Int' has no member\
    \ 'signedDigits'\n    return arr.filter { $0.signedDigits.reduce(0, +) > 0 }.count\n\
    \                        ~~ ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660012555
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter\
    \ { $0.digits.reduce(0, +) > 0 }.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp8zmkraxo.swift:13:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n     \
    \                   ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012555
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter\
    \ { $0.digits.reduce(0, +) > 0 }.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp8zmkraxo.swift:13:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n     \
    \                   ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012555
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter\
    \ { $0.digits.reduce(0, +) > 0 }.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp8zmkraxo.swift:13:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n     \
    \                   ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012555
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter({$0.digits.reduce(0,\
    \ +) > 0}).count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(count_nums(arr: []\
    \ as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp_9fmhjyc.swift:13:27: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter({$0.digits.reduce(0, +) > 0}).count\n      \
    \                 ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012555
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter\
    \ { $0.digits.reduce(0, +) > 0 }.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp8zmkraxo.swift:13:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n     \
    \                   ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012555
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter\
    \ { $0.digits.reduce(0, +) > 0 }.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp8zmkraxo.swift:13:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n     \
    \                   ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012555
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter\
    \ { $0.digits.reduce(0, +) > 0 }.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp8zmkraxo.swift:13:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n     \
    \                   ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012555
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter\
    \ { $0.digits.reduce(0, +) > 0 }.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp8zmkraxo.swift:13:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n     \
    \                   ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012555
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter({\
    \ $0 != 0 }).filter({ $0.digits.reduce(0, +) > 0 }).count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp0z8i3j94.swift:13:48: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter({ $0 != 0 }).filter({ $0.digits.reduce(0, +)\
    \ > 0 }).count\n                                            ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012555
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter\
    \ { $0.digits.reduce(0, +) > 0 }.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp8zmkraxo.swift:13:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n     \
    \                   ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012555
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter\
    \ { $0.digits.reduce(0, +) > 0 }.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp8zmkraxo.swift:13:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n     \
    \                   ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012555
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter\
    \ { $0.digits.reduce(0, +) > 0 }.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp8zmkraxo.swift:13:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n     \
    \                   ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012555
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter\
    \ { $0.digits.reduce(0, +) > 0 }.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp8zmkraxo.swift:13:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n     \
    \                   ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012555
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter\
    \ { $0.digits.reduce(0, +) > 0 }.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp8zmkraxo.swift:13:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n     \
    \                   ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012555
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter\
    \ { $0.digits.reduce(0, +) > 0 }.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp8zmkraxo.swift:13:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n     \
    \                   ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012555
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter\
    \ { $0.digits.reduce(0, +) > 0 }.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp8zmkraxo.swift:13:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n     \
    \                   ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012555
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter({\
    \ $0.digits.reduce(0, +) > 0 }).count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpdsu9ua4u.swift:13:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter({ $0.digits.reduce(0, +) > 0 }).count\n    \
    \                    ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012555
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter\
    \ { $0.digits.reduce(0, +) > 0 }.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp8zmkraxo.swift:13:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n     \
    \                   ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012555
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter\
    \ { $0.digits.reduce(0, +) > 0 }.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp8zmkraxo.swift:13:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n     \
    \                   ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012555
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter\
    \ { (num) -> Bool in\n        return num.digits.reduce(0, +) > 0\n    }.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp63x0ob2h.swift:14:20: error: value of type 'Int' has no member\
    \ 'digits'\n        return num.digits.reduce(0, +) > 0\n               ~~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012555
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter\
    \ { $0.digits.reduce(0, +) > 0 }.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp8zmkraxo.swift:13:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n     \
    \                   ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012555
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter\
    \ { $0.digits.reduce(0, +) > 0 }.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp8zmkraxo.swift:13:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n     \
    \                   ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012555
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter\
    \ { $0.digits.reduce(0, +) > 0 }.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp8zmkraxo.swift:13:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n     \
    \                   ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012555
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter\
    \ { $0.digits.reduce(0, +) > 0 }.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp8zmkraxo.swift:13:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n     \
    \                   ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012555
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter({\
    \ $0.digits.reduce(0, +) > 0 }).count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpdsu9ua4u.swift:13:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter({ $0.digits.reduce(0, +) > 0 }).count\n    \
    \                    ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012555
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter({\
    \ $0.digits.reduce(0, +) > 0 }).count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpdsu9ua4u.swift:13:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter({ $0.digits.reduce(0, +) > 0 }).count\n    \
    \                    ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012555
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter\
    \ { $0.digits.reduce(0, +) > 0 }.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp8zmkraxo.swift:13:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n     \
    \                   ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012555
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter\
    \ { $0.digits.reduce(0, +) > 0 }.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp8zmkraxo.swift:13:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n     \
    \                   ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012555
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter\
    \ { $0.digits.reduce(0, +) > 0 }.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp8zmkraxo.swift:13:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n     \
    \                   ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012555
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter\
    \ {\n        $0.digits.reduce(0, +) > 0\n    }.count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpng06ns4v.swift:14:12: error: value of type 'Int' has no member\
    \ 'digits'\n        $0.digits.reduce(0, +) > 0\n        ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012555
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter\
    \ { $0.digits.reduce(0, +) > 0 }.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp8zmkraxo.swift:13:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n     \
    \                   ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012555
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter\
    \ { $0 != 0 }.reduce(0) { $0 + abs($1) }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmpb7405r0_/tmpb7405r0_.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac2bcd22c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac2bca19b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac2bca19988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac2bca187b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpb7405r0_                        0x000055a9f21925d0 <unavailable> + 5584

    5    libc.so.6                          0x00002ac2bcf0e460 __libc_start_main +
    245

    6    tmpb7405r0_                        0x000055a9f2192199 <unavailable> + 4505

    '
  stdout: ''
  timestamp: 1660012555
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter\
    \ { $0.digits.reduce(0, +) > 0 }.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp8zmkraxo.swift:13:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n     \
    \                   ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012555
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter({\
    \ $0.digits.reduce(0, +) > 0 }).count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpdsu9ua4u.swift:13:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter({ $0.digits.reduce(0, +) > 0 }).count\n    \
    \                    ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012555
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.reduce(0)\
    \ { (sum, num) in\n        return sum + (abs(num) % 10 + abs(num) / 10) > 0 ?\
    \ 1 : 0\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(count_nums(arr: []\
    \ as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: Exception
  stderr: 'tmp1zvcibr7/tmp1zvcibr7.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab768d23c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab768a1ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab768a1a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab768a197b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1zvcibr7                        0x000055a090d865a0 <unavailable> + 5536

    5    libc.so.6                          0x00002ab768f0f460 __libc_start_main +
    245

    6    tmp1zvcibr7                        0x000055a090d86169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660012555
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter\
    \ { $0.digits.reduce(0, +) > 0 }.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp8zmkraxo.swift:13:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n     \
    \                   ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012555
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter\
    \ { $0.digits.reduce(0, +) > 0 }.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp8zmkraxo.swift:13:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n     \
    \                   ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012555
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter\
    \ { $0.sum_of_digits > 0 }.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(count_nums(arr:\
    \ [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp0_lczzm1.swift:13:28: error: value of type 'Int' has no member\
    \ 'sum_of_digits'\n    return arr.filter { $0.sum_of_digits > 0 }.count\n    \
    \                    ~~ ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660012555
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter\
    \ { $0.digits.reduce(0, +) > 0 }.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp8zmkraxo.swift:13:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n     \
    \                   ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012555
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter\
    \ { $0.digits.reduce(0, +) > 0 }.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp8zmkraxo.swift:13:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n     \
    \                   ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012555
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter\
    \ {\n        var sum = 0\n        var num = $0\n        while num != 0 {\n   \
    \         sum += abs(num % 10)\n            num /= 10\n        }\n        return\
    \ sum > 0\n    }.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(count_nums(arr:\
    \ [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: Exception
  stderr: 'tmpxki6jorc/tmpxki6jorc.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aebef31ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aebef011b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aebef011988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aebef0107b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxki6jorc                        0x00005635d667c640 <unavailable> + 5696

    5    libc.so.6                          0x00002aebef506460 __libc_start_main +
    245

    6    tmpxki6jorc                        0x00005635d667c209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660012555
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter\
    \ { $0.digits.reduce(0, +) > 0 }.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp8zmkraxo.swift:13:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n     \
    \                   ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012555
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter\
    \ { $0.digits.reduce(0, +) > 0 }.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp8zmkraxo.swift:13:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n     \
    \                   ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012555
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter\
    \ { $0.digits.reduce(0, +) > 0 }.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp8zmkraxo.swift:13:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n     \
    \                   ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012555
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter\
    \ { $0.digits.reduce(0, +) > 0 }.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp8zmkraxo.swift:13:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n     \
    \                   ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012555
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter\
    \ { $0.digits.reduce(0, +) > 0 }.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp8zmkraxo.swift:13:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n     \
    \                   ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012555
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.reduce(0)\
    \ {\n        (acc, num) in\n        let digits = num.digits\n        let sum =\
    \ digits.reduce(0) { $0 + $1 }\n        return acc + (sum > 0 ? 1 : 0)\n    }\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpsoymuwz_.swift:15:26: error: value of type 'Int' has no member\
    \ 'digits'\n        let digits = num.digits\n                     ~~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012555
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter({\
    \ (num) -> Bool in\n        return num.digits.reduce(0, +) > 0\n    }).count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp38_nrck5.swift:14:20: error: value of type 'Int' has no member\
    \ 'digits'\n        return num.digits.reduce(0, +) > 0\n               ~~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012555
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter({\
    \ $0.digits.reduce(0, +) > 0 }).count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpdsu9ua4u.swift:13:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter({ $0.digits.reduce(0, +) > 0 }).count\n    \
    \                    ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012555
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter\
    \ { $0.digits.reduce(0, +) > 0 }.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp8zmkraxo.swift:13:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n     \
    \                   ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012555
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for num in arr {\n        if num < 0 {\n            if num % 10 != 0 {\n\
    \                count += 1\n            }\n        } else {\n            var\
    \ sum = 0\n            var n = num\n            while n > 0 {\n              \
    \  sum += n % 10\n                n /= 10\n            }\n            if sum >\
    \ 0 {\n                count += 1\n            }\n        }\n    }\n    return\
    \ count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(count_nums(arr: [] as [Int])\
    \ == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1,\
    \ 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5]) ==\
    \ 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: Exception
  stderr: 'tmpdo2ddhay/tmpdo2ddhay.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4db885ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4db8555b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4db8555988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4db85547b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdo2ddhay                        0x0000559c7fff05a0 <unavailable> + 5536

    5    libc.so.6                          0x00002b4db8a4a460 __libc_start_main +
    245

    6    tmpdo2ddhay                        0x0000559c7fff0169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660012555
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter\
    \ { $0.digits.reduce(0, +) > 0 }.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp8zmkraxo.swift:13:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n     \
    \                   ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012555
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter({\
    \ $0.digits.reduce(0, +) > 0 }).count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpdsu9ua4u.swift:13:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter({ $0.digits.reduce(0, +) > 0 }).count\n    \
    \                    ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012555
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter\
    \ { $0.digits.reduce(0, +) > 0 }.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp8zmkraxo.swift:13:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n     \
    \                   ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012555
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter\
    \ { $0.digits.reduce(0, +) > 0 }.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp8zmkraxo.swift:13:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n     \
    \                   ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012555
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter\
    \ { $0.digits.reduce(0, +) > 0 }.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp8zmkraxo.swift:13:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n     \
    \                   ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012555
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter({\
    \ $0 != 0 }).filter({ $0.digits.reduce(0, +) > 0 }).count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp0z8i3j94.swift:13:48: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter({ $0 != 0 }).filter({ $0.digits.reduce(0, +)\
    \ > 0 }).count\n                                            ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012555
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter\
    \ { $0.digits.reduce(0, +) > 0 }.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp8zmkraxo.swift:13:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n     \
    \                   ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012555
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter\
    \ { $0.digits.reduce(0, +) > 0 }.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp8zmkraxo.swift:13:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n     \
    \                   ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012555
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for num in arr {\n        if sum_digits(num: num) > 0 {\n            count\
    \ += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1,\
    \ -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpjcu0x_yh.swift:15:12: error: cannot find 'sum_digits' in scope\n\
    \        if sum_digits(num: num) > 0 {\n           ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660012555
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter\
    \ { $0.digits.reduce(0, +) > 0 }.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp8zmkraxo.swift:13:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n     \
    \                   ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012555
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter\
    \ { $0.digits.reduce(0, +) > 0 }.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp8zmkraxo.swift:13:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n     \
    \                   ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012555
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter\
    \ { sum_digits($0) > 0 }.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(count_nums(arr:\
    \ [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpfuq6cgha.swift:13:25: error: cannot find 'sum_digits' in scope\n\
    \    return arr.filter { sum_digits($0) > 0 }.count\n                        ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660012555
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter\
    \ { $0.digits.reduce(0, +) > 0 }.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp8zmkraxo.swift:13:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n     \
    \                   ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012555
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter\
    \ { $0.digits.reduce(0, +) > 0 }.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp8zmkraxo.swift:13:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n     \
    \                   ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012555
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter\
    \ { $0 != 0 }.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(count_nums(arr: []\
    \ as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: Exception
  stderr: 'tmpqkyzfvnz/tmpqkyzfvnz.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afbb8d1cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afbb8a13b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afbb8a13988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afbb8a127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqkyzfvnz                        0x000055ed65f0f4c0 <unavailable> + 5312

    5    libc.so.6                          0x00002afbb8f08460 __libc_start_main +
    245

    6    tmpqkyzfvnz                        0x000055ed65f0f089 <unavailable> + 4233

    '
  stdout: ''
  timestamp: 1660012555
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter\
    \ { $0.digits.reduce(0, +) > 0 }.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp8zmkraxo.swift:13:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n     \
    \                   ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012555
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter\
    \ { $0.digits.reduce(0, +) > 0 }.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp8zmkraxo.swift:13:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n     \
    \                   ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012555
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter\
    \ { $0.digits.reduce(0, +) > 0 }.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp8zmkraxo.swift:13:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n     \
    \                   ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012555
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter\
    \ { $0.digits.reduce(0, +) > 0 }.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp8zmkraxo.swift:13:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n     \
    \                   ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012555
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter\
    \ { $0.digits.reduce(0, +) > 0 }.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp8zmkraxo.swift:13:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n     \
    \                   ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012555
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for num in arr {\n        if num < 0 {\n            if num.digits.reduce(0,\
    \ +) > 0 {\n                count += 1\n            }\n        } else {\n    \
    \        if num.digits.reduce(0, +) > 0 {\n                count += 1\n      \
    \      }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1,\
    \ -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpggo98wo0.swift:16:20: error: value of type 'Int' has no member\
    \ 'digits'\n            if num.digits.reduce(0, +) > 0 {\n               ~~~ ^~~~~~\n\
    /tmp/tmpggo98wo0.swift:20:20: error: value of type 'Int' has no member 'digits'\n\
    \            if num.digits.reduce(0, +) > 0 {\n               ~~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012555
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter({\
    \ $0.digits.reduce(0, +) > 0 }).count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpdsu9ua4u.swift:13:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter({ $0.digits.reduce(0, +) > 0 }).count\n    \
    \                    ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012555
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter\
    \ { $0.digits.reduce(0, +) > 0 }.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp8zmkraxo.swift:13:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n     \
    \                   ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012555
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for num in arr {\n        var sum = 0\n        var n = num\n        if n\
    \ < 0 {\n            n = -n\n        }\n        while n > 0 {\n            sum\
    \ += n % 10\n            n /= 10\n        }\n        if sum > 0 {\n          \
    \  count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmp6juu0jis/tmp6juu0jis.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2001577c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b200126eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b200126e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b200126d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6juu0jis                        0x0000556d92e545a0 <unavailable> + 5536

    5    libc.so.6                          0x00002b2001763460 __libc_start_main +
    245

    6    tmp6juu0jis                        0x0000556d92e54169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660012555
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter\
    \ {\n        $0.digits.reduce(0, +) > 0\n    }.count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpng06ns4v.swift:14:12: error: value of type 'Int' has no member\
    \ 'digits'\n        $0.digits.reduce(0, +) > 0\n        ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012555
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for num in arr {\n        if sum_digits(num: num) > 0 {\n            count\
    \ += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1,\
    \ -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpjcu0x_yh.swift:15:12: error: cannot find 'sum_digits' in scope\n\
    \        if sum_digits(num: num) > 0 {\n           ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660012555
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter\
    \ { $0 != 0 }.reduce(0) { $0 + abs($1) }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmpb7405r0_/tmpb7405r0_.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac2bcd22c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac2bca19b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac2bca19988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac2bca187b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpb7405r0_                        0x000055a9f21925d0 <unavailable> + 5584

    5    libc.so.6                          0x00002ac2bcf0e460 __libc_start_main +
    245

    6    tmpb7405r0_                        0x000055a9f2192199 <unavailable> + 4505

    '
  stdout: ''
  timestamp: 1660012555
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter\
    \ {\n        $0.digits.reduce(0, +) > 0\n    }.count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpng06ns4v.swift:14:12: error: value of type 'Int' has no member\
    \ 'digits'\n        $0.digits.reduce(0, +) > 0\n        ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012555
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter\
    \ {\n        $0.digits.reduce(0, +) > 0\n    }.count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpng06ns4v.swift:14:12: error: value of type 'Int' has no member\
    \ 'digits'\n        $0.digits.reduce(0, +) > 0\n        ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012555
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for num in arr {\n        if num < 0 {\n            count += 1\n        }\n\
    \    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(count_nums(arr:\
    \ [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: Exception
  stderr: 'tmpqi575reo/tmpqi575reo.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b78e0a8ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b78e0781b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b78e0781988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b78e07807b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqi575reo                        0x000056098419c510 <unavailable> + 5392

    5    libc.so.6                          0x00002b78e0c76460 __libc_start_main +
    245

    6    tmpqi575reo                        0x000056098419c0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660012555
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter\
    \ { $0.digits.reduce(0, +) > 0 }.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp8zmkraxo.swift:13:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n     \
    \                   ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012555
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter\
    \ { $0.digits.reduce(0, +) > 0 }.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp8zmkraxo.swift:13:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n     \
    \                   ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012555
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter\
    \ { $0.sum_digits() > 0 }.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(count_nums(arr:\
    \ [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpklxvox37.swift:13:28: error: value of type 'Int' has no member\
    \ 'sum_digits'\n    return arr.filter { $0.sum_digits() > 0 }.count\n        \
    \                ~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660012555
