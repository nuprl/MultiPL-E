language: swift
name: HumanEval_100_make_a_pile
results:
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var current = n\n    while current\
    \ > 0 {\n        result.append(current)\n        current = current % 2 == 0 ?\
    \ current + 1 : current + 2\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4)\
    \ == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659824434
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var next = n\n    while next > 0 {\n\
    \        result.append(next)\n        next = next % 2 == 0 ? next + 1 : next +\
    \ 2\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(make_a_pile(n:\
    \ 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659824434
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var current = n\n    while current\
    \ > 0 {\n        result.append(current)\n        current = current % 2 == 0 ?\
    \ current + 1 : current + 2\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4)\
    \ == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659824434
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var i = n\n    while i > 0 {\n   \
    \     result.append(i)\n        i = i % 2 == 0 ? i + 1 : i + 2\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(make_a_pile(n: 3) ==\
    \ [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659824434
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var i = n\n    while i > 0 {\n   \
    \     result.append(i)\n        i = i % 2 == 0 ? i + 1 : i + 2\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(make_a_pile(n: 3) ==\
    \ [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659824434
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var num = n\n    while num > 0 {\n\
    \        result.append(num)\n        num = num % 2 == 0 ? num + 1 : num + 2\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(make_a_pile(n:\
    \ 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659824434
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var current = n\n    while current\
    \ > 0 {\n        result.append(current)\n        current = current % 2 == 0 ?\
    \ current + 1 : current + 2\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4)\
    \ == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659824434
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [n]\n    var next = n\n    while next > 1 {\n \
    \       next = next % 2 == 0 ? next / 2 : (next + 1) / 2\n        result.append(next)\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(make_a_pile(n:\
    \ 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Exception
  stderr: 'tmp2vvrknwg/tmp2vvrknwg.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b07bd2c8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b07bcfbfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b07bcfbf988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b07bcfbe7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2vvrknwg                        0x000055d31c04d472 <unavailable> + 5234

    5    libc.so.6                          0x00002b07bd4b4460 __libc_start_main +
    245

    6    tmp2vvrknwg                        0x000055d31c04d0b9 <unavailable> + 4281

    '
  stdout: ''
  timestamp: 1659824429
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var i = n\n    while i > 0 {\n   \
    \     result.append(i)\n        i = i % 2 == 0 ? i + 1 : i + 2\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(make_a_pile(n: 3) ==\
    \ [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659824434
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var current = n\n    while current\
    \ > 0 {\n        result.append(current)\n        current = current % 2 == 0 ?\
    \ current + 1 : current + 2\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4)\
    \ == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659824434
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var i = n\n    while i > 0 {\n   \
    \     result.append(i)\n        i = i % 2 == 0 ? i + 1 : i + 2\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(make_a_pile(n: 3) ==\
    \ [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659824434
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var current = n\n    while current\
    \ > 0 {\n        result.append(current)\n        current = current % 2 == 0 ?\
    \ current + 1 : current + 2\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4)\
    \ == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659824434
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var stones = n\n    while stones >\
    \ 0 {\n        result.append(stones)\n        if stones % 2 == 0 {\n         \
    \   stones -= 1\n        } else {\n            stones -= 2\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(make_a_pile(n: 3)\
    \ == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Exception
  stderr: 'tmpbtcrx1bm/tmpbtcrx1bm.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5fc9771c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5fc9468b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5fc9468988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5fc94677b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbtcrx1bm                        0x0000564fb97554d2 <unavailable> + 5330

    5    libc.so.6                          0x00002b5fc995d460 __libc_start_main +
    245

    6    tmpbtcrx1bm                        0x0000564fb9755119 <unavailable> + 4377

    '
  stdout: ''
  timestamp: 1659824429
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var current = n\n    while current\
    \ > 0 {\n        result.append(current)\n        current = current % 2 == 0 ?\
    \ current + 1 : current + 2\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4)\
    \ == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659824434
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var stones = [Int]()\n    var current = n\n    while current\
    \ > 0 {\n        stones.append(current)\n        if current % 2 == 0 {\n     \
    \       current += 1\n        } else {\n            current += 2\n        }\n\
    \    }\n    return stones\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(make_a_pile(n:\
    \ 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659824434
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var current = n\n    while current\
    \ > 0 {\n        result.append(current)\n        current = current % 2 == 0 ?\
    \ current + 1 : current + 2\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4)\
    \ == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659824434
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var current = n\n    while current\
    \ > 0 {\n        result.append(current)\n        current = current % 2 == 0 ?\
    \ current + 1 : current + 2\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4)\
    \ == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659824434
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [n]\n    var current = n\n    while current > 1\
    \ {\n        if current % 2 == 0 {\n            current = current / 2\n      \
    \  } else {\n            current = (current + 1) / 2\n        }\n        result.append(current)\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(make_a_pile(n:\
    \ 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Exception
  stderr: 'tmpmdv39tx5/tmpmdv39tx5.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1af0a0dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1af0704b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1af0704988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1af07037b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmdv39tx5                        0x00005581fa34f472 <unavailable> + 5234

    5    libc.so.6                          0x00002b1af0bf9460 __libc_start_main +
    245

    6    tmpmdv39tx5                        0x00005581fa34f0b9 <unavailable> + 4281

    '
  stdout: ''
  timestamp: 1659824429
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var i = n\n    while i > 0 {\n   \
    \     result.append(i)\n        i = i % 2 == 0 ? i + 1 : i + 2\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(make_a_pile(n: 3) ==\
    \ [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659824434
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var number = n\n    while number >\
    \ 0 {\n        result.append(number)\n        if number % 2 == 0 {\n         \
    \   number -= 1\n        } else {\n            number -= 2\n        }\n    }\n\
    \    return result.reversed()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(make_a_pile(n:\
    \ 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Exception
  stderr: 'tmp5evwon1d/tmp5evwon1d.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b12d2304c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b12d1ffbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b12d1ffb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b12d1ffa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5evwon1d                        0x0000556fe3133532 <unavailable> + 5426

    5    libc.so.6                          0x00002b12d24f0460 __libc_start_main +
    245

    6    tmp5evwon1d                        0x0000556fe3133179 <unavailable> + 4473

    '
  stdout: ''
  timestamp: 1659824429
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [n]\n    var next = n\n    while next > 1 {\n \
    \       next = next % 2 == 0 ? next / 2 : next / 2 + 1\n        result.append(next)\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(make_a_pile(n:\
    \ 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Exception
  stderr: 'tmpy87ghvfz/tmpy87ghvfz.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5cd713bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5cd6e32b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5cd6e32988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5cd6e317b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpy87ghvfz                        0x000055dd640a6472 <unavailable> + 5234

    5    libc.so.6                          0x00002b5cd7327460 __libc_start_main +
    245

    6    tmpy87ghvfz                        0x000055dd640a60b9 <unavailable> + 4281

    '
  stdout: ''
  timestamp: 1659824429
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [n]\n    var next = n\n    while next > 1 {\n \
    \       next = next % 2 == 0 ? next / 2 : next / 2 + 1\n        result.append(next)\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(make_a_pile(n:\
    \ 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Exception
  stderr: 'tmpy87ghvfz/tmpy87ghvfz.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5cd713bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5cd6e32b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5cd6e32988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5cd6e317b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpy87ghvfz                        0x000055dd640a6472 <unavailable> + 5234

    5    libc.so.6                          0x00002b5cd7327460 __libc_start_main +
    245

    6    tmpy87ghvfz                        0x000055dd640a60b9 <unavailable> + 4281

    '
  stdout: ''
  timestamp: 1659824429
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var pile = [n]\n    var next = n\n    while next > 1 {\n   \
    \     next = next % 2 == 0 ? next / 2 : next / 2 + 1\n        pile.append(next)\n\
    \    }\n    return pile\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(make_a_pile(n:\
    \ 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Exception
  stderr: 'tmplmrz4nsq/tmplmrz4nsq.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aaf48e1ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aaf48b11b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aaf48b11988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aaf48b107b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplmrz4nsq                        0x000055fccf58c472 <unavailable> + 5234

    5    libc.so.6                          0x00002aaf49006460 __libc_start_main +
    245

    6    tmplmrz4nsq                        0x000055fccf58c0b9 <unavailable> + 4281

    '
  stdout: ''
  timestamp: 1659824429
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var i = n\n    while i > 0 {\n   \
    \     result.append(i)\n        i = i % 2 == 0 ? i + 1 : i + 2\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(make_a_pile(n: 3) ==\
    \ [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659824434
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var current = n\n    while current\
    \ > 0 {\n        result.append(current)\n        current = current % 2 == 0 ?\
    \ current + 1 : current + 2\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4)\
    \ == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659824434
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var current = n\n    while current\
    \ > 0 {\n        result.append(current)\n        current = current % 2 == 0 ?\
    \ current + 1 : current + 2\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4)\
    \ == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659824434
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var i = n\n    while i > 0 {\n   \
    \     result.append(i)\n        i = i % 2 == 0 ? i + 1 : i + 2\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(make_a_pile(n: 3) ==\
    \ [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659824434
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var i = n\n    while i > 0 {\n   \
    \     result.append(i)\n        i = i % 2 == 0 ? i + 1 : i + 2\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(make_a_pile(n: 3) ==\
    \ [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659824434
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var current = n\n    while current\
    \ > 0 {\n        result.append(current)\n        current = current.isMultiple(of:\
    \ 2) ? current + 1 : current + 2\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659824434
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var i = n\n    while i > 0 {\n   \
    \     result.append(i)\n        i = i % 2 == 0 ? i + 1 : i + 2\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(make_a_pile(n: 3) ==\
    \ [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659824434
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [n]\n    var next = n\n    while next > 1 {\n \
    \       next = next % 2 == 0 ? next / 2 : next / 2 + 1\n        result.append(next)\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(make_a_pile(n:\
    \ 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Exception
  stderr: 'tmpy87ghvfz/tmpy87ghvfz.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5cd713bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5cd6e32b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5cd6e32988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5cd6e317b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpy87ghvfz                        0x000055dd640a6472 <unavailable> + 5234

    5    libc.so.6                          0x00002b5cd7327460 __libc_start_main +
    245

    6    tmpy87ghvfz                        0x000055dd640a60b9 <unavailable> + 4281

    '
  stdout: ''
  timestamp: 1659824429
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var stones = [Int]()\n    var current = n\n    while current\
    \ > 0 {\n        stones.append(current)\n        if current % 2 == 0 {\n     \
    \       current += 1\n        } else {\n            current += 2\n        }\n\
    \    }\n    return stones\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(make_a_pile(n:\
    \ 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659824434
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var current = n\n    while current\
    \ > 0 {\n        result.append(current)\n        current = current % 2 == 0 ?\
    \ current + 1 : current + 2\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4)\
    \ == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659824434
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var i = n\n    while i > 0 {\n   \
    \     result.append(i)\n        i = i % 2 == 0 ? i + 1 : i + 2\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(make_a_pile(n: 3) ==\
    \ [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659824434
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var current = n\n    while current\
    \ > 0 {\n        result.append(current)\n        current = current % 2 == 0 ?\
    \ current + 1 : current + 2\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4)\
    \ == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659824434
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var current = n\n    while current\
    \ > 0 {\n        result.append(current)\n        current = current % 2 == 0 ?\
    \ current + 1 : current + 2\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4)\
    \ == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659824434
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [n]\n    var n = n\n    while n > 1 {\n       \
    \ n = n % 2 == 0 ? n / 2 : (n + 1) / 2\n        result.append(n)\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(make_a_pile(n: 3) ==\
    \ [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Exception
  stderr: 'tmpcyenglp9/tmpcyenglp9.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7a6cd5dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7a6ca54b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7a6ca54988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7a6ca537b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcyenglp9                        0x0000561486d12472 <unavailable> + 5234

    5    libc.so.6                          0x00002b7a6cf49460 __libc_start_main +
    245

    6    tmpcyenglp9                        0x0000561486d120b9 <unavailable> + 4281

    '
  stdout: ''
  timestamp: 1659824429
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var current = n\n    while current\
    \ > 0 {\n        result.append(current)\n        current = current % 2 == 0 ?\
    \ current + 1 : current + 2\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4)\
    \ == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659824434
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var current = n\n    while current\
    \ > 0 {\n        result.append(current)\n        current = current % 2 == 0 ?\
    \ current + 1 : current + 2\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4)\
    \ == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659824434
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var current = n\n    while current\
    \ > 0 {\n        result.append(current)\n        current = current.isMultiple(of:\
    \ 2) ? current + 1 : current + 2\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659824434
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var current = n\n    while current\
    \ > 0 {\n        result.append(current)\n        current = current % 2 == 0 ?\
    \ current + 1 : current + 2\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4)\
    \ == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659824434
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var current = n\n    while current\
    \ > 0 {\n        result.append(current)\n        current = current % 2 == 0 ?\
    \ current + 1 : current + 2\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4)\
    \ == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659824434
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var current = n\n    while current\
    \ > 0 {\n        result.append(current)\n        current = current % 2 == 0 ?\
    \ current + 1 : current + 2\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4)\
    \ == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659824434
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var i = n\n    while i > 0 {\n   \
    \     result.append(i)\n        i = i % 2 == 0 ? i + 1 : i + 2\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(make_a_pile(n: 3) ==\
    \ [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659824434
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var num = n\n    while num > 0 {\n\
    \        result.append(num)\n        num = num % 2 == 0 ? num + 1 : num + 2\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(make_a_pile(n:\
    \ 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659824434
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var current = n\n    while current\
    \ > 0 {\n        result.append(current)\n        current = current % 2 == 0 ?\
    \ current + 1 : current + 2\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4)\
    \ == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659824434
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [n]\n    var next = n\n    while next > 1 {\n \
    \       next = next % 2 == 0 ? next / 2 : next / 2 + 1\n        result.append(next)\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(make_a_pile(n:\
    \ 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Exception
  stderr: 'tmpy87ghvfz/tmpy87ghvfz.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5cd713bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5cd6e32b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5cd6e32988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5cd6e317b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpy87ghvfz                        0x000055dd640a6472 <unavailable> + 5234

    5    libc.so.6                          0x00002b5cd7327460 __libc_start_main +
    245

    6    tmpy87ghvfz                        0x000055dd640a60b9 <unavailable> + 4281

    '
  stdout: ''
  timestamp: 1659824429
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var i = n\n    while i > 0 {\n   \
    \     result.append(i)\n        i = i % 2 == 0 ? i + 1 : i + 2\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(make_a_pile(n: 3) ==\
    \ [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659824434
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var current = n\n    while current\
    \ > 0 {\n        result.append(current)\n        current = current % 2 == 0 ?\
    \ current + 1 : current + 2\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4)\
    \ == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659824434
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var current = n\n    while current\
    \ > 0 {\n        result.append(current)\n        current = current % 2 == 0 ?\
    \ current + 1 : current + 2\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4)\
    \ == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659824434
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var i = n\n    while i > 0 {\n   \
    \     result.append(i)\n        i = i % 2 == 0 ? i + 1 : i + 2\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(make_a_pile(n: 3) ==\
    \ [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659824434
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var current = n\n    while current\
    \ > 0 {\n        result.append(current)\n        current = (current % 2 == 0)\
    \ ? current + 1 : current + 2\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659824434
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var current = n\n    while current\
    \ > 0 {\n        result.append(current)\n        current = current % 2 == 0 ?\
    \ current + 1 : current + 2\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4)\
    \ == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659824434
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var current = n\n    while current\
    \ > 0 {\n        result.append(current)\n        current = current % 2 == 0 ?\
    \ current + 1 : current + 2\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4)\
    \ == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659824434
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var current = n\n    while current\
    \ > 0 {\n        result.append(current)\n        current = current % 2 == 0 ?\
    \ current + 1 : current + 2\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4)\
    \ == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659824434
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var current = n\n    while current\
    \ > 0 {\n        result.append(current)\n        current = current % 2 == 0 ?\
    \ current + 1 : current + 2\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4)\
    \ == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659824434
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var n = n\n    while n > 0 {\n   \
    \     result.append(n)\n        n = n % 2 == 0 ? n + 1 : n + 2\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(make_a_pile(n: 3) ==\
    \ [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659824434
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var i = n\n    while i > 0 {\n   \
    \     result.append(i)\n        i = i % 2 == 0 ? i + 1 : i + 2\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(make_a_pile(n: 3) ==\
    \ [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659824434
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var i = n\n    while i > 0 {\n   \
    \     result.append(i)\n        i = i % 2 == 0 ? i - 1 : i - 2\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(make_a_pile(n: 3) ==\
    \ [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Exception
  stderr: 'tmplqdfbvs6/tmplqdfbvs6.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab67a280c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab679f77b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab679f77988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab679f767b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplqdfbvs6                        0x0000557967d644d2 <unavailable> + 5330

    5    libc.so.6                          0x00002ab67a46c460 __libc_start_main +
    245

    6    tmplqdfbvs6                        0x0000557967d64119 <unavailable> + 4377

    '
  stdout: ''
  timestamp: 1659824429
- exit_code: 0
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    for i in 0..<n {\n        result.append(n\
    \ + 2 * i)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8,\
    \ 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824429
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var current = n\n    while current\
    \ > 0 {\n        result.append(current)\n        current = current % 2 == 0 ?\
    \ current + 1 : current + 2\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4)\
    \ == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659824434
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [n]\n    var next = n\n    while next > 1 {\n \
    \       next = next % 2 == 0 ? next / 2 : next / 2 + 1\n        result.append(next)\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(make_a_pile(n:\
    \ 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Exception
  stderr: 'tmpy87ghvfz/tmpy87ghvfz.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5cd713bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5cd6e32b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5cd6e32988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5cd6e317b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpy87ghvfz                        0x000055dd640a6472 <unavailable> + 5234

    5    libc.so.6                          0x00002b5cd7327460 __libc_start_main +
    245

    6    tmpy87ghvfz                        0x000055dd640a60b9 <unavailable> + 4281

    '
  stdout: ''
  timestamp: 1659824429
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [n]\n    var next = n + (n % 2 == 0 ? 2 : 1)\n\
    \    while next <= n * 2 {\n        result.append(next)\n        next += (next\
    \ % 2 == 0 ? 2 : 1)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4,\
    \ 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Exception
  stderr: 'tmpgocf94m0/tmpgocf94m0.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b888e332c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b888e029b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b888e029988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b888e0287b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgocf94m0                        0x000055e44136e472 <unavailable> + 5234

    5    libc.so.6                          0x00002b888e51e460 __libc_start_main +
    245

    6    tmpgocf94m0                        0x000055e44136e0b9 <unavailable> + 4281

    '
  stdout: ''
  timestamp: 1659824429
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [n]\n    var current = n\n    while current > 1\
    \ {\n        if current % 2 == 0 {\n            current += 1\n        } else {\n\
    \            current += 2\n        }\n        result.append(current)\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(make_a_pile(n: 3)\
    \ == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659824434
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var stones = n\n    while stones >\
    \ 0 {\n        result.append(stones)\n        if stones % 2 == 0 {\n         \
    \   stones -= 1\n        } else {\n            stones -= 2\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(make_a_pile(n: 3)\
    \ == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Exception
  stderr: 'tmpbtcrx1bm/tmpbtcrx1bm.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5fc9771c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5fc9468b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5fc9468988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5fc94677b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbtcrx1bm                        0x0000564fb97554d2 <unavailable> + 5330

    5    libc.so.6                          0x00002b5fc995d460 __libc_start_main +
    245

    6    tmpbtcrx1bm                        0x0000564fb9755119 <unavailable> + 4377

    '
  stdout: ''
  timestamp: 1659824429
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var i = n\n    while i > 0 {\n   \
    \     result.append(i)\n        i = i % 2 == 0 ? i + 1 : i + 2\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(make_a_pile(n: 3) ==\
    \ [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659824434
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var i = n\n    while i > 0 {\n   \
    \     result.append(i)\n        i = i % 2 == 0 ? i + 1 : i + 2\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(make_a_pile(n: 3) ==\
    \ [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659824434
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var i = n\n    while i > 0 {\n   \
    \     result.append(i)\n        i = i % 2 == 0 ? i + 1 : i + 2\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(make_a_pile(n: 3) ==\
    \ [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659824434
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    result.append(n)\n    var next = n\n\
    \    while next > 1 {\n        if next % 2 == 0 {\n            next -= 1\n   \
    \     } else {\n            next -= 2\n        }\n        result.append(next)\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(make_a_pile(n:\
    \ 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Exception
  stderr: 'tmpeya75tgk/tmpeya75tgk.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b84e0495c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b84e018cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b84e018c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b84e018b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeya75tgk                        0x000055e42b1374d2 <unavailable> + 5330

    5    libc.so.6                          0x00002b84e0681460 __libc_start_main +
    245

    6    tmpeya75tgk                        0x000055e42b137119 <unavailable> + 4377

    '
  stdout: ''
  timestamp: 1659824429
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var i = n\n    while i > 0 {\n   \
    \     result.append(i)\n        i = i % 2 == 0 ? i + 1 : i + 2\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(make_a_pile(n: 3) ==\
    \ [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659824434
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var i = n\n    while i > 0 {\n   \
    \     result.append(i)\n        i = i % 2 == 0 ? i + 1 : i + 2\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(make_a_pile(n: 3) ==\
    \ [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659824434
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var current = n\n    while current\
    \ > 0 {\n        result.append(current)\n        current = current % 2 == 0 ?\
    \ current + 1 : current + 2\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4)\
    \ == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659824434
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var next = n\n    while next > 0 {\n\
    \        result.append(next)\n        next = next % 2 == 0 ? next + 1 : next +\
    \ 2\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(make_a_pile(n:\
    \ 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659824434
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var current = n\n    while current\
    \ > 0 {\n        result.append(current)\n        current = current % 2 == 0 ?\
    \ current + 1 : current + 2\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4)\
    \ == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659824434
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [n]\n    var next = n\n    while next > 1 {\n \
    \       next = next % 2 == 0 ? next / 2 : next / 2 + 1\n        result.append(next)\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(make_a_pile(n:\
    \ 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Exception
  stderr: 'tmpy87ghvfz/tmpy87ghvfz.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5cd713bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5cd6e32b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5cd6e32988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5cd6e317b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpy87ghvfz                        0x000055dd640a6472 <unavailable> + 5234

    5    libc.so.6                          0x00002b5cd7327460 __libc_start_main +
    245

    6    tmpy87ghvfz                        0x000055dd640a60b9 <unavailable> + 4281

    '
  stdout: ''
  timestamp: 1659824429
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [n]\n    var current = n\n    while current > 1\
    \ {\n        current = current % 2 == 0 ? current - 1 : current - 2\n        result.append(current)\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(make_a_pile(n:\
    \ 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Exception
  stderr: 'tmpz6u018ib/tmpz6u018ib.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b73fc615c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b73fc30cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b73fc30c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b73fc30b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpz6u018ib                        0x000055e441c7a472 <unavailable> + 5234

    5    libc.so.6                          0x00002b73fc801460 __libc_start_main +
    245

    6    tmpz6u018ib                        0x000055e441c7a0b9 <unavailable> + 4281

    '
  stdout: ''
  timestamp: 1659824429
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var number = n\n    while number >\
    \ 0 {\n        result.append(number)\n        if number % 2 == 0 {\n         \
    \   number -= 1\n        } else {\n            number -= 2\n        }\n    }\n\
    \    return result.reversed()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(make_a_pile(n:\
    \ 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Exception
  stderr: 'tmp5evwon1d/tmp5evwon1d.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b12d2304c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b12d1ffbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b12d1ffb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b12d1ffa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5evwon1d                        0x0000556fe3133532 <unavailable> + 5426

    5    libc.so.6                          0x00002b12d24f0460 __libc_start_main +
    245

    6    tmp5evwon1d                        0x0000556fe3133179 <unavailable> + 4473

    '
  stdout: ''
  timestamp: 1659824429
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var current = n\n    while current\
    \ > 0 {\n        result.append(current)\n        current = current % 2 == 0 ?\
    \ current + 1 : current + 2\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4)\
    \ == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659824434
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var current = n\n    while current\
    \ > 0 {\n        result.append(current)\n        current = current % 2 == 0 ?\
    \ current + 1 : current + 2\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4)\
    \ == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659824434
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var level = n\n    while level > 0\
    \ {\n        result.append(level)\n        level = level % 2 == 0 ? level + 1\
    \ : level + 2\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8,\
    \ 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659824434
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var current = n\n    while current\
    \ > 0 {\n        result.append(current)\n        current = current % 2 == 0 ?\
    \ current + 1 : current + 2\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4)\
    \ == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659824434
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var current = n\n    while current\
    \ > 0 {\n        result.append(current)\n        current = current % 2 == 0 ?\
    \ current + 1 : current + 2\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4)\
    \ == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659824434
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var current = n\n    while current\
    \ > 0 {\n        result.append(current)\n        current = current % 2 == 0 ?\
    \ current + 1 : current + 2\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4)\
    \ == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659824434
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var i = n\n    while i > 0 {\n   \
    \     result.append(i)\n        i = i % 2 == 0 ? i + 1 : i + 2\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(make_a_pile(n: 3) ==\
    \ [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659824434
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var i = n\n    while i > 0 {\n   \
    \     result.append(i)\n        i = i % 2 == 0 ? i + 1 : i + 2\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(make_a_pile(n: 3) ==\
    \ [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659824434
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var i = n\n    while i > 0 {\n   \
    \     result.append(i)\n        i = i % 2 == 0 ? i + 1 : i + 2\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(make_a_pile(n: 3) ==\
    \ [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659824434
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var i = n\n    while i > 0 {\n   \
    \     result.append(i)\n        i = i % 2 == 0 ? i + 1 : i + 2\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(make_a_pile(n: 3) ==\
    \ [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659824434
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var current = n\n    while current\
    \ > 0 {\n        result.append(current)\n        current = current % 2 == 0 ?\
    \ current + 1 : current + 2\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4)\
    \ == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659824434
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var current = n\n    while current\
    \ > 0 {\n        result.append(current)\n        current = current % 2 == 0 ?\
    \ current + 1 : current + 2\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4)\
    \ == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659824434
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var count = n\n    while count > 0\
    \ {\n        result.append(count)\n        if count % 2 == 0 {\n            count\
    \ += 1\n        } else {\n            count += 2\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(make_a_pile(n: 3) ==\
    \ [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659824434
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var i = n\n    while i > 0 {\n   \
    \     result.append(i)\n        i = i.isMultiple(of: 2) ? i + 1 : i + 2\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(make_a_pile(n: 3)\
    \ == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659824434
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var count = n\n    while count > 0\
    \ {\n        result.append(count)\n        if count % 2 == 0 {\n            count\
    \ += 1\n        } else {\n            count += 2\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(make_a_pile(n: 3) ==\
    \ [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659824434
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var current = n\n    while current\
    \ > 0 {\n        result.append(current)\n        current = current % 2 == 0 ?\
    \ current + 1 : current + 2\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4)\
    \ == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659824434
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [n]\n    var next = n\n    while next > 1 {\n \
    \       next = next % 2 == 0 ? next - 1 : next - 2\n        result.append(next)\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(make_a_pile(n:\
    \ 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Exception
  stderr: 'tmpxvidddhl/tmpxvidddhl.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9e16af4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9e167ebb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9e167eb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9e167ea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxvidddhl                        0x00005561f6b8b472 <unavailable> + 5234

    5    libc.so.6                          0x00002b9e16ce0460 __libc_start_main +
    245

    6    tmpxvidddhl                        0x00005561f6b8b0b9 <unavailable> + 4281

    '
  stdout: ''
  timestamp: 1659824429
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var i = n\n    while i > 0 {\n   \
    \     result.append(i)\n        i = (i % 2 == 0) ? i + 1 : i + 2\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(make_a_pile(n: 3) ==\
    \ [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659824434
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var current = n\n    while current\
    \ > 0 {\n        result.append(current)\n        current = current % 2 == 0 ?\
    \ current + 1 : current + 2\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4)\
    \ == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659824434
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var current = n\n    while current\
    \ > 0 {\n        result.append(current)\n        current = (current % 2 == 0)\
    \ ? current + 1 : current + 2\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659824434
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var num = n\n    while num > 0 {\n\
    \        result.append(num)\n        num = num % 2 == 0 ? num + 1 : num + 2\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(make_a_pile(n:\
    \ 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659824434
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var i = n\n    while i > 0 {\n   \
    \     result.append(i)\n        i = i % 2 == 0 ? i + 1 : i + 2\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(make_a_pile(n: 3) ==\
    \ [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659824434
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var level = n\n    while level > 0\
    \ {\n        result.append(level)\n        level = level % 2 == 0 ? level + 1\
    \ : level + 2\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8,\
    \ 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659824434
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var current = n\n    while current\
    \ > 0 {\n        result.append(current)\n        current = current % 2 == 0 ?\
    \ current + 1 : current + 2\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4)\
    \ == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659824434
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var current = n\n    while current\
    \ > 0 {\n        result.append(current)\n        current = current % 2 == 0 ?\
    \ current + 1 : current + 2\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4)\
    \ == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659824434
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var current = n\n    while current\
    \ > 0 {\n        result.append(current)\n        current = current % 2 == 0 ?\
    \ current + 1 : current + 2\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4)\
    \ == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659824434
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var i = n\n    while i > 0 {\n   \
    \     result.append(i)\n        i = i % 2 == 0 ? i + 1 : i + 2\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(make_a_pile(n: 3) ==\
    \ [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659824434
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var current = n\n    while current\
    \ > 0 {\n        result.append(current)\n        current = current % 2 == 0 ?\
    \ current + 1 : current + 2\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4)\
    \ == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659824434
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var current = n\n    while current\
    \ > 0 {\n        result.append(current)\n        current = current % 2 == 0 ?\
    \ current + 1 : current + 2\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4)\
    \ == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659824434
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var level = n\n    while level > 0\
    \ {\n        result.append(level)\n        level = level.isMultiple(of: 2) ? level\
    \ + 1 : level + 2\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4,\
    \ 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659824434
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var i = n\n    while i > 0 {\n   \
    \     result.append(i)\n        i = i % 2 == 0 ? i + 1 : i + 2\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(make_a_pile(n: 3) ==\
    \ [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659824434
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var current = n\n    while current\
    \ > 0 {\n        result.append(current)\n        current = current % 2 == 0 ?\
    \ current + 1 : current + 2\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4)\
    \ == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659824434
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var current = n\n    while current\
    \ > 0 {\n        result.append(current)\n        current = current % 2 == 0 ?\
    \ current + 1 : current + 2\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4)\
    \ == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659824434
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [n]\n    var current = n\n    while current > 1\
    \ {\n        current = current % 2 == 0 ? current / 2 : current / 2 + 1\n    \
    \    result.append(current)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4)\
    \ == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Exception
  stderr: 'tmpt26l4n3c/tmpt26l4n3c.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b599cf24c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b599cc1bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b599cc1b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b599cc1a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpt26l4n3c                        0x00005577d755b472 <unavailable> + 5234

    5    libc.so.6                          0x00002b599d110460 __libc_start_main +
    245

    6    tmpt26l4n3c                        0x00005577d755b0b9 <unavailable> + 4281

    '
  stdout: ''
  timestamp: 1659824429
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var count = n\n    while count > 0\
    \ {\n        result.append(count)\n        if count % 2 == 0 {\n            count\
    \ -= 1\n        } else {\n            count -= 2\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(make_a_pile(n: 3) ==\
    \ [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Exception
  stderr: 'tmpda7snabw/tmpda7snabw.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b49165aec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b49162a5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b49162a5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b49162a47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpda7snabw                        0x0000563710e2f4d2 <unavailable> + 5330

    5    libc.so.6                          0x00002b491679a460 __libc_start_main +
    245

    6    tmpda7snabw                        0x0000563710e2f119 <unavailable> + 4377

    '
  stdout: ''
  timestamp: 1659824429
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var current = n\n    while current\
    \ > 0 {\n        result.append(current)\n        current = current % 2 == 0 ?\
    \ current + 1 : current + 2\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4)\
    \ == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659824434
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var current = n\n    while current\
    \ > 0 {\n        result.append(current)\n        current = current % 2 == 0 ?\
    \ current + 1 : current + 2\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4)\
    \ == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659824434
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [n]\n    var current = n\n    while current > 1\
    \ {\n        current = current % 2 == 0 ? current / 2 : current / 2 + 1\n    \
    \    result.append(current)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4)\
    \ == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Exception
  stderr: 'tmpt26l4n3c/tmpt26l4n3c.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b599cf24c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b599cc1bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b599cc1b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b599cc1a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpt26l4n3c                        0x00005577d755b472 <unavailable> + 5234

    5    libc.so.6                          0x00002b599d110460 __libc_start_main +
    245

    6    tmpt26l4n3c                        0x00005577d755b0b9 <unavailable> + 4281

    '
  stdout: ''
  timestamp: 1659824429
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var current = n\n    while current\
    \ > 0 {\n        result.append(current)\n        current = current % 2 == 0 ?\
    \ current + 1 : current + 2\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4)\
    \ == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659824434
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var i = n\n    while i > 0 {\n   \
    \     result.append(i)\n        i = i % 2 == 0 ? i + 1 : i + 2\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(make_a_pile(n: 3) ==\
    \ [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659824434
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var current = n\n    while current\
    \ > 0 {\n        result.append(current)\n        current = current % 2 == 0 ?\
    \ current + 1 : current + 2\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4)\
    \ == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659824434
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [n]\n    var next = n\n    while next > 1 {\n \
    \       next = next % 2 == 0 ? next / 2 : next / 2 + 1\n        result.append(next)\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(make_a_pile(n:\
    \ 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Exception
  stderr: 'tmpy87ghvfz/tmpy87ghvfz.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5cd713bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5cd6e32b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5cd6e32988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5cd6e317b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpy87ghvfz                        0x000055dd640a6472 <unavailable> + 5234

    5    libc.so.6                          0x00002b5cd7327460 __libc_start_main +
    245

    6    tmpy87ghvfz                        0x000055dd640a60b9 <unavailable> + 4281

    '
  stdout: ''
  timestamp: 1659824429
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var next = n\n    while next > 0 {\n\
    \        result.append(next)\n        next = next % 2 == 0 ? next + 1 : next +\
    \ 2\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(make_a_pile(n:\
    \ 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659824434
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var current = n\n    while current\
    \ > 0 {\n        result.append(current)\n        current = current % 2 == 0 ?\
    \ current + 1 : current + 2\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4)\
    \ == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659824434
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var current = n\n    while current\
    \ > 0 {\n        result.append(current)\n        current = current % 2 == 0 ?\
    \ current + 1 : current + 2\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4)\
    \ == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659824434
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var current = n\n    while current\
    \ > 0 {\n        result.append(current)\n        current = current % 2 == 0 ?\
    \ current + 1 : current + 2\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4)\
    \ == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659824434
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var i = n\n    while i > 0 {\n   \
    \     result.append(i)\n        i = i % 2 == 0 ? i + 1 : i + 2\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(make_a_pile(n: 3) ==\
    \ [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659824434
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var current = n\n    while current\
    \ > 0 {\n        result.append(current)\n        current = current % 2 == 0 ?\
    \ current + 1 : current + 2\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4)\
    \ == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659824434
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var i = n\n    while i > 0 {\n   \
    \     result.append(i)\n        i = i.isMultiple(of: 2) ? i + 1 : i + 2\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(make_a_pile(n: 3)\
    \ == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659824434
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var i = n\n    while i > 0 {\n   \
    \     result.append(i)\n        i = i % 2 == 0 ? i + 1 : i + 2\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(make_a_pile(n: 3) ==\
    \ [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659824434
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var number = n\n    while number >\
    \ 0 {\n        result.append(number)\n        if number % 2 == 0 {\n         \
    \   number += 1\n        } else {\n            number += 2\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(make_a_pile(n: 3)\
    \ == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659824434
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var current = n\n    while current\
    \ > 0 {\n        result.append(current)\n        current = current % 2 == 0 ?\
    \ current + 1 : current + 2\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4)\
    \ == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659824434
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var current = n\n    while current\
    \ > 0 {\n        result.append(current)\n        current = current % 2 == 0 ?\
    \ current + 1 : current + 2\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4)\
    \ == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659824434
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var i = n\n    while i > 0 {\n   \
    \     result.append(i)\n        i = i % 2 == 0 ? i + 1 : i + 2\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(make_a_pile(n: 3) ==\
    \ [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659824434
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var current = n\n    while current\
    \ > 0 {\n        result.append(current)\n        current = current % 2 == 0 ?\
    \ current + 1 : current + 2\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4)\
    \ == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659824434
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var current = n\n    while current\
    \ > 0 {\n        result.append(current)\n        current = current % 2 == 0 ?\
    \ current + 1 : current + 2\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4)\
    \ == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659824434
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var i = n\n    while i > 0 {\n   \
    \     result.append(i)\n        i = i % 2 == 0 ? i + 1 : i + 2\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(make_a_pile(n: 3) ==\
    \ [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659824434
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [n]\n    var next = n\n    while next > 1 {\n \
    \       next = next % 2 == 0 ? next / 2 : next / 2 + 1\n        result.append(next)\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(make_a_pile(n:\
    \ 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Exception
  stderr: 'tmpy87ghvfz/tmpy87ghvfz.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5cd713bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5cd6e32b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5cd6e32988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5cd6e317b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpy87ghvfz                        0x000055dd640a6472 <unavailable> + 5234

    5    libc.so.6                          0x00002b5cd7327460 __libc_start_main +
    245

    6    tmpy87ghvfz                        0x000055dd640a60b9 <unavailable> + 4281

    '
  stdout: ''
  timestamp: 1659824429
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [n]\n    var next = n % 2 == 0 ? n + 2 : n + 1\n\
    \    while next <= n * 2 {\n        result.append(next)\n        next += 2\n \
    \   }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(make_a_pile(n:\
    \ 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Exception
  stderr: 'tmpho55mx_6/tmpho55mx_6.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab3152efc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab314fe6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab314fe6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab314fe57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpho55mx_6                        0x000056437d0fb472 <unavailable> + 5234

    5    libc.so.6                          0x00002ab3154db460 __libc_start_main +
    245

    6    tmpho55mx_6                        0x000056437d0fb0b9 <unavailable> + 4281

    '
  stdout: ''
  timestamp: 1659824429
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var i = n\n    while i > 0 {\n   \
    \     result.append(i)\n        i = i % 2 == 0 ? i + 1 : i + 2\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(make_a_pile(n: 3) ==\
    \ [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659824434
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var i = n\n    while i > 0 {\n   \
    \     result.append(i)\n        i = i % 2 == 0 ? i + 1 : i + 2\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(make_a_pile(n: 3) ==\
    \ [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659824434
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var i = n\n    while i > 0 {\n   \
    \     result.append(i)\n        i = i % 2 == 0 ? i + 1 : i + 2\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(make_a_pile(n: 3) ==\
    \ [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659824434
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var i = n\n    while i > 0 {\n   \
    \     result.append(i)\n        i = i % 2 == 0 ? i + 1 : i + 2\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(make_a_pile(n: 3) ==\
    \ [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659824434
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var i = n\n    while i > 0 {\n   \
    \     result.append(i)\n        i = i % 2 == 0 ? i + 1 : i + 2\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(make_a_pile(n: 3) ==\
    \ [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659824434
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var current = n\n    while current\
    \ > 0 {\n        result.append(current)\n        current = current % 2 == 0 ?\
    \ current + 1 : current + 2\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4)\
    \ == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659824434
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [n]\n    var next = n\n    while next > 1 {\n \
    \       next = next % 2 == 0 ? next / 2 : next / 2 + 1\n        result.append(next)\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(make_a_pile(n:\
    \ 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Exception
  stderr: 'tmpy87ghvfz/tmpy87ghvfz.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5cd713bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5cd6e32b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5cd6e32988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5cd6e317b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpy87ghvfz                        0x000055dd640a6472 <unavailable> + 5234

    5    libc.so.6                          0x00002b5cd7327460 __libc_start_main +
    245

    6    tmpy87ghvfz                        0x000055dd640a60b9 <unavailable> + 4281

    '
  stdout: ''
  timestamp: 1659824429
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var i = n\n    while i > 0 {\n   \
    \     result.append(i)\n        i = i % 2 == 0 ? i + 1 : i + 2\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(make_a_pile(n: 3) ==\
    \ [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659824434
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var stones = n\n    while stones >\
    \ 0 {\n        result.append(stones)\n        if stones % 2 == 0 {\n         \
    \   stones -= 1\n        } else {\n            stones -= 2\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(make_a_pile(n: 3)\
    \ == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Exception
  stderr: 'tmpbtcrx1bm/tmpbtcrx1bm.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5fc9771c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5fc9468b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5fc9468988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5fc94677b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbtcrx1bm                        0x0000564fb97554d2 <unavailable> + 5330

    5    libc.so.6                          0x00002b5fc995d460 __libc_start_main +
    245

    6    tmpbtcrx1bm                        0x0000564fb9755119 <unavailable> + 4377

    '
  stdout: ''
  timestamp: 1659824429
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var res = [Int]()\n    var i = n\n    while i > 0 {\n      \
    \  res.append(i)\n        if i % 2 == 0 {\n            i += 1\n        } else\
    \ {\n            i += 2\n        }\n    }\n    return res\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659824434
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var i = n\n    while i > 0 {\n   \
    \     result.append(i)\n        i = i % 2 == 0 ? i + 1 : i + 2\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(make_a_pile(n: 3) ==\
    \ [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659824434
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var current = n\n    while current\
    \ > 0 {\n        result.append(current)\n        current = current % 2 == 0 ?\
    \ current + 1 : current + 2\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4)\
    \ == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659824434
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var i = n\n    while i > 0 {\n   \
    \     result.append(i)\n        i = i % 2 == 0 ? i + 1 : i + 2\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(make_a_pile(n: 3) ==\
    \ [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659824434
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var i = n\n    while i > 0 {\n   \
    \     result.append(i)\n        i = i % 2 == 0 ? i + 1 : i + 2\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(make_a_pile(n: 3) ==\
    \ [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659824434
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var stones = n\n    while stones >\
    \ 0 {\n        result.append(stones)\n        if stones % 2 == 0 {\n         \
    \   stones -= 1\n        } else {\n            stones -= 2\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(make_a_pile(n: 3)\
    \ == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Exception
  stderr: 'tmpbtcrx1bm/tmpbtcrx1bm.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5fc9771c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5fc9468b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5fc9468988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5fc94677b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbtcrx1bm                        0x0000564fb97554d2 <unavailable> + 5330

    5    libc.so.6                          0x00002b5fc995d460 __libc_start_main +
    245

    6    tmpbtcrx1bm                        0x0000564fb9755119 <unavailable> + 4377

    '
  stdout: ''
  timestamp: 1659824429
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var i = n\n    while i > 0 {\n   \
    \     result.append(i)\n        i = i % 2 == 0 ? i + 1 : i + 2\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(make_a_pile(n: 3) ==\
    \ [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659824434
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var current = n\n    while current\
    \ > 0 {\n        result.append(current)\n        current = current % 2 == 0 ?\
    \ current + 1 : current + 2\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4)\
    \ == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659824434
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var i = n\n    while i > 0 {\n   \
    \     result.append(i)\n        i = i % 2 == 0 ? i + 1 : i + 2\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(make_a_pile(n: 3) ==\
    \ [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659824434
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var current = n\n    while current\
    \ > 0 {\n        result.append(current)\n        current = current % 2 == 0 ?\
    \ current + 1 : current + 2\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4)\
    \ == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659824434
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var current = n\n    while current\
    \ > 0 {\n        result.append(current)\n        current = current % 2 == 0 ?\
    \ current + 1 : current + 2\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4)\
    \ == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659824434
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var current = n\n    while current\
    \ > 0 {\n        result.append(current)\n        current = current % 2 == 0 ?\
    \ current + 1 : current + 2\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4)\
    \ == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659824434
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var i = n\n    while i > 0 {\n   \
    \     result.append(i)\n        i = i % 2 == 0 ? i + 1 : i + 2\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(make_a_pile(n: 3) ==\
    \ [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659824434
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var i = n\n    while i > 0 {\n   \
    \     result.append(i)\n        i = i % 2 == 0 ? i + 1 : i + 2\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(make_a_pile(n: 3) ==\
    \ [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659824434
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var i = n\n    while i > 0 {\n   \
    \     result.append(i)\n        i = (i % 2 == 0) ? i + 1 : i + 2\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(make_a_pile(n: 3) ==\
    \ [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659824434
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var current = n\n    while current\
    \ > 0 {\n        result.append(current)\n        current = current % 2 == 0 ?\
    \ current + 1 : current + 2\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4)\
    \ == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659824434
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var number = n\n    while number >\
    \ 0 {\n        result.append(number)\n        if number % 2 == 0 {\n         \
    \   number += 1\n        } else {\n            number += 2\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(make_a_pile(n: 3)\
    \ == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659824434
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    return (1...n).map { n in n + (n % 2 == 0 ? 1 : 0) }\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Exception
  stderr: 'tmpjmbdniv8/tmpjmbdniv8.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b744f10cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b744ee03b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b744ee03988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b744ee027b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjmbdniv8                        0x00005594819e7552 <unavailable> + 5458

    5    libc.so.6                          0x00002b744f2f8460 __libc_start_main +
    245

    6    tmpjmbdniv8                        0x00005594819e7199 <unavailable> + 4505

    '
  stdout: ''
  timestamp: 1659824429
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var i = n\n    while i > 0 {\n   \
    \     result.append(i)\n        i = (i % 2 == 0) ? i + 1 : i + 2\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(make_a_pile(n: 3) ==\
    \ [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659824434
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var current = n\n    while current\
    \ > 0 {\n        result.append(current)\n        current = current % 2 == 0 ?\
    \ current + 1 : current + 2\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4)\
    \ == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659824434
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var i = n\n    while i > 0 {\n   \
    \     result.append(i)\n        i = i % 2 == 0 ? i + 1 : i + 2\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(make_a_pile(n: 3) ==\
    \ [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659824434
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var current = n\n    while current\
    \ > 0 {\n        result.append(current)\n        current = current % 2 == 0 ?\
    \ current + 1 : current + 2\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4)\
    \ == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659824434
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var current = n\n    while current\
    \ > 0 {\n        result.append(current)\n        current = current % 2 == 0 ?\
    \ current + 1 : current + 2\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4)\
    \ == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659824434
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var current = n\n    while current\
    \ > 0 {\n        result.append(current)\n        current = current.isMultiple(of:\
    \ 2) ? current + 1 : current + 2\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659824434
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var current = n\n    while current\
    \ > 0 {\n        result.append(current)\n        current = current % 2 == 0 ?\
    \ current + 1 : current + 2\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4)\
    \ == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659824434
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var current = n\n    while current\
    \ > 0 {\n        result.append(current)\n        current = current % 2 == 0 ?\
    \ current + 1 : current + 2\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4)\
    \ == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659824434
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var i = n\n    while i > 0 {\n   \
    \     result.append(i)\n        i = i % 2 == 0 ? i + 1 : i + 2\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(make_a_pile(n: 3) ==\
    \ [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659824434
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var current = n\n    while current\
    \ > 0 {\n        result.append(current)\n        current = current % 2 == 0 ?\
    \ current + 1 : current + 2\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4)\
    \ == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659824434
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var current = n\n    while current\
    \ > 0 {\n        result.append(current)\n        current = current % 2 == 0 ?\
    \ current + 1 : current + 2\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4)\
    \ == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659824434
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var level = n\n    while level > 0\
    \ {\n        result.append(level)\n        level = (level % 2 == 0) ? level +\
    \ 1 : level + 2\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4,\
    \ 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659824434
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var current = n\n    while current\
    \ > 0 {\n        result.append(current)\n        current = current % 2 == 0 ?\
    \ current + 1 : current + 2\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4)\
    \ == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659824434
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var current = n\n    while current\
    \ > 0 {\n        result.append(current)\n        current = current % 2 == 0 ?\
    \ current + 1 : current + 2\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4)\
    \ == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659824434
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var i = n\n    while i > 0 {\n   \
    \     result.append(i)\n        i = i % 2 == 0 ? i + 1 : i + 2\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(make_a_pile(n: 3) ==\
    \ [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659824434
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var current = n\n    while current\
    \ > 0 {\n        result.append(current)\n        current = current % 2 == 0 ?\
    \ current + 1 : current + 2\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4)\
    \ == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659824434
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var current = n\n    while current\
    \ > 0 {\n        result.append(current)\n        current = current % 2 == 0 ?\
    \ current + 1 : current + 2\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4)\
    \ == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659824434
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var current = n\n    while current\
    \ > 0 {\n        result.append(current)\n        current = current % 2 == 0 ?\
    \ current + 1 : current + 2\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4)\
    \ == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659824434
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var current = n\n    while current\
    \ > 0 {\n        result.append(current)\n        current = (current % 2 == 0)\
    \ ? current + 1 : current + 2\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659824434
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var current = n\n    while current\
    \ > 0 {\n        result.append(current)\n        current = current % 2 == 0 ?\
    \ current + 1 : current + 2\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4)\
    \ == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659824434
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var current = n\n    while current\
    \ > 0 {\n        result.append(current)\n        current = current % 2 == 0 ?\
    \ current + 1 : current + 2\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4)\
    \ == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659824434
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [n]\n    var current = n\n    while current > 1\
    \ {\n        if current % 2 == 0 {\n            current = current / 2\n      \
    \  } else {\n            current = (current - 1) / 2\n        }\n        result.append(current)\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(make_a_pile(n:\
    \ 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Exception
  stderr: 'tmpaeko15ei/tmpaeko15ei.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b339523fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3394f36b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3394f36988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3394f357b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpaeko15ei                        0x000055605d120472 <unavailable> + 5234

    5    libc.so.6                          0x00002b339542b460 __libc_start_main +
    245

    6    tmpaeko15ei                        0x000055605d1200b9 <unavailable> + 4281

    '
  stdout: ''
  timestamp: 1659824429
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var i = n\n    while i > 0 {\n   \
    \     result.append(i)\n        i = (i % 2 == 0) ? i + 1 : i + 2\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(make_a_pile(n: 3) ==\
    \ [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659824434
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [n]\n    var next = n\n    while next > 1 {\n \
    \       next = next % 2 == 0 ? next / 2 : next / 2 + 1\n        result.append(next)\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(make_a_pile(n:\
    \ 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Exception
  stderr: 'tmpy87ghvfz/tmpy87ghvfz.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5cd713bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5cd6e32b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5cd6e32988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5cd6e317b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpy87ghvfz                        0x000055dd640a6472 <unavailable> + 5234

    5    libc.so.6                          0x00002b5cd7327460 __libc_start_main +
    245

    6    tmpy87ghvfz                        0x000055dd640a60b9 <unavailable> + 4281

    '
  stdout: ''
  timestamp: 1659824429
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var current = n\n    while current\
    \ > 0 {\n        result.append(current)\n        current = current % 2 == 0 ?\
    \ current + 1 : current + 2\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4)\
    \ == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659824434
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var current = n\n    while current\
    \ > 0 {\n        result.append(current)\n        current = current % 2 == 0 ?\
    \ current + 1 : current + 2\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4)\
    \ == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659824434
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var i = n\n    while i > 0 {\n   \
    \     result.append(i)\n        i = i % 2 == 0 ? i + 1 : i + 2\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(make_a_pile(n: 3) ==\
    \ [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659824434
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var i = n\n    while i > 0 {\n   \
    \     result.append(i)\n        i = i % 2 == 0 ? i + 1 : i + 2\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(make_a_pile(n: 3) ==\
    \ [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659824434
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var pile = [Int]()\n    var i = n\n    while i > 0 {\n     \
    \   pile.append(i)\n        i = i % 2 == 0 ? i + 1 : i + 2\n    }\n    return\
    \ pile\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(make_a_pile(n: 3) == [3,\
    \ 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5)\
    \ == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659824435
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var i = n\n    while i > 0 {\n   \
    \     result.append(i)\n        i = i % 2 == 0 ? i + 1 : i + 2\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(make_a_pile(n: 3) ==\
    \ [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659824434
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var i = n\n    while i > 0 {\n   \
    \     result.append(i)\n        i = i % 2 == 0 ? i - 1 : i - 2\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(make_a_pile(n: 3) ==\
    \ [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Exception
  stderr: 'tmplqdfbvs6/tmplqdfbvs6.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab67a280c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab679f77b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab679f77988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab679f767b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplqdfbvs6                        0x0000557967d644d2 <unavailable> + 5330

    5    libc.so.6                          0x00002ab67a46c460 __libc_start_main +
    245

    6    tmplqdfbvs6                        0x0000557967d64119 <unavailable> + 4377

    '
  stdout: ''
  timestamp: 1659824429
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var current = n\n    while current\
    \ > 0 {\n        result.append(current)\n        current = current % 2 == 0 ?\
    \ current + 1 : current + 2\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4)\
    \ == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659824434
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var i = n\n    while i > 0 {\n   \
    \     result.append(i)\n        i = i % 2 == 0 ? i + 1 : i + 2\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(make_a_pile(n: 3) ==\
    \ [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659824434
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var pile = [Int]()\n    var current = n\n    while current >\
    \ 0 {\n        pile.append(current)\n        current = current % 2 == 0 ? current\
    \ + 1 : current + 2\n    }\n    return pile\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4,\
    \ 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659824435
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var pile = [Int]()\n    for i in 1...n {\n        pile.append(i\
    \ * 2 - 1)\n    }\n    return pile\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8,\
    \ 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Exception
  stderr: 'tmph1j4f7wr/tmph1j4f7wr.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b654bc7cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b654b973b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b654b973988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b654b9727b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmph1j4f7wr                        0x0000556fc7c2b5c2 <unavailable> + 5570

    5    libc.so.6                          0x00002b654be68460 __libc_start_main +
    245

    6    tmph1j4f7wr                        0x0000556fc7c2b209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659824430
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var i = n\n    while i > 0 {\n   \
    \     result.append(i)\n        i = i % 2 == 0 ? i + 1 : i + 2\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(make_a_pile(n: 3) ==\
    \ [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659824434
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var i = n\n    while i > 0 {\n   \
    \     result.append(i)\n        i = i % 2 == 0 ? i + 1 : i + 2\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(make_a_pile(n: 3) ==\
    \ [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659824434
