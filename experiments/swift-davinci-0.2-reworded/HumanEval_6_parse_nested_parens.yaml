name: HumanEval_6_parse_nested_parens
language: swift
prompt: "\n/// Input to this function is a string represented multiple groups for\
  \ nested parentheses separated by spaces.\n/// For each of the group, output the\
  \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
  \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
  \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
  \ String) -> [Int] {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(parse_nested_parens(paren_string: \"(()())\
  \ ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
  \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
  \ \"(()(())((())))\") == [4])"
completions: ["    var result: [Int] = []\n    let groups = paren_string.components(separatedBy:\
    \ \" \")\n    for group in groups {\n        result.append(parse_nested_parens_helper(paren_string:\
    \ group))\n    }\n    return result", "    var max_nesting_levels = [Int]()\n\
    \    var paren_stack = Stack<Character>()\n    var current_nesting_level = 0\n\
    \    var max_nesting_level = 0\n    for char in paren_string {\n        if char\
    \ == \"(\" {\n            paren_stack.push(char)\n            current_nesting_level\
    \ += 1\n            if current_nesting_level > max_nesting_level {\n         \
    \       max_nesting_level = current_nesting_level\n            }\n        } else\
    \ if char == \")\" {\n            paren_stack.pop()\n            current_nesting_level\
    \ -= 1\n        } else if char == \" \" {\n            max_nesting_levels.append(max_nesting_level)\n\
    \            max_nesting_level = 0\n            current_nesting_level = 0\n  \
    \      }\n    }\n    max_nesting_levels.append(max_nesting_level)\n    return\
    \ max_nesting_levels", "    let paren_groups = paren_string.components(separatedBy:\
    \ \" \")\n    var max_nesting_levels = [Int]()\n    for paren_group in paren_groups\
    \ {\n        var nesting_level = 0\n        var max_nesting_level = 0\n      \
    \  for paren in paren_group {\n            if paren == \"(\" {\n             \
    \   nesting_level += 1\n            } else if paren == \")\" {\n             \
    \   nesting_level -= 1\n            }\n            if nesting_level > max_nesting_level\
    \ {\n                max_nesting_level = nesting_level\n            }\n      \
    \  }\n        max_nesting_levels.append(max_nesting_level)\n    }\n    return\
    \ max_nesting_levels", "    var paren_groups = paren_string.components(separatedBy:\
    \ \" \")\n    var max_nesting_levels = [Int]()\n    for paren_group in paren_groups\
    \ {\n        var nesting_level = 0\n        var max_nesting_level = 0\n      \
    \  for char in paren_group {\n            if char == \"(\" {\n               \
    \ nesting_level += 1\n            } else if char == \")\" {\n                nesting_level\
    \ -= 1\n            }\n            if nesting_level > max_nesting_level {\n  \
    \              max_nesting_level = nesting_level\n            }\n        }\n \
    \       max_nesting_levels.append(max_nesting_level)\n    }\n    return max_nesting_levels",
  "    var result: [Int] = []\n    let groups = paren_string.components(separatedBy:\
    \ \" \")\n    for group in groups {\n        var max_depth = 0\n        var depth\
    \ = 0\n        for char in group {\n            if char == \"(\" {\n         \
    \       depth += 1\n            } else if char == \")\" {\n                depth\
    \ -= 1\n            }\n            if depth > max_depth {\n                max_depth\
    \ = depth\n            }\n        }\n        result.append(max_depth)\n    }\n\
    \    return result", "    var result: [Int] = []\n    var paren_list = paren_string.components(separatedBy:\
    \ \" \")\n    for paren in paren_list {\n        var count = 0\n        var max_count\
    \ = 0\n        for char in paren {\n            if char == \"(\" {\n         \
    \       count += 1\n            } else if char == \")\" {\n                count\
    \ -= 1\n            }\n            if count > max_count {\n                max_count\
    \ = count\n            }\n        }\n        result.append(max_count)\n    }\n\
    \    return result", "    var result = [Int]()\n    let groups = paren_string.split(separator:\
    \ \" \")\n    for group in groups {\n        var max_nesting = 0\n        var\
    \ current_nesting = 0\n        for char in group {\n            if char == \"\
    (\" {\n                current_nesting += 1\n            } else if char == \"\
    )\" {\n                current_nesting -= 1\n            }\n            if current_nesting\
    \ > max_nesting {\n                max_nesting = current_nesting\n           \
    \ }\n        }\n        result.append(max_nesting)\n    }\n    return result",
  "    var result: [Int] = []\n    let groups = paren_string.components(separatedBy:\
    \ \" \")\n    for group in groups {\n        var stack: [Character] = []\n   \
    \     var max_depth = 0\n        var current_depth = 0\n        for char in group\
    \ {\n            if char == \"(\" {\n                stack.append(char)\n    \
    \            current_depth += 1\n                if current_depth > max_depth\
    \ {\n                    max_depth = current_depth\n                }\n      \
    \      } else if char == \")\" {\n                stack.popLast()\n          \
    \      current_depth -= 1\n            }\n        }\n        result.append(max_depth)\n\
    \    }\n    return result", "    let groups = paren_string.components(separatedBy:\
    \ \" \")\n    var result = [Int]()\n    for group in groups {\n        var max_nesting\
    \ = 0\n        var current_nesting = 0\n        for char in group {\n        \
    \    if char == \"(\" {\n                current_nesting += 1\n            } else\
    \ if char == \")\" {\n                current_nesting -= 1\n            }\n  \
    \          if current_nesting > max_nesting {\n                max_nesting = current_nesting\n\
    \            }\n        }\n        result.append(max_nesting)\n    }\n    return\
    \ result", "    let groups = paren_string.components(separatedBy: \" \")\n   \
    \ var max_nesting_levels = [Int]()\n    for group in groups {\n        var nesting_level\
    \ = 0\n        var max_nesting_level = 0\n        for char in group {\n      \
    \      if char == \"(\" {\n                nesting_level += 1\n            } else\
    \ if char == \")\" {\n                nesting_level -= 1\n            }\n    \
    \        if nesting_level > max_nesting_level {\n                max_nesting_level\
    \ = nesting_level\n            }\n        }\n        max_nesting_levels.append(max_nesting_level)\n\
    \    }\n    return max_nesting_levels", "    let groups = paren_string.components(separatedBy:\
    \ \" \")\n    var max_levels = [Int]()\n    for group in groups {\n        var\
    \ level = 0\n        var max_level = 0\n        for char in group {\n        \
    \    if char == \"(\" {\n                level += 1\n            } else if char\
    \ == \")\" {\n                level -= 1\n            }\n            if level\
    \ > max_level {\n                max_level = level\n            }\n        }\n\
    \        max_levels.append(max_level)\n    }\n    return max_levels", "    var\
    \ result = [Int]()\n    var paren_groups = paren_string.components(separatedBy:\
    \ \" \")\n    for paren_group in paren_groups {\n        result.append(parse_nested_parens_helper(paren_group:\
    \ paren_group))\n    }\n    return result", "    var result = [Int]()\n    let\
    \ groups = paren_string.components(separatedBy: \" \")\n    for group in groups\
    \ {\n        var max_depth = 0\n        var current_depth = 0\n        for char\
    \ in group {\n            if char == \"(\" {\n                current_depth +=\
    \ 1\n            } else if char == \")\" {\n                current_depth -= 1\n\
    \            }\n            if current_depth > max_depth {\n                max_depth\
    \ = current_depth\n            }\n        }\n        result.append(max_depth)\n\
    \    }\n    return result", "    var result = [Int]()\n    let groups = paren_string.components(separatedBy:\
    \ \" \")\n    for group in groups {\n        var stack = Stack<Character>()\n\
    \        var max_depth = 0\n        var depth = 0\n        for char in group {\n\
    \            if char == \"(\" {\n                stack.push(char)\n          \
    \      depth += 1\n                if depth > max_depth {\n                  \
    \  max_depth = depth\n                }\n            } else if char == \")\" {\n\
    \                stack.pop()\n                depth -= 1\n            }\n    \
    \    }\n        result.append(max_depth)\n    }\n    return result", "    var\
    \ paren_groups = paren_string.components(separatedBy: \" \")\n    var paren_levels\
    \ = [Int]()\n    for paren_group in paren_groups {\n        var paren_level =\
    \ 0\n        var max_paren_level = 0\n        for paren in paren_group {\n   \
    \         if paren == \"(\" {\n                paren_level += 1\n            }\
    \ else if paren == \")\" {\n                paren_level -= 1\n            }\n\
    \            if paren_level > max_paren_level {\n                max_paren_level\
    \ = paren_level\n            }\n        }\n        paren_levels.append(max_paren_level)\n\
    \    }\n    return paren_levels", "    var result = [Int]()\n    var paren_stack\
    \ = [Character]()\n    var max_depth = 0\n    var curr_depth = 0\n    for char\
    \ in paren_string {\n        if char == \"(\" {\n            paren_stack.append(char)\n\
    \            curr_depth += 1\n            if curr_depth > max_depth {\n      \
    \          max_depth = curr_depth\n            }\n        } else if char == \"\
    )\" {\n            if paren_stack.count > 0 {\n                paren_stack.removeLast()\n\
    \                curr_depth -= 1\n            }\n        } else if char == \"\
    \ \" {\n            result.append(max_depth)\n            max_depth = 0\n    \
    \        curr_depth = 0\n        }\n    }\n    result.append(max_depth)\n    return\
    \ result", "    var result: [Int] = []\n    let groups = paren_string.components(separatedBy:\
    \ \" \")\n    for group in groups {\n        var stack: [Character] = []\n   \
    \     var max_depth = 0\n        var depth = 0\n        for char in group {\n\
    \            if char == \"(\" {\n                stack.append(char)\n        \
    \        depth += 1\n                if depth > max_depth {\n                \
    \    max_depth = depth\n                }\n            } else if char == \")\"\
    \ {\n                stack.popLast()\n                depth -= 1\n           \
    \ }\n        }\n        result.append(max_depth)\n    }\n    return result", " \
    \   var result = [Int]()\n    let groups = paren_string.components(separatedBy:\
    \ \" \")\n    for group in groups {\n        var max_depth = 0\n        var current_depth\
    \ = 0\n        for char in group {\n            if char == \"(\" {\n         \
    \       current_depth += 1\n            } else if char == \")\" {\n          \
    \      current_depth -= 1\n            }\n            if current_depth > max_depth\
    \ {\n                max_depth = current_depth\n            }\n        }\n   \
    \     result.append(max_depth)\n    }\n    return result", "    var result = [Int]()\n\
    \    let groups = paren_string.split(separator: \" \")\n    for group in groups\
    \ {\n        var max_level = 0\n        var level = 0\n        for char in group\
    \ {\n            if char == \"(\" {\n                level += 1\n            }\
    \ else if char == \")\" {\n                level -= 1\n            }\n       \
    \     if level > max_level {\n                max_level = level\n            }\n\
    \        }\n        result.append(max_level)\n    }\n    return result", "   \
    \ var result: [Int] = []\n    let groups = paren_string.split(separator: \" \"\
    )\n    for group in groups {\n        var max_depth = 0\n        var depth = 0\n\
    \        for char in group {\n            if char == \"(\" {\n               \
    \ depth += 1\n            } else if char == \")\" {\n                depth -=\
    \ 1\n            }\n            if depth > max_depth {\n                max_depth\
    \ = depth\n            }\n        }\n        result.append(max_depth)\n    }\n\
    \    return result", "    let groups = paren_string.components(separatedBy: \"\
    \ \")\n    var max_nesting = [Int]()\n    for group in groups {\n        var current_nesting\
    \ = 0\n        var max_nesting_in_group = 0\n        for char in group {\n   \
    \         if char == \"(\" {\n                current_nesting += 1\n         \
    \   } else if char == \")\" {\n                current_nesting -= 1\n        \
    \    }\n            if current_nesting > max_nesting_in_group {\n            \
    \    max_nesting_in_group = current_nesting\n            }\n        }\n      \
    \  max_nesting.append(max_nesting_in_group)\n    }\n    return max_nesting", " \
    \   let groups = paren_string.components(separatedBy: \" \")\n    var result =\
    \ [Int]()\n    for group in groups {\n        var max_depth = 0\n        var depth\
    \ = 0\n        for char in group {\n            if char == \"(\" {\n         \
    \       depth += 1\n            } else if char == \")\" {\n                depth\
    \ -= 1\n            }\n            if depth > max_depth {\n                max_depth\
    \ = depth\n            }\n        }\n        result.append(max_depth)\n    }\n\
    \    return result", "    var result = [Int]()\n    let groups = paren_string.components(separatedBy:\
    \ \" \")\n    for group in groups {\n        var max_level = 0\n        var level\
    \ = 0\n        for char in group {\n            if char == \"(\" {\n         \
    \       level += 1\n            } else if char == \")\" {\n                level\
    \ -= 1\n            }\n            if level > max_level {\n                max_level\
    \ = level\n            }\n        }\n        result.append(max_level)\n    }\n\
    \    return result", "    var result = [Int]()\n    let groups = paren_string.components(separatedBy:\
    \ \" \")\n    for group in groups {\n        var stack = [Character]()\n     \
    \   var max_depth = 0\n        var depth = 0\n        for char in group {\n  \
    \          if char == \"(\" {\n                stack.append(char)\n          \
    \      depth += 1\n                if depth > max_depth {\n                  \
    \  max_depth = depth\n                }\n            } else if char == \")\" {\n\
    \                stack.popLast()\n                depth -= 1\n            }\n\
    \        }\n        result.append(max_depth)\n    }\n    return result", "   \
    \ var max_depth = 0\n    var depth = 0\n    var max_depths = [Int]()\n    for\
    \ char in paren_string {\n        if char == \"(\" {\n            depth += 1\n\
    \            if depth > max_depth {\n                max_depth = depth\n     \
    \       }\n        } else if char == \")\" {\n            depth -= 1\n       \
    \ } else if char == \" \" {\n            max_depths.append(max_depth)\n      \
    \      max_depth = 0\n            depth = 0\n        }\n    }\n    return max_depths",
  "    var paren_groups = paren_string.components(separatedBy: \" \")\n    var max_nested_parens\
    \ = [Int]()\n    for group in paren_groups {\n        var paren_stack = Stack<Character>()\n\
    \        var max_nested = 0\n        var current_nested = 0\n        for char\
    \ in group {\n            if char == \"(\" {\n                paren_stack.push(char)\n\
    \                current_nested += 1\n                if current_nested > max_nested\
    \ {\n                    max_nested = current_nested\n                }\n    \
    \        } else if char == \")\" {\n                paren_stack.pop()\n      \
    \          current_nested -= 1\n            }\n        }\n        max_nested_parens.append(max_nested)\n\
    \    }\n    return max_nested_parens", "    var result = [Int]()\n    let paren_groups\
    \ = paren_string.components(separatedBy: \" \")\n    for paren_group in paren_groups\
    \ {\n        result.append(parse_nested_parens_helper(paren_group: paren_group))\n\
    \    }\n    return result", "    var paren_groups = paren_string.components(separatedBy:\
    \ \" \")\n    var max_nesting = [Int]()\n    for paren_group in paren_groups {\n\
    \        var nesting_level = 0\n        var max_level = 0\n        for char in\
    \ paren_group {\n            if char == \"(\" {\n                nesting_level\
    \ += 1\n            } else if char == \")\" {\n                nesting_level -=\
    \ 1\n            }\n            if nesting_level > max_level {\n             \
    \   max_level = nesting_level\n            }\n        }\n        max_nesting.append(max_level)\n\
    \    }\n    return max_nesting", "    var result: [Int] = []\n    let paren_groups\
    \ = paren_string.split(separator: \" \")\n    for group in paren_groups {\n  \
    \      var max_depth = 0\n        var depth = 0\n        for char in group {\n\
    \            if char == \"(\" {\n                depth += 1\n            } else\
    \ if char == \")\" {\n                depth -= 1\n            }\n            if\
    \ depth > max_depth {\n                max_depth = depth\n            }\n    \
    \    }\n        result.append(max_depth)\n    }\n    return result", "    var\
    \ result: [Int] = []\n    let groups = paren_string.components(separatedBy: \"\
    \ \")\n    for group in groups {\n        var max_depth = 0\n        var depth\
    \ = 0\n        for char in group {\n            if char == \"(\" {\n         \
    \       depth += 1\n            } else if char == \")\" {\n                depth\
    \ -= 1\n            }\n            if depth > max_depth {\n                max_depth\
    \ = depth\n            }\n        }\n        result.append(max_depth)\n    }\n\
    \    return result", "    var result = [Int]()\n    let groups = paren_string.components(separatedBy:\
    \ \" \")\n    for group in groups {\n        var stack = Stack<Character>()\n\
    \        var max_depth = 0\n        var current_depth = 0\n        for char in\
    \ group {\n            if char == \"(\" {\n                stack.push(char)\n\
    \                current_depth += 1\n                if current_depth > max_depth\
    \ {\n                    max_depth = current_depth\n                }\n      \
    \      } else if char == \")\" {\n                if stack.isEmpty() {\n     \
    \               print(\"Invalid input\")\n                    return []\n    \
    \            }\n                stack.pop()\n                current_depth -=\
    \ 1\n            }\n        }\n        if !stack.isEmpty() {\n            print(\"\
    Invalid input\")\n            return []\n        }\n        result.append(max_depth)\n\
    \    }\n    return result", "    var result = [Int]()\n    let groups = paren_string.components(separatedBy:\
    \ \" \")\n    for group in groups {\n        var stack = Stack<Character>()\n\
    \        var max_depth = 0\n        var depth = 0\n        for char in group {\n\
    \            if char == \"(\" {\n                stack.push(char)\n          \
    \      depth += 1\n                if depth > max_depth {\n                  \
    \  max_depth = depth\n                }\n            } else if char == \")\" {\n\
    \                if stack.isEmpty() {\n                    print(\"Invalid string\"\
    )\n                    return []\n                }\n                stack.pop()\n\
    \                depth -= 1\n            }\n        }\n        if !stack.isEmpty()\
    \ {\n            print(\"Invalid string\")\n            return []\n        }\n\
    \        result.append(max_depth)\n    }\n    return result", "    var max_nesting_levels\
    \ = [Int]()\n    let paren_groups = paren_string.components(separatedBy: \" \"\
    )\n    for group in paren_groups {\n        var nesting_level = 0\n        var\
    \ max_nesting_level = 0\n        for char in group {\n            if char == \"\
    (\" {\n                nesting_level += 1\n            } else if char == \")\"\
    \ {\n                nesting_level -= 1\n            }\n            if nesting_level\
    \ > max_nesting_level {\n                max_nesting_level = nesting_level\n \
    \           }\n        }\n        max_nesting_levels.append(max_nesting_level)\n\
    \    }\n    return max_nesting_levels", "    var max_nesting_levels = [Int]()\n\
    \    var current_nesting_level = 0\n    var max_nesting_level = 0\n    for char\
    \ in paren_string {\n        if char == \"(\" {\n            current_nesting_level\
    \ += 1\n            if current_nesting_level > max_nesting_level {\n         \
    \       max_nesting_level = current_nesting_level\n            }\n        } else\
    \ if char == \")\" {\n            current_nesting_level -= 1\n        } else if\
    \ char == \" \" {\n            max_nesting_levels.append(max_nesting_level)\n\
    \            max_nesting_level = 0\n            current_nesting_level = 0\n  \
    \      }\n    }\n    return max_nesting_levels", "    var max_nesting_levels =\
    \ [Int]()\n    var current_nesting_level = 0\n    var max_nesting_level = 0\n\
    \    var is_nesting_level_reset = false\n    for char in paren_string {\n    \
    \    if char == \"(\" {\n            current_nesting_level += 1\n            if\
    \ current_nesting_level > max_nesting_level {\n                max_nesting_level\
    \ = current_nesting_level\n            }\n        } else if char == \")\" {\n\
    \            current_nesting_level -= 1\n        } else if char == \" \" {\n \
    \           if is_nesting_level_reset {\n                max_nesting_levels.append(max_nesting_level)\n\
    \                max_nesting_level = 0\n                is_nesting_level_reset\
    \ = false\n            }\n        } else {\n            is_nesting_level_reset\
    \ = true\n        }\n    }\n    return max_nesting_levels", "    var max_depth\
    \ = 0\n    var current_depth = 0\n    var max_depths = [Int]()\n    for char in\
    \ paren_string {\n        if char == \"(\" {\n            current_depth += 1\n\
    \            if current_depth > max_depth {\n                max_depth = current_depth\n\
    \            }\n        } else if char == \")\" {\n            current_depth -=\
    \ 1\n        } else if char == \" \" {\n            max_depths.append(max_depth)\n\
    \            max_depth = 0\n            current_depth = 0\n        }\n    }\n\
    \    max_depths.append(max_depth)\n    return max_depths", "    var result: [Int]\
    \ = []\n    let groups = paren_string.split(separator: \" \")\n    for group in\
    \ groups {\n        var max_depth = 0\n        var depth = 0\n        for char\
    \ in group {\n            if char == \"(\" {\n                depth += 1\n   \
    \         } else if char == \")\" {\n                depth -= 1\n            }\n\
    \            if depth > max_depth {\n                max_depth = depth\n     \
    \       }\n        }\n        result.append(max_depth)\n    }\n    return result",
  "    var result = [Int]()\n    let groups = paren_string.split(separator: \" \"\
    )\n    for group in groups {\n        var max_nesting = 0\n        var current_nesting\
    \ = 0\n        for char in group {\n            if char == \"(\" {\n         \
    \       current_nesting += 1\n            } else if char == \")\" {\n        \
    \        current_nesting -= 1\n            }\n            if current_nesting >\
    \ max_nesting {\n                max_nesting = current_nesting\n            }\n\
    \        }\n        result.append(max_nesting)\n    }\n    return result", " \
    \   var result: [Int] = []\n    let groups = paren_string.split(separator: \"\
    \ \")\n    for group in groups {\n        var max_level = 0\n        var level\
    \ = 0\n        for char in group {\n            if char == \"(\" {\n         \
    \       level += 1\n            } else if char == \")\" {\n                level\
    \ -= 1\n            }\n            if level > max_level {\n                max_level\
    \ = level\n            }\n        }\n        result.append(max_level)\n    }\n\
    \    return result", "    var result = [Int]()\n    let paren_groups = paren_string.components(separatedBy:\
    \ \" \")\n    for paren_group in paren_groups {\n        var max_depth = 0\n \
    \       var current_depth = 0\n        for char in paren_group {\n           \
    \ if char == \"(\" {\n                current_depth += 1\n            } else if\
    \ char == \")\" {\n                current_depth -= 1\n            }\n       \
    \     if current_depth > max_depth {\n                max_depth = current_depth\n\
    \            }\n        }\n        result.append(max_depth)\n    }\n    return\
    \ result", "    var result = [Int]()\n    var paren_groups = paren_string.components(separatedBy:\
    \ \" \")\n    for group in paren_groups {\n        var stack = Stack<Character>()\n\
    \        var max_depth = 0\n        var current_depth = 0\n        for paren in\
    \ group {\n            if paren == \"(\" {\n                stack.push(paren)\n\
    \                current_depth += 1\n                if current_depth > max_depth\
    \ {\n                    max_depth = current_depth\n                }\n      \
    \      } else if paren == \")\" {\n                if stack.isEmpty() {\n    \
    \                print(\"Invalid paren group: \\(group)\")\n                 \
    \   break\n                }\n                stack.pop()\n                current_depth\
    \ -= 1\n            }\n        }\n        if !stack.isEmpty() {\n            print(\"\
    Invalid paren group: \\(group)\")\n        }\n        result.append(max_depth)\n\
    \    }\n    return result", "    var result: [Int] = []\n    let groups = paren_string.split(separator:\
    \ \" \")\n    for group in groups {\n        var max_level = 0\n        var curr_level\
    \ = 0\n        for char in group {\n            if char == \"(\" {\n         \
    \       curr_level += 1\n            } else if char == \")\" {\n             \
    \   curr_level -= 1\n            }\n            if curr_level > max_level {\n\
    \                max_level = curr_level\n            }\n        }\n        result.append(max_level)\n\
    \    }\n    return result", "    let groups = paren_string.components(separatedBy:\
    \ \" \")\n    return groups.map { group in\n        var max_nesting = 0\n    \
    \    var current_nesting = 0\n        for char in group {\n            if char\
    \ == \"(\" {\n                current_nesting += 1\n            } else if char\
    \ == \")\" {\n                current_nesting -= 1\n            }\n          \
    \  max_nesting = max(max_nesting, current_nesting)\n        }\n        return\
    \ max_nesting\n    }", "    var max_nesting = 0\n    var current_nesting = 0\n\
    \    var result = [Int]()\n    for char in paren_string {\n        if char ==\
    \ \"(\" {\n            current_nesting += 1\n            if current_nesting >\
    \ max_nesting {\n                max_nesting = current_nesting\n            }\n\
    \        } else if char == \")\" {\n            current_nesting -= 1\n       \
    \ } else if char == \" \" {\n            result.append(max_nesting)\n        \
    \    max_nesting = 0\n            current_nesting = 0\n        }\n    }\n    result.append(max_nesting)\n\
    \    return result", "    var result: [Int] = []\n    let groups = paren_string.components(separatedBy:\
    \ \" \")\n    for group in groups {\n        var count = 0\n        var max_count\
    \ = 0\n        for char in group {\n            if char == \"(\" {\n         \
    \       count += 1\n            } else if char == \")\" {\n                count\
    \ -= 1\n            }\n            if count > max_count {\n                max_count\
    \ = count\n            }\n        }\n        result.append(max_count)\n    }\n\
    \    return result", "    var max_nesting = 0\n    var current_nesting = 0\n \
    \   var result = [Int]()\n    for char in paren_string {\n        if char == \"\
    (\" {\n            current_nesting += 1\n            if current_nesting > max_nesting\
    \ {\n                max_nesting = current_nesting\n            }\n        } else\
    \ if char == \")\" {\n            current_nesting -= 1\n        } else if char\
    \ == \" \" {\n            result.append(max_nesting)\n            max_nesting\
    \ = 0\n            current_nesting = 0\n        }\n    }\n    result.append(max_nesting)\n\
    \    return result", "    var max_depth = 0\n    var depth = 0\n    var result\
    \ = [Int]()\n    for char in paren_string {\n        if char == \"(\" {\n    \
    \        depth += 1\n            max_depth = max(max_depth, depth)\n        }\
    \ else if char == \")\" {\n            depth -= 1\n        } else if char == \"\
    \ \" {\n            result.append(max_depth)\n            max_depth = 0\n    \
    \        depth = 0\n        }\n    }\n    result.append(max_depth)\n    return\
    \ result", "    var result = [Int]()\n    let groups = paren_string.components(separatedBy:\
    \ \" \")\n    for group in groups {\n        var max_level = 0\n        var level\
    \ = 0\n        for paren in group {\n            if paren == \"(\" {\n       \
    \         level += 1\n            } else if paren == \")\" {\n               \
    \ level -= 1\n            }\n            if level > max_level {\n            \
    \    max_level = level\n            }\n        }\n        result.append(max_level)\n\
    \    }\n    return result", "    var result: [Int] = []\n    let paren_groups\
    \ = paren_string.components(separatedBy: \" \")\n    for group in paren_groups\
    \ {\n        var max_depth = 0\n        var depth = 0\n        for ch in group\
    \ {\n            if ch == \"(\" {\n                depth += 1\n            } else\
    \ if ch == \")\" {\n                depth -= 1\n            }\n            if\
    \ depth > max_depth {\n                max_depth = depth\n            }\n    \
    \    }\n        result.append(max_depth)\n    }\n    return result", "    var\
    \ result = [Int]()\n    let groups = paren_string.components(separatedBy: \" \"\
    )\n    for group in groups {\n        var max_depth = 0\n        var depth = 0\n\
    \        for char in group {\n            if char == \"(\" {\n               \
    \ depth += 1\n            } else if char == \")\" {\n                depth -=\
    \ 1\n            }\n            if depth > max_depth {\n                max_depth\
    \ = depth\n            }\n        }\n        result.append(max_depth)\n    }\n\
    \    return result", "    let groups = paren_string.split(separator: \" \")\n\
    \    var max_nesting = [Int]()\n    for group in groups {\n        var max_nesting_level\
    \ = 0\n        var current_nesting_level = 0\n        for char in group {\n  \
    \          if char == \"(\" {\n                current_nesting_level += 1\n  \
    \          } else if char == \")\" {\n                current_nesting_level -=\
    \ 1\n            }\n            if current_nesting_level > max_nesting_level {\n\
    \                max_nesting_level = current_nesting_level\n            }\n  \
    \      }\n        max_nesting.append(max_nesting_level)\n    }\n    return max_nesting",
  "    let groups = paren_string.components(separatedBy: \" \")\n    var max_nesting_levels\
    \ = [Int]()\n    for group in groups {\n        var max_nesting_level = 0\n  \
    \      var current_nesting_level = 0\n        for char in group {\n          \
    \  if char == \"(\" {\n                current_nesting_level += 1\n          \
    \  } else if char == \")\" {\n                current_nesting_level -= 1\n   \
    \         }\n            if current_nesting_level > max_nesting_level {\n    \
    \            max_nesting_level = current_nesting_level\n            }\n      \
    \  }\n        max_nesting_levels.append(max_nesting_level)\n    }\n    return\
    \ max_nesting_levels", "    var result = [Int]()\n    let groups = paren_string.split(separator:\
    \ \" \")\n    for group in groups {\n        var max_level = 0\n        var level\
    \ = 0\n        for char in group {\n            if char == \"(\" {\n         \
    \       level += 1\n            } else if char == \")\" {\n                level\
    \ -= 1\n            }\n            if level > max_level {\n                max_level\
    \ = level\n            }\n        }\n        result.append(max_level)\n    }\n\
    \    return result", "    var result = [Int]()\n    let groups = paren_string.components(separatedBy:\
    \ \" \")\n    for group in groups {\n        var max_level = 0\n        var level\
    \ = 0\n        for char in group {\n            if char == \"(\" {\n         \
    \       level += 1\n            } else if char == \")\" {\n                level\
    \ -= 1\n            }\n            if level > max_level {\n                max_level\
    \ = level\n            }\n        }\n        result.append(max_level)\n    }\n\
    \    return result", "    var max_depth = 0\n    var depth = 0\n    var max_depths\
    \ = [Int]()\n    for char in paren_string {\n        if char == \"(\" {\n    \
    \        depth += 1\n            if depth > max_depth {\n                max_depth\
    \ = depth\n            }\n        } else if char == \")\" {\n            depth\
    \ -= 1\n        } else if char == \" \" {\n            max_depths.append(max_depth)\n\
    \            max_depth = 0\n            depth = 0\n        }\n    }\n    return\
    \ max_depths", "    var paren_stack = Stack<Character>()\n    var max_depth =\
    \ 0\n    var depths = [Int]()\n    var current_depth = 0\n    for char in paren_string\
    \ {\n        if char == \"(\" {\n            paren_stack.push(char)\n        \
    \    current_depth += 1\n            if current_depth > max_depth {\n        \
    \        max_depth = current_depth\n            }\n        } else if char == \"\
    )\" {\n            paren_stack.pop()\n            current_depth -= 1\n       \
    \ } else if char == \" \" {\n            depths.append(max_depth)\n          \
    \  max_depth = 0\n            current_depth = 0\n        }\n    }\n    depths.append(max_depth)\n\
    \    return depths", "    var result: [Int] = []\n    let groups = paren_string.split(separator:\
    \ \" \")\n    for group in groups {\n        var max_depth = 0\n        var current_depth\
    \ = 0\n        for char in group {\n            if char == \"(\" {\n         \
    \       current_depth += 1\n            } else if char == \")\" {\n          \
    \      current_depth -= 1\n            }\n            if current_depth > max_depth\
    \ {\n                max_depth = current_depth\n            }\n        }\n   \
    \     result.append(max_depth)\n    }\n    return result", "    var paren_groups\
    \ = paren_string.components(separatedBy: \" \")\n    var max_nesting = [Int]()\n\
    \    for paren_group in paren_groups {\n        var current_nesting = 0\n    \
    \    var max_nesting_in_group = 0\n        for char in paren_group {\n       \
    \     if char == \"(\" {\n                current_nesting += 1\n            }\
    \ else if char == \")\" {\n                current_nesting -= 1\n            }\n\
    \            if current_nesting > max_nesting_in_group {\n                max_nesting_in_group\
    \ = current_nesting\n            }\n        }\n        max_nesting.append(max_nesting_in_group)\n\
    \    }\n    return max_nesting", "    var paren_groups = paren_string.components(separatedBy:\
    \ \" \")\n    var max_nesting_levels = [Int]()\n    for group in paren_groups\
    \ {\n        var current_nesting_level = 0\n        var max_nesting_level = 0\n\
    \        for char in group {\n            if char == \"(\" {\n               \
    \ current_nesting_level += 1\n            } else if char == \")\" {\n        \
    \        current_nesting_level -= 1\n            }\n            if current_nesting_level\
    \ > max_nesting_level {\n                max_nesting_level = current_nesting_level\n\
    \            }\n        }\n        max_nesting_levels.append(max_nesting_level)\n\
    \    }\n    return max_nesting_levels", "    var result = [Int]()\n    let groups\
    \ = paren_string.components(separatedBy: \" \")\n    for group in groups {\n \
    \       var max_depth = 0\n        var depth = 0\n        for char in group {\n\
    \            if char == \"(\" {\n                depth += 1\n            } else\
    \ if char == \")\" {\n                depth -= 1\n            }\n            if\
    \ depth > max_depth {\n                max_depth = depth\n            }\n    \
    \    }\n        result.append(max_depth)\n    }\n    return result", "    var\
    \ paren_groups = paren_string.components(separatedBy: \" \")\n    var max_nesting_levels\
    \ = [Int]()\n    for paren_group in paren_groups {\n        var max_nesting_level\
    \ = 0\n        var current_nesting_level = 0\n        for char in paren_group\
    \ {\n            if char == \"(\" {\n                current_nesting_level +=\
    \ 1\n            } else if char == \")\" {\n                current_nesting_level\
    \ -= 1\n            }\n            if current_nesting_level > max_nesting_level\
    \ {\n                max_nesting_level = current_nesting_level\n            }\n\
    \        }\n        max_nesting_levels.append(max_nesting_level)\n    }\n    return\
    \ max_nesting_levels", "    var result = [Int]()\n    var paren_groups = paren_string.components(separatedBy:\
    \ \" \")\n    for paren_group in paren_groups {\n        var stack = Stack<Character>()\n\
    \        var max_depth = 0\n        var depth = 0\n        for paren in paren_group\
    \ {\n            if paren == \"(\" {\n                stack.push(paren)\n    \
    \            depth += 1\n                if depth > max_depth {\n            \
    \        max_depth = depth\n                }\n            } else if paren ==\
    \ \")\" {\n                if !stack.isEmpty() {\n                    stack.pop()\n\
    \                    depth -= 1\n                }\n            }\n        }\n\
    \        result.append(max_depth)\n    }\n    return result", "    var result\
    \ = [Int]()\n    let groups = paren_string.split(separator: \" \")\n    for group\
    \ in groups {\n        var max_depth = 0\n        var depth = 0\n        for char\
    \ in group {\n            if char == \"(\" {\n                depth += 1\n   \
    \         } else if char == \")\" {\n                depth -= 1\n            }\n\
    \            if depth > max_depth {\n                max_depth = depth\n     \
    \       }\n        }\n        result.append(max_depth)\n    }\n    return result",
  "    var result: [Int] = []\n    let groups = paren_string.split(separator: \" \"\
    )\n    for group in groups {\n        var max_depth = 0\n        var depth = 0\n\
    \        for c in group {\n            if c == \"(\" {\n                depth\
    \ += 1\n            } else if c == \")\" {\n                depth -= 1\n     \
    \       }\n            if depth > max_depth {\n                max_depth = depth\n\
    \            }\n        }\n        result.append(max_depth)\n    }\n    return\
    \ result", "    var result: [Int] = []\n    let groups = paren_string.components(separatedBy:\
    \ \" \")\n    for group in groups {\n        var max_depth = 0\n        var depth\
    \ = 0\n        for char in group {\n            if char == \"(\" {\n         \
    \       depth += 1\n            } else if char == \")\" {\n                depth\
    \ -= 1\n            }\n            if depth > max_depth {\n                max_depth\
    \ = depth\n            }\n        }\n        result.append(max_depth)\n    }\n\
    \    return result", "    var max_nesting_levels = [Int]()\n    let paren_groups\
    \ = paren_string.components(separatedBy: \" \")\n    for paren_group in paren_groups\
    \ {\n        var nesting_level = 0\n        var max_nesting_level = 0\n      \
    \  for paren in paren_group {\n            if paren == \"(\" {\n             \
    \   nesting_level += 1\n            } else if paren == \")\" {\n             \
    \   nesting_level -= 1\n            }\n            if nesting_level > max_nesting_level\
    \ {\n                max_nesting_level = nesting_level\n            }\n      \
    \  }\n        max_nesting_levels.append(max_nesting_level)\n    }\n    return\
    \ max_nesting_levels", "    var result = [Int]()\n    let groups = paren_string.split(separator:\
    \ \" \")\n    for group in groups {\n        var max_depth = 0\n        var current_depth\
    \ = 0\n        for char in group {\n            if char == \"(\" {\n         \
    \       current_depth += 1\n            } else if char == \")\" {\n          \
    \      current_depth -= 1\n            }\n            if current_depth > max_depth\
    \ {\n                max_depth = current_depth\n            }\n        }\n   \
    \     result.append(max_depth)\n    }\n    return result", "    let paren_groups\
    \ = paren_string.components(separatedBy: \" \")\n    var result = [Int]()\n  \
    \  for paren_group in paren_groups {\n        var stack = [Character]()\n    \
    \    var max_depth = 0\n        var current_depth = 0\n        for char in paren_group\
    \ {\n            if char == \"(\" {\n                stack.append(char)\n    \
    \            current_depth += 1\n                if current_depth > max_depth\
    \ {\n                    max_depth = current_depth\n                }\n      \
    \      } else if char == \")\" {\n                if stack.count > 0 {\n     \
    \               stack.removeLast()\n                    current_depth -= 1\n \
    \               }\n            }\n        }\n        result.append(max_depth)\n\
    \    }\n    return result", "    var result: [Int] = []\n    let paren_groups\
    \ = paren_string.components(separatedBy: \" \")\n    for paren_group in paren_groups\
    \ {\n        var max_level = 0\n        var level = 0\n        for char in paren_group\
    \ {\n            if char == \"(\" {\n                level += 1\n            }\
    \ else if char == \")\" {\n                level -= 1\n            }\n       \
    \     if level > max_level {\n                max_level = level\n            }\n\
    \        }\n        result.append(max_level)\n    }\n    return result", "   \
    \ var result = [Int]()\n    let groups = paren_string.split(separator: \" \")\n\
    \    for group in groups {\n        var max_nesting = 0\n        var current_nesting\
    \ = 0\n        for char in group {\n            if char == \"(\" {\n         \
    \       current_nesting += 1\n            } else if char == \")\" {\n        \
    \        current_nesting -= 1\n            }\n            if current_nesting >\
    \ max_nesting {\n                max_nesting = current_nesting\n            }\n\
    \        }\n        result.append(max_nesting)\n    }\n    return result", " \
    \   var result = [Int]()\n    let groups = paren_string.split(separator: \" \"\
    )\n    for group in groups {\n        var max_level = 0\n        var level = 0\n\
    \        for char in group {\n            if char == \"(\" {\n               \
    \ level += 1\n            } else if char == \")\" {\n                level -=\
    \ 1\n            }\n            if level > max_level {\n                max_level\
    \ = level\n            }\n        }\n        result.append(max_level)\n    }\n\
    \    return result", "    var result = [Int]()\n    let groups = paren_string.split(separator:\
    \ \" \")\n    for group in groups {\n        var max_depth = 0\n        var depth\
    \ = 0\n        for char in group {\n            if char == \"(\" {\n         \
    \       depth += 1\n            } else if char == \")\" {\n                depth\
    \ -= 1\n            }\n            if depth > max_depth {\n                max_depth\
    \ = depth\n            }\n        }\n        result.append(max_depth)\n    }\n\
    \    return result", "    var max_nesting_levels = [Int]()\n    let paren_groups\
    \ = paren_string.components(separatedBy: \" \")\n    for paren_group in paren_groups\
    \ {\n        var nesting_level = 0\n        var max_nesting_level = 0\n      \
    \  for paren in paren_group {\n            if paren == \"(\" {\n             \
    \   nesting_level += 1\n            } else if paren == \")\" {\n             \
    \   nesting_level -= 1\n            }\n            if nesting_level > max_nesting_level\
    \ {\n                max_nesting_level = nesting_level\n            }\n      \
    \  }\n        max_nesting_levels.append(max_nesting_level)\n    }\n    return\
    \ max_nesting_levels", "    var result = [Int]()\n    var current_max = 0\n  \
    \  var current_count = 0\n    for char in paren_string {\n        if char == \"\
    (\" {\n            current_count += 1\n            if current_count > current_max\
    \ {\n                current_max = current_count\n            }\n        } else\
    \ if char == \")\" {\n            current_count -= 1\n        } else if char ==\
    \ \" \" {\n            result.append(current_max)\n            current_max = 0\n\
    \            current_count = 0\n        }\n    }\n    result.append(current_max)\n\
    \    return result", "    var result: [Int] = []\n    let groups = paren_string.components(separatedBy:\
    \ \" \")\n    for group in groups {\n        var max_level = 0\n        var level\
    \ = 0\n        for char in group {\n            if char == \"(\" {\n         \
    \       level += 1\n            } else if char == \")\" {\n                level\
    \ -= 1\n            }\n            if level > max_level {\n                max_level\
    \ = level\n            }\n        }\n        result.append(max_level)\n    }\n\
    \    return result", "    var paren_groups = paren_string.components(separatedBy:\
    \ \" \")\n    var max_nesting_levels = [Int]()\n    for paren_group in paren_groups\
    \ {\n        var current_nesting_level = 0\n        var max_nesting_level = 0\n\
    \        for paren in paren_group {\n            if paren == \"(\" {\n       \
    \         current_nesting_level += 1\n            } else if paren == \")\" {\n\
    \                current_nesting_level -= 1\n            }\n            if current_nesting_level\
    \ > max_nesting_level {\n                max_nesting_level = current_nesting_level\n\
    \            }\n        }\n        max_nesting_levels.append(max_nesting_level)\n\
    \    }\n    return max_nesting_levels", "    var result: [Int] = []\n    let paren_groups\
    \ = paren_string.components(separatedBy: \" \")\n    for paren_group in paren_groups\
    \ {\n        var max_nesting = 0\n        var current_nesting = 0\n        for\
    \ char in paren_group {\n            if char == \"(\" {\n                current_nesting\
    \ += 1\n            } else if char == \")\" {\n                current_nesting\
    \ -= 1\n            }\n            if current_nesting > max_nesting {\n      \
    \          max_nesting = current_nesting\n            }\n        }\n        result.append(max_nesting)\n\
    \    }\n    return result", "    var max_nesting_levels = [Int]()\n    var current_nesting_level\
    \ = 0\n    var max_nesting_level = 0\n    var is_in_parens = false\n    for char\
    \ in paren_string {\n        if char == \"(\" {\n            is_in_parens = true\n\
    \            current_nesting_level += 1\n            if current_nesting_level\
    \ > max_nesting_level {\n                max_nesting_level = current_nesting_level\n\
    \            }\n        } else if char == \")\" {\n            current_nesting_level\
    \ -= 1\n        } else if char == \" \" {\n            if is_in_parens {\n   \
    \             is_in_parens = false\n                max_nesting_levels.append(max_nesting_level)\n\
    \                max_nesting_level = 0\n                current_nesting_level\
    \ = 0\n            }\n        }\n    }\n    return max_nesting_levels", "    var\
    \ result = [Int]()\n    let groups = paren_string.split(separator: \" \")\n  \
    \  for group in groups {\n        var max_level = 0\n        var level = 0\n \
    \       for char in group {\n            if char == \"(\" {\n                level\
    \ += 1\n            } else if char == \")\" {\n                level -= 1\n  \
    \          }\n            if level > max_level {\n                max_level =\
    \ level\n            }\n        }\n        result.append(max_level)\n    }\n \
    \   return result", "    var paren_groups = paren_string.split(separator: \" \"\
    )\n    var max_levels = [Int]()\n    for group in paren_groups {\n        var\
    \ level = 0\n        var max_level = 0\n        for char in group {\n        \
    \    if char == \"(\" {\n                level += 1\n            } else if char\
    \ == \")\" {\n                level -= 1\n            }\n            if level\
    \ > max_level {\n                max_level = level\n            }\n        }\n\
    \        max_levels.append(max_level)\n    }\n    return max_levels", "    var\
    \ max_nesting_levels = [Int]()\n    var current_nesting_level = 0\n    var max_nesting_level\
    \ = 0\n    var paren_string_array = Array(paren_string)\n    for char in paren_string_array\
    \ {\n        if char == \"(\" {\n            current_nesting_level += 1\n    \
    \        if current_nesting_level > max_nesting_level {\n                max_nesting_level\
    \ = current_nesting_level\n            }\n        } else if char == \")\" {\n\
    \            current_nesting_level -= 1\n        } else if char == \" \" {\n \
    \           max_nesting_levels.append(max_nesting_level)\n            max_nesting_level\
    \ = 0\n            current_nesting_level = 0\n        }\n    }\n    return max_nesting_levels",
  "    var result: [Int] = []\n    let groups = paren_string.split(separator: \" \"\
    )\n    for group in groups {\n        var max_nesting = 0\n        var current_nesting\
    \ = 0\n        for char in group {\n            if char == \"(\" {\n         \
    \       current_nesting += 1\n            } else if char == \")\" {\n        \
    \        current_nesting -= 1\n            }\n            if current_nesting >\
    \ max_nesting {\n                max_nesting = current_nesting\n            }\n\
    \        }\n        result.append(max_nesting)\n    }\n    return result", " \
    \   var paren_groups = paren_string.split(separator: \" \")\n    var max_nesting_levels\
    \ = [Int]()\n    for paren_group in paren_groups {\n        var max_nesting_level\
    \ = 0\n        var current_nesting_level = 0\n        for paren in paren_group\
    \ {\n            if paren == \"(\" {\n                current_nesting_level +=\
    \ 1\n            } else if paren == \")\" {\n                current_nesting_level\
    \ -= 1\n            }\n            if current_nesting_level > max_nesting_level\
    \ {\n                max_nesting_level = current_nesting_level\n            }\n\
    \        }\n        max_nesting_levels.append(max_nesting_level)\n    }\n    return\
    \ max_nesting_levels", "    var max_depth = 0\n    var depth = 0\n    var result\
    \ = [Int]()\n    for char in paren_string {\n        if char == \"(\" {\n    \
    \        depth += 1\n            max_depth = max(max_depth, depth)\n        }\
    \ else if char == \")\" {\n            depth -= 1\n        } else if char == \"\
    \ \" {\n            result.append(max_depth)\n            max_depth = 0\n    \
    \        depth = 0\n        }\n    }\n    result.append(max_depth)\n    return\
    \ result", "    var paren_groups = paren_string.components(separatedBy: \" \"\
    )\n    var result = [Int]()\n    for group in paren_groups {\n        var max_nesting\
    \ = 0\n        var current_nesting = 0\n        for char in group {\n        \
    \    if char == \"(\" {\n                current_nesting += 1\n            } else\
    \ if char == \")\" {\n                current_nesting -= 1\n            }\n  \
    \          if current_nesting > max_nesting {\n                max_nesting = current_nesting\n\
    \            }\n        }\n        result.append(max_nesting)\n    }\n    return\
    \ result", "    var result: [Int] = []\n    var paren_stack: [Character] = []\n\
    \    var current_max: Int = 0\n    for char in paren_string {\n        if char\
    \ == \"(\" {\n            paren_stack.append(char)\n            current_max +=\
    \ 1\n        } else if char == \")\" {\n            paren_stack.removeLast()\n\
    \            if paren_stack.isEmpty {\n                result.append(current_max)\n\
    \                current_max = 0\n            }\n        }\n    }\n    return\
    \ result", "    var result = [Int]()\n    let groups = paren_string.components(separatedBy:\
    \ \" \")\n    for group in groups {\n        var max_depth = 0\n        var depth\
    \ = 0\n        for char in group {\n            if char == \"(\" {\n         \
    \       depth += 1\n            } else if char == \")\" {\n                depth\
    \ -= 1\n            }\n            if depth > max_depth {\n                max_depth\
    \ = depth\n            }\n        }\n        result.append(max_depth)\n    }\n\
    \    return result", "    var result: [Int] = []\n    let paren_groups = paren_string.components(separatedBy:\
    \ \" \")\n    for paren_group in paren_groups {\n        var max_nesting = 0\n\
    \        var current_nesting = 0\n        for paren in paren_group {\n       \
    \     if paren == \"(\" {\n                current_nesting += 1\n            }\
    \ else if paren == \")\" {\n                current_nesting -= 1\n           \
    \ }\n            if current_nesting > max_nesting {\n                max_nesting\
    \ = current_nesting\n            }\n        }\n        result.append(max_nesting)\n\
    \    }\n    return result", "    var result: [Int] = []\n    let paren_groups\
    \ = paren_string.components(separatedBy: \" \")\n    for group in paren_groups\
    \ {\n        var max_depth = 0\n        var current_depth = 0\n        for char\
    \ in group {\n            if char == \"(\" {\n                current_depth +=\
    \ 1\n                if current_depth > max_depth {\n                    max_depth\
    \ = current_depth\n                }\n            } else if char == \")\" {\n\
    \                current_depth -= 1\n            }\n        }\n        result.append(max_depth)\n\
    \    }\n    return result", "    var result: [Int] = []\n    let groups = paren_string.components(separatedBy:\
    \ \" \")\n    for group in groups {\n        var max_depth = 0\n        var depth\
    \ = 0\n        for char in group {\n            if char == \"(\" {\n         \
    \       depth += 1\n            } else if char == \")\" {\n                depth\
    \ -= 1\n            }\n            if depth > max_depth {\n                max_depth\
    \ = depth\n            }\n        }\n        result.append(max_depth)\n    }\n\
    \    return result", "    var result = [Int]()\n    let groups = paren_string.components(separatedBy:\
    \ \" \")\n    for group in groups {\n        result.append(parse_nested_parens_helper(paren_string:\
    \ group))\n    }\n    return result", "    var paren_groups = paren_string.components(separatedBy:\
    \ \" \")\n    var max_nesting_levels = [Int]()\n    for paren_group in paren_groups\
    \ {\n        var max_nesting_level = 0\n        var current_nesting_level = 0\n\
    \        for paren in paren_group {\n            if paren == \"(\" {\n       \
    \         current_nesting_level += 1\n            } else if paren == \")\" {\n\
    \                current_nesting_level -= 1\n            }\n            if current_nesting_level\
    \ > max_nesting_level {\n                max_nesting_level = current_nesting_level\n\
    \            }\n        }\n        max_nesting_levels.append(max_nesting_level)\n\
    \    }\n    return max_nesting_levels", "    var result = [Int]()\n    let groups\
    \ = paren_string.components(separatedBy: \" \")\n    for group in groups {\n \
    \       var depth = 0\n        var max_depth = 0\n        for char in group {\n\
    \            if char == \"(\" {\n                depth += 1\n            } else\
    \ if char == \")\" {\n                depth -= 1\n            }\n            if\
    \ depth > max_depth {\n                max_depth = depth\n            }\n    \
    \    }\n        result.append(max_depth)\n    }\n    return result", "    var\
    \ results = [Int]()\n    let groups = paren_string.components(separatedBy: \"\
    \ \")\n    for group in groups {\n        results.append(parse_nested_parens_helper(paren_string:\
    \ group))\n    }\n    return results", "    var max_nesting_levels = [Int]()\n\
    \    let paren_groups = paren_string.split(separator: \" \")\n    for group in\
    \ paren_groups {\n        var max_nesting_level = 0\n        var current_nesting_level\
    \ = 0\n        for char in group {\n            if char == \"(\" {\n         \
    \       current_nesting_level += 1\n            } else if char == \")\" {\n  \
    \              current_nesting_level -= 1\n            }\n            if current_nesting_level\
    \ > max_nesting_level {\n                max_nesting_level = current_nesting_level\n\
    \            }\n        }\n        max_nesting_levels.append(max_nesting_level)\n\
    \    }\n    return max_nesting_levels", "    let paren_groups = paren_string.components(separatedBy:\
    \ \" \")\n    var max_nesting_levels = [Int]()\n    for paren_group in paren_groups\
    \ {\n        var max_nesting_level = 0\n        var current_nesting_level = 0\n\
    \        for paren in paren_group {\n            if paren == \"(\" {\n       \
    \         current_nesting_level += 1\n            } else if paren == \")\" {\n\
    \                current_nesting_level -= 1\n            }\n            if current_nesting_level\
    \ > max_nesting_level {\n                max_nesting_level = current_nesting_level\n\
    \            }\n        }\n        max_nesting_levels.append(max_nesting_level)\n\
    \    }\n    return max_nesting_levels", "    let paren_groups = paren_string.components(separatedBy:\
    \ \" \")\n    var max_nesting_levels = [Int]()\n    for paren_group in paren_groups\
    \ {\n        var current_nesting_level = 0\n        var max_nesting_level = 0\n\
    \        for paren in paren_group {\n            if paren == \"(\" {\n       \
    \         current_nesting_level += 1\n            } else if paren == \")\" {\n\
    \                current_nesting_level -= 1\n            }\n            if current_nesting_level\
    \ > max_nesting_level {\n                max_nesting_level = current_nesting_level\n\
    \            }\n        }\n        max_nesting_levels.append(max_nesting_level)\n\
    \    }\n    return max_nesting_levels", "    var max_nesting_counts = [Int]()\n\
    \    let paren_groups = paren_string.components(separatedBy: \" \")\n    for paren_group\
    \ in paren_groups {\n        var nesting_count = 0\n        var max_nesting_count\
    \ = 0\n        for paren in paren_group {\n            if paren == \"(\" {\n \
    \               nesting_count += 1\n            } else if paren == \")\" {\n \
    \               nesting_count -= 1\n            }\n            if nesting_count\
    \ > max_nesting_count {\n                max_nesting_count = nesting_count\n \
    \           }\n        }\n        max_nesting_counts.append(max_nesting_count)\n\
    \    }\n    return max_nesting_counts", "    var max_nesting_levels = [Int]()\n\
    \    let groups = paren_string.split(separator: \" \")\n    for group in groups\
    \ {\n        var nesting_level = 0\n        var max_nesting_level = 0\n      \
    \  for char in group {\n            if char == \"(\" {\n                nesting_level\
    \ += 1\n            } else if char == \")\" {\n                nesting_level -=\
    \ 1\n            }\n            if nesting_level > max_nesting_level {\n     \
    \           max_nesting_level = nesting_level\n            }\n        }\n    \
    \    max_nesting_levels.append(max_nesting_level)\n    }\n    return max_nesting_levels",
  "    var result = [Int]()\n    let groups = paren_string.components(separatedBy:\
    \ \" \")\n    for group in groups {\n        result.append(parse_nested_parens_helper(paren_string:\
    \ group))\n    }\n    return result", "    var max_nesting = 0\n    var nesting_level\
    \ = 0\n    var result = [Int]()\n    for char in paren_string {\n        if char\
    \ == \"(\" {\n            nesting_level += 1\n            if nesting_level > max_nesting\
    \ {\n                max_nesting = nesting_level\n            }\n        } else\
    \ if char == \")\" {\n            nesting_level -= 1\n        } else if char ==\
    \ \" \" {\n            result.append(max_nesting)\n            max_nesting = 0\n\
    \            nesting_level = 0\n        }\n    }\n    result.append(max_nesting)\n\
    \    return result", "    var result = [Int]()\n    let paren_groups = paren_string.split(separator:\
    \ \" \")\n    for paren_group in paren_groups {\n        var max_depth = 0\n \
    \       var depth = 0\n        for paren in paren_group {\n            if paren\
    \ == \"(\" {\n                depth += 1\n            } else if paren == \")\"\
    \ {\n                depth -= 1\n            }\n            if depth > max_depth\
    \ {\n                max_depth = depth\n            }\n        }\n        result.append(max_depth)\n\
    \    }\n    return result", "    var result = [Int]()\n    let groups = paren_string.components(separatedBy:\
    \ \" \")\n    for group in groups {\n        var stack = [Character]()\n     \
    \   var max_depth = 0\n        var current_depth = 0\n        for char in group\
    \ {\n            if char == \"(\" {\n                stack.append(char)\n    \
    \            current_depth += 1\n                if current_depth > max_depth\
    \ {\n                    max_depth = current_depth\n                }\n      \
    \      } else if char == \")\" {\n                stack.popLast()\n          \
    \      current_depth -= 1\n            }\n        }\n        result.append(max_depth)\n\
    \    }\n    return result", "    var result = [Int]()\n    let groups = paren_string.split(separator:\
    \ \" \")\n    for group in groups {\n        var max_level = 0\n        var level\
    \ = 0\n        for char in group {\n            if char == \"(\" {\n         \
    \       level += 1\n            } else if char == \")\" {\n                level\
    \ -= 1\n            }\n            if level > max_level {\n                max_level\
    \ = level\n            }\n        }\n        result.append(max_level)\n    }\n\
    \    return result", "    var result: [Int] = []\n    let groups = paren_string.components(separatedBy:\
    \ \" \")\n    for group in groups {\n        var stack: [Character] = []\n   \
    \     var max_depth = 0\n        var depth = 0\n        for char in group {\n\
    \            if char == \"(\" {\n                stack.append(char)\n        \
    \        depth += 1\n                if depth > max_depth {\n                \
    \    max_depth = depth\n                }\n            } else if char == \")\"\
    \ {\n                stack.popLast()\n                depth -= 1\n           \
    \ }\n        }\n        result.append(max_depth)\n    }\n    return result", " \
    \   var paren_stack: [Character] = []\n    var max_depth: Int = 0\n    var depth_list:\
    \ [Int] = []\n    var current_depth: Int = 0\n    for char in paren_string {\n\
    \        if char == \"(\" {\n            paren_stack.append(char)\n          \
    \  current_depth += 1\n            if current_depth > max_depth {\n          \
    \      max_depth = current_depth\n            }\n        } else if char == \"\
    )\" {\n            paren_stack.popLast()\n            current_depth -= 1\n   \
    \     } else if char == \" \" {\n            depth_list.append(max_depth)\n  \
    \          max_depth = 0\n            current_depth = 0\n        }\n    }\n  \
    \  depth_list.append(max_depth)\n    return depth_list", "    var result: [Int]\
    \ = []\n    let groups = paren_string.split(separator: \" \")\n    for group in\
    \ groups {\n        var max_depth = 0\n        var depth = 0\n        for char\
    \ in group {\n            if char == \"(\" {\n                depth += 1\n   \
    \         } else if char == \")\" {\n                depth -= 1\n            }\n\
    \            if depth > max_depth {\n                max_depth = depth\n     \
    \       }\n        }\n        result.append(max_depth)\n    }\n    return result",
  "    var paren_groups = paren_string.components(separatedBy: \" \")\n    var paren_levels\
    \ = [Int]()\n    for group in paren_groups {\n        var level = 0\n        var\
    \ max_level = 0\n        for char in group {\n            if char == \"(\" {\n\
    \                level += 1\n            } else if char == \")\" {\n         \
    \       level -= 1\n            }\n            if level > max_level {\n      \
    \          max_level = level\n            }\n        }\n        paren_levels.append(max_level)\n\
    \    }\n    return paren_levels", "    var result: [Int] = []\n    let groups\
    \ = paren_string.components(separatedBy: \" \")\n    for group in groups {\n \
    \       var count = 0\n        var max_count = 0\n        for char in group {\n\
    \            if char == \"(\" {\n                count += 1\n            } else\
    \ if char == \")\" {\n                count -= 1\n            }\n            if\
    \ count > max_count {\n                max_count = count\n            }\n    \
    \    }\n        result.append(max_count)\n    }\n    return result", "    let\
    \ groups = paren_string.components(separatedBy: \" \")\n    var result = [Int]()\n\
    \    for group in groups {\n        result.append(parse_nested_parens_helper(paren_string:\
    \ group))\n    }\n    return result", "    var result = [Int]()\n    let groups\
    \ = paren_string.components(separatedBy: \" \")\n    for group in groups {\n \
    \       var max_nesting = 0\n        var current_nesting = 0\n        for char\
    \ in group {\n            if char == \"(\" {\n                current_nesting\
    \ += 1\n            } else if char == \")\" {\n                current_nesting\
    \ -= 1\n            }\n            if current_nesting > max_nesting {\n      \
    \          max_nesting = current_nesting\n            }\n        }\n        result.append(max_nesting)\n\
    \    }\n    return result", "    var paren_groups = paren_string.components(separatedBy:\
    \ \" \")\n    var max_nesting_levels = [Int]()\n    for group in paren_groups\
    \ {\n        var nesting_level = 0\n        var max_nesting_level = 0\n      \
    \  for char in group {\n            if char == \"(\" {\n                nesting_level\
    \ += 1\n            } else if char == \")\" {\n                nesting_level -=\
    \ 1\n            }\n            if nesting_level > max_nesting_level {\n     \
    \           max_nesting_level = nesting_level\n            }\n        }\n    \
    \    max_nesting_levels.append(max_nesting_level)\n    }\n    return max_nesting_levels",
  "    var result: [Int] = []\n    let groups = paren_string.split(separator: \" \"\
    )\n    for group in groups {\n        var max_level = 0\n        var level = 0\n\
    \        for char in group {\n            if char == \"(\" {\n               \
    \ level += 1\n            } else if char == \")\" {\n                level -=\
    \ 1\n            }\n            if level > max_level {\n                max_level\
    \ = level\n            }\n        }\n        result.append(max_level)\n    }\n\
    \    return result", "    var result = [Int]()\n    let paren_groups = paren_string.components(separatedBy:\
    \ \" \")\n    for group in paren_groups {\n        var max_nesting = 0\n     \
    \   var current_nesting = 0\n        for char in group {\n            if char\
    \ == \"(\" {\n                current_nesting += 1\n            } else if char\
    \ == \")\" {\n                current_nesting -= 1\n            }\n          \
    \  if current_nesting > max_nesting {\n                max_nesting = current_nesting\n\
    \            }\n        }\n        result.append(max_nesting)\n    }\n    return\
    \ result", "    var paren_groups = paren_string.split(separator: \" \")\n    var\
    \ max_nesting_levels = [Int]()\n    for group in paren_groups {\n        var nesting_level\
    \ = 0\n        var max_nesting_level = 0\n        for char in group {\n      \
    \      if char == \"(\" {\n                nesting_level += 1\n            } else\
    \ if char == \")\" {\n                nesting_level -= 1\n            }\n    \
    \        if nesting_level > max_nesting_level {\n                max_nesting_level\
    \ = nesting_level\n            }\n        }\n        max_nesting_levels.append(max_nesting_level)\n\
    \    }\n    return max_nesting_levels", "    var paren_groups = paren_string.components(separatedBy:\
    \ \" \")\n    var paren_levels = [Int]()\n    for paren_group in paren_groups\
    \ {\n        var paren_level = 0\n        var max_level = 0\n        for paren\
    \ in paren_group {\n            if paren == \"(\" {\n                paren_level\
    \ += 1\n            } else if paren == \")\" {\n                paren_level -=\
    \ 1\n            }\n            if paren_level > max_level {\n               \
    \ max_level = paren_level\n            }\n        }\n        paren_levels.append(max_level)\n\
    \    }\n    return paren_levels", "    let groups = paren_string.components(separatedBy:\
    \ \" \")\n    var max_nesting = [Int]()\n    for group in groups {\n        var\
    \ stack = [Character]()\n        var max_nesting_count = 0\n        var current_nesting_count\
    \ = 0\n        for char in group {\n            if char == \"(\" {\n         \
    \       stack.append(char)\n                current_nesting_count += 1\n     \
    \           if current_nesting_count > max_nesting_count {\n                 \
    \   max_nesting_count = current_nesting_count\n                }\n           \
    \ } else if char == \")\" {\n                if stack.isEmpty {\n            \
    \        break\n                }\n                stack.removeLast()\n      \
    \          current_nesting_count -= 1\n            }\n        }\n        max_nesting.append(max_nesting_count)\n\
    \    }\n    return max_nesting", "    var result = [Int]()\n    let groups = paren_string.components(separatedBy:\
    \ \" \")\n    for group in groups {\n        var max_level = 0\n        var level\
    \ = 0\n        for char in group {\n            if char == \"(\" {\n         \
    \       level += 1\n            } else if char == \")\" {\n                level\
    \ -= 1\n            }\n            if level > max_level {\n                max_level\
    \ = level\n            }\n        }\n        result.append(max_level)\n    }\n\
    \    return result", "    var result: [Int] = []\n    let groups = paren_string.components(separatedBy:\
    \ \" \")\n    for group in groups {\n        var max_depth = 0\n        var current_depth\
    \ = 0\n        for char in group {\n            if char == \"(\" {\n         \
    \       current_depth += 1\n            } else if char == \")\" {\n          \
    \      current_depth -= 1\n            }\n            if current_depth > max_depth\
    \ {\n                max_depth = current_depth\n            }\n        }\n   \
    \     result.append(max_depth)\n    }\n    return result", "    var result = [Int]()\n\
    \    let groups = paren_string.split(separator: \" \")\n    for group in groups\
    \ {\n        result.append(parse_nested_parens_helper(paren_string: group))\n\
    \    }\n    return result", "    var paren_array = paren_string.components(separatedBy:\
    \ \" \")\n    var result = [Int]()\n    for paren in paren_array {\n        var\
    \ stack = Stack<Character>()\n        var max_depth = 0\n        var current_depth\
    \ = 0\n        for char in paren {\n            if char == \"(\" {\n         \
    \       stack.push(char)\n                current_depth += 1\n               \
    \ if current_depth > max_depth {\n                    max_depth = current_depth\n\
    \                }\n            } else if char == \")\" {\n                stack.pop()\n\
    \                current_depth -= 1\n            }\n        }\n        result.append(max_depth)\n\
    \    }\n    return result", "    var result = [Int]()\n    var paren_groups =\
    \ paren_string.split(separator: \" \")\n    for paren_group in paren_groups {\n\
    \        var paren_stack = Stack<Character>()\n        var max_nesting = 0\n \
    \       var current_nesting = 0\n        for paren in paren_group {\n        \
    \    if paren == \"(\" {\n                paren_stack.push(paren)\n          \
    \      current_nesting += 1\n                if current_nesting > max_nesting\
    \ {\n                    max_nesting = current_nesting\n                }\n  \
    \          } else if paren == \")\" {\n                paren_stack.pop()\n   \
    \             current_nesting -= 1\n            }\n        }\n        result.append(max_nesting)\n\
    \    }\n    return result", "    var result = [Int]()\n    var paren_stack = Stack<Character>()\n\
    \    var max_depth = 0\n    var depth = 0\n    for char in paren_string {\n  \
    \      if char == \"(\" {\n            paren_stack.push(char)\n            depth\
    \ += 1\n            if depth > max_depth {\n                max_depth = depth\n\
    \            }\n        } else if char == \")\" {\n            paren_stack.pop()\n\
    \            depth -= 1\n        } else if char == \" \" {\n            result.append(max_depth)\n\
    \            max_depth = 0\n            depth = 0\n        }\n    }\n    result.append(max_depth)\n\
    \    return result", "    var max_depth = 0\n    var current_depth = 0\n    var\
    \ max_depths = [Int]()\n    for char in paren_string {\n        if char == \"\
    (\" {\n            current_depth += 1\n            if current_depth > max_depth\
    \ {\n                max_depth = current_depth\n            }\n        } else\
    \ if char == \")\" {\n            current_depth -= 1\n        } else if char ==\
    \ \" \" {\n            max_depths.append(max_depth)\n            max_depth = 0\n\
    \            current_depth = 0\n        }\n    }\n    max_depths.append(max_depth)\n\
    \    return max_depths", "    var paren_groups = paren_string.components(separatedBy:\
    \ \" \")\n    var paren_levels = [Int]()\n    for group in paren_groups {\n  \
    \      var level = 0\n        var max_level = 0\n        for char in group {\n\
    \            if char == \"(\" {\n                level += 1\n            } else\
    \ if char == \")\" {\n                level -= 1\n            }\n            if\
    \ level > max_level {\n                max_level = level\n            }\n    \
    \    }\n        paren_levels.append(max_level)\n    }\n    return paren_levels",
  "    var paren_groups = paren_string.components(separatedBy: \" \")\n    var max_nesting_levels\
    \ = [Int]()\n    for paren_group in paren_groups {\n        var max_nesting_level\
    \ = 0\n        var current_nesting_level = 0\n        for paren in paren_group\
    \ {\n            if paren == \"(\" {\n                current_nesting_level +=\
    \ 1\n            } else if paren == \")\" {\n                current_nesting_level\
    \ -= 1\n            }\n            if current_nesting_level > max_nesting_level\
    \ {\n                max_nesting_level = current_nesting_level\n            }\n\
    \        }\n        max_nesting_levels.append(max_nesting_level)\n    }\n    return\
    \ max_nesting_levels", "    var paren_list = paren_string.split(separator: \"\
    \ \")\n    var result = [Int]()\n    for paren in paren_list {\n        var count\
    \ = 0\n        var max_count = 0\n        for char in paren {\n            if\
    \ char == \"(\" {\n                count += 1\n            } else if char == \"\
    )\" {\n                count -= 1\n            }\n            if count > max_count\
    \ {\n                max_count = count\n            }\n        }\n        result.append(max_count)\n\
    \    }\n    return result", "    var paren_groups = paren_string.components(separatedBy:\
    \ \" \")\n    var max_nesting_levels = [Int]()\n    for paren_group in paren_groups\
    \ {\n        var max_nesting_level = 0\n        var current_nesting_level = 0\n\
    \        for paren in paren_group {\n            if paren == \"(\" {\n       \
    \         current_nesting_level += 1\n            } else if paren == \")\" {\n\
    \                current_nesting_level -= 1\n            }\n            if current_nesting_level\
    \ > max_nesting_level {\n                max_nesting_level = current_nesting_level\n\
    \            }\n        }\n        max_nesting_levels.append(max_nesting_level)\n\
    \    }\n    return max_nesting_levels", "    var result = [Int]()\n    var paren_groups\
    \ = paren_string.components(separatedBy: \" \")\n    for paren_group in paren_groups\
    \ {\n        var max_depth = 0\n        var current_depth = 0\n        for char\
    \ in paren_group {\n            if char == \"(\" {\n                current_depth\
    \ += 1\n            } else if char == \")\" {\n                current_depth -=\
    \ 1\n            }\n            if current_depth > max_depth {\n             \
    \   max_depth = current_depth\n            }\n        }\n        result.append(max_depth)\n\
    \    }\n    return result", "    var result = [Int]()\n    var paren_groups =\
    \ paren_string.split(separator: \" \")\n    for paren_group in paren_groups {\n\
    \        var stack = Stack<Character>()\n        var max_depth = 0\n        var\
    \ current_depth = 0\n        for char in paren_group {\n            if char ==\
    \ \"(\" {\n                current_depth += 1\n                max_depth = max(max_depth,\
    \ current_depth)\n                stack.push(char)\n            } else if char\
    \ == \")\" {\n                current_depth -= 1\n                stack.pop()\n\
    \            }\n        }\n        result.append(max_depth)\n    }\n    return\
    \ result", "    var max_nesting_level = 0\n    var nesting_level = 0\n    var\
    \ max_nesting_levels = [Int]()\n    for char in paren_string {\n        if char\
    \ == \"(\" {\n            nesting_level += 1\n            if nesting_level > max_nesting_level\
    \ {\n                max_nesting_level = nesting_level\n            }\n      \
    \  } else if char == \")\" {\n            nesting_level -= 1\n            if nesting_level\
    \ == 0 {\n                max_nesting_levels.append(max_nesting_level)\n     \
    \           max_nesting_level = 0\n            }\n        }\n    }\n    return\
    \ max_nesting_levels", "    let groups = paren_string.components(separatedBy:\
    \ \" \")\n    var max_nesting = [Int]()\n    for group in groups {\n        var\
    \ max_depth = 0\n        var depth = 0\n        for char in group {\n        \
    \    if char == \"(\" {\n                depth += 1\n            } else if char\
    \ == \")\" {\n                depth -= 1\n            }\n            if depth\
    \ > max_depth {\n                max_depth = depth\n            }\n        }\n\
    \        max_nesting.append(max_depth)\n    }\n    return max_nesting", "    var\
    \ max_nesting_level = [Int]()\n    let groups = paren_string.components(separatedBy:\
    \ \" \")\n    for group in groups {\n        var current_nesting_level = 0\n \
    \       var max_nesting_level_in_group = 0\n        for char in group {\n    \
    \        if char == \"(\" {\n                current_nesting_level += 1\n    \
    \        } else if char == \")\" {\n                current_nesting_level -= 1\n\
    \            }\n            if current_nesting_level > max_nesting_level_in_group\
    \ {\n                max_nesting_level_in_group = current_nesting_level\n    \
    \        }\n        }\n        max_nesting_level.append(max_nesting_level_in_group)\n\
    \    }\n    return max_nesting_level", "    var paren_groups = paren_string.components(separatedBy:\
    \ \" \")\n    var max_nesting_levels = [Int]()\n    for paren_group in paren_groups\
    \ {\n        var max_nesting_level = 0\n        var current_nesting_level = 0\n\
    \        for paren in paren_group {\n            if paren == \"(\" {\n       \
    \         current_nesting_level += 1\n            } else if paren == \")\" {\n\
    \                current_nesting_level -= 1\n            }\n            if current_nesting_level\
    \ > max_nesting_level {\n                max_nesting_level = current_nesting_level\n\
    \            }\n        }\n        max_nesting_levels.append(max_nesting_level)\n\
    \    }\n    return max_nesting_levels", "    var result: [Int] = []\n    let groups\
    \ = paren_string.components(separatedBy: \" \")\n    for group in groups {\n \
    \       var max_nesting = 0\n        var current_nesting = 0\n        for char\
    \ in group {\n            if char == \"(\" {\n                current_nesting\
    \ += 1\n            } else if char == \")\" {\n                current_nesting\
    \ -= 1\n            }\n            if current_nesting > max_nesting {\n      \
    \          max_nesting = current_nesting\n            }\n        }\n        result.append(max_nesting)\n\
    \    }\n    return result", "    var result: [Int] = []\n    let paren_groups\
    \ = paren_string.split(separator: \" \")\n    for paren_group in paren_groups\
    \ {\n        var max_nesting = 0\n        var current_nesting = 0\n        for\
    \ paren in paren_group {\n            if paren == \"(\" {\n                current_nesting\
    \ += 1\n            } else if paren == \")\" {\n                current_nesting\
    \ -= 1\n            }\n            if current_nesting > max_nesting {\n      \
    \          max_nesting = current_nesting\n            }\n        }\n        result.append(max_nesting)\n\
    \    }\n    return result", "    let groups = paren_string.components(separatedBy:\
    \ \" \")\n    var max_nesting = [Int]()\n    for group in groups {\n        var\
    \ stack = [Character]()\n        var max_nesting_level = 0\n        var current_nesting_level\
    \ = 0\n        for char in group {\n            if char == \"(\" {\n         \
    \       stack.append(char)\n                current_nesting_level += 1\n     \
    \           if current_nesting_level > max_nesting_level {\n                 \
    \   max_nesting_level = current_nesting_level\n                }\n           \
    \ } else if char == \")\" {\n                if stack.count > 0 {\n          \
    \          stack.removeLast()\n                    current_nesting_level -= 1\n\
    \                }\n            }\n        }\n        max_nesting.append(max_nesting_level)\n\
    \    }\n    return max_nesting", "    let paren_groups = paren_string.components(separatedBy:\
    \ \" \")\n    var max_nesting_levels = [Int]()\n    for paren_group in paren_groups\
    \ {\n        var nesting_level = 0\n        var max_nesting_level = 0\n      \
    \  for paren in paren_group {\n            if paren == \"(\" {\n             \
    \   nesting_level += 1\n            } else if paren == \")\" {\n             \
    \   nesting_level -= 1\n            }\n            if nesting_level > max_nesting_level\
    \ {\n                max_nesting_level = nesting_level\n            }\n      \
    \  }\n        max_nesting_levels.append(max_nesting_level)\n    }\n    return\
    \ max_nesting_levels", "    var paren_groups = paren_string.split(separator: \"\
    \ \")\n    var max_nesting_levels = [Int]()\n    for group in paren_groups {\n\
    \        var stack = Stack<Character>()\n        var max_nesting_level = 0\n \
    \       var current_nesting_level = 0\n        for paren in group {\n        \
    \    if paren == \"(\" {\n                stack.push(paren)\n                current_nesting_level\
    \ += 1\n                if current_nesting_level > max_nesting_level {\n     \
    \               max_nesting_level = current_nesting_level\n                }\n\
    \            } else if paren == \")\" {\n                if stack.isEmpty() {\n\
    \                    print(\"Invalid string\")\n                    return []\n\
    \                }\n                stack.pop()\n                current_nesting_level\
    \ -= 1\n            }\n        }\n        if !stack.isEmpty() {\n            print(\"\
    Invalid string\")\n            return []\n        }\n        max_nesting_levels.append(max_nesting_level)\n\
    \    }\n    return max_nesting_levels", "    var max_nesting_levels = [Int]()\n\
    \    let groups = paren_string.components(separatedBy: \" \")\n    for group in\
    \ groups {\n        var nesting_level = 0\n        var max_nesting_level = 0\n\
    \        for char in group {\n            if char == \"(\" {\n               \
    \ nesting_level += 1\n            } else if char == \")\" {\n                nesting_level\
    \ -= 1\n            }\n            if nesting_level > max_nesting_level {\n  \
    \              max_nesting_level = nesting_level\n            }\n        }\n \
    \       max_nesting_levels.append(max_nesting_level)\n    }\n    return max_nesting_levels",
  "    var max_nesting = 0\n    var curr_nesting = 0\n    var result = [Int]()\n \
    \   for char in paren_string {\n        if char == \"(\" {\n            curr_nesting\
    \ += 1\n            if curr_nesting > max_nesting {\n                max_nesting\
    \ = curr_nesting\n            }\n        } else if char == \")\" {\n         \
    \   curr_nesting -= 1\n        } else if char == \" \" {\n            result.append(max_nesting)\n\
    \            max_nesting = 0\n            curr_nesting = 0\n        }\n    }\n\
    \    result.append(max_nesting)\n    return result", "    var result = [Int]()\n\
    \    let paren_groups = paren_string.components(separatedBy: \" \")\n    for group\
    \ in paren_groups {\n        var max_nesting = 0\n        var current_nesting\
    \ = 0\n        for char in group {\n            if char == \"(\" {\n         \
    \       current_nesting += 1\n            } else if char == \")\" {\n        \
    \        current_nesting -= 1\n            }\n            if current_nesting >\
    \ max_nesting {\n                max_nesting = current_nesting\n            }\n\
    \        }\n        result.append(max_nesting)\n    }\n    return result", " \
    \   var result = [Int]()\n    let groups = paren_string.components(separatedBy:\
    \ \" \")\n    for group in groups {\n        var max_depth = 0\n        var current_depth\
    \ = 0\n        for char in group {\n            if char == \"(\" {\n         \
    \       current_depth += 1\n            } else if char == \")\" {\n          \
    \      current_depth -= 1\n            }\n            if current_depth > max_depth\
    \ {\n                max_depth = current_depth\n            }\n        }\n   \
    \     result.append(max_depth)\n    }\n    return result", "    var result: [Int]\
    \ = []\n    let groups = paren_string.components(separatedBy: \" \")\n    for\
    \ group in groups {\n        var max_level = 0\n        var level = 0\n      \
    \  for char in group {\n            if char == \"(\" {\n                level\
    \ += 1\n            } else if char == \")\" {\n                level -= 1\n  \
    \          }\n            if level > max_level {\n                max_level =\
    \ level\n            }\n        }\n        result.append(max_level)\n    }\n \
    \   return result", "    var max_nesting = 0\n    var nesting_level = 0\n    var\
    \ result = [Int]()\n    for char in paren_string {\n        if char == \"(\" {\n\
    \            nesting_level += 1\n            if nesting_level > max_nesting {\n\
    \                max_nesting = nesting_level\n            }\n        } else if\
    \ char == \")\" {\n            nesting_level -= 1\n        } else if char == \"\
    \ \" {\n            result.append(max_nesting)\n            max_nesting = 0\n\
    \            nesting_level = 0\n        }\n    }\n    result.append(max_nesting)\n\
    \    return result", "    var result: [Int] = []\n    let paren_groups = paren_string.components(separatedBy:\
    \ \" \")\n    for group in paren_groups {\n        var max_nesting = 0\n     \
    \   var current_nesting = 0\n        for char in group {\n            if char\
    \ == \"(\" {\n                current_nesting += 1\n            } else if char\
    \ == \")\" {\n                current_nesting -= 1\n            }\n          \
    \  if current_nesting > max_nesting {\n                max_nesting = current_nesting\n\
    \            }\n        }\n        result.append(max_nesting)\n    }\n    return\
    \ result", "    var max_nesting_levels = [Int]()\n    let paren_groups = paren_string.components(separatedBy:\
    \ \" \")\n    for group in paren_groups {\n        var max_level = 0\n       \
    \ var current_level = 0\n        for char in group {\n            if char == \"\
    (\" {\n                current_level += 1\n            } else if char == \")\"\
    \ {\n                current_level -= 1\n            }\n            if current_level\
    \ > max_level {\n                max_level = current_level\n            }\n  \
    \      }\n        max_nesting_levels.append(max_level)\n    }\n    return max_nesting_levels",
  "    var result = [Int]()\n    let paren_groups = paren_string.components(separatedBy:\
    \ \" \")\n    for group in paren_groups {\n        result.append(parse_nested_parens_helper(paren_string:\
    \ group))\n    }\n    return result", "    var result = [Int]()\n    let groups\
    \ = paren_string.components(separatedBy: \" \")\n    for group in groups {\n \
    \       var max_nesting = 0\n        var current_nesting = 0\n        for char\
    \ in group {\n            if char == \"(\" {\n                current_nesting\
    \ += 1\n            } else if char == \")\" {\n                current_nesting\
    \ -= 1\n            }\n            if current_nesting > max_nesting {\n      \
    \          max_nesting = current_nesting\n            }\n        }\n        result.append(max_nesting)\n\
    \    }\n    return result", "    var max_depth = 0\n    var depth = 0\n    var\
    \ max_depths = [Int]()\n    for char in paren_string {\n        if char == \"\
    (\" {\n            depth += 1\n            if depth > max_depth {\n          \
    \      max_depth = depth\n            }\n        } else if char == \")\" {\n \
    \           depth -= 1\n        } else if char == \" \" {\n            max_depths.append(max_depth)\n\
    \            max_depth = 0\n            depth = 0\n        }\n    }\n    max_depths.append(max_depth)\n\
    \    return max_depths", "    var result: [Int] = []\n    let paren_groups = paren_string.split(separator:\
    \ \" \")\n    for paren_group in paren_groups {\n        var current_level = 0\n\
    \        var max_level = 0\n        for char in paren_group {\n            if\
    \ char == \"(\" {\n                current_level += 1\n            } else if char\
    \ == \")\" {\n                current_level -= 1\n            }\n            if\
    \ current_level > max_level {\n                max_level = current_level\n   \
    \         }\n        }\n        result.append(max_level)\n    }\n    return result",
  "    var result: [Int] = []\n    let paren_groups = paren_string.split(separator:\
    \ \" \")\n    for paren_group in paren_groups {\n        var max_nesting = 0\n\
    \        var current_nesting = 0\n        for paren in paren_group {\n       \
    \     if paren == \"(\" {\n                current_nesting += 1\n            }\
    \ else if paren == \")\" {\n                current_nesting -= 1\n           \
    \ }\n            if current_nesting > max_nesting {\n                max_nesting\
    \ = current_nesting\n            }\n        }\n        result.append(max_nesting)\n\
    \    }\n    return result", "    var paren_groups = paren_string.components(separatedBy:\
    \ \" \")\n    var max_nesting_levels = [Int]()\n    for paren_group in paren_groups\
    \ {\n        var nesting_level = 0\n        var max_nesting_level = 0\n      \
    \  for paren in paren_group {\n            if paren == \"(\" {\n             \
    \   nesting_level += 1\n            } else if paren == \")\" {\n             \
    \   nesting_level -= 1\n            }\n            if nesting_level > max_nesting_level\
    \ {\n                max_nesting_level = nesting_level\n            }\n      \
    \  }\n        max_nesting_levels.append(max_nesting_level)\n    }\n    return\
    \ max_nesting_levels", "    var result = [Int]()\n    let paren_groups = paren_string.split(separator:\
    \ \" \")\n    for paren_group in paren_groups {\n        var max_nesting = 0\n\
    \        var current_nesting = 0\n        for char in paren_group {\n        \
    \    if char == \"(\" {\n                current_nesting += 1\n            } else\
    \ if char == \")\" {\n                current_nesting -= 1\n            }\n  \
    \          if current_nesting > max_nesting {\n                max_nesting = current_nesting\n\
    \            }\n        }\n        result.append(max_nesting)\n    }\n    return\
    \ result", "    var paren_groups = paren_string.components(separatedBy: \" \"\
    )\n    var max_depth = [Int]()\n    for group in paren_groups {\n        var depth\
    \ = 0\n        var max_depth_group = 0\n        for char in group {\n        \
    \    if char == \"(\" {\n                depth += 1\n            } else if char\
    \ == \")\" {\n                depth -= 1\n            }\n            if depth\
    \ > max_depth_group {\n                max_depth_group = depth\n            }\n\
    \        }\n        max_depth.append(max_depth_group)\n    }\n    return max_depth",
  "    var result = [Int]()\n    let groups = paren_string.components(separatedBy:\
    \ \" \")\n    for group in groups {\n        var max_level = 0\n        var level\
    \ = 0\n        for char in group {\n            if char == \"(\" {\n         \
    \       level += 1\n            } else if char == \")\" {\n                level\
    \ -= 1\n            }\n            if level > max_level {\n                max_level\
    \ = level\n            }\n        }\n        result.append(max_level)\n    }\n\
    \    return result", "    var paren_groups = paren_string.components(separatedBy:\
    \ \" \")\n    var max_nesting_levels = [Int]()\n    for paren_group in paren_groups\
    \ {\n        var current_nesting_level = 0\n        var max_nesting_level = 0\n\
    \        for paren in paren_group {\n            if paren == \"(\" {\n       \
    \         current_nesting_level += 1\n            } else if paren == \")\" {\n\
    \                current_nesting_level -= 1\n            }\n            if current_nesting_level\
    \ > max_nesting_level {\n                max_nesting_level = current_nesting_level\n\
    \            }\n        }\n        max_nesting_levels.append(max_nesting_level)\n\
    \    }\n    return max_nesting_levels", "    var result: [Int] = []\n    var paren_groups\
    \ = paren_string.components(separatedBy: \" \")\n    for paren_group in paren_groups\
    \ {\n        var max_depth = 0\n        var depth = 0\n        for char in paren_group\
    \ {\n            if char == \"(\" {\n                depth += 1\n            }\
    \ else if char == \")\" {\n                depth -= 1\n            }\n       \
    \     if depth > max_depth {\n                max_depth = depth\n            }\n\
    \        }\n        result.append(max_depth)\n    }\n    return result", "   \
    \ var max_nesting = 0\n    var current_nesting = 0\n    var result = [Int]()\n\
    \    for char in paren_string {\n        if char == \"(\" {\n            current_nesting\
    \ += 1\n            if current_nesting > max_nesting {\n                max_nesting\
    \ = current_nesting\n            }\n        } else if char == \")\" {\n      \
    \      current_nesting -= 1\n        } else if char == \" \" {\n            result.append(max_nesting)\n\
    \            max_nesting = 0\n            current_nesting = 0\n        }\n   \
    \ }\n    result.append(max_nesting)\n    return result", "    var result = [Int]()\n\
    \    let paren_groups = paren_string.components(separatedBy: \" \")\n    for paren_group\
    \ in paren_groups {\n        var stack = Stack<Character>()\n        var max_depth\
    \ = 0\n        var current_depth = 0\n        for paren in paren_group {\n   \
    \         if paren == \"(\" {\n                stack.push(paren)\n           \
    \     current_depth += 1\n                if current_depth > max_depth {\n   \
    \                 max_depth = current_depth\n                }\n            }\
    \ else if paren == \")\" {\n                stack.pop()\n                current_depth\
    \ -= 1\n            }\n        }\n        result.append(max_depth)\n    }\n  \
    \  return result", "    var result = [Int]()\n    var paren_groups = paren_string.components(separatedBy:\
    \ \" \")\n    for paren_group in paren_groups {\n        var paren_stack = Stack<Character>()\n\
    \        var max_depth = 0\n        var current_depth = 0\n        for paren in\
    \ paren_group {\n            if paren == \"(\" {\n                paren_stack.push(paren)\n\
    \                current_depth += 1\n                if current_depth > max_depth\
    \ {\n                    max_depth = current_depth\n                }\n      \
    \      } else if paren == \")\" {\n                if paren_stack.isEmpty() {\n\
    \                    print(\"Invalid paren group: \\(paren_group)\")\n       \
    \             return []\n                }\n                paren_stack.pop()\n\
    \                current_depth -= 1\n            }\n        }\n        if !paren_stack.isEmpty()\
    \ {\n            print(\"Invalid paren group: \\(paren_group)\")\n           \
    \ return []\n        }\n        result.append(max_depth)\n    }\n    return result",
  "    var max_nested_parens = [Int]()\n    var current_nested_parens = 0\n    var\
    \ max_nested_parens_in_group = 0\n    for char in paren_string {\n        if char\
    \ == \"(\" {\n            current_nested_parens += 1\n            if current_nested_parens\
    \ > max_nested_parens_in_group {\n                max_nested_parens_in_group =\
    \ current_nested_parens\n            }\n        } else if char == \")\" {\n  \
    \          current_nested_parens -= 1\n        } else if char == \" \" {\n   \
    \         max_nested_parens.append(max_nested_parens_in_group)\n            max_nested_parens_in_group\
    \ = 0\n            current_nested_parens = 0\n        }\n    }\n    max_nested_parens.append(max_nested_parens_in_group)\n\
    \    return max_nested_parens", "    var paren_groups = paren_string.components(separatedBy:\
    \ \" \")\n    var max_nesting_levels = [Int]()\n    for paren_group in paren_groups\
    \ {\n        var current_nesting_level = 0\n        var max_nesting_level = 0\n\
    \        for paren in paren_group {\n            if paren == \"(\" {\n       \
    \         current_nesting_level += 1\n            } else if paren == \")\" {\n\
    \                current_nesting_level -= 1\n            }\n            if current_nesting_level\
    \ > max_nesting_level {\n                max_nesting_level = current_nesting_level\n\
    \            }\n        }\n        max_nesting_levels.append(max_nesting_level)\n\
    \    }\n    return max_nesting_levels", "    var result = [Int]()\n    let groups\
    \ = paren_string.components(separatedBy: \" \")\n    for group in groups {\n \
    \       var max_nesting = 0\n        var current_nesting = 0\n        for char\
    \ in group {\n            if char == \"(\" {\n                current_nesting\
    \ += 1\n            } else if char == \")\" {\n                current_nesting\
    \ -= 1\n            }\n            if current_nesting > max_nesting {\n      \
    \          max_nesting = current_nesting\n            }\n        }\n        result.append(max_nesting)\n\
    \    }\n    return result", "    let paren_groups = paren_string.components(separatedBy:\
    \ \" \")\n    var result = [Int]()\n    for paren_group in paren_groups {\n  \
    \      result.append(parse_nested_parens_helper(paren_group: paren_group))\n \
    \   }\n    return result", "    let groups = paren_string.components(separatedBy:\
    \ \" \")\n    var max_nesting_levels = [Int]()\n    for group in groups {\n  \
    \      var current_level = 0\n        var max_level = 0\n        for char in group\
    \ {\n            if char == \"(\" {\n                current_level += 1\n    \
    \        } else if char == \")\" {\n                current_level -= 1\n     \
    \       }\n            if current_level > max_level {\n                max_level\
    \ = current_level\n            }\n        }\n        max_nesting_levels.append(max_level)\n\
    \    }\n    return max_nesting_levels", "    let paren_groups = paren_string.components(separatedBy:\
    \ \" \")\n    var max_nesting_levels = [Int]()\n    for paren_group in paren_groups\
    \ {\n        var nesting_level = 0\n        var max_nesting_level = 0\n      \
    \  for paren in paren_group {\n            if paren == \"(\" {\n             \
    \   nesting_level += 1\n            } else if paren == \")\" {\n             \
    \   nesting_level -= 1\n            }\n            if nesting_level > max_nesting_level\
    \ {\n                max_nesting_level = nesting_level\n            }\n      \
    \  }\n        max_nesting_levels.append(max_nesting_level)\n    }\n    return\
    \ max_nesting_levels", "    var result: [Int] = []\n    let groups = paren_string.components(separatedBy:\
    \ \" \")\n    for group in groups {\n        var max_nesting = 0\n        var\
    \ current_nesting = 0\n        for char in group {\n            if char == \"\
    (\" {\n                current_nesting += 1\n            } else if char == \"\
    )\" {\n                current_nesting -= 1\n            }\n            if current_nesting\
    \ > max_nesting {\n                max_nesting = current_nesting\n           \
    \ }\n        }\n        result.append(max_nesting)\n    }\n    return result",
  "    var result = [Int]()\n    let groups = paren_string.components(separatedBy:\
    \ \" \")\n    for group in groups {\n        var max_depth = 0\n        var current_depth\
    \ = 0\n        for char in group {\n            if char == \"(\" {\n         \
    \       current_depth += 1\n            } else if char == \")\" {\n          \
    \      current_depth -= 1\n            }\n            if current_depth > max_depth\
    \ {\n                max_depth = current_depth\n            }\n        }\n   \
    \     result.append(max_depth)\n    }\n    return result", "    var max_depth\
    \ = 0\n    var depth = 0\n    var result = [Int]()\n    for char in paren_string\
    \ {\n        if char == \"(\" {\n            depth += 1\n            max_depth\
    \ = max(max_depth, depth)\n        } else if char == \")\" {\n            depth\
    \ -= 1\n        } else if char == \" \" {\n            result.append(max_depth)\n\
    \            max_depth = 0\n            depth = 0\n        }\n    }\n    result.append(max_depth)\n\
    \    return result", "    var result = [Int]()\n    let groups = paren_string.components(separatedBy:\
    \ \" \")\n    for group in groups {\n        var max_depth = 0\n        var depth\
    \ = 0\n        for char in group {\n            if char == \"(\" {\n         \
    \       depth += 1\n            } else if char == \")\" {\n                depth\
    \ -= 1\n            }\n            if depth > max_depth {\n                max_depth\
    \ = depth\n            }\n        }\n        result.append(max_depth)\n    }\n\
    \    return result", "    var result: [Int] = []\n    let groups = paren_string.split(separator:\
    \ \" \")\n    for group in groups {\n        var max_nesting = 0\n        var\
    \ current_nesting = 0\n        for char in group {\n            if char == \"\
    (\" {\n                current_nesting += 1\n            } else if char == \"\
    )\" {\n                current_nesting -= 1\n            }\n            if current_nesting\
    \ > max_nesting {\n                max_nesting = current_nesting\n           \
    \ }\n        }\n        result.append(max_nesting)\n    }\n    return result",
  "    var max_nesting = [Int]()\n    var current_nesting = 0\n    var max_current_nesting\
    \ = 0\n    for char in paren_string {\n        if char == \"(\" {\n          \
    \  current_nesting += 1\n            if current_nesting > max_current_nesting\
    \ {\n                max_current_nesting = current_nesting\n            }\n  \
    \      } else if char == \")\" {\n            current_nesting -= 1\n        }\
    \ else if char == \" \" {\n            max_nesting.append(max_current_nesting)\n\
    \            max_current_nesting = 0\n            current_nesting = 0\n      \
    \  }\n    }\n    max_nesting.append(max_current_nesting)\n    return max_nesting",
  "    var max_nesting_levels = [Int]()\n    var current_nesting_level = 0\n    var\
    \ max_nesting_level = 0\n    for char in paren_string {\n        if char == \"\
    (\" {\n            current_nesting_level += 1\n            if current_nesting_level\
    \ > max_nesting_level {\n                max_nesting_level = current_nesting_level\n\
    \            }\n        } else if char == \")\" {\n            current_nesting_level\
    \ -= 1\n        } else if char == \" \" {\n            max_nesting_levels.append(max_nesting_level)\n\
    \            max_nesting_level = 0\n            current_nesting_level = 0\n  \
    \      }\n    }\n    return max_nesting_levels", "    var paren_groups = paren_string.components(separatedBy:\
    \ \" \")\n    var max_nesting_levels = [Int]()\n    for paren_group in paren_groups\
    \ {\n        var nesting_level = 0\n        var max_nesting_level = 0\n      \
    \  for paren in paren_group {\n            if paren == \"(\" {\n             \
    \   nesting_level += 1\n            } else if paren == \")\" {\n             \
    \   nesting_level -= 1\n            }\n            if nesting_level > max_nesting_level\
    \ {\n                max_nesting_level = nesting_level\n            }\n      \
    \  }\n        max_nesting_levels.append(max_nesting_level)\n    }\n    return\
    \ max_nesting_levels", "    var result: [Int] = []\n    let groups = paren_string.split(separator:\
    \ \" \")\n    for group in groups {\n        var max_depth = 0\n        var depth\
    \ = 0\n        for char in group {\n            if char == \"(\" {\n         \
    \       depth += 1\n            } else if char == \")\" {\n                depth\
    \ -= 1\n            }\n            if depth > max_depth {\n                max_depth\
    \ = depth\n            }\n        }\n        result.append(max_depth)\n    }\n\
    \    return result", "    var max_depth = 0\n    var depth = 0\n    var max_depths\
    \ = [Int]()\n    for char in paren_string {\n        if char == \"(\" {\n    \
    \        depth += 1\n            if depth > max_depth {\n                max_depth\
    \ = depth\n            }\n        } else if char == \")\" {\n            depth\
    \ -= 1\n        } else if char == \" \" {\n            max_depths.append(max_depth)\n\
    \            max_depth = 0\n            depth = 0\n        }\n    }\n    max_depths.append(max_depth)\n\
    \    return max_depths", "    var result = [Int]()\n    let groups = paren_string.components(separatedBy:\
    \ \" \")\n    for group in groups {\n        var max_nesting = 0\n        var\
    \ current_nesting = 0\n        for char in group {\n            if char == \"\
    (\" {\n                current_nesting += 1\n            } else if char == \"\
    )\" {\n                current_nesting -= 1\n            }\n            if current_nesting\
    \ > max_nesting {\n                max_nesting = current_nesting\n           \
    \ }\n        }\n        result.append(max_nesting)\n    }\n    return result",
  "    var paren_groups = paren_string.components(separatedBy: \" \")\n    var max_nesting_levels\
    \ = [Int]()\n    for paren_group in paren_groups {\n        var nesting_level\
    \ = 0\n        var max_nesting_level = 0\n        for paren in paren_group {\n\
    \            if paren == \"(\" {\n                nesting_level += 1\n       \
    \     } else if paren == \")\" {\n                nesting_level -= 1\n       \
    \     }\n            if nesting_level > max_nesting_level {\n                max_nesting_level\
    \ = nesting_level\n            }\n        }\n        max_nesting_levels.append(max_nesting_level)\n\
    \    }\n    return max_nesting_levels", "    var result: [Int] = []\n    let groups\
    \ = paren_string.components(separatedBy: \" \")\n    for group in groups {\n \
    \       var max_depth = 0\n        var depth = 0\n        for char in group {\n\
    \            if char == \"(\" {\n                depth += 1\n            } else\
    \ if char == \")\" {\n                depth -= 1\n            }\n            if\
    \ depth > max_depth {\n                max_depth = depth\n            }\n    \
    \    }\n        result.append(max_depth)\n    }\n    return result", "    var\
    \ max_nesting_levels = [Int]()\n    let paren_groups = paren_string.split(separator:\
    \ \" \")\n    for group in paren_groups {\n        var nesting_level = 0\n   \
    \     var max_nesting_level = 0\n        for char in group {\n            if char\
    \ == \"(\" {\n                nesting_level += 1\n            } else if char ==\
    \ \")\" {\n                nesting_level -= 1\n            }\n            if nesting_level\
    \ > max_nesting_level {\n                max_nesting_level = nesting_level\n \
    \           }\n        }\n        max_nesting_levels.append(max_nesting_level)\n\
    \    }\n    return max_nesting_levels", "    var paren_groups = paren_string.split(separator:\
    \ \" \")\n    var paren_levels = [Int]()\n    for paren_group in paren_groups\
    \ {\n        var paren_level = 0\n        var max_paren_level = 0\n        for\
    \ paren in paren_group {\n            if paren == \"(\" {\n                paren_level\
    \ += 1\n            } else if paren == \")\" {\n                paren_level -=\
    \ 1\n            }\n            if paren_level > max_paren_level {\n         \
    \       max_paren_level = paren_level\n            }\n        }\n        paren_levels.append(max_paren_level)\n\
    \    }\n    return paren_levels", "    var max_nesting_levels = [Int]()\n    var\
    \ current_nesting_level = 0\n    var max_nesting_level = 0\n    for char in paren_string\
    \ {\n        if char == \"(\" {\n            current_nesting_level += 1\n    \
    \        if current_nesting_level > max_nesting_level {\n                max_nesting_level\
    \ = current_nesting_level\n            }\n        } else if char == \")\" {\n\
    \            current_nesting_level -= 1\n        } else if char == \" \" {\n \
    \           max_nesting_levels.append(max_nesting_level)\n            max_nesting_level\
    \ = 0\n            current_nesting_level = 0\n        }\n    }\n    return max_nesting_levels",
  "    var max_nesting = 0\n    var current_nesting = 0\n    var result = [Int]()\n\
    \    for char in paren_string {\n        if char == \"(\" {\n            current_nesting\
    \ += 1\n            if current_nesting > max_nesting {\n                max_nesting\
    \ = current_nesting\n            }\n        } else if char == \")\" {\n      \
    \      current_nesting -= 1\n        } else if char == \" \" {\n            result.append(max_nesting)\n\
    \            max_nesting = 0\n            current_nesting = 0\n        }\n   \
    \ }\n    result.append(max_nesting)\n    return result", "    let paren_groups\
    \ = paren_string.components(separatedBy: \" \")\n    var paren_levels = [Int]()\n\
    \    for group in paren_groups {\n        var level = 0\n        var max_level\
    \ = 0\n        for char in group {\n            if char == \"(\" {\n         \
    \       level += 1\n            } else if char == \")\" {\n                level\
    \ -= 1\n            }\n            if level > max_level {\n                max_level\
    \ = level\n            }\n        }\n        paren_levels.append(max_level)\n\
    \    }\n    return paren_levels", "    var result = [Int]()\n    let groups =\
    \ paren_string.components(separatedBy: \" \")\n    for group in groups {\n   \
    \     var max_level = 0\n        var level = 0\n        for char in group {\n\
    \            if char == \"(\" {\n                level += 1\n            } else\
    \ if char == \")\" {\n                level -= 1\n            }\n            if\
    \ level > max_level {\n                max_level = level\n            }\n    \
    \    }\n        result.append(max_level)\n    }\n    return result", "    var\
    \ result = [Int]()\n    var paren_groups = paren_string.components(separatedBy:\
    \ \" \")\n    for group in paren_groups {\n        var max_level = 0\n       \
    \ var level = 0\n        for char in group {\n            if char == \"(\" {\n\
    \                level += 1\n            } else if char == \")\" {\n         \
    \       level -= 1\n            }\n            if level > max_level {\n      \
    \          max_level = level\n            }\n        }\n        result.append(max_level)\n\
    \    }\n    return result", "    let groups = paren_string.split(separator: \"\
    \ \")\n    var result = [Int]()\n    for group in groups {\n        var stack\
    \ = Stack<Character>()\n        var max_depth = 0\n        var depth = 0\n   \
    \     for char in group {\n            if char == \"(\" {\n                stack.push(char)\n\
    \                depth += 1\n                if depth > max_depth {\n        \
    \            max_depth = depth\n                }\n            } else if char\
    \ == \")\" {\n                if stack.isEmpty() {\n                    break\n\
    \                }\n                stack.pop()\n                depth -= 1\n\
    \            }\n        }\n        result.append(max_depth)\n    }\n    return\
    \ result", "    var max_nesting_levels = [Int]()\n    var paren_stack = Stack<Character>()\n\
    \    var current_nesting_level = 0\n    var current_group = \"\"\n    for char\
    \ in paren_string {\n        if char == \" \" {\n            if !current_group.isEmpty\
    \ {\n                max_nesting_levels.append(current_nesting_level)\n      \
    \          current_nesting_level = 0\n                current_group = \"\"\n \
    \           }\n        } else {\n            current_group.append(char)\n    \
    \        if char == \"(\" {\n                paren_stack.push(char)\n        \
    \        current_nesting_level = max(current_nesting_level, paren_stack.count)\n\
    \            } else if char == \")\" {\n                paren_stack.pop()\n  \
    \          }\n        }\n    }\n    if !current_group.isEmpty {\n        max_nesting_levels.append(current_nesting_level)\n\
    \    }\n    return max_nesting_levels", "    var max_depth = 0\n    var depth\
    \ = 0\n    var depths = [Int]()\n    for char in paren_string {\n        if char\
    \ == \"(\" {\n            depth += 1\n            if depth > max_depth {\n   \
    \             max_depth = depth\n            }\n        } else if char == \")\"\
    \ {\n            depth -= 1\n        } else if char == \" \" {\n            depths.append(max_depth)\n\
    \            max_depth = 0\n            depth = 0\n        }\n    }\n    depths.append(max_depth)\n\
    \    return depths", "    var paren_groups = paren_string.components(separatedBy:\
    \ \" \")\n    var paren_levels = [Int]()\n    for paren_group in paren_groups\
    \ {\n        var level = 0\n        var max_level = 0\n        for char in paren_group\
    \ {\n            if char == \"(\" {\n                level += 1\n            }\
    \ else if char == \")\" {\n                level -= 1\n            }\n       \
    \     if level > max_level {\n                max_level = level\n            }\n\
    \        }\n        paren_levels.append(max_level)\n    }\n    return paren_levels",
  "    var result = [Int]()\n    let groups = paren_string.components(separatedBy:\
    \ \" \")\n    for group in groups {\n        var max_level = 0\n        var level\
    \ = 0\n        for char in group {\n            if char == \"(\" {\n         \
    \       level += 1\n            } else if char == \")\" {\n                level\
    \ -= 1\n            }\n            if level > max_level {\n                max_level\
    \ = level\n            }\n        }\n        result.append(max_level)\n    }\n\
    \    return result", "    var max_nested = [Int]()\n    let paren_groups = paren_string.components(separatedBy:\
    \ \" \")\n    for paren_group in paren_groups {\n        var nested_count = 0\n\
    \        var max_nested_count = 0\n        for char in paren_group {\n       \
    \     if char == \"(\" {\n                nested_count += 1\n            } else\
    \ if char == \")\" {\n                nested_count -= 1\n            }\n     \
    \       if nested_count > max_nested_count {\n                max_nested_count\
    \ = nested_count\n            }\n        }\n        max_nested.append(max_nested_count)\n\
    \    }\n    return max_nested", "    var result = [Int]()\n    let groups = paren_string.components(separatedBy:\
    \ \" \")\n    for group in groups {\n        var stack = [Character]()\n     \
    \   var max_depth = 0\n        var depth = 0\n        for char in group {\n  \
    \          if char == \"(\" {\n                stack.append(char)\n          \
    \      depth += 1\n                if depth > max_depth {\n                  \
    \  max_depth = depth\n                }\n            } else if char == \")\" {\n\
    \                stack.popLast()\n                depth -= 1\n            }\n\
    \        }\n        result.append(max_depth)\n    }\n    return result", "   \
    \ var result = [Int]()\n    let groups = paren_string.components(separatedBy:\
    \ \" \")\n    for group in groups {\n        var max_depth = 0\n        var depth\
    \ = 0\n        for char in group {\n            if char == \"(\" {\n         \
    \       depth += 1\n            } else if char == \")\" {\n                depth\
    \ -= 1\n            }\n            if depth > max_depth {\n                max_depth\
    \ = depth\n            }\n        }\n        result.append(max_depth)\n    }\n\
    \    return result", "    let groups = paren_string.components(separatedBy: \"\
    \ \")\n    var result = [Int]()\n    for group in groups {\n        var max_depth\
    \ = 0\n        var current_depth = 0\n        for char in group {\n          \
    \  if char == \"(\" {\n                current_depth += 1\n                if\
    \ current_depth > max_depth {\n                    max_depth = current_depth\n\
    \                }\n            } else if char == \")\" {\n                current_depth\
    \ -= 1\n            }\n        }\n        result.append(max_depth)\n    }\n  \
    \  return result", "    var result = [Int]()\n    var stack = Stack<Character>()\n\
    \    var max_depth = 0\n    var depth = 0\n    for char in paren_string {\n  \
    \      if char == \"(\" {\n            stack.push(char)\n            depth +=\
    \ 1\n            if depth > max_depth {\n                max_depth = depth\n \
    \           }\n        } else if char == \")\" {\n            if stack.isEmpty\
    \ {\n                print(\"Error: Unbalanced parentheses\")\n              \
    \  return []\n            }\n            stack.pop()\n            depth -= 1\n\
    \        } else if char == \" \" {\n            result.append(max_depth)\n   \
    \         max_depth = 0\n            depth = 0\n        }\n    }\n    result.append(max_depth)\n\
    \    return result", "    var result = [Int]()\n    let paren_groups = paren_string.components(separatedBy:\
    \ \" \")\n    for paren_group in paren_groups {\n        var depth = 0\n     \
    \   var max_depth = 0\n        for paren in paren_group {\n            if paren\
    \ == \"(\" {\n                depth += 1\n            } else if paren == \")\"\
    \ {\n                depth -= 1\n            }\n            if depth > max_depth\
    \ {\n                max_depth = depth\n            }\n        }\n        result.append(max_depth)\n\
    \    }\n    return result", "    var paren_groups = paren_string.components(separatedBy:\
    \ \" \")\n    var max_nesting_levels = [Int]()\n    for paren_group in paren_groups\
    \ {\n        var nesting_level = 0\n        var max_nesting_level = 0\n      \
    \  for char in paren_group {\n            if char == \"(\" {\n               \
    \ nesting_level += 1\n            } else if char == \")\" {\n                nesting_level\
    \ -= 1\n            }\n            if nesting_level > max_nesting_level {\n  \
    \              max_nesting_level = nesting_level\n            }\n        }\n \
    \       max_nesting_levels.append(max_nesting_level)\n    }\n    return max_nesting_levels",
  "    var result = [Int]()\n    var max_level = 0\n    var current_level = 0\n  \
    \  for char in paren_string {\n        if char == \"(\" {\n            current_level\
    \ += 1\n            if current_level > max_level {\n                max_level\
    \ = current_level\n            }\n        } else if char == \")\" {\n        \
    \    current_level -= 1\n        } else if char == \" \" {\n            result.append(max_level)\n\
    \            max_level = 0\n            current_level = 0\n        }\n    }\n\
    \    result.append(max_level)\n    return result"]
stop_tokens:
- "\n}"
