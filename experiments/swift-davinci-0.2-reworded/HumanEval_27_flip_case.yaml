name: HumanEval_27_flip_case
language: swift
prompt: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
  \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
  \ String) -> String {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
  \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
  \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
completions: ['    return string.map { $0.isUppercase ? $0.lowercased() : $0.uppercased()
    }', '    return string.map { $0.isUppercase ? $0.lowercased() : $0.uppercased()
    }', '    return string.map { $0.isUppercase ? $0.lowercased() : $0.uppercased()
    }', '    return string.map { $0.isUppercase ? $0.lowercased() : $0.uppercased()
    }', "    var result = \"\"\n    for char in string {\n        if char.isLowercase\
    \ {\n            result.append(char.uppercased())\n        } else {\n        \
    \    result.append(char.lowercased())\n        }\n    }\n    return result", " \
    \   return string.map {\n        if $0.isUppercase {\n            return $0.lowercased()\n\
    \        } else {\n            return $0.uppercased()\n        }\n    }", '    return
    string.map { $0.isLowercase ? $0.uppercased() : $0.lowercased() }', '    return
    string.map { $0.isUppercase ? $0.lowercased() : $0.uppercased() }', "    var flipped\
    \ = \"\"\n    for char in string {\n        if char.isUppercase {\n          \
    \  flipped.append(char.lowercased())\n        } else {\n            flipped.append(char.uppercased())\n\
    \        }\n    }\n    return flipped", '    return string.map { $0.isUppercase
    ? $0.lowercased() : $0.uppercased() }', '    return string.map { $0.isUppercase
    ? $0.lowercased() : $0.uppercased() }', '    return string.map { $0.isUppercase
    ? $0.lowercased() : $0.uppercased() }', "    var newString = \"\"\n    for character\
    \ in string {\n        if character.isUppercase {\n            newString.append(character.lowercased())\n\
    \        } else {\n            newString.append(character.uppercased())\n    \
    \    }\n    }\n    return newString", "    var flipped = \"\"\n    for char in\
    \ string {\n        if char.isUppercase {\n            flipped.append(char.lowercased())\n\
    \        } else {\n            flipped.append(char.uppercased())\n        }\n\
    \    }\n    return flipped", "    var result = \"\"\n    for character in string\
    \ {\n        if character.isUppercase {\n            result.append(character.lowercased())\n\
    \        } else {\n            result.append(character.uppercased())\n       \
    \ }\n    }\n    return result", "    var flipped = \"\"\n    for char in string\
    \ {\n        if char.isUppercase {\n            flipped.append(char.lowercased())\n\
    \        } else {\n            flipped.append(char.uppercased())\n        }\n\
    \    }\n    return flipped", "    var flippedString = \"\"\n    for char in string\
    \ {\n        if char.isUppercase {\n            flippedString.append(char.lowercased())\n\
    \        } else {\n            flippedString.append(char.uppercased())\n     \
    \   }\n    }\n    return flippedString", "    var flipped = \"\"\n    for char\
    \ in string {\n        if char.isUppercase {\n            flipped.append(char.lowercased())\n\
    \        } else {\n            flipped.append(char.uppercased())\n        }\n\
    \    }\n    return flipped", '    return string.map { $0.isUppercase ? $0.lowercased()
    : $0.uppercased() }', "    var flipped = \"\"\n    for char in string {\n    \
    \    if char.isUppercase {\n            flipped.append(char.lowercased())\n  \
    \      } else {\n            flipped.append(char.uppercased())\n        }\n  \
    \  }\n    return flipped"]
stop_tokens:
- "\n}"
