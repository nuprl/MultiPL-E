language: swift
name: HumanEval_74_total_match
results:
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var total1 = 0\n    var total2\
    \ = 0\n    for i in lst1 {\n        total1 += i.count\n    }\n    for i in lst2\
    \ {\n        total2 += i.count\n    }\n    if total1 < total2 {\n        return\
    \ lst1\n    } else {\n        return lst2\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) ==\
    \ [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\"\
    , \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpbrc7j57o/tmpbrc7j57o.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1070871c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1070568b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1070568988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b10705677b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbrc7j57o                        0x000055a16b655677 <unavailable> + 9847

    5    libc.so.6                          0x00002b1070a5d460 __libc_start_main +
    245

    6    tmpbrc7j57o                        0x000055a16b654289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1659820461
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var total1 = 0\n    var total2\
    \ = 0\n    for i in lst1 {\n        total1 += i.count\n    }\n    for i in lst2\
    \ {\n        total2 += i.count\n    }\n    if total1 < total2 {\n        return\
    \ lst1\n    } else {\n        return lst2\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) ==\
    \ [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\"\
    , \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpbrc7j57o/tmpbrc7j57o.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1070871c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1070568b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1070568988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b10705677b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbrc7j57o                        0x000055a16b655677 <unavailable> + 9847

    5    libc.so.6                          0x00002b1070a5d460 __libc_start_main +
    245

    6    tmpbrc7j57o                        0x000055a16b654289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1659820461
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var total1 = 0\n    var total2\
    \ = 0\n    for i in lst1 {\n        total1 += i.count\n    }\n    for i in lst2\
    \ {\n        total2 += i.count\n    }\n    if total1 < total2 {\n        return\
    \ lst1\n    } else {\n        return lst2\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) ==\
    \ [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\"\
    , \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpbrc7j57o/tmpbrc7j57o.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1070871c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1070568b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1070568988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b10705677b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbrc7j57o                        0x000055a16b655677 <unavailable> + 9847

    5    libc.so.6                          0x00002b1070a5d460 __libc_start_main +
    245

    6    tmpbrc7j57o                        0x000055a16b654289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1659820461
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var total1 = 0\n    var total2\
    \ = 0\n    for i in lst1 {\n        total1 += i.count\n    }\n    for i in lst2\
    \ {\n        total2 += i.count\n    }\n    if total1 < total2 {\n        return\
    \ lst1\n    } else {\n        return lst2\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) ==\
    \ [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\"\
    , \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpbrc7j57o/tmpbrc7j57o.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1070871c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1070568b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1070568988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b10705677b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbrc7j57o                        0x000055a16b655677 <unavailable> + 9847

    5    libc.so.6                          0x00002b1070a5d460 __libc_start_main +
    245

    6    tmpbrc7j57o                        0x000055a16b654289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1659820461
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var total1 = 0\n    var total2\
    \ = 0\n    for i in lst1 {\n        total1 += i.count\n    }\n    for i in lst2\
    \ {\n        total2 += i.count\n    }\n    if total1 < total2 {\n        return\
    \ lst1\n    } else {\n        return lst2\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) ==\
    \ [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\"\
    , \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpbrc7j57o/tmpbrc7j57o.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1070871c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1070568b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1070568988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b10705677b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbrc7j57o                        0x000055a16b655677 <unavailable> + 9847

    5    libc.so.6                          0x00002b1070a5d460 __libc_start_main +
    245

    6    tmpbrc7j57o                        0x000055a16b654289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1659820461
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var total1 = 0\n    var total2\
    \ = 0\n    for i in lst1 {\n        total1 += i.count\n    }\n    for i in lst2\
    \ {\n        total2 += i.count\n    }\n    if total1 < total2 {\n        return\
    \ lst1\n    } else {\n        return lst2\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) ==\
    \ [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\"\
    , \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpbrc7j57o/tmpbrc7j57o.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1070871c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1070568b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1070568988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b10705677b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbrc7j57o                        0x000055a16b655677 <unavailable> + 9847

    5    libc.so.6                          0x00002b1070a5d460 __libc_start_main +
    245

    6    tmpbrc7j57o                        0x000055a16b654289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1659820461
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var total1 = 0\n    var total2\
    \ = 0\n    for i in lst1 {\n        total1 += i.count\n    }\n    for i in lst2\
    \ {\n        total2 += i.count\n    }\n    if total1 < total2 {\n        return\
    \ lst1\n    } else {\n        return lst2\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) ==\
    \ [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\"\
    , \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpbrc7j57o/tmpbrc7j57o.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1070871c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1070568b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1070568988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b10705677b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbrc7j57o                        0x000055a16b655677 <unavailable> + 9847

    5    libc.so.6                          0x00002b1070a5d460 __libc_start_main +
    245

    6    tmpbrc7j57o                        0x000055a16b654289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1659820461
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var total1 = 0\n    var total2\
    \ = 0\n    for i in lst1 {\n        total1 += i.count\n    }\n    for i in lst2\
    \ {\n        total2 += i.count\n    }\n    if total1 < total2 {\n        return\
    \ lst1\n    } else {\n        return lst2\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) ==\
    \ [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\"\
    , \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpbrc7j57o/tmpbrc7j57o.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1070871c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1070568b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1070568988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b10705677b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbrc7j57o                        0x000055a16b655677 <unavailable> + 9847

    5    libc.so.6                          0x00002b1070a5d460 __libc_start_main +
    245

    6    tmpbrc7j57o                        0x000055a16b654289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1659820461
- exit_code: 0
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var total1 = 0\n    var total2\
    \ = 0\n    for i in lst1 {\n        total1 += i.count\n    }\n    for i in lst2\
    \ {\n        total2 += i.count\n    }\n    if total1 > total2 {\n        return\
    \ lst2\n    } else {\n        return lst1\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) ==\
    \ [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\"\
    , \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820461
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var total1 = 0\n    var total2\
    \ = 0\n    for i in lst1 {\n        total1 += i.count\n    }\n    for i in lst2\
    \ {\n        total2 += i.count\n    }\n    if total1 < total2 {\n        return\
    \ lst1\n    } else {\n        return lst2\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) ==\
    \ [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\"\
    , \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpbrc7j57o/tmpbrc7j57o.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1070871c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1070568b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1070568988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b10705677b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbrc7j57o                        0x000055a16b655677 <unavailable> + 9847

    5    libc.so.6                          0x00002b1070a5d460 __libc_start_main +
    245

    6    tmpbrc7j57o                        0x000055a16b654289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1659820461
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var total1 = 0\n    var total2\
    \ = 0\n    for i in lst1 {\n        total1 += i.count\n    }\n    for i in lst2\
    \ {\n        total2 += i.count\n    }\n    if total1 < total2 {\n        return\
    \ lst1\n    } else {\n        return lst2\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) ==\
    \ [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\"\
    , \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpbrc7j57o/tmpbrc7j57o.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1070871c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1070568b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1070568988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b10705677b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbrc7j57o                        0x000055a16b655677 <unavailable> + 9847

    5    libc.so.6                          0x00002b1070a5d460 __libc_start_main +
    245

    6    tmpbrc7j57o                        0x000055a16b654289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1659820461
- exit_code: 0
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var total1 = 0\n    var total2\
    \ = 0\n    for i in lst1 {\n        total1 += i.count\n    }\n    for i in lst2\
    \ {\n        total2 += i.count\n    }\n    if total1 > total2 {\n        return\
    \ lst2\n    } else {\n        return lst1\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) ==\
    \ [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\"\
    , \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820461
- exit_code: 0
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var count1 = 0\n    var count2\
    \ = 0\n    for i in lst1 {\n        count1 += i.count\n    }\n    for i in lst2\
    \ {\n        count2 += i.count\n    }\n    if count1 < count2 {\n        return\
    \ lst1\n    } else if count1 > count2 {\n        return lst2\n    } else {\n \
    \       return lst1\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820461
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var total1 = 0\n    var total2\
    \ = 0\n    for i in lst1 {\n        total1 += i.count\n    }\n    for i in lst2\
    \ {\n        total2 += i.count\n    }\n    if total1 < total2 {\n        return\
    \ lst1\n    } else {\n        return lst2\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) ==\
    \ [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\"\
    , \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpbrc7j57o/tmpbrc7j57o.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1070871c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1070568b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1070568988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b10705677b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbrc7j57o                        0x000055a16b655677 <unavailable> + 9847

    5    libc.so.6                          0x00002b1070a5d460 __libc_start_main +
    245

    6    tmpbrc7j57o                        0x000055a16b654289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1659820461
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var total1 = 0\n    var total2\
    \ = 0\n    for str in lst1 {\n        total1 += str.count\n    }\n    for str\
    \ in lst2 {\n        total2 += str.count\n    }\n    if total1 < total2 {\n  \
    \      return lst1\n    } else {\n        return lst2\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(total_match(lst1: [] as [String], lst2: [] as [String])\
    \ == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"\
    hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"\
    ], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpwok5n2vf/tmpwok5n2vf.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4caa63bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4caa332b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4caa332988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4caa3317b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwok5n2vf                        0x0000560b949b5677 <unavailable> + 9847

    5    libc.so.6                          0x00002b4caa827460 __libc_start_main +
    245

    6    tmpwok5n2vf                        0x0000560b949b4289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1659820461
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var total1 = 0\n    var total2\
    \ = 0\n    for i in lst1 {\n        total1 += i.count\n    }\n    for i in lst2\
    \ {\n        total2 += i.count\n    }\n    if total1 < total2 {\n        return\
    \ lst1\n    } else {\n        return lst2\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) ==\
    \ [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\"\
    , \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpbrc7j57o/tmpbrc7j57o.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1070871c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1070568b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1070568988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b10705677b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbrc7j57o                        0x000055a16b655677 <unavailable> + 9847

    5    libc.so.6                          0x00002b1070a5d460 __libc_start_main +
    245

    6    tmpbrc7j57o                        0x000055a16b654289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1659820461
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var total1 = 0\n    var total2\
    \ = 0\n    for i in lst1 {\n        total1 += i.count\n    }\n    for i in lst2\
    \ {\n        total2 += i.count\n    }\n    if total1 < total2 {\n        return\
    \ lst1\n    } else {\n        return lst2\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) ==\
    \ [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\"\
    , \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpbrc7j57o/tmpbrc7j57o.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1070871c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1070568b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1070568988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b10705677b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbrc7j57o                        0x000055a16b655677 <unavailable> + 9847

    5    libc.so.6                          0x00002b1070a5d460 __libc_start_main +
    245

    6    tmpbrc7j57o                        0x000055a16b654289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1659820461
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var lst1_total = 0\n    var lst2_total\
    \ = 0\n    for i in lst1 {\n        lst1_total += i.count\n    }\n    for i in\
    \ lst2 {\n        lst2_total += i.count\n    }\n    if lst1_total < lst2_total\
    \ {\n        return lst1\n    } else {\n        return lst2\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(total_match(lst1: [] as [String], lst2: [] as\
    \ [String]) == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpuup3lo6t/tmpuup3lo6t.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac0b26e9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac0b23e0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac0b23e0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac0b23df7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuup3lo6t                        0x000055c39e2dc677 <unavailable> + 9847

    5    libc.so.6                          0x00002ac0b28d5460 __libc_start_main +
    245

    6    tmpuup3lo6t                        0x000055c39e2db289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1659820461
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var total1 = 0\n    var total2\
    \ = 0\n    for i in lst1 {\n        total1 += i.count\n    }\n    for i in lst2\
    \ {\n        total2 += i.count\n    }\n    if total1 < total2 {\n        return\
    \ lst1\n    } else {\n        return lst2\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) ==\
    \ [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\"\
    , \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpbrc7j57o/tmpbrc7j57o.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1070871c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1070568b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1070568988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b10705677b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbrc7j57o                        0x000055a16b655677 <unavailable> + 9847

    5    libc.so.6                          0x00002b1070a5d460 __libc_start_main +
    245

    6    tmpbrc7j57o                        0x000055a16b654289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1659820461
- exit_code: 0
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var count1 = 0\n    var count2\
    \ = 0\n    for i in lst1 {\n        count1 += i.count\n    }\n    for i in lst2\
    \ {\n        count2 += i.count\n    }\n    if count1 < count2 {\n        return\
    \ lst1\n    } else if count1 > count2 {\n        return lst2\n    } else {\n \
    \       return lst1\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820461
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var total1 = 0\n    var total2\
    \ = 0\n    for i in lst1 {\n        total1 += i.count\n    }\n    for i in lst2\
    \ {\n        total2 += i.count\n    }\n    if total1 < total2 {\n        return\
    \ lst1\n    } else {\n        return lst2\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) ==\
    \ [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\"\
    , \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpbrc7j57o/tmpbrc7j57o.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1070871c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1070568b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1070568988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b10705677b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbrc7j57o                        0x000055a16b655677 <unavailable> + 9847

    5    libc.so.6                          0x00002b1070a5d460 __libc_start_main +
    245

    6    tmpbrc7j57o                        0x000055a16b654289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1659820461
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var total1 = 0\n    var total2\
    \ = 0\n    for i in lst1 {\n        total1 += i.count\n    }\n    for i in lst2\
    \ {\n        total2 += i.count\n    }\n    if total1 < total2 {\n        return\
    \ lst1\n    } else {\n        return lst2\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) ==\
    \ [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\"\
    , \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpbrc7j57o/tmpbrc7j57o.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1070871c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1070568b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1070568988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b10705677b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbrc7j57o                        0x000055a16b655677 <unavailable> + 9847

    5    libc.so.6                          0x00002b1070a5d460 __libc_start_main +
    245

    6    tmpbrc7j57o                        0x000055a16b654289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1659820461
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var total1 = 0\n    var total2\
    \ = 0\n    for i in lst1 {\n        total1 += i.count\n    }\n    for i in lst2\
    \ {\n        total2 += i.count\n    }\n    if total1 < total2 {\n        return\
    \ lst1\n    } else {\n        return lst2\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) ==\
    \ [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\"\
    , \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpbrc7j57o/tmpbrc7j57o.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1070871c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1070568b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1070568988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b10705677b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbrc7j57o                        0x000055a16b655677 <unavailable> + 9847

    5    libc.so.6                          0x00002b1070a5d460 __libc_start_main +
    245

    6    tmpbrc7j57o                        0x000055a16b654289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1659820461
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var total1 = 0\n    var total2\
    \ = 0\n    for i in lst1 {\n        total1 += i.count\n    }\n    for i in lst2\
    \ {\n        total2 += i.count\n    }\n    if total1 < total2 {\n        return\
    \ lst1\n    } else {\n        return lst2\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) ==\
    \ [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\"\
    , \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpbrc7j57o/tmpbrc7j57o.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1070871c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1070568b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1070568988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b10705677b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbrc7j57o                        0x000055a16b655677 <unavailable> + 9847

    5    libc.so.6                          0x00002b1070a5d460 __libc_start_main +
    245

    6    tmpbrc7j57o                        0x000055a16b654289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1659820461
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var sum1 = 0\n    var sum2 = 0\n\
    \    for i in lst1 {\n        sum1 += i.count\n    }\n    for i in lst2 {\n  \
    \      sum2 += i.count\n    }\n    if sum1 < sum2 {\n        return lst1\n   \
    \ } else {\n        return lst2\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(total_match(lst1: [] as [String], lst2: [] as [String]) == [] as [String])\n\
    assert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\"\
    , \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmp8uhdxclk/tmp8uhdxclk.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3643939c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3643630b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3643630988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b364362f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8uhdxclk                        0x000055cb0f066677 <unavailable> + 9847

    5    libc.so.6                          0x00002b3643b25460 __libc_start_main +
    245

    6    tmp8uhdxclk                        0x000055cb0f065289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1659820461
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var total1 = 0\n    var total2\
    \ = 0\n    for i in lst1 {\n        total1 += i.count\n    }\n    for i in lst2\
    \ {\n        total2 += i.count\n    }\n    if total1 < total2 {\n        return\
    \ lst1\n    } else {\n        return lst2\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) ==\
    \ [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\"\
    , \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpbrc7j57o/tmpbrc7j57o.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1070871c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1070568b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1070568988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b10705677b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbrc7j57o                        0x000055a16b655677 <unavailable> + 9847

    5    libc.so.6                          0x00002b1070a5d460 __libc_start_main +
    245

    6    tmpbrc7j57o                        0x000055a16b654289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1659820461
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var total1 = 0\n    var total2\
    \ = 0\n    for i in lst1 {\n        total1 += i.count\n    }\n    for i in lst2\
    \ {\n        total2 += i.count\n    }\n    if total1 < total2 {\n        return\
    \ lst1\n    } else {\n        return lst2\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) ==\
    \ [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\"\
    , \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpbrc7j57o/tmpbrc7j57o.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1070871c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1070568b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1070568988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b10705677b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbrc7j57o                        0x000055a16b655677 <unavailable> + 9847

    5    libc.so.6                          0x00002b1070a5d460 __libc_start_main +
    245

    6    tmpbrc7j57o                        0x000055a16b654289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1659820461
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var total1 = 0\n    var total2\
    \ = 0\n    for str in lst1 {\n        total1 += str.count\n    }\n    for str\
    \ in lst2 {\n        total2 += str.count\n    }\n    if total1 < total2 {\n  \
    \      return lst1\n    } else {\n        return lst2\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(total_match(lst1: [] as [String], lst2: [] as [String])\
    \ == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"\
    hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"\
    ], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpwok5n2vf/tmpwok5n2vf.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4caa63bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4caa332b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4caa332988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4caa3317b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwok5n2vf                        0x0000560b949b5677 <unavailable> + 9847

    5    libc.so.6                          0x00002b4caa827460 __libc_start_main +
    245

    6    tmpwok5n2vf                        0x0000560b949b4289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1659820461
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var total1 = 0\n    var total2\
    \ = 0\n    for i in lst1 {\n        total1 += i.count\n    }\n    for i in lst2\
    \ {\n        total2 += i.count\n    }\n    if total1 < total2 {\n        return\
    \ lst1\n    } else {\n        return lst2\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) ==\
    \ [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\"\
    , \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpbrc7j57o/tmpbrc7j57o.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1070871c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1070568b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1070568988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b10705677b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbrc7j57o                        0x000055a16b655677 <unavailable> + 9847

    5    libc.so.6                          0x00002b1070a5d460 __libc_start_main +
    245

    6    tmpbrc7j57o                        0x000055a16b654289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1659820461
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var total1 = 0\n    var total2\
    \ = 0\n    for i in lst1 {\n        total1 += i.count\n    }\n    for i in lst2\
    \ {\n        total2 += i.count\n    }\n    if total1 < total2 {\n        return\
    \ lst1\n    } else {\n        return lst2\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) ==\
    \ [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\"\
    , \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpbrc7j57o/tmpbrc7j57o.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1070871c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1070568b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1070568988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b10705677b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbrc7j57o                        0x000055a16b655677 <unavailable> + 9847

    5    libc.so.6                          0x00002b1070a5d460 __libc_start_main +
    245

    6    tmpbrc7j57o                        0x000055a16b654289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1659820461
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var total1 = 0\n    var total2\
    \ = 0\n    for i in lst1 {\n        total1 += i.count\n    }\n    for i in lst2\
    \ {\n        total2 += i.count\n    }\n    if total1 < total2 {\n        return\
    \ lst1\n    } else {\n        return lst2\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) ==\
    \ [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\"\
    , \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpbrc7j57o/tmpbrc7j57o.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1070871c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1070568b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1070568988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b10705677b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbrc7j57o                        0x000055a16b655677 <unavailable> + 9847

    5    libc.so.6                          0x00002b1070a5d460 __libc_start_main +
    245

    6    tmpbrc7j57o                        0x000055a16b654289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1659820461
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var total1 = 0\n    var total2\
    \ = 0\n    for i in lst1 {\n        total1 += i.count\n    }\n    for i in lst2\
    \ {\n        total2 += i.count\n    }\n    if total1 < total2 {\n        return\
    \ lst1\n    } else {\n        return lst2\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) ==\
    \ [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\"\
    , \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpbrc7j57o/tmpbrc7j57o.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1070871c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1070568b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1070568988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b10705677b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbrc7j57o                        0x000055a16b655677 <unavailable> + 9847

    5    libc.so.6                          0x00002b1070a5d460 __libc_start_main +
    245

    6    tmpbrc7j57o                        0x000055a16b654289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1659820461
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var total1 = 0\n    var total2\
    \ = 0\n    for item in lst1 {\n        total1 += item.count\n    }\n    for item\
    \ in lst2 {\n        total2 += item.count\n    }\n    if total1 < total2 {\n \
    \       return lst1\n    } else {\n        return lst2\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(total_match(lst1: [] as [String], lst2: [] as [String])\
    \ == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"\
    hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"\
    ], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpbrk2wr_o/tmpbrk2wr_o.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0ef940ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0ef9101b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0ef9101988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0ef91007b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbrk2wr_o                        0x000055956a241677 <unavailable> + 9847

    5    libc.so.6                          0x00002b0ef95f6460 __libc_start_main +
    245

    6    tmpbrk2wr_o                        0x000055956a240289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1659820461
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var total1 = 0\n    var total2\
    \ = 0\n    for i in lst1 {\n        total1 += i.count\n    }\n    for i in lst2\
    \ {\n        total2 += i.count\n    }\n    if total1 < total2 {\n        return\
    \ lst1\n    } else {\n        return lst2\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) ==\
    \ [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\"\
    , \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpbrc7j57o/tmpbrc7j57o.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1070871c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1070568b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1070568988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b10705677b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbrc7j57o                        0x000055a16b655677 <unavailable> + 9847

    5    libc.so.6                          0x00002b1070a5d460 __libc_start_main +
    245

    6    tmpbrc7j57o                        0x000055a16b654289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1659820461
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var total1 = 0\n    var total2\
    \ = 0\n    for i in lst1 {\n        total1 += i.count\n    }\n    for i in lst2\
    \ {\n        total2 += i.count\n    }\n    if total1 < total2 {\n        return\
    \ lst1\n    } else {\n        return lst2\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) ==\
    \ [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\"\
    , \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpbrc7j57o/tmpbrc7j57o.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1070871c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1070568b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1070568988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b10705677b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbrc7j57o                        0x000055a16b655677 <unavailable> + 9847

    5    libc.so.6                          0x00002b1070a5d460 __libc_start_main +
    245

    6    tmpbrc7j57o                        0x000055a16b654289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1659820461
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var lst1_total = 0\n    var lst2_total\
    \ = 0\n    for i in lst1 {\n        lst1_total += i.count\n    }\n    for i in\
    \ lst2 {\n        lst2_total += i.count\n    }\n    if lst1_total < lst2_total\
    \ {\n        return lst1\n    } else {\n        return lst2\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(total_match(lst1: [] as [String], lst2: [] as\
    \ [String]) == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpuup3lo6t/tmpuup3lo6t.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac0b26e9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac0b23e0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac0b23e0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac0b23df7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuup3lo6t                        0x000055c39e2dc677 <unavailable> + 9847

    5    libc.so.6                          0x00002ac0b28d5460 __libc_start_main +
    245

    6    tmpuup3lo6t                        0x000055c39e2db289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1659820461
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var total1 = 0\n    var total2\
    \ = 0\n    for i in lst1 {\n        total1 += i.count\n    }\n    for i in lst2\
    \ {\n        total2 += i.count\n    }\n    if total1 < total2 {\n        return\
    \ lst1\n    } else {\n        return lst2\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) ==\
    \ [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\"\
    , \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpbrc7j57o/tmpbrc7j57o.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1070871c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1070568b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1070568988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b10705677b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbrc7j57o                        0x000055a16b655677 <unavailable> + 9847

    5    libc.so.6                          0x00002b1070a5d460 __libc_start_main +
    245

    6    tmpbrc7j57o                        0x000055a16b654289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1659820461
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var lst1_total = 0\n    var lst2_total\
    \ = 0\n    for i in lst1 {\n        lst1_total += i.count\n    }\n    for i in\
    \ lst2 {\n        lst2_total += i.count\n    }\n    if lst1_total < lst2_total\
    \ {\n        return lst1\n    } else {\n        return lst2\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(total_match(lst1: [] as [String], lst2: [] as\
    \ [String]) == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpuup3lo6t/tmpuup3lo6t.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac0b26e9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac0b23e0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac0b23e0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac0b23df7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuup3lo6t                        0x000055c39e2dc677 <unavailable> + 9847

    5    libc.so.6                          0x00002ac0b28d5460 __libc_start_main +
    245

    6    tmpuup3lo6t                        0x000055c39e2db289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1659820461
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var total1 = 0\n    var total2\
    \ = 0\n    for i in lst1 {\n        total1 += i.count\n    }\n    for i in lst2\
    \ {\n        total2 += i.count\n    }\n    if total1 < total2 {\n        return\
    \ lst1\n    } else {\n        return lst2\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) ==\
    \ [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\"\
    , \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpbrc7j57o/tmpbrc7j57o.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1070871c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1070568b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1070568988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b10705677b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbrc7j57o                        0x000055a16b655677 <unavailable> + 9847

    5    libc.so.6                          0x00002b1070a5d460 __libc_start_main +
    245

    6    tmpbrc7j57o                        0x000055a16b654289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1659820461
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var lst1_total = 0\n    var lst2_total\
    \ = 0\n    for i in lst1 {\n        lst1_total += i.count\n    }\n    for i in\
    \ lst2 {\n        lst2_total += i.count\n    }\n    if lst1_total < lst2_total\
    \ {\n        return lst1\n    } else {\n        return lst2\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(total_match(lst1: [] as [String], lst2: [] as\
    \ [String]) == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpuup3lo6t/tmpuup3lo6t.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac0b26e9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac0b23e0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac0b23e0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac0b23df7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuup3lo6t                        0x000055c39e2dc677 <unavailable> + 9847

    5    libc.so.6                          0x00002ac0b28d5460 __libc_start_main +
    245

    6    tmpuup3lo6t                        0x000055c39e2db289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1659820461
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var total1 = 0\n    var total2\
    \ = 0\n    for i in lst1 {\n        total1 += i.count\n    }\n    for i in lst2\
    \ {\n        total2 += i.count\n    }\n    if total1 < total2 {\n        return\
    \ lst1\n    } else {\n        return lst2\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) ==\
    \ [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\"\
    , \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpbrc7j57o/tmpbrc7j57o.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1070871c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1070568b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1070568988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b10705677b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbrc7j57o                        0x000055a16b655677 <unavailable> + 9847

    5    libc.so.6                          0x00002b1070a5d460 __libc_start_main +
    245

    6    tmpbrc7j57o                        0x000055a16b654289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1659820461
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var total1 = 0\n    var total2\
    \ = 0\n    for i in lst1 {\n        total1 += i.count\n    }\n    for i in lst2\
    \ {\n        total2 += i.count\n    }\n    if total1 < total2 {\n        return\
    \ lst1\n    } else {\n        return lst2\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) ==\
    \ [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\"\
    , \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpbrc7j57o/tmpbrc7j57o.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1070871c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1070568b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1070568988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b10705677b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbrc7j57o                        0x000055a16b655677 <unavailable> + 9847

    5    libc.so.6                          0x00002b1070a5d460 __libc_start_main +
    245

    6    tmpbrc7j57o                        0x000055a16b654289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1659820461
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var total1 = 0\n    var total2\
    \ = 0\n    for i in lst1 {\n        total1 += i.count\n    }\n    for i in lst2\
    \ {\n        total2 += i.count\n    }\n    if total1 < total2 {\n        return\
    \ lst1\n    } else {\n        return lst2\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) ==\
    \ [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\"\
    , \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpbrc7j57o/tmpbrc7j57o.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1070871c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1070568b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1070568988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b10705677b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbrc7j57o                        0x000055a16b655677 <unavailable> + 9847

    5    libc.so.6                          0x00002b1070a5d460 __libc_start_main +
    245

    6    tmpbrc7j57o                        0x000055a16b654289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1659820461
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var total1 = 0\n    var total2\
    \ = 0\n    for i in lst1 {\n        total1 += i.count\n    }\n    for i in lst2\
    \ {\n        total2 += i.count\n    }\n    if total1 < total2 {\n        return\
    \ lst1\n    } else {\n        return lst2\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) ==\
    \ [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\"\
    , \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpbrc7j57o/tmpbrc7j57o.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1070871c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1070568b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1070568988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b10705677b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbrc7j57o                        0x000055a16b655677 <unavailable> + 9847

    5    libc.so.6                          0x00002b1070a5d460 __libc_start_main +
    245

    6    tmpbrc7j57o                        0x000055a16b654289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1659820461
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var total1 = 0\n    var total2\
    \ = 0\n    for i in lst1 {\n        total1 += i.count\n    }\n    for i in lst2\
    \ {\n        total2 += i.count\n    }\n    if total1 < total2 {\n        return\
    \ lst1\n    } else {\n        return lst2\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) ==\
    \ [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\"\
    , \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpbrc7j57o/tmpbrc7j57o.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1070871c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1070568b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1070568988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b10705677b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbrc7j57o                        0x000055a16b655677 <unavailable> + 9847

    5    libc.so.6                          0x00002b1070a5d460 __libc_start_main +
    245

    6    tmpbrc7j57o                        0x000055a16b654289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1659820461
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var total1 = 0\n    var total2\
    \ = 0\n    for i in lst1 {\n        total1 += i.count\n    }\n    for i in lst2\
    \ {\n        total2 += i.count\n    }\n    if total1 < total2 {\n        return\
    \ lst1\n    } else {\n        return lst2\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) ==\
    \ [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\"\
    , \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpbrc7j57o/tmpbrc7j57o.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1070871c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1070568b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1070568988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b10705677b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbrc7j57o                        0x000055a16b655677 <unavailable> + 9847

    5    libc.so.6                          0x00002b1070a5d460 __libc_start_main +
    245

    6    tmpbrc7j57o                        0x000055a16b654289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1659820461
- exit_code: 0
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var total1 = 0\n    var total2\
    \ = 0\n    for i in lst1 {\n        total1 += i.count\n    }\n    for i in lst2\
    \ {\n        total2 += i.count\n    }\n    if total1 > total2 {\n        return\
    \ lst2\n    } else {\n        return lst1\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) ==\
    \ [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\"\
    , \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820461
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var total1 = 0\n    var total2\
    \ = 0\n    for i in lst1 {\n        total1 += i.count\n    }\n    for i in lst2\
    \ {\n        total2 += i.count\n    }\n    if total1 < total2 {\n        return\
    \ lst1\n    } else {\n        return lst2\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) ==\
    \ [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\"\
    , \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpbrc7j57o/tmpbrc7j57o.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1070871c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1070568b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1070568988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b10705677b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbrc7j57o                        0x000055a16b655677 <unavailable> + 9847

    5    libc.so.6                          0x00002b1070a5d460 __libc_start_main +
    245

    6    tmpbrc7j57o                        0x000055a16b654289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1659820461
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    let sum1 = lst1.reduce(0) { $0\
    \ + $1.count }\n    let sum2 = lst2.reduce(0) { $0 + $1.count }\n    return sum1\
    \ < sum2 ? lst1 : lst2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmplwp7sm0k/tmplwp7sm0k.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b44918cec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b44915c5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b44915c5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b44915c47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplwp7sm0k                        0x000055de81d52577 <unavailable> + 9591

    5    libc.so.6                          0x00002b4491aba460 __libc_start_main +
    245

    6    tmplwp7sm0k                        0x000055de81d51189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1659820461
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var total1 = 0\n    var total2\
    \ = 0\n    for i in lst1 {\n        total1 += i.count\n    }\n    for i in lst2\
    \ {\n        total2 += i.count\n    }\n    if total1 < total2 {\n        return\
    \ lst1\n    } else {\n        return lst2\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) ==\
    \ [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\"\
    , \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpbrc7j57o/tmpbrc7j57o.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1070871c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1070568b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1070568988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b10705677b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbrc7j57o                        0x000055a16b655677 <unavailable> + 9847

    5    libc.so.6                          0x00002b1070a5d460 __libc_start_main +
    245

    6    tmpbrc7j57o                        0x000055a16b654289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1659820461
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var total1 = 0\n    var total2\
    \ = 0\n    for i in lst1 {\n        total1 += i.count\n    }\n    for i in lst2\
    \ {\n        total2 += i.count\n    }\n    if total1 < total2 {\n        return\
    \ lst1\n    } else {\n        return lst2\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) ==\
    \ [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\"\
    , \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpbrc7j57o/tmpbrc7j57o.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1070871c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1070568b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1070568988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b10705677b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbrc7j57o                        0x000055a16b655677 <unavailable> + 9847

    5    libc.so.6                          0x00002b1070a5d460 __libc_start_main +
    245

    6    tmpbrc7j57o                        0x000055a16b654289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1659820461
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var total1 = 0\n    var total2\
    \ = 0\n    for i in lst1 {\n        total1 += i.count\n    }\n    for i in lst2\
    \ {\n        total2 += i.count\n    }\n    if total1 < total2 {\n        return\
    \ lst1\n    } else {\n        return lst2\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) ==\
    \ [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\"\
    , \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpbrc7j57o/tmpbrc7j57o.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1070871c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1070568b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1070568988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b10705677b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbrc7j57o                        0x000055a16b655677 <unavailable> + 9847

    5    libc.so.6                          0x00002b1070a5d460 __libc_start_main +
    245

    6    tmpbrc7j57o                        0x000055a16b654289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1659820461
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var total1 = 0\n    var total2\
    \ = 0\n    for i in lst1 {\n        total1 += i.count\n    }\n    for i in lst2\
    \ {\n        total2 += i.count\n    }\n    if total1 < total2 {\n        return\
    \ lst1\n    } else {\n        return lst2\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) ==\
    \ [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\"\
    , \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpbrc7j57o/tmpbrc7j57o.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1070871c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1070568b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1070568988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b10705677b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbrc7j57o                        0x000055a16b655677 <unavailable> + 9847

    5    libc.so.6                          0x00002b1070a5d460 __libc_start_main +
    245

    6    tmpbrc7j57o                        0x000055a16b654289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1659820461
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var total1 = 0\n    var total2\
    \ = 0\n    for i in lst1 {\n        total1 += i.count\n    }\n    for i in lst2\
    \ {\n        total2 += i.count\n    }\n    if total1 < total2 {\n        return\
    \ lst1\n    } else {\n        return lst2\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) ==\
    \ [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\"\
    , \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpbrc7j57o/tmpbrc7j57o.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1070871c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1070568b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1070568988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b10705677b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbrc7j57o                        0x000055a16b655677 <unavailable> + 9847

    5    libc.so.6                          0x00002b1070a5d460 __libc_start_main +
    245

    6    tmpbrc7j57o                        0x000055a16b654289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1659820461
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var total1 = 0\n    var total2\
    \ = 0\n    for i in lst1 {\n        total1 += i.count\n    }\n    for i in lst2\
    \ {\n        total2 += i.count\n    }\n    if total1 < total2 {\n        return\
    \ lst1\n    } else {\n        return lst2\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) ==\
    \ [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\"\
    , \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpbrc7j57o/tmpbrc7j57o.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1070871c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1070568b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1070568988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b10705677b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbrc7j57o                        0x000055a16b655677 <unavailable> + 9847

    5    libc.so.6                          0x00002b1070a5d460 __libc_start_main +
    245

    6    tmpbrc7j57o                        0x000055a16b654289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1659820461
- exit_code: 0
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var sum1 = 0\n    var sum2 = 0\n\
    \    for i in lst1 {\n        sum1 += i.count\n    }\n    for i in lst2 {\n  \
    \      sum2 += i.count\n    }\n    if sum1 < sum2 {\n        return lst1\n   \
    \ } else if sum1 > sum2 {\n        return lst2\n    } else {\n        return lst1\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(total_match(lst1: [] as\
    \ [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820461
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var total1 = 0\n    var total2\
    \ = 0\n    for i in lst1 {\n        total1 += i.count\n    }\n    for i in lst2\
    \ {\n        total2 += i.count\n    }\n    if total1 < total2 {\n        return\
    \ lst1\n    } else {\n        return lst2\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) ==\
    \ [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\"\
    , \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpbrc7j57o/tmpbrc7j57o.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1070871c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1070568b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1070568988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b10705677b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbrc7j57o                        0x000055a16b655677 <unavailable> + 9847

    5    libc.so.6                          0x00002b1070a5d460 __libc_start_main +
    245

    6    tmpbrc7j57o                        0x000055a16b654289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1659820461
- exit_code: 0
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var lst1_count = 0\n    var lst2_count\
    \ = 0\n    for i in lst1 {\n        lst1_count += i.count\n    }\n    for i in\
    \ lst2 {\n        lst2_count += i.count\n    }\n    if lst1_count < lst2_count\
    \ {\n        return lst1\n    } else if lst1_count > lst2_count {\n        return\
    \ lst2\n    } else {\n        return lst1\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) ==\
    \ [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\"\
    , \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820461
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var total1 = 0\n    var total2\
    \ = 0\n    for i in lst1 {\n        total1 += i.count\n    }\n    for i in lst2\
    \ {\n        total2 += i.count\n    }\n    if total1 < total2 {\n        return\
    \ lst1\n    } else {\n        return lst2\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) ==\
    \ [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\"\
    , \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpbrc7j57o/tmpbrc7j57o.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1070871c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1070568b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1070568988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b10705677b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbrc7j57o                        0x000055a16b655677 <unavailable> + 9847

    5    libc.so.6                          0x00002b1070a5d460 __libc_start_main +
    245

    6    tmpbrc7j57o                        0x000055a16b654289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1659820461
- exit_code: 0
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var count1 = 0\n    var count2\
    \ = 0\n    for i in lst1 {\n        count1 += i.count\n    }\n    for i in lst2\
    \ {\n        count2 += i.count\n    }\n    if count1 < count2 {\n        return\
    \ lst1\n    } else if count1 > count2 {\n        return lst2\n    } else {\n \
    \       return lst1\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820461
- exit_code: 0
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var count1 = 0\n    var count2\
    \ = 0\n    for i in lst1 {\n        count1 += i.count\n    }\n    for i in lst2\
    \ {\n        count2 += i.count\n    }\n    if count1 < count2 {\n        return\
    \ lst1\n    } else if count1 > count2 {\n        return lst2\n    } else {\n \
    \       return lst1\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820461
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var total1 = 0\n    var total2\
    \ = 0\n    for i in lst1 {\n        total1 += i.count\n    }\n    for i in lst2\
    \ {\n        total2 += i.count\n    }\n    if total1 < total2 {\n        return\
    \ lst1\n    } else {\n        return lst2\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) ==\
    \ [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\"\
    , \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpbrc7j57o/tmpbrc7j57o.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1070871c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1070568b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1070568988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b10705677b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbrc7j57o                        0x000055a16b655677 <unavailable> + 9847

    5    libc.so.6                          0x00002b1070a5d460 __libc_start_main +
    245

    6    tmpbrc7j57o                        0x000055a16b654289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1659820461
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var total1 = 0\n    var total2\
    \ = 0\n    for i in lst1 {\n        total1 += i.count\n    }\n    for i in lst2\
    \ {\n        total2 += i.count\n    }\n    if total1 < total2 {\n        return\
    \ lst1\n    } else {\n        return lst2\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) ==\
    \ [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\"\
    , \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpbrc7j57o/tmpbrc7j57o.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1070871c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1070568b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1070568988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b10705677b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbrc7j57o                        0x000055a16b655677 <unavailable> + 9847

    5    libc.so.6                          0x00002b1070a5d460 __libc_start_main +
    245

    6    tmpbrc7j57o                        0x000055a16b654289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1659820461
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var lst1_total = 0\n    var lst2_total\
    \ = 0\n    for i in lst1 {\n        lst1_total += i.count\n    }\n    for i in\
    \ lst2 {\n        lst2_total += i.count\n    }\n    if lst1_total < lst2_total\
    \ {\n        return lst1\n    } else {\n        return lst2\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(total_match(lst1: [] as [String], lst2: [] as\
    \ [String]) == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpuup3lo6t/tmpuup3lo6t.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac0b26e9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac0b23e0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac0b23e0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac0b23df7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuup3lo6t                        0x000055c39e2dc677 <unavailable> + 9847

    5    libc.so.6                          0x00002ac0b28d5460 __libc_start_main +
    245

    6    tmpuup3lo6t                        0x000055c39e2db289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1659820461
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var lst1_total = 0\n    var lst2_total\
    \ = 0\n    for i in lst1 {\n        lst1_total += i.count\n    }\n    for i in\
    \ lst2 {\n        lst2_total += i.count\n    }\n    if lst1_total < lst2_total\
    \ {\n        return lst1\n    } else {\n        return lst2\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(total_match(lst1: [] as [String], lst2: [] as\
    \ [String]) == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpuup3lo6t/tmpuup3lo6t.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac0b26e9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac0b23e0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac0b23e0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac0b23df7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuup3lo6t                        0x000055c39e2dc677 <unavailable> + 9847

    5    libc.so.6                          0x00002ac0b28d5460 __libc_start_main +
    245

    6    tmpuup3lo6t                        0x000055c39e2db289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1659820461
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var total1 = 0\n    var total2\
    \ = 0\n    for i in lst1 {\n        total1 += i.count\n    }\n    for i in lst2\
    \ {\n        total2 += i.count\n    }\n    if total1 < total2 {\n        return\
    \ lst1\n    } else {\n        return lst2\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) ==\
    \ [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\"\
    , \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpbrc7j57o/tmpbrc7j57o.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1070871c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1070568b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1070568988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b10705677b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbrc7j57o                        0x000055a16b655677 <unavailable> + 9847

    5    libc.so.6                          0x00002b1070a5d460 __libc_start_main +
    245

    6    tmpbrc7j57o                        0x000055a16b654289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1659820461
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var sum1 = 0\n    var sum2 = 0\n\
    \    for i in lst1 {\n        sum1 += i.count\n    }\n    for i in lst2 {\n  \
    \      sum2 += i.count\n    }\n    if sum1 < sum2 {\n        return lst1\n   \
    \ } else {\n        return lst2\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(total_match(lst1: [] as [String], lst2: [] as [String]) == [] as [String])\n\
    assert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\"\
    , \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmp8uhdxclk/tmp8uhdxclk.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3643939c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3643630b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3643630988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b364362f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8uhdxclk                        0x000055cb0f066677 <unavailable> + 9847

    5    libc.so.6                          0x00002b3643b25460 __libc_start_main +
    245

    6    tmp8uhdxclk                        0x000055cb0f065289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1659820461
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var total1 = 0\n    var total2\
    \ = 0\n    for item in lst1 {\n        total1 += item.count\n    }\n    for item\
    \ in lst2 {\n        total2 += item.count\n    }\n    if total1 < total2 {\n \
    \       return lst1\n    } else {\n        return lst2\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(total_match(lst1: [] as [String], lst2: [] as [String])\
    \ == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"\
    hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"\
    ], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpbrk2wr_o/tmpbrk2wr_o.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0ef940ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0ef9101b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0ef9101988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0ef91007b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbrk2wr_o                        0x000055956a241677 <unavailable> + 9847

    5    libc.so.6                          0x00002b0ef95f6460 __libc_start_main +
    245

    6    tmpbrk2wr_o                        0x000055956a240289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1659820461
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var total1 = 0\n    var total2\
    \ = 0\n    for str in lst1 {\n        total1 += str.count\n    }\n    for str\
    \ in lst2 {\n        total2 += str.count\n    }\n    if total1 < total2 {\n  \
    \      return lst1\n    } else {\n        return lst2\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(total_match(lst1: [] as [String], lst2: [] as [String])\
    \ == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"\
    hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"\
    ], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpwok5n2vf/tmpwok5n2vf.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4caa63bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4caa332b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4caa332988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4caa3317b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwok5n2vf                        0x0000560b949b5677 <unavailable> + 9847

    5    libc.so.6                          0x00002b4caa827460 __libc_start_main +
    245

    6    tmpwok5n2vf                        0x0000560b949b4289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1659820461
- exit_code: 0
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var total1 = 0\n    var total2\
    \ = 0\n    for i in lst1 {\n        total1 += i.count\n    }\n    for i in lst2\
    \ {\n        total2 += i.count\n    }\n    if total1 > total2 {\n        return\
    \ lst2\n    } else {\n        return lst1\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) ==\
    \ [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\"\
    , \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820461
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var total1 = 0\n    var total2\
    \ = 0\n    for i in lst1 {\n        total1 += i.count\n    }\n    for i in lst2\
    \ {\n        total2 += i.count\n    }\n    if total1 < total2 {\n        return\
    \ lst1\n    } else {\n        return lst2\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) ==\
    \ [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\"\
    , \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpbrc7j57o/tmpbrc7j57o.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1070871c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1070568b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1070568988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b10705677b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbrc7j57o                        0x000055a16b655677 <unavailable> + 9847

    5    libc.so.6                          0x00002b1070a5d460 __libc_start_main +
    245

    6    tmpbrc7j57o                        0x000055a16b654289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1659820461
- exit_code: 0
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var lst1_total = 0\n    var lst2_total\
    \ = 0\n    for i in lst1 {\n        lst1_total += i.count\n    }\n    for i in\
    \ lst2 {\n        lst2_total += i.count\n    }\n    if lst1_total > lst2_total\
    \ {\n        return lst2\n    } else {\n        return lst1\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(total_match(lst1: [] as [String], lst2: [] as\
    \ [String]) == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820461
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var total1 = 0\n    var total2\
    \ = 0\n    for i in lst1 {\n        total1 += i.count\n    }\n    for i in lst2\
    \ {\n        total2 += i.count\n    }\n    if total1 < total2 {\n        return\
    \ lst1\n    } else {\n        return lst2\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) ==\
    \ [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\"\
    , \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpbrc7j57o/tmpbrc7j57o.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1070871c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1070568b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1070568988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b10705677b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbrc7j57o                        0x000055a16b655677 <unavailable> + 9847

    5    libc.so.6                          0x00002b1070a5d460 __libc_start_main +
    245

    6    tmpbrc7j57o                        0x000055a16b654289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1659820461
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var total1 = 0\n    var total2\
    \ = 0\n    for i in lst1 {\n        total1 += i.count\n    }\n    for i in lst2\
    \ {\n        total2 += i.count\n    }\n    if total1 < total2 {\n        return\
    \ lst1\n    } else {\n        return lst2\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) ==\
    \ [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\"\
    , \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpbrc7j57o/tmpbrc7j57o.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1070871c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1070568b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1070568988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b10705677b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbrc7j57o                        0x000055a16b655677 <unavailable> + 9847

    5    libc.so.6                          0x00002b1070a5d460 __libc_start_main +
    245

    6    tmpbrc7j57o                        0x000055a16b654289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1659820461
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var total1 = 0\n    var total2\
    \ = 0\n    for i in lst1 {\n        total1 += i.count\n    }\n    for i in lst2\
    \ {\n        total2 += i.count\n    }\n    if total1 < total2 {\n        return\
    \ lst1\n    } else {\n        return lst2\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) ==\
    \ [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\"\
    , \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpbrc7j57o/tmpbrc7j57o.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1070871c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1070568b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1070568988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b10705677b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbrc7j57o                        0x000055a16b655677 <unavailable> + 9847

    5    libc.so.6                          0x00002b1070a5d460 __libc_start_main +
    245

    6    tmpbrc7j57o                        0x000055a16b654289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1659820461
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var total1 = 0\n    var total2\
    \ = 0\n    for i in lst1 {\n        total1 += i.count\n    }\n    for i in lst2\
    \ {\n        total2 += i.count\n    }\n    if total1 < total2 {\n        return\
    \ lst1\n    } else {\n        return lst2\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) ==\
    \ [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\"\
    , \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpbrc7j57o/tmpbrc7j57o.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1070871c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1070568b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1070568988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b10705677b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbrc7j57o                        0x000055a16b655677 <unavailable> + 9847

    5    libc.so.6                          0x00002b1070a5d460 __libc_start_main +
    245

    6    tmpbrc7j57o                        0x000055a16b654289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1659820461
- exit_code: 0
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var lst1_count = 0\n    var lst2_count\
    \ = 0\n    for i in lst1 {\n        lst1_count += i.count\n    }\n    for i in\
    \ lst2 {\n        lst2_count += i.count\n    }\n    if lst1_count == lst2_count\
    \ {\n        return lst1\n    } else if lst1_count < lst2_count {\n        return\
    \ lst1\n    } else {\n        return lst2\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) ==\
    \ [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\"\
    , \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820461
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var total1 = 0\n    var total2\
    \ = 0\n    for i in lst1 {\n        total1 += i.count\n    }\n    for i in lst2\
    \ {\n        total2 += i.count\n    }\n    if total1 < total2 {\n        return\
    \ lst1\n    } else {\n        return lst2\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) ==\
    \ [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\"\
    , \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpbrc7j57o/tmpbrc7j57o.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1070871c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1070568b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1070568988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b10705677b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbrc7j57o                        0x000055a16b655677 <unavailable> + 9847

    5    libc.so.6                          0x00002b1070a5d460 __libc_start_main +
    245

    6    tmpbrc7j57o                        0x000055a16b654289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1659820461
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var total1 = 0\n    var total2\
    \ = 0\n    for i in lst1 {\n        total1 += i.count\n    }\n    for i in lst2\
    \ {\n        total2 += i.count\n    }\n    if total1 < total2 {\n        return\
    \ lst1\n    } else {\n        return lst2\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) ==\
    \ [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\"\
    , \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpbrc7j57o/tmpbrc7j57o.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1070871c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1070568b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1070568988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b10705677b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbrc7j57o                        0x000055a16b655677 <unavailable> + 9847

    5    libc.so.6                          0x00002b1070a5d460 __libc_start_main +
    245

    6    tmpbrc7j57o                        0x000055a16b654289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1659820461
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var total1 = 0\n    var total2\
    \ = 0\n    for i in lst1 {\n        total1 += i.count\n    }\n    for i in lst2\
    \ {\n        total2 += i.count\n    }\n    if total1 < total2 {\n        return\
    \ lst1\n    } else {\n        return lst2\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) ==\
    \ [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\"\
    , \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpbrc7j57o/tmpbrc7j57o.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1070871c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1070568b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1070568988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b10705677b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbrc7j57o                        0x000055a16b655677 <unavailable> + 9847

    5    libc.so.6                          0x00002b1070a5d460 __libc_start_main +
    245

    6    tmpbrc7j57o                        0x000055a16b654289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1659820461
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var total1 = 0\n    var total2\
    \ = 0\n    for i in lst1 {\n        total1 += i.count\n    }\n    for i in lst2\
    \ {\n        total2 += i.count\n    }\n    if total1 < total2 {\n        return\
    \ lst1\n    } else {\n        return lst2\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) ==\
    \ [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\"\
    , \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpbrc7j57o/tmpbrc7j57o.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1070871c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1070568b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1070568988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b10705677b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbrc7j57o                        0x000055a16b655677 <unavailable> + 9847

    5    libc.so.6                          0x00002b1070a5d460 __libc_start_main +
    245

    6    tmpbrc7j57o                        0x000055a16b654289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1659820461
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var total1 = 0\n    var total2\
    \ = 0\n    for i in lst1 {\n        total1 += i.count\n    }\n    for i in lst2\
    \ {\n        total2 += i.count\n    }\n    if total1 < total2 {\n        return\
    \ lst1\n    } else {\n        return lst2\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) ==\
    \ [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\"\
    , \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpbrc7j57o/tmpbrc7j57o.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1070871c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1070568b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1070568988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b10705677b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbrc7j57o                        0x000055a16b655677 <unavailable> + 9847

    5    libc.so.6                          0x00002b1070a5d460 __libc_start_main +
    245

    6    tmpbrc7j57o                        0x000055a16b654289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1659820461
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var total1 = 0\n    var total2\
    \ = 0\n    for i in lst1 {\n        total1 += i.count\n    }\n    for i in lst2\
    \ {\n        total2 += i.count\n    }\n    if total1 < total2 {\n        return\
    \ lst1\n    } else {\n        return lst2\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) ==\
    \ [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\"\
    , \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpbrc7j57o/tmpbrc7j57o.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1070871c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1070568b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1070568988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b10705677b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbrc7j57o                        0x000055a16b655677 <unavailable> + 9847

    5    libc.so.6                          0x00002b1070a5d460 __libc_start_main +
    245

    6    tmpbrc7j57o                        0x000055a16b654289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1659820461
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var total1 = 0\n    var total2\
    \ = 0\n    for str in lst1 {\n        total1 += str.count\n    }\n    for str\
    \ in lst2 {\n        total2 += str.count\n    }\n    if total1 < total2 {\n  \
    \      return lst1\n    } else {\n        return lst2\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(total_match(lst1: [] as [String], lst2: [] as [String])\
    \ == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"\
    hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"\
    ], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpwok5n2vf/tmpwok5n2vf.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4caa63bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4caa332b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4caa332988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4caa3317b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwok5n2vf                        0x0000560b949b5677 <unavailable> + 9847

    5    libc.so.6                          0x00002b4caa827460 __libc_start_main +
    245

    6    tmpwok5n2vf                        0x0000560b949b4289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1659820461
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var total1 = 0\n    var total2\
    \ = 0\n    for i in lst1 {\n        total1 += i.count\n    }\n    for i in lst2\
    \ {\n        total2 += i.count\n    }\n    if total1 < total2 {\n        return\
    \ lst1\n    } else {\n        return lst2\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) ==\
    \ [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\"\
    , \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpbrc7j57o/tmpbrc7j57o.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1070871c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1070568b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1070568988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b10705677b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbrc7j57o                        0x000055a16b655677 <unavailable> + 9847

    5    libc.so.6                          0x00002b1070a5d460 __libc_start_main +
    245

    6    tmpbrc7j57o                        0x000055a16b654289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1659820461
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var total1 = 0\n    var total2\
    \ = 0\n    for i in lst1 {\n        total1 += i.count\n    }\n    for i in lst2\
    \ {\n        total2 += i.count\n    }\n    if total1 < total2 {\n        return\
    \ lst1\n    } else {\n        return lst2\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) ==\
    \ [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\"\
    , \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpbrc7j57o/tmpbrc7j57o.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1070871c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1070568b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1070568988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b10705677b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbrc7j57o                        0x000055a16b655677 <unavailable> + 9847

    5    libc.so.6                          0x00002b1070a5d460 __libc_start_main +
    245

    6    tmpbrc7j57o                        0x000055a16b654289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1659820461
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var total1 = 0\n    var total2\
    \ = 0\n    for i in lst1 {\n        total1 += i.count\n    }\n    for i in lst2\
    \ {\n        total2 += i.count\n    }\n    if total1 < total2 {\n        return\
    \ lst1\n    } else {\n        return lst2\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) ==\
    \ [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\"\
    , \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpbrc7j57o/tmpbrc7j57o.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1070871c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1070568b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1070568988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b10705677b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbrc7j57o                        0x000055a16b655677 <unavailable> + 9847

    5    libc.so.6                          0x00002b1070a5d460 __libc_start_main +
    245

    6    tmpbrc7j57o                        0x000055a16b654289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1659820461
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var total1 = 0\n    var total2\
    \ = 0\n    for str in lst1 {\n        total1 += str.count\n    }\n    for str\
    \ in lst2 {\n        total2 += str.count\n    }\n    if total1 < total2 {\n  \
    \      return lst1\n    } else {\n        return lst2\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(total_match(lst1: [] as [String], lst2: [] as [String])\
    \ == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"\
    hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"\
    ], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpwok5n2vf/tmpwok5n2vf.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4caa63bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4caa332b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4caa332988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4caa3317b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwok5n2vf                        0x0000560b949b5677 <unavailable> + 9847

    5    libc.so.6                          0x00002b4caa827460 __libc_start_main +
    245

    6    tmpwok5n2vf                        0x0000560b949b4289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1659820461
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var total1 = 0\n    var total2\
    \ = 0\n    for i in lst1 {\n        total1 += i.count\n    }\n    for i in lst2\
    \ {\n        total2 += i.count\n    }\n    if total1 < total2 {\n        return\
    \ lst1\n    } else {\n        return lst2\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) ==\
    \ [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\"\
    , \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpbrc7j57o/tmpbrc7j57o.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1070871c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1070568b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1070568988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b10705677b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbrc7j57o                        0x000055a16b655677 <unavailable> + 9847

    5    libc.so.6                          0x00002b1070a5d460 __libc_start_main +
    245

    6    tmpbrc7j57o                        0x000055a16b654289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1659820461
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var sum1 = 0\n    var sum2 = 0\n\
    \    for i in lst1 {\n        sum1 += i.count\n    }\n    for i in lst2 {\n  \
    \      sum2 += i.count\n    }\n    if sum1 < sum2 {\n        return lst1\n   \
    \ } else {\n        return lst2\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(total_match(lst1: [] as [String], lst2: [] as [String]) == [] as [String])\n\
    assert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\"\
    , \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmp8uhdxclk/tmp8uhdxclk.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3643939c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3643630b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3643630988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b364362f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8uhdxclk                        0x000055cb0f066677 <unavailable> + 9847

    5    libc.so.6                          0x00002b3643b25460 __libc_start_main +
    245

    6    tmp8uhdxclk                        0x000055cb0f065289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1659820461
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var total1 = 0\n    var total2\
    \ = 0\n    for i in lst1 {\n        total1 += i.count\n    }\n    for i in lst2\
    \ {\n        total2 += i.count\n    }\n    if total1 < total2 {\n        return\
    \ lst1\n    } else {\n        return lst2\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) ==\
    \ [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\"\
    , \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpbrc7j57o/tmpbrc7j57o.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1070871c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1070568b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1070568988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b10705677b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbrc7j57o                        0x000055a16b655677 <unavailable> + 9847

    5    libc.so.6                          0x00002b1070a5d460 __libc_start_main +
    245

    6    tmpbrc7j57o                        0x000055a16b654289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1659820461
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var total1 = 0\n    var total2\
    \ = 0\n    for i in lst1 {\n        total1 += i.count\n    }\n    for i in lst2\
    \ {\n        total2 += i.count\n    }\n    if total1 < total2 {\n        return\
    \ lst1\n    } else {\n        return lst2\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) ==\
    \ [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\"\
    , \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpbrc7j57o/tmpbrc7j57o.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1070871c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1070568b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1070568988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b10705677b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbrc7j57o                        0x000055a16b655677 <unavailable> + 9847

    5    libc.so.6                          0x00002b1070a5d460 __libc_start_main +
    245

    6    tmpbrc7j57o                        0x000055a16b654289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1659820461
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var total1 = 0\n    var total2\
    \ = 0\n    for i in lst1 {\n        total1 += i.count\n    }\n    for i in lst2\
    \ {\n        total2 += i.count\n    }\n    if total1 < total2 {\n        return\
    \ lst1\n    } else {\n        return lst2\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) ==\
    \ [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\"\
    , \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpbrc7j57o/tmpbrc7j57o.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1070871c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1070568b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1070568988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b10705677b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbrc7j57o                        0x000055a16b655677 <unavailable> + 9847

    5    libc.so.6                          0x00002b1070a5d460 __libc_start_main +
    245

    6    tmpbrc7j57o                        0x000055a16b654289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1659820461
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var total1 = 0\n    var total2\
    \ = 0\n    for i in lst1 {\n        total1 += i.count\n    }\n    for i in lst2\
    \ {\n        total2 += i.count\n    }\n    if total1 < total2 {\n        return\
    \ lst1\n    } else {\n        return lst2\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) ==\
    \ [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\"\
    , \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpbrc7j57o/tmpbrc7j57o.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1070871c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1070568b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1070568988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b10705677b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbrc7j57o                        0x000055a16b655677 <unavailable> + 9847

    5    libc.so.6                          0x00002b1070a5d460 __libc_start_main +
    245

    6    tmpbrc7j57o                        0x000055a16b654289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1659820461
- exit_code: 0
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var total1 = 0\n    var total2\
    \ = 0\n    for i in lst1 {\n        total1 += i.count\n    }\n    for i in lst2\
    \ {\n        total2 += i.count\n    }\n    if total1 == total2 {\n        return\
    \ lst1\n    } else if total1 < total2 {\n        return lst1\n    } else {\n \
    \       return lst2\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820461
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var total1 = 0\n    var total2\
    \ = 0\n    for i in lst1 {\n        total1 += i.count\n    }\n    for i in lst2\
    \ {\n        total2 += i.count\n    }\n    if total1 < total2 {\n        return\
    \ lst1\n    } else {\n        return lst2\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) ==\
    \ [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\"\
    , \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpbrc7j57o/tmpbrc7j57o.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1070871c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1070568b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1070568988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b10705677b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbrc7j57o                        0x000055a16b655677 <unavailable> + 9847

    5    libc.so.6                          0x00002b1070a5d460 __libc_start_main +
    245

    6    tmpbrc7j57o                        0x000055a16b654289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1659820461
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var total1 = 0\n    var total2\
    \ = 0\n    for i in lst1 {\n        total1 += i.count\n    }\n    for i in lst2\
    \ {\n        total2 += i.count\n    }\n    if total1 < total2 {\n        return\
    \ lst1\n    } else {\n        return lst2\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) ==\
    \ [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\"\
    , \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpbrc7j57o/tmpbrc7j57o.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1070871c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1070568b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1070568988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b10705677b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbrc7j57o                        0x000055a16b655677 <unavailable> + 9847

    5    libc.so.6                          0x00002b1070a5d460 __libc_start_main +
    245

    6    tmpbrc7j57o                        0x000055a16b654289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1659820461
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var total1 = 0\n    var total2\
    \ = 0\n    for i in lst1 {\n        total1 += i.count\n    }\n    for i in lst2\
    \ {\n        total2 += i.count\n    }\n    if total1 < total2 {\n        return\
    \ lst1\n    } else {\n        return lst2\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) ==\
    \ [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\"\
    , \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpbrc7j57o/tmpbrc7j57o.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1070871c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1070568b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1070568988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b10705677b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbrc7j57o                        0x000055a16b655677 <unavailable> + 9847

    5    libc.so.6                          0x00002b1070a5d460 __libc_start_main +
    245

    6    tmpbrc7j57o                        0x000055a16b654289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1659820461
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var lst1_total = 0\n    var lst2_total\
    \ = 0\n    for i in lst1 {\n        lst1_total += i.count\n    }\n    for i in\
    \ lst2 {\n        lst2_total += i.count\n    }\n    if lst1_total < lst2_total\
    \ {\n        return lst1\n    } else {\n        return lst2\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(total_match(lst1: [] as [String], lst2: [] as\
    \ [String]) == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpuup3lo6t/tmpuup3lo6t.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac0b26e9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac0b23e0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac0b23e0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac0b23df7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuup3lo6t                        0x000055c39e2dc677 <unavailable> + 9847

    5    libc.so.6                          0x00002ac0b28d5460 __libc_start_main +
    245

    6    tmpuup3lo6t                        0x000055c39e2db289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1659820461
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var total1 = 0\n    var total2\
    \ = 0\n    for i in lst1 {\n        total1 += i.count\n    }\n    for i in lst2\
    \ {\n        total2 += i.count\n    }\n    if total1 < total2 {\n        return\
    \ lst1\n    } else {\n        return lst2\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) ==\
    \ [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\"\
    , \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpbrc7j57o/tmpbrc7j57o.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1070871c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1070568b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1070568988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b10705677b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbrc7j57o                        0x000055a16b655677 <unavailable> + 9847

    5    libc.so.6                          0x00002b1070a5d460 __libc_start_main +
    245

    6    tmpbrc7j57o                        0x000055a16b654289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1659820461
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var total1 = 0\n    var total2\
    \ = 0\n    for str in lst1 {\n        total1 += str.count\n    }\n    for str\
    \ in lst2 {\n        total2 += str.count\n    }\n    if total1 < total2 {\n  \
    \      return lst1\n    } else {\n        return lst2\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(total_match(lst1: [] as [String], lst2: [] as [String])\
    \ == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"\
    hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"\
    ], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpwok5n2vf/tmpwok5n2vf.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4caa63bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4caa332b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4caa332988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4caa3317b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwok5n2vf                        0x0000560b949b5677 <unavailable> + 9847

    5    libc.so.6                          0x00002b4caa827460 __libc_start_main +
    245

    6    tmpwok5n2vf                        0x0000560b949b4289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1659820461
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var total1 = 0\n    var total2\
    \ = 0\n    for i in lst1 {\n        total1 += i.count\n    }\n    for i in lst2\
    \ {\n        total2 += i.count\n    }\n    if total1 < total2 {\n        return\
    \ lst1\n    } else {\n        return lst2\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) ==\
    \ [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\"\
    , \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpbrc7j57o/tmpbrc7j57o.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1070871c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1070568b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1070568988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b10705677b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbrc7j57o                        0x000055a16b655677 <unavailable> + 9847

    5    libc.so.6                          0x00002b1070a5d460 __libc_start_main +
    245

    6    tmpbrc7j57o                        0x000055a16b654289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1659820461
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var sum1 = 0\n    var sum2 = 0\n\
    \    for i in lst1 {\n        sum1 += i.count\n    }\n    for i in lst2 {\n  \
    \      sum2 += i.count\n    }\n    if sum1 < sum2 {\n        return lst1\n   \
    \ } else {\n        return lst2\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(total_match(lst1: [] as [String], lst2: [] as [String]) == [] as [String])\n\
    assert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\"\
    , \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmp8uhdxclk/tmp8uhdxclk.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3643939c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3643630b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3643630988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b364362f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8uhdxclk                        0x000055cb0f066677 <unavailable> + 9847

    5    libc.so.6                          0x00002b3643b25460 __libc_start_main +
    245

    6    tmp8uhdxclk                        0x000055cb0f065289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1659820461
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var total1 = 0\n    var total2\
    \ = 0\n    for str in lst1 {\n        total1 += str.count\n    }\n    for str\
    \ in lst2 {\n        total2 += str.count\n    }\n    if total1 < total2 {\n  \
    \      return lst1\n    } else {\n        return lst2\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(total_match(lst1: [] as [String], lst2: [] as [String])\
    \ == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"\
    hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"\
    ], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpwok5n2vf/tmpwok5n2vf.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4caa63bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4caa332b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4caa332988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4caa3317b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwok5n2vf                        0x0000560b949b5677 <unavailable> + 9847

    5    libc.so.6                          0x00002b4caa827460 __libc_start_main +
    245

    6    tmpwok5n2vf                        0x0000560b949b4289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1659820461
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var sum1 = 0\n    var sum2 = 0\n\
    \    for i in lst1 {\n        sum1 += i.count\n    }\n    for i in lst2 {\n  \
    \      sum2 += i.count\n    }\n    if sum1 < sum2 {\n        return lst1\n   \
    \ } else {\n        return lst2\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(total_match(lst1: [] as [String], lst2: [] as [String]) == [] as [String])\n\
    assert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\"\
    , \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmp8uhdxclk/tmp8uhdxclk.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3643939c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3643630b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3643630988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b364362f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8uhdxclk                        0x000055cb0f066677 <unavailable> + 9847

    5    libc.so.6                          0x00002b3643b25460 __libc_start_main +
    245

    6    tmp8uhdxclk                        0x000055cb0f065289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1659820461
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var total1 = 0\n    var total2\
    \ = 0\n    for i in lst1 {\n        total1 += i.count\n    }\n    for i in lst2\
    \ {\n        total2 += i.count\n    }\n    if total1 < total2 {\n        return\
    \ lst1\n    } else {\n        return lst2\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) ==\
    \ [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\"\
    , \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpbrc7j57o/tmpbrc7j57o.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1070871c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1070568b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1070568988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b10705677b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbrc7j57o                        0x000055a16b655677 <unavailable> + 9847

    5    libc.so.6                          0x00002b1070a5d460 __libc_start_main +
    245

    6    tmpbrc7j57o                        0x000055a16b654289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1659820461
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var total_lst1 = 0\n    var total_lst2\
    \ = 0\n    for i in lst1 {\n        total_lst1 += i.count\n    }\n    for i in\
    \ lst2 {\n        total_lst2 += i.count\n    }\n    if total_lst1 < total_lst2\
    \ {\n        return lst1\n    } else {\n        return lst2\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(total_match(lst1: [] as [String], lst2: [] as\
    \ [String]) == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpi0akg1n0/tmpi0akg1n0.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3f5e665c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3f5e35cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3f5e35c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3f5e35b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpi0akg1n0                        0x000055627dfdd677 <unavailable> + 9847

    5    libc.so.6                          0x00002b3f5e851460 __libc_start_main +
    245

    6    tmpi0akg1n0                        0x000055627dfdc289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1659820461
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var total1 = 0\n    var total2\
    \ = 0\n    for i in lst1 {\n        total1 += i.count\n    }\n    for i in lst2\
    \ {\n        total2 += i.count\n    }\n    if total1 < total2 {\n        return\
    \ lst1\n    } else {\n        return lst2\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) ==\
    \ [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\"\
    , \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpbrc7j57o/tmpbrc7j57o.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1070871c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1070568b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1070568988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b10705677b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbrc7j57o                        0x000055a16b655677 <unavailable> + 9847

    5    libc.so.6                          0x00002b1070a5d460 __libc_start_main +
    245

    6    tmpbrc7j57o                        0x000055a16b654289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1659820461
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var total1 = 0\n    var total2\
    \ = 0\n    for i in lst1 {\n        total1 += i.count\n    }\n    for i in lst2\
    \ {\n        total2 += i.count\n    }\n    if total1 < total2 {\n        return\
    \ lst1\n    } else {\n        return lst2\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) ==\
    \ [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\"\
    , \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpbrc7j57o/tmpbrc7j57o.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1070871c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1070568b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1070568988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b10705677b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbrc7j57o                        0x000055a16b655677 <unavailable> + 9847

    5    libc.so.6                          0x00002b1070a5d460 __libc_start_main +
    245

    6    tmpbrc7j57o                        0x000055a16b654289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1659820461
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var total1 = 0\n    var total2\
    \ = 0\n    for i in lst1 {\n        total1 += i.count\n    }\n    for i in lst2\
    \ {\n        total2 += i.count\n    }\n    if total1 < total2 {\n        return\
    \ lst1\n    } else {\n        return lst2\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) ==\
    \ [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\"\
    , \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpbrc7j57o/tmpbrc7j57o.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1070871c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1070568b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1070568988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b10705677b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbrc7j57o                        0x000055a16b655677 <unavailable> + 9847

    5    libc.so.6                          0x00002b1070a5d460 __libc_start_main +
    245

    6    tmpbrc7j57o                        0x000055a16b654289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1659820461
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var total1 = 0\n    var total2\
    \ = 0\n    for i in lst1 {\n        total1 += i.count\n    }\n    for i in lst2\
    \ {\n        total2 += i.count\n    }\n    if total1 < total2 {\n        return\
    \ lst1\n    } else {\n        return lst2\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) ==\
    \ [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\"\
    , \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpbrc7j57o/tmpbrc7j57o.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1070871c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1070568b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1070568988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b10705677b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbrc7j57o                        0x000055a16b655677 <unavailable> + 9847

    5    libc.so.6                          0x00002b1070a5d460 __libc_start_main +
    245

    6    tmpbrc7j57o                        0x000055a16b654289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1659820461
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var total1 = 0\n    var total2\
    \ = 0\n    for item in lst1 {\n        total1 += item.count\n    }\n    for item\
    \ in lst2 {\n        total2 += item.count\n    }\n    if total1 < total2 {\n \
    \       return lst1\n    } else {\n        return lst2\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(total_match(lst1: [] as [String], lst2: [] as [String])\
    \ == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"\
    hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"\
    ], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpbrk2wr_o/tmpbrk2wr_o.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0ef940ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0ef9101b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0ef9101988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0ef91007b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbrk2wr_o                        0x000055956a241677 <unavailable> + 9847

    5    libc.so.6                          0x00002b0ef95f6460 __libc_start_main +
    245

    6    tmpbrk2wr_o                        0x000055956a240289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1659820461
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var total1 = 0\n    var total2\
    \ = 0\n    for i in lst1 {\n        total1 += i.count\n    }\n    for i in lst2\
    \ {\n        total2 += i.count\n    }\n    if total1 < total2 {\n        return\
    \ lst1\n    } else {\n        return lst2\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) ==\
    \ [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\"\
    , \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpbrc7j57o/tmpbrc7j57o.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1070871c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1070568b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1070568988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b10705677b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbrc7j57o                        0x000055a16b655677 <unavailable> + 9847

    5    libc.so.6                          0x00002b1070a5d460 __libc_start_main +
    245

    6    tmpbrc7j57o                        0x000055a16b654289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1659820461
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var total1 = 0\n    var total2\
    \ = 0\n    for i in lst1 {\n        total1 += i.count\n    }\n    for i in lst2\
    \ {\n        total2 += i.count\n    }\n    if total1 < total2 {\n        return\
    \ lst1\n    } else {\n        return lst2\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) ==\
    \ [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\"\
    , \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpbrc7j57o/tmpbrc7j57o.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1070871c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1070568b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1070568988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b10705677b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbrc7j57o                        0x000055a16b655677 <unavailable> + 9847

    5    libc.so.6                          0x00002b1070a5d460 __libc_start_main +
    245

    6    tmpbrc7j57o                        0x000055a16b654289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1659820461
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var total1 = 0\n    var total2\
    \ = 0\n    for i in lst1 {\n        total1 += i.count\n    }\n    for i in lst2\
    \ {\n        total2 += i.count\n    }\n    if total1 < total2 {\n        return\
    \ lst1\n    } else {\n        return lst2\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) ==\
    \ [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\"\
    , \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpbrc7j57o/tmpbrc7j57o.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1070871c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1070568b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1070568988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b10705677b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbrc7j57o                        0x000055a16b655677 <unavailable> + 9847

    5    libc.so.6                          0x00002b1070a5d460 __libc_start_main +
    245

    6    tmpbrc7j57o                        0x000055a16b654289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1659820461
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var total1 = 0\n    var total2\
    \ = 0\n    for i in lst1 {\n        total1 += i.count\n    }\n    for i in lst2\
    \ {\n        total2 += i.count\n    }\n    if total1 < total2 {\n        return\
    \ lst1\n    } else {\n        return lst2\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) ==\
    \ [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\"\
    , \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpbrc7j57o/tmpbrc7j57o.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1070871c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1070568b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1070568988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b10705677b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbrc7j57o                        0x000055a16b655677 <unavailable> + 9847

    5    libc.so.6                          0x00002b1070a5d460 __libc_start_main +
    245

    6    tmpbrc7j57o                        0x000055a16b654289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1659820461
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var sum1 = 0\n    var sum2 = 0\n\
    \    for i in lst1 {\n        sum1 += i.count\n    }\n    for i in lst2 {\n  \
    \      sum2 += i.count\n    }\n    if sum1 < sum2 {\n        return lst1\n   \
    \ } else {\n        return lst2\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(total_match(lst1: [] as [String], lst2: [] as [String]) == [] as [String])\n\
    assert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\"\
    , \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmp8uhdxclk/tmp8uhdxclk.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3643939c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3643630b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3643630988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b364362f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8uhdxclk                        0x000055cb0f066677 <unavailable> + 9847

    5    libc.so.6                          0x00002b3643b25460 __libc_start_main +
    245

    6    tmp8uhdxclk                        0x000055cb0f065289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1659820461
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var total1 = 0\n    var total2\
    \ = 0\n    for i in lst1 {\n        total1 += i.count\n    }\n    for i in lst2\
    \ {\n        total2 += i.count\n    }\n    if total1 < total2 {\n        return\
    \ lst1\n    } else {\n        return lst2\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) ==\
    \ [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\"\
    , \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpbrc7j57o/tmpbrc7j57o.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1070871c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1070568b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1070568988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b10705677b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbrc7j57o                        0x000055a16b655677 <unavailable> + 9847

    5    libc.so.6                          0x00002b1070a5d460 __libc_start_main +
    245

    6    tmpbrc7j57o                        0x000055a16b654289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1659820461
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var lst1_total = 0\n    var lst2_total\
    \ = 0\n    for i in lst1 {\n        lst1_total += i.count\n    }\n    for i in\
    \ lst2 {\n        lst2_total += i.count\n    }\n    if lst1_total < lst2_total\
    \ {\n        return lst1\n    } else {\n        return lst2\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(total_match(lst1: [] as [String], lst2: [] as\
    \ [String]) == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpuup3lo6t/tmpuup3lo6t.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac0b26e9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac0b23e0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac0b23e0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac0b23df7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuup3lo6t                        0x000055c39e2dc677 <unavailable> + 9847

    5    libc.so.6                          0x00002ac0b28d5460 __libc_start_main +
    245

    6    tmpuup3lo6t                        0x000055c39e2db289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1659820461
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var total1 = 0\n    var total2\
    \ = 0\n    for i in lst1 {\n        total1 += i.count\n    }\n    for i in lst2\
    \ {\n        total2 += i.count\n    }\n    if total1 < total2 {\n        return\
    \ lst1\n    } else {\n        return lst2\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) ==\
    \ [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\"\
    , \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpbrc7j57o/tmpbrc7j57o.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1070871c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1070568b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1070568988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b10705677b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbrc7j57o                        0x000055a16b655677 <unavailable> + 9847

    5    libc.so.6                          0x00002b1070a5d460 __libc_start_main +
    245

    6    tmpbrc7j57o                        0x000055a16b654289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1659820461
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var total1 = 0\n    var total2\
    \ = 0\n    for i in lst1 {\n        total1 += i.count\n    }\n    for i in lst2\
    \ {\n        total2 += i.count\n    }\n    if total1 < total2 {\n        return\
    \ lst1\n    } else {\n        return lst2\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) ==\
    \ [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\"\
    , \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpbrc7j57o/tmpbrc7j57o.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1070871c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1070568b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1070568988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b10705677b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbrc7j57o                        0x000055a16b655677 <unavailable> + 9847

    5    libc.so.6                          0x00002b1070a5d460 __libc_start_main +
    245

    6    tmpbrc7j57o                        0x000055a16b654289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1659820461
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var total1 = 0\n    var total2\
    \ = 0\n    for i in lst1 {\n        total1 += i.count\n    }\n    for i in lst2\
    \ {\n        total2 += i.count\n    }\n    if total1 < total2 {\n        return\
    \ lst1\n    } else {\n        return lst2\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) ==\
    \ [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\"\
    , \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpbrc7j57o/tmpbrc7j57o.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1070871c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1070568b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1070568988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b10705677b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbrc7j57o                        0x000055a16b655677 <unavailable> + 9847

    5    libc.so.6                          0x00002b1070a5d460 __libc_start_main +
    245

    6    tmpbrc7j57o                        0x000055a16b654289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1659820461
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var total1 = 0\n    var total2\
    \ = 0\n    for i in lst1 {\n        total1 += i.count\n    }\n    for i in lst2\
    \ {\n        total2 += i.count\n    }\n    if total1 < total2 {\n        return\
    \ lst1\n    } else {\n        return lst2\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) ==\
    \ [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\"\
    , \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpbrc7j57o/tmpbrc7j57o.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1070871c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1070568b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1070568988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b10705677b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbrc7j57o                        0x000055a16b655677 <unavailable> + 9847

    5    libc.so.6                          0x00002b1070a5d460 __libc_start_main +
    245

    6    tmpbrc7j57o                        0x000055a16b654289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1659820461
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var total1 = 0\n    var total2\
    \ = 0\n    for i in lst1 {\n        total1 += i.count\n    }\n    for i in lst2\
    \ {\n        total2 += i.count\n    }\n    if total1 < total2 {\n        return\
    \ lst1\n    } else {\n        return lst2\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) ==\
    \ [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\"\
    , \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpbrc7j57o/tmpbrc7j57o.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1070871c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1070568b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1070568988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b10705677b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbrc7j57o                        0x000055a16b655677 <unavailable> + 9847

    5    libc.so.6                          0x00002b1070a5d460 __libc_start_main +
    245

    6    tmpbrc7j57o                        0x000055a16b654289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1659820461
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var total1 = 0\n    var total2\
    \ = 0\n    for i in lst1 {\n        total1 += i.count\n    }\n    for i in lst2\
    \ {\n        total2 += i.count\n    }\n    if total1 < total2 {\n        return\
    \ lst1\n    } else {\n        return lst2\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) ==\
    \ [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\"\
    , \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpbrc7j57o/tmpbrc7j57o.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1070871c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1070568b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1070568988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b10705677b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbrc7j57o                        0x000055a16b655677 <unavailable> + 9847

    5    libc.so.6                          0x00002b1070a5d460 __libc_start_main +
    245

    6    tmpbrc7j57o                        0x000055a16b654289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1659820461
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var total1 = 0\n    var total2\
    \ = 0\n    for str in lst1 {\n        total1 += str.count\n    }\n    for str\
    \ in lst2 {\n        total2 += str.count\n    }\n    if total1 < total2 {\n  \
    \      return lst1\n    } else {\n        return lst2\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(total_match(lst1: [] as [String], lst2: [] as [String])\
    \ == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"\
    hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"\
    ], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpwok5n2vf/tmpwok5n2vf.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4caa63bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4caa332b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4caa332988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4caa3317b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwok5n2vf                        0x0000560b949b5677 <unavailable> + 9847

    5    libc.so.6                          0x00002b4caa827460 __libc_start_main +
    245

    6    tmpwok5n2vf                        0x0000560b949b4289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1659820461
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var total1 = 0\n    var total2\
    \ = 0\n    for i in lst1 {\n        total1 += i.count\n    }\n    for i in lst2\
    \ {\n        total2 += i.count\n    }\n    if total1 < total2 {\n        return\
    \ lst1\n    } else {\n        return lst2\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) ==\
    \ [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\"\
    , \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpbrc7j57o/tmpbrc7j57o.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1070871c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1070568b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1070568988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b10705677b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbrc7j57o                        0x000055a16b655677 <unavailable> + 9847

    5    libc.so.6                          0x00002b1070a5d460 __libc_start_main +
    245

    6    tmpbrc7j57o                        0x000055a16b654289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1659820461
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var total1 = 0\n    var total2\
    \ = 0\n    for i in lst1 {\n        total1 += i.count\n    }\n    for i in lst2\
    \ {\n        total2 += i.count\n    }\n    if total1 < total2 {\n        return\
    \ lst1\n    } else {\n        return lst2\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) ==\
    \ [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\"\
    , \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpbrc7j57o/tmpbrc7j57o.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1070871c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1070568b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1070568988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b10705677b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbrc7j57o                        0x000055a16b655677 <unavailable> + 9847

    5    libc.so.6                          0x00002b1070a5d460 __libc_start_main +
    245

    6    tmpbrc7j57o                        0x000055a16b654289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1659820461
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var total1 = 0\n    var total2\
    \ = 0\n    for i in lst1 {\n        total1 += i.count\n    }\n    for i in lst2\
    \ {\n        total2 += i.count\n    }\n    if total1 < total2 {\n        return\
    \ lst1\n    } else {\n        return lst2\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) ==\
    \ [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\"\
    , \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpbrc7j57o/tmpbrc7j57o.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1070871c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1070568b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1070568988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b10705677b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbrc7j57o                        0x000055a16b655677 <unavailable> + 9847

    5    libc.so.6                          0x00002b1070a5d460 __libc_start_main +
    245

    6    tmpbrc7j57o                        0x000055a16b654289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1659820461
- exit_code: 0
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var sum1 = 0\n    var sum2 = 0\n\
    \    for i in lst1 {\n        sum1 += i.count\n    }\n    for i in lst2 {\n  \
    \      sum2 += i.count\n    }\n    if sum1 == sum2 {\n        return lst1\n  \
    \  } else if sum1 < sum2 {\n        return lst1\n    } else {\n        return\
    \ lst2\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820461
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var lst1_total = 0\n    var lst2_total\
    \ = 0\n    for i in lst1 {\n        lst1_total += i.count\n    }\n    for i in\
    \ lst2 {\n        lst2_total += i.count\n    }\n    if lst1_total < lst2_total\
    \ {\n        return lst1\n    } else {\n        return lst2\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(total_match(lst1: [] as [String], lst2: [] as\
    \ [String]) == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpuup3lo6t/tmpuup3lo6t.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac0b26e9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac0b23e0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac0b23e0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac0b23df7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuup3lo6t                        0x000055c39e2dc677 <unavailable> + 9847

    5    libc.so.6                          0x00002ac0b28d5460 __libc_start_main +
    245

    6    tmpuup3lo6t                        0x000055c39e2db289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1659820461
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var total1 = 0\n    var total2\
    \ = 0\n    for i in lst1 {\n        total1 += i.count\n    }\n    for i in lst2\
    \ {\n        total2 += i.count\n    }\n    if total1 < total2 {\n        return\
    \ lst1\n    } else {\n        return lst2\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) ==\
    \ [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\"\
    , \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpbrc7j57o/tmpbrc7j57o.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1070871c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1070568b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1070568988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b10705677b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbrc7j57o                        0x000055a16b655677 <unavailable> + 9847

    5    libc.so.6                          0x00002b1070a5d460 __libc_start_main +
    245

    6    tmpbrc7j57o                        0x000055a16b654289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1659820461
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var total1 = 0\n    var total2\
    \ = 0\n    for i in lst1 {\n        total1 += i.count\n    }\n    for i in lst2\
    \ {\n        total2 += i.count\n    }\n    if total1 < total2 {\n        return\
    \ lst1\n    } else {\n        return lst2\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) ==\
    \ [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\"\
    , \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpbrc7j57o/tmpbrc7j57o.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1070871c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1070568b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1070568988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b10705677b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbrc7j57o                        0x000055a16b655677 <unavailable> + 9847

    5    libc.so.6                          0x00002b1070a5d460 __libc_start_main +
    245

    6    tmpbrc7j57o                        0x000055a16b654289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1659820461
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var total1 = 0\n    var total2\
    \ = 0\n    for i in lst1 {\n        total1 += i.count\n    }\n    for i in lst2\
    \ {\n        total2 += i.count\n    }\n    if total1 < total2 {\n        return\
    \ lst1\n    } else {\n        return lst2\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) ==\
    \ [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\"\
    , \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpbrc7j57o/tmpbrc7j57o.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1070871c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1070568b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1070568988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b10705677b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbrc7j57o                        0x000055a16b655677 <unavailable> + 9847

    5    libc.so.6                          0x00002b1070a5d460 __libc_start_main +
    245

    6    tmpbrc7j57o                        0x000055a16b654289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1659820461
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var total1 = 0\n    var total2\
    \ = 0\n    for i in lst1 {\n        total1 += i.count\n    }\n    for i in lst2\
    \ {\n        total2 += i.count\n    }\n    if total1 < total2 {\n        return\
    \ lst1\n    } else {\n        return lst2\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) ==\
    \ [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\"\
    , \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpbrc7j57o/tmpbrc7j57o.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1070871c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1070568b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1070568988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b10705677b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbrc7j57o                        0x000055a16b655677 <unavailable> + 9847

    5    libc.so.6                          0x00002b1070a5d460 __libc_start_main +
    245

    6    tmpbrc7j57o                        0x000055a16b654289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1659820461
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var total1 = 0\n    var total2\
    \ = 0\n    for i in lst1 {\n        total1 += i.count\n    }\n    for i in lst2\
    \ {\n        total2 += i.count\n    }\n    if total1 < total2 {\n        return\
    \ lst1\n    } else {\n        return lst2\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) ==\
    \ [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\"\
    , \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpbrc7j57o/tmpbrc7j57o.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1070871c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1070568b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1070568988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b10705677b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbrc7j57o                        0x000055a16b655677 <unavailable> + 9847

    5    libc.so.6                          0x00002b1070a5d460 __libc_start_main +
    245

    6    tmpbrc7j57o                        0x000055a16b654289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1659820461
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var total1 = 0\n    var total2\
    \ = 0\n    for i in lst1 {\n        total1 += i.count\n    }\n    for i in lst2\
    \ {\n        total2 += i.count\n    }\n    if total1 < total2 {\n        return\
    \ lst1\n    } else {\n        return lst2\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) ==\
    \ [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\"\
    , \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpbrc7j57o/tmpbrc7j57o.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1070871c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1070568b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1070568988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b10705677b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbrc7j57o                        0x000055a16b655677 <unavailable> + 9847

    5    libc.so.6                          0x00002b1070a5d460 __libc_start_main +
    245

    6    tmpbrc7j57o                        0x000055a16b654289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1659820461
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var total1 = 0\n    var total2\
    \ = 0\n    for i in lst1 {\n        total1 += i.count\n    }\n    for i in lst2\
    \ {\n        total2 += i.count\n    }\n    if total1 < total2 {\n        return\
    \ lst1\n    } else {\n        return lst2\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) ==\
    \ [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\"\
    , \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpbrc7j57o/tmpbrc7j57o.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1070871c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1070568b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1070568988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b10705677b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbrc7j57o                        0x000055a16b655677 <unavailable> + 9847

    5    libc.so.6                          0x00002b1070a5d460 __libc_start_main +
    245

    6    tmpbrc7j57o                        0x000055a16b654289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1659820461
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var lst1_total = 0\n    var lst2_total\
    \ = 0\n    for i in lst1 {\n        lst1_total += i.count\n    }\n    for i in\
    \ lst2 {\n        lst2_total += i.count\n    }\n    if lst1_total < lst2_total\
    \ {\n        return lst1\n    } else {\n        return lst2\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(total_match(lst1: [] as [String], lst2: [] as\
    \ [String]) == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpuup3lo6t/tmpuup3lo6t.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac0b26e9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac0b23e0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac0b23e0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac0b23df7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuup3lo6t                        0x000055c39e2dc677 <unavailable> + 9847

    5    libc.so.6                          0x00002ac0b28d5460 __libc_start_main +
    245

    6    tmpuup3lo6t                        0x000055c39e2db289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1659820461
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var sum1 = 0\n    var sum2 = 0\n\
    \    for i in lst1 {\n        sum1 += i.count\n    }\n    for i in lst2 {\n  \
    \      sum2 += i.count\n    }\n    if sum1 < sum2 {\n        return lst1\n   \
    \ } else {\n        return lst2\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(total_match(lst1: [] as [String], lst2: [] as [String]) == [] as [String])\n\
    assert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\"\
    , \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmp8uhdxclk/tmp8uhdxclk.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3643939c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3643630b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3643630988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b364362f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8uhdxclk                        0x000055cb0f066677 <unavailable> + 9847

    5    libc.so.6                          0x00002b3643b25460 __libc_start_main +
    245

    6    tmp8uhdxclk                        0x000055cb0f065289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1659820461
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var total1 = 0\n    var total2\
    \ = 0\n    for i in lst1 {\n        total1 += i.count\n    }\n    for i in lst2\
    \ {\n        total2 += i.count\n    }\n    if total1 < total2 {\n        return\
    \ lst1\n    } else {\n        return lst2\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) ==\
    \ [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\"\
    , \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpbrc7j57o/tmpbrc7j57o.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1070871c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1070568b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1070568988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b10705677b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbrc7j57o                        0x000055a16b655677 <unavailable> + 9847

    5    libc.so.6                          0x00002b1070a5d460 __libc_start_main +
    245

    6    tmpbrc7j57o                        0x000055a16b654289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1659820461
- exit_code: 0
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var lst1_count = 0\n    var lst2_count\
    \ = 0\n    for i in lst1 {\n        lst1_count += i.count\n    }\n    for i in\
    \ lst2 {\n        lst2_count += i.count\n    }\n    if lst1_count == lst2_count\
    \ {\n        return lst1\n    } else if lst1_count < lst2_count {\n        return\
    \ lst1\n    } else {\n        return lst2\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) ==\
    \ [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\"\
    , \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820461
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var total1 = 0\n    var total2\
    \ = 0\n    for i in lst1 {\n        total1 += i.count\n    }\n    for i in lst2\
    \ {\n        total2 += i.count\n    }\n    if total1 < total2 {\n        return\
    \ lst1\n    } else {\n        return lst2\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) ==\
    \ [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\"\
    , \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpbrc7j57o/tmpbrc7j57o.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1070871c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1070568b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1070568988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b10705677b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbrc7j57o                        0x000055a16b655677 <unavailable> + 9847

    5    libc.so.6                          0x00002b1070a5d460 __libc_start_main +
    245

    6    tmpbrc7j57o                        0x000055a16b654289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1659820461
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var sum1 = 0\n    var sum2 = 0\n\
    \    for i in lst1 {\n        sum1 += i.count\n    }\n    for i in lst2 {\n  \
    \      sum2 += i.count\n    }\n    if sum1 < sum2 {\n        return lst1\n   \
    \ } else {\n        return lst2\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(total_match(lst1: [] as [String], lst2: [] as [String]) == [] as [String])\n\
    assert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\"\
    , \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmp8uhdxclk/tmp8uhdxclk.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3643939c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3643630b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3643630988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b364362f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8uhdxclk                        0x000055cb0f066677 <unavailable> + 9847

    5    libc.so.6                          0x00002b3643b25460 __libc_start_main +
    245

    6    tmp8uhdxclk                        0x000055cb0f065289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1659820461
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var total1 = 0\n    var total2\
    \ = 0\n    for i in lst1 {\n        total1 += i.count\n    }\n    for i in lst2\
    \ {\n        total2 += i.count\n    }\n    if total1 < total2 {\n        return\
    \ lst1\n    } else {\n        return lst2\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) ==\
    \ [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\"\
    , \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpbrc7j57o/tmpbrc7j57o.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1070871c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1070568b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1070568988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b10705677b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbrc7j57o                        0x000055a16b655677 <unavailable> + 9847

    5    libc.so.6                          0x00002b1070a5d460 __libc_start_main +
    245

    6    tmpbrc7j57o                        0x000055a16b654289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1659820461
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var total1 = 0\n    var total2\
    \ = 0\n    for i in lst1 {\n        total1 += i.count\n    }\n    for i in lst2\
    \ {\n        total2 += i.count\n    }\n    if total1 < total2 {\n        return\
    \ lst1\n    } else {\n        return lst2\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) ==\
    \ [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\"\
    , \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpbrc7j57o/tmpbrc7j57o.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1070871c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1070568b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1070568988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b10705677b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbrc7j57o                        0x000055a16b655677 <unavailable> + 9847

    5    libc.so.6                          0x00002b1070a5d460 __libc_start_main +
    245

    6    tmpbrc7j57o                        0x000055a16b654289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1659820461
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var total_chars_lst1 = 0\n    var\
    \ total_chars_lst2 = 0\n    for i in lst1 {\n        total_chars_lst1 += i.count\n\
    \    }\n    for i in lst2 {\n        total_chars_lst2 += i.count\n    }\n    if\
    \ total_chars_lst1 < total_chars_lst2 {\n        return lst1\n    } else {\n \
    \       return lst2\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpz4kz9tpg/tmpz4kz9tpg.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2664fddc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2664cd4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2664cd4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2664cd37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpz4kz9tpg                        0x00005645cbf1f677 <unavailable> + 9847

    5    libc.so.6                          0x00002b26651c9460 __libc_start_main +
    245

    6    tmpz4kz9tpg                        0x00005645cbf1e289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1659820461
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var total1 = 0\n    var total2\
    \ = 0\n    for i in lst1 {\n        total1 += i.count\n    }\n    for i in lst2\
    \ {\n        total2 += i.count\n    }\n    if total1 < total2 {\n        return\
    \ lst1\n    } else {\n        return lst2\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) ==\
    \ [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\"\
    , \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpbrc7j57o/tmpbrc7j57o.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1070871c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1070568b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1070568988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b10705677b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbrc7j57o                        0x000055a16b655677 <unavailable> + 9847

    5    libc.so.6                          0x00002b1070a5d460 __libc_start_main +
    245

    6    tmpbrc7j57o                        0x000055a16b654289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1659820461
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var total1 = 0\n    var total2\
    \ = 0\n    for str in lst1 {\n        total1 += str.count\n    }\n    for str\
    \ in lst2 {\n        total2 += str.count\n    }\n    if total1 < total2 {\n  \
    \      return lst1\n    } else {\n        return lst2\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(total_match(lst1: [] as [String], lst2: [] as [String])\
    \ == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"\
    hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"\
    ], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpwok5n2vf/tmpwok5n2vf.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4caa63bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4caa332b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4caa332988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4caa3317b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwok5n2vf                        0x0000560b949b5677 <unavailable> + 9847

    5    libc.so.6                          0x00002b4caa827460 __libc_start_main +
    245

    6    tmpwok5n2vf                        0x0000560b949b4289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1659820461
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var total1 = 0\n    var total2\
    \ = 0\n    for i in lst1 {\n        total1 += i.count\n    }\n    for i in lst2\
    \ {\n        total2 += i.count\n    }\n    if total1 < total2 {\n        return\
    \ lst1\n    } else {\n        return lst2\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) ==\
    \ [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\"\
    , \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpbrc7j57o/tmpbrc7j57o.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1070871c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1070568b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1070568988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b10705677b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbrc7j57o                        0x000055a16b655677 <unavailable> + 9847

    5    libc.so.6                          0x00002b1070a5d460 __libc_start_main +
    245

    6    tmpbrc7j57o                        0x000055a16b654289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1659820461
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var total1 = 0\n    var total2\
    \ = 0\n    for i in lst1 {\n        total1 += i.count\n    }\n    for i in lst2\
    \ {\n        total2 += i.count\n    }\n    if total1 < total2 {\n        return\
    \ lst1\n    } else {\n        return lst2\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) ==\
    \ [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\"\
    , \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpbrc7j57o/tmpbrc7j57o.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1070871c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1070568b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1070568988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b10705677b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbrc7j57o                        0x000055a16b655677 <unavailable> + 9847

    5    libc.so.6                          0x00002b1070a5d460 __libc_start_main +
    245

    6    tmpbrc7j57o                        0x000055a16b654289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1659820461
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var total1 = 0\n    var total2\
    \ = 0\n    for i in lst1 {\n        total1 += i.count\n    }\n    for i in lst2\
    \ {\n        total2 += i.count\n    }\n    if total1 < total2 {\n        return\
    \ lst1\n    } else {\n        return lst2\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) ==\
    \ [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\"\
    , \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpbrc7j57o/tmpbrc7j57o.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1070871c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1070568b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1070568988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b10705677b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbrc7j57o                        0x000055a16b655677 <unavailable> + 9847

    5    libc.so.6                          0x00002b1070a5d460 __libc_start_main +
    245

    6    tmpbrc7j57o                        0x000055a16b654289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1659820461
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var total1 = 0\n    var total2\
    \ = 0\n    for i in lst1 {\n        total1 += i.count\n    }\n    for i in lst2\
    \ {\n        total2 += i.count\n    }\n    if total1 < total2 {\n        return\
    \ lst1\n    } else {\n        return lst2\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) ==\
    \ [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\"\
    , \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpbrc7j57o/tmpbrc7j57o.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1070871c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1070568b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1070568988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b10705677b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbrc7j57o                        0x000055a16b655677 <unavailable> + 9847

    5    libc.so.6                          0x00002b1070a5d460 __libc_start_main +
    245

    6    tmpbrc7j57o                        0x000055a16b654289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1659820461
- exit_code: 0
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var sum1 = 0\n    var sum2 = 0\n\
    \    for i in lst1 {\n        sum1 += i.count\n    }\n    for i in lst2 {\n  \
    \      sum2 += i.count\n    }\n    if sum1 == sum2 {\n        return lst1\n  \
    \  } else if sum1 < sum2 {\n        return lst1\n    } else {\n        return\
    \ lst2\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820461
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var total1 = 0\n    var total2\
    \ = 0\n    for i in lst1 {\n        total1 += i.count\n    }\n    for i in lst2\
    \ {\n        total2 += i.count\n    }\n    if total1 < total2 {\n        return\
    \ lst1\n    } else {\n        return lst2\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) ==\
    \ [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\"\
    , \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpbrc7j57o/tmpbrc7j57o.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1070871c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1070568b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1070568988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b10705677b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbrc7j57o                        0x000055a16b655677 <unavailable> + 9847

    5    libc.so.6                          0x00002b1070a5d460 __libc_start_main +
    245

    6    tmpbrc7j57o                        0x000055a16b654289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1659820461
- exit_code: 0
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var total1 = 0\n    var total2\
    \ = 0\n    for i in lst1 {\n        total1 += i.count\n    }\n    for i in lst2\
    \ {\n        total2 += i.count\n    }\n    if total1 == total2 {\n        return\
    \ lst1\n    } else if total1 < total2 {\n        return lst1\n    } else {\n \
    \       return lst2\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820461
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var total1 = 0\n    var total2\
    \ = 0\n    for i in lst1 {\n        total1 += i.count\n    }\n    for i in lst2\
    \ {\n        total2 += i.count\n    }\n    if total1 < total2 {\n        return\
    \ lst1\n    } else {\n        return lst2\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) ==\
    \ [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\"\
    , \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpbrc7j57o/tmpbrc7j57o.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1070871c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1070568b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1070568988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b10705677b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbrc7j57o                        0x000055a16b655677 <unavailable> + 9847

    5    libc.so.6                          0x00002b1070a5d460 __libc_start_main +
    245

    6    tmpbrc7j57o                        0x000055a16b654289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1659820461
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var total1 = 0\n    var total2\
    \ = 0\n    for i in lst1 {\n        total1 += i.count\n    }\n    for i in lst2\
    \ {\n        total2 += i.count\n    }\n    if total1 < total2 {\n        return\
    \ lst1\n    } else {\n        return lst2\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) ==\
    \ [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\"\
    , \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpbrc7j57o/tmpbrc7j57o.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1070871c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1070568b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1070568988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b10705677b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbrc7j57o                        0x000055a16b655677 <unavailable> + 9847

    5    libc.so.6                          0x00002b1070a5d460 __libc_start_main +
    245

    6    tmpbrc7j57o                        0x000055a16b654289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1659820461
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var total1 = 0\n    var total2\
    \ = 0\n    for i in lst1 {\n        total1 += i.count\n    }\n    for i in lst2\
    \ {\n        total2 += i.count\n    }\n    if total1 < total2 {\n        return\
    \ lst1\n    } else {\n        return lst2\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) ==\
    \ [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\"\
    , \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpbrc7j57o/tmpbrc7j57o.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1070871c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1070568b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1070568988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b10705677b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbrc7j57o                        0x000055a16b655677 <unavailable> + 9847

    5    libc.so.6                          0x00002b1070a5d460 __libc_start_main +
    245

    6    tmpbrc7j57o                        0x000055a16b654289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1659820461
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var total1 = 0\n    var total2\
    \ = 0\n    for str in lst1 {\n        total1 += str.count\n    }\n    for str\
    \ in lst2 {\n        total2 += str.count\n    }\n    if total1 < total2 {\n  \
    \      return lst1\n    } else {\n        return lst2\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(total_match(lst1: [] as [String], lst2: [] as [String])\
    \ == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"\
    hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"\
    ], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpwok5n2vf/tmpwok5n2vf.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4caa63bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4caa332b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4caa332988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4caa3317b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwok5n2vf                        0x0000560b949b5677 <unavailable> + 9847

    5    libc.so.6                          0x00002b4caa827460 __libc_start_main +
    245

    6    tmpwok5n2vf                        0x0000560b949b4289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1659820461
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var total1 = 0\n    var total2\
    \ = 0\n    for i in lst1 {\n        total1 += i.count\n    }\n    for i in lst2\
    \ {\n        total2 += i.count\n    }\n    if total1 < total2 {\n        return\
    \ lst1\n    } else {\n        return lst2\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) ==\
    \ [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\"\
    , \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpbrc7j57o/tmpbrc7j57o.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1070871c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1070568b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1070568988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b10705677b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbrc7j57o                        0x000055a16b655677 <unavailable> + 9847

    5    libc.so.6                          0x00002b1070a5d460 __libc_start_main +
    245

    6    tmpbrc7j57o                        0x000055a16b654289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1659820461
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var total1 = 0\n    var total2\
    \ = 0\n    for str in lst1 {\n        total1 += str.count\n    }\n    for str\
    \ in lst2 {\n        total2 += str.count\n    }\n    if total1 < total2 {\n  \
    \      return lst1\n    } else {\n        return lst2\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(total_match(lst1: [] as [String], lst2: [] as [String])\
    \ == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"\
    hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"\
    ], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpwok5n2vf/tmpwok5n2vf.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4caa63bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4caa332b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4caa332988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4caa3317b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwok5n2vf                        0x0000560b949b5677 <unavailable> + 9847

    5    libc.so.6                          0x00002b4caa827460 __libc_start_main +
    245

    6    tmpwok5n2vf                        0x0000560b949b4289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1659820461
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var total1 = 0\n    var total2\
    \ = 0\n    for i in lst1 {\n        total1 += i.count\n    }\n    for i in lst2\
    \ {\n        total2 += i.count\n    }\n    if total1 < total2 {\n        return\
    \ lst1\n    } else {\n        return lst2\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) ==\
    \ [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\"\
    , \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpbrc7j57o/tmpbrc7j57o.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1070871c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1070568b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1070568988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b10705677b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbrc7j57o                        0x000055a16b655677 <unavailable> + 9847

    5    libc.so.6                          0x00002b1070a5d460 __libc_start_main +
    245

    6    tmpbrc7j57o                        0x000055a16b654289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1659820461
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var total1 = 0\n    var total2\
    \ = 0\n    for i in lst1 {\n        total1 += i.count\n    }\n    for i in lst2\
    \ {\n        total2 += i.count\n    }\n    if total1 < total2 {\n        return\
    \ lst1\n    } else {\n        return lst2\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) ==\
    \ [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\"\
    , \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpbrc7j57o/tmpbrc7j57o.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1070871c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1070568b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1070568988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b10705677b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbrc7j57o                        0x000055a16b655677 <unavailable> + 9847

    5    libc.so.6                          0x00002b1070a5d460 __libc_start_main +
    245

    6    tmpbrc7j57o                        0x000055a16b654289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1659820461
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var lst1_total = 0\n    var lst2_total\
    \ = 0\n    for i in lst1 {\n        lst1_total += i.count\n    }\n    for i in\
    \ lst2 {\n        lst2_total += i.count\n    }\n    if lst1_total < lst2_total\
    \ {\n        return lst1\n    } else {\n        return lst2\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(total_match(lst1: [] as [String], lst2: [] as\
    \ [String]) == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpuup3lo6t/tmpuup3lo6t.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac0b26e9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac0b23e0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac0b23e0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac0b23df7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuup3lo6t                        0x000055c39e2dc677 <unavailable> + 9847

    5    libc.so.6                          0x00002ac0b28d5460 __libc_start_main +
    245

    6    tmpuup3lo6t                        0x000055c39e2db289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1659820461
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var total1 = 0\n    var total2\
    \ = 0\n    for i in lst1 {\n        total1 += i.count\n    }\n    for i in lst2\
    \ {\n        total2 += i.count\n    }\n    if total1 < total2 {\n        return\
    \ lst1\n    } else {\n        return lst2\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) ==\
    \ [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\"\
    , \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpbrc7j57o/tmpbrc7j57o.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1070871c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1070568b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1070568988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b10705677b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbrc7j57o                        0x000055a16b655677 <unavailable> + 9847

    5    libc.so.6                          0x00002b1070a5d460 __libc_start_main +
    245

    6    tmpbrc7j57o                        0x000055a16b654289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1659820461
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var total1 = 0\n    var total2\
    \ = 0\n    for i in lst1 {\n        total1 += i.count\n    }\n    for i in lst2\
    \ {\n        total2 += i.count\n    }\n    if total1 < total2 {\n        return\
    \ lst1\n    } else {\n        return lst2\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) ==\
    \ [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\"\
    , \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpbrc7j57o/tmpbrc7j57o.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1070871c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1070568b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1070568988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b10705677b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbrc7j57o                        0x000055a16b655677 <unavailable> + 9847

    5    libc.so.6                          0x00002b1070a5d460 __libc_start_main +
    245

    6    tmpbrc7j57o                        0x000055a16b654289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1659820461
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var total1 = 0\n    var total2\
    \ = 0\n    for i in lst1 {\n        total1 += i.count\n    }\n    for i in lst2\
    \ {\n        total2 += i.count\n    }\n    if total1 < total2 {\n        return\
    \ lst1\n    } else {\n        return lst2\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) ==\
    \ [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\"\
    , \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpbrc7j57o/tmpbrc7j57o.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1070871c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1070568b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1070568988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b10705677b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbrc7j57o                        0x000055a16b655677 <unavailable> + 9847

    5    libc.so.6                          0x00002b1070a5d460 __libc_start_main +
    245

    6    tmpbrc7j57o                        0x000055a16b654289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1659820461
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var total1 = 0\n    var total2\
    \ = 0\n    for i in lst1 {\n        total1 += i.count\n    }\n    for i in lst2\
    \ {\n        total2 += i.count\n    }\n    if total1 < total2 {\n        return\
    \ lst1\n    } else {\n        return lst2\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) ==\
    \ [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\"\
    , \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpbrc7j57o/tmpbrc7j57o.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1070871c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1070568b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1070568988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b10705677b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbrc7j57o                        0x000055a16b655677 <unavailable> + 9847

    5    libc.so.6                          0x00002b1070a5d460 __libc_start_main +
    245

    6    tmpbrc7j57o                        0x000055a16b654289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1659820461
- exit_code: 0
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var total1 = 0\n    var total2\
    \ = 0\n    for i in lst1 {\n        total1 += i.count\n    }\n    for i in lst2\
    \ {\n        total2 += i.count\n    }\n    if total1 > total2 {\n        return\
    \ lst2\n    } else {\n        return lst1\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) ==\
    \ [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\"\
    , \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820461
- exit_code: 0
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var count1 = 0\n    var count2\
    \ = 0\n    for i in lst1 {\n        count1 += i.count\n    }\n    for i in lst2\
    \ {\n        count2 += i.count\n    }\n    if count1 < count2 {\n        return\
    \ lst1\n    } else if count1 > count2 {\n        return lst2\n    } else {\n \
    \       return lst1\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820461
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var total1 = 0\n    var total2\
    \ = 0\n    for i in lst1 {\n        total1 += i.count\n    }\n    for i in lst2\
    \ {\n        total2 += i.count\n    }\n    if total1 < total2 {\n        return\
    \ lst1\n    } else {\n        return lst2\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) ==\
    \ [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\"\
    , \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpbrc7j57o/tmpbrc7j57o.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1070871c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1070568b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1070568988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b10705677b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbrc7j57o                        0x000055a16b655677 <unavailable> + 9847

    5    libc.so.6                          0x00002b1070a5d460 __libc_start_main +
    245

    6    tmpbrc7j57o                        0x000055a16b654289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1659820461
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var total1 = 0\n    var total2\
    \ = 0\n    for i in lst1 {\n        total1 += i.count\n    }\n    for i in lst2\
    \ {\n        total2 += i.count\n    }\n    if total1 < total2 {\n        return\
    \ lst1\n    } else {\n        return lst2\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) ==\
    \ [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\"\
    , \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpbrc7j57o/tmpbrc7j57o.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1070871c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1070568b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1070568988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b10705677b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbrc7j57o                        0x000055a16b655677 <unavailable> + 9847

    5    libc.so.6                          0x00002b1070a5d460 __libc_start_main +
    245

    6    tmpbrc7j57o                        0x000055a16b654289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1659820461
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var total1 = 0\n    var total2\
    \ = 0\n    for i in lst1 {\n        total1 += i.count\n    }\n    for i in lst2\
    \ {\n        total2 += i.count\n    }\n    if total1 < total2 {\n        return\
    \ lst1\n    } else {\n        return lst2\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) ==\
    \ [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\"\
    , \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpbrc7j57o/tmpbrc7j57o.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1070871c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1070568b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1070568988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b10705677b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbrc7j57o                        0x000055a16b655677 <unavailable> + 9847

    5    libc.so.6                          0x00002b1070a5d460 __libc_start_main +
    245

    6    tmpbrc7j57o                        0x000055a16b654289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1659820461
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var total1 = 0\n    var total2\
    \ = 0\n    for i in lst1 {\n        total1 += i.count\n    }\n    for i in lst2\
    \ {\n        total2 += i.count\n    }\n    if total1 < total2 {\n        return\
    \ lst1\n    } else {\n        return lst2\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) ==\
    \ [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\"\
    , \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpbrc7j57o/tmpbrc7j57o.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1070871c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1070568b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1070568988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b10705677b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbrc7j57o                        0x000055a16b655677 <unavailable> + 9847

    5    libc.so.6                          0x00002b1070a5d460 __libc_start_main +
    245

    6    tmpbrc7j57o                        0x000055a16b654289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1659820461
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var total1 = 0\n    var total2\
    \ = 0\n    for i in lst1 {\n        total1 += i.count\n    }\n    for i in lst2\
    \ {\n        total2 += i.count\n    }\n    if total1 < total2 {\n        return\
    \ lst1\n    } else {\n        return lst2\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) ==\
    \ [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\"\
    , \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpbrc7j57o/tmpbrc7j57o.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1070871c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1070568b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1070568988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b10705677b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbrc7j57o                        0x000055a16b655677 <unavailable> + 9847

    5    libc.so.6                          0x00002b1070a5d460 __libc_start_main +
    245

    6    tmpbrc7j57o                        0x000055a16b654289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1659820461
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var total1 = 0\n    var total2\
    \ = 0\n    for str in lst1 {\n        total1 += str.count\n    }\n    for str\
    \ in lst2 {\n        total2 += str.count\n    }\n    if total1 < total2 {\n  \
    \      return lst1\n    } else {\n        return lst2\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(total_match(lst1: [] as [String], lst2: [] as [String])\
    \ == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"\
    hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"\
    ], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpwok5n2vf/tmpwok5n2vf.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4caa63bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4caa332b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4caa332988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4caa3317b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwok5n2vf                        0x0000560b949b5677 <unavailable> + 9847

    5    libc.so.6                          0x00002b4caa827460 __libc_start_main +
    245

    6    tmpwok5n2vf                        0x0000560b949b4289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1659820461
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var total1 = 0\n    var total2\
    \ = 0\n    for i in lst1 {\n        total1 += i.count\n    }\n    for i in lst2\
    \ {\n        total2 += i.count\n    }\n    if total1 < total2 {\n        return\
    \ lst1\n    } else {\n        return lst2\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) ==\
    \ [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\"\
    , \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpbrc7j57o/tmpbrc7j57o.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1070871c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1070568b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1070568988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b10705677b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbrc7j57o                        0x000055a16b655677 <unavailable> + 9847

    5    libc.so.6                          0x00002b1070a5d460 __libc_start_main +
    245

    6    tmpbrc7j57o                        0x000055a16b654289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1659820461
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var total1 = 0\n    var total2\
    \ = 0\n    for str in lst1 {\n        total1 += str.count\n    }\n    for str\
    \ in lst2 {\n        total2 += str.count\n    }\n    if total1 < total2 {\n  \
    \      return lst1\n    } else {\n        return lst2\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(total_match(lst1: [] as [String], lst2: [] as [String])\
    \ == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"\
    hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"\
    ], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpwok5n2vf/tmpwok5n2vf.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4caa63bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4caa332b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4caa332988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4caa3317b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwok5n2vf                        0x0000560b949b5677 <unavailable> + 9847

    5    libc.so.6                          0x00002b4caa827460 __libc_start_main +
    245

    6    tmpwok5n2vf                        0x0000560b949b4289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1659820461
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var lst1_total = 0\n    var lst2_total\
    \ = 0\n    for i in lst1 {\n        lst1_total += i.count\n    }\n    for i in\
    \ lst2 {\n        lst2_total += i.count\n    }\n    if lst1_total < lst2_total\
    \ {\n        return lst1\n    } else {\n        return lst2\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(total_match(lst1: [] as [String], lst2: [] as\
    \ [String]) == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpuup3lo6t/tmpuup3lo6t.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac0b26e9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac0b23e0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac0b23e0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac0b23df7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuup3lo6t                        0x000055c39e2dc677 <unavailable> + 9847

    5    libc.so.6                          0x00002ac0b28d5460 __libc_start_main +
    245

    6    tmpuup3lo6t                        0x000055c39e2db289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1659820461
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var total1 = 0\n    var total2\
    \ = 0\n    for i in lst1 {\n        total1 += i.count\n    }\n    for i in lst2\
    \ {\n        total2 += i.count\n    }\n    if total1 < total2 {\n        return\
    \ lst1\n    } else {\n        return lst2\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) ==\
    \ [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\"\
    , \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpbrc7j57o/tmpbrc7j57o.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1070871c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1070568b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1070568988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b10705677b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbrc7j57o                        0x000055a16b655677 <unavailable> + 9847

    5    libc.so.6                          0x00002b1070a5d460 __libc_start_main +
    245

    6    tmpbrc7j57o                        0x000055a16b654289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1659820461
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var total1 = 0\n    var total2\
    \ = 0\n    for i in lst1 {\n        total1 += i.count\n    }\n    for i in lst2\
    \ {\n        total2 += i.count\n    }\n    if total1 < total2 {\n        return\
    \ lst1\n    } else {\n        return lst2\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) ==\
    \ [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\"\
    , \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpbrc7j57o/tmpbrc7j57o.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1070871c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1070568b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1070568988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b10705677b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbrc7j57o                        0x000055a16b655677 <unavailable> + 9847

    5    libc.so.6                          0x00002b1070a5d460 __libc_start_main +
    245

    6    tmpbrc7j57o                        0x000055a16b654289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1659820461
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var lst1_total = 0\n    var lst2_total\
    \ = 0\n    for i in lst1 {\n        lst1_total += i.count\n    }\n    for i in\
    \ lst2 {\n        lst2_total += i.count\n    }\n    if lst1_total < lst2_total\
    \ {\n        return lst1\n    } else {\n        return lst2\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(total_match(lst1: [] as [String], lst2: [] as\
    \ [String]) == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpuup3lo6t/tmpuup3lo6t.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac0b26e9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac0b23e0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac0b23e0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac0b23df7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuup3lo6t                        0x000055c39e2dc677 <unavailable> + 9847

    5    libc.so.6                          0x00002ac0b28d5460 __libc_start_main +
    245

    6    tmpuup3lo6t                        0x000055c39e2db289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1659820461
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var lst1_total = 0\n    var lst2_total\
    \ = 0\n    for i in lst1 {\n        lst1_total += i.count\n    }\n    for i in\
    \ lst2 {\n        lst2_total += i.count\n    }\n    if lst1_total < lst2_total\
    \ {\n        return lst1\n    } else {\n        return lst2\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(total_match(lst1: [] as [String], lst2: [] as\
    \ [String]) == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpuup3lo6t/tmpuup3lo6t.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac0b26e9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac0b23e0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac0b23e0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac0b23df7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuup3lo6t                        0x000055c39e2dc677 <unavailable> + 9847

    5    libc.so.6                          0x00002ac0b28d5460 __libc_start_main +
    245

    6    tmpuup3lo6t                        0x000055c39e2db289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1659820461
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var total1 = 0\n    var total2\
    \ = 0\n    for i in lst1 {\n        total1 += i.count\n    }\n    for i in lst2\
    \ {\n        total2 += i.count\n    }\n    if total1 < total2 {\n        return\
    \ lst1\n    } else {\n        return lst2\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) ==\
    \ [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\"\
    , \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpbrc7j57o/tmpbrc7j57o.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1070871c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1070568b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1070568988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b10705677b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbrc7j57o                        0x000055a16b655677 <unavailable> + 9847

    5    libc.so.6                          0x00002b1070a5d460 __libc_start_main +
    245

    6    tmpbrc7j57o                        0x000055a16b654289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1659820461
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var total1 = 0\n    var total2\
    \ = 0\n    for i in lst1 {\n        total1 += i.count\n    }\n    for i in lst2\
    \ {\n        total2 += i.count\n    }\n    if total1 < total2 {\n        return\
    \ lst1\n    } else {\n        return lst2\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) ==\
    \ [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\"\
    , \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpbrc7j57o/tmpbrc7j57o.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1070871c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1070568b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1070568988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b10705677b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbrc7j57o                        0x000055a16b655677 <unavailable> + 9847

    5    libc.so.6                          0x00002b1070a5d460 __libc_start_main +
    245

    6    tmpbrc7j57o                        0x000055a16b654289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1659820461
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var total1 = 0\n    var total2\
    \ = 0\n    for i in lst1 {\n        total1 += i.count\n    }\n    for i in lst2\
    \ {\n        total2 += i.count\n    }\n    if total1 < total2 {\n        return\
    \ lst1\n    } else {\n        return lst2\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) ==\
    \ [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\"\
    , \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpbrc7j57o/tmpbrc7j57o.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1070871c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1070568b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1070568988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b10705677b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbrc7j57o                        0x000055a16b655677 <unavailable> + 9847

    5    libc.so.6                          0x00002b1070a5d460 __libc_start_main +
    245

    6    tmpbrc7j57o                        0x000055a16b654289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1659820461
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var total1 = 0\n    var total2\
    \ = 0\n    for i in lst1 {\n        total1 += i.count\n    }\n    for i in lst2\
    \ {\n        total2 += i.count\n    }\n    if total1 < total2 {\n        return\
    \ lst1\n    } else {\n        return lst2\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) ==\
    \ [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\"\
    , \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpbrc7j57o/tmpbrc7j57o.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1070871c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1070568b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1070568988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b10705677b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbrc7j57o                        0x000055a16b655677 <unavailable> + 9847

    5    libc.so.6                          0x00002b1070a5d460 __libc_start_main +
    245

    6    tmpbrc7j57o                        0x000055a16b654289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1659820461
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var total1 = 0\n    var total2\
    \ = 0\n    for i in lst1 {\n        total1 += i.count\n    }\n    for i in lst2\
    \ {\n        total2 += i.count\n    }\n    if total1 < total2 {\n        return\
    \ lst1\n    } else {\n        return lst2\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) ==\
    \ [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\"\
    , \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpbrc7j57o/tmpbrc7j57o.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1070871c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1070568b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1070568988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b10705677b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbrc7j57o                        0x000055a16b655677 <unavailable> + 9847

    5    libc.so.6                          0x00002b1070a5d460 __libc_start_main +
    245

    6    tmpbrc7j57o                        0x000055a16b654289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1659820461
- exit_code: 0
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var count1 = 0\n    var count2\
    \ = 0\n    for i in lst1 {\n        count1 += i.count\n    }\n    for i in lst2\
    \ {\n        count2 += i.count\n    }\n    if count1 < count2 {\n        return\
    \ lst1\n    } else if count1 > count2 {\n        return lst2\n    } else {\n \
    \       return lst1\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820461
- exit_code: 0
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var total1 = 0\n    var total2\
    \ = 0\n    for i in lst1 {\n        total1 += i.count\n    }\n    for i in lst2\
    \ {\n        total2 += i.count\n    }\n    if total1 > total2 {\n        return\
    \ lst2\n    } else {\n        return lst1\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) ==\
    \ [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\"\
    , \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820461
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var lst1_total = 0\n    var lst2_total\
    \ = 0\n    for str in lst1 {\n        lst1_total += str.count\n    }\n    for\
    \ str in lst2 {\n        lst2_total += str.count\n    }\n    if lst1_total < lst2_total\
    \ {\n        return lst1\n    } else {\n        return lst2\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(total_match(lst1: [] as [String], lst2: [] as\
    \ [String]) == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmp38rkr9i3/tmp38rkr9i3.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8a4660fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8a46306b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8a46306988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8a463057b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp38rkr9i3                        0x0000559490d3c677 <unavailable> + 9847

    5    libc.so.6                          0x00002b8a467fb460 __libc_start_main +
    245

    6    tmp38rkr9i3                        0x0000559490d3b289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1659820461
- exit_code: 0
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var lst1_count = 0\n    var lst2_count\
    \ = 0\n    for i in lst1 {\n        lst1_count += i.count\n    }\n    for i in\
    \ lst2 {\n        lst2_count += i.count\n    }\n    if lst1_count < lst2_count\
    \ {\n        return lst1\n    } else if lst1_count > lst2_count {\n        return\
    \ lst2\n    } else {\n        return lst1\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) ==\
    \ [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\"\
    , \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820461
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var total1 = 0\n    var total2\
    \ = 0\n    for i in lst1 {\n        total1 += i.count\n    }\n    for i in lst2\
    \ {\n        total2 += i.count\n    }\n    if total1 < total2 {\n        return\
    \ lst1\n    } else {\n        return lst2\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) ==\
    \ [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\"\
    , \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpbrc7j57o/tmpbrc7j57o.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1070871c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1070568b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1070568988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b10705677b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbrc7j57o                        0x000055a16b655677 <unavailable> + 9847

    5    libc.so.6                          0x00002b1070a5d460 __libc_start_main +
    245

    6    tmpbrc7j57o                        0x000055a16b654289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1659820461
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var total1 = 0\n    var total2\
    \ = 0\n    for str in lst1 {\n        total1 += str.count\n    }\n    for str\
    \ in lst2 {\n        total2 += str.count\n    }\n    if total1 < total2 {\n  \
    \      return lst1\n    } else {\n        return lst2\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(total_match(lst1: [] as [String], lst2: [] as [String])\
    \ == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"\
    hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"\
    ], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpwok5n2vf/tmpwok5n2vf.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4caa63bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4caa332b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4caa332988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4caa3317b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwok5n2vf                        0x0000560b949b5677 <unavailable> + 9847

    5    libc.so.6                          0x00002b4caa827460 __libc_start_main +
    245

    6    tmpwok5n2vf                        0x0000560b949b4289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1659820461
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var sum1 = 0\n    var sum2 = 0\n\
    \    for i in lst1 {\n        sum1 += i.count\n    }\n    for i in lst2 {\n  \
    \      sum2 += i.count\n    }\n    if sum1 < sum2 {\n        return lst1\n   \
    \ } else {\n        return lst2\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(total_match(lst1: [] as [String], lst2: [] as [String]) == [] as [String])\n\
    assert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\"\
    , \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmp8uhdxclk/tmp8uhdxclk.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3643939c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3643630b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3643630988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b364362f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8uhdxclk                        0x000055cb0f066677 <unavailable> + 9847

    5    libc.so.6                          0x00002b3643b25460 __libc_start_main +
    245

    6    tmp8uhdxclk                        0x000055cb0f065289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1659820461
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var total1 = 0\n    var total2\
    \ = 0\n    for i in lst1 {\n        total1 += i.count\n    }\n    for i in lst2\
    \ {\n        total2 += i.count\n    }\n    if total1 < total2 {\n        return\
    \ lst1\n    } else {\n        return lst2\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) ==\
    \ [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\"\
    , \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpbrc7j57o/tmpbrc7j57o.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1070871c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1070568b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1070568988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b10705677b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbrc7j57o                        0x000055a16b655677 <unavailable> + 9847

    5    libc.so.6                          0x00002b1070a5d460 __libc_start_main +
    245

    6    tmpbrc7j57o                        0x000055a16b654289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1659820461
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var total1 = 0\n    var total2\
    \ = 0\n    for str in lst1 {\n        total1 += str.count\n    }\n    for str\
    \ in lst2 {\n        total2 += str.count\n    }\n    if total1 < total2 {\n  \
    \      return lst1\n    } else {\n        return lst2\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(total_match(lst1: [] as [String], lst2: [] as [String])\
    \ == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"\
    hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"\
    ], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpwok5n2vf/tmpwok5n2vf.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4caa63bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4caa332b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4caa332988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4caa3317b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwok5n2vf                        0x0000560b949b5677 <unavailable> + 9847

    5    libc.so.6                          0x00002b4caa827460 __libc_start_main +
    245

    6    tmpwok5n2vf                        0x0000560b949b4289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1659820461
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var total1 = 0\n    var total2\
    \ = 0\n    for i in lst1 {\n        total1 += i.count\n    }\n    for i in lst2\
    \ {\n        total2 += i.count\n    }\n    if total1 < total2 {\n        return\
    \ lst1\n    } else {\n        return lst2\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) ==\
    \ [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\"\
    , \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpbrc7j57o/tmpbrc7j57o.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1070871c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1070568b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1070568988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b10705677b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbrc7j57o                        0x000055a16b655677 <unavailable> + 9847

    5    libc.so.6                          0x00002b1070a5d460 __libc_start_main +
    245

    6    tmpbrc7j57o                        0x000055a16b654289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1659820461
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var total1 = 0\n    var total2\
    \ = 0\n    for i in lst1 {\n        total1 += i.count\n    }\n    for i in lst2\
    \ {\n        total2 += i.count\n    }\n    if total1 < total2 {\n        return\
    \ lst1\n    } else {\n        return lst2\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) ==\
    \ [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\"\
    , \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpbrc7j57o/tmpbrc7j57o.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1070871c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1070568b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1070568988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b10705677b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbrc7j57o                        0x000055a16b655677 <unavailable> + 9847

    5    libc.so.6                          0x00002b1070a5d460 __libc_start_main +
    245

    6    tmpbrc7j57o                        0x000055a16b654289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1659820461
