language: swift
name: HumanEval_156_int_to_mini_roman
results:
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    var result = \"\"\n    var\
    \ num = number\n    let roman_numerals = [\"m\", \"cm\", \"d\", \"cd\", \"c\"\
    , \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"]\n    let values\
    \ = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]\n    for i in 0..<roman_numerals.count\
    \ {\n        while num >= values[i] {\n            result += roman_numerals[i]\n\
    \            num -= values[i]\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(int_to_mini_roman(number: 19) == \"xix\")\nassert(int_to_mini_roman(number:\
    \ 152) == \"clii\")\nassert(int_to_mini_roman(number: 251) == \"ccli\")\nassert(int_to_mini_roman(number:\
    \ 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number: 500) == \"d\")\nassert(int_to_mini_roman(number:\
    \ 1) == \"i\")\nassert(int_to_mini_roman(number: 4) == \"iv\")\nassert(int_to_mini_roman(number:\
    \ 43) == \"xliii\")\nassert(int_to_mini_roman(number: 90) == \"xc\")\nassert(int_to_mini_roman(number:\
    \ 94) == \"xciv\")\nassert(int_to_mini_roman(number: 532) == \"dxxxii\")\nassert(int_to_mini_roman(number:\
    \ 900) == \"cm\")\nassert(int_to_mini_roman(number: 994) == \"cmxciv\")\nassert(int_to_mini_roman(number:\
    \ 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    var result = \"\"\n    var\
    \ num = number\n    while num > 0 {\n        if num >= 1000 {\n            result\
    \ += \"m\"\n            num -= 1000\n        } else if num >= 900 {\n        \
    \    result += \"cm\"\n            num -= 900\n        } else if num >= 500 {\n\
    \            result += \"d\"\n            num -= 500\n        } else if num >=\
    \ 400 {\n            result += \"cd\"\n            num -= 400\n        } else\
    \ if num >= 100 {\n            result += \"c\"\n            num -= 100\n     \
    \   } else if num >= 90 {\n            result += \"xc\"\n            num -= 90\n\
    \        } else if num >= 50 {\n            result += \"l\"\n            num -=\
    \ 50\n        } else if num >= 40 {\n            result += \"xl\"\n          \
    \  num -= 40\n        } else if num >= 10 {\n            result += \"x\"\n   \
    \         num -= 10\n        } else if num >= 9 {\n            result += \"ix\"\
    \n            num -= 9\n        } else if num >= 5 {\n            result += \"\
    v\"\n            num -= 5\n        } else if num >= 4 {\n            result +=\
    \ \"iv\"\n            num -= 4\n        } else if num >= 1 {\n            result\
    \ += \"i\"\n            num -= 1\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(int_to_mini_roman(number: 19) == \"xix\")\nassert(int_to_mini_roman(number:\
    \ 152) == \"clii\")\nassert(int_to_mini_roman(number: 251) == \"ccli\")\nassert(int_to_mini_roman(number:\
    \ 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number: 500) == \"d\")\nassert(int_to_mini_roman(number:\
    \ 1) == \"i\")\nassert(int_to_mini_roman(number: 4) == \"iv\")\nassert(int_to_mini_roman(number:\
    \ 43) == \"xliii\")\nassert(int_to_mini_roman(number: 90) == \"xc\")\nassert(int_to_mini_roman(number:\
    \ 94) == \"xciv\")\nassert(int_to_mini_roman(number: 532) == \"dxxxii\")\nassert(int_to_mini_roman(number:\
    \ 900) == \"cm\")\nassert(int_to_mini_roman(number: 994) == \"cmxciv\")\nassert(int_to_mini_roman(number:\
    \ 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    let roman_numerals = [\"\
    m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\"\
    , \"iv\", \"i\"]\n    let numbers = [1000, 900, 500, 400, 100, 90, 50, 40, 10,\
    \ 9, 5, 4, 1]\n    var result = \"\"\n    var number = number\n    for (index,\
    \ numeral) in roman_numerals.enumerated() {\n        while number >= numbers[index]\
    \ {\n            result += numeral\n            number -= numbers[index]\n   \
    \     }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(int_to_mini_roman(number:\
    \ 19) == \"xix\")\nassert(int_to_mini_roman(number: 152) == \"clii\")\nassert(int_to_mini_roman(number:\
    \ 251) == \"ccli\")\nassert(int_to_mini_roman(number: 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number:\
    \ 500) == \"d\")\nassert(int_to_mini_roman(number: 1) == \"i\")\nassert(int_to_mini_roman(number:\
    \ 4) == \"iv\")\nassert(int_to_mini_roman(number: 43) == \"xliii\")\nassert(int_to_mini_roman(number:\
    \ 90) == \"xc\")\nassert(int_to_mini_roman(number: 94) == \"xciv\")\nassert(int_to_mini_roman(number:\
    \ 532) == \"dxxxii\")\nassert(int_to_mini_roman(number: 900) == \"cm\")\nassert(int_to_mini_roman(number:\
    \ 994) == \"cmxciv\")\nassert(int_to_mini_roman(number: 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    var roman_numeral = \"\"\n\
    \    var num = number\n    while num > 0 {\n        if num >= 1000 {\n       \
    \     roman_numeral += \"m\"\n            num -= 1000\n        } else if num >=\
    \ 900 {\n            roman_numeral += \"cm\"\n            num -= 900\n       \
    \ } else if num >= 500 {\n            roman_numeral += \"d\"\n            num\
    \ -= 500\n        } else if num >= 400 {\n            roman_numeral += \"cd\"\n\
    \            num -= 400\n        } else if num >= 100 {\n            roman_numeral\
    \ += \"c\"\n            num -= 100\n        } else if num >= 90 {\n          \
    \  roman_numeral += \"xc\"\n            num -= 90\n        } else if num >= 50\
    \ {\n            roman_numeral += \"l\"\n            num -= 50\n        } else\
    \ if num >= 40 {\n            roman_numeral += \"xl\"\n            num -= 40\n\
    \        } else if num >= 10 {\n            roman_numeral += \"x\"\n         \
    \   num -= 10\n        } else if num >= 9 {\n            roman_numeral += \"ix\"\
    \n            num -= 9\n        } else if num >= 5 {\n            roman_numeral\
    \ += \"v\"\n            num -= 5\n        } else if num >= 4 {\n            roman_numeral\
    \ += \"iv\"\n            num -= 4\n        } else if num >= 1 {\n            roman_numeral\
    \ += \"i\"\n            num -= 1\n        }\n    }\n    return roman_numeral\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(int_to_mini_roman(number: 19) == \"xix\")\nassert(int_to_mini_roman(number:\
    \ 152) == \"clii\")\nassert(int_to_mini_roman(number: 251) == \"ccli\")\nassert(int_to_mini_roman(number:\
    \ 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number: 500) == \"d\")\nassert(int_to_mini_roman(number:\
    \ 1) == \"i\")\nassert(int_to_mini_roman(number: 4) == \"iv\")\nassert(int_to_mini_roman(number:\
    \ 43) == \"xliii\")\nassert(int_to_mini_roman(number: 90) == \"xc\")\nassert(int_to_mini_roman(number:\
    \ 94) == \"xciv\")\nassert(int_to_mini_roman(number: 532) == \"dxxxii\")\nassert(int_to_mini_roman(number:\
    \ 900) == \"cm\")\nassert(int_to_mini_roman(number: 994) == \"cmxciv\")\nassert(int_to_mini_roman(number:\
    \ 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    var result = \"\"\n    var\
    \ num = number\n    while num > 0 {\n        if num >= 1000 {\n            result\
    \ += \"m\"\n            num -= 1000\n        } else if num >= 900 {\n        \
    \    result += \"cm\"\n            num -= 900\n        } else if num >= 500 {\n\
    \            result += \"d\"\n            num -= 500\n        } else if num >=\
    \ 400 {\n            result += \"cd\"\n            num -= 400\n        } else\
    \ if num >= 100 {\n            result += \"c\"\n            num -= 100\n     \
    \   } else if num >= 90 {\n            result += \"xc\"\n            num -= 90\n\
    \        } else if num >= 50 {\n            result += \"l\"\n            num -=\
    \ 50\n        } else if num >= 40 {\n            result += \"xl\"\n          \
    \  num -= 40\n        } else if num >= 10 {\n            result += \"x\"\n   \
    \         num -= 10\n        } else if num >= 9 {\n            result += \"ix\"\
    \n            num -= 9\n        } else if num >= 5 {\n            result += \"\
    v\"\n            num -= 5\n        } else if num >= 4 {\n            result +=\
    \ \"iv\"\n            num -= 4\n        } else if num >= 1 {\n            result\
    \ += \"i\"\n            num -= 1\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(int_to_mini_roman(number: 19) == \"xix\")\nassert(int_to_mini_roman(number:\
    \ 152) == \"clii\")\nassert(int_to_mini_roman(number: 251) == \"ccli\")\nassert(int_to_mini_roman(number:\
    \ 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number: 500) == \"d\")\nassert(int_to_mini_roman(number:\
    \ 1) == \"i\")\nassert(int_to_mini_roman(number: 4) == \"iv\")\nassert(int_to_mini_roman(number:\
    \ 43) == \"xliii\")\nassert(int_to_mini_roman(number: 90) == \"xc\")\nassert(int_to_mini_roman(number:\
    \ 94) == \"xciv\")\nassert(int_to_mini_roman(number: 532) == \"dxxxii\")\nassert(int_to_mini_roman(number:\
    \ 900) == \"cm\")\nassert(int_to_mini_roman(number: 994) == \"cmxciv\")\nassert(int_to_mini_roman(number:\
    \ 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    var result = \"\"\n    var\
    \ num = number\n    while num > 0 {\n        if num >= 1000 {\n            result\
    \ += \"m\"\n            num -= 1000\n        } else if num >= 900 {\n        \
    \    result += \"cm\"\n            num -= 900\n        } else if num >= 500 {\n\
    \            result += \"d\"\n            num -= 500\n        } else if num >=\
    \ 400 {\n            result += \"cd\"\n            num -= 400\n        } else\
    \ if num >= 100 {\n            result += \"c\"\n            num -= 100\n     \
    \   } else if num >= 90 {\n            result += \"xc\"\n            num -= 90\n\
    \        } else if num >= 50 {\n            result += \"l\"\n            num -=\
    \ 50\n        } else if num >= 40 {\n            result += \"xl\"\n          \
    \  num -= 40\n        } else if num >= 10 {\n            result += \"x\"\n   \
    \         num -= 10\n        } else if num >= 9 {\n            result += \"ix\"\
    \n            num -= 9\n        } else if num >= 5 {\n            result += \"\
    v\"\n            num -= 5\n        } else if num >= 4 {\n            result +=\
    \ \"iv\"\n            num -= 4\n        } else if num >= 1 {\n            result\
    \ += \"i\"\n            num -= 1\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(int_to_mini_roman(number: 19) == \"xix\")\nassert(int_to_mini_roman(number:\
    \ 152) == \"clii\")\nassert(int_to_mini_roman(number: 251) == \"ccli\")\nassert(int_to_mini_roman(number:\
    \ 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number: 500) == \"d\")\nassert(int_to_mini_roman(number:\
    \ 1) == \"i\")\nassert(int_to_mini_roman(number: 4) == \"iv\")\nassert(int_to_mini_roman(number:\
    \ 43) == \"xliii\")\nassert(int_to_mini_roman(number: 90) == \"xc\")\nassert(int_to_mini_roman(number:\
    \ 94) == \"xciv\")\nassert(int_to_mini_roman(number: 532) == \"dxxxii\")\nassert(int_to_mini_roman(number:\
    \ 900) == \"cm\")\nassert(int_to_mini_roman(number: 994) == \"cmxciv\")\nassert(int_to_mini_roman(number:\
    \ 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    let roman_numerals = [\"\
    m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\"\
    , \"iv\", \"i\"]\n    let values = [1000, 900, 500, 400, 100, 90, 50, 40, 10,\
    \ 9, 5, 4, 1]\n    var num = number\n    var result = \"\"\n    for (index, roman_numeral)\
    \ in roman_numerals.enumerated() {\n        while num >= values[index] {\n   \
    \         num -= values[index]\n            result += roman_numeral\n        }\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(int_to_mini_roman(number:\
    \ 19) == \"xix\")\nassert(int_to_mini_roman(number: 152) == \"clii\")\nassert(int_to_mini_roman(number:\
    \ 251) == \"ccli\")\nassert(int_to_mini_roman(number: 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number:\
    \ 500) == \"d\")\nassert(int_to_mini_roman(number: 1) == \"i\")\nassert(int_to_mini_roman(number:\
    \ 4) == \"iv\")\nassert(int_to_mini_roman(number: 43) == \"xliii\")\nassert(int_to_mini_roman(number:\
    \ 90) == \"xc\")\nassert(int_to_mini_roman(number: 94) == \"xciv\")\nassert(int_to_mini_roman(number:\
    \ 532) == \"dxxxii\")\nassert(int_to_mini_roman(number: 900) == \"cm\")\nassert(int_to_mini_roman(number:\
    \ 994) == \"cmxciv\")\nassert(int_to_mini_roman(number: 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    let roman_numerals = [\"\
    m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\"\
    , \"iv\", \"i\"]\n    let values = [1000, 900, 500, 400, 100, 90, 50, 40, 10,\
    \ 9, 5, 4, 1]\n    var result = \"\"\n    var num = number\n    for i in 0..<values.count\
    \ {\n        while num >= values[i] {\n            result += roman_numerals[i]\n\
    \            num -= values[i]\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(int_to_mini_roman(number: 19) == \"xix\")\nassert(int_to_mini_roman(number:\
    \ 152) == \"clii\")\nassert(int_to_mini_roman(number: 251) == \"ccli\")\nassert(int_to_mini_roman(number:\
    \ 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number: 500) == \"d\")\nassert(int_to_mini_roman(number:\
    \ 1) == \"i\")\nassert(int_to_mini_roman(number: 4) == \"iv\")\nassert(int_to_mini_roman(number:\
    \ 43) == \"xliii\")\nassert(int_to_mini_roman(number: 90) == \"xc\")\nassert(int_to_mini_roman(number:\
    \ 94) == \"xciv\")\nassert(int_to_mini_roman(number: 532) == \"dxxxii\")\nassert(int_to_mini_roman(number:\
    \ 900) == \"cm\")\nassert(int_to_mini_roman(number: 994) == \"cmxciv\")\nassert(int_to_mini_roman(number:\
    \ 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    let roman_numerals = [\"\
    m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\"\
    , \"iv\", \"i\"]\n    let arabic_numerals = [1000, 900, 500, 400, 100, 90, 50,\
    \ 40, 10, 9, 5, 4, 1]\n    var result = \"\"\n    var remaining = number\n   \
    \ for (index, numeral) in roman_numerals.enumerated() {\n        let arabic =\
    \ arabic_numerals[index]\n        while remaining >= arabic {\n            result\
    \ += numeral\n            remaining -= arabic\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(int_to_mini_roman(number: 19) == \"xix\")\nassert(int_to_mini_roman(number:\
    \ 152) == \"clii\")\nassert(int_to_mini_roman(number: 251) == \"ccli\")\nassert(int_to_mini_roman(number:\
    \ 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number: 500) == \"d\")\nassert(int_to_mini_roman(number:\
    \ 1) == \"i\")\nassert(int_to_mini_roman(number: 4) == \"iv\")\nassert(int_to_mini_roman(number:\
    \ 43) == \"xliii\")\nassert(int_to_mini_roman(number: 90) == \"xc\")\nassert(int_to_mini_roman(number:\
    \ 94) == \"xciv\")\nassert(int_to_mini_roman(number: 532) == \"dxxxii\")\nassert(int_to_mini_roman(number:\
    \ 900) == \"cm\")\nassert(int_to_mini_roman(number: 994) == \"cmxciv\")\nassert(int_to_mini_roman(number:\
    \ 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    let roman_numerals = [\"\
    m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\"\
    , \"iv\", \"i\"]\n    let numbers = [1000, 900, 500, 400, 100, 90, 50, 40, 10,\
    \ 9, 5, 4, 1]\n    var result = \"\"\n    var remaining = number\n    for i in\
    \ 0..<numbers.count {\n        while remaining >= numbers[i] {\n            result\
    \ += roman_numerals[i]\n            remaining -= numbers[i]\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(int_to_mini_roman(number:\
    \ 19) == \"xix\")\nassert(int_to_mini_roman(number: 152) == \"clii\")\nassert(int_to_mini_roman(number:\
    \ 251) == \"ccli\")\nassert(int_to_mini_roman(number: 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number:\
    \ 500) == \"d\")\nassert(int_to_mini_roman(number: 1) == \"i\")\nassert(int_to_mini_roman(number:\
    \ 4) == \"iv\")\nassert(int_to_mini_roman(number: 43) == \"xliii\")\nassert(int_to_mini_roman(number:\
    \ 90) == \"xc\")\nassert(int_to_mini_roman(number: 94) == \"xciv\")\nassert(int_to_mini_roman(number:\
    \ 532) == \"dxxxii\")\nassert(int_to_mini_roman(number: 900) == \"cm\")\nassert(int_to_mini_roman(number:\
    \ 994) == \"cmxciv\")\nassert(int_to_mini_roman(number: 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    var result = \"\"\n    var\
    \ number = number\n    while number > 0 {\n        if number >= 1000 {\n     \
    \       result += \"m\"\n            number -= 1000\n        } else if number\
    \ >= 900 {\n            result += \"cm\"\n            number -= 900\n        }\
    \ else if number >= 500 {\n            result += \"d\"\n            number -=\
    \ 500\n        } else if number >= 400 {\n            result += \"cd\"\n     \
    \       number -= 400\n        } else if number >= 100 {\n            result +=\
    \ \"c\"\n            number -= 100\n        } else if number >= 90 {\n       \
    \     result += \"xc\"\n            number -= 90\n        } else if number >=\
    \ 50 {\n            result += \"l\"\n            number -= 50\n        } else\
    \ if number >= 40 {\n            result += \"xl\"\n            number -= 40\n\
    \        } else if number >= 10 {\n            result += \"x\"\n            number\
    \ -= 10\n        } else if number >= 9 {\n            result += \"ix\"\n     \
    \       number -= 9\n        } else if number >= 5 {\n            result += \"\
    v\"\n            number -= 5\n        } else if number >= 4 {\n            result\
    \ += \"iv\"\n            number -= 4\n        } else if number >= 1 {\n      \
    \      result += \"i\"\n            number -= 1\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(int_to_mini_roman(number:\
    \ 19) == \"xix\")\nassert(int_to_mini_roman(number: 152) == \"clii\")\nassert(int_to_mini_roman(number:\
    \ 251) == \"ccli\")\nassert(int_to_mini_roman(number: 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number:\
    \ 500) == \"d\")\nassert(int_to_mini_roman(number: 1) == \"i\")\nassert(int_to_mini_roman(number:\
    \ 4) == \"iv\")\nassert(int_to_mini_roman(number: 43) == \"xliii\")\nassert(int_to_mini_roman(number:\
    \ 90) == \"xc\")\nassert(int_to_mini_roman(number: 94) == \"xciv\")\nassert(int_to_mini_roman(number:\
    \ 532) == \"dxxxii\")\nassert(int_to_mini_roman(number: 900) == \"cm\")\nassert(int_to_mini_roman(number:\
    \ 994) == \"cmxciv\")\nassert(int_to_mini_roman(number: 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    let roman_numerals = [\"\
    m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\"\
    , \"iv\", \"i\"]\n    let numbers = [1000, 900, 500, 400, 100, 90, 50, 40, 10,\
    \ 9, 5, 4, 1]\n    var num = number\n    var result = \"\"\n    for (index, numeral)\
    \ in roman_numerals.enumerated() {\n        while num >= numbers[index] {\n  \
    \          result += numeral\n            num -= numbers[index]\n        }\n \
    \   }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(int_to_mini_roman(number:\
    \ 19) == \"xix\")\nassert(int_to_mini_roman(number: 152) == \"clii\")\nassert(int_to_mini_roman(number:\
    \ 251) == \"ccli\")\nassert(int_to_mini_roman(number: 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number:\
    \ 500) == \"d\")\nassert(int_to_mini_roman(number: 1) == \"i\")\nassert(int_to_mini_roman(number:\
    \ 4) == \"iv\")\nassert(int_to_mini_roman(number: 43) == \"xliii\")\nassert(int_to_mini_roman(number:\
    \ 90) == \"xc\")\nassert(int_to_mini_roman(number: 94) == \"xciv\")\nassert(int_to_mini_roman(number:\
    \ 532) == \"dxxxii\")\nassert(int_to_mini_roman(number: 900) == \"cm\")\nassert(int_to_mini_roman(number:\
    \ 994) == \"cmxciv\")\nassert(int_to_mini_roman(number: 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    var result = \"\"\n    var\
    \ number = number\n    while number > 0 {\n        if number >= 1000 {\n     \
    \       result += \"m\"\n            number -= 1000\n        } else if number\
    \ >= 900 {\n            result += \"cm\"\n            number -= 900\n        }\
    \ else if number >= 500 {\n            result += \"d\"\n            number -=\
    \ 500\n        } else if number >= 400 {\n            result += \"cd\"\n     \
    \       number -= 400\n        } else if number >= 100 {\n            result +=\
    \ \"c\"\n            number -= 100\n        } else if number >= 90 {\n       \
    \     result += \"xc\"\n            number -= 90\n        } else if number >=\
    \ 50 {\n            result += \"l\"\n            number -= 50\n        } else\
    \ if number >= 40 {\n            result += \"xl\"\n            number -= 40\n\
    \        } else if number >= 10 {\n            result += \"x\"\n            number\
    \ -= 10\n        } else if number >= 9 {\n            result += \"ix\"\n     \
    \       number -= 9\n        } else if number >= 5 {\n            result += \"\
    v\"\n            number -= 5\n        } else if number >= 4 {\n            result\
    \ += \"iv\"\n            number -= 4\n        } else if number >= 1 {\n      \
    \      result += \"i\"\n            number -= 1\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(int_to_mini_roman(number:\
    \ 19) == \"xix\")\nassert(int_to_mini_roman(number: 152) == \"clii\")\nassert(int_to_mini_roman(number:\
    \ 251) == \"ccli\")\nassert(int_to_mini_roman(number: 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number:\
    \ 500) == \"d\")\nassert(int_to_mini_roman(number: 1) == \"i\")\nassert(int_to_mini_roman(number:\
    \ 4) == \"iv\")\nassert(int_to_mini_roman(number: 43) == \"xliii\")\nassert(int_to_mini_roman(number:\
    \ 90) == \"xc\")\nassert(int_to_mini_roman(number: 94) == \"xciv\")\nassert(int_to_mini_roman(number:\
    \ 532) == \"dxxxii\")\nassert(int_to_mini_roman(number: 900) == \"cm\")\nassert(int_to_mini_roman(number:\
    \ 994) == \"cmxciv\")\nassert(int_to_mini_roman(number: 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    var result = \"\"\n    var\
    \ number = number\n    while number > 0 {\n        if number >= 1000 {\n     \
    \       result += \"m\"\n            number -= 1000\n        } else if number\
    \ >= 900 {\n            result += \"cm\"\n            number -= 900\n        }\
    \ else if number >= 500 {\n            result += \"d\"\n            number -=\
    \ 500\n        } else if number >= 400 {\n            result += \"cd\"\n     \
    \       number -= 400\n        } else if number >= 100 {\n            result +=\
    \ \"c\"\n            number -= 100\n        } else if number >= 90 {\n       \
    \     result += \"xc\"\n            number -= 90\n        } else if number >=\
    \ 50 {\n            result += \"l\"\n            number -= 50\n        } else\
    \ if number >= 40 {\n            result += \"xl\"\n            number -= 40\n\
    \        } else if number >= 10 {\n            result += \"x\"\n            number\
    \ -= 10\n        } else if number >= 9 {\n            result += \"ix\"\n     \
    \       number -= 9\n        } else if number >= 5 {\n            result += \"\
    v\"\n            number -= 5\n        } else if number >= 4 {\n            result\
    \ += \"iv\"\n            number -= 4\n        } else if number >= 1 {\n      \
    \      result += \"i\"\n            number -= 1\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(int_to_mini_roman(number:\
    \ 19) == \"xix\")\nassert(int_to_mini_roman(number: 152) == \"clii\")\nassert(int_to_mini_roman(number:\
    \ 251) == \"ccli\")\nassert(int_to_mini_roman(number: 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number:\
    \ 500) == \"d\")\nassert(int_to_mini_roman(number: 1) == \"i\")\nassert(int_to_mini_roman(number:\
    \ 4) == \"iv\")\nassert(int_to_mini_roman(number: 43) == \"xliii\")\nassert(int_to_mini_roman(number:\
    \ 90) == \"xc\")\nassert(int_to_mini_roman(number: 94) == \"xciv\")\nassert(int_to_mini_roman(number:\
    \ 532) == \"dxxxii\")\nassert(int_to_mini_roman(number: 900) == \"cm\")\nassert(int_to_mini_roman(number:\
    \ 994) == \"cmxciv\")\nassert(int_to_mini_roman(number: 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    var roman = \"\"\n    var\
    \ num = number\n    while num > 0 {\n        if num >= 1000 {\n            roman\
    \ += \"m\"\n            num -= 1000\n        } else if num >= 900 {\n        \
    \    roman += \"cm\"\n            num -= 900\n        } else if num >= 500 {\n\
    \            roman += \"d\"\n            num -= 500\n        } else if num >=\
    \ 400 {\n            roman += \"cd\"\n            num -= 400\n        } else if\
    \ num >= 100 {\n            roman += \"c\"\n            num -= 100\n        }\
    \ else if num >= 90 {\n            roman += \"xc\"\n            num -= 90\n  \
    \      } else if num >= 50 {\n            roman += \"l\"\n            num -= 50\n\
    \        } else if num >= 40 {\n            roman += \"xl\"\n            num -=\
    \ 40\n        } else if num >= 10 {\n            roman += \"x\"\n            num\
    \ -= 10\n        } else if num >= 9 {\n            roman += \"ix\"\n         \
    \   num -= 9\n        } else if num >= 5 {\n            roman += \"v\"\n     \
    \       num -= 5\n        } else if num >= 4 {\n            roman += \"iv\"\n\
    \            num -= 4\n        } else if num >= 1 {\n            roman += \"i\"\
    \n            num -= 1\n        }\n    }\n    return roman\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(int_to_mini_roman(number: 19) == \"xix\")\nassert(int_to_mini_roman(number:\
    \ 152) == \"clii\")\nassert(int_to_mini_roman(number: 251) == \"ccli\")\nassert(int_to_mini_roman(number:\
    \ 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number: 500) == \"d\")\nassert(int_to_mini_roman(number:\
    \ 1) == \"i\")\nassert(int_to_mini_roman(number: 4) == \"iv\")\nassert(int_to_mini_roman(number:\
    \ 43) == \"xliii\")\nassert(int_to_mini_roman(number: 90) == \"xc\")\nassert(int_to_mini_roman(number:\
    \ 94) == \"xciv\")\nassert(int_to_mini_roman(number: 532) == \"dxxxii\")\nassert(int_to_mini_roman(number:\
    \ 900) == \"cm\")\nassert(int_to_mini_roman(number: 994) == \"cmxciv\")\nassert(int_to_mini_roman(number:\
    \ 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    var result = \"\"\n    var\
    \ num = number\n    while num > 0 {\n        if num >= 1000 {\n            result\
    \ += \"m\"\n            num -= 1000\n        } else if num >= 900 {\n        \
    \    result += \"cm\"\n            num -= 900\n        } else if num >= 500 {\n\
    \            result += \"d\"\n            num -= 500\n        } else if num >=\
    \ 400 {\n            result += \"cd\"\n            num -= 400\n        } else\
    \ if num >= 100 {\n            result += \"c\"\n            num -= 100\n     \
    \   } else if num >= 90 {\n            result += \"xc\"\n            num -= 90\n\
    \        } else if num >= 50 {\n            result += \"l\"\n            num -=\
    \ 50\n        } else if num >= 40 {\n            result += \"xl\"\n          \
    \  num -= 40\n        } else if num >= 10 {\n            result += \"x\"\n   \
    \         num -= 10\n        } else if num >= 9 {\n            result += \"ix\"\
    \n            num -= 9\n        } else if num >= 5 {\n            result += \"\
    v\"\n            num -= 5\n        } else if num >= 4 {\n            result +=\
    \ \"iv\"\n            num -= 4\n        } else if num >= 1 {\n            result\
    \ += \"i\"\n            num -= 1\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(int_to_mini_roman(number: 19) == \"xix\")\nassert(int_to_mini_roman(number:\
    \ 152) == \"clii\")\nassert(int_to_mini_roman(number: 251) == \"ccli\")\nassert(int_to_mini_roman(number:\
    \ 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number: 500) == \"d\")\nassert(int_to_mini_roman(number:\
    \ 1) == \"i\")\nassert(int_to_mini_roman(number: 4) == \"iv\")\nassert(int_to_mini_roman(number:\
    \ 43) == \"xliii\")\nassert(int_to_mini_roman(number: 90) == \"xc\")\nassert(int_to_mini_roman(number:\
    \ 94) == \"xciv\")\nassert(int_to_mini_roman(number: 532) == \"dxxxii\")\nassert(int_to_mini_roman(number:\
    \ 900) == \"cm\")\nassert(int_to_mini_roman(number: 994) == \"cmxciv\")\nassert(int_to_mini_roman(number:\
    \ 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    var num = number\n    var\
    \ result = \"\"\n    while num > 0 {\n        if num >= 1000 {\n            result\
    \ += \"m\"\n            num -= 1000\n        } else if num >= 900 {\n        \
    \    result += \"cm\"\n            num -= 900\n        } else if num >= 500 {\n\
    \            result += \"d\"\n            num -= 500\n        } else if num >=\
    \ 400 {\n            result += \"cd\"\n            num -= 400\n        } else\
    \ if num >= 100 {\n            result += \"c\"\n            num -= 100\n     \
    \   } else if num >= 90 {\n            result += \"xc\"\n            num -= 90\n\
    \        } else if num >= 50 {\n            result += \"l\"\n            num -=\
    \ 50\n        } else if num >= 40 {\n            result += \"xl\"\n          \
    \  num -= 40\n        } else if num >= 10 {\n            result += \"x\"\n   \
    \         num -= 10\n        } else if num >= 9 {\n            result += \"ix\"\
    \n            num -= 9\n        } else if num >= 5 {\n            result += \"\
    v\"\n            num -= 5\n        } else if num >= 4 {\n            result +=\
    \ \"iv\"\n            num -= 4\n        } else if num >= 1 {\n            result\
    \ += \"i\"\n            num -= 1\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(int_to_mini_roman(number: 19) == \"xix\")\nassert(int_to_mini_roman(number:\
    \ 152) == \"clii\")\nassert(int_to_mini_roman(number: 251) == \"ccli\")\nassert(int_to_mini_roman(number:\
    \ 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number: 500) == \"d\")\nassert(int_to_mini_roman(number:\
    \ 1) == \"i\")\nassert(int_to_mini_roman(number: 4) == \"iv\")\nassert(int_to_mini_roman(number:\
    \ 43) == \"xliii\")\nassert(int_to_mini_roman(number: 90) == \"xc\")\nassert(int_to_mini_roman(number:\
    \ 94) == \"xciv\")\nassert(int_to_mini_roman(number: 532) == \"dxxxii\")\nassert(int_to_mini_roman(number:\
    \ 900) == \"cm\")\nassert(int_to_mini_roman(number: 994) == \"cmxciv\")\nassert(int_to_mini_roman(number:\
    \ 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    var result = \"\"\n    var\
    \ num = number\n    while num > 0 {\n        if num >= 1000 {\n            result\
    \ += \"m\"\n            num -= 1000\n        } else if num >= 900 {\n        \
    \    result += \"cm\"\n            num -= 900\n        } else if num >= 500 {\n\
    \            result += \"d\"\n            num -= 500\n        } else if num >=\
    \ 400 {\n            result += \"cd\"\n            num -= 400\n        } else\
    \ if num >= 100 {\n            result += \"c\"\n            num -= 100\n     \
    \   } else if num >= 90 {\n            result += \"xc\"\n            num -= 90\n\
    \        } else if num >= 50 {\n            result += \"l\"\n            num -=\
    \ 50\n        } else if num >= 40 {\n            result += \"xl\"\n          \
    \  num -= 40\n        } else if num >= 10 {\n            result += \"x\"\n   \
    \         num -= 10\n        } else if num >= 9 {\n            result += \"ix\"\
    \n            num -= 9\n        } else if num >= 5 {\n            result += \"\
    v\"\n            num -= 5\n        } else if num >= 4 {\n            result +=\
    \ \"iv\"\n            num -= 4\n        } else if num >= 1 {\n            result\
    \ += \"i\"\n            num -= 1\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(int_to_mini_roman(number: 19) == \"xix\")\nassert(int_to_mini_roman(number:\
    \ 152) == \"clii\")\nassert(int_to_mini_roman(number: 251) == \"ccli\")\nassert(int_to_mini_roman(number:\
    \ 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number: 500) == \"d\")\nassert(int_to_mini_roman(number:\
    \ 1) == \"i\")\nassert(int_to_mini_roman(number: 4) == \"iv\")\nassert(int_to_mini_roman(number:\
    \ 43) == \"xliii\")\nassert(int_to_mini_roman(number: 90) == \"xc\")\nassert(int_to_mini_roman(number:\
    \ 94) == \"xciv\")\nassert(int_to_mini_roman(number: 532) == \"dxxxii\")\nassert(int_to_mini_roman(number:\
    \ 900) == \"cm\")\nassert(int_to_mini_roman(number: 994) == \"cmxciv\")\nassert(int_to_mini_roman(number:\
    \ 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    var result = \"\"\n    var\
    \ num = number\n    while num > 0 {\n        if num >= 1000 {\n            result\
    \ += \"m\"\n            num -= 1000\n        } else if num >= 900 {\n        \
    \    result += \"cm\"\n            num -= 900\n        } else if num >= 500 {\n\
    \            result += \"d\"\n            num -= 500\n        } else if num >=\
    \ 400 {\n            result += \"cd\"\n            num -= 400\n        } else\
    \ if num >= 100 {\n            result += \"c\"\n            num -= 100\n     \
    \   } else if num >= 90 {\n            result += \"xc\"\n            num -= 90\n\
    \        } else if num >= 50 {\n            result += \"l\"\n            num -=\
    \ 50\n        } else if num >= 40 {\n            result += \"xl\"\n          \
    \  num -= 40\n        } else if num >= 10 {\n            result += \"x\"\n   \
    \         num -= 10\n        } else if num >= 9 {\n            result += \"ix\"\
    \n            num -= 9\n        } else if num >= 5 {\n            result += \"\
    v\"\n            num -= 5\n        } else if num >= 4 {\n            result +=\
    \ \"iv\"\n            num -= 4\n        } else if num >= 1 {\n            result\
    \ += \"i\"\n            num -= 1\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(int_to_mini_roman(number: 19) == \"xix\")\nassert(int_to_mini_roman(number:\
    \ 152) == \"clii\")\nassert(int_to_mini_roman(number: 251) == \"ccli\")\nassert(int_to_mini_roman(number:\
    \ 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number: 500) == \"d\")\nassert(int_to_mini_roman(number:\
    \ 1) == \"i\")\nassert(int_to_mini_roman(number: 4) == \"iv\")\nassert(int_to_mini_roman(number:\
    \ 43) == \"xliii\")\nassert(int_to_mini_roman(number: 90) == \"xc\")\nassert(int_to_mini_roman(number:\
    \ 94) == \"xciv\")\nassert(int_to_mini_roman(number: 532) == \"dxxxii\")\nassert(int_to_mini_roman(number:\
    \ 900) == \"cm\")\nassert(int_to_mini_roman(number: 994) == \"cmxciv\")\nassert(int_to_mini_roman(number:\
    \ 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    var result = \"\"\n    var\
    \ num = number\n    while num > 0 {\n        if num >= 1000 {\n            result\
    \ += \"m\"\n            num -= 1000\n        } else if num >= 900 {\n        \
    \    result += \"cm\"\n            num -= 900\n        } else if num >= 500 {\n\
    \            result += \"d\"\n            num -= 500\n        } else if num >=\
    \ 400 {\n            result += \"cd\"\n            num -= 400\n        } else\
    \ if num >= 100 {\n            result += \"c\"\n            num -= 100\n     \
    \   } else if num >= 90 {\n            result += \"xc\"\n            num -= 90\n\
    \        } else if num >= 50 {\n            result += \"l\"\n            num -=\
    \ 50\n        } else if num >= 40 {\n            result += \"xl\"\n          \
    \  num -= 40\n        } else if num >= 10 {\n            result += \"x\"\n   \
    \         num -= 10\n        } else if num >= 9 {\n            result += \"ix\"\
    \n            num -= 9\n        } else if num >= 5 {\n            result += \"\
    v\"\n            num -= 5\n        } else if num >= 4 {\n            result +=\
    \ \"iv\"\n            num -= 4\n        } else if num >= 1 {\n            result\
    \ += \"i\"\n            num -= 1\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(int_to_mini_roman(number: 19) == \"xix\")\nassert(int_to_mini_roman(number:\
    \ 152) == \"clii\")\nassert(int_to_mini_roman(number: 251) == \"ccli\")\nassert(int_to_mini_roman(number:\
    \ 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number: 500) == \"d\")\nassert(int_to_mini_roman(number:\
    \ 1) == \"i\")\nassert(int_to_mini_roman(number: 4) == \"iv\")\nassert(int_to_mini_roman(number:\
    \ 43) == \"xliii\")\nassert(int_to_mini_roman(number: 90) == \"xc\")\nassert(int_to_mini_roman(number:\
    \ 94) == \"xciv\")\nassert(int_to_mini_roman(number: 532) == \"dxxxii\")\nassert(int_to_mini_roman(number:\
    \ 900) == \"cm\")\nassert(int_to_mini_roman(number: 994) == \"cmxciv\")\nassert(int_to_mini_roman(number:\
    \ 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
- exit_code: 1
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    let roman_numerals = [\"\
    i\", \"v\", \"x\", \"l\", \"c\", \"d\", \"m\"]\n    var result = \"\"\n    var\
    \ num = number\n    var i = 0\n    while num > 0 {\n        let digit = num %\
    \ 10\n        if digit == 4 {\n            result = roman_numerals[i] + roman_numerals[i\
    \ + 1] + result\n        } else if digit == 9 {\n            result = roman_numerals[i]\
    \ + roman_numerals[i + 2] + result\n        } else {\n            let roman_digit\
    \ = roman_numerals[i] * (digit % 5)\n            if digit > 5 {\n            \
    \    result = roman_numerals[i + 1] + roman_digit + result\n            } else\
    \ {\n                result = roman_digit + result\n            }\n        }\n\
    \        num /= 10\n        i += 2\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(int_to_mini_roman(number: 19) == \"xix\")\nassert(int_to_mini_roman(number:\
    \ 152) == \"clii\")\nassert(int_to_mini_roman(number: 251) == \"ccli\")\nassert(int_to_mini_roman(number:\
    \ 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number: 500) == \"d\")\nassert(int_to_mini_roman(number:\
    \ 1) == \"i\")\nassert(int_to_mini_roman(number: 4) == \"iv\")\nassert(int_to_mini_roman(number:\
    \ 43) == \"xliii\")\nassert(int_to_mini_roman(number: 90) == \"xc\")\nassert(int_to_mini_roman(number:\
    \ 94) == \"xciv\")\nassert(int_to_mini_roman(number: 532) == \"dxxxii\")\nassert(int_to_mini_roman(number:\
    \ 900) == \"cm\")\nassert(int_to_mini_roman(number: 994) == \"cmxciv\")\nassert(int_to_mini_roman(number:\
    \ 1000) == \"m\")"
  status: SyntaxError
  stderr: "/tmp/tmph7cg1_jl.swift:24:49: error: binary operator '*' cannot be applied\
    \ to operands of type 'String' and 'Int'\n            let roman_digit = roman_numerals[i]\
    \ * (digit % 5)\n                              ~~~~~~~~~~~~~~~~~ ^ ~~~~~~~~~~~\n\
    /tmp/tmph7cg1_jl.swift:24:49: note: overloads for '*' exist with these partially\
    \ matching parameter lists: (Int, Int)\n            let roman_digit = roman_numerals[i]\
    \ * (digit % 5)\n                                                ^\n"
  stdout: ''
  timestamp: 1660014146
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    var result = \"\"\n    var\
    \ num = number\n    while num > 0 {\n        if num >= 1000 {\n            result\
    \ += \"m\"\n            num -= 1000\n        } else if num >= 900 {\n        \
    \    result += \"cm\"\n            num -= 900\n        } else if num >= 500 {\n\
    \            result += \"d\"\n            num -= 500\n        } else if num >=\
    \ 400 {\n            result += \"cd\"\n            num -= 400\n        } else\
    \ if num >= 100 {\n            result += \"c\"\n            num -= 100\n     \
    \   } else if num >= 90 {\n            result += \"xc\"\n            num -= 90\n\
    \        } else if num >= 50 {\n            result += \"l\"\n            num -=\
    \ 50\n        } else if num >= 40 {\n            result += \"xl\"\n          \
    \  num -= 40\n        } else if num >= 10 {\n            result += \"x\"\n   \
    \         num -= 10\n        } else if num >= 9 {\n            result += \"ix\"\
    \n            num -= 9\n        } else if num >= 5 {\n            result += \"\
    v\"\n            num -= 5\n        } else if num >= 4 {\n            result +=\
    \ \"iv\"\n            num -= 4\n        } else if num >= 1 {\n            result\
    \ += \"i\"\n            num -= 1\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(int_to_mini_roman(number: 19) == \"xix\")\nassert(int_to_mini_roman(number:\
    \ 152) == \"clii\")\nassert(int_to_mini_roman(number: 251) == \"ccli\")\nassert(int_to_mini_roman(number:\
    \ 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number: 500) == \"d\")\nassert(int_to_mini_roman(number:\
    \ 1) == \"i\")\nassert(int_to_mini_roman(number: 4) == \"iv\")\nassert(int_to_mini_roman(number:\
    \ 43) == \"xliii\")\nassert(int_to_mini_roman(number: 90) == \"xc\")\nassert(int_to_mini_roman(number:\
    \ 94) == \"xciv\")\nassert(int_to_mini_roman(number: 532) == \"dxxxii\")\nassert(int_to_mini_roman(number:\
    \ 900) == \"cm\")\nassert(int_to_mini_roman(number: 994) == \"cmxciv\")\nassert(int_to_mini_roman(number:\
    \ 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    var result = \"\"\n    var\
    \ num = number\n    while num > 0 {\n        if num >= 1000 {\n            result\
    \ += \"m\"\n            num -= 1000\n        } else if num >= 900 {\n        \
    \    result += \"cm\"\n            num -= 900\n        } else if num >= 500 {\n\
    \            result += \"d\"\n            num -= 500\n        } else if num >=\
    \ 400 {\n            result += \"cd\"\n            num -= 400\n        } else\
    \ if num >= 100 {\n            result += \"c\"\n            num -= 100\n     \
    \   } else if num >= 90 {\n            result += \"xc\"\n            num -= 90\n\
    \        } else if num >= 50 {\n            result += \"l\"\n            num -=\
    \ 50\n        } else if num >= 40 {\n            result += \"xl\"\n          \
    \  num -= 40\n        } else if num >= 10 {\n            result += \"x\"\n   \
    \         num -= 10\n        } else if num >= 9 {\n            result += \"ix\"\
    \n            num -= 9\n        } else if num >= 5 {\n            result += \"\
    v\"\n            num -= 5\n        } else if num >= 4 {\n            result +=\
    \ \"iv\"\n            num -= 4\n        } else if num >= 1 {\n            result\
    \ += \"i\"\n            num -= 1\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(int_to_mini_roman(number: 19) == \"xix\")\nassert(int_to_mini_roman(number:\
    \ 152) == \"clii\")\nassert(int_to_mini_roman(number: 251) == \"ccli\")\nassert(int_to_mini_roman(number:\
    \ 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number: 500) == \"d\")\nassert(int_to_mini_roman(number:\
    \ 1) == \"i\")\nassert(int_to_mini_roman(number: 4) == \"iv\")\nassert(int_to_mini_roman(number:\
    \ 43) == \"xliii\")\nassert(int_to_mini_roman(number: 90) == \"xc\")\nassert(int_to_mini_roman(number:\
    \ 94) == \"xciv\")\nassert(int_to_mini_roman(number: 532) == \"dxxxii\")\nassert(int_to_mini_roman(number:\
    \ 900) == \"cm\")\nassert(int_to_mini_roman(number: 994) == \"cmxciv\")\nassert(int_to_mini_roman(number:\
    \ 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    let roman_numerals = [\"\
    i\", \"v\", \"x\", \"l\", \"c\", \"d\", \"m\"]\n    var result = \"\"\n    var\
    \ num = number\n    var i = 0\n    while num > 0 {\n        let digit = num %\
    \ 10\n        if digit == 4 {\n            result = roman_numerals[i] + roman_numerals[i\
    \ + 1] + result\n        } else if digit == 9 {\n            result = roman_numerals[i]\
    \ + roman_numerals[i + 2] + result\n        } else {\n            let count =\
    \ digit % 5\n            let roman_numeral = roman_numerals[i]\n            if\
    \ digit >= 5 {\n                result = roman_numerals[i + 1] + String(repeating:\
    \ roman_numeral, count: count) + result\n            } else {\n              \
    \  result = String(repeating: roman_numeral, count: count) + result\n        \
    \    }\n        }\n        num /= 10\n        i += 2\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(int_to_mini_roman(number: 19) == \"xix\")\nassert(int_to_mini_roman(number:\
    \ 152) == \"clii\")\nassert(int_to_mini_roman(number: 251) == \"ccli\")\nassert(int_to_mini_roman(number:\
    \ 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number: 500) == \"d\")\nassert(int_to_mini_roman(number:\
    \ 1) == \"i\")\nassert(int_to_mini_roman(number: 4) == \"iv\")\nassert(int_to_mini_roman(number:\
    \ 43) == \"xliii\")\nassert(int_to_mini_roman(number: 90) == \"xc\")\nassert(int_to_mini_roman(number:\
    \ 94) == \"xciv\")\nassert(int_to_mini_roman(number: 532) == \"dxxxii\")\nassert(int_to_mini_roman(number:\
    \ 900) == \"cm\")\nassert(int_to_mini_roman(number: 994) == \"cmxciv\")\nassert(int_to_mini_roman(number:\
    \ 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    var result = \"\"\n    var\
    \ num = number\n    while num > 0 {\n        if num >= 1000 {\n            result\
    \ += \"m\"\n            num -= 1000\n        } else if num >= 900 {\n        \
    \    result += \"cm\"\n            num -= 900\n        } else if num >= 500 {\n\
    \            result += \"d\"\n            num -= 500\n        } else if num >=\
    \ 400 {\n            result += \"cd\"\n            num -= 400\n        } else\
    \ if num >= 100 {\n            result += \"c\"\n            num -= 100\n     \
    \   } else if num >= 90 {\n            result += \"xc\"\n            num -= 90\n\
    \        } else if num >= 50 {\n            result += \"l\"\n            num -=\
    \ 50\n        } else if num >= 40 {\n            result += \"xl\"\n          \
    \  num -= 40\n        } else if num >= 10 {\n            result += \"x\"\n   \
    \         num -= 10\n        } else if num >= 9 {\n            result += \"ix\"\
    \n            num -= 9\n        } else if num >= 5 {\n            result += \"\
    v\"\n            num -= 5\n        } else if num >= 4 {\n            result +=\
    \ \"iv\"\n            num -= 4\n        } else if num >= 1 {\n            result\
    \ += \"i\"\n            num -= 1\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(int_to_mini_roman(number: 19) == \"xix\")\nassert(int_to_mini_roman(number:\
    \ 152) == \"clii\")\nassert(int_to_mini_roman(number: 251) == \"ccli\")\nassert(int_to_mini_roman(number:\
    \ 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number: 500) == \"d\")\nassert(int_to_mini_roman(number:\
    \ 1) == \"i\")\nassert(int_to_mini_roman(number: 4) == \"iv\")\nassert(int_to_mini_roman(number:\
    \ 43) == \"xliii\")\nassert(int_to_mini_roman(number: 90) == \"xc\")\nassert(int_to_mini_roman(number:\
    \ 94) == \"xciv\")\nassert(int_to_mini_roman(number: 532) == \"dxxxii\")\nassert(int_to_mini_roman(number:\
    \ 900) == \"cm\")\nassert(int_to_mini_roman(number: 994) == \"cmxciv\")\nassert(int_to_mini_roman(number:\
    \ 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    var num = number\n    var\
    \ result = \"\"\n    while num > 0 {\n        if num >= 1000 {\n            result\
    \ += \"m\"\n            num -= 1000\n        } else if num >= 900 {\n        \
    \    result += \"cm\"\n            num -= 900\n        } else if num >= 500 {\n\
    \            result += \"d\"\n            num -= 500\n        } else if num >=\
    \ 400 {\n            result += \"cd\"\n            num -= 400\n        } else\
    \ if num >= 100 {\n            result += \"c\"\n            num -= 100\n     \
    \   } else if num >= 90 {\n            result += \"xc\"\n            num -= 90\n\
    \        } else if num >= 50 {\n            result += \"l\"\n            num -=\
    \ 50\n        } else if num >= 40 {\n            result += \"xl\"\n          \
    \  num -= 40\n        } else if num >= 10 {\n            result += \"x\"\n   \
    \         num -= 10\n        } else if num >= 9 {\n            result += \"ix\"\
    \n            num -= 9\n        } else if num >= 5 {\n            result += \"\
    v\"\n            num -= 5\n        } else if num >= 4 {\n            result +=\
    \ \"iv\"\n            num -= 4\n        } else if num >= 1 {\n            result\
    \ += \"i\"\n            num -= 1\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(int_to_mini_roman(number: 19) == \"xix\")\nassert(int_to_mini_roman(number:\
    \ 152) == \"clii\")\nassert(int_to_mini_roman(number: 251) == \"ccli\")\nassert(int_to_mini_roman(number:\
    \ 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number: 500) == \"d\")\nassert(int_to_mini_roman(number:\
    \ 1) == \"i\")\nassert(int_to_mini_roman(number: 4) == \"iv\")\nassert(int_to_mini_roman(number:\
    \ 43) == \"xliii\")\nassert(int_to_mini_roman(number: 90) == \"xc\")\nassert(int_to_mini_roman(number:\
    \ 94) == \"xciv\")\nassert(int_to_mini_roman(number: 532) == \"dxxxii\")\nassert(int_to_mini_roman(number:\
    \ 900) == \"cm\")\nassert(int_to_mini_roman(number: 994) == \"cmxciv\")\nassert(int_to_mini_roman(number:\
    \ 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    let roman_numerals = [\"\
    m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\"\
    , \"iv\", \"i\"]\n    let arabic_numerals = [1000, 900, 500, 400, 100, 90, 50,\
    \ 40, 10, 9, 5, 4, 1]\n    var result = \"\"\n    var num = number\n    for (index,\
    \ roman_numeral) in roman_numerals.enumerated() {\n        let arabic_numeral\
    \ = arabic_numerals[index]\n        while num >= arabic_numeral {\n          \
    \  result += roman_numeral\n            num -= arabic_numeral\n        }\n   \
    \ }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(int_to_mini_roman(number:\
    \ 19) == \"xix\")\nassert(int_to_mini_roman(number: 152) == \"clii\")\nassert(int_to_mini_roman(number:\
    \ 251) == \"ccli\")\nassert(int_to_mini_roman(number: 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number:\
    \ 500) == \"d\")\nassert(int_to_mini_roman(number: 1) == \"i\")\nassert(int_to_mini_roman(number:\
    \ 4) == \"iv\")\nassert(int_to_mini_roman(number: 43) == \"xliii\")\nassert(int_to_mini_roman(number:\
    \ 90) == \"xc\")\nassert(int_to_mini_roman(number: 94) == \"xciv\")\nassert(int_to_mini_roman(number:\
    \ 532) == \"dxxxii\")\nassert(int_to_mini_roman(number: 900) == \"cm\")\nassert(int_to_mini_roman(number:\
    \ 994) == \"cmxciv\")\nassert(int_to_mini_roman(number: 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    var result = \"\"\n    var\
    \ num = number\n    while num > 0 {\n        if num >= 1000 {\n            result\
    \ += \"m\"\n            num -= 1000\n        } else if num >= 900 {\n        \
    \    result += \"cm\"\n            num -= 900\n        } else if num >= 500 {\n\
    \            result += \"d\"\n            num -= 500\n        } else if num >=\
    \ 400 {\n            result += \"cd\"\n            num -= 400\n        } else\
    \ if num >= 100 {\n            result += \"c\"\n            num -= 100\n     \
    \   } else if num >= 90 {\n            result += \"xc\"\n            num -= 90\n\
    \        } else if num >= 50 {\n            result += \"l\"\n            num -=\
    \ 50\n        } else if num >= 40 {\n            result += \"xl\"\n          \
    \  num -= 40\n        } else if num >= 10 {\n            result += \"x\"\n   \
    \         num -= 10\n        } else if num >= 9 {\n            result += \"ix\"\
    \n            num -= 9\n        } else if num >= 5 {\n            result += \"\
    v\"\n            num -= 5\n        } else if num >= 4 {\n            result +=\
    \ \"iv\"\n            num -= 4\n        } else if num >= 1 {\n            result\
    \ += \"i\"\n            num -= 1\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(int_to_mini_roman(number: 19) == \"xix\")\nassert(int_to_mini_roman(number:\
    \ 152) == \"clii\")\nassert(int_to_mini_roman(number: 251) == \"ccli\")\nassert(int_to_mini_roman(number:\
    \ 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number: 500) == \"d\")\nassert(int_to_mini_roman(number:\
    \ 1) == \"i\")\nassert(int_to_mini_roman(number: 4) == \"iv\")\nassert(int_to_mini_roman(number:\
    \ 43) == \"xliii\")\nassert(int_to_mini_roman(number: 90) == \"xc\")\nassert(int_to_mini_roman(number:\
    \ 94) == \"xciv\")\nassert(int_to_mini_roman(number: 532) == \"dxxxii\")\nassert(int_to_mini_roman(number:\
    \ 900) == \"cm\")\nassert(int_to_mini_roman(number: 994) == \"cmxciv\")\nassert(int_to_mini_roman(number:\
    \ 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    var result = \"\"\n    var\
    \ num = number\n    while num > 0 {\n        if num >= 1000 {\n            result\
    \ += \"m\"\n            num -= 1000\n        } else if num >= 900 {\n        \
    \    result += \"cm\"\n            num -= 900\n        } else if num >= 500 {\n\
    \            result += \"d\"\n            num -= 500\n        } else if num >=\
    \ 400 {\n            result += \"cd\"\n            num -= 400\n        } else\
    \ if num >= 100 {\n            result += \"c\"\n            num -= 100\n     \
    \   } else if num >= 90 {\n            result += \"xc\"\n            num -= 90\n\
    \        } else if num >= 50 {\n            result += \"l\"\n            num -=\
    \ 50\n        } else if num >= 40 {\n            result += \"xl\"\n          \
    \  num -= 40\n        } else if num >= 10 {\n            result += \"x\"\n   \
    \         num -= 10\n        } else if num >= 9 {\n            result += \"ix\"\
    \n            num -= 9\n        } else if num >= 5 {\n            result += \"\
    v\"\n            num -= 5\n        } else if num >= 4 {\n            result +=\
    \ \"iv\"\n            num -= 4\n        } else if num >= 1 {\n            result\
    \ += \"i\"\n            num -= 1\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(int_to_mini_roman(number: 19) == \"xix\")\nassert(int_to_mini_roman(number:\
    \ 152) == \"clii\")\nassert(int_to_mini_roman(number: 251) == \"ccli\")\nassert(int_to_mini_roman(number:\
    \ 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number: 500) == \"d\")\nassert(int_to_mini_roman(number:\
    \ 1) == \"i\")\nassert(int_to_mini_roman(number: 4) == \"iv\")\nassert(int_to_mini_roman(number:\
    \ 43) == \"xliii\")\nassert(int_to_mini_roman(number: 90) == \"xc\")\nassert(int_to_mini_roman(number:\
    \ 94) == \"xciv\")\nassert(int_to_mini_roman(number: 532) == \"dxxxii\")\nassert(int_to_mini_roman(number:\
    \ 900) == \"cm\")\nassert(int_to_mini_roman(number: 994) == \"cmxciv\")\nassert(int_to_mini_roman(number:\
    \ 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    var num = number\n    var\
    \ result = \"\"\n    while num > 0 {\n        if num >= 1000 {\n            result\
    \ += \"m\"\n            num -= 1000\n        } else if num >= 900 {\n        \
    \    result += \"cm\"\n            num -= 900\n        } else if num >= 500 {\n\
    \            result += \"d\"\n            num -= 500\n        } else if num >=\
    \ 400 {\n            result += \"cd\"\n            num -= 400\n        } else\
    \ if num >= 100 {\n            result += \"c\"\n            num -= 100\n     \
    \   } else if num >= 90 {\n            result += \"xc\"\n            num -= 90\n\
    \        } else if num >= 50 {\n            result += \"l\"\n            num -=\
    \ 50\n        } else if num >= 40 {\n            result += \"xl\"\n          \
    \  num -= 40\n        } else if num >= 10 {\n            result += \"x\"\n   \
    \         num -= 10\n        } else if num >= 9 {\n            result += \"ix\"\
    \n            num -= 9\n        } else if num >= 5 {\n            result += \"\
    v\"\n            num -= 5\n        } else if num >= 4 {\n            result +=\
    \ \"iv\"\n            num -= 4\n        } else if num >= 1 {\n            result\
    \ += \"i\"\n            num -= 1\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(int_to_mini_roman(number: 19) == \"xix\")\nassert(int_to_mini_roman(number:\
    \ 152) == \"clii\")\nassert(int_to_mini_roman(number: 251) == \"ccli\")\nassert(int_to_mini_roman(number:\
    \ 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number: 500) == \"d\")\nassert(int_to_mini_roman(number:\
    \ 1) == \"i\")\nassert(int_to_mini_roman(number: 4) == \"iv\")\nassert(int_to_mini_roman(number:\
    \ 43) == \"xliii\")\nassert(int_to_mini_roman(number: 90) == \"xc\")\nassert(int_to_mini_roman(number:\
    \ 94) == \"xciv\")\nassert(int_to_mini_roman(number: 532) == \"dxxxii\")\nassert(int_to_mini_roman(number:\
    \ 900) == \"cm\")\nassert(int_to_mini_roman(number: 994) == \"cmxciv\")\nassert(int_to_mini_roman(number:\
    \ 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
- exit_code: -4
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    // TODO: Implement this function\n\
    \    return \"\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(int_to_mini_roman(number:\
    \ 19) == \"xix\")\nassert(int_to_mini_roman(number: 152) == \"clii\")\nassert(int_to_mini_roman(number:\
    \ 251) == \"ccli\")\nassert(int_to_mini_roman(number: 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number:\
    \ 500) == \"d\")\nassert(int_to_mini_roman(number: 1) == \"i\")\nassert(int_to_mini_roman(number:\
    \ 4) == \"iv\")\nassert(int_to_mini_roman(number: 43) == \"xliii\")\nassert(int_to_mini_roman(number:\
    \ 90) == \"xc\")\nassert(int_to_mini_roman(number: 94) == \"xciv\")\nassert(int_to_mini_roman(number:\
    \ 532) == \"dxxxii\")\nassert(int_to_mini_roman(number: 900) == \"cm\")\nassert(int_to_mini_roman(number:\
    \ 994) == \"cmxciv\")\nassert(int_to_mini_roman(number: 1000) == \"m\")"
  status: Exception
  stderr: 'tmpyn1xqup3/tmpyn1xqup3.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b56ec0e7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b56ebddeb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b56ebdde988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b56ebddd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyn1xqup3                        0x0000562e994632e3 <unavailable> + 4835

    5    libc.so.6                          0x00002b56ec2d3460 __libc_start_main +
    245

    6    tmpyn1xqup3                        0x0000562e99462f49 <unavailable> + 3913

    '
  stdout: ''
  timestamp: 1660014146
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    var result = \"\"\n    var\
    \ num = number\n    while num > 0 {\n        if num >= 1000 {\n            result\
    \ += \"m\"\n            num -= 1000\n        } else if num >= 900 {\n        \
    \    result += \"cm\"\n            num -= 900\n        } else if num >= 500 {\n\
    \            result += \"d\"\n            num -= 500\n        } else if num >=\
    \ 400 {\n            result += \"cd\"\n            num -= 400\n        } else\
    \ if num >= 100 {\n            result += \"c\"\n            num -= 100\n     \
    \   } else if num >= 90 {\n            result += \"xc\"\n            num -= 90\n\
    \        } else if num >= 50 {\n            result += \"l\"\n            num -=\
    \ 50\n        } else if num >= 40 {\n            result += \"xl\"\n          \
    \  num -= 40\n        } else if num >= 10 {\n            result += \"x\"\n   \
    \         num -= 10\n        } else if num >= 9 {\n            result += \"ix\"\
    \n            num -= 9\n        } else if num >= 5 {\n            result += \"\
    v\"\n            num -= 5\n        } else if num >= 4 {\n            result +=\
    \ \"iv\"\n            num -= 4\n        } else if num >= 1 {\n            result\
    \ += \"i\"\n            num -= 1\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(int_to_mini_roman(number: 19) == \"xix\")\nassert(int_to_mini_roman(number:\
    \ 152) == \"clii\")\nassert(int_to_mini_roman(number: 251) == \"ccli\")\nassert(int_to_mini_roman(number:\
    \ 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number: 500) == \"d\")\nassert(int_to_mini_roman(number:\
    \ 1) == \"i\")\nassert(int_to_mini_roman(number: 4) == \"iv\")\nassert(int_to_mini_roman(number:\
    \ 43) == \"xliii\")\nassert(int_to_mini_roman(number: 90) == \"xc\")\nassert(int_to_mini_roman(number:\
    \ 94) == \"xciv\")\nassert(int_to_mini_roman(number: 532) == \"dxxxii\")\nassert(int_to_mini_roman(number:\
    \ 900) == \"cm\")\nassert(int_to_mini_roman(number: 994) == \"cmxciv\")\nassert(int_to_mini_roman(number:\
    \ 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    let roman_numerals = [\"\
    m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\"\
    , \"iv\", \"i\"]\n    let values = [1000, 900, 500, 400, 100, 90, 50, 40, 10,\
    \ 9, 5, 4, 1]\n    var result = \"\"\n    var num = number\n    for i in 0..<roman_numerals.count\
    \ {\n        while num >= values[i] {\n            num -= values[i]\n        \
    \    result += roman_numerals[i]\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(int_to_mini_roman(number: 19) == \"xix\")\nassert(int_to_mini_roman(number:\
    \ 152) == \"clii\")\nassert(int_to_mini_roman(number: 251) == \"ccli\")\nassert(int_to_mini_roman(number:\
    \ 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number: 500) == \"d\")\nassert(int_to_mini_roman(number:\
    \ 1) == \"i\")\nassert(int_to_mini_roman(number: 4) == \"iv\")\nassert(int_to_mini_roman(number:\
    \ 43) == \"xliii\")\nassert(int_to_mini_roman(number: 90) == \"xc\")\nassert(int_to_mini_roman(number:\
    \ 94) == \"xciv\")\nassert(int_to_mini_roman(number: 532) == \"dxxxii\")\nassert(int_to_mini_roman(number:\
    \ 900) == \"cm\")\nassert(int_to_mini_roman(number: 994) == \"cmxciv\")\nassert(int_to_mini_roman(number:\
    \ 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    var result = \"\"\n    var\
    \ num = number\n    while num > 0 {\n        if num >= 1000 {\n            result\
    \ += \"m\"\n            num -= 1000\n        } else if num >= 900 {\n        \
    \    result += \"cm\"\n            num -= 900\n        } else if num >= 500 {\n\
    \            result += \"d\"\n            num -= 500\n        } else if num >=\
    \ 400 {\n            result += \"cd\"\n            num -= 400\n        } else\
    \ if num >= 100 {\n            result += \"c\"\n            num -= 100\n     \
    \   } else if num >= 90 {\n            result += \"xc\"\n            num -= 90\n\
    \        } else if num >= 50 {\n            result += \"l\"\n            num -=\
    \ 50\n        } else if num >= 40 {\n            result += \"xl\"\n          \
    \  num -= 40\n        } else if num >= 10 {\n            result += \"x\"\n   \
    \         num -= 10\n        } else if num >= 9 {\n            result += \"ix\"\
    \n            num -= 9\n        } else if num >= 5 {\n            result += \"\
    v\"\n            num -= 5\n        } else if num >= 4 {\n            result +=\
    \ \"iv\"\n            num -= 4\n        } else if num >= 1 {\n            result\
    \ += \"i\"\n            num -= 1\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(int_to_mini_roman(number: 19) == \"xix\")\nassert(int_to_mini_roman(number:\
    \ 152) == \"clii\")\nassert(int_to_mini_roman(number: 251) == \"ccli\")\nassert(int_to_mini_roman(number:\
    \ 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number: 500) == \"d\")\nassert(int_to_mini_roman(number:\
    \ 1) == \"i\")\nassert(int_to_mini_roman(number: 4) == \"iv\")\nassert(int_to_mini_roman(number:\
    \ 43) == \"xliii\")\nassert(int_to_mini_roman(number: 90) == \"xc\")\nassert(int_to_mini_roman(number:\
    \ 94) == \"xciv\")\nassert(int_to_mini_roman(number: 532) == \"dxxxii\")\nassert(int_to_mini_roman(number:\
    \ 900) == \"cm\")\nassert(int_to_mini_roman(number: 994) == \"cmxciv\")\nassert(int_to_mini_roman(number:\
    \ 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    var result = \"\"\n    var\
    \ number = number\n    while number > 0 {\n        if number >= 1000 {\n     \
    \       result += \"m\"\n            number -= 1000\n        } else if number\
    \ >= 900 {\n            result += \"cm\"\n            number -= 900\n        }\
    \ else if number >= 500 {\n            result += \"d\"\n            number -=\
    \ 500\n        } else if number >= 400 {\n            result += \"cd\"\n     \
    \       number -= 400\n        } else if number >= 100 {\n            result +=\
    \ \"c\"\n            number -= 100\n        } else if number >= 90 {\n       \
    \     result += \"xc\"\n            number -= 90\n        } else if number >=\
    \ 50 {\n            result += \"l\"\n            number -= 50\n        } else\
    \ if number >= 40 {\n            result += \"xl\"\n            number -= 40\n\
    \        } else if number >= 10 {\n            result += \"x\"\n            number\
    \ -= 10\n        } else if number >= 9 {\n            result += \"ix\"\n     \
    \       number -= 9\n        } else if number >= 5 {\n            result += \"\
    v\"\n            number -= 5\n        } else if number >= 4 {\n            result\
    \ += \"iv\"\n            number -= 4\n        } else if number >= 1 {\n      \
    \      result += \"i\"\n            number -= 1\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(int_to_mini_roman(number:\
    \ 19) == \"xix\")\nassert(int_to_mini_roman(number: 152) == \"clii\")\nassert(int_to_mini_roman(number:\
    \ 251) == \"ccli\")\nassert(int_to_mini_roman(number: 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number:\
    \ 500) == \"d\")\nassert(int_to_mini_roman(number: 1) == \"i\")\nassert(int_to_mini_roman(number:\
    \ 4) == \"iv\")\nassert(int_to_mini_roman(number: 43) == \"xliii\")\nassert(int_to_mini_roman(number:\
    \ 90) == \"xc\")\nassert(int_to_mini_roman(number: 94) == \"xciv\")\nassert(int_to_mini_roman(number:\
    \ 532) == \"dxxxii\")\nassert(int_to_mini_roman(number: 900) == \"cm\")\nassert(int_to_mini_roman(number:\
    \ 994) == \"cmxciv\")\nassert(int_to_mini_roman(number: 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    var result = \"\"\n    var\
    \ num = number\n    while num > 0 {\n        if num >= 1000 {\n            result\
    \ += \"m\"\n            num -= 1000\n        } else if num >= 900 {\n        \
    \    result += \"cm\"\n            num -= 900\n        } else if num >= 500 {\n\
    \            result += \"d\"\n            num -= 500\n        } else if num >=\
    \ 400 {\n            result += \"cd\"\n            num -= 400\n        } else\
    \ if num >= 100 {\n            result += \"c\"\n            num -= 100\n     \
    \   } else if num >= 90 {\n            result += \"xc\"\n            num -= 90\n\
    \        } else if num >= 50 {\n            result += \"l\"\n            num -=\
    \ 50\n        } else if num >= 40 {\n            result += \"xl\"\n          \
    \  num -= 40\n        } else if num >= 10 {\n            result += \"x\"\n   \
    \         num -= 10\n        } else if num >= 9 {\n            result += \"ix\"\
    \n            num -= 9\n        } else if num >= 5 {\n            result += \"\
    v\"\n            num -= 5\n        } else if num >= 4 {\n            result +=\
    \ \"iv\"\n            num -= 4\n        } else if num >= 1 {\n            result\
    \ += \"i\"\n            num -= 1\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(int_to_mini_roman(number: 19) == \"xix\")\nassert(int_to_mini_roman(number:\
    \ 152) == \"clii\")\nassert(int_to_mini_roman(number: 251) == \"ccli\")\nassert(int_to_mini_roman(number:\
    \ 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number: 500) == \"d\")\nassert(int_to_mini_roman(number:\
    \ 1) == \"i\")\nassert(int_to_mini_roman(number: 4) == \"iv\")\nassert(int_to_mini_roman(number:\
    \ 43) == \"xliii\")\nassert(int_to_mini_roman(number: 90) == \"xc\")\nassert(int_to_mini_roman(number:\
    \ 94) == \"xciv\")\nassert(int_to_mini_roman(number: 532) == \"dxxxii\")\nassert(int_to_mini_roman(number:\
    \ 900) == \"cm\")\nassert(int_to_mini_roman(number: 994) == \"cmxciv\")\nassert(int_to_mini_roman(number:\
    \ 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    var result = \"\"\n    var\
    \ num = number\n    while num > 0 {\n        if num >= 1000 {\n            result\
    \ += \"m\"\n            num -= 1000\n        } else if num >= 900 {\n        \
    \    result += \"cm\"\n            num -= 900\n        } else if num >= 500 {\n\
    \            result += \"d\"\n            num -= 500\n        } else if num >=\
    \ 400 {\n            result += \"cd\"\n            num -= 400\n        } else\
    \ if num >= 100 {\n            result += \"c\"\n            num -= 100\n     \
    \   } else if num >= 90 {\n            result += \"xc\"\n            num -= 90\n\
    \        } else if num >= 50 {\n            result += \"l\"\n            num -=\
    \ 50\n        } else if num >= 40 {\n            result += \"xl\"\n          \
    \  num -= 40\n        } else if num >= 10 {\n            result += \"x\"\n   \
    \         num -= 10\n        } else if num >= 9 {\n            result += \"ix\"\
    \n            num -= 9\n        } else if num >= 5 {\n            result += \"\
    v\"\n            num -= 5\n        } else if num >= 4 {\n            result +=\
    \ \"iv\"\n            num -= 4\n        } else if num >= 1 {\n            result\
    \ += \"i\"\n            num -= 1\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(int_to_mini_roman(number: 19) == \"xix\")\nassert(int_to_mini_roman(number:\
    \ 152) == \"clii\")\nassert(int_to_mini_roman(number: 251) == \"ccli\")\nassert(int_to_mini_roman(number:\
    \ 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number: 500) == \"d\")\nassert(int_to_mini_roman(number:\
    \ 1) == \"i\")\nassert(int_to_mini_roman(number: 4) == \"iv\")\nassert(int_to_mini_roman(number:\
    \ 43) == \"xliii\")\nassert(int_to_mini_roman(number: 90) == \"xc\")\nassert(int_to_mini_roman(number:\
    \ 94) == \"xciv\")\nassert(int_to_mini_roman(number: 532) == \"dxxxii\")\nassert(int_to_mini_roman(number:\
    \ 900) == \"cm\")\nassert(int_to_mini_roman(number: 994) == \"cmxciv\")\nassert(int_to_mini_roman(number:\
    \ 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    var result = \"\"\n    var\
    \ num = number\n    while num > 0 {\n        if num >= 1000 {\n            result\
    \ += \"m\"\n            num -= 1000\n        } else if num >= 900 {\n        \
    \    result += \"cm\"\n            num -= 900\n        } else if num >= 500 {\n\
    \            result += \"d\"\n            num -= 500\n        } else if num >=\
    \ 400 {\n            result += \"cd\"\n            num -= 400\n        } else\
    \ if num >= 100 {\n            result += \"c\"\n            num -= 100\n     \
    \   } else if num >= 90 {\n            result += \"xc\"\n            num -= 90\n\
    \        } else if num >= 50 {\n            result += \"l\"\n            num -=\
    \ 50\n        } else if num >= 40 {\n            result += \"xl\"\n          \
    \  num -= 40\n        } else if num >= 10 {\n            result += \"x\"\n   \
    \         num -= 10\n        } else if num >= 9 {\n            result += \"ix\"\
    \n            num -= 9\n        } else if num >= 5 {\n            result += \"\
    v\"\n            num -= 5\n        } else if num >= 4 {\n            result +=\
    \ \"iv\"\n            num -= 4\n        } else if num >= 1 {\n            result\
    \ += \"i\"\n            num -= 1\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(int_to_mini_roman(number: 19) == \"xix\")\nassert(int_to_mini_roman(number:\
    \ 152) == \"clii\")\nassert(int_to_mini_roman(number: 251) == \"ccli\")\nassert(int_to_mini_roman(number:\
    \ 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number: 500) == \"d\")\nassert(int_to_mini_roman(number:\
    \ 1) == \"i\")\nassert(int_to_mini_roman(number: 4) == \"iv\")\nassert(int_to_mini_roman(number:\
    \ 43) == \"xliii\")\nassert(int_to_mini_roman(number: 90) == \"xc\")\nassert(int_to_mini_roman(number:\
    \ 94) == \"xciv\")\nassert(int_to_mini_roman(number: 532) == \"dxxxii\")\nassert(int_to_mini_roman(number:\
    \ 900) == \"cm\")\nassert(int_to_mini_roman(number: 994) == \"cmxciv\")\nassert(int_to_mini_roman(number:\
    \ 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    var result = \"\"\n    var\
    \ num = number\n    while num > 0 {\n        if num >= 1000 {\n            result\
    \ += \"m\"\n            num -= 1000\n        } else if num >= 900 {\n        \
    \    result += \"cm\"\n            num -= 900\n        } else if num >= 500 {\n\
    \            result += \"d\"\n            num -= 500\n        } else if num >=\
    \ 400 {\n            result += \"cd\"\n            num -= 400\n        } else\
    \ if num >= 100 {\n            result += \"c\"\n            num -= 100\n     \
    \   } else if num >= 90 {\n            result += \"xc\"\n            num -= 90\n\
    \        } else if num >= 50 {\n            result += \"l\"\n            num -=\
    \ 50\n        } else if num >= 40 {\n            result += \"xl\"\n          \
    \  num -= 40\n        } else if num >= 10 {\n            result += \"x\"\n   \
    \         num -= 10\n        } else if num >= 9 {\n            result += \"ix\"\
    \n            num -= 9\n        } else if num >= 5 {\n            result += \"\
    v\"\n            num -= 5\n        } else if num >= 4 {\n            result +=\
    \ \"iv\"\n            num -= 4\n        } else if num >= 1 {\n            result\
    \ += \"i\"\n            num -= 1\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(int_to_mini_roman(number: 19) == \"xix\")\nassert(int_to_mini_roman(number:\
    \ 152) == \"clii\")\nassert(int_to_mini_roman(number: 251) == \"ccli\")\nassert(int_to_mini_roman(number:\
    \ 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number: 500) == \"d\")\nassert(int_to_mini_roman(number:\
    \ 1) == \"i\")\nassert(int_to_mini_roman(number: 4) == \"iv\")\nassert(int_to_mini_roman(number:\
    \ 43) == \"xliii\")\nassert(int_to_mini_roman(number: 90) == \"xc\")\nassert(int_to_mini_roman(number:\
    \ 94) == \"xciv\")\nassert(int_to_mini_roman(number: 532) == \"dxxxii\")\nassert(int_to_mini_roman(number:\
    \ 900) == \"cm\")\nassert(int_to_mini_roman(number: 994) == \"cmxciv\")\nassert(int_to_mini_roman(number:\
    \ 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    let roman_numerals = [\"\
    m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\"\
    , \"iv\", \"i\"]\n    let arabic_numerals = [1000, 900, 500, 400, 100, 90, 50,\
    \ 40, 10, 9, 5, 4, 1]\n    var result = \"\"\n    var remainder = number\n   \
    \ for (index, numeral) in roman_numerals.enumerated() {\n        let arabic_numeral\
    \ = arabic_numerals[index]\n        while remainder >= arabic_numeral {\n    \
    \        result += numeral\n            remainder -= arabic_numeral\n        }\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(int_to_mini_roman(number:\
    \ 19) == \"xix\")\nassert(int_to_mini_roman(number: 152) == \"clii\")\nassert(int_to_mini_roman(number:\
    \ 251) == \"ccli\")\nassert(int_to_mini_roman(number: 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number:\
    \ 500) == \"d\")\nassert(int_to_mini_roman(number: 1) == \"i\")\nassert(int_to_mini_roman(number:\
    \ 4) == \"iv\")\nassert(int_to_mini_roman(number: 43) == \"xliii\")\nassert(int_to_mini_roman(number:\
    \ 90) == \"xc\")\nassert(int_to_mini_roman(number: 94) == \"xciv\")\nassert(int_to_mini_roman(number:\
    \ 532) == \"dxxxii\")\nassert(int_to_mini_roman(number: 900) == \"cm\")\nassert(int_to_mini_roman(number:\
    \ 994) == \"cmxciv\")\nassert(int_to_mini_roman(number: 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    let roman_numerals = [\"\
    m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\"\
    , \"iv\", \"i\"]\n    let values = [1000, 900, 500, 400, 100, 90, 50, 40, 10,\
    \ 9, 5, 4, 1]\n    var num = number\n    var result = \"\"\n    for (index, roman_numeral)\
    \ in roman_numerals.enumerated() {\n        while num >= values[index] {\n   \
    \         num -= values[index]\n            result += roman_numeral\n        }\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(int_to_mini_roman(number:\
    \ 19) == \"xix\")\nassert(int_to_mini_roman(number: 152) == \"clii\")\nassert(int_to_mini_roman(number:\
    \ 251) == \"ccli\")\nassert(int_to_mini_roman(number: 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number:\
    \ 500) == \"d\")\nassert(int_to_mini_roman(number: 1) == \"i\")\nassert(int_to_mini_roman(number:\
    \ 4) == \"iv\")\nassert(int_to_mini_roman(number: 43) == \"xliii\")\nassert(int_to_mini_roman(number:\
    \ 90) == \"xc\")\nassert(int_to_mini_roman(number: 94) == \"xciv\")\nassert(int_to_mini_roman(number:\
    \ 532) == \"dxxxii\")\nassert(int_to_mini_roman(number: 900) == \"cm\")\nassert(int_to_mini_roman(number:\
    \ 994) == \"cmxciv\")\nassert(int_to_mini_roman(number: 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    var result = \"\"\n    var\
    \ num = number\n    while num > 0 {\n        if num >= 1000 {\n            result\
    \ += \"m\"\n            num -= 1000\n        } else if num >= 900 {\n        \
    \    result += \"cm\"\n            num -= 900\n        } else if num >= 500 {\n\
    \            result += \"d\"\n            num -= 500\n        } else if num >=\
    \ 400 {\n            result += \"cd\"\n            num -= 400\n        } else\
    \ if num >= 100 {\n            result += \"c\"\n            num -= 100\n     \
    \   } else if num >= 90 {\n            result += \"xc\"\n            num -= 90\n\
    \        } else if num >= 50 {\n            result += \"l\"\n            num -=\
    \ 50\n        } else if num >= 40 {\n            result += \"xl\"\n          \
    \  num -= 40\n        } else if num >= 10 {\n            result += \"x\"\n   \
    \         num -= 10\n        } else if num >= 9 {\n            result += \"ix\"\
    \n            num -= 9\n        } else if num >= 5 {\n            result += \"\
    v\"\n            num -= 5\n        } else if num >= 4 {\n            result +=\
    \ \"iv\"\n            num -= 4\n        } else if num >= 1 {\n            result\
    \ += \"i\"\n            num -= 1\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(int_to_mini_roman(number: 19) == \"xix\")\nassert(int_to_mini_roman(number:\
    \ 152) == \"clii\")\nassert(int_to_mini_roman(number: 251) == \"ccli\")\nassert(int_to_mini_roman(number:\
    \ 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number: 500) == \"d\")\nassert(int_to_mini_roman(number:\
    \ 1) == \"i\")\nassert(int_to_mini_roman(number: 4) == \"iv\")\nassert(int_to_mini_roman(number:\
    \ 43) == \"xliii\")\nassert(int_to_mini_roman(number: 90) == \"xc\")\nassert(int_to_mini_roman(number:\
    \ 94) == \"xciv\")\nassert(int_to_mini_roman(number: 532) == \"dxxxii\")\nassert(int_to_mini_roman(number:\
    \ 900) == \"cm\")\nassert(int_to_mini_roman(number: 994) == \"cmxciv\")\nassert(int_to_mini_roman(number:\
    \ 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    let roman_numerals = [\"\
    m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\"\
    , \"iv\", \"i\"]\n    let values = [1000, 900, 500, 400, 100, 90, 50, 40, 10,\
    \ 9, 5, 4, 1]\n    var result = \"\"\n    var num = number\n    for (index, value)\
    \ in values.enumerated() {\n        while num >= value {\n            result +=\
    \ roman_numerals[index]\n            num -= value\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(int_to_mini_roman(number:\
    \ 19) == \"xix\")\nassert(int_to_mini_roman(number: 152) == \"clii\")\nassert(int_to_mini_roman(number:\
    \ 251) == \"ccli\")\nassert(int_to_mini_roman(number: 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number:\
    \ 500) == \"d\")\nassert(int_to_mini_roman(number: 1) == \"i\")\nassert(int_to_mini_roman(number:\
    \ 4) == \"iv\")\nassert(int_to_mini_roman(number: 43) == \"xliii\")\nassert(int_to_mini_roman(number:\
    \ 90) == \"xc\")\nassert(int_to_mini_roman(number: 94) == \"xciv\")\nassert(int_to_mini_roman(number:\
    \ 532) == \"dxxxii\")\nassert(int_to_mini_roman(number: 900) == \"cm\")\nassert(int_to_mini_roman(number:\
    \ 994) == \"cmxciv\")\nassert(int_to_mini_roman(number: 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    var result = \"\"\n    var\
    \ num = number\n    while num > 0 {\n        if num >= 1000 {\n            result\
    \ += \"m\"\n            num -= 1000\n        } else if num >= 900 {\n        \
    \    result += \"cm\"\n            num -= 900\n        } else if num >= 500 {\n\
    \            result += \"d\"\n            num -= 500\n        } else if num >=\
    \ 400 {\n            result += \"cd\"\n            num -= 400\n        } else\
    \ if num >= 100 {\n            result += \"c\"\n            num -= 100\n     \
    \   } else if num >= 90 {\n            result += \"xc\"\n            num -= 90\n\
    \        } else if num >= 50 {\n            result += \"l\"\n            num -=\
    \ 50\n        } else if num >= 40 {\n            result += \"xl\"\n          \
    \  num -= 40\n        } else if num >= 10 {\n            result += \"x\"\n   \
    \         num -= 10\n        } else if num >= 9 {\n            result += \"ix\"\
    \n            num -= 9\n        } else if num >= 5 {\n            result += \"\
    v\"\n            num -= 5\n        } else if num >= 4 {\n            result +=\
    \ \"iv\"\n            num -= 4\n        } else if num >= 1 {\n            result\
    \ += \"i\"\n            num -= 1\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(int_to_mini_roman(number: 19) == \"xix\")\nassert(int_to_mini_roman(number:\
    \ 152) == \"clii\")\nassert(int_to_mini_roman(number: 251) == \"ccli\")\nassert(int_to_mini_roman(number:\
    \ 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number: 500) == \"d\")\nassert(int_to_mini_roman(number:\
    \ 1) == \"i\")\nassert(int_to_mini_roman(number: 4) == \"iv\")\nassert(int_to_mini_roman(number:\
    \ 43) == \"xliii\")\nassert(int_to_mini_roman(number: 90) == \"xc\")\nassert(int_to_mini_roman(number:\
    \ 94) == \"xciv\")\nassert(int_to_mini_roman(number: 532) == \"dxxxii\")\nassert(int_to_mini_roman(number:\
    \ 900) == \"cm\")\nassert(int_to_mini_roman(number: 994) == \"cmxciv\")\nassert(int_to_mini_roman(number:\
    \ 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    let roman_numerals = [\"\
    m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\"\
    , \"iv\", \"i\"]\n    let numbers = [1000, 900, 500, 400, 100, 90, 50, 40, 10,\
    \ 9, 5, 4, 1]\n    var result = \"\"\n    var num = number\n    for (index, numeral)\
    \ in roman_numerals.enumerated() {\n        while num >= numbers[index] {\n  \
    \          result += numeral\n            num -= numbers[index]\n        }\n \
    \   }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(int_to_mini_roman(number:\
    \ 19) == \"xix\")\nassert(int_to_mini_roman(number: 152) == \"clii\")\nassert(int_to_mini_roman(number:\
    \ 251) == \"ccli\")\nassert(int_to_mini_roman(number: 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number:\
    \ 500) == \"d\")\nassert(int_to_mini_roman(number: 1) == \"i\")\nassert(int_to_mini_roman(number:\
    \ 4) == \"iv\")\nassert(int_to_mini_roman(number: 43) == \"xliii\")\nassert(int_to_mini_roman(number:\
    \ 90) == \"xc\")\nassert(int_to_mini_roman(number: 94) == \"xciv\")\nassert(int_to_mini_roman(number:\
    \ 532) == \"dxxxii\")\nassert(int_to_mini_roman(number: 900) == \"cm\")\nassert(int_to_mini_roman(number:\
    \ 994) == \"cmxciv\")\nassert(int_to_mini_roman(number: 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    var result = \"\"\n    var\
    \ num = number\n    while num > 0 {\n        if num >= 1000 {\n            result\
    \ += \"m\"\n            num -= 1000\n        } else if num >= 900 {\n        \
    \    result += \"cm\"\n            num -= 900\n        } else if num >= 500 {\n\
    \            result += \"d\"\n            num -= 500\n        } else if num >=\
    \ 400 {\n            result += \"cd\"\n            num -= 400\n        } else\
    \ if num >= 100 {\n            result += \"c\"\n            num -= 100\n     \
    \   } else if num >= 90 {\n            result += \"xc\"\n            num -= 90\n\
    \        } else if num >= 50 {\n            result += \"l\"\n            num -=\
    \ 50\n        } else if num >= 40 {\n            result += \"xl\"\n          \
    \  num -= 40\n        } else if num >= 10 {\n            result += \"x\"\n   \
    \         num -= 10\n        } else if num >= 9 {\n            result += \"ix\"\
    \n            num -= 9\n        } else if num >= 5 {\n            result += \"\
    v\"\n            num -= 5\n        } else if num >= 4 {\n            result +=\
    \ \"iv\"\n            num -= 4\n        } else if num >= 1 {\n            result\
    \ += \"i\"\n            num -= 1\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(int_to_mini_roman(number: 19) == \"xix\")\nassert(int_to_mini_roman(number:\
    \ 152) == \"clii\")\nassert(int_to_mini_roman(number: 251) == \"ccli\")\nassert(int_to_mini_roman(number:\
    \ 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number: 500) == \"d\")\nassert(int_to_mini_roman(number:\
    \ 1) == \"i\")\nassert(int_to_mini_roman(number: 4) == \"iv\")\nassert(int_to_mini_roman(number:\
    \ 43) == \"xliii\")\nassert(int_to_mini_roman(number: 90) == \"xc\")\nassert(int_to_mini_roman(number:\
    \ 94) == \"xciv\")\nassert(int_to_mini_roman(number: 532) == \"dxxxii\")\nassert(int_to_mini_roman(number:\
    \ 900) == \"cm\")\nassert(int_to_mini_roman(number: 994) == \"cmxciv\")\nassert(int_to_mini_roman(number:\
    \ 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    var result = \"\"\n    var\
    \ number = number\n    let roman_numerals = [\"m\", \"cm\", \"d\", \"cd\", \"\
    c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"]\n    let values\
    \ = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]\n    for (index, roman_numeral)\
    \ in roman_numerals.enumerated() {\n        while number >= values[index] {\n\
    \            result += roman_numeral\n            number -= values[index]\n  \
    \      }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(int_to_mini_roman(number: 19) == \"xix\")\nassert(int_to_mini_roman(number:\
    \ 152) == \"clii\")\nassert(int_to_mini_roman(number: 251) == \"ccli\")\nassert(int_to_mini_roman(number:\
    \ 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number: 500) == \"d\")\nassert(int_to_mini_roman(number:\
    \ 1) == \"i\")\nassert(int_to_mini_roman(number: 4) == \"iv\")\nassert(int_to_mini_roman(number:\
    \ 43) == \"xliii\")\nassert(int_to_mini_roman(number: 90) == \"xc\")\nassert(int_to_mini_roman(number:\
    \ 94) == \"xciv\")\nassert(int_to_mini_roman(number: 532) == \"dxxxii\")\nassert(int_to_mini_roman(number:\
    \ 900) == \"cm\")\nassert(int_to_mini_roman(number: 994) == \"cmxciv\")\nassert(int_to_mini_roman(number:\
    \ 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    var result = \"\"\n    var\
    \ num = number\n    while num > 0 {\n        if num >= 1000 {\n            result\
    \ += \"m\"\n            num -= 1000\n        } else if num >= 900 {\n        \
    \    result += \"cm\"\n            num -= 900\n        } else if num >= 500 {\n\
    \            result += \"d\"\n            num -= 500\n        } else if num >=\
    \ 400 {\n            result += \"cd\"\n            num -= 400\n        } else\
    \ if num >= 100 {\n            result += \"c\"\n            num -= 100\n     \
    \   } else if num >= 90 {\n            result += \"xc\"\n            num -= 90\n\
    \        } else if num >= 50 {\n            result += \"l\"\n            num -=\
    \ 50\n        } else if num >= 40 {\n            result += \"xl\"\n          \
    \  num -= 40\n        } else if num >= 10 {\n            result += \"x\"\n   \
    \         num -= 10\n        } else if num >= 9 {\n            result += \"ix\"\
    \n            num -= 9\n        } else if num >= 5 {\n            result += \"\
    v\"\n            num -= 5\n        } else if num >= 4 {\n            result +=\
    \ \"iv\"\n            num -= 4\n        } else if num >= 1 {\n            result\
    \ += \"i\"\n            num -= 1\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(int_to_mini_roman(number: 19) == \"xix\")\nassert(int_to_mini_roman(number:\
    \ 152) == \"clii\")\nassert(int_to_mini_roman(number: 251) == \"ccli\")\nassert(int_to_mini_roman(number:\
    \ 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number: 500) == \"d\")\nassert(int_to_mini_roman(number:\
    \ 1) == \"i\")\nassert(int_to_mini_roman(number: 4) == \"iv\")\nassert(int_to_mini_roman(number:\
    \ 43) == \"xliii\")\nassert(int_to_mini_roman(number: 90) == \"xc\")\nassert(int_to_mini_roman(number:\
    \ 94) == \"xciv\")\nassert(int_to_mini_roman(number: 532) == \"dxxxii\")\nassert(int_to_mini_roman(number:\
    \ 900) == \"cm\")\nassert(int_to_mini_roman(number: 994) == \"cmxciv\")\nassert(int_to_mini_roman(number:\
    \ 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    var result = \"\"\n    var\
    \ num = number\n    while num > 0 {\n        if num >= 1000 {\n            result\
    \ += \"m\"\n            num -= 1000\n        } else if num >= 900 {\n        \
    \    result += \"cm\"\n            num -= 900\n        } else if num >= 500 {\n\
    \            result += \"d\"\n            num -= 500\n        } else if num >=\
    \ 400 {\n            result += \"cd\"\n            num -= 400\n        } else\
    \ if num >= 100 {\n            result += \"c\"\n            num -= 100\n     \
    \   } else if num >= 90 {\n            result += \"xc\"\n            num -= 90\n\
    \        } else if num >= 50 {\n            result += \"l\"\n            num -=\
    \ 50\n        } else if num >= 40 {\n            result += \"xl\"\n          \
    \  num -= 40\n        } else if num >= 10 {\n            result += \"x\"\n   \
    \         num -= 10\n        } else if num >= 9 {\n            result += \"ix\"\
    \n            num -= 9\n        } else if num >= 5 {\n            result += \"\
    v\"\n            num -= 5\n        } else if num >= 4 {\n            result +=\
    \ \"iv\"\n            num -= 4\n        } else if num >= 1 {\n            result\
    \ += \"i\"\n            num -= 1\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(int_to_mini_roman(number: 19) == \"xix\")\nassert(int_to_mini_roman(number:\
    \ 152) == \"clii\")\nassert(int_to_mini_roman(number: 251) == \"ccli\")\nassert(int_to_mini_roman(number:\
    \ 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number: 500) == \"d\")\nassert(int_to_mini_roman(number:\
    \ 1) == \"i\")\nassert(int_to_mini_roman(number: 4) == \"iv\")\nassert(int_to_mini_roman(number:\
    \ 43) == \"xliii\")\nassert(int_to_mini_roman(number: 90) == \"xc\")\nassert(int_to_mini_roman(number:\
    \ 94) == \"xciv\")\nassert(int_to_mini_roman(number: 532) == \"dxxxii\")\nassert(int_to_mini_roman(number:\
    \ 900) == \"cm\")\nassert(int_to_mini_roman(number: 994) == \"cmxciv\")\nassert(int_to_mini_roman(number:\
    \ 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    var result = \"\"\n    var\
    \ num = number\n    while num > 0 {\n        if num >= 1000 {\n            result\
    \ += \"m\"\n            num -= 1000\n        } else if num >= 900 {\n        \
    \    result += \"cm\"\n            num -= 900\n        } else if num >= 500 {\n\
    \            result += \"d\"\n            num -= 500\n        } else if num >=\
    \ 400 {\n            result += \"cd\"\n            num -= 400\n        } else\
    \ if num >= 100 {\n            result += \"c\"\n            num -= 100\n     \
    \   } else if num >= 90 {\n            result += \"xc\"\n            num -= 90\n\
    \        } else if num >= 50 {\n            result += \"l\"\n            num -=\
    \ 50\n        } else if num >= 40 {\n            result += \"xl\"\n          \
    \  num -= 40\n        } else if num >= 10 {\n            result += \"x\"\n   \
    \         num -= 10\n        } else if num >= 9 {\n            result += \"ix\"\
    \n            num -= 9\n        } else if num >= 5 {\n            result += \"\
    v\"\n            num -= 5\n        } else if num >= 4 {\n            result +=\
    \ \"iv\"\n            num -= 4\n        } else if num >= 1 {\n            result\
    \ += \"i\"\n            num -= 1\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(int_to_mini_roman(number: 19) == \"xix\")\nassert(int_to_mini_roman(number:\
    \ 152) == \"clii\")\nassert(int_to_mini_roman(number: 251) == \"ccli\")\nassert(int_to_mini_roman(number:\
    \ 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number: 500) == \"d\")\nassert(int_to_mini_roman(number:\
    \ 1) == \"i\")\nassert(int_to_mini_roman(number: 4) == \"iv\")\nassert(int_to_mini_roman(number:\
    \ 43) == \"xliii\")\nassert(int_to_mini_roman(number: 90) == \"xc\")\nassert(int_to_mini_roman(number:\
    \ 94) == \"xciv\")\nassert(int_to_mini_roman(number: 532) == \"dxxxii\")\nassert(int_to_mini_roman(number:\
    \ 900) == \"cm\")\nassert(int_to_mini_roman(number: 994) == \"cmxciv\")\nassert(int_to_mini_roman(number:\
    \ 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    var result = \"\"\n    var\
    \ num = number\n    while num > 0 {\n        if num >= 1000 {\n            result\
    \ += \"m\"\n            num -= 1000\n        } else if num >= 900 {\n        \
    \    result += \"cm\"\n            num -= 900\n        } else if num >= 500 {\n\
    \            result += \"d\"\n            num -= 500\n        } else if num >=\
    \ 400 {\n            result += \"cd\"\n            num -= 400\n        } else\
    \ if num >= 100 {\n            result += \"c\"\n            num -= 100\n     \
    \   } else if num >= 90 {\n            result += \"xc\"\n            num -= 90\n\
    \        } else if num >= 50 {\n            result += \"l\"\n            num -=\
    \ 50\n        } else if num >= 40 {\n            result += \"xl\"\n          \
    \  num -= 40\n        } else if num >= 10 {\n            result += \"x\"\n   \
    \         num -= 10\n        } else if num >= 9 {\n            result += \"ix\"\
    \n            num -= 9\n        } else if num >= 5 {\n            result += \"\
    v\"\n            num -= 5\n        } else if num >= 4 {\n            result +=\
    \ \"iv\"\n            num -= 4\n        } else if num >= 1 {\n            result\
    \ += \"i\"\n            num -= 1\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(int_to_mini_roman(number: 19) == \"xix\")\nassert(int_to_mini_roman(number:\
    \ 152) == \"clii\")\nassert(int_to_mini_roman(number: 251) == \"ccli\")\nassert(int_to_mini_roman(number:\
    \ 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number: 500) == \"d\")\nassert(int_to_mini_roman(number:\
    \ 1) == \"i\")\nassert(int_to_mini_roman(number: 4) == \"iv\")\nassert(int_to_mini_roman(number:\
    \ 43) == \"xliii\")\nassert(int_to_mini_roman(number: 90) == \"xc\")\nassert(int_to_mini_roman(number:\
    \ 94) == \"xciv\")\nassert(int_to_mini_roman(number: 532) == \"dxxxii\")\nassert(int_to_mini_roman(number:\
    \ 900) == \"cm\")\nassert(int_to_mini_roman(number: 994) == \"cmxciv\")\nassert(int_to_mini_roman(number:\
    \ 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    let roman_numerals = [\"\
    m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\"\
    , \"iv\", \"i\"]\n    let decimal_numbers = [1000, 900, 500, 400, 100, 90, 50,\
    \ 40, 10, 9, 5, 4, 1]\n    var result = \"\"\n    var number = number\n    for\
    \ i in 0..<roman_numerals.count {\n        while number >= decimal_numbers[i]\
    \ {\n            result += roman_numerals[i]\n            number -= decimal_numbers[i]\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(int_to_mini_roman(number: 19) == \"xix\")\nassert(int_to_mini_roman(number:\
    \ 152) == \"clii\")\nassert(int_to_mini_roman(number: 251) == \"ccli\")\nassert(int_to_mini_roman(number:\
    \ 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number: 500) == \"d\")\nassert(int_to_mini_roman(number:\
    \ 1) == \"i\")\nassert(int_to_mini_roman(number: 4) == \"iv\")\nassert(int_to_mini_roman(number:\
    \ 43) == \"xliii\")\nassert(int_to_mini_roman(number: 90) == \"xc\")\nassert(int_to_mini_roman(number:\
    \ 94) == \"xciv\")\nassert(int_to_mini_roman(number: 532) == \"dxxxii\")\nassert(int_to_mini_roman(number:\
    \ 900) == \"cm\")\nassert(int_to_mini_roman(number: 994) == \"cmxciv\")\nassert(int_to_mini_roman(number:\
    \ 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    var result = \"\"\n    var\
    \ num = number\n    while num > 0 {\n        if num >= 1000 {\n            result\
    \ += \"m\"\n            num -= 1000\n        } else if num >= 900 {\n        \
    \    result += \"cm\"\n            num -= 900\n        } else if num >= 500 {\n\
    \            result += \"d\"\n            num -= 500\n        } else if num >=\
    \ 400 {\n            result += \"cd\"\n            num -= 400\n        } else\
    \ if num >= 100 {\n            result += \"c\"\n            num -= 100\n     \
    \   } else if num >= 90 {\n            result += \"xc\"\n            num -= 90\n\
    \        } else if num >= 50 {\n            result += \"l\"\n            num -=\
    \ 50\n        } else if num >= 40 {\n            result += \"xl\"\n          \
    \  num -= 40\n        } else if num >= 10 {\n            result += \"x\"\n   \
    \         num -= 10\n        } else if num >= 9 {\n            result += \"ix\"\
    \n            num -= 9\n        } else if num >= 5 {\n            result += \"\
    v\"\n            num -= 5\n        } else if num >= 4 {\n            result +=\
    \ \"iv\"\n            num -= 4\n        } else if num >= 1 {\n            result\
    \ += \"i\"\n            num -= 1\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(int_to_mini_roman(number: 19) == \"xix\")\nassert(int_to_mini_roman(number:\
    \ 152) == \"clii\")\nassert(int_to_mini_roman(number: 251) == \"ccli\")\nassert(int_to_mini_roman(number:\
    \ 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number: 500) == \"d\")\nassert(int_to_mini_roman(number:\
    \ 1) == \"i\")\nassert(int_to_mini_roman(number: 4) == \"iv\")\nassert(int_to_mini_roman(number:\
    \ 43) == \"xliii\")\nassert(int_to_mini_roman(number: 90) == \"xc\")\nassert(int_to_mini_roman(number:\
    \ 94) == \"xciv\")\nassert(int_to_mini_roman(number: 532) == \"dxxxii\")\nassert(int_to_mini_roman(number:\
    \ 900) == \"cm\")\nassert(int_to_mini_roman(number: 994) == \"cmxciv\")\nassert(int_to_mini_roman(number:\
    \ 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    var result = \"\"\n    var\
    \ num = number\n    while num > 0 {\n        if num >= 1000 {\n            result\
    \ += \"m\"\n            num -= 1000\n        } else if num >= 900 {\n        \
    \    result += \"cm\"\n            num -= 900\n        } else if num >= 500 {\n\
    \            result += \"d\"\n            num -= 500\n        } else if num >=\
    \ 400 {\n            result += \"cd\"\n            num -= 400\n        } else\
    \ if num >= 100 {\n            result += \"c\"\n            num -= 100\n     \
    \   } else if num >= 90 {\n            result += \"xc\"\n            num -= 90\n\
    \        } else if num >= 50 {\n            result += \"l\"\n            num -=\
    \ 50\n        } else if num >= 40 {\n            result += \"xl\"\n          \
    \  num -= 40\n        } else if num >= 10 {\n            result += \"x\"\n   \
    \         num -= 10\n        } else if num >= 9 {\n            result += \"ix\"\
    \n            num -= 9\n        } else if num >= 5 {\n            result += \"\
    v\"\n            num -= 5\n        } else if num >= 4 {\n            result +=\
    \ \"iv\"\n            num -= 4\n        } else if num >= 1 {\n            result\
    \ += \"i\"\n            num -= 1\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(int_to_mini_roman(number: 19) == \"xix\")\nassert(int_to_mini_roman(number:\
    \ 152) == \"clii\")\nassert(int_to_mini_roman(number: 251) == \"ccli\")\nassert(int_to_mini_roman(number:\
    \ 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number: 500) == \"d\")\nassert(int_to_mini_roman(number:\
    \ 1) == \"i\")\nassert(int_to_mini_roman(number: 4) == \"iv\")\nassert(int_to_mini_roman(number:\
    \ 43) == \"xliii\")\nassert(int_to_mini_roman(number: 90) == \"xc\")\nassert(int_to_mini_roman(number:\
    \ 94) == \"xciv\")\nassert(int_to_mini_roman(number: 532) == \"dxxxii\")\nassert(int_to_mini_roman(number:\
    \ 900) == \"cm\")\nassert(int_to_mini_roman(number: 994) == \"cmxciv\")\nassert(int_to_mini_roman(number:\
    \ 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    var result = \"\"\n    var\
    \ num = number\n    while num >= 1000 {\n        result += \"m\"\n        num\
    \ -= 1000\n    }\n    while num >= 900 {\n        result += \"cm\"\n        num\
    \ -= 900\n    }\n    while num >= 500 {\n        result += \"d\"\n        num\
    \ -= 500\n    }\n    while num >= 400 {\n        result += \"cd\"\n        num\
    \ -= 400\n    }\n    while num >= 100 {\n        result += \"c\"\n        num\
    \ -= 100\n    }\n    while num >= 90 {\n        result += \"xc\"\n        num\
    \ -= 90\n    }\n    while num >= 50 {\n        result += \"l\"\n        num -=\
    \ 50\n    }\n    while num >= 40 {\n        result += \"xl\"\n        num -= 40\n\
    \    }\n    while num >= 10 {\n        result += \"x\"\n        num -= 10\n  \
    \  }\n    while num >= 9 {\n        result += \"ix\"\n        num -= 9\n    }\n\
    \    while num >= 5 {\n        result += \"v\"\n        num -= 5\n    }\n    while\
    \ num >= 4 {\n        result += \"iv\"\n        num -= 4\n    }\n    while num\
    \ >= 1 {\n        result += \"i\"\n        num -= 1\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(int_to_mini_roman(number: 19) == \"xix\")\nassert(int_to_mini_roman(number:\
    \ 152) == \"clii\")\nassert(int_to_mini_roman(number: 251) == \"ccli\")\nassert(int_to_mini_roman(number:\
    \ 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number: 500) == \"d\")\nassert(int_to_mini_roman(number:\
    \ 1) == \"i\")\nassert(int_to_mini_roman(number: 4) == \"iv\")\nassert(int_to_mini_roman(number:\
    \ 43) == \"xliii\")\nassert(int_to_mini_roman(number: 90) == \"xc\")\nassert(int_to_mini_roman(number:\
    \ 94) == \"xciv\")\nassert(int_to_mini_roman(number: 532) == \"dxxxii\")\nassert(int_to_mini_roman(number:\
    \ 900) == \"cm\")\nassert(int_to_mini_roman(number: 994) == \"cmxciv\")\nassert(int_to_mini_roman(number:\
    \ 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    var num = number\n    var\
    \ result = \"\"\n    while num > 0 {\n        if num >= 1000 {\n            result\
    \ += \"m\"\n            num -= 1000\n        } else if num >= 900 {\n        \
    \    result += \"cm\"\n            num -= 900\n        } else if num >= 500 {\n\
    \            result += \"d\"\n            num -= 500\n        } else if num >=\
    \ 400 {\n            result += \"cd\"\n            num -= 400\n        } else\
    \ if num >= 100 {\n            result += \"c\"\n            num -= 100\n     \
    \   } else if num >= 90 {\n            result += \"xc\"\n            num -= 90\n\
    \        } else if num >= 50 {\n            result += \"l\"\n            num -=\
    \ 50\n        } else if num >= 40 {\n            result += \"xl\"\n          \
    \  num -= 40\n        } else if num >= 10 {\n            result += \"x\"\n   \
    \         num -= 10\n        } else if num >= 9 {\n            result += \"ix\"\
    \n            num -= 9\n        } else if num >= 5 {\n            result += \"\
    v\"\n            num -= 5\n        } else if num >= 4 {\n            result +=\
    \ \"iv\"\n            num -= 4\n        } else if num >= 1 {\n            result\
    \ += \"i\"\n            num -= 1\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(int_to_mini_roman(number: 19) == \"xix\")\nassert(int_to_mini_roman(number:\
    \ 152) == \"clii\")\nassert(int_to_mini_roman(number: 251) == \"ccli\")\nassert(int_to_mini_roman(number:\
    \ 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number: 500) == \"d\")\nassert(int_to_mini_roman(number:\
    \ 1) == \"i\")\nassert(int_to_mini_roman(number: 4) == \"iv\")\nassert(int_to_mini_roman(number:\
    \ 43) == \"xliii\")\nassert(int_to_mini_roman(number: 90) == \"xc\")\nassert(int_to_mini_roman(number:\
    \ 94) == \"xciv\")\nassert(int_to_mini_roman(number: 532) == \"dxxxii\")\nassert(int_to_mini_roman(number:\
    \ 900) == \"cm\")\nassert(int_to_mini_roman(number: 994) == \"cmxciv\")\nassert(int_to_mini_roman(number:\
    \ 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    var result = \"\"\n    var\
    \ num = number\n    while num > 0 {\n        if num >= 1000 {\n            result\
    \ += \"m\"\n            num -= 1000\n        } else if num >= 900 {\n        \
    \    result += \"cm\"\n            num -= 900\n        } else if num >= 500 {\n\
    \            result += \"d\"\n            num -= 500\n        } else if num >=\
    \ 400 {\n            result += \"cd\"\n            num -= 400\n        } else\
    \ if num >= 100 {\n            result += \"c\"\n            num -= 100\n     \
    \   } else if num >= 90 {\n            result += \"xc\"\n            num -= 90\n\
    \        } else if num >= 50 {\n            result += \"l\"\n            num -=\
    \ 50\n        } else if num >= 40 {\n            result += \"xl\"\n          \
    \  num -= 40\n        } else if num >= 10 {\n            result += \"x\"\n   \
    \         num -= 10\n        } else if num >= 9 {\n            result += \"ix\"\
    \n            num -= 9\n        } else if num >= 5 {\n            result += \"\
    v\"\n            num -= 5\n        } else if num >= 4 {\n            result +=\
    \ \"iv\"\n            num -= 4\n        } else if num >= 1 {\n            result\
    \ += \"i\"\n            num -= 1\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(int_to_mini_roman(number: 19) == \"xix\")\nassert(int_to_mini_roman(number:\
    \ 152) == \"clii\")\nassert(int_to_mini_roman(number: 251) == \"ccli\")\nassert(int_to_mini_roman(number:\
    \ 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number: 500) == \"d\")\nassert(int_to_mini_roman(number:\
    \ 1) == \"i\")\nassert(int_to_mini_roman(number: 4) == \"iv\")\nassert(int_to_mini_roman(number:\
    \ 43) == \"xliii\")\nassert(int_to_mini_roman(number: 90) == \"xc\")\nassert(int_to_mini_roman(number:\
    \ 94) == \"xciv\")\nassert(int_to_mini_roman(number: 532) == \"dxxxii\")\nassert(int_to_mini_roman(number:\
    \ 900) == \"cm\")\nassert(int_to_mini_roman(number: 994) == \"cmxciv\")\nassert(int_to_mini_roman(number:\
    \ 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    let roman_numerals = [\"\
    m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\"\
    , \"iv\", \"i\"]\n    let arabic_numerals = [1000, 900, 500, 400, 100, 90, 50,\
    \ 40, 10, 9, 5, 4, 1]\n    var roman_value = \"\"\n    var arabic_value = number\n\
    \    \n    for (index, roman_numeral) in roman_numerals.enumerated() {\n     \
    \   let arabic_numeral = arabic_numerals[index]\n        let div = arabic_value\
    \ / arabic_numeral\n        \n        if div > 0 {\n            for _ in 0..<div\
    \ {\n                roman_value += roman_numeral\n            }\n           \
    \ arabic_value -= arabic_numeral * div\n        }\n    }\n    return roman_value\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(int_to_mini_roman(number: 19) == \"xix\")\nassert(int_to_mini_roman(number:\
    \ 152) == \"clii\")\nassert(int_to_mini_roman(number: 251) == \"ccli\")\nassert(int_to_mini_roman(number:\
    \ 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number: 500) == \"d\")\nassert(int_to_mini_roman(number:\
    \ 1) == \"i\")\nassert(int_to_mini_roman(number: 4) == \"iv\")\nassert(int_to_mini_roman(number:\
    \ 43) == \"xliii\")\nassert(int_to_mini_roman(number: 90) == \"xc\")\nassert(int_to_mini_roman(number:\
    \ 94) == \"xciv\")\nassert(int_to_mini_roman(number: 532) == \"dxxxii\")\nassert(int_to_mini_roman(number:\
    \ 900) == \"cm\")\nassert(int_to_mini_roman(number: 994) == \"cmxciv\")\nassert(int_to_mini_roman(number:\
    \ 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    var result = \"\"\n    var\
    \ num = number\n    let roman_numerals = [\"m\", \"cm\", \"d\", \"cd\", \"c\"\
    , \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"]\n    let values\
    \ = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]\n    for i in 0..<roman_numerals.count\
    \ {\n        while num >= values[i] {\n            result += roman_numerals[i]\n\
    \            num -= values[i]\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(int_to_mini_roman(number: 19) == \"xix\")\nassert(int_to_mini_roman(number:\
    \ 152) == \"clii\")\nassert(int_to_mini_roman(number: 251) == \"ccli\")\nassert(int_to_mini_roman(number:\
    \ 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number: 500) == \"d\")\nassert(int_to_mini_roman(number:\
    \ 1) == \"i\")\nassert(int_to_mini_roman(number: 4) == \"iv\")\nassert(int_to_mini_roman(number:\
    \ 43) == \"xliii\")\nassert(int_to_mini_roman(number: 90) == \"xc\")\nassert(int_to_mini_roman(number:\
    \ 94) == \"xciv\")\nassert(int_to_mini_roman(number: 532) == \"dxxxii\")\nassert(int_to_mini_roman(number:\
    \ 900) == \"cm\")\nassert(int_to_mini_roman(number: 994) == \"cmxciv\")\nassert(int_to_mini_roman(number:\
    \ 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    var result = \"\"\n    var\
    \ num = number\n    while num > 0 {\n        if num >= 1000 {\n            result\
    \ += \"m\"\n            num -= 1000\n        } else if num >= 900 {\n        \
    \    result += \"cm\"\n            num -= 900\n        } else if num >= 500 {\n\
    \            result += \"d\"\n            num -= 500\n        } else if num >=\
    \ 400 {\n            result += \"cd\"\n            num -= 400\n        } else\
    \ if num >= 100 {\n            result += \"c\"\n            num -= 100\n     \
    \   } else if num >= 90 {\n            result += \"xc\"\n            num -= 90\n\
    \        } else if num >= 50 {\n            result += \"l\"\n            num -=\
    \ 50\n        } else if num >= 40 {\n            result += \"xl\"\n          \
    \  num -= 40\n        } else if num >= 10 {\n            result += \"x\"\n   \
    \         num -= 10\n        } else if num >= 9 {\n            result += \"ix\"\
    \n            num -= 9\n        } else if num >= 5 {\n            result += \"\
    v\"\n            num -= 5\n        } else if num >= 4 {\n            result +=\
    \ \"iv\"\n            num -= 4\n        } else if num >= 1 {\n            result\
    \ += \"i\"\n            num -= 1\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(int_to_mini_roman(number: 19) == \"xix\")\nassert(int_to_mini_roman(number:\
    \ 152) == \"clii\")\nassert(int_to_mini_roman(number: 251) == \"ccli\")\nassert(int_to_mini_roman(number:\
    \ 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number: 500) == \"d\")\nassert(int_to_mini_roman(number:\
    \ 1) == \"i\")\nassert(int_to_mini_roman(number: 4) == \"iv\")\nassert(int_to_mini_roman(number:\
    \ 43) == \"xliii\")\nassert(int_to_mini_roman(number: 90) == \"xc\")\nassert(int_to_mini_roman(number:\
    \ 94) == \"xciv\")\nassert(int_to_mini_roman(number: 532) == \"dxxxii\")\nassert(int_to_mini_roman(number:\
    \ 900) == \"cm\")\nassert(int_to_mini_roman(number: 994) == \"cmxciv\")\nassert(int_to_mini_roman(number:\
    \ 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    var result = \"\"\n    var\
    \ num = number\n    while num > 0 {\n        if num >= 1000 {\n            result\
    \ += \"m\"\n            num -= 1000\n        } else if num >= 900 {\n        \
    \    result += \"cm\"\n            num -= 900\n        } else if num >= 500 {\n\
    \            result += \"d\"\n            num -= 500\n        } else if num >=\
    \ 400 {\n            result += \"cd\"\n            num -= 400\n        } else\
    \ if num >= 100 {\n            result += \"c\"\n            num -= 100\n     \
    \   } else if num >= 90 {\n            result += \"xc\"\n            num -= 90\n\
    \        } else if num >= 50 {\n            result += \"l\"\n            num -=\
    \ 50\n        } else if num >= 40 {\n            result += \"xl\"\n          \
    \  num -= 40\n        } else if num >= 10 {\n            result += \"x\"\n   \
    \         num -= 10\n        } else if num >= 9 {\n            result += \"ix\"\
    \n            num -= 9\n        } else if num >= 5 {\n            result += \"\
    v\"\n            num -= 5\n        } else if num >= 4 {\n            result +=\
    \ \"iv\"\n            num -= 4\n        } else if num >= 1 {\n            result\
    \ += \"i\"\n            num -= 1\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(int_to_mini_roman(number: 19) == \"xix\")\nassert(int_to_mini_roman(number:\
    \ 152) == \"clii\")\nassert(int_to_mini_roman(number: 251) == \"ccli\")\nassert(int_to_mini_roman(number:\
    \ 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number: 500) == \"d\")\nassert(int_to_mini_roman(number:\
    \ 1) == \"i\")\nassert(int_to_mini_roman(number: 4) == \"iv\")\nassert(int_to_mini_roman(number:\
    \ 43) == \"xliii\")\nassert(int_to_mini_roman(number: 90) == \"xc\")\nassert(int_to_mini_roman(number:\
    \ 94) == \"xciv\")\nassert(int_to_mini_roman(number: 532) == \"dxxxii\")\nassert(int_to_mini_roman(number:\
    \ 900) == \"cm\")\nassert(int_to_mini_roman(number: 994) == \"cmxciv\")\nassert(int_to_mini_roman(number:\
    \ 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    var result = \"\"\n    var\
    \ num = number\n    let numerals = [\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\"\
    , \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"]\n    let values = [1000,\
    \ 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]\n    for (index, value) in values.enumerated()\
    \ {\n        while num >= value {\n            result += numerals[index]\n   \
    \         num -= value\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(int_to_mini_roman(number: 19) == \"xix\")\nassert(int_to_mini_roman(number:\
    \ 152) == \"clii\")\nassert(int_to_mini_roman(number: 251) == \"ccli\")\nassert(int_to_mini_roman(number:\
    \ 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number: 500) == \"d\")\nassert(int_to_mini_roman(number:\
    \ 1) == \"i\")\nassert(int_to_mini_roman(number: 4) == \"iv\")\nassert(int_to_mini_roman(number:\
    \ 43) == \"xliii\")\nassert(int_to_mini_roman(number: 90) == \"xc\")\nassert(int_to_mini_roman(number:\
    \ 94) == \"xciv\")\nassert(int_to_mini_roman(number: 532) == \"dxxxii\")\nassert(int_to_mini_roman(number:\
    \ 900) == \"cm\")\nassert(int_to_mini_roman(number: 994) == \"cmxciv\")\nassert(int_to_mini_roman(number:\
    \ 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    var result = \"\"\n    var\
    \ num = number\n    while num > 0 {\n        if num >= 1000 {\n            result\
    \ += \"m\"\n            num -= 1000\n        } else if num >= 900 {\n        \
    \    result += \"cm\"\n            num -= 900\n        } else if num >= 500 {\n\
    \            result += \"d\"\n            num -= 500\n        } else if num >=\
    \ 400 {\n            result += \"cd\"\n            num -= 400\n        } else\
    \ if num >= 100 {\n            result += \"c\"\n            num -= 100\n     \
    \   } else if num >= 90 {\n            result += \"xc\"\n            num -= 90\n\
    \        } else if num >= 50 {\n            result += \"l\"\n            num -=\
    \ 50\n        } else if num >= 40 {\n            result += \"xl\"\n          \
    \  num -= 40\n        } else if num >= 10 {\n            result += \"x\"\n   \
    \         num -= 10\n        } else if num >= 9 {\n            result += \"ix\"\
    \n            num -= 9\n        } else if num >= 5 {\n            result += \"\
    v\"\n            num -= 5\n        } else if num >= 4 {\n            result +=\
    \ \"iv\"\n            num -= 4\n        } else if num >= 1 {\n            result\
    \ += \"i\"\n            num -= 1\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(int_to_mini_roman(number: 19) == \"xix\")\nassert(int_to_mini_roman(number:\
    \ 152) == \"clii\")\nassert(int_to_mini_roman(number: 251) == \"ccli\")\nassert(int_to_mini_roman(number:\
    \ 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number: 500) == \"d\")\nassert(int_to_mini_roman(number:\
    \ 1) == \"i\")\nassert(int_to_mini_roman(number: 4) == \"iv\")\nassert(int_to_mini_roman(number:\
    \ 43) == \"xliii\")\nassert(int_to_mini_roman(number: 90) == \"xc\")\nassert(int_to_mini_roman(number:\
    \ 94) == \"xciv\")\nassert(int_to_mini_roman(number: 532) == \"dxxxii\")\nassert(int_to_mini_roman(number:\
    \ 900) == \"cm\")\nassert(int_to_mini_roman(number: 994) == \"cmxciv\")\nassert(int_to_mini_roman(number:\
    \ 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    var result = \"\"\n    var\
    \ num = number\n    while num >= 1000 {\n        result += \"m\"\n        num\
    \ -= 1000\n    }\n    while num >= 900 {\n        result += \"cm\"\n        num\
    \ -= 900\n    }\n    while num >= 500 {\n        result += \"d\"\n        num\
    \ -= 500\n    }\n    while num >= 400 {\n        result += \"cd\"\n        num\
    \ -= 400\n    }\n    while num >= 100 {\n        result += \"c\"\n        num\
    \ -= 100\n    }\n    while num >= 90 {\n        result += \"xc\"\n        num\
    \ -= 90\n    }\n    while num >= 50 {\n        result += \"l\"\n        num -=\
    \ 50\n    }\n    while num >= 40 {\n        result += \"xl\"\n        num -= 40\n\
    \    }\n    while num >= 10 {\n        result += \"x\"\n        num -= 10\n  \
    \  }\n    while num >= 9 {\n        result += \"ix\"\n        num -= 9\n    }\n\
    \    while num >= 5 {\n        result += \"v\"\n        num -= 5\n    }\n    while\
    \ num >= 4 {\n        result += \"iv\"\n        num -= 4\n    }\n    while num\
    \ >= 1 {\n        result += \"i\"\n        num -= 1\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(int_to_mini_roman(number: 19) == \"xix\")\nassert(int_to_mini_roman(number:\
    \ 152) == \"clii\")\nassert(int_to_mini_roman(number: 251) == \"ccli\")\nassert(int_to_mini_roman(number:\
    \ 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number: 500) == \"d\")\nassert(int_to_mini_roman(number:\
    \ 1) == \"i\")\nassert(int_to_mini_roman(number: 4) == \"iv\")\nassert(int_to_mini_roman(number:\
    \ 43) == \"xliii\")\nassert(int_to_mini_roman(number: 90) == \"xc\")\nassert(int_to_mini_roman(number:\
    \ 94) == \"xciv\")\nassert(int_to_mini_roman(number: 532) == \"dxxxii\")\nassert(int_to_mini_roman(number:\
    \ 900) == \"cm\")\nassert(int_to_mini_roman(number: 994) == \"cmxciv\")\nassert(int_to_mini_roman(number:\
    \ 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    var result = \"\"\n    var\
    \ num = number\n    while num > 0 {\n        if num >= 1000 {\n            result\
    \ += \"m\"\n            num -= 1000\n        } else if num >= 900 {\n        \
    \    result += \"cm\"\n            num -= 900\n        } else if num >= 500 {\n\
    \            result += \"d\"\n            num -= 500\n        } else if num >=\
    \ 400 {\n            result += \"cd\"\n            num -= 400\n        } else\
    \ if num >= 100 {\n            result += \"c\"\n            num -= 100\n     \
    \   } else if num >= 90 {\n            result += \"xc\"\n            num -= 90\n\
    \        } else if num >= 50 {\n            result += \"l\"\n            num -=\
    \ 50\n        } else if num >= 40 {\n            result += \"xl\"\n          \
    \  num -= 40\n        } else if num >= 10 {\n            result += \"x\"\n   \
    \         num -= 10\n        } else if num >= 9 {\n            result += \"ix\"\
    \n            num -= 9\n        } else if num >= 5 {\n            result += \"\
    v\"\n            num -= 5\n        } else if num >= 4 {\n            result +=\
    \ \"iv\"\n            num -= 4\n        } else if num >= 1 {\n            result\
    \ += \"i\"\n            num -= 1\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(int_to_mini_roman(number: 19) == \"xix\")\nassert(int_to_mini_roman(number:\
    \ 152) == \"clii\")\nassert(int_to_mini_roman(number: 251) == \"ccli\")\nassert(int_to_mini_roman(number:\
    \ 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number: 500) == \"d\")\nassert(int_to_mini_roman(number:\
    \ 1) == \"i\")\nassert(int_to_mini_roman(number: 4) == \"iv\")\nassert(int_to_mini_roman(number:\
    \ 43) == \"xliii\")\nassert(int_to_mini_roman(number: 90) == \"xc\")\nassert(int_to_mini_roman(number:\
    \ 94) == \"xciv\")\nassert(int_to_mini_roman(number: 532) == \"dxxxii\")\nassert(int_to_mini_roman(number:\
    \ 900) == \"cm\")\nassert(int_to_mini_roman(number: 994) == \"cmxciv\")\nassert(int_to_mini_roman(number:\
    \ 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    var result = \"\"\n    var\
    \ num = number\n    while num > 0 {\n        if num >= 1000 {\n            result\
    \ += \"m\"\n            num -= 1000\n        } else if num >= 900 {\n        \
    \    result += \"cm\"\n            num -= 900\n        } else if num >= 500 {\n\
    \            result += \"d\"\n            num -= 500\n        } else if num >=\
    \ 400 {\n            result += \"cd\"\n            num -= 400\n        } else\
    \ if num >= 100 {\n            result += \"c\"\n            num -= 100\n     \
    \   } else if num >= 90 {\n            result += \"xc\"\n            num -= 90\n\
    \        } else if num >= 50 {\n            result += \"l\"\n            num -=\
    \ 50\n        } else if num >= 40 {\n            result += \"xl\"\n          \
    \  num -= 40\n        } else if num >= 10 {\n            result += \"x\"\n   \
    \         num -= 10\n        } else if num >= 9 {\n            result += \"ix\"\
    \n            num -= 9\n        } else if num >= 5 {\n            result += \"\
    v\"\n            num -= 5\n        } else if num >= 4 {\n            result +=\
    \ \"iv\"\n            num -= 4\n        } else if num >= 1 {\n            result\
    \ += \"i\"\n            num -= 1\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(int_to_mini_roman(number: 19) == \"xix\")\nassert(int_to_mini_roman(number:\
    \ 152) == \"clii\")\nassert(int_to_mini_roman(number: 251) == \"ccli\")\nassert(int_to_mini_roman(number:\
    \ 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number: 500) == \"d\")\nassert(int_to_mini_roman(number:\
    \ 1) == \"i\")\nassert(int_to_mini_roman(number: 4) == \"iv\")\nassert(int_to_mini_roman(number:\
    \ 43) == \"xliii\")\nassert(int_to_mini_roman(number: 90) == \"xc\")\nassert(int_to_mini_roman(number:\
    \ 94) == \"xciv\")\nassert(int_to_mini_roman(number: 532) == \"dxxxii\")\nassert(int_to_mini_roman(number:\
    \ 900) == \"cm\")\nassert(int_to_mini_roman(number: 994) == \"cmxciv\")\nassert(int_to_mini_roman(number:\
    \ 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    var roman = \"\"\n    var\
    \ num = number\n    while num > 0 {\n        if num >= 1000 {\n            roman\
    \ += \"m\"\n            num -= 1000\n        } else if num >= 900 {\n        \
    \    roman += \"cm\"\n            num -= 900\n        } else if num >= 500 {\n\
    \            roman += \"d\"\n            num -= 500\n        } else if num >=\
    \ 400 {\n            roman += \"cd\"\n            num -= 400\n        } else if\
    \ num >= 100 {\n            roman += \"c\"\n            num -= 100\n        }\
    \ else if num >= 90 {\n            roman += \"xc\"\n            num -= 90\n  \
    \      } else if num >= 50 {\n            roman += \"l\"\n            num -= 50\n\
    \        } else if num >= 40 {\n            roman += \"xl\"\n            num -=\
    \ 40\n        } else if num >= 10 {\n            roman += \"x\"\n            num\
    \ -= 10\n        } else if num >= 9 {\n            roman += \"ix\"\n         \
    \   num -= 9\n        } else if num >= 5 {\n            roman += \"v\"\n     \
    \       num -= 5\n        } else if num >= 4 {\n            roman += \"iv\"\n\
    \            num -= 4\n        } else if num >= 1 {\n            roman += \"i\"\
    \n            num -= 1\n        }\n    }\n    return roman\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(int_to_mini_roman(number: 19) == \"xix\")\nassert(int_to_mini_roman(number:\
    \ 152) == \"clii\")\nassert(int_to_mini_roman(number: 251) == \"ccli\")\nassert(int_to_mini_roman(number:\
    \ 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number: 500) == \"d\")\nassert(int_to_mini_roman(number:\
    \ 1) == \"i\")\nassert(int_to_mini_roman(number: 4) == \"iv\")\nassert(int_to_mini_roman(number:\
    \ 43) == \"xliii\")\nassert(int_to_mini_roman(number: 90) == \"xc\")\nassert(int_to_mini_roman(number:\
    \ 94) == \"xciv\")\nassert(int_to_mini_roman(number: 532) == \"dxxxii\")\nassert(int_to_mini_roman(number:\
    \ 900) == \"cm\")\nassert(int_to_mini_roman(number: 994) == \"cmxciv\")\nassert(int_to_mini_roman(number:\
    \ 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    var result = \"\"\n    var\
    \ num = number\n    while num > 0 {\n        if num >= 1000 {\n            result\
    \ += \"m\"\n            num -= 1000\n        } else if num >= 900 {\n        \
    \    result += \"cm\"\n            num -= 900\n        } else if num >= 500 {\n\
    \            result += \"d\"\n            num -= 500\n        } else if num >=\
    \ 400 {\n            result += \"cd\"\n            num -= 400\n        } else\
    \ if num >= 100 {\n            result += \"c\"\n            num -= 100\n     \
    \   } else if num >= 90 {\n            result += \"xc\"\n            num -= 90\n\
    \        } else if num >= 50 {\n            result += \"l\"\n            num -=\
    \ 50\n        } else if num >= 40 {\n            result += \"xl\"\n          \
    \  num -= 40\n        } else if num >= 10 {\n            result += \"x\"\n   \
    \         num -= 10\n        } else if num >= 9 {\n            result += \"ix\"\
    \n            num -= 9\n        } else if num >= 5 {\n            result += \"\
    v\"\n            num -= 5\n        } else if num >= 4 {\n            result +=\
    \ \"iv\"\n            num -= 4\n        } else if num >= 1 {\n            result\
    \ += \"i\"\n            num -= 1\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(int_to_mini_roman(number: 19) == \"xix\")\nassert(int_to_mini_roman(number:\
    \ 152) == \"clii\")\nassert(int_to_mini_roman(number: 251) == \"ccli\")\nassert(int_to_mini_roman(number:\
    \ 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number: 500) == \"d\")\nassert(int_to_mini_roman(number:\
    \ 1) == \"i\")\nassert(int_to_mini_roman(number: 4) == \"iv\")\nassert(int_to_mini_roman(number:\
    \ 43) == \"xliii\")\nassert(int_to_mini_roman(number: 90) == \"xc\")\nassert(int_to_mini_roman(number:\
    \ 94) == \"xciv\")\nassert(int_to_mini_roman(number: 532) == \"dxxxii\")\nassert(int_to_mini_roman(number:\
    \ 900) == \"cm\")\nassert(int_to_mini_roman(number: 994) == \"cmxciv\")\nassert(int_to_mini_roman(number:\
    \ 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    var result = \"\"\n    var\
    \ num = number\n    while num > 0 {\n        if num >= 1000 {\n            result\
    \ += \"m\"\n            num -= 1000\n        } else if num >= 900 {\n        \
    \    result += \"cm\"\n            num -= 900\n        } else if num >= 500 {\n\
    \            result += \"d\"\n            num -= 500\n        } else if num >=\
    \ 400 {\n            result += \"cd\"\n            num -= 400\n        } else\
    \ if num >= 100 {\n            result += \"c\"\n            num -= 100\n     \
    \   } else if num >= 90 {\n            result += \"xc\"\n            num -= 90\n\
    \        } else if num >= 50 {\n            result += \"l\"\n            num -=\
    \ 50\n        } else if num >= 40 {\n            result += \"xl\"\n          \
    \  num -= 40\n        } else if num >= 10 {\n            result += \"x\"\n   \
    \         num -= 10\n        } else if num >= 9 {\n            result += \"ix\"\
    \n            num -= 9\n        } else if num >= 5 {\n            result += \"\
    v\"\n            num -= 5\n        } else if num >= 4 {\n            result +=\
    \ \"iv\"\n            num -= 4\n        } else if num >= 1 {\n            result\
    \ += \"i\"\n            num -= 1\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(int_to_mini_roman(number: 19) == \"xix\")\nassert(int_to_mini_roman(number:\
    \ 152) == \"clii\")\nassert(int_to_mini_roman(number: 251) == \"ccli\")\nassert(int_to_mini_roman(number:\
    \ 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number: 500) == \"d\")\nassert(int_to_mini_roman(number:\
    \ 1) == \"i\")\nassert(int_to_mini_roman(number: 4) == \"iv\")\nassert(int_to_mini_roman(number:\
    \ 43) == \"xliii\")\nassert(int_to_mini_roman(number: 90) == \"xc\")\nassert(int_to_mini_roman(number:\
    \ 94) == \"xciv\")\nassert(int_to_mini_roman(number: 532) == \"dxxxii\")\nassert(int_to_mini_roman(number:\
    \ 900) == \"cm\")\nassert(int_to_mini_roman(number: 994) == \"cmxciv\")\nassert(int_to_mini_roman(number:\
    \ 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    var result = \"\"\n    var\
    \ num = number\n    while num > 0 {\n        if num >= 1000 {\n            result\
    \ += \"m\"\n            num -= 1000\n        } else if num >= 900 {\n        \
    \    result += \"cm\"\n            num -= 900\n        } else if num >= 500 {\n\
    \            result += \"d\"\n            num -= 500\n        } else if num >=\
    \ 400 {\n            result += \"cd\"\n            num -= 400\n        } else\
    \ if num >= 100 {\n            result += \"c\"\n            num -= 100\n     \
    \   } else if num >= 90 {\n            result += \"xc\"\n            num -= 90\n\
    \        } else if num >= 50 {\n            result += \"l\"\n            num -=\
    \ 50\n        } else if num >= 40 {\n            result += \"xl\"\n          \
    \  num -= 40\n        } else if num >= 10 {\n            result += \"x\"\n   \
    \         num -= 10\n        } else if num >= 9 {\n            result += \"ix\"\
    \n            num -= 9\n        } else if num >= 5 {\n            result += \"\
    v\"\n            num -= 5\n        } else if num >= 4 {\n            result +=\
    \ \"iv\"\n            num -= 4\n        } else if num >= 1 {\n            result\
    \ += \"i\"\n            num -= 1\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(int_to_mini_roman(number: 19) == \"xix\")\nassert(int_to_mini_roman(number:\
    \ 152) == \"clii\")\nassert(int_to_mini_roman(number: 251) == \"ccli\")\nassert(int_to_mini_roman(number:\
    \ 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number: 500) == \"d\")\nassert(int_to_mini_roman(number:\
    \ 1) == \"i\")\nassert(int_to_mini_roman(number: 4) == \"iv\")\nassert(int_to_mini_roman(number:\
    \ 43) == \"xliii\")\nassert(int_to_mini_roman(number: 90) == \"xc\")\nassert(int_to_mini_roman(number:\
    \ 94) == \"xciv\")\nassert(int_to_mini_roman(number: 532) == \"dxxxii\")\nassert(int_to_mini_roman(number:\
    \ 900) == \"cm\")\nassert(int_to_mini_roman(number: 994) == \"cmxciv\")\nassert(int_to_mini_roman(number:\
    \ 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    var result = \"\"\n    var\
    \ num = number\n    while num > 0 {\n        if num >= 1000 {\n            result\
    \ += \"m\"\n            num -= 1000\n        } else if num >= 900 {\n        \
    \    result += \"cm\"\n            num -= 900\n        } else if num >= 500 {\n\
    \            result += \"d\"\n            num -= 500\n        } else if num >=\
    \ 400 {\n            result += \"cd\"\n            num -= 400\n        } else\
    \ if num >= 100 {\n            result += \"c\"\n            num -= 100\n     \
    \   } else if num >= 90 {\n            result += \"xc\"\n            num -= 90\n\
    \        } else if num >= 50 {\n            result += \"l\"\n            num -=\
    \ 50\n        } else if num >= 40 {\n            result += \"xl\"\n          \
    \  num -= 40\n        } else if num >= 10 {\n            result += \"x\"\n   \
    \         num -= 10\n        } else if num >= 9 {\n            result += \"ix\"\
    \n            num -= 9\n        } else if num >= 5 {\n            result += \"\
    v\"\n            num -= 5\n        } else if num >= 4 {\n            result +=\
    \ \"iv\"\n            num -= 4\n        } else if num >= 1 {\n            result\
    \ += \"i\"\n            num -= 1\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(int_to_mini_roman(number: 19) == \"xix\")\nassert(int_to_mini_roman(number:\
    \ 152) == \"clii\")\nassert(int_to_mini_roman(number: 251) == \"ccli\")\nassert(int_to_mini_roman(number:\
    \ 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number: 500) == \"d\")\nassert(int_to_mini_roman(number:\
    \ 1) == \"i\")\nassert(int_to_mini_roman(number: 4) == \"iv\")\nassert(int_to_mini_roman(number:\
    \ 43) == \"xliii\")\nassert(int_to_mini_roman(number: 90) == \"xc\")\nassert(int_to_mini_roman(number:\
    \ 94) == \"xciv\")\nassert(int_to_mini_roman(number: 532) == \"dxxxii\")\nassert(int_to_mini_roman(number:\
    \ 900) == \"cm\")\nassert(int_to_mini_roman(number: 994) == \"cmxciv\")\nassert(int_to_mini_roman(number:\
    \ 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    var result = \"\"\n    var\
    \ number = number\n    while number > 0 {\n        if number >= 1000 {\n     \
    \       result += \"m\"\n            number -= 1000\n        } else if number\
    \ >= 900 {\n            result += \"cm\"\n            number -= 900\n        }\
    \ else if number >= 500 {\n            result += \"d\"\n            number -=\
    \ 500\n        } else if number >= 400 {\n            result += \"cd\"\n     \
    \       number -= 400\n        } else if number >= 100 {\n            result +=\
    \ \"c\"\n            number -= 100\n        } else if number >= 90 {\n       \
    \     result += \"xc\"\n            number -= 90\n        } else if number >=\
    \ 50 {\n            result += \"l\"\n            number -= 50\n        } else\
    \ if number >= 40 {\n            result += \"xl\"\n            number -= 40\n\
    \        } else if number >= 10 {\n            result += \"x\"\n            number\
    \ -= 10\n        } else if number >= 9 {\n            result += \"ix\"\n     \
    \       number -= 9\n        } else if number >= 5 {\n            result += \"\
    v\"\n            number -= 5\n        } else if number >= 4 {\n            result\
    \ += \"iv\"\n            number -= 4\n        } else if number >= 1 {\n      \
    \      result += \"i\"\n            number -= 1\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(int_to_mini_roman(number:\
    \ 19) == \"xix\")\nassert(int_to_mini_roman(number: 152) == \"clii\")\nassert(int_to_mini_roman(number:\
    \ 251) == \"ccli\")\nassert(int_to_mini_roman(number: 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number:\
    \ 500) == \"d\")\nassert(int_to_mini_roman(number: 1) == \"i\")\nassert(int_to_mini_roman(number:\
    \ 4) == \"iv\")\nassert(int_to_mini_roman(number: 43) == \"xliii\")\nassert(int_to_mini_roman(number:\
    \ 90) == \"xc\")\nassert(int_to_mini_roman(number: 94) == \"xciv\")\nassert(int_to_mini_roman(number:\
    \ 532) == \"dxxxii\")\nassert(int_to_mini_roman(number: 900) == \"cm\")\nassert(int_to_mini_roman(number:\
    \ 994) == \"cmxciv\")\nassert(int_to_mini_roman(number: 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    var result = \"\"\n    var\
    \ num = number\n    while num > 0 {\n        if num >= 1000 {\n            result\
    \ += \"m\"\n            num -= 1000\n        } else if num >= 900 {\n        \
    \    result += \"cm\"\n            num -= 900\n        } else if num >= 500 {\n\
    \            result += \"d\"\n            num -= 500\n        } else if num >=\
    \ 400 {\n            result += \"cd\"\n            num -= 400\n        } else\
    \ if num >= 100 {\n            result += \"c\"\n            num -= 100\n     \
    \   } else if num >= 90 {\n            result += \"xc\"\n            num -= 90\n\
    \        } else if num >= 50 {\n            result += \"l\"\n            num -=\
    \ 50\n        } else if num >= 40 {\n            result += \"xl\"\n          \
    \  num -= 40\n        } else if num >= 10 {\n            result += \"x\"\n   \
    \         num -= 10\n        } else if num >= 9 {\n            result += \"ix\"\
    \n            num -= 9\n        } else if num >= 5 {\n            result += \"\
    v\"\n            num -= 5\n        } else if num >= 4 {\n            result +=\
    \ \"iv\"\n            num -= 4\n        } else if num >= 1 {\n            result\
    \ += \"i\"\n            num -= 1\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(int_to_mini_roman(number: 19) == \"xix\")\nassert(int_to_mini_roman(number:\
    \ 152) == \"clii\")\nassert(int_to_mini_roman(number: 251) == \"ccli\")\nassert(int_to_mini_roman(number:\
    \ 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number: 500) == \"d\")\nassert(int_to_mini_roman(number:\
    \ 1) == \"i\")\nassert(int_to_mini_roman(number: 4) == \"iv\")\nassert(int_to_mini_roman(number:\
    \ 43) == \"xliii\")\nassert(int_to_mini_roman(number: 90) == \"xc\")\nassert(int_to_mini_roman(number:\
    \ 94) == \"xciv\")\nassert(int_to_mini_roman(number: 532) == \"dxxxii\")\nassert(int_to_mini_roman(number:\
    \ 900) == \"cm\")\nassert(int_to_mini_roman(number: 994) == \"cmxciv\")\nassert(int_to_mini_roman(number:\
    \ 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    let roman_numerals = [\n\
    \        \"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"\
    ix\", \"v\", \"iv\", \"i\"\n    ]\n    let numbers = [1000, 900, 500, 400, 100,\
    \ 90, 50, 40, 10, 9, 5, 4, 1]\n    var result = \"\"\n    var num = number\n \
    \   for (index, numeral) in roman_numerals.enumerated() {\n        while num >=\
    \ numbers[index] {\n            result += numeral\n            num -= numbers[index]\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(int_to_mini_roman(number: 19) == \"xix\")\nassert(int_to_mini_roman(number:\
    \ 152) == \"clii\")\nassert(int_to_mini_roman(number: 251) == \"ccli\")\nassert(int_to_mini_roman(number:\
    \ 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number: 500) == \"d\")\nassert(int_to_mini_roman(number:\
    \ 1) == \"i\")\nassert(int_to_mini_roman(number: 4) == \"iv\")\nassert(int_to_mini_roman(number:\
    \ 43) == \"xliii\")\nassert(int_to_mini_roman(number: 90) == \"xc\")\nassert(int_to_mini_roman(number:\
    \ 94) == \"xciv\")\nassert(int_to_mini_roman(number: 532) == \"dxxxii\")\nassert(int_to_mini_roman(number:\
    \ 900) == \"cm\")\nassert(int_to_mini_roman(number: 994) == \"cmxciv\")\nassert(int_to_mini_roman(number:\
    \ 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    var number = number\n   \
    \ var result = \"\"\n    while number > 0 {\n        if number >= 1000 {\n   \
    \         result += \"m\"\n            number -= 1000\n        } else if number\
    \ >= 900 {\n            result += \"cm\"\n            number -= 900\n        }\
    \ else if number >= 500 {\n            result += \"d\"\n            number -=\
    \ 500\n        } else if number >= 400 {\n            result += \"cd\"\n     \
    \       number -= 400\n        } else if number >= 100 {\n            result +=\
    \ \"c\"\n            number -= 100\n        } else if number >= 90 {\n       \
    \     result += \"xc\"\n            number -= 90\n        } else if number >=\
    \ 50 {\n            result += \"l\"\n            number -= 50\n        } else\
    \ if number >= 40 {\n            result += \"xl\"\n            number -= 40\n\
    \        } else if number >= 10 {\n            result += \"x\"\n            number\
    \ -= 10\n        } else if number >= 9 {\n            result += \"ix\"\n     \
    \       number -= 9\n        } else if number >= 5 {\n            result += \"\
    v\"\n            number -= 5\n        } else if number >= 4 {\n            result\
    \ += \"iv\"\n            number -= 4\n        } else if number >= 1 {\n      \
    \      result += \"i\"\n            number -= 1\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(int_to_mini_roman(number:\
    \ 19) == \"xix\")\nassert(int_to_mini_roman(number: 152) == \"clii\")\nassert(int_to_mini_roman(number:\
    \ 251) == \"ccli\")\nassert(int_to_mini_roman(number: 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number:\
    \ 500) == \"d\")\nassert(int_to_mini_roman(number: 1) == \"i\")\nassert(int_to_mini_roman(number:\
    \ 4) == \"iv\")\nassert(int_to_mini_roman(number: 43) == \"xliii\")\nassert(int_to_mini_roman(number:\
    \ 90) == \"xc\")\nassert(int_to_mini_roman(number: 94) == \"xciv\")\nassert(int_to_mini_roman(number:\
    \ 532) == \"dxxxii\")\nassert(int_to_mini_roman(number: 900) == \"cm\")\nassert(int_to_mini_roman(number:\
    \ 994) == \"cmxciv\")\nassert(int_to_mini_roman(number: 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    var result = \"\"\n    var\
    \ num = number\n    while num > 0 {\n        if num >= 1000 {\n            result\
    \ += \"m\"\n            num -= 1000\n        } else if num >= 900 {\n        \
    \    result += \"cm\"\n            num -= 900\n        } else if num >= 500 {\n\
    \            result += \"d\"\n            num -= 500\n        } else if num >=\
    \ 400 {\n            result += \"cd\"\n            num -= 400\n        } else\
    \ if num >= 100 {\n            result += \"c\"\n            num -= 100\n     \
    \   } else if num >= 90 {\n            result += \"xc\"\n            num -= 90\n\
    \        } else if num >= 50 {\n            result += \"l\"\n            num -=\
    \ 50\n        } else if num >= 40 {\n            result += \"xl\"\n          \
    \  num -= 40\n        } else if num >= 10 {\n            result += \"x\"\n   \
    \         num -= 10\n        } else if num >= 9 {\n            result += \"ix\"\
    \n            num -= 9\n        } else if num >= 5 {\n            result += \"\
    v\"\n            num -= 5\n        } else if num >= 4 {\n            result +=\
    \ \"iv\"\n            num -= 4\n        } else if num >= 1 {\n            result\
    \ += \"i\"\n            num -= 1\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(int_to_mini_roman(number: 19) == \"xix\")\nassert(int_to_mini_roman(number:\
    \ 152) == \"clii\")\nassert(int_to_mini_roman(number: 251) == \"ccli\")\nassert(int_to_mini_roman(number:\
    \ 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number: 500) == \"d\")\nassert(int_to_mini_roman(number:\
    \ 1) == \"i\")\nassert(int_to_mini_roman(number: 4) == \"iv\")\nassert(int_to_mini_roman(number:\
    \ 43) == \"xliii\")\nassert(int_to_mini_roman(number: 90) == \"xc\")\nassert(int_to_mini_roman(number:\
    \ 94) == \"xciv\")\nassert(int_to_mini_roman(number: 532) == \"dxxxii\")\nassert(int_to_mini_roman(number:\
    \ 900) == \"cm\")\nassert(int_to_mini_roman(number: 994) == \"cmxciv\")\nassert(int_to_mini_roman(number:\
    \ 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    var result = \"\"\n    var\
    \ num = number\n    while num > 0 {\n        if num >= 1000 {\n            result\
    \ += \"m\"\n            num -= 1000\n        } else if num >= 900 {\n        \
    \    result += \"cm\"\n            num -= 900\n        } else if num >= 500 {\n\
    \            result += \"d\"\n            num -= 500\n        } else if num >=\
    \ 400 {\n            result += \"cd\"\n            num -= 400\n        } else\
    \ if num >= 100 {\n            result += \"c\"\n            num -= 100\n     \
    \   } else if num >= 90 {\n            result += \"xc\"\n            num -= 90\n\
    \        } else if num >= 50 {\n            result += \"l\"\n            num -=\
    \ 50\n        } else if num >= 40 {\n            result += \"xl\"\n          \
    \  num -= 40\n        } else if num >= 10 {\n            result += \"x\"\n   \
    \         num -= 10\n        } else if num >= 9 {\n            result += \"ix\"\
    \n            num -= 9\n        } else if num >= 5 {\n            result += \"\
    v\"\n            num -= 5\n        } else if num >= 4 {\n            result +=\
    \ \"iv\"\n            num -= 4\n        } else if num >= 1 {\n            result\
    \ += \"i\"\n            num -= 1\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(int_to_mini_roman(number: 19) == \"xix\")\nassert(int_to_mini_roman(number:\
    \ 152) == \"clii\")\nassert(int_to_mini_roman(number: 251) == \"ccli\")\nassert(int_to_mini_roman(number:\
    \ 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number: 500) == \"d\")\nassert(int_to_mini_roman(number:\
    \ 1) == \"i\")\nassert(int_to_mini_roman(number: 4) == \"iv\")\nassert(int_to_mini_roman(number:\
    \ 43) == \"xliii\")\nassert(int_to_mini_roman(number: 90) == \"xc\")\nassert(int_to_mini_roman(number:\
    \ 94) == \"xciv\")\nassert(int_to_mini_roman(number: 532) == \"dxxxii\")\nassert(int_to_mini_roman(number:\
    \ 900) == \"cm\")\nassert(int_to_mini_roman(number: 994) == \"cmxciv\")\nassert(int_to_mini_roman(number:\
    \ 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    var result = \"\"\n    var\
    \ num = number\n    while num > 0 {\n        if num >= 1000 {\n            result\
    \ += \"m\"\n            num -= 1000\n        } else if num >= 900 {\n        \
    \    result += \"cm\"\n            num -= 900\n        } else if num >= 500 {\n\
    \            result += \"d\"\n            num -= 500\n        } else if num >=\
    \ 400 {\n            result += \"cd\"\n            num -= 400\n        } else\
    \ if num >= 100 {\n            result += \"c\"\n            num -= 100\n     \
    \   } else if num >= 90 {\n            result += \"xc\"\n            num -= 90\n\
    \        } else if num >= 50 {\n            result += \"l\"\n            num -=\
    \ 50\n        } else if num >= 40 {\n            result += \"xl\"\n          \
    \  num -= 40\n        } else if num >= 10 {\n            result += \"x\"\n   \
    \         num -= 10\n        } else if num >= 9 {\n            result += \"ix\"\
    \n            num -= 9\n        } else if num >= 5 {\n            result += \"\
    v\"\n            num -= 5\n        } else if num >= 4 {\n            result +=\
    \ \"iv\"\n            num -= 4\n        } else if num >= 1 {\n            result\
    \ += \"i\"\n            num -= 1\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(int_to_mini_roman(number: 19) == \"xix\")\nassert(int_to_mini_roman(number:\
    \ 152) == \"clii\")\nassert(int_to_mini_roman(number: 251) == \"ccli\")\nassert(int_to_mini_roman(number:\
    \ 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number: 500) == \"d\")\nassert(int_to_mini_roman(number:\
    \ 1) == \"i\")\nassert(int_to_mini_roman(number: 4) == \"iv\")\nassert(int_to_mini_roman(number:\
    \ 43) == \"xliii\")\nassert(int_to_mini_roman(number: 90) == \"xc\")\nassert(int_to_mini_roman(number:\
    \ 94) == \"xciv\")\nassert(int_to_mini_roman(number: 532) == \"dxxxii\")\nassert(int_to_mini_roman(number:\
    \ 900) == \"cm\")\nassert(int_to_mini_roman(number: 994) == \"cmxciv\")\nassert(int_to_mini_roman(number:\
    \ 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    var result = \"\"\n    var\
    \ num = number\n    while num >= 1000 {\n        result += \"m\"\n        num\
    \ -= 1000\n    }\n    while num >= 900 {\n        result += \"cm\"\n        num\
    \ -= 900\n    }\n    while num >= 500 {\n        result += \"d\"\n        num\
    \ -= 500\n    }\n    while num >= 400 {\n        result += \"cd\"\n        num\
    \ -= 400\n    }\n    while num >= 100 {\n        result += \"c\"\n        num\
    \ -= 100\n    }\n    while num >= 90 {\n        result += \"xc\"\n        num\
    \ -= 90\n    }\n    while num >= 50 {\n        result += \"l\"\n        num -=\
    \ 50\n    }\n    while num >= 40 {\n        result += \"xl\"\n        num -= 40\n\
    \    }\n    while num >= 10 {\n        result += \"x\"\n        num -= 10\n  \
    \  }\n    while num >= 9 {\n        result += \"ix\"\n        num -= 9\n    }\n\
    \    while num >= 5 {\n        result += \"v\"\n        num -= 5\n    }\n    while\
    \ num >= 4 {\n        result += \"iv\"\n        num -= 4\n    }\n    while num\
    \ >= 1 {\n        result += \"i\"\n        num -= 1\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(int_to_mini_roman(number: 19) == \"xix\")\nassert(int_to_mini_roman(number:\
    \ 152) == \"clii\")\nassert(int_to_mini_roman(number: 251) == \"ccli\")\nassert(int_to_mini_roman(number:\
    \ 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number: 500) == \"d\")\nassert(int_to_mini_roman(number:\
    \ 1) == \"i\")\nassert(int_to_mini_roman(number: 4) == \"iv\")\nassert(int_to_mini_roman(number:\
    \ 43) == \"xliii\")\nassert(int_to_mini_roman(number: 90) == \"xc\")\nassert(int_to_mini_roman(number:\
    \ 94) == \"xciv\")\nassert(int_to_mini_roman(number: 532) == \"dxxxii\")\nassert(int_to_mini_roman(number:\
    \ 900) == \"cm\")\nassert(int_to_mini_roman(number: 994) == \"cmxciv\")\nassert(int_to_mini_roman(number:\
    \ 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    var result = \"\"\n    var\
    \ num = number\n    while num > 0 {\n        if num >= 1000 {\n            result\
    \ += \"m\"\n            num -= 1000\n        } else if num >= 900 {\n        \
    \    result += \"cm\"\n            num -= 900\n        } else if num >= 500 {\n\
    \            result += \"d\"\n            num -= 500\n        } else if num >=\
    \ 400 {\n            result += \"cd\"\n            num -= 400\n        } else\
    \ if num >= 100 {\n            result += \"c\"\n            num -= 100\n     \
    \   } else if num >= 90 {\n            result += \"xc\"\n            num -= 90\n\
    \        } else if num >= 50 {\n            result += \"l\"\n            num -=\
    \ 50\n        } else if num >= 40 {\n            result += \"xl\"\n          \
    \  num -= 40\n        } else if num >= 10 {\n            result += \"x\"\n   \
    \         num -= 10\n        } else if num >= 9 {\n            result += \"ix\"\
    \n            num -= 9\n        } else if num >= 5 {\n            result += \"\
    v\"\n            num -= 5\n        } else if num >= 4 {\n            result +=\
    \ \"iv\"\n            num -= 4\n        } else if num >= 1 {\n            result\
    \ += \"i\"\n            num -= 1\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(int_to_mini_roman(number: 19) == \"xix\")\nassert(int_to_mini_roman(number:\
    \ 152) == \"clii\")\nassert(int_to_mini_roman(number: 251) == \"ccli\")\nassert(int_to_mini_roman(number:\
    \ 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number: 500) == \"d\")\nassert(int_to_mini_roman(number:\
    \ 1) == \"i\")\nassert(int_to_mini_roman(number: 4) == \"iv\")\nassert(int_to_mini_roman(number:\
    \ 43) == \"xliii\")\nassert(int_to_mini_roman(number: 90) == \"xc\")\nassert(int_to_mini_roman(number:\
    \ 94) == \"xciv\")\nassert(int_to_mini_roman(number: 532) == \"dxxxii\")\nassert(int_to_mini_roman(number:\
    \ 900) == \"cm\")\nassert(int_to_mini_roman(number: 994) == \"cmxciv\")\nassert(int_to_mini_roman(number:\
    \ 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    var result = \"\"\n    var\
    \ num = number\n    let roman_numerals = [\"m\", \"cm\", \"d\", \"cd\", \"c\"\
    , \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"]\n    let values\
    \ = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]\n    for (index, value)\
    \ in values.enumerated() {\n        while num >= value {\n            result +=\
    \ roman_numerals[index]\n            num -= value\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(int_to_mini_roman(number:\
    \ 19) == \"xix\")\nassert(int_to_mini_roman(number: 152) == \"clii\")\nassert(int_to_mini_roman(number:\
    \ 251) == \"ccli\")\nassert(int_to_mini_roman(number: 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number:\
    \ 500) == \"d\")\nassert(int_to_mini_roman(number: 1) == \"i\")\nassert(int_to_mini_roman(number:\
    \ 4) == \"iv\")\nassert(int_to_mini_roman(number: 43) == \"xliii\")\nassert(int_to_mini_roman(number:\
    \ 90) == \"xc\")\nassert(int_to_mini_roman(number: 94) == \"xciv\")\nassert(int_to_mini_roman(number:\
    \ 532) == \"dxxxii\")\nassert(int_to_mini_roman(number: 900) == \"cm\")\nassert(int_to_mini_roman(number:\
    \ 994) == \"cmxciv\")\nassert(int_to_mini_roman(number: 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    var result = \"\"\n    var\
    \ num = number\n    while num > 0 {\n        if num >= 1000 {\n            result\
    \ += \"m\"\n            num -= 1000\n        } else if num >= 900 {\n        \
    \    result += \"cm\"\n            num -= 900\n        } else if num >= 500 {\n\
    \            result += \"d\"\n            num -= 500\n        } else if num >=\
    \ 400 {\n            result += \"cd\"\n            num -= 400\n        } else\
    \ if num >= 100 {\n            result += \"c\"\n            num -= 100\n     \
    \   } else if num >= 90 {\n            result += \"xc\"\n            num -= 90\n\
    \        } else if num >= 50 {\n            result += \"l\"\n            num -=\
    \ 50\n        } else if num >= 40 {\n            result += \"xl\"\n          \
    \  num -= 40\n        } else if num >= 10 {\n            result += \"x\"\n   \
    \         num -= 10\n        } else if num >= 9 {\n            result += \"ix\"\
    \n            num -= 9\n        } else if num >= 5 {\n            result += \"\
    v\"\n            num -= 5\n        } else if num >= 4 {\n            result +=\
    \ \"iv\"\n            num -= 4\n        } else if num >= 1 {\n            result\
    \ += \"i\"\n            num -= 1\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(int_to_mini_roman(number: 19) == \"xix\")\nassert(int_to_mini_roman(number:\
    \ 152) == \"clii\")\nassert(int_to_mini_roman(number: 251) == \"ccli\")\nassert(int_to_mini_roman(number:\
    \ 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number: 500) == \"d\")\nassert(int_to_mini_roman(number:\
    \ 1) == \"i\")\nassert(int_to_mini_roman(number: 4) == \"iv\")\nassert(int_to_mini_roman(number:\
    \ 43) == \"xliii\")\nassert(int_to_mini_roman(number: 90) == \"xc\")\nassert(int_to_mini_roman(number:\
    \ 94) == \"xciv\")\nassert(int_to_mini_roman(number: 532) == \"dxxxii\")\nassert(int_to_mini_roman(number:\
    \ 900) == \"cm\")\nassert(int_to_mini_roman(number: 994) == \"cmxciv\")\nassert(int_to_mini_roman(number:\
    \ 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    var result = \"\"\n    var\
    \ num = number\n    while num > 0 {\n        if num >= 1000 {\n            result\
    \ += \"m\"\n            num -= 1000\n        } else if num >= 900 {\n        \
    \    result += \"cm\"\n            num -= 900\n        } else if num >= 500 {\n\
    \            result += \"d\"\n            num -= 500\n        } else if num >=\
    \ 400 {\n            result += \"cd\"\n            num -= 400\n        } else\
    \ if num >= 100 {\n            result += \"c\"\n            num -= 100\n     \
    \   } else if num >= 90 {\n            result += \"xc\"\n            num -= 90\n\
    \        } else if num >= 50 {\n            result += \"l\"\n            num -=\
    \ 50\n        } else if num >= 40 {\n            result += \"xl\"\n          \
    \  num -= 40\n        } else if num >= 10 {\n            result += \"x\"\n   \
    \         num -= 10\n        } else if num >= 9 {\n            result += \"ix\"\
    \n            num -= 9\n        } else if num >= 5 {\n            result += \"\
    v\"\n            num -= 5\n        } else if num >= 4 {\n            result +=\
    \ \"iv\"\n            num -= 4\n        } else if num >= 1 {\n            result\
    \ += \"i\"\n            num -= 1\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(int_to_mini_roman(number: 19) == \"xix\")\nassert(int_to_mini_roman(number:\
    \ 152) == \"clii\")\nassert(int_to_mini_roman(number: 251) == \"ccli\")\nassert(int_to_mini_roman(number:\
    \ 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number: 500) == \"d\")\nassert(int_to_mini_roman(number:\
    \ 1) == \"i\")\nassert(int_to_mini_roman(number: 4) == \"iv\")\nassert(int_to_mini_roman(number:\
    \ 43) == \"xliii\")\nassert(int_to_mini_roman(number: 90) == \"xc\")\nassert(int_to_mini_roman(number:\
    \ 94) == \"xciv\")\nassert(int_to_mini_roman(number: 532) == \"dxxxii\")\nassert(int_to_mini_roman(number:\
    \ 900) == \"cm\")\nassert(int_to_mini_roman(number: 994) == \"cmxciv\")\nassert(int_to_mini_roman(number:\
    \ 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    let roman_numerals = [\"\
    m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\"\
    , \"iv\", \"i\"]\n    let numbers = [1000, 900, 500, 400, 100, 90, 50, 40, 10,\
    \ 9, 5, 4, 1]\n    var result = \"\"\n    var num = number\n    for (index, numeral)\
    \ in roman_numerals.enumerated() {\n        while num >= numbers[index] {\n  \
    \          result += numeral\n            num -= numbers[index]\n        }\n \
    \   }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(int_to_mini_roman(number:\
    \ 19) == \"xix\")\nassert(int_to_mini_roman(number: 152) == \"clii\")\nassert(int_to_mini_roman(number:\
    \ 251) == \"ccli\")\nassert(int_to_mini_roman(number: 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number:\
    \ 500) == \"d\")\nassert(int_to_mini_roman(number: 1) == \"i\")\nassert(int_to_mini_roman(number:\
    \ 4) == \"iv\")\nassert(int_to_mini_roman(number: 43) == \"xliii\")\nassert(int_to_mini_roman(number:\
    \ 90) == \"xc\")\nassert(int_to_mini_roman(number: 94) == \"xciv\")\nassert(int_to_mini_roman(number:\
    \ 532) == \"dxxxii\")\nassert(int_to_mini_roman(number: 900) == \"cm\")\nassert(int_to_mini_roman(number:\
    \ 994) == \"cmxciv\")\nassert(int_to_mini_roman(number: 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    var result = \"\"\n    var\
    \ num = number\n    while num > 0 {\n        if num >= 1000 {\n            result\
    \ += \"m\"\n            num -= 1000\n        } else if num >= 900 {\n        \
    \    result += \"cm\"\n            num -= 900\n        } else if num >= 500 {\n\
    \            result += \"d\"\n            num -= 500\n        } else if num >=\
    \ 400 {\n            result += \"cd\"\n            num -= 400\n        } else\
    \ if num >= 100 {\n            result += \"c\"\n            num -= 100\n     \
    \   } else if num >= 90 {\n            result += \"xc\"\n            num -= 90\n\
    \        } else if num >= 50 {\n            result += \"l\"\n            num -=\
    \ 50\n        } else if num >= 40 {\n            result += \"xl\"\n          \
    \  num -= 40\n        } else if num >= 10 {\n            result += \"x\"\n   \
    \         num -= 10\n        } else if num >= 9 {\n            result += \"ix\"\
    \n            num -= 9\n        } else if num >= 5 {\n            result += \"\
    v\"\n            num -= 5\n        } else if num >= 4 {\n            result +=\
    \ \"iv\"\n            num -= 4\n        } else if num >= 1 {\n            result\
    \ += \"i\"\n            num -= 1\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(int_to_mini_roman(number: 19) == \"xix\")\nassert(int_to_mini_roman(number:\
    \ 152) == \"clii\")\nassert(int_to_mini_roman(number: 251) == \"ccli\")\nassert(int_to_mini_roman(number:\
    \ 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number: 500) == \"d\")\nassert(int_to_mini_roman(number:\
    \ 1) == \"i\")\nassert(int_to_mini_roman(number: 4) == \"iv\")\nassert(int_to_mini_roman(number:\
    \ 43) == \"xliii\")\nassert(int_to_mini_roman(number: 90) == \"xc\")\nassert(int_to_mini_roman(number:\
    \ 94) == \"xciv\")\nassert(int_to_mini_roman(number: 532) == \"dxxxii\")\nassert(int_to_mini_roman(number:\
    \ 900) == \"cm\")\nassert(int_to_mini_roman(number: 994) == \"cmxciv\")\nassert(int_to_mini_roman(number:\
    \ 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    var result = \"\"\n    var\
    \ number = number\n    let roman_numerals = [\"m\", \"cm\", \"d\", \"cd\", \"\
    c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"]\n    let values\
    \ = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]\n    for (index, value)\
    \ in values.enumerated() {\n        while number >= value {\n            result\
    \ += roman_numerals[index]\n            number -= value\n        }\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(int_to_mini_roman(number:\
    \ 19) == \"xix\")\nassert(int_to_mini_roman(number: 152) == \"clii\")\nassert(int_to_mini_roman(number:\
    \ 251) == \"ccli\")\nassert(int_to_mini_roman(number: 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number:\
    \ 500) == \"d\")\nassert(int_to_mini_roman(number: 1) == \"i\")\nassert(int_to_mini_roman(number:\
    \ 4) == \"iv\")\nassert(int_to_mini_roman(number: 43) == \"xliii\")\nassert(int_to_mini_roman(number:\
    \ 90) == \"xc\")\nassert(int_to_mini_roman(number: 94) == \"xciv\")\nassert(int_to_mini_roman(number:\
    \ 532) == \"dxxxii\")\nassert(int_to_mini_roman(number: 900) == \"cm\")\nassert(int_to_mini_roman(number:\
    \ 994) == \"cmxciv\")\nassert(int_to_mini_roman(number: 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    var result = \"\"\n    var\
    \ num = number\n    while num > 0 {\n        if num >= 1000 {\n            result\
    \ += \"m\"\n            num -= 1000\n        } else if num >= 900 {\n        \
    \    result += \"cm\"\n            num -= 900\n        } else if num >= 500 {\n\
    \            result += \"d\"\n            num -= 500\n        } else if num >=\
    \ 400 {\n            result += \"cd\"\n            num -= 400\n        } else\
    \ if num >= 100 {\n            result += \"c\"\n            num -= 100\n     \
    \   } else if num >= 90 {\n            result += \"xc\"\n            num -= 90\n\
    \        } else if num >= 50 {\n            result += \"l\"\n            num -=\
    \ 50\n        } else if num >= 40 {\n            result += \"xl\"\n          \
    \  num -= 40\n        } else if num >= 10 {\n            result += \"x\"\n   \
    \         num -= 10\n        } else if num >= 9 {\n            result += \"ix\"\
    \n            num -= 9\n        } else if num >= 5 {\n            result += \"\
    v\"\n            num -= 5\n        } else if num >= 4 {\n            result +=\
    \ \"iv\"\n            num -= 4\n        } else if num >= 1 {\n            result\
    \ += \"i\"\n            num -= 1\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(int_to_mini_roman(number: 19) == \"xix\")\nassert(int_to_mini_roman(number:\
    \ 152) == \"clii\")\nassert(int_to_mini_roman(number: 251) == \"ccli\")\nassert(int_to_mini_roman(number:\
    \ 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number: 500) == \"d\")\nassert(int_to_mini_roman(number:\
    \ 1) == \"i\")\nassert(int_to_mini_roman(number: 4) == \"iv\")\nassert(int_to_mini_roman(number:\
    \ 43) == \"xliii\")\nassert(int_to_mini_roman(number: 90) == \"xc\")\nassert(int_to_mini_roman(number:\
    \ 94) == \"xciv\")\nassert(int_to_mini_roman(number: 532) == \"dxxxii\")\nassert(int_to_mini_roman(number:\
    \ 900) == \"cm\")\nassert(int_to_mini_roman(number: 994) == \"cmxciv\")\nassert(int_to_mini_roman(number:\
    \ 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    var result = \"\"\n    var\
    \ num = number\n    while num > 0 {\n        if num >= 1000 {\n            result\
    \ += \"m\"\n            num -= 1000\n        } else if num >= 900 {\n        \
    \    result += \"cm\"\n            num -= 900\n        } else if num >= 500 {\n\
    \            result += \"d\"\n            num -= 500\n        } else if num >=\
    \ 400 {\n            result += \"cd\"\n            num -= 400\n        } else\
    \ if num >= 100 {\n            result += \"c\"\n            num -= 100\n     \
    \   } else if num >= 90 {\n            result += \"xc\"\n            num -= 90\n\
    \        } else if num >= 50 {\n            result += \"l\"\n            num -=\
    \ 50\n        } else if num >= 40 {\n            result += \"xl\"\n          \
    \  num -= 40\n        } else if num >= 10 {\n            result += \"x\"\n   \
    \         num -= 10\n        } else if num >= 9 {\n            result += \"ix\"\
    \n            num -= 9\n        } else if num >= 5 {\n            result += \"\
    v\"\n            num -= 5\n        } else if num >= 4 {\n            result +=\
    \ \"iv\"\n            num -= 4\n        } else if num >= 1 {\n            result\
    \ += \"i\"\n            num -= 1\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(int_to_mini_roman(number: 19) == \"xix\")\nassert(int_to_mini_roman(number:\
    \ 152) == \"clii\")\nassert(int_to_mini_roman(number: 251) == \"ccli\")\nassert(int_to_mini_roman(number:\
    \ 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number: 500) == \"d\")\nassert(int_to_mini_roman(number:\
    \ 1) == \"i\")\nassert(int_to_mini_roman(number: 4) == \"iv\")\nassert(int_to_mini_roman(number:\
    \ 43) == \"xliii\")\nassert(int_to_mini_roman(number: 90) == \"xc\")\nassert(int_to_mini_roman(number:\
    \ 94) == \"xciv\")\nassert(int_to_mini_roman(number: 532) == \"dxxxii\")\nassert(int_to_mini_roman(number:\
    \ 900) == \"cm\")\nassert(int_to_mini_roman(number: 994) == \"cmxciv\")\nassert(int_to_mini_roman(number:\
    \ 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    var result = \"\"\n    var\
    \ num = number\n    while num > 0 {\n        if num >= 1000 {\n            result\
    \ += \"m\"\n            num -= 1000\n        } else if num >= 900 {\n        \
    \    result += \"cm\"\n            num -= 900\n        } else if num >= 500 {\n\
    \            result += \"d\"\n            num -= 500\n        } else if num >=\
    \ 400 {\n            result += \"cd\"\n            num -= 400\n        } else\
    \ if num >= 100 {\n            result += \"c\"\n            num -= 100\n     \
    \   } else if num >= 90 {\n            result += \"xc\"\n            num -= 90\n\
    \        } else if num >= 50 {\n            result += \"l\"\n            num -=\
    \ 50\n        } else if num >= 40 {\n            result += \"xl\"\n          \
    \  num -= 40\n        } else if num >= 10 {\n            result += \"x\"\n   \
    \         num -= 10\n        } else if num >= 9 {\n            result += \"ix\"\
    \n            num -= 9\n        } else if num >= 5 {\n            result += \"\
    v\"\n            num -= 5\n        } else if num >= 4 {\n            result +=\
    \ \"iv\"\n            num -= 4\n        } else if num >= 1 {\n            result\
    \ += \"i\"\n            num -= 1\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(int_to_mini_roman(number: 19) == \"xix\")\nassert(int_to_mini_roman(number:\
    \ 152) == \"clii\")\nassert(int_to_mini_roman(number: 251) == \"ccli\")\nassert(int_to_mini_roman(number:\
    \ 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number: 500) == \"d\")\nassert(int_to_mini_roman(number:\
    \ 1) == \"i\")\nassert(int_to_mini_roman(number: 4) == \"iv\")\nassert(int_to_mini_roman(number:\
    \ 43) == \"xliii\")\nassert(int_to_mini_roman(number: 90) == \"xc\")\nassert(int_to_mini_roman(number:\
    \ 94) == \"xciv\")\nassert(int_to_mini_roman(number: 532) == \"dxxxii\")\nassert(int_to_mini_roman(number:\
    \ 900) == \"cm\")\nassert(int_to_mini_roman(number: 994) == \"cmxciv\")\nassert(int_to_mini_roman(number:\
    \ 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    var result = \"\"\n    var\
    \ number = number\n    while number > 0 {\n        if number >= 1000 {\n     \
    \       result += \"m\"\n            number -= 1000\n        } else if number\
    \ >= 900 {\n            result += \"cm\"\n            number -= 900\n        }\
    \ else if number >= 500 {\n            result += \"d\"\n            number -=\
    \ 500\n        } else if number >= 400 {\n            result += \"cd\"\n     \
    \       number -= 400\n        } else if number >= 100 {\n            result +=\
    \ \"c\"\n            number -= 100\n        } else if number >= 90 {\n       \
    \     result += \"xc\"\n            number -= 90\n        } else if number >=\
    \ 50 {\n            result += \"l\"\n            number -= 50\n        } else\
    \ if number >= 40 {\n            result += \"xl\"\n            number -= 40\n\
    \        } else if number >= 10 {\n            result += \"x\"\n            number\
    \ -= 10\n        } else if number >= 9 {\n            result += \"ix\"\n     \
    \       number -= 9\n        } else if number >= 5 {\n            result += \"\
    v\"\n            number -= 5\n        } else if number >= 4 {\n            result\
    \ += \"iv\"\n            number -= 4\n        } else if number >= 1 {\n      \
    \      result += \"i\"\n            number -= 1\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(int_to_mini_roman(number:\
    \ 19) == \"xix\")\nassert(int_to_mini_roman(number: 152) == \"clii\")\nassert(int_to_mini_roman(number:\
    \ 251) == \"ccli\")\nassert(int_to_mini_roman(number: 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number:\
    \ 500) == \"d\")\nassert(int_to_mini_roman(number: 1) == \"i\")\nassert(int_to_mini_roman(number:\
    \ 4) == \"iv\")\nassert(int_to_mini_roman(number: 43) == \"xliii\")\nassert(int_to_mini_roman(number:\
    \ 90) == \"xc\")\nassert(int_to_mini_roman(number: 94) == \"xciv\")\nassert(int_to_mini_roman(number:\
    \ 532) == \"dxxxii\")\nassert(int_to_mini_roman(number: 900) == \"cm\")\nassert(int_to_mini_roman(number:\
    \ 994) == \"cmxciv\")\nassert(int_to_mini_roman(number: 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    var result = \"\"\n    var\
    \ num = number\n    while num > 0 {\n        if num >= 1000 {\n            result\
    \ += \"m\"\n            num -= 1000\n        } else if num >= 900 {\n        \
    \    result += \"cm\"\n            num -= 900\n        } else if num >= 500 {\n\
    \            result += \"d\"\n            num -= 500\n        } else if num >=\
    \ 400 {\n            result += \"cd\"\n            num -= 400\n        } else\
    \ if num >= 100 {\n            result += \"c\"\n            num -= 100\n     \
    \   } else if num >= 90 {\n            result += \"xc\"\n            num -= 90\n\
    \        } else if num >= 50 {\n            result += \"l\"\n            num -=\
    \ 50\n        } else if num >= 40 {\n            result += \"xl\"\n          \
    \  num -= 40\n        } else if num >= 10 {\n            result += \"x\"\n   \
    \         num -= 10\n        } else if num >= 9 {\n            result += \"ix\"\
    \n            num -= 9\n        } else if num >= 5 {\n            result += \"\
    v\"\n            num -= 5\n        } else if num >= 4 {\n            result +=\
    \ \"iv\"\n            num -= 4\n        } else if num >= 1 {\n            result\
    \ += \"i\"\n            num -= 1\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(int_to_mini_roman(number: 19) == \"xix\")\nassert(int_to_mini_roman(number:\
    \ 152) == \"clii\")\nassert(int_to_mini_roman(number: 251) == \"ccli\")\nassert(int_to_mini_roman(number:\
    \ 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number: 500) == \"d\")\nassert(int_to_mini_roman(number:\
    \ 1) == \"i\")\nassert(int_to_mini_roman(number: 4) == \"iv\")\nassert(int_to_mini_roman(number:\
    \ 43) == \"xliii\")\nassert(int_to_mini_roman(number: 90) == \"xc\")\nassert(int_to_mini_roman(number:\
    \ 94) == \"xciv\")\nassert(int_to_mini_roman(number: 532) == \"dxxxii\")\nassert(int_to_mini_roman(number:\
    \ 900) == \"cm\")\nassert(int_to_mini_roman(number: 994) == \"cmxciv\")\nassert(int_to_mini_roman(number:\
    \ 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    var result = \"\"\n    var\
    \ num = number\n    while num > 0 {\n        if num >= 1000 {\n            result\
    \ += \"m\"\n            num -= 1000\n        } else if num >= 900 {\n        \
    \    result += \"cm\"\n            num -= 900\n        } else if num >= 500 {\n\
    \            result += \"d\"\n            num -= 500\n        } else if num >=\
    \ 400 {\n            result += \"cd\"\n            num -= 400\n        } else\
    \ if num >= 100 {\n            result += \"c\"\n            num -= 100\n     \
    \   } else if num >= 90 {\n            result += \"xc\"\n            num -= 90\n\
    \        } else if num >= 50 {\n            result += \"l\"\n            num -=\
    \ 50\n        } else if num >= 40 {\n            result += \"xl\"\n          \
    \  num -= 40\n        } else if num >= 10 {\n            result += \"x\"\n   \
    \         num -= 10\n        } else if num >= 9 {\n            result += \"ix\"\
    \n            num -= 9\n        } else if num >= 5 {\n            result += \"\
    v\"\n            num -= 5\n        } else if num >= 4 {\n            result +=\
    \ \"iv\"\n            num -= 4\n        } else if num >= 1 {\n            result\
    \ += \"i\"\n            num -= 1\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(int_to_mini_roman(number: 19) == \"xix\")\nassert(int_to_mini_roman(number:\
    \ 152) == \"clii\")\nassert(int_to_mini_roman(number: 251) == \"ccli\")\nassert(int_to_mini_roman(number:\
    \ 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number: 500) == \"d\")\nassert(int_to_mini_roman(number:\
    \ 1) == \"i\")\nassert(int_to_mini_roman(number: 4) == \"iv\")\nassert(int_to_mini_roman(number:\
    \ 43) == \"xliii\")\nassert(int_to_mini_roman(number: 90) == \"xc\")\nassert(int_to_mini_roman(number:\
    \ 94) == \"xciv\")\nassert(int_to_mini_roman(number: 532) == \"dxxxii\")\nassert(int_to_mini_roman(number:\
    \ 900) == \"cm\")\nassert(int_to_mini_roman(number: 994) == \"cmxciv\")\nassert(int_to_mini_roman(number:\
    \ 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    var result = \"\"\n    var\
    \ num = number\n    while num >= 1000 {\n        result += \"m\"\n        num\
    \ -= 1000\n    }\n    while num >= 900 {\n        result += \"cm\"\n        num\
    \ -= 900\n    }\n    while num >= 500 {\n        result += \"d\"\n        num\
    \ -= 500\n    }\n    while num >= 400 {\n        result += \"cd\"\n        num\
    \ -= 400\n    }\n    while num >= 100 {\n        result += \"c\"\n        num\
    \ -= 100\n    }\n    while num >= 90 {\n        result += \"xc\"\n        num\
    \ -= 90\n    }\n    while num >= 50 {\n        result += \"l\"\n        num -=\
    \ 50\n    }\n    while num >= 40 {\n        result += \"xl\"\n        num -= 40\n\
    \    }\n    while num >= 10 {\n        result += \"x\"\n        num -= 10\n  \
    \  }\n    while num >= 9 {\n        result += \"ix\"\n        num -= 9\n    }\n\
    \    while num >= 5 {\n        result += \"v\"\n        num -= 5\n    }\n    while\
    \ num >= 4 {\n        result += \"iv\"\n        num -= 4\n    }\n    while num\
    \ >= 1 {\n        result += \"i\"\n        num -= 1\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(int_to_mini_roman(number: 19) == \"xix\")\nassert(int_to_mini_roman(number:\
    \ 152) == \"clii\")\nassert(int_to_mini_roman(number: 251) == \"ccli\")\nassert(int_to_mini_roman(number:\
    \ 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number: 500) == \"d\")\nassert(int_to_mini_roman(number:\
    \ 1) == \"i\")\nassert(int_to_mini_roman(number: 4) == \"iv\")\nassert(int_to_mini_roman(number:\
    \ 43) == \"xliii\")\nassert(int_to_mini_roman(number: 90) == \"xc\")\nassert(int_to_mini_roman(number:\
    \ 94) == \"xciv\")\nassert(int_to_mini_roman(number: 532) == \"dxxxii\")\nassert(int_to_mini_roman(number:\
    \ 900) == \"cm\")\nassert(int_to_mini_roman(number: 994) == \"cmxciv\")\nassert(int_to_mini_roman(number:\
    \ 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    var result = \"\"\n    var\
    \ num = number\n    while num > 0 {\n        if num >= 1000 {\n            result\
    \ += \"m\"\n            num -= 1000\n        } else if num >= 900 {\n        \
    \    result += \"cm\"\n            num -= 900\n        } else if num >= 500 {\n\
    \            result += \"d\"\n            num -= 500\n        } else if num >=\
    \ 400 {\n            result += \"cd\"\n            num -= 400\n        } else\
    \ if num >= 100 {\n            result += \"c\"\n            num -= 100\n     \
    \   } else if num >= 90 {\n            result += \"xc\"\n            num -= 90\n\
    \        } else if num >= 50 {\n            result += \"l\"\n            num -=\
    \ 50\n        } else if num >= 40 {\n            result += \"xl\"\n          \
    \  num -= 40\n        } else if num >= 10 {\n            result += \"x\"\n   \
    \         num -= 10\n        } else if num >= 9 {\n            result += \"ix\"\
    \n            num -= 9\n        } else if num >= 5 {\n            result += \"\
    v\"\n            num -= 5\n        } else if num >= 4 {\n            result +=\
    \ \"iv\"\n            num -= 4\n        } else if num >= 1 {\n            result\
    \ += \"i\"\n            num -= 1\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(int_to_mini_roman(number: 19) == \"xix\")\nassert(int_to_mini_roman(number:\
    \ 152) == \"clii\")\nassert(int_to_mini_roman(number: 251) == \"ccli\")\nassert(int_to_mini_roman(number:\
    \ 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number: 500) == \"d\")\nassert(int_to_mini_roman(number:\
    \ 1) == \"i\")\nassert(int_to_mini_roman(number: 4) == \"iv\")\nassert(int_to_mini_roman(number:\
    \ 43) == \"xliii\")\nassert(int_to_mini_roman(number: 90) == \"xc\")\nassert(int_to_mini_roman(number:\
    \ 94) == \"xciv\")\nassert(int_to_mini_roman(number: 532) == \"dxxxii\")\nassert(int_to_mini_roman(number:\
    \ 900) == \"cm\")\nassert(int_to_mini_roman(number: 994) == \"cmxciv\")\nassert(int_to_mini_roman(number:\
    \ 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    var result = \"\"\n    var\
    \ number = number\n    while number > 0 {\n        if number >= 1000 {\n     \
    \       result += \"m\"\n            number -= 1000\n        } else if number\
    \ >= 900 {\n            result += \"cm\"\n            number -= 900\n        }\
    \ else if number >= 500 {\n            result += \"d\"\n            number -=\
    \ 500\n        } else if number >= 400 {\n            result += \"cd\"\n     \
    \       number -= 400\n        } else if number >= 100 {\n            result +=\
    \ \"c\"\n            number -= 100\n        } else if number >= 90 {\n       \
    \     result += \"xc\"\n            number -= 90\n        } else if number >=\
    \ 50 {\n            result += \"l\"\n            number -= 50\n        } else\
    \ if number >= 40 {\n            result += \"xl\"\n            number -= 40\n\
    \        } else if number >= 10 {\n            result += \"x\"\n            number\
    \ -= 10\n        } else if number >= 9 {\n            result += \"ix\"\n     \
    \       number -= 9\n        } else if number >= 5 {\n            result += \"\
    v\"\n            number -= 5\n        } else if number >= 4 {\n            result\
    \ += \"iv\"\n            number -= 4\n        } else if number >= 1 {\n      \
    \      result += \"i\"\n            number -= 1\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(int_to_mini_roman(number:\
    \ 19) == \"xix\")\nassert(int_to_mini_roman(number: 152) == \"clii\")\nassert(int_to_mini_roman(number:\
    \ 251) == \"ccli\")\nassert(int_to_mini_roman(number: 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number:\
    \ 500) == \"d\")\nassert(int_to_mini_roman(number: 1) == \"i\")\nassert(int_to_mini_roman(number:\
    \ 4) == \"iv\")\nassert(int_to_mini_roman(number: 43) == \"xliii\")\nassert(int_to_mini_roman(number:\
    \ 90) == \"xc\")\nassert(int_to_mini_roman(number: 94) == \"xciv\")\nassert(int_to_mini_roman(number:\
    \ 532) == \"dxxxii\")\nassert(int_to_mini_roman(number: 900) == \"cm\")\nassert(int_to_mini_roman(number:\
    \ 994) == \"cmxciv\")\nassert(int_to_mini_roman(number: 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    var result = \"\"\n    var\
    \ num = number\n    while num > 0 {\n        if num >= 1000 {\n            result\
    \ += \"m\"\n            num -= 1000\n        } else if num >= 900 {\n        \
    \    result += \"cm\"\n            num -= 900\n        } else if num >= 500 {\n\
    \            result += \"d\"\n            num -= 500\n        } else if num >=\
    \ 400 {\n            result += \"cd\"\n            num -= 400\n        } else\
    \ if num >= 100 {\n            result += \"c\"\n            num -= 100\n     \
    \   } else if num >= 90 {\n            result += \"xc\"\n            num -= 90\n\
    \        } else if num >= 50 {\n            result += \"l\"\n            num -=\
    \ 50\n        } else if num >= 40 {\n            result += \"xl\"\n          \
    \  num -= 40\n        } else if num >= 10 {\n            result += \"x\"\n   \
    \         num -= 10\n        } else if num >= 9 {\n            result += \"ix\"\
    \n            num -= 9\n        } else if num >= 5 {\n            result += \"\
    v\"\n            num -= 5\n        } else if num >= 4 {\n            result +=\
    \ \"iv\"\n            num -= 4\n        } else if num >= 1 {\n            result\
    \ += \"i\"\n            num -= 1\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(int_to_mini_roman(number: 19) == \"xix\")\nassert(int_to_mini_roman(number:\
    \ 152) == \"clii\")\nassert(int_to_mini_roman(number: 251) == \"ccli\")\nassert(int_to_mini_roman(number:\
    \ 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number: 500) == \"d\")\nassert(int_to_mini_roman(number:\
    \ 1) == \"i\")\nassert(int_to_mini_roman(number: 4) == \"iv\")\nassert(int_to_mini_roman(number:\
    \ 43) == \"xliii\")\nassert(int_to_mini_roman(number: 90) == \"xc\")\nassert(int_to_mini_roman(number:\
    \ 94) == \"xciv\")\nassert(int_to_mini_roman(number: 532) == \"dxxxii\")\nassert(int_to_mini_roman(number:\
    \ 900) == \"cm\")\nassert(int_to_mini_roman(number: 994) == \"cmxciv\")\nassert(int_to_mini_roman(number:\
    \ 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    var result = \"\"\n    var\
    \ num = number\n    while num > 0 {\n        if num >= 1000 {\n            result\
    \ += \"m\"\n            num -= 1000\n        } else if num >= 900 {\n        \
    \    result += \"cm\"\n            num -= 900\n        } else if num >= 500 {\n\
    \            result += \"d\"\n            num -= 500\n        } else if num >=\
    \ 400 {\n            result += \"cd\"\n            num -= 400\n        } else\
    \ if num >= 100 {\n            result += \"c\"\n            num -= 100\n     \
    \   } else if num >= 90 {\n            result += \"xc\"\n            num -= 90\n\
    \        } else if num >= 50 {\n            result += \"l\"\n            num -=\
    \ 50\n        } else if num >= 40 {\n            result += \"xl\"\n          \
    \  num -= 40\n        } else if num >= 10 {\n            result += \"x\"\n   \
    \         num -= 10\n        } else if num >= 9 {\n            result += \"ix\"\
    \n            num -= 9\n        } else if num >= 5 {\n            result += \"\
    v\"\n            num -= 5\n        } else if num >= 4 {\n            result +=\
    \ \"iv\"\n            num -= 4\n        } else if num >= 1 {\n            result\
    \ += \"i\"\n            num -= 1\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(int_to_mini_roman(number: 19) == \"xix\")\nassert(int_to_mini_roman(number:\
    \ 152) == \"clii\")\nassert(int_to_mini_roman(number: 251) == \"ccli\")\nassert(int_to_mini_roman(number:\
    \ 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number: 500) == \"d\")\nassert(int_to_mini_roman(number:\
    \ 1) == \"i\")\nassert(int_to_mini_roman(number: 4) == \"iv\")\nassert(int_to_mini_roman(number:\
    \ 43) == \"xliii\")\nassert(int_to_mini_roman(number: 90) == \"xc\")\nassert(int_to_mini_roman(number:\
    \ 94) == \"xciv\")\nassert(int_to_mini_roman(number: 532) == \"dxxxii\")\nassert(int_to_mini_roman(number:\
    \ 900) == \"cm\")\nassert(int_to_mini_roman(number: 994) == \"cmxciv\")\nassert(int_to_mini_roman(number:\
    \ 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    var result = \"\"\n    var\
    \ remaining = number\n    let numerals = [\n        (1000, \"m\"),\n        (900,\
    \ \"cm\"),\n        (500, \"d\"),\n        (400, \"cd\"),\n        (100, \"c\"\
    ),\n        (90, \"xc\"),\n        (50, \"l\"),\n        (40, \"xl\"),\n     \
    \   (10, \"x\"),\n        (9, \"ix\"),\n        (5, \"v\"),\n        (4, \"iv\"\
    ),\n        (1, \"i\")\n    ]\n    for (value, numeral) in numerals {\n      \
    \  while remaining >= value {\n            result += numeral\n            remaining\
    \ -= value\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(int_to_mini_roman(number: 19) == \"xix\")\nassert(int_to_mini_roman(number:\
    \ 152) == \"clii\")\nassert(int_to_mini_roman(number: 251) == \"ccli\")\nassert(int_to_mini_roman(number:\
    \ 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number: 500) == \"d\")\nassert(int_to_mini_roman(number:\
    \ 1) == \"i\")\nassert(int_to_mini_roman(number: 4) == \"iv\")\nassert(int_to_mini_roman(number:\
    \ 43) == \"xliii\")\nassert(int_to_mini_roman(number: 90) == \"xc\")\nassert(int_to_mini_roman(number:\
    \ 94) == \"xciv\")\nassert(int_to_mini_roman(number: 532) == \"dxxxii\")\nassert(int_to_mini_roman(number:\
    \ 900) == \"cm\")\nassert(int_to_mini_roman(number: 994) == \"cmxciv\")\nassert(int_to_mini_roman(number:\
    \ 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    var result = \"\"\n    var\
    \ num = number\n    while num > 0 {\n        if num >= 1000 {\n            result\
    \ += \"m\"\n            num -= 1000\n        } else if num >= 900 {\n        \
    \    result += \"cm\"\n            num -= 900\n        } else if num >= 500 {\n\
    \            result += \"d\"\n            num -= 500\n        } else if num >=\
    \ 400 {\n            result += \"cd\"\n            num -= 400\n        } else\
    \ if num >= 100 {\n            result += \"c\"\n            num -= 100\n     \
    \   } else if num >= 90 {\n            result += \"xc\"\n            num -= 90\n\
    \        } else if num >= 50 {\n            result += \"l\"\n            num -=\
    \ 50\n        } else if num >= 40 {\n            result += \"xl\"\n          \
    \  num -= 40\n        } else if num >= 10 {\n            result += \"x\"\n   \
    \         num -= 10\n        } else if num >= 9 {\n            result += \"ix\"\
    \n            num -= 9\n        } else if num >= 5 {\n            result += \"\
    v\"\n            num -= 5\n        } else if num >= 4 {\n            result +=\
    \ \"iv\"\n            num -= 4\n        } else if num >= 1 {\n            result\
    \ += \"i\"\n            num -= 1\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(int_to_mini_roman(number: 19) == \"xix\")\nassert(int_to_mini_roman(number:\
    \ 152) == \"clii\")\nassert(int_to_mini_roman(number: 251) == \"ccli\")\nassert(int_to_mini_roman(number:\
    \ 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number: 500) == \"d\")\nassert(int_to_mini_roman(number:\
    \ 1) == \"i\")\nassert(int_to_mini_roman(number: 4) == \"iv\")\nassert(int_to_mini_roman(number:\
    \ 43) == \"xliii\")\nassert(int_to_mini_roman(number: 90) == \"xc\")\nassert(int_to_mini_roman(number:\
    \ 94) == \"xciv\")\nassert(int_to_mini_roman(number: 532) == \"dxxxii\")\nassert(int_to_mini_roman(number:\
    \ 900) == \"cm\")\nassert(int_to_mini_roman(number: 994) == \"cmxciv\")\nassert(int_to_mini_roman(number:\
    \ 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    var result = \"\"\n    var\
    \ num = number\n    while num > 0 {\n        if num >= 1000 {\n            result\
    \ += \"m\"\n            num -= 1000\n        } else if num >= 900 {\n        \
    \    result += \"cm\"\n            num -= 900\n        } else if num >= 500 {\n\
    \            result += \"d\"\n            num -= 500\n        } else if num >=\
    \ 400 {\n            result += \"cd\"\n            num -= 400\n        } else\
    \ if num >= 100 {\n            result += \"c\"\n            num -= 100\n     \
    \   } else if num >= 90 {\n            result += \"xc\"\n            num -= 90\n\
    \        } else if num >= 50 {\n            result += \"l\"\n            num -=\
    \ 50\n        } else if num >= 40 {\n            result += \"xl\"\n          \
    \  num -= 40\n        } else if num >= 10 {\n            result += \"x\"\n   \
    \         num -= 10\n        } else if num >= 9 {\n            result += \"ix\"\
    \n            num -= 9\n        } else if num >= 5 {\n            result += \"\
    v\"\n            num -= 5\n        } else if num >= 4 {\n            result +=\
    \ \"iv\"\n            num -= 4\n        } else if num >= 1 {\n            result\
    \ += \"i\"\n            num -= 1\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(int_to_mini_roman(number: 19) == \"xix\")\nassert(int_to_mini_roman(number:\
    \ 152) == \"clii\")\nassert(int_to_mini_roman(number: 251) == \"ccli\")\nassert(int_to_mini_roman(number:\
    \ 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number: 500) == \"d\")\nassert(int_to_mini_roman(number:\
    \ 1) == \"i\")\nassert(int_to_mini_roman(number: 4) == \"iv\")\nassert(int_to_mini_roman(number:\
    \ 43) == \"xliii\")\nassert(int_to_mini_roman(number: 90) == \"xc\")\nassert(int_to_mini_roman(number:\
    \ 94) == \"xciv\")\nassert(int_to_mini_roman(number: 532) == \"dxxxii\")\nassert(int_to_mini_roman(number:\
    \ 900) == \"cm\")\nassert(int_to_mini_roman(number: 994) == \"cmxciv\")\nassert(int_to_mini_roman(number:\
    \ 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
- exit_code: -4
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    var result = \"\"\n    var\
    \ num = number\n    while num >= 1000 {\n        result += \"m\"\n        num\
    \ -= 1000\n    }\n    while num >= 500 {\n        result += \"d\"\n        num\
    \ -= 500\n    }\n    while num >= 100 {\n        result += \"c\"\n        num\
    \ -= 100\n    }\n    while num >= 50 {\n        result += \"l\"\n        num -=\
    \ 50\n    }\n    while num >= 10 {\n        result += \"x\"\n        num -= 10\n\
    \    }\n    while num >= 5 {\n        result += \"v\"\n        num -= 5\n    }\n\
    \    while num >= 1 {\n        result += \"i\"\n        num -= 1\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(int_to_mini_roman(number:\
    \ 19) == \"xix\")\nassert(int_to_mini_roman(number: 152) == \"clii\")\nassert(int_to_mini_roman(number:\
    \ 251) == \"ccli\")\nassert(int_to_mini_roman(number: 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number:\
    \ 500) == \"d\")\nassert(int_to_mini_roman(number: 1) == \"i\")\nassert(int_to_mini_roman(number:\
    \ 4) == \"iv\")\nassert(int_to_mini_roman(number: 43) == \"xliii\")\nassert(int_to_mini_roman(number:\
    \ 90) == \"xc\")\nassert(int_to_mini_roman(number: 94) == \"xciv\")\nassert(int_to_mini_roman(number:\
    \ 532) == \"dxxxii\")\nassert(int_to_mini_roman(number: 900) == \"cm\")\nassert(int_to_mini_roman(number:\
    \ 994) == \"cmxciv\")\nassert(int_to_mini_roman(number: 1000) == \"m\")"
  status: Exception
  stderr: 'tmpf5kqi_wn/tmpf5kqi_wn.swift:59: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1ea466cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1ea4363b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1ea4363988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1ea43627b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpf5kqi_wn                        0x000055ec012de333 <unavailable> + 4915

    5    libc.so.6                          0x00002b1ea4858460 __libc_start_main +
    245

    6    tmpf5kqi_wn                        0x000055ec012ddf99 <unavailable> + 3993

    '
  stdout: ''
  timestamp: 1660014146
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    var result = \"\"\n    var\
    \ num = number\n    while num > 0 {\n        if num >= 1000 {\n            result\
    \ += \"m\"\n            num -= 1000\n        } else if num >= 900 {\n        \
    \    result += \"cm\"\n            num -= 900\n        } else if num >= 500 {\n\
    \            result += \"d\"\n            num -= 500\n        } else if num >=\
    \ 400 {\n            result += \"cd\"\n            num -= 400\n        } else\
    \ if num >= 100 {\n            result += \"c\"\n            num -= 100\n     \
    \   } else if num >= 90 {\n            result += \"xc\"\n            num -= 90\n\
    \        } else if num >= 50 {\n            result += \"l\"\n            num -=\
    \ 50\n        } else if num >= 40 {\n            result += \"xl\"\n          \
    \  num -= 40\n        } else if num >= 10 {\n            result += \"x\"\n   \
    \         num -= 10\n        } else if num >= 9 {\n            result += \"ix\"\
    \n            num -= 9\n        } else if num >= 5 {\n            result += \"\
    v\"\n            num -= 5\n        } else if num >= 4 {\n            result +=\
    \ \"iv\"\n            num -= 4\n        } else if num >= 1 {\n            result\
    \ += \"i\"\n            num -= 1\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(int_to_mini_roman(number: 19) == \"xix\")\nassert(int_to_mini_roman(number:\
    \ 152) == \"clii\")\nassert(int_to_mini_roman(number: 251) == \"ccli\")\nassert(int_to_mini_roman(number:\
    \ 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number: 500) == \"d\")\nassert(int_to_mini_roman(number:\
    \ 1) == \"i\")\nassert(int_to_mini_roman(number: 4) == \"iv\")\nassert(int_to_mini_roman(number:\
    \ 43) == \"xliii\")\nassert(int_to_mini_roman(number: 90) == \"xc\")\nassert(int_to_mini_roman(number:\
    \ 94) == \"xciv\")\nassert(int_to_mini_roman(number: 532) == \"dxxxii\")\nassert(int_to_mini_roman(number:\
    \ 900) == \"cm\")\nassert(int_to_mini_roman(number: 994) == \"cmxciv\")\nassert(int_to_mini_roman(number:\
    \ 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    var result = \"\"\n    var\
    \ num = number\n    while num > 0 {\n        if num >= 1000 {\n            result\
    \ += \"m\"\n            num -= 1000\n        } else if num >= 900 {\n        \
    \    result += \"cm\"\n            num -= 900\n        } else if num >= 500 {\n\
    \            result += \"d\"\n            num -= 500\n        } else if num >=\
    \ 400 {\n            result += \"cd\"\n            num -= 400\n        } else\
    \ if num >= 100 {\n            result += \"c\"\n            num -= 100\n     \
    \   } else if num >= 90 {\n            result += \"xc\"\n            num -= 90\n\
    \        } else if num >= 50 {\n            result += \"l\"\n            num -=\
    \ 50\n        } else if num >= 40 {\n            result += \"xl\"\n          \
    \  num -= 40\n        } else if num >= 10 {\n            result += \"x\"\n   \
    \         num -= 10\n        } else if num >= 9 {\n            result += \"ix\"\
    \n            num -= 9\n        } else if num >= 5 {\n            result += \"\
    v\"\n            num -= 5\n        } else if num >= 4 {\n            result +=\
    \ \"iv\"\n            num -= 4\n        } else if num >= 1 {\n            result\
    \ += \"i\"\n            num -= 1\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(int_to_mini_roman(number: 19) == \"xix\")\nassert(int_to_mini_roman(number:\
    \ 152) == \"clii\")\nassert(int_to_mini_roman(number: 251) == \"ccli\")\nassert(int_to_mini_roman(number:\
    \ 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number: 500) == \"d\")\nassert(int_to_mini_roman(number:\
    \ 1) == \"i\")\nassert(int_to_mini_roman(number: 4) == \"iv\")\nassert(int_to_mini_roman(number:\
    \ 43) == \"xliii\")\nassert(int_to_mini_roman(number: 90) == \"xc\")\nassert(int_to_mini_roman(number:\
    \ 94) == \"xciv\")\nassert(int_to_mini_roman(number: 532) == \"dxxxii\")\nassert(int_to_mini_roman(number:\
    \ 900) == \"cm\")\nassert(int_to_mini_roman(number: 994) == \"cmxciv\")\nassert(int_to_mini_roman(number:\
    \ 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    var result = \"\"\n    var\
    \ num = number\n    while num > 0 {\n        if num >= 1000 {\n            result\
    \ += \"m\"\n            num -= 1000\n        } else if num >= 900 {\n        \
    \    result += \"cm\"\n            num -= 900\n        } else if num >= 500 {\n\
    \            result += \"d\"\n            num -= 500\n        } else if num >=\
    \ 400 {\n            result += \"cd\"\n            num -= 400\n        } else\
    \ if num >= 100 {\n            result += \"c\"\n            num -= 100\n     \
    \   } else if num >= 90 {\n            result += \"xc\"\n            num -= 90\n\
    \        } else if num >= 50 {\n            result += \"l\"\n            num -=\
    \ 50\n        } else if num >= 40 {\n            result += \"xl\"\n          \
    \  num -= 40\n        } else if num >= 10 {\n            result += \"x\"\n   \
    \         num -= 10\n        } else if num >= 9 {\n            result += \"ix\"\
    \n            num -= 9\n        } else if num >= 5 {\n            result += \"\
    v\"\n            num -= 5\n        } else if num >= 4 {\n            result +=\
    \ \"iv\"\n            num -= 4\n        } else if num >= 1 {\n            result\
    \ += \"i\"\n            num -= 1\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(int_to_mini_roman(number: 19) == \"xix\")\nassert(int_to_mini_roman(number:\
    \ 152) == \"clii\")\nassert(int_to_mini_roman(number: 251) == \"ccli\")\nassert(int_to_mini_roman(number:\
    \ 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number: 500) == \"d\")\nassert(int_to_mini_roman(number:\
    \ 1) == \"i\")\nassert(int_to_mini_roman(number: 4) == \"iv\")\nassert(int_to_mini_roman(number:\
    \ 43) == \"xliii\")\nassert(int_to_mini_roman(number: 90) == \"xc\")\nassert(int_to_mini_roman(number:\
    \ 94) == \"xciv\")\nassert(int_to_mini_roman(number: 532) == \"dxxxii\")\nassert(int_to_mini_roman(number:\
    \ 900) == \"cm\")\nassert(int_to_mini_roman(number: 994) == \"cmxciv\")\nassert(int_to_mini_roman(number:\
    \ 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    var result = \"\"\n    var\
    \ number = number\n    while number > 0 {\n        if number >= 1000 {\n     \
    \       result += \"m\"\n            number -= 1000\n        } else if number\
    \ >= 900 {\n            result += \"cm\"\n            number -= 900\n        }\
    \ else if number >= 500 {\n            result += \"d\"\n            number -=\
    \ 500\n        } else if number >= 400 {\n            result += \"cd\"\n     \
    \       number -= 400\n        } else if number >= 100 {\n            result +=\
    \ \"c\"\n            number -= 100\n        } else if number >= 90 {\n       \
    \     result += \"xc\"\n            number -= 90\n        } else if number >=\
    \ 50 {\n            result += \"l\"\n            number -= 50\n        } else\
    \ if number >= 40 {\n            result += \"xl\"\n            number -= 40\n\
    \        } else if number >= 10 {\n            result += \"x\"\n            number\
    \ -= 10\n        } else if number >= 9 {\n            result += \"ix\"\n     \
    \       number -= 9\n        } else if number >= 5 {\n            result += \"\
    v\"\n            number -= 5\n        } else if number >= 4 {\n            result\
    \ += \"iv\"\n            number -= 4\n        } else if number >= 1 {\n      \
    \      result += \"i\"\n            number -= 1\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(int_to_mini_roman(number:\
    \ 19) == \"xix\")\nassert(int_to_mini_roman(number: 152) == \"clii\")\nassert(int_to_mini_roman(number:\
    \ 251) == \"ccli\")\nassert(int_to_mini_roman(number: 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number:\
    \ 500) == \"d\")\nassert(int_to_mini_roman(number: 1) == \"i\")\nassert(int_to_mini_roman(number:\
    \ 4) == \"iv\")\nassert(int_to_mini_roman(number: 43) == \"xliii\")\nassert(int_to_mini_roman(number:\
    \ 90) == \"xc\")\nassert(int_to_mini_roman(number: 94) == \"xciv\")\nassert(int_to_mini_roman(number:\
    \ 532) == \"dxxxii\")\nassert(int_to_mini_roman(number: 900) == \"cm\")\nassert(int_to_mini_roman(number:\
    \ 994) == \"cmxciv\")\nassert(int_to_mini_roman(number: 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    let roman_numerals = [\"\
    m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\"\
    , \"iv\", \"i\"]\n    let numbers = [1000, 900, 500, 400, 100, 90, 50, 40, 10,\
    \ 9, 5, 4, 1]\n    var result = \"\"\n    var num = number\n    for (index, numeral)\
    \ in roman_numerals.enumerated() {\n        while num >= numbers[index] {\n  \
    \          result += numeral\n            num -= numbers[index]\n        }\n \
    \   }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(int_to_mini_roman(number:\
    \ 19) == \"xix\")\nassert(int_to_mini_roman(number: 152) == \"clii\")\nassert(int_to_mini_roman(number:\
    \ 251) == \"ccli\")\nassert(int_to_mini_roman(number: 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number:\
    \ 500) == \"d\")\nassert(int_to_mini_roman(number: 1) == \"i\")\nassert(int_to_mini_roman(number:\
    \ 4) == \"iv\")\nassert(int_to_mini_roman(number: 43) == \"xliii\")\nassert(int_to_mini_roman(number:\
    \ 90) == \"xc\")\nassert(int_to_mini_roman(number: 94) == \"xciv\")\nassert(int_to_mini_roman(number:\
    \ 532) == \"dxxxii\")\nassert(int_to_mini_roman(number: 900) == \"cm\")\nassert(int_to_mini_roman(number:\
    \ 994) == \"cmxciv\")\nassert(int_to_mini_roman(number: 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    var result = \"\"\n    var\
    \ num = number\n    while num >= 1000 {\n        result += \"m\"\n        num\
    \ -= 1000\n    }\n    while num >= 900 {\n        result += \"cm\"\n        num\
    \ -= 900\n    }\n    while num >= 500 {\n        result += \"d\"\n        num\
    \ -= 500\n    }\n    while num >= 400 {\n        result += \"cd\"\n        num\
    \ -= 400\n    }\n    while num >= 100 {\n        result += \"c\"\n        num\
    \ -= 100\n    }\n    while num >= 90 {\n        result += \"xc\"\n        num\
    \ -= 90\n    }\n    while num >= 50 {\n        result += \"l\"\n        num -=\
    \ 50\n    }\n    while num >= 40 {\n        result += \"xl\"\n        num -= 40\n\
    \    }\n    while num >= 10 {\n        result += \"x\"\n        num -= 10\n  \
    \  }\n    while num >= 9 {\n        result += \"ix\"\n        num -= 9\n    }\n\
    \    while num >= 5 {\n        result += \"v\"\n        num -= 5\n    }\n    while\
    \ num >= 4 {\n        result += \"iv\"\n        num -= 4\n    }\n    while num\
    \ >= 1 {\n        result += \"i\"\n        num -= 1\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(int_to_mini_roman(number: 19) == \"xix\")\nassert(int_to_mini_roman(number:\
    \ 152) == \"clii\")\nassert(int_to_mini_roman(number: 251) == \"ccli\")\nassert(int_to_mini_roman(number:\
    \ 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number: 500) == \"d\")\nassert(int_to_mini_roman(number:\
    \ 1) == \"i\")\nassert(int_to_mini_roman(number: 4) == \"iv\")\nassert(int_to_mini_roman(number:\
    \ 43) == \"xliii\")\nassert(int_to_mini_roman(number: 90) == \"xc\")\nassert(int_to_mini_roman(number:\
    \ 94) == \"xciv\")\nassert(int_to_mini_roman(number: 532) == \"dxxxii\")\nassert(int_to_mini_roman(number:\
    \ 900) == \"cm\")\nassert(int_to_mini_roman(number: 994) == \"cmxciv\")\nassert(int_to_mini_roman(number:\
    \ 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
- exit_code: -4
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    let roman_numerals = [\"\
    i\", \"v\", \"x\", \"l\", \"c\", \"d\", \"m\"]\n    var num = number\n    var\
    \ result = \"\"\n    var i = 0\n    while num > 0 {\n        let digit = num %\
    \ 10\n        if digit == 4 {\n            result = roman_numerals[i] + roman_numerals[i\
    \ + 1] + result\n        } else if digit == 9 {\n            result = roman_numerals[i]\
    \ + roman_numerals[i + 2] + result\n        } else {\n            let roman_digit\
    \ = digit < 5 ? roman_numerals[i] : roman_numerals[i + 1]\n            let count\
    \ = digit < 5 ? digit : digit - 5\n            result = String(repeating: roman_digit,\
    \ count: count) + result\n        }\n        num /= 10\n        i += 2\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(int_to_mini_roman(number:\
    \ 19) == \"xix\")\nassert(int_to_mini_roman(number: 152) == \"clii\")\nassert(int_to_mini_roman(number:\
    \ 251) == \"ccli\")\nassert(int_to_mini_roman(number: 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number:\
    \ 500) == \"d\")\nassert(int_to_mini_roman(number: 1) == \"i\")\nassert(int_to_mini_roman(number:\
    \ 4) == \"iv\")\nassert(int_to_mini_roman(number: 43) == \"xliii\")\nassert(int_to_mini_roman(number:\
    \ 90) == \"xc\")\nassert(int_to_mini_roman(number: 94) == \"xciv\")\nassert(int_to_mini_roman(number:\
    \ 532) == \"dxxxii\")\nassert(int_to_mini_roman(number: 900) == \"cm\")\nassert(int_to_mini_roman(number:\
    \ 994) == \"cmxciv\")\nassert(int_to_mini_roman(number: 1000) == \"m\")"
  status: Exception
  stderr: 'tmpbt8w3t2h/tmpbt8w3t2h.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2ce69e1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2ce66d8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2ce66d8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2ce66d77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbt8w3t2h                        0x000055ee8ff4d689 <unavailable> + 5769

    5    libc.so.6                          0x00002b2ce6bcd460 __libc_start_main +
    245

    6    tmpbt8w3t2h                        0x000055ee8ff4d229 <unavailable> + 4649

    '
  stdout: ''
  timestamp: 1660014146
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    var result = \"\"\n    var\
    \ num = number\n    while num > 0 {\n        if num >= 1000 {\n            result\
    \ += \"m\"\n            num -= 1000\n        } else if num >= 900 {\n        \
    \    result += \"cm\"\n            num -= 900\n        } else if num >= 500 {\n\
    \            result += \"d\"\n            num -= 500\n        } else if num >=\
    \ 400 {\n            result += \"cd\"\n            num -= 400\n        } else\
    \ if num >= 100 {\n            result += \"c\"\n            num -= 100\n     \
    \   } else if num >= 90 {\n            result += \"xc\"\n            num -= 90\n\
    \        } else if num >= 50 {\n            result += \"l\"\n            num -=\
    \ 50\n        } else if num >= 40 {\n            result += \"xl\"\n          \
    \  num -= 40\n        } else if num >= 10 {\n            result += \"x\"\n   \
    \         num -= 10\n        } else if num >= 9 {\n            result += \"ix\"\
    \n            num -= 9\n        } else if num >= 5 {\n            result += \"\
    v\"\n            num -= 5\n        } else if num >= 4 {\n            result +=\
    \ \"iv\"\n            num -= 4\n        } else if num >= 1 {\n            result\
    \ += \"i\"\n            num -= 1\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(int_to_mini_roman(number: 19) == \"xix\")\nassert(int_to_mini_roman(number:\
    \ 152) == \"clii\")\nassert(int_to_mini_roman(number: 251) == \"ccli\")\nassert(int_to_mini_roman(number:\
    \ 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number: 500) == \"d\")\nassert(int_to_mini_roman(number:\
    \ 1) == \"i\")\nassert(int_to_mini_roman(number: 4) == \"iv\")\nassert(int_to_mini_roman(number:\
    \ 43) == \"xliii\")\nassert(int_to_mini_roman(number: 90) == \"xc\")\nassert(int_to_mini_roman(number:\
    \ 94) == \"xciv\")\nassert(int_to_mini_roman(number: 532) == \"dxxxii\")\nassert(int_to_mini_roman(number:\
    \ 900) == \"cm\")\nassert(int_to_mini_roman(number: 994) == \"cmxciv\")\nassert(int_to_mini_roman(number:\
    \ 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
- exit_code: 1
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    let roman_numerals = [\"\
    i\", \"v\", \"x\", \"l\", \"c\", \"d\", \"m\"]\n    let roman_values = [1, 5,\
    \ 10, 50, 100, 500, 1000]\n    var result = \"\"\n    var remainder = number\n\
    \    var index = roman_values.count - 1\n    while remainder > 0 {\n        let\
    \ divisor = roman_values[index]\n        let quotient = remainder / divisor\n\
    \        remainder = remainder % divisor\n        if quotient == 4 {\n       \
    \     result += roman_numerals[index] + roman_numerals[index + 1]\n        } else\
    \ if quotient == 9 {\n            result += roman_numerals[index] + roman_numerals[index\
    \ + 2]\n        } else {\n            if quotient >= 5 {\n                result\
    \ += roman_numerals[index + 1]\n                quotient -= 5\n            }\n\
    \            for _ in 0..<quotient {\n                result += roman_numerals[index]\n\
    \            }\n        }\n        index -= 2\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(int_to_mini_roman(number: 19) == \"xix\")\nassert(int_to_mini_roman(number:\
    \ 152) == \"clii\")\nassert(int_to_mini_roman(number: 251) == \"ccli\")\nassert(int_to_mini_roman(number:\
    \ 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number: 500) == \"d\")\nassert(int_to_mini_roman(number:\
    \ 1) == \"i\")\nassert(int_to_mini_roman(number: 4) == \"iv\")\nassert(int_to_mini_roman(number:\
    \ 43) == \"xliii\")\nassert(int_to_mini_roman(number: 90) == \"xc\")\nassert(int_to_mini_roman(number:\
    \ 94) == \"xciv\")\nassert(int_to_mini_roman(number: 532) == \"dxxxii\")\nassert(int_to_mini_roman(number:\
    \ 900) == \"cm\")\nassert(int_to_mini_roman(number: 994) == \"cmxciv\")\nassert(int_to_mini_roman(number:\
    \ 1000) == \"m\")"
  status: SyntaxError
  stderr: "/tmp/tmpa24o1b_d.swift:29:26: error: left side of mutating operator isn't\
    \ mutable: 'quotient' is a 'let' constant\n                quotient -= 5\n   \
    \             ~~~~~~~~ ^\n/tmp/tmpa24o1b_d.swift:20:9: note: change 'let' to 'var'\
    \ to make it mutable\n        let quotient = remainder / divisor\n        ^~~\n\
    \        var\n"
  stdout: ''
  timestamp: 1660014146
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    var result = \"\"\n    var\
    \ n = number\n    while n > 0 {\n        if n >= 1000 {\n            result +=\
    \ \"m\"\n            n -= 1000\n        } else if n >= 900 {\n            result\
    \ += \"cm\"\n            n -= 900\n        } else if n >= 500 {\n            result\
    \ += \"d\"\n            n -= 500\n        } else if n >= 400 {\n            result\
    \ += \"cd\"\n            n -= 400\n        } else if n >= 100 {\n            result\
    \ += \"c\"\n            n -= 100\n        } else if n >= 90 {\n            result\
    \ += \"xc\"\n            n -= 90\n        } else if n >= 50 {\n            result\
    \ += \"l\"\n            n -= 50\n        } else if n >= 40 {\n            result\
    \ += \"xl\"\n            n -= 40\n        } else if n >= 10 {\n            result\
    \ += \"x\"\n            n -= 10\n        } else if n >= 9 {\n            result\
    \ += \"ix\"\n            n -= 9\n        } else if n >= 5 {\n            result\
    \ += \"v\"\n            n -= 5\n        } else if n >= 4 {\n            result\
    \ += \"iv\"\n            n -= 4\n        } else if n >= 1 {\n            result\
    \ += \"i\"\n            n -= 1\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(int_to_mini_roman(number: 19) == \"xix\")\nassert(int_to_mini_roman(number:\
    \ 152) == \"clii\")\nassert(int_to_mini_roman(number: 251) == \"ccli\")\nassert(int_to_mini_roman(number:\
    \ 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number: 500) == \"d\")\nassert(int_to_mini_roman(number:\
    \ 1) == \"i\")\nassert(int_to_mini_roman(number: 4) == \"iv\")\nassert(int_to_mini_roman(number:\
    \ 43) == \"xliii\")\nassert(int_to_mini_roman(number: 90) == \"xc\")\nassert(int_to_mini_roman(number:\
    \ 94) == \"xciv\")\nassert(int_to_mini_roman(number: 532) == \"dxxxii\")\nassert(int_to_mini_roman(number:\
    \ 900) == \"cm\")\nassert(int_to_mini_roman(number: 994) == \"cmxciv\")\nassert(int_to_mini_roman(number:\
    \ 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    var num = number\n    var\
    \ result = \"\"\n    while num > 0 {\n        if num >= 1000 {\n            result\
    \ += \"m\"\n            num -= 1000\n        } else if num >= 900 {\n        \
    \    result += \"cm\"\n            num -= 900\n        } else if num >= 500 {\n\
    \            result += \"d\"\n            num -= 500\n        } else if num >=\
    \ 400 {\n            result += \"cd\"\n            num -= 400\n        } else\
    \ if num >= 100 {\n            result += \"c\"\n            num -= 100\n     \
    \   } else if num >= 90 {\n            result += \"xc\"\n            num -= 90\n\
    \        } else if num >= 50 {\n            result += \"l\"\n            num -=\
    \ 50\n        } else if num >= 40 {\n            result += \"xl\"\n          \
    \  num -= 40\n        } else if num >= 10 {\n            result += \"x\"\n   \
    \         num -= 10\n        } else if num >= 9 {\n            result += \"ix\"\
    \n            num -= 9\n        } else if num >= 5 {\n            result += \"\
    v\"\n            num -= 5\n        } else if num >= 4 {\n            result +=\
    \ \"iv\"\n            num -= 4\n        } else if num >= 1 {\n            result\
    \ += \"i\"\n            num -= 1\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(int_to_mini_roman(number: 19) == \"xix\")\nassert(int_to_mini_roman(number:\
    \ 152) == \"clii\")\nassert(int_to_mini_roman(number: 251) == \"ccli\")\nassert(int_to_mini_roman(number:\
    \ 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number: 500) == \"d\")\nassert(int_to_mini_roman(number:\
    \ 1) == \"i\")\nassert(int_to_mini_roman(number: 4) == \"iv\")\nassert(int_to_mini_roman(number:\
    \ 43) == \"xliii\")\nassert(int_to_mini_roman(number: 90) == \"xc\")\nassert(int_to_mini_roman(number:\
    \ 94) == \"xciv\")\nassert(int_to_mini_roman(number: 532) == \"dxxxii\")\nassert(int_to_mini_roman(number:\
    \ 900) == \"cm\")\nassert(int_to_mini_roman(number: 994) == \"cmxciv\")\nassert(int_to_mini_roman(number:\
    \ 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    var result = \"\"\n    var\
    \ num = number\n    while num > 0 {\n        if num >= 1000 {\n            result\
    \ += \"m\"\n            num -= 1000\n        } else if num >= 900 {\n        \
    \    result += \"cm\"\n            num -= 900\n        } else if num >= 500 {\n\
    \            result += \"d\"\n            num -= 500\n        } else if num >=\
    \ 400 {\n            result += \"cd\"\n            num -= 400\n        } else\
    \ if num >= 100 {\n            result += \"c\"\n            num -= 100\n     \
    \   } else if num >= 90 {\n            result += \"xc\"\n            num -= 90\n\
    \        } else if num >= 50 {\n            result += \"l\"\n            num -=\
    \ 50\n        } else if num >= 40 {\n            result += \"xl\"\n          \
    \  num -= 40\n        } else if num >= 10 {\n            result += \"x\"\n   \
    \         num -= 10\n        } else if num >= 9 {\n            result += \"ix\"\
    \n            num -= 9\n        } else if num >= 5 {\n            result += \"\
    v\"\n            num -= 5\n        } else if num >= 4 {\n            result +=\
    \ \"iv\"\n            num -= 4\n        } else if num >= 1 {\n            result\
    \ += \"i\"\n            num -= 1\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(int_to_mini_roman(number: 19) == \"xix\")\nassert(int_to_mini_roman(number:\
    \ 152) == \"clii\")\nassert(int_to_mini_roman(number: 251) == \"ccli\")\nassert(int_to_mini_roman(number:\
    \ 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number: 500) == \"d\")\nassert(int_to_mini_roman(number:\
    \ 1) == \"i\")\nassert(int_to_mini_roman(number: 4) == \"iv\")\nassert(int_to_mini_roman(number:\
    \ 43) == \"xliii\")\nassert(int_to_mini_roman(number: 90) == \"xc\")\nassert(int_to_mini_roman(number:\
    \ 94) == \"xciv\")\nassert(int_to_mini_roman(number: 532) == \"dxxxii\")\nassert(int_to_mini_roman(number:\
    \ 900) == \"cm\")\nassert(int_to_mini_roman(number: 994) == \"cmxciv\")\nassert(int_to_mini_roman(number:\
    \ 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    var result = \"\"\n    var\
    \ num = number\n    while num > 0 {\n        if num >= 1000 {\n            result\
    \ += \"m\"\n            num -= 1000\n        } else if num >= 900 {\n        \
    \    result += \"cm\"\n            num -= 900\n        } else if num >= 500 {\n\
    \            result += \"d\"\n            num -= 500\n        } else if num >=\
    \ 400 {\n            result += \"cd\"\n            num -= 400\n        } else\
    \ if num >= 100 {\n            result += \"c\"\n            num -= 100\n     \
    \   } else if num >= 90 {\n            result += \"xc\"\n            num -= 90\n\
    \        } else if num >= 50 {\n            result += \"l\"\n            num -=\
    \ 50\n        } else if num >= 40 {\n            result += \"xl\"\n          \
    \  num -= 40\n        } else if num >= 10 {\n            result += \"x\"\n   \
    \         num -= 10\n        } else if num >= 9 {\n            result += \"ix\"\
    \n            num -= 9\n        } else if num >= 5 {\n            result += \"\
    v\"\n            num -= 5\n        } else if num >= 4 {\n            result +=\
    \ \"iv\"\n            num -= 4\n        } else if num >= 1 {\n            result\
    \ += \"i\"\n            num -= 1\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(int_to_mini_roman(number: 19) == \"xix\")\nassert(int_to_mini_roman(number:\
    \ 152) == \"clii\")\nassert(int_to_mini_roman(number: 251) == \"ccli\")\nassert(int_to_mini_roman(number:\
    \ 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number: 500) == \"d\")\nassert(int_to_mini_roman(number:\
    \ 1) == \"i\")\nassert(int_to_mini_roman(number: 4) == \"iv\")\nassert(int_to_mini_roman(number:\
    \ 43) == \"xliii\")\nassert(int_to_mini_roman(number: 90) == \"xc\")\nassert(int_to_mini_roman(number:\
    \ 94) == \"xciv\")\nassert(int_to_mini_roman(number: 532) == \"dxxxii\")\nassert(int_to_mini_roman(number:\
    \ 900) == \"cm\")\nassert(int_to_mini_roman(number: 994) == \"cmxciv\")\nassert(int_to_mini_roman(number:\
    \ 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    var roman = \"\"\n    var\
    \ num = number\n    while num > 0 {\n        if num >= 1000 {\n            roman\
    \ += \"m\"\n            num -= 1000\n        } else if num >= 900 {\n        \
    \    roman += \"cm\"\n            num -= 900\n        } else if num >= 500 {\n\
    \            roman += \"d\"\n            num -= 500\n        } else if num >=\
    \ 400 {\n            roman += \"cd\"\n            num -= 400\n        } else if\
    \ num >= 100 {\n            roman += \"c\"\n            num -= 100\n        }\
    \ else if num >= 90 {\n            roman += \"xc\"\n            num -= 90\n  \
    \      } else if num >= 50 {\n            roman += \"l\"\n            num -= 50\n\
    \        } else if num >= 40 {\n            roman += \"xl\"\n            num -=\
    \ 40\n        } else if num >= 10 {\n            roman += \"x\"\n            num\
    \ -= 10\n        } else if num >= 9 {\n            roman += \"ix\"\n         \
    \   num -= 9\n        } else if num >= 5 {\n            roman += \"v\"\n     \
    \       num -= 5\n        } else if num >= 4 {\n            roman += \"iv\"\n\
    \            num -= 4\n        } else if num >= 1 {\n            roman += \"i\"\
    \n            num -= 1\n        }\n    }\n    return roman\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(int_to_mini_roman(number: 19) == \"xix\")\nassert(int_to_mini_roman(number:\
    \ 152) == \"clii\")\nassert(int_to_mini_roman(number: 251) == \"ccli\")\nassert(int_to_mini_roman(number:\
    \ 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number: 500) == \"d\")\nassert(int_to_mini_roman(number:\
    \ 1) == \"i\")\nassert(int_to_mini_roman(number: 4) == \"iv\")\nassert(int_to_mini_roman(number:\
    \ 43) == \"xliii\")\nassert(int_to_mini_roman(number: 90) == \"xc\")\nassert(int_to_mini_roman(number:\
    \ 94) == \"xciv\")\nassert(int_to_mini_roman(number: 532) == \"dxxxii\")\nassert(int_to_mini_roman(number:\
    \ 900) == \"cm\")\nassert(int_to_mini_roman(number: 994) == \"cmxciv\")\nassert(int_to_mini_roman(number:\
    \ 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    var result = \"\"\n    var\
    \ num = number\n    while num > 0 {\n        if num >= 1000 {\n            result\
    \ += \"m\"\n            num -= 1000\n        } else if num >= 900 {\n        \
    \    result += \"cm\"\n            num -= 900\n        } else if num >= 500 {\n\
    \            result += \"d\"\n            num -= 500\n        } else if num >=\
    \ 400 {\n            result += \"cd\"\n            num -= 400\n        } else\
    \ if num >= 100 {\n            result += \"c\"\n            num -= 100\n     \
    \   } else if num >= 90 {\n            result += \"xc\"\n            num -= 90\n\
    \        } else if num >= 50 {\n            result += \"l\"\n            num -=\
    \ 50\n        } else if num >= 40 {\n            result += \"xl\"\n          \
    \  num -= 40\n        } else if num >= 10 {\n            result += \"x\"\n   \
    \         num -= 10\n        } else if num >= 9 {\n            result += \"ix\"\
    \n            num -= 9\n        } else if num >= 5 {\n            result += \"\
    v\"\n            num -= 5\n        } else if num >= 4 {\n            result +=\
    \ \"iv\"\n            num -= 4\n        } else if num >= 1 {\n            result\
    \ += \"i\"\n            num -= 1\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(int_to_mini_roman(number: 19) == \"xix\")\nassert(int_to_mini_roman(number:\
    \ 152) == \"clii\")\nassert(int_to_mini_roman(number: 251) == \"ccli\")\nassert(int_to_mini_roman(number:\
    \ 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number: 500) == \"d\")\nassert(int_to_mini_roman(number:\
    \ 1) == \"i\")\nassert(int_to_mini_roman(number: 4) == \"iv\")\nassert(int_to_mini_roman(number:\
    \ 43) == \"xliii\")\nassert(int_to_mini_roman(number: 90) == \"xc\")\nassert(int_to_mini_roman(number:\
    \ 94) == \"xciv\")\nassert(int_to_mini_roman(number: 532) == \"dxxxii\")\nassert(int_to_mini_roman(number:\
    \ 900) == \"cm\")\nassert(int_to_mini_roman(number: 994) == \"cmxciv\")\nassert(int_to_mini_roman(number:\
    \ 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    var num = number\n    var\
    \ roman = \"\"\n    while num > 0 {\n        if num >= 1000 {\n            roman\
    \ += \"m\"\n            num -= 1000\n        } else if num >= 900 {\n        \
    \    roman += \"cm\"\n            num -= 900\n        } else if num >= 500 {\n\
    \            roman += \"d\"\n            num -= 500\n        } else if num >=\
    \ 400 {\n            roman += \"cd\"\n            num -= 400\n        } else if\
    \ num >= 100 {\n            roman += \"c\"\n            num -= 100\n        }\
    \ else if num >= 90 {\n            roman += \"xc\"\n            num -= 90\n  \
    \      } else if num >= 50 {\n            roman += \"l\"\n            num -= 50\n\
    \        } else if num >= 40 {\n            roman += \"xl\"\n            num -=\
    \ 40\n        } else if num >= 10 {\n            roman += \"x\"\n            num\
    \ -= 10\n        } else if num >= 9 {\n            roman += \"ix\"\n         \
    \   num -= 9\n        } else if num >= 5 {\n            roman += \"v\"\n     \
    \       num -= 5\n        } else if num >= 4 {\n            roman += \"iv\"\n\
    \            num -= 4\n        } else if num >= 1 {\n            roman += \"i\"\
    \n            num -= 1\n        }\n    }\n    return roman\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(int_to_mini_roman(number: 19) == \"xix\")\nassert(int_to_mini_roman(number:\
    \ 152) == \"clii\")\nassert(int_to_mini_roman(number: 251) == \"ccli\")\nassert(int_to_mini_roman(number:\
    \ 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number: 500) == \"d\")\nassert(int_to_mini_roman(number:\
    \ 1) == \"i\")\nassert(int_to_mini_roman(number: 4) == \"iv\")\nassert(int_to_mini_roman(number:\
    \ 43) == \"xliii\")\nassert(int_to_mini_roman(number: 90) == \"xc\")\nassert(int_to_mini_roman(number:\
    \ 94) == \"xciv\")\nassert(int_to_mini_roman(number: 532) == \"dxxxii\")\nassert(int_to_mini_roman(number:\
    \ 900) == \"cm\")\nassert(int_to_mini_roman(number: 994) == \"cmxciv\")\nassert(int_to_mini_roman(number:\
    \ 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    var result = \"\"\n    var\
    \ num = number\n    while num > 0 {\n        if num >= 1000 {\n            result\
    \ += \"m\"\n            num -= 1000\n        } else if num >= 900 {\n        \
    \    result += \"cm\"\n            num -= 900\n        } else if num >= 500 {\n\
    \            result += \"d\"\n            num -= 500\n        } else if num >=\
    \ 400 {\n            result += \"cd\"\n            num -= 400\n        } else\
    \ if num >= 100 {\n            result += \"c\"\n            num -= 100\n     \
    \   } else if num >= 90 {\n            result += \"xc\"\n            num -= 90\n\
    \        } else if num >= 50 {\n            result += \"l\"\n            num -=\
    \ 50\n        } else if num >= 40 {\n            result += \"xl\"\n          \
    \  num -= 40\n        } else if num >= 10 {\n            result += \"x\"\n   \
    \         num -= 10\n        } else if num >= 9 {\n            result += \"ix\"\
    \n            num -= 9\n        } else if num >= 5 {\n            result += \"\
    v\"\n            num -= 5\n        } else if num >= 4 {\n            result +=\
    \ \"iv\"\n            num -= 4\n        } else if num >= 1 {\n            result\
    \ += \"i\"\n            num -= 1\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(int_to_mini_roman(number: 19) == \"xix\")\nassert(int_to_mini_roman(number:\
    \ 152) == \"clii\")\nassert(int_to_mini_roman(number: 251) == \"ccli\")\nassert(int_to_mini_roman(number:\
    \ 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number: 500) == \"d\")\nassert(int_to_mini_roman(number:\
    \ 1) == \"i\")\nassert(int_to_mini_roman(number: 4) == \"iv\")\nassert(int_to_mini_roman(number:\
    \ 43) == \"xliii\")\nassert(int_to_mini_roman(number: 90) == \"xc\")\nassert(int_to_mini_roman(number:\
    \ 94) == \"xciv\")\nassert(int_to_mini_roman(number: 532) == \"dxxxii\")\nassert(int_to_mini_roman(number:\
    \ 900) == \"cm\")\nassert(int_to_mini_roman(number: 994) == \"cmxciv\")\nassert(int_to_mini_roman(number:\
    \ 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    var result = \"\"\n    var\
    \ num = number\n    let symbols = [\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\"\
    , \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"]\n    let values = [1000,\
    \ 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]\n    for (index, symbol) in\
    \ symbols.enumerated() {\n        while num >= values[index] {\n            num\
    \ -= values[index]\n            result += symbol\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(int_to_mini_roman(number:\
    \ 19) == \"xix\")\nassert(int_to_mini_roman(number: 152) == \"clii\")\nassert(int_to_mini_roman(number:\
    \ 251) == \"ccli\")\nassert(int_to_mini_roman(number: 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number:\
    \ 500) == \"d\")\nassert(int_to_mini_roman(number: 1) == \"i\")\nassert(int_to_mini_roman(number:\
    \ 4) == \"iv\")\nassert(int_to_mini_roman(number: 43) == \"xliii\")\nassert(int_to_mini_roman(number:\
    \ 90) == \"xc\")\nassert(int_to_mini_roman(number: 94) == \"xciv\")\nassert(int_to_mini_roman(number:\
    \ 532) == \"dxxxii\")\nassert(int_to_mini_roman(number: 900) == \"cm\")\nassert(int_to_mini_roman(number:\
    \ 994) == \"cmxciv\")\nassert(int_to_mini_roman(number: 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    var result = \"\"\n    var\
    \ num = number\n    while num > 0 {\n        if num >= 1000 {\n            result\
    \ += \"m\"\n            num -= 1000\n        } else if num >= 900 {\n        \
    \    result += \"cm\"\n            num -= 900\n        } else if num >= 500 {\n\
    \            result += \"d\"\n            num -= 500\n        } else if num >=\
    \ 400 {\n            result += \"cd\"\n            num -= 400\n        } else\
    \ if num >= 100 {\n            result += \"c\"\n            num -= 100\n     \
    \   } else if num >= 90 {\n            result += \"xc\"\n            num -= 90\n\
    \        } else if num >= 50 {\n            result += \"l\"\n            num -=\
    \ 50\n        } else if num >= 40 {\n            result += \"xl\"\n          \
    \  num -= 40\n        } else if num >= 10 {\n            result += \"x\"\n   \
    \         num -= 10\n        } else if num >= 9 {\n            result += \"ix\"\
    \n            num -= 9\n        } else if num >= 5 {\n            result += \"\
    v\"\n            num -= 5\n        } else if num >= 4 {\n            result +=\
    \ \"iv\"\n            num -= 4\n        } else if num >= 1 {\n            result\
    \ += \"i\"\n            num -= 1\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(int_to_mini_roman(number: 19) == \"xix\")\nassert(int_to_mini_roman(number:\
    \ 152) == \"clii\")\nassert(int_to_mini_roman(number: 251) == \"ccli\")\nassert(int_to_mini_roman(number:\
    \ 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number: 500) == \"d\")\nassert(int_to_mini_roman(number:\
    \ 1) == \"i\")\nassert(int_to_mini_roman(number: 4) == \"iv\")\nassert(int_to_mini_roman(number:\
    \ 43) == \"xliii\")\nassert(int_to_mini_roman(number: 90) == \"xc\")\nassert(int_to_mini_roman(number:\
    \ 94) == \"xciv\")\nassert(int_to_mini_roman(number: 532) == \"dxxxii\")\nassert(int_to_mini_roman(number:\
    \ 900) == \"cm\")\nassert(int_to_mini_roman(number: 994) == \"cmxciv\")\nassert(int_to_mini_roman(number:\
    \ 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    var result = \"\"\n    var\
    \ num = number\n    while num > 0 {\n        if num >= 1000 {\n            result\
    \ += \"m\"\n            num -= 1000\n        } else if num >= 900 {\n        \
    \    result += \"cm\"\n            num -= 900\n        } else if num >= 500 {\n\
    \            result += \"d\"\n            num -= 500\n        } else if num >=\
    \ 400 {\n            result += \"cd\"\n            num -= 400\n        } else\
    \ if num >= 100 {\n            result += \"c\"\n            num -= 100\n     \
    \   } else if num >= 90 {\n            result += \"xc\"\n            num -= 90\n\
    \        } else if num >= 50 {\n            result += \"l\"\n            num -=\
    \ 50\n        } else if num >= 40 {\n            result += \"xl\"\n          \
    \  num -= 40\n        } else if num >= 10 {\n            result += \"x\"\n   \
    \         num -= 10\n        } else if num >= 9 {\n            result += \"ix\"\
    \n            num -= 9\n        } else if num >= 5 {\n            result += \"\
    v\"\n            num -= 5\n        } else if num >= 4 {\n            result +=\
    \ \"iv\"\n            num -= 4\n        } else if num >= 1 {\n            result\
    \ += \"i\"\n            num -= 1\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(int_to_mini_roman(number: 19) == \"xix\")\nassert(int_to_mini_roman(number:\
    \ 152) == \"clii\")\nassert(int_to_mini_roman(number: 251) == \"ccli\")\nassert(int_to_mini_roman(number:\
    \ 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number: 500) == \"d\")\nassert(int_to_mini_roman(number:\
    \ 1) == \"i\")\nassert(int_to_mini_roman(number: 4) == \"iv\")\nassert(int_to_mini_roman(number:\
    \ 43) == \"xliii\")\nassert(int_to_mini_roman(number: 90) == \"xc\")\nassert(int_to_mini_roman(number:\
    \ 94) == \"xciv\")\nassert(int_to_mini_roman(number: 532) == \"dxxxii\")\nassert(int_to_mini_roman(number:\
    \ 900) == \"cm\")\nassert(int_to_mini_roman(number: 994) == \"cmxciv\")\nassert(int_to_mini_roman(number:\
    \ 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    var result = \"\"\n    var\
    \ num = number\n    while num >= 1000 {\n        result += \"m\"\n        num\
    \ -= 1000\n    }\n    while num >= 900 {\n        result += \"cm\"\n        num\
    \ -= 900\n    }\n    while num >= 500 {\n        result += \"d\"\n        num\
    \ -= 500\n    }\n    while num >= 400 {\n        result += \"cd\"\n        num\
    \ -= 400\n    }\n    while num >= 100 {\n        result += \"c\"\n        num\
    \ -= 100\n    }\n    while num >= 90 {\n        result += \"xc\"\n        num\
    \ -= 90\n    }\n    while num >= 50 {\n        result += \"l\"\n        num -=\
    \ 50\n    }\n    while num >= 40 {\n        result += \"xl\"\n        num -= 40\n\
    \    }\n    while num >= 10 {\n        result += \"x\"\n        num -= 10\n  \
    \  }\n    while num >= 9 {\n        result += \"ix\"\n        num -= 9\n    }\n\
    \    while num >= 5 {\n        result += \"v\"\n        num -= 5\n    }\n    while\
    \ num >= 4 {\n        result += \"iv\"\n        num -= 4\n    }\n    while num\
    \ >= 1 {\n        result += \"i\"\n        num -= 1\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(int_to_mini_roman(number: 19) == \"xix\")\nassert(int_to_mini_roman(number:\
    \ 152) == \"clii\")\nassert(int_to_mini_roman(number: 251) == \"ccli\")\nassert(int_to_mini_roman(number:\
    \ 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number: 500) == \"d\")\nassert(int_to_mini_roman(number:\
    \ 1) == \"i\")\nassert(int_to_mini_roman(number: 4) == \"iv\")\nassert(int_to_mini_roman(number:\
    \ 43) == \"xliii\")\nassert(int_to_mini_roman(number: 90) == \"xc\")\nassert(int_to_mini_roman(number:\
    \ 94) == \"xciv\")\nassert(int_to_mini_roman(number: 532) == \"dxxxii\")\nassert(int_to_mini_roman(number:\
    \ 900) == \"cm\")\nassert(int_to_mini_roman(number: 994) == \"cmxciv\")\nassert(int_to_mini_roman(number:\
    \ 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    var result = \"\"\n    var\
    \ num = number\n    while num > 0 {\n        if num >= 1000 {\n            result\
    \ += \"m\"\n            num -= 1000\n        } else if num >= 900 {\n        \
    \    result += \"cm\"\n            num -= 900\n        } else if num >= 500 {\n\
    \            result += \"d\"\n            num -= 500\n        } else if num >=\
    \ 400 {\n            result += \"cd\"\n            num -= 400\n        } else\
    \ if num >= 100 {\n            result += \"c\"\n            num -= 100\n     \
    \   } else if num >= 90 {\n            result += \"xc\"\n            num -= 90\n\
    \        } else if num >= 50 {\n            result += \"l\"\n            num -=\
    \ 50\n        } else if num >= 40 {\n            result += \"xl\"\n          \
    \  num -= 40\n        } else if num >= 10 {\n            result += \"x\"\n   \
    \         num -= 10\n        } else if num >= 9 {\n            result += \"ix\"\
    \n            num -= 9\n        } else if num >= 5 {\n            result += \"\
    v\"\n            num -= 5\n        } else if num >= 4 {\n            result +=\
    \ \"iv\"\n            num -= 4\n        } else if num >= 1 {\n            result\
    \ += \"i\"\n            num -= 1\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(int_to_mini_roman(number: 19) == \"xix\")\nassert(int_to_mini_roman(number:\
    \ 152) == \"clii\")\nassert(int_to_mini_roman(number: 251) == \"ccli\")\nassert(int_to_mini_roman(number:\
    \ 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number: 500) == \"d\")\nassert(int_to_mini_roman(number:\
    \ 1) == \"i\")\nassert(int_to_mini_roman(number: 4) == \"iv\")\nassert(int_to_mini_roman(number:\
    \ 43) == \"xliii\")\nassert(int_to_mini_roman(number: 90) == \"xc\")\nassert(int_to_mini_roman(number:\
    \ 94) == \"xciv\")\nassert(int_to_mini_roman(number: 532) == \"dxxxii\")\nassert(int_to_mini_roman(number:\
    \ 900) == \"cm\")\nassert(int_to_mini_roman(number: 994) == \"cmxciv\")\nassert(int_to_mini_roman(number:\
    \ 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    let roman_numerals = [\"\
    m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\"\
    , \"iv\", \"i\"]\n    let decimal_numbers = [1000, 900, 500, 400, 100, 90, 50,\
    \ 40, 10, 9, 5, 4, 1]\n    var result = \"\"\n    var number = number\n    for\
    \ (index, numeral) in roman_numerals.enumerated() {\n        while number >= decimal_numbers[index]\
    \ {\n            result += numeral\n            number -= decimal_numbers[index]\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(int_to_mini_roman(number: 19) == \"xix\")\nassert(int_to_mini_roman(number:\
    \ 152) == \"clii\")\nassert(int_to_mini_roman(number: 251) == \"ccli\")\nassert(int_to_mini_roman(number:\
    \ 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number: 500) == \"d\")\nassert(int_to_mini_roman(number:\
    \ 1) == \"i\")\nassert(int_to_mini_roman(number: 4) == \"iv\")\nassert(int_to_mini_roman(number:\
    \ 43) == \"xliii\")\nassert(int_to_mini_roman(number: 90) == \"xc\")\nassert(int_to_mini_roman(number:\
    \ 94) == \"xciv\")\nassert(int_to_mini_roman(number: 532) == \"dxxxii\")\nassert(int_to_mini_roman(number:\
    \ 900) == \"cm\")\nassert(int_to_mini_roman(number: 994) == \"cmxciv\")\nassert(int_to_mini_roman(number:\
    \ 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    var result = \"\"\n    var\
    \ num = number\n    while num > 0 {\n        if num >= 1000 {\n            result\
    \ += \"m\"\n            num -= 1000\n        } else if num >= 900 {\n        \
    \    result += \"cm\"\n            num -= 900\n        } else if num >= 500 {\n\
    \            result += \"d\"\n            num -= 500\n        } else if num >=\
    \ 400 {\n            result += \"cd\"\n            num -= 400\n        } else\
    \ if num >= 100 {\n            result += \"c\"\n            num -= 100\n     \
    \   } else if num >= 90 {\n            result += \"xc\"\n            num -= 90\n\
    \        } else if num >= 50 {\n            result += \"l\"\n            num -=\
    \ 50\n        } else if num >= 40 {\n            result += \"xl\"\n          \
    \  num -= 40\n        } else if num >= 10 {\n            result += \"x\"\n   \
    \         num -= 10\n        } else if num >= 9 {\n            result += \"ix\"\
    \n            num -= 9\n        } else if num >= 5 {\n            result += \"\
    v\"\n            num -= 5\n        } else if num >= 4 {\n            result +=\
    \ \"iv\"\n            num -= 4\n        } else if num >= 1 {\n            result\
    \ += \"i\"\n            num -= 1\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(int_to_mini_roman(number: 19) == \"xix\")\nassert(int_to_mini_roman(number:\
    \ 152) == \"clii\")\nassert(int_to_mini_roman(number: 251) == \"ccli\")\nassert(int_to_mini_roman(number:\
    \ 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number: 500) == \"d\")\nassert(int_to_mini_roman(number:\
    \ 1) == \"i\")\nassert(int_to_mini_roman(number: 4) == \"iv\")\nassert(int_to_mini_roman(number:\
    \ 43) == \"xliii\")\nassert(int_to_mini_roman(number: 90) == \"xc\")\nassert(int_to_mini_roman(number:\
    \ 94) == \"xciv\")\nassert(int_to_mini_roman(number: 532) == \"dxxxii\")\nassert(int_to_mini_roman(number:\
    \ 900) == \"cm\")\nassert(int_to_mini_roman(number: 994) == \"cmxciv\")\nassert(int_to_mini_roman(number:\
    \ 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    var result = \"\"\n    var\
    \ num = number\n    let roman_numerals = [\"m\", \"cm\", \"d\", \"cd\", \"c\"\
    , \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"]\n    let numbers\
    \ = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]\n    for (index, roman_numeral)\
    \ in roman_numerals.enumerated() {\n        while num >= numbers[index] {\n  \
    \          result += roman_numeral\n            num -= numbers[index]\n      \
    \  }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(int_to_mini_roman(number:\
    \ 19) == \"xix\")\nassert(int_to_mini_roman(number: 152) == \"clii\")\nassert(int_to_mini_roman(number:\
    \ 251) == \"ccli\")\nassert(int_to_mini_roman(number: 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number:\
    \ 500) == \"d\")\nassert(int_to_mini_roman(number: 1) == \"i\")\nassert(int_to_mini_roman(number:\
    \ 4) == \"iv\")\nassert(int_to_mini_roman(number: 43) == \"xliii\")\nassert(int_to_mini_roman(number:\
    \ 90) == \"xc\")\nassert(int_to_mini_roman(number: 94) == \"xciv\")\nassert(int_to_mini_roman(number:\
    \ 532) == \"dxxxii\")\nassert(int_to_mini_roman(number: 900) == \"cm\")\nassert(int_to_mini_roman(number:\
    \ 994) == \"cmxciv\")\nassert(int_to_mini_roman(number: 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    var result = \"\"\n    var\
    \ number = number\n    while number > 0 {\n        if number >= 1000 {\n     \
    \       result += \"m\"\n            number -= 1000\n        } else if number\
    \ >= 900 {\n            result += \"cm\"\n            number -= 900\n        }\
    \ else if number >= 500 {\n            result += \"d\"\n            number -=\
    \ 500\n        } else if number >= 400 {\n            result += \"cd\"\n     \
    \       number -= 400\n        } else if number >= 100 {\n            result +=\
    \ \"c\"\n            number -= 100\n        } else if number >= 90 {\n       \
    \     result += \"xc\"\n            number -= 90\n        } else if number >=\
    \ 50 {\n            result += \"l\"\n            number -= 50\n        } else\
    \ if number >= 40 {\n            result += \"xl\"\n            number -= 40\n\
    \        } else if number >= 10 {\n            result += \"x\"\n            number\
    \ -= 10\n        } else if number >= 9 {\n            result += \"ix\"\n     \
    \       number -= 9\n        } else if number >= 5 {\n            result += \"\
    v\"\n            number -= 5\n        } else if number >= 4 {\n            result\
    \ += \"iv\"\n            number -= 4\n        } else if number >= 1 {\n      \
    \      result += \"i\"\n            number -= 1\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(int_to_mini_roman(number:\
    \ 19) == \"xix\")\nassert(int_to_mini_roman(number: 152) == \"clii\")\nassert(int_to_mini_roman(number:\
    \ 251) == \"ccli\")\nassert(int_to_mini_roman(number: 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number:\
    \ 500) == \"d\")\nassert(int_to_mini_roman(number: 1) == \"i\")\nassert(int_to_mini_roman(number:\
    \ 4) == \"iv\")\nassert(int_to_mini_roman(number: 43) == \"xliii\")\nassert(int_to_mini_roman(number:\
    \ 90) == \"xc\")\nassert(int_to_mini_roman(number: 94) == \"xciv\")\nassert(int_to_mini_roman(number:\
    \ 532) == \"dxxxii\")\nassert(int_to_mini_roman(number: 900) == \"cm\")\nassert(int_to_mini_roman(number:\
    \ 994) == \"cmxciv\")\nassert(int_to_mini_roman(number: 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    var result = \"\"\n    var\
    \ num = number\n    while num > 0 {\n        if num >= 1000 {\n            result\
    \ += \"m\"\n            num -= 1000\n        } else if num >= 900 {\n        \
    \    result += \"cm\"\n            num -= 900\n        } else if num >= 500 {\n\
    \            result += \"d\"\n            num -= 500\n        } else if num >=\
    \ 400 {\n            result += \"cd\"\n            num -= 400\n        } else\
    \ if num >= 100 {\n            result += \"c\"\n            num -= 100\n     \
    \   } else if num >= 90 {\n            result += \"xc\"\n            num -= 90\n\
    \        } else if num >= 50 {\n            result += \"l\"\n            num -=\
    \ 50\n        } else if num >= 40 {\n            result += \"xl\"\n          \
    \  num -= 40\n        } else if num >= 10 {\n            result += \"x\"\n   \
    \         num -= 10\n        } else if num >= 9 {\n            result += \"ix\"\
    \n            num -= 9\n        } else if num >= 5 {\n            result += \"\
    v\"\n            num -= 5\n        } else if num >= 4 {\n            result +=\
    \ \"iv\"\n            num -= 4\n        } else if num >= 1 {\n            result\
    \ += \"i\"\n            num -= 1\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(int_to_mini_roman(number: 19) == \"xix\")\nassert(int_to_mini_roman(number:\
    \ 152) == \"clii\")\nassert(int_to_mini_roman(number: 251) == \"ccli\")\nassert(int_to_mini_roman(number:\
    \ 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number: 500) == \"d\")\nassert(int_to_mini_roman(number:\
    \ 1) == \"i\")\nassert(int_to_mini_roman(number: 4) == \"iv\")\nassert(int_to_mini_roman(number:\
    \ 43) == \"xliii\")\nassert(int_to_mini_roman(number: 90) == \"xc\")\nassert(int_to_mini_roman(number:\
    \ 94) == \"xciv\")\nassert(int_to_mini_roman(number: 532) == \"dxxxii\")\nassert(int_to_mini_roman(number:\
    \ 900) == \"cm\")\nassert(int_to_mini_roman(number: 994) == \"cmxciv\")\nassert(int_to_mini_roman(number:\
    \ 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    var result = \"\"\n    var\
    \ num = number\n    while num > 0 {\n        if num >= 1000 {\n            result\
    \ += \"m\"\n            num -= 1000\n        } else if num >= 900 {\n        \
    \    result += \"cm\"\n            num -= 900\n        } else if num >= 500 {\n\
    \            result += \"d\"\n            num -= 500\n        } else if num >=\
    \ 400 {\n            result += \"cd\"\n            num -= 400\n        } else\
    \ if num >= 100 {\n            result += \"c\"\n            num -= 100\n     \
    \   } else if num >= 90 {\n            result += \"xc\"\n            num -= 90\n\
    \        } else if num >= 50 {\n            result += \"l\"\n            num -=\
    \ 50\n        } else if num >= 40 {\n            result += \"xl\"\n          \
    \  num -= 40\n        } else if num >= 10 {\n            result += \"x\"\n   \
    \         num -= 10\n        } else if num >= 9 {\n            result += \"ix\"\
    \n            num -= 9\n        } else if num >= 5 {\n            result += \"\
    v\"\n            num -= 5\n        } else if num >= 4 {\n            result +=\
    \ \"iv\"\n            num -= 4\n        } else if num >= 1 {\n            result\
    \ += \"i\"\n            num -= 1\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(int_to_mini_roman(number: 19) == \"xix\")\nassert(int_to_mini_roman(number:\
    \ 152) == \"clii\")\nassert(int_to_mini_roman(number: 251) == \"ccli\")\nassert(int_to_mini_roman(number:\
    \ 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number: 500) == \"d\")\nassert(int_to_mini_roman(number:\
    \ 1) == \"i\")\nassert(int_to_mini_roman(number: 4) == \"iv\")\nassert(int_to_mini_roman(number:\
    \ 43) == \"xliii\")\nassert(int_to_mini_roman(number: 90) == \"xc\")\nassert(int_to_mini_roman(number:\
    \ 94) == \"xciv\")\nassert(int_to_mini_roman(number: 532) == \"dxxxii\")\nassert(int_to_mini_roman(number:\
    \ 900) == \"cm\")\nassert(int_to_mini_roman(number: 994) == \"cmxciv\")\nassert(int_to_mini_roman(number:\
    \ 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    var result = \"\"\n    var\
    \ num = number\n    while num > 0 {\n        if num >= 1000 {\n            result\
    \ += \"m\"\n            num -= 1000\n        } else if num >= 900 {\n        \
    \    result += \"cm\"\n            num -= 900\n        } else if num >= 500 {\n\
    \            result += \"d\"\n            num -= 500\n        } else if num >=\
    \ 400 {\n            result += \"cd\"\n            num -= 400\n        } else\
    \ if num >= 100 {\n            result += \"c\"\n            num -= 100\n     \
    \   } else if num >= 90 {\n            result += \"xc\"\n            num -= 90\n\
    \        } else if num >= 50 {\n            result += \"l\"\n            num -=\
    \ 50\n        } else if num >= 40 {\n            result += \"xl\"\n          \
    \  num -= 40\n        } else if num >= 10 {\n            result += \"x\"\n   \
    \         num -= 10\n        } else if num >= 9 {\n            result += \"ix\"\
    \n            num -= 9\n        } else if num >= 5 {\n            result += \"\
    v\"\n            num -= 5\n        } else if num >= 4 {\n            result +=\
    \ \"iv\"\n            num -= 4\n        } else if num >= 1 {\n            result\
    \ += \"i\"\n            num -= 1\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(int_to_mini_roman(number: 19) == \"xix\")\nassert(int_to_mini_roman(number:\
    \ 152) == \"clii\")\nassert(int_to_mini_roman(number: 251) == \"ccli\")\nassert(int_to_mini_roman(number:\
    \ 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number: 500) == \"d\")\nassert(int_to_mini_roman(number:\
    \ 1) == \"i\")\nassert(int_to_mini_roman(number: 4) == \"iv\")\nassert(int_to_mini_roman(number:\
    \ 43) == \"xliii\")\nassert(int_to_mini_roman(number: 90) == \"xc\")\nassert(int_to_mini_roman(number:\
    \ 94) == \"xciv\")\nassert(int_to_mini_roman(number: 532) == \"dxxxii\")\nassert(int_to_mini_roman(number:\
    \ 900) == \"cm\")\nassert(int_to_mini_roman(number: 994) == \"cmxciv\")\nassert(int_to_mini_roman(number:\
    \ 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    var result = \"\"\n    var\
    \ num = number\n    while num > 0 {\n        if num >= 1000 {\n            result\
    \ += \"m\"\n            num -= 1000\n        } else if num >= 900 {\n        \
    \    result += \"cm\"\n            num -= 900\n        } else if num >= 500 {\n\
    \            result += \"d\"\n            num -= 500\n        } else if num >=\
    \ 400 {\n            result += \"cd\"\n            num -= 400\n        } else\
    \ if num >= 100 {\n            result += \"c\"\n            num -= 100\n     \
    \   } else if num >= 90 {\n            result += \"xc\"\n            num -= 90\n\
    \        } else if num >= 50 {\n            result += \"l\"\n            num -=\
    \ 50\n        } else if num >= 40 {\n            result += \"xl\"\n          \
    \  num -= 40\n        } else if num >= 10 {\n            result += \"x\"\n   \
    \         num -= 10\n        } else if num >= 9 {\n            result += \"ix\"\
    \n            num -= 9\n        } else if num >= 5 {\n            result += \"\
    v\"\n            num -= 5\n        } else if num >= 4 {\n            result +=\
    \ \"iv\"\n            num -= 4\n        } else if num >= 1 {\n            result\
    \ += \"i\"\n            num -= 1\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(int_to_mini_roman(number: 19) == \"xix\")\nassert(int_to_mini_roman(number:\
    \ 152) == \"clii\")\nassert(int_to_mini_roman(number: 251) == \"ccli\")\nassert(int_to_mini_roman(number:\
    \ 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number: 500) == \"d\")\nassert(int_to_mini_roman(number:\
    \ 1) == \"i\")\nassert(int_to_mini_roman(number: 4) == \"iv\")\nassert(int_to_mini_roman(number:\
    \ 43) == \"xliii\")\nassert(int_to_mini_roman(number: 90) == \"xc\")\nassert(int_to_mini_roman(number:\
    \ 94) == \"xciv\")\nassert(int_to_mini_roman(number: 532) == \"dxxxii\")\nassert(int_to_mini_roman(number:\
    \ 900) == \"cm\")\nassert(int_to_mini_roman(number: 994) == \"cmxciv\")\nassert(int_to_mini_roman(number:\
    \ 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    var result = \"\"\n    var\
    \ num = number\n    while num > 0 {\n        if num >= 1000 {\n            result\
    \ += \"m\"\n            num -= 1000\n        } else if num >= 900 {\n        \
    \    result += \"cm\"\n            num -= 900\n        } else if num >= 500 {\n\
    \            result += \"d\"\n            num -= 500\n        } else if num >=\
    \ 400 {\n            result += \"cd\"\n            num -= 400\n        } else\
    \ if num >= 100 {\n            result += \"c\"\n            num -= 100\n     \
    \   } else if num >= 90 {\n            result += \"xc\"\n            num -= 90\n\
    \        } else if num >= 50 {\n            result += \"l\"\n            num -=\
    \ 50\n        } else if num >= 40 {\n            result += \"xl\"\n          \
    \  num -= 40\n        } else if num >= 10 {\n            result += \"x\"\n   \
    \         num -= 10\n        } else if num >= 9 {\n            result += \"ix\"\
    \n            num -= 9\n        } else if num >= 5 {\n            result += \"\
    v\"\n            num -= 5\n        } else if num >= 4 {\n            result +=\
    \ \"iv\"\n            num -= 4\n        } else if num >= 1 {\n            result\
    \ += \"i\"\n            num -= 1\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(int_to_mini_roman(number: 19) == \"xix\")\nassert(int_to_mini_roman(number:\
    \ 152) == \"clii\")\nassert(int_to_mini_roman(number: 251) == \"ccli\")\nassert(int_to_mini_roman(number:\
    \ 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number: 500) == \"d\")\nassert(int_to_mini_roman(number:\
    \ 1) == \"i\")\nassert(int_to_mini_roman(number: 4) == \"iv\")\nassert(int_to_mini_roman(number:\
    \ 43) == \"xliii\")\nassert(int_to_mini_roman(number: 90) == \"xc\")\nassert(int_to_mini_roman(number:\
    \ 94) == \"xciv\")\nassert(int_to_mini_roman(number: 532) == \"dxxxii\")\nassert(int_to_mini_roman(number:\
    \ 900) == \"cm\")\nassert(int_to_mini_roman(number: 994) == \"cmxciv\")\nassert(int_to_mini_roman(number:\
    \ 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    var result = \"\"\n    var\
    \ num = number\n    while num > 0 {\n        if num >= 1000 {\n            result\
    \ += \"m\"\n            num -= 1000\n        } else if num >= 900 {\n        \
    \    result += \"cm\"\n            num -= 900\n        } else if num >= 500 {\n\
    \            result += \"d\"\n            num -= 500\n        } else if num >=\
    \ 400 {\n            result += \"cd\"\n            num -= 400\n        } else\
    \ if num >= 100 {\n            result += \"c\"\n            num -= 100\n     \
    \   } else if num >= 90 {\n            result += \"xc\"\n            num -= 90\n\
    \        } else if num >= 50 {\n            result += \"l\"\n            num -=\
    \ 50\n        } else if num >= 40 {\n            result += \"xl\"\n          \
    \  num -= 40\n        } else if num >= 10 {\n            result += \"x\"\n   \
    \         num -= 10\n        } else if num >= 9 {\n            result += \"ix\"\
    \n            num -= 9\n        } else if num >= 5 {\n            result += \"\
    v\"\n            num -= 5\n        } else if num >= 4 {\n            result +=\
    \ \"iv\"\n            num -= 4\n        } else if num >= 1 {\n            result\
    \ += \"i\"\n            num -= 1\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(int_to_mini_roman(number: 19) == \"xix\")\nassert(int_to_mini_roman(number:\
    \ 152) == \"clii\")\nassert(int_to_mini_roman(number: 251) == \"ccli\")\nassert(int_to_mini_roman(number:\
    \ 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number: 500) == \"d\")\nassert(int_to_mini_roman(number:\
    \ 1) == \"i\")\nassert(int_to_mini_roman(number: 4) == \"iv\")\nassert(int_to_mini_roman(number:\
    \ 43) == \"xliii\")\nassert(int_to_mini_roman(number: 90) == \"xc\")\nassert(int_to_mini_roman(number:\
    \ 94) == \"xciv\")\nassert(int_to_mini_roman(number: 532) == \"dxxxii\")\nassert(int_to_mini_roman(number:\
    \ 900) == \"cm\")\nassert(int_to_mini_roman(number: 994) == \"cmxciv\")\nassert(int_to_mini_roman(number:\
    \ 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    var result = \"\"\n    var\
    \ num = number\n    while num > 0 {\n        if num >= 1000 {\n            result\
    \ += \"m\"\n            num -= 1000\n        } else if num >= 900 {\n        \
    \    result += \"cm\"\n            num -= 900\n        } else if num >= 500 {\n\
    \            result += \"d\"\n            num -= 500\n        } else if num >=\
    \ 400 {\n            result += \"cd\"\n            num -= 400\n        } else\
    \ if num >= 100 {\n            result += \"c\"\n            num -= 100\n     \
    \   } else if num >= 90 {\n            result += \"xc\"\n            num -= 90\n\
    \        } else if num >= 50 {\n            result += \"l\"\n            num -=\
    \ 50\n        } else if num >= 40 {\n            result += \"xl\"\n          \
    \  num -= 40\n        } else if num >= 10 {\n            result += \"x\"\n   \
    \         num -= 10\n        } else if num >= 9 {\n            result += \"ix\"\
    \n            num -= 9\n        } else if num >= 5 {\n            result += \"\
    v\"\n            num -= 5\n        } else if num >= 4 {\n            result +=\
    \ \"iv\"\n            num -= 4\n        } else if num >= 1 {\n            result\
    \ += \"i\"\n            num -= 1\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(int_to_mini_roman(number: 19) == \"xix\")\nassert(int_to_mini_roman(number:\
    \ 152) == \"clii\")\nassert(int_to_mini_roman(number: 251) == \"ccli\")\nassert(int_to_mini_roman(number:\
    \ 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number: 500) == \"d\")\nassert(int_to_mini_roman(number:\
    \ 1) == \"i\")\nassert(int_to_mini_roman(number: 4) == \"iv\")\nassert(int_to_mini_roman(number:\
    \ 43) == \"xliii\")\nassert(int_to_mini_roman(number: 90) == \"xc\")\nassert(int_to_mini_roman(number:\
    \ 94) == \"xciv\")\nassert(int_to_mini_roman(number: 532) == \"dxxxii\")\nassert(int_to_mini_roman(number:\
    \ 900) == \"cm\")\nassert(int_to_mini_roman(number: 994) == \"cmxciv\")\nassert(int_to_mini_roman(number:\
    \ 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    var result = \"\"\n    var\
    \ num = number\n    while num > 0 {\n        if num >= 1000 {\n            result\
    \ += \"m\"\n            num -= 1000\n        } else if num >= 900 {\n        \
    \    result += \"cm\"\n            num -= 900\n        } else if num >= 500 {\n\
    \            result += \"d\"\n            num -= 500\n        } else if num >=\
    \ 400 {\n            result += \"cd\"\n            num -= 400\n        } else\
    \ if num >= 100 {\n            result += \"c\"\n            num -= 100\n     \
    \   } else if num >= 90 {\n            result += \"xc\"\n            num -= 90\n\
    \        } else if num >= 50 {\n            result += \"l\"\n            num -=\
    \ 50\n        } else if num >= 40 {\n            result += \"xl\"\n          \
    \  num -= 40\n        } else if num >= 10 {\n            result += \"x\"\n   \
    \         num -= 10\n        } else if num >= 9 {\n            result += \"ix\"\
    \n            num -= 9\n        } else if num >= 5 {\n            result += \"\
    v\"\n            num -= 5\n        } else if num >= 4 {\n            result +=\
    \ \"iv\"\n            num -= 4\n        } else if num >= 1 {\n            result\
    \ += \"i\"\n            num -= 1\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(int_to_mini_roman(number: 19) == \"xix\")\nassert(int_to_mini_roman(number:\
    \ 152) == \"clii\")\nassert(int_to_mini_roman(number: 251) == \"ccli\")\nassert(int_to_mini_roman(number:\
    \ 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number: 500) == \"d\")\nassert(int_to_mini_roman(number:\
    \ 1) == \"i\")\nassert(int_to_mini_roman(number: 4) == \"iv\")\nassert(int_to_mini_roman(number:\
    \ 43) == \"xliii\")\nassert(int_to_mini_roman(number: 90) == \"xc\")\nassert(int_to_mini_roman(number:\
    \ 94) == \"xciv\")\nassert(int_to_mini_roman(number: 532) == \"dxxxii\")\nassert(int_to_mini_roman(number:\
    \ 900) == \"cm\")\nassert(int_to_mini_roman(number: 994) == \"cmxciv\")\nassert(int_to_mini_roman(number:\
    \ 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    var result = \"\"\n    var\
    \ number = number\n    while number > 0 {\n        if number >= 1000 {\n     \
    \       result += \"m\"\n            number -= 1000\n        } else if number\
    \ >= 900 {\n            result += \"cm\"\n            number -= 900\n        }\
    \ else if number >= 500 {\n            result += \"d\"\n            number -=\
    \ 500\n        } else if number >= 400 {\n            result += \"cd\"\n     \
    \       number -= 400\n        } else if number >= 100 {\n            result +=\
    \ \"c\"\n            number -= 100\n        } else if number >= 90 {\n       \
    \     result += \"xc\"\n            number -= 90\n        } else if number >=\
    \ 50 {\n            result += \"l\"\n            number -= 50\n        } else\
    \ if number >= 40 {\n            result += \"xl\"\n            number -= 40\n\
    \        } else if number >= 10 {\n            result += \"x\"\n            number\
    \ -= 10\n        } else if number >= 9 {\n            result += \"ix\"\n     \
    \       number -= 9\n        } else if number >= 5 {\n            result += \"\
    v\"\n            number -= 5\n        } else if number >= 4 {\n            result\
    \ += \"iv\"\n            number -= 4\n        } else if number >= 1 {\n      \
    \      result += \"i\"\n            number -= 1\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(int_to_mini_roman(number:\
    \ 19) == \"xix\")\nassert(int_to_mini_roman(number: 152) == \"clii\")\nassert(int_to_mini_roman(number:\
    \ 251) == \"ccli\")\nassert(int_to_mini_roman(number: 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number:\
    \ 500) == \"d\")\nassert(int_to_mini_roman(number: 1) == \"i\")\nassert(int_to_mini_roman(number:\
    \ 4) == \"iv\")\nassert(int_to_mini_roman(number: 43) == \"xliii\")\nassert(int_to_mini_roman(number:\
    \ 90) == \"xc\")\nassert(int_to_mini_roman(number: 94) == \"xciv\")\nassert(int_to_mini_roman(number:\
    \ 532) == \"dxxxii\")\nassert(int_to_mini_roman(number: 900) == \"cm\")\nassert(int_to_mini_roman(number:\
    \ 994) == \"cmxciv\")\nassert(int_to_mini_roman(number: 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    var num = number\n    var\
    \ result = \"\"\n    while num > 0 {\n        if num >= 1000 {\n            result\
    \ += \"m\"\n            num -= 1000\n        } else if num >= 900 {\n        \
    \    result += \"cm\"\n            num -= 900\n        } else if num >= 500 {\n\
    \            result += \"d\"\n            num -= 500\n        } else if num >=\
    \ 400 {\n            result += \"cd\"\n            num -= 400\n        } else\
    \ if num >= 100 {\n            result += \"c\"\n            num -= 100\n     \
    \   } else if num >= 90 {\n            result += \"xc\"\n            num -= 90\n\
    \        } else if num >= 50 {\n            result += \"l\"\n            num -=\
    \ 50\n        } else if num >= 40 {\n            result += \"xl\"\n          \
    \  num -= 40\n        } else if num >= 10 {\n            result += \"x\"\n   \
    \         num -= 10\n        } else if num >= 9 {\n            result += \"ix\"\
    \n            num -= 9\n        } else if num >= 5 {\n            result += \"\
    v\"\n            num -= 5\n        } else if num >= 4 {\n            result +=\
    \ \"iv\"\n            num -= 4\n        } else if num >= 1 {\n            result\
    \ += \"i\"\n            num -= 1\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(int_to_mini_roman(number: 19) == \"xix\")\nassert(int_to_mini_roman(number:\
    \ 152) == \"clii\")\nassert(int_to_mini_roman(number: 251) == \"ccli\")\nassert(int_to_mini_roman(number:\
    \ 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number: 500) == \"d\")\nassert(int_to_mini_roman(number:\
    \ 1) == \"i\")\nassert(int_to_mini_roman(number: 4) == \"iv\")\nassert(int_to_mini_roman(number:\
    \ 43) == \"xliii\")\nassert(int_to_mini_roman(number: 90) == \"xc\")\nassert(int_to_mini_roman(number:\
    \ 94) == \"xciv\")\nassert(int_to_mini_roman(number: 532) == \"dxxxii\")\nassert(int_to_mini_roman(number:\
    \ 900) == \"cm\")\nassert(int_to_mini_roman(number: 994) == \"cmxciv\")\nassert(int_to_mini_roman(number:\
    \ 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    let roman_numerals = [\"\
    m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\"\
    , \"iv\", \"i\"]\n    let values = [1000, 900, 500, 400, 100, 90, 50, 40, 10,\
    \ 9, 5, 4, 1]\n    var result = \"\"\n    var num = number\n    for (index, value)\
    \ in values.enumerated() {\n        while num >= value {\n            result +=\
    \ roman_numerals[index]\n            num -= value\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(int_to_mini_roman(number:\
    \ 19) == \"xix\")\nassert(int_to_mini_roman(number: 152) == \"clii\")\nassert(int_to_mini_roman(number:\
    \ 251) == \"ccli\")\nassert(int_to_mini_roman(number: 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number:\
    \ 500) == \"d\")\nassert(int_to_mini_roman(number: 1) == \"i\")\nassert(int_to_mini_roman(number:\
    \ 4) == \"iv\")\nassert(int_to_mini_roman(number: 43) == \"xliii\")\nassert(int_to_mini_roman(number:\
    \ 90) == \"xc\")\nassert(int_to_mini_roman(number: 94) == \"xciv\")\nassert(int_to_mini_roman(number:\
    \ 532) == \"dxxxii\")\nassert(int_to_mini_roman(number: 900) == \"cm\")\nassert(int_to_mini_roman(number:\
    \ 994) == \"cmxciv\")\nassert(int_to_mini_roman(number: 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    var result = \"\"\n    var\
    \ num = number\n    while num > 0 {\n        if num >= 1000 {\n            result\
    \ += \"m\"\n            num -= 1000\n        } else if num >= 900 {\n        \
    \    result += \"cm\"\n            num -= 900\n        } else if num >= 500 {\n\
    \            result += \"d\"\n            num -= 500\n        } else if num >=\
    \ 400 {\n            result += \"cd\"\n            num -= 400\n        } else\
    \ if num >= 100 {\n            result += \"c\"\n            num -= 100\n     \
    \   } else if num >= 90 {\n            result += \"xc\"\n            num -= 90\n\
    \        } else if num >= 50 {\n            result += \"l\"\n            num -=\
    \ 50\n        } else if num >= 40 {\n            result += \"xl\"\n          \
    \  num -= 40\n        } else if num >= 10 {\n            result += \"x\"\n   \
    \         num -= 10\n        } else if num >= 9 {\n            result += \"ix\"\
    \n            num -= 9\n        } else if num >= 5 {\n            result += \"\
    v\"\n            num -= 5\n        } else if num >= 4 {\n            result +=\
    \ \"iv\"\n            num -= 4\n        } else if num >= 1 {\n            result\
    \ += \"i\"\n            num -= 1\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(int_to_mini_roman(number: 19) == \"xix\")\nassert(int_to_mini_roman(number:\
    \ 152) == \"clii\")\nassert(int_to_mini_roman(number: 251) == \"ccli\")\nassert(int_to_mini_roman(number:\
    \ 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number: 500) == \"d\")\nassert(int_to_mini_roman(number:\
    \ 1) == \"i\")\nassert(int_to_mini_roman(number: 4) == \"iv\")\nassert(int_to_mini_roman(number:\
    \ 43) == \"xliii\")\nassert(int_to_mini_roman(number: 90) == \"xc\")\nassert(int_to_mini_roman(number:\
    \ 94) == \"xciv\")\nassert(int_to_mini_roman(number: 532) == \"dxxxii\")\nassert(int_to_mini_roman(number:\
    \ 900) == \"cm\")\nassert(int_to_mini_roman(number: 994) == \"cmxciv\")\nassert(int_to_mini_roman(number:\
    \ 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    var result = \"\"\n    var\
    \ num = number\n    while num > 0 {\n        if num >= 1000 {\n            result\
    \ += \"m\"\n            num -= 1000\n        } else if num >= 900 {\n        \
    \    result += \"cm\"\n            num -= 900\n        } else if num >= 500 {\n\
    \            result += \"d\"\n            num -= 500\n        } else if num >=\
    \ 400 {\n            result += \"cd\"\n            num -= 400\n        } else\
    \ if num >= 100 {\n            result += \"c\"\n            num -= 100\n     \
    \   } else if num >= 90 {\n            result += \"xc\"\n            num -= 90\n\
    \        } else if num >= 50 {\n            result += \"l\"\n            num -=\
    \ 50\n        } else if num >= 40 {\n            result += \"xl\"\n          \
    \  num -= 40\n        } else if num >= 10 {\n            result += \"x\"\n   \
    \         num -= 10\n        } else if num >= 9 {\n            result += \"ix\"\
    \n            num -= 9\n        } else if num >= 5 {\n            result += \"\
    v\"\n            num -= 5\n        } else if num >= 4 {\n            result +=\
    \ \"iv\"\n            num -= 4\n        } else if num >= 1 {\n            result\
    \ += \"i\"\n            num -= 1\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(int_to_mini_roman(number: 19) == \"xix\")\nassert(int_to_mini_roman(number:\
    \ 152) == \"clii\")\nassert(int_to_mini_roman(number: 251) == \"ccli\")\nassert(int_to_mini_roman(number:\
    \ 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number: 500) == \"d\")\nassert(int_to_mini_roman(number:\
    \ 1) == \"i\")\nassert(int_to_mini_roman(number: 4) == \"iv\")\nassert(int_to_mini_roman(number:\
    \ 43) == \"xliii\")\nassert(int_to_mini_roman(number: 90) == \"xc\")\nassert(int_to_mini_roman(number:\
    \ 94) == \"xciv\")\nassert(int_to_mini_roman(number: 532) == \"dxxxii\")\nassert(int_to_mini_roman(number:\
    \ 900) == \"cm\")\nassert(int_to_mini_roman(number: 994) == \"cmxciv\")\nassert(int_to_mini_roman(number:\
    \ 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    var result = \"\"\n    var\
    \ num = number\n    while num > 0 {\n        if num >= 1000 {\n            result\
    \ += \"m\"\n            num -= 1000\n        } else if num >= 900 {\n        \
    \    result += \"cm\"\n            num -= 900\n        } else if num >= 500 {\n\
    \            result += \"d\"\n            num -= 500\n        } else if num >=\
    \ 400 {\n            result += \"cd\"\n            num -= 400\n        } else\
    \ if num >= 100 {\n            result += \"c\"\n            num -= 100\n     \
    \   } else if num >= 90 {\n            result += \"xc\"\n            num -= 90\n\
    \        } else if num >= 50 {\n            result += \"l\"\n            num -=\
    \ 50\n        } else if num >= 40 {\n            result += \"xl\"\n          \
    \  num -= 40\n        } else if num >= 10 {\n            result += \"x\"\n   \
    \         num -= 10\n        } else if num >= 9 {\n            result += \"ix\"\
    \n            num -= 9\n        } else if num >= 5 {\n            result += \"\
    v\"\n            num -= 5\n        } else if num >= 4 {\n            result +=\
    \ \"iv\"\n            num -= 4\n        } else if num >= 1 {\n            result\
    \ += \"i\"\n            num -= 1\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(int_to_mini_roman(number: 19) == \"xix\")\nassert(int_to_mini_roman(number:\
    \ 152) == \"clii\")\nassert(int_to_mini_roman(number: 251) == \"ccli\")\nassert(int_to_mini_roman(number:\
    \ 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number: 500) == \"d\")\nassert(int_to_mini_roman(number:\
    \ 1) == \"i\")\nassert(int_to_mini_roman(number: 4) == \"iv\")\nassert(int_to_mini_roman(number:\
    \ 43) == \"xliii\")\nassert(int_to_mini_roman(number: 90) == \"xc\")\nassert(int_to_mini_roman(number:\
    \ 94) == \"xciv\")\nassert(int_to_mini_roman(number: 532) == \"dxxxii\")\nassert(int_to_mini_roman(number:\
    \ 900) == \"cm\")\nassert(int_to_mini_roman(number: 994) == \"cmxciv\")\nassert(int_to_mini_roman(number:\
    \ 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    var result = \"\"\n    var\
    \ num = number\n    while num > 0 {\n        if num >= 1000 {\n            result\
    \ += \"m\"\n            num -= 1000\n        } else if num >= 900 {\n        \
    \    result += \"cm\"\n            num -= 900\n        } else if num >= 500 {\n\
    \            result += \"d\"\n            num -= 500\n        } else if num >=\
    \ 400 {\n            result += \"cd\"\n            num -= 400\n        } else\
    \ if num >= 100 {\n            result += \"c\"\n            num -= 100\n     \
    \   } else if num >= 90 {\n            result += \"xc\"\n            num -= 90\n\
    \        } else if num >= 50 {\n            result += \"l\"\n            num -=\
    \ 50\n        } else if num >= 40 {\n            result += \"xl\"\n          \
    \  num -= 40\n        } else if num >= 10 {\n            result += \"x\"\n   \
    \         num -= 10\n        } else if num >= 9 {\n            result += \"ix\"\
    \n            num -= 9\n        } else if num >= 5 {\n            result += \"\
    v\"\n            num -= 5\n        } else if num >= 4 {\n            result +=\
    \ \"iv\"\n            num -= 4\n        } else if num >= 1 {\n            result\
    \ += \"i\"\n            num -= 1\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(int_to_mini_roman(number: 19) == \"xix\")\nassert(int_to_mini_roman(number:\
    \ 152) == \"clii\")\nassert(int_to_mini_roman(number: 251) == \"ccli\")\nassert(int_to_mini_roman(number:\
    \ 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number: 500) == \"d\")\nassert(int_to_mini_roman(number:\
    \ 1) == \"i\")\nassert(int_to_mini_roman(number: 4) == \"iv\")\nassert(int_to_mini_roman(number:\
    \ 43) == \"xliii\")\nassert(int_to_mini_roman(number: 90) == \"xc\")\nassert(int_to_mini_roman(number:\
    \ 94) == \"xciv\")\nassert(int_to_mini_roman(number: 532) == \"dxxxii\")\nassert(int_to_mini_roman(number:\
    \ 900) == \"cm\")\nassert(int_to_mini_roman(number: 994) == \"cmxciv\")\nassert(int_to_mini_roman(number:\
    \ 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    var result = \"\"\n    var\
    \ num = number\n    while num >= 1000 {\n        result += \"m\"\n        num\
    \ -= 1000\n    }\n    while num >= 900 {\n        result += \"cm\"\n        num\
    \ -= 900\n    }\n    while num >= 500 {\n        result += \"d\"\n        num\
    \ -= 500\n    }\n    while num >= 400 {\n        result += \"cd\"\n        num\
    \ -= 400\n    }\n    while num >= 100 {\n        result += \"c\"\n        num\
    \ -= 100\n    }\n    while num >= 90 {\n        result += \"xc\"\n        num\
    \ -= 90\n    }\n    while num >= 50 {\n        result += \"l\"\n        num -=\
    \ 50\n    }\n    while num >= 40 {\n        result += \"xl\"\n        num -= 40\n\
    \    }\n    while num >= 10 {\n        result += \"x\"\n        num -= 10\n  \
    \  }\n    while num >= 9 {\n        result += \"ix\"\n        num -= 9\n    }\n\
    \    while num >= 5 {\n        result += \"v\"\n        num -= 5\n    }\n    while\
    \ num >= 4 {\n        result += \"iv\"\n        num -= 4\n    }\n    while num\
    \ >= 1 {\n        result += \"i\"\n        num -= 1\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(int_to_mini_roman(number: 19) == \"xix\")\nassert(int_to_mini_roman(number:\
    \ 152) == \"clii\")\nassert(int_to_mini_roman(number: 251) == \"ccli\")\nassert(int_to_mini_roman(number:\
    \ 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number: 500) == \"d\")\nassert(int_to_mini_roman(number:\
    \ 1) == \"i\")\nassert(int_to_mini_roman(number: 4) == \"iv\")\nassert(int_to_mini_roman(number:\
    \ 43) == \"xliii\")\nassert(int_to_mini_roman(number: 90) == \"xc\")\nassert(int_to_mini_roman(number:\
    \ 94) == \"xciv\")\nassert(int_to_mini_roman(number: 532) == \"dxxxii\")\nassert(int_to_mini_roman(number:\
    \ 900) == \"cm\")\nassert(int_to_mini_roman(number: 994) == \"cmxciv\")\nassert(int_to_mini_roman(number:\
    \ 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    var result = \"\"\n    var\
    \ number = number\n    while number > 0 {\n        if number >= 1000 {\n     \
    \       result += \"m\"\n            number -= 1000\n        } else if number\
    \ >= 900 {\n            result += \"cm\"\n            number -= 900\n        }\
    \ else if number >= 500 {\n            result += \"d\"\n            number -=\
    \ 500\n        } else if number >= 400 {\n            result += \"cd\"\n     \
    \       number -= 400\n        } else if number >= 100 {\n            result +=\
    \ \"c\"\n            number -= 100\n        } else if number >= 90 {\n       \
    \     result += \"xc\"\n            number -= 90\n        } else if number >=\
    \ 50 {\n            result += \"l\"\n            number -= 50\n        } else\
    \ if number >= 40 {\n            result += \"xl\"\n            number -= 40\n\
    \        } else if number >= 10 {\n            result += \"x\"\n            number\
    \ -= 10\n        } else if number >= 9 {\n            result += \"ix\"\n     \
    \       number -= 9\n        } else if number >= 5 {\n            result += \"\
    v\"\n            number -= 5\n        } else if number >= 4 {\n            result\
    \ += \"iv\"\n            number -= 4\n        } else if number >= 1 {\n      \
    \      result += \"i\"\n            number -= 1\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(int_to_mini_roman(number:\
    \ 19) == \"xix\")\nassert(int_to_mini_roman(number: 152) == \"clii\")\nassert(int_to_mini_roman(number:\
    \ 251) == \"ccli\")\nassert(int_to_mini_roman(number: 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number:\
    \ 500) == \"d\")\nassert(int_to_mini_roman(number: 1) == \"i\")\nassert(int_to_mini_roman(number:\
    \ 4) == \"iv\")\nassert(int_to_mini_roman(number: 43) == \"xliii\")\nassert(int_to_mini_roman(number:\
    \ 90) == \"xc\")\nassert(int_to_mini_roman(number: 94) == \"xciv\")\nassert(int_to_mini_roman(number:\
    \ 532) == \"dxxxii\")\nassert(int_to_mini_roman(number: 900) == \"cm\")\nassert(int_to_mini_roman(number:\
    \ 994) == \"cmxciv\")\nassert(int_to_mini_roman(number: 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    var result = \"\"\n    var\
    \ num = number\n    while num > 0 {\n        if num >= 1000 {\n            result\
    \ += \"m\"\n            num -= 1000\n        } else if num >= 900 {\n        \
    \    result += \"cm\"\n            num -= 900\n        } else if num >= 500 {\n\
    \            result += \"d\"\n            num -= 500\n        } else if num >=\
    \ 400 {\n            result += \"cd\"\n            num -= 400\n        } else\
    \ if num >= 100 {\n            result += \"c\"\n            num -= 100\n     \
    \   } else if num >= 90 {\n            result += \"xc\"\n            num -= 90\n\
    \        } else if num >= 50 {\n            result += \"l\"\n            num -=\
    \ 50\n        } else if num >= 40 {\n            result += \"xl\"\n          \
    \  num -= 40\n        } else if num >= 10 {\n            result += \"x\"\n   \
    \         num -= 10\n        } else if num >= 9 {\n            result += \"ix\"\
    \n            num -= 9\n        } else if num >= 5 {\n            result += \"\
    v\"\n            num -= 5\n        } else if num >= 4 {\n            result +=\
    \ \"iv\"\n            num -= 4\n        } else if num >= 1 {\n            result\
    \ += \"i\"\n            num -= 1\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(int_to_mini_roman(number: 19) == \"xix\")\nassert(int_to_mini_roman(number:\
    \ 152) == \"clii\")\nassert(int_to_mini_roman(number: 251) == \"ccli\")\nassert(int_to_mini_roman(number:\
    \ 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number: 500) == \"d\")\nassert(int_to_mini_roman(number:\
    \ 1) == \"i\")\nassert(int_to_mini_roman(number: 4) == \"iv\")\nassert(int_to_mini_roman(number:\
    \ 43) == \"xliii\")\nassert(int_to_mini_roman(number: 90) == \"xc\")\nassert(int_to_mini_roman(number:\
    \ 94) == \"xciv\")\nassert(int_to_mini_roman(number: 532) == \"dxxxii\")\nassert(int_to_mini_roman(number:\
    \ 900) == \"cm\")\nassert(int_to_mini_roman(number: 994) == \"cmxciv\")\nassert(int_to_mini_roman(number:\
    \ 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    var result = \"\"\n    var\
    \ num = number\n    while num > 0 {\n        if num >= 1000 {\n            result\
    \ += \"m\"\n            num -= 1000\n        } else if num >= 900 {\n        \
    \    result += \"cm\"\n            num -= 900\n        } else if num >= 500 {\n\
    \            result += \"d\"\n            num -= 500\n        } else if num >=\
    \ 400 {\n            result += \"cd\"\n            num -= 400\n        } else\
    \ if num >= 100 {\n            result += \"c\"\n            num -= 100\n     \
    \   } else if num >= 90 {\n            result += \"xc\"\n            num -= 90\n\
    \        } else if num >= 50 {\n            result += \"l\"\n            num -=\
    \ 50\n        } else if num >= 40 {\n            result += \"xl\"\n          \
    \  num -= 40\n        } else if num >= 10 {\n            result += \"x\"\n   \
    \         num -= 10\n        } else if num >= 9 {\n            result += \"ix\"\
    \n            num -= 9\n        } else if num >= 5 {\n            result += \"\
    v\"\n            num -= 5\n        } else if num >= 4 {\n            result +=\
    \ \"iv\"\n            num -= 4\n        } else if num >= 1 {\n            result\
    \ += \"i\"\n            num -= 1\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(int_to_mini_roman(number: 19) == \"xix\")\nassert(int_to_mini_roman(number:\
    \ 152) == \"clii\")\nassert(int_to_mini_roman(number: 251) == \"ccli\")\nassert(int_to_mini_roman(number:\
    \ 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number: 500) == \"d\")\nassert(int_to_mini_roman(number:\
    \ 1) == \"i\")\nassert(int_to_mini_roman(number: 4) == \"iv\")\nassert(int_to_mini_roman(number:\
    \ 43) == \"xliii\")\nassert(int_to_mini_roman(number: 90) == \"xc\")\nassert(int_to_mini_roman(number:\
    \ 94) == \"xciv\")\nassert(int_to_mini_roman(number: 532) == \"dxxxii\")\nassert(int_to_mini_roman(number:\
    \ 900) == \"cm\")\nassert(int_to_mini_roman(number: 994) == \"cmxciv\")\nassert(int_to_mini_roman(number:\
    \ 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
- exit_code: -4
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    let roman_numerals = [\"\
    i\", \"v\", \"x\", \"l\", \"c\", \"d\", \"m\"]\n    var result = \"\"\n    var\
    \ num = number\n    var i = 0\n    while num > 0 {\n        let digit = num %\
    \ 10\n        if digit == 4 {\n            result = roman_numerals[i] + roman_numerals[i\
    \ + 1] + result\n        } else if digit == 9 {\n            result = roman_numerals[i]\
    \ + roman_numerals[i + 2] + result\n        } else {\n            let five = digit\
    \ / 5\n            let one = digit % 5\n            if five == 1 {\n         \
    \       result = roman_numerals[i + 1] + result\n            }\n            for\
    \ _ in 0..<one {\n                result = roman_numerals[i] + result\n      \
    \      }\n        }\n        num /= 10\n        i += 2\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(int_to_mini_roman(number: 19) == \"xix\")\nassert(int_to_mini_roman(number:\
    \ 152) == \"clii\")\nassert(int_to_mini_roman(number: 251) == \"ccli\")\nassert(int_to_mini_roman(number:\
    \ 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number: 500) == \"d\")\nassert(int_to_mini_roman(number:\
    \ 1) == \"i\")\nassert(int_to_mini_roman(number: 4) == \"iv\")\nassert(int_to_mini_roman(number:\
    \ 43) == \"xliii\")\nassert(int_to_mini_roman(number: 90) == \"xc\")\nassert(int_to_mini_roman(number:\
    \ 94) == \"xciv\")\nassert(int_to_mini_roman(number: 532) == \"dxxxii\")\nassert(int_to_mini_roman(number:\
    \ 900) == \"cm\")\nassert(int_to_mini_roman(number: 994) == \"cmxciv\")\nassert(int_to_mini_roman(number:\
    \ 1000) == \"m\")"
  status: Exception
  stderr: 'tmpz76i2_vq/tmpz76i2_vq.swift:55: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba12152ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba121221b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba121221988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba1212207b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpz76i2_vq                        0x0000561a6d9ea8f9 <unavailable> + 6393

    5    libc.so.6                          0x00002ba121716460 __libc_start_main +
    245

    6    tmpz76i2_vq                        0x0000561a6d9ea2b9 <unavailable> + 4793

    '
  stdout: ''
  timestamp: 1660014146
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    var result = \"\"\n    var\
    \ num = number\n    while num > 0 {\n        if num >= 1000 {\n            result\
    \ += \"m\"\n            num -= 1000\n        } else if num >= 900 {\n        \
    \    result += \"cm\"\n            num -= 900\n        } else if num >= 500 {\n\
    \            result += \"d\"\n            num -= 500\n        } else if num >=\
    \ 400 {\n            result += \"cd\"\n            num -= 400\n        } else\
    \ if num >= 100 {\n            result += \"c\"\n            num -= 100\n     \
    \   } else if num >= 90 {\n            result += \"xc\"\n            num -= 90\n\
    \        } else if num >= 50 {\n            result += \"l\"\n            num -=\
    \ 50\n        } else if num >= 40 {\n            result += \"xl\"\n          \
    \  num -= 40\n        } else if num >= 10 {\n            result += \"x\"\n   \
    \         num -= 10\n        } else if num >= 9 {\n            result += \"ix\"\
    \n            num -= 9\n        } else if num >= 5 {\n            result += \"\
    v\"\n            num -= 5\n        } else if num >= 4 {\n            result +=\
    \ \"iv\"\n            num -= 4\n        } else if num >= 1 {\n            result\
    \ += \"i\"\n            num -= 1\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(int_to_mini_roman(number: 19) == \"xix\")\nassert(int_to_mini_roman(number:\
    \ 152) == \"clii\")\nassert(int_to_mini_roman(number: 251) == \"ccli\")\nassert(int_to_mini_roman(number:\
    \ 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number: 500) == \"d\")\nassert(int_to_mini_roman(number:\
    \ 1) == \"i\")\nassert(int_to_mini_roman(number: 4) == \"iv\")\nassert(int_to_mini_roman(number:\
    \ 43) == \"xliii\")\nassert(int_to_mini_roman(number: 90) == \"xc\")\nassert(int_to_mini_roman(number:\
    \ 94) == \"xciv\")\nassert(int_to_mini_roman(number: 532) == \"dxxxii\")\nassert(int_to_mini_roman(number:\
    \ 900) == \"cm\")\nassert(int_to_mini_roman(number: 994) == \"cmxciv\")\nassert(int_to_mini_roman(number:\
    \ 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    var result = \"\"\n    var\
    \ num = number\n    let roman_numerals = [\"m\", \"cm\", \"d\", \"cd\", \"c\"\
    , \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"]\n    let decimal_numbers\
    \ = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]\n    for (index, roman_numeral)\
    \ in roman_numerals.enumerated() {\n        while num >= decimal_numbers[index]\
    \ {\n            result += roman_numeral\n            num -= decimal_numbers[index]\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(int_to_mini_roman(number: 19) == \"xix\")\nassert(int_to_mini_roman(number:\
    \ 152) == \"clii\")\nassert(int_to_mini_roman(number: 251) == \"ccli\")\nassert(int_to_mini_roman(number:\
    \ 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number: 500) == \"d\")\nassert(int_to_mini_roman(number:\
    \ 1) == \"i\")\nassert(int_to_mini_roman(number: 4) == \"iv\")\nassert(int_to_mini_roman(number:\
    \ 43) == \"xliii\")\nassert(int_to_mini_roman(number: 90) == \"xc\")\nassert(int_to_mini_roman(number:\
    \ 94) == \"xciv\")\nassert(int_to_mini_roman(number: 532) == \"dxxxii\")\nassert(int_to_mini_roman(number:\
    \ 900) == \"cm\")\nassert(int_to_mini_roman(number: 994) == \"cmxciv\")\nassert(int_to_mini_roman(number:\
    \ 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    var result = \"\"\n    var\
    \ num = number\n    while num >= 1000 {\n        result += \"m\"\n        num\
    \ -= 1000\n    }\n    while num >= 900 {\n        result += \"cm\"\n        num\
    \ -= 900\n    }\n    while num >= 500 {\n        result += \"d\"\n        num\
    \ -= 500\n    }\n    while num >= 400 {\n        result += \"cd\"\n        num\
    \ -= 400\n    }\n    while num >= 100 {\n        result += \"c\"\n        num\
    \ -= 100\n    }\n    while num >= 90 {\n        result += \"xc\"\n        num\
    \ -= 90\n    }\n    while num >= 50 {\n        result += \"l\"\n        num -=\
    \ 50\n    }\n    while num >= 40 {\n        result += \"xl\"\n        num -= 40\n\
    \    }\n    while num >= 10 {\n        result += \"x\"\n        num -= 10\n  \
    \  }\n    while num >= 9 {\n        result += \"ix\"\n        num -= 9\n    }\n\
    \    while num >= 5 {\n        result += \"v\"\n        num -= 5\n    }\n    while\
    \ num >= 4 {\n        result += \"iv\"\n        num -= 4\n    }\n    while num\
    \ >= 1 {\n        result += \"i\"\n        num -= 1\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(int_to_mini_roman(number: 19) == \"xix\")\nassert(int_to_mini_roman(number:\
    \ 152) == \"clii\")\nassert(int_to_mini_roman(number: 251) == \"ccli\")\nassert(int_to_mini_roman(number:\
    \ 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number: 500) == \"d\")\nassert(int_to_mini_roman(number:\
    \ 1) == \"i\")\nassert(int_to_mini_roman(number: 4) == \"iv\")\nassert(int_to_mini_roman(number:\
    \ 43) == \"xliii\")\nassert(int_to_mini_roman(number: 90) == \"xc\")\nassert(int_to_mini_roman(number:\
    \ 94) == \"xciv\")\nassert(int_to_mini_roman(number: 532) == \"dxxxii\")\nassert(int_to_mini_roman(number:\
    \ 900) == \"cm\")\nassert(int_to_mini_roman(number: 994) == \"cmxciv\")\nassert(int_to_mini_roman(number:\
    \ 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    var result = \"\"\n    var\
    \ num = number\n    while num >= 1000 {\n        result += \"m\"\n        num\
    \ -= 1000\n    }\n    while num >= 900 {\n        result += \"cm\"\n        num\
    \ -= 900\n    }\n    while num >= 500 {\n        result += \"d\"\n        num\
    \ -= 500\n    }\n    while num >= 400 {\n        result += \"cd\"\n        num\
    \ -= 400\n    }\n    while num >= 100 {\n        result += \"c\"\n        num\
    \ -= 100\n    }\n    while num >= 90 {\n        result += \"xc\"\n        num\
    \ -= 90\n    }\n    while num >= 50 {\n        result += \"l\"\n        num -=\
    \ 50\n    }\n    while num >= 40 {\n        result += \"xl\"\n        num -= 40\n\
    \    }\n    while num >= 10 {\n        result += \"x\"\n        num -= 10\n  \
    \  }\n    while num >= 9 {\n        result += \"ix\"\n        num -= 9\n    }\n\
    \    while num >= 5 {\n        result += \"v\"\n        num -= 5\n    }\n    while\
    \ num >= 4 {\n        result += \"iv\"\n        num -= 4\n    }\n    while num\
    \ >= 1 {\n        result += \"i\"\n        num -= 1\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(int_to_mini_roman(number: 19) == \"xix\")\nassert(int_to_mini_roman(number:\
    \ 152) == \"clii\")\nassert(int_to_mini_roman(number: 251) == \"ccli\")\nassert(int_to_mini_roman(number:\
    \ 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number: 500) == \"d\")\nassert(int_to_mini_roman(number:\
    \ 1) == \"i\")\nassert(int_to_mini_roman(number: 4) == \"iv\")\nassert(int_to_mini_roman(number:\
    \ 43) == \"xliii\")\nassert(int_to_mini_roman(number: 90) == \"xc\")\nassert(int_to_mini_roman(number:\
    \ 94) == \"xciv\")\nassert(int_to_mini_roman(number: 532) == \"dxxxii\")\nassert(int_to_mini_roman(number:\
    \ 900) == \"cm\")\nassert(int_to_mini_roman(number: 994) == \"cmxciv\")\nassert(int_to_mini_roman(number:\
    \ 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    var result = \"\"\n    var\
    \ num = number\n    while num >= 1000 {\n        result += \"m\"\n        num\
    \ -= 1000\n    }\n    while num >= 900 {\n        result += \"cm\"\n        num\
    \ -= 900\n    }\n    while num >= 500 {\n        result += \"d\"\n        num\
    \ -= 500\n    }\n    while num >= 400 {\n        result += \"cd\"\n        num\
    \ -= 400\n    }\n    while num >= 100 {\n        result += \"c\"\n        num\
    \ -= 100\n    }\n    while num >= 90 {\n        result += \"xc\"\n        num\
    \ -= 90\n    }\n    while num >= 50 {\n        result += \"l\"\n        num -=\
    \ 50\n    }\n    while num >= 40 {\n        result += \"xl\"\n        num -= 40\n\
    \    }\n    while num >= 10 {\n        result += \"x\"\n        num -= 10\n  \
    \  }\n    while num >= 9 {\n        result += \"ix\"\n        num -= 9\n    }\n\
    \    while num >= 5 {\n        result += \"v\"\n        num -= 5\n    }\n    while\
    \ num >= 4 {\n        result += \"iv\"\n        num -= 4\n    }\n    while num\
    \ >= 1 {\n        result += \"i\"\n        num -= 1\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(int_to_mini_roman(number: 19) == \"xix\")\nassert(int_to_mini_roman(number:\
    \ 152) == \"clii\")\nassert(int_to_mini_roman(number: 251) == \"ccli\")\nassert(int_to_mini_roman(number:\
    \ 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number: 500) == \"d\")\nassert(int_to_mini_roman(number:\
    \ 1) == \"i\")\nassert(int_to_mini_roman(number: 4) == \"iv\")\nassert(int_to_mini_roman(number:\
    \ 43) == \"xliii\")\nassert(int_to_mini_roman(number: 90) == \"xc\")\nassert(int_to_mini_roman(number:\
    \ 94) == \"xciv\")\nassert(int_to_mini_roman(number: 532) == \"dxxxii\")\nassert(int_to_mini_roman(number:\
    \ 900) == \"cm\")\nassert(int_to_mini_roman(number: 994) == \"cmxciv\")\nassert(int_to_mini_roman(number:\
    \ 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    let roman_numerals = [\"\
    m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\"\
    , \"iv\", \"i\"]\n    let numbers = [1000, 900, 500, 400, 100, 90, 50, 40, 10,\
    \ 9, 5, 4, 1]\n    var result = \"\"\n    var num = number\n    for (index, roman_numeral)\
    \ in roman_numerals.enumerated() {\n        while num >= numbers[index] {\n  \
    \          result += roman_numeral\n            num -= numbers[index]\n      \
    \  }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(int_to_mini_roman(number:\
    \ 19) == \"xix\")\nassert(int_to_mini_roman(number: 152) == \"clii\")\nassert(int_to_mini_roman(number:\
    \ 251) == \"ccli\")\nassert(int_to_mini_roman(number: 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number:\
    \ 500) == \"d\")\nassert(int_to_mini_roman(number: 1) == \"i\")\nassert(int_to_mini_roman(number:\
    \ 4) == \"iv\")\nassert(int_to_mini_roman(number: 43) == \"xliii\")\nassert(int_to_mini_roman(number:\
    \ 90) == \"xc\")\nassert(int_to_mini_roman(number: 94) == \"xciv\")\nassert(int_to_mini_roman(number:\
    \ 532) == \"dxxxii\")\nassert(int_to_mini_roman(number: 900) == \"cm\")\nassert(int_to_mini_roman(number:\
    \ 994) == \"cmxciv\")\nassert(int_to_mini_roman(number: 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    var num = number\n    var\
    \ result = \"\"\n    while num > 0 {\n        if num >= 1000 {\n            result\
    \ += \"m\"\n            num -= 1000\n        } else if num >= 900 {\n        \
    \    result += \"cm\"\n            num -= 900\n        } else if num >= 500 {\n\
    \            result += \"d\"\n            num -= 500\n        } else if num >=\
    \ 400 {\n            result += \"cd\"\n            num -= 400\n        } else\
    \ if num >= 100 {\n            result += \"c\"\n            num -= 100\n     \
    \   } else if num >= 90 {\n            result += \"xc\"\n            num -= 90\n\
    \        } else if num >= 50 {\n            result += \"l\"\n            num -=\
    \ 50\n        } else if num >= 40 {\n            result += \"xl\"\n          \
    \  num -= 40\n        } else if num >= 10 {\n            result += \"x\"\n   \
    \         num -= 10\n        } else if num >= 9 {\n            result += \"ix\"\
    \n            num -= 9\n        } else if num >= 5 {\n            result += \"\
    v\"\n            num -= 5\n        } else if num >= 4 {\n            result +=\
    \ \"iv\"\n            num -= 4\n        } else if num >= 1 {\n            result\
    \ += \"i\"\n            num -= 1\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(int_to_mini_roman(number: 19) == \"xix\")\nassert(int_to_mini_roman(number:\
    \ 152) == \"clii\")\nassert(int_to_mini_roman(number: 251) == \"ccli\")\nassert(int_to_mini_roman(number:\
    \ 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number: 500) == \"d\")\nassert(int_to_mini_roman(number:\
    \ 1) == \"i\")\nassert(int_to_mini_roman(number: 4) == \"iv\")\nassert(int_to_mini_roman(number:\
    \ 43) == \"xliii\")\nassert(int_to_mini_roman(number: 90) == \"xc\")\nassert(int_to_mini_roman(number:\
    \ 94) == \"xciv\")\nassert(int_to_mini_roman(number: 532) == \"dxxxii\")\nassert(int_to_mini_roman(number:\
    \ 900) == \"cm\")\nassert(int_to_mini_roman(number: 994) == \"cmxciv\")\nassert(int_to_mini_roman(number:\
    \ 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    var result = \"\"\n    var\
    \ num = number\n    while num > 0 {\n        if num >= 1000 {\n            result\
    \ += \"m\"\n            num -= 1000\n        } else if num >= 900 {\n        \
    \    result += \"cm\"\n            num -= 900\n        } else if num >= 500 {\n\
    \            result += \"d\"\n            num -= 500\n        } else if num >=\
    \ 400 {\n            result += \"cd\"\n            num -= 400\n        } else\
    \ if num >= 100 {\n            result += \"c\"\n            num -= 100\n     \
    \   } else if num >= 90 {\n            result += \"xc\"\n            num -= 90\n\
    \        } else if num >= 50 {\n            result += \"l\"\n            num -=\
    \ 50\n        } else if num >= 40 {\n            result += \"xl\"\n          \
    \  num -= 40\n        } else if num >= 10 {\n            result += \"x\"\n   \
    \         num -= 10\n        } else if num >= 9 {\n            result += \"ix\"\
    \n            num -= 9\n        } else if num >= 5 {\n            result += \"\
    v\"\n            num -= 5\n        } else if num >= 4 {\n            result +=\
    \ \"iv\"\n            num -= 4\n        } else if num >= 1 {\n            result\
    \ += \"i\"\n            num -= 1\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(int_to_mini_roman(number: 19) == \"xix\")\nassert(int_to_mini_roman(number:\
    \ 152) == \"clii\")\nassert(int_to_mini_roman(number: 251) == \"ccli\")\nassert(int_to_mini_roman(number:\
    \ 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number: 500) == \"d\")\nassert(int_to_mini_roman(number:\
    \ 1) == \"i\")\nassert(int_to_mini_roman(number: 4) == \"iv\")\nassert(int_to_mini_roman(number:\
    \ 43) == \"xliii\")\nassert(int_to_mini_roman(number: 90) == \"xc\")\nassert(int_to_mini_roman(number:\
    \ 94) == \"xciv\")\nassert(int_to_mini_roman(number: 532) == \"dxxxii\")\nassert(int_to_mini_roman(number:\
    \ 900) == \"cm\")\nassert(int_to_mini_roman(number: 994) == \"cmxciv\")\nassert(int_to_mini_roman(number:\
    \ 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    var result = \"\"\n    var\
    \ num = number\n    while num > 0 {\n        if num >= 1000 {\n            result\
    \ += \"m\"\n            num -= 1000\n        } else if num >= 900 {\n        \
    \    result += \"cm\"\n            num -= 900\n        } else if num >= 500 {\n\
    \            result += \"d\"\n            num -= 500\n        } else if num >=\
    \ 400 {\n            result += \"cd\"\n            num -= 400\n        } else\
    \ if num >= 100 {\n            result += \"c\"\n            num -= 100\n     \
    \   } else if num >= 90 {\n            result += \"xc\"\n            num -= 90\n\
    \        } else if num >= 50 {\n            result += \"l\"\n            num -=\
    \ 50\n        } else if num >= 40 {\n            result += \"xl\"\n          \
    \  num -= 40\n        } else if num >= 10 {\n            result += \"x\"\n   \
    \         num -= 10\n        } else if num >= 9 {\n            result += \"ix\"\
    \n            num -= 9\n        } else if num >= 5 {\n            result += \"\
    v\"\n            num -= 5\n        } else if num >= 4 {\n            result +=\
    \ \"iv\"\n            num -= 4\n        } else if num >= 1 {\n            result\
    \ += \"i\"\n            num -= 1\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(int_to_mini_roman(number: 19) == \"xix\")\nassert(int_to_mini_roman(number:\
    \ 152) == \"clii\")\nassert(int_to_mini_roman(number: 251) == \"ccli\")\nassert(int_to_mini_roman(number:\
    \ 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number: 500) == \"d\")\nassert(int_to_mini_roman(number:\
    \ 1) == \"i\")\nassert(int_to_mini_roman(number: 4) == \"iv\")\nassert(int_to_mini_roman(number:\
    \ 43) == \"xliii\")\nassert(int_to_mini_roman(number: 90) == \"xc\")\nassert(int_to_mini_roman(number:\
    \ 94) == \"xciv\")\nassert(int_to_mini_roman(number: 532) == \"dxxxii\")\nassert(int_to_mini_roman(number:\
    \ 900) == \"cm\")\nassert(int_to_mini_roman(number: 994) == \"cmxciv\")\nassert(int_to_mini_roman(number:\
    \ 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    var result = \"\"\n    var\
    \ num = number\n    while num > 0 {\n        if num >= 1000 {\n            result\
    \ += \"m\"\n            num -= 1000\n        } else if num >= 900 {\n        \
    \    result += \"cm\"\n            num -= 900\n        } else if num >= 500 {\n\
    \            result += \"d\"\n            num -= 500\n        } else if num >=\
    \ 400 {\n            result += \"cd\"\n            num -= 400\n        } else\
    \ if num >= 100 {\n            result += \"c\"\n            num -= 100\n     \
    \   } else if num >= 90 {\n            result += \"xc\"\n            num -= 90\n\
    \        } else if num >= 50 {\n            result += \"l\"\n            num -=\
    \ 50\n        } else if num >= 40 {\n            result += \"xl\"\n          \
    \  num -= 40\n        } else if num >= 10 {\n            result += \"x\"\n   \
    \         num -= 10\n        } else if num >= 9 {\n            result += \"ix\"\
    \n            num -= 9\n        } else if num >= 5 {\n            result += \"\
    v\"\n            num -= 5\n        } else if num >= 4 {\n            result +=\
    \ \"iv\"\n            num -= 4\n        } else if num >= 1 {\n            result\
    \ += \"i\"\n            num -= 1\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(int_to_mini_roman(number: 19) == \"xix\")\nassert(int_to_mini_roman(number:\
    \ 152) == \"clii\")\nassert(int_to_mini_roman(number: 251) == \"ccli\")\nassert(int_to_mini_roman(number:\
    \ 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number: 500) == \"d\")\nassert(int_to_mini_roman(number:\
    \ 1) == \"i\")\nassert(int_to_mini_roman(number: 4) == \"iv\")\nassert(int_to_mini_roman(number:\
    \ 43) == \"xliii\")\nassert(int_to_mini_roman(number: 90) == \"xc\")\nassert(int_to_mini_roman(number:\
    \ 94) == \"xciv\")\nassert(int_to_mini_roman(number: 532) == \"dxxxii\")\nassert(int_to_mini_roman(number:\
    \ 900) == \"cm\")\nassert(int_to_mini_roman(number: 994) == \"cmxciv\")\nassert(int_to_mini_roman(number:\
    \ 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    var result = \"\"\n    var\
    \ num = number\n    while num > 0 {\n        if num >= 1000 {\n            result\
    \ += \"m\"\n            num -= 1000\n        } else if num >= 900 {\n        \
    \    result += \"cm\"\n            num -= 900\n        } else if num >= 500 {\n\
    \            result += \"d\"\n            num -= 500\n        } else if num >=\
    \ 400 {\n            result += \"cd\"\n            num -= 400\n        } else\
    \ if num >= 100 {\n            result += \"c\"\n            num -= 100\n     \
    \   } else if num >= 90 {\n            result += \"xc\"\n            num -= 90\n\
    \        } else if num >= 50 {\n            result += \"l\"\n            num -=\
    \ 50\n        } else if num >= 40 {\n            result += \"xl\"\n          \
    \  num -= 40\n        } else if num >= 10 {\n            result += \"x\"\n   \
    \         num -= 10\n        } else if num >= 9 {\n            result += \"ix\"\
    \n            num -= 9\n        } else if num >= 5 {\n            result += \"\
    v\"\n            num -= 5\n        } else if num >= 4 {\n            result +=\
    \ \"iv\"\n            num -= 4\n        } else if num >= 1 {\n            result\
    \ += \"i\"\n            num -= 1\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(int_to_mini_roman(number: 19) == \"xix\")\nassert(int_to_mini_roman(number:\
    \ 152) == \"clii\")\nassert(int_to_mini_roman(number: 251) == \"ccli\")\nassert(int_to_mini_roman(number:\
    \ 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number: 500) == \"d\")\nassert(int_to_mini_roman(number:\
    \ 1) == \"i\")\nassert(int_to_mini_roman(number: 4) == \"iv\")\nassert(int_to_mini_roman(number:\
    \ 43) == \"xliii\")\nassert(int_to_mini_roman(number: 90) == \"xc\")\nassert(int_to_mini_roman(number:\
    \ 94) == \"xciv\")\nassert(int_to_mini_roman(number: 532) == \"dxxxii\")\nassert(int_to_mini_roman(number:\
    \ 900) == \"cm\")\nassert(int_to_mini_roman(number: 994) == \"cmxciv\")\nassert(int_to_mini_roman(number:\
    \ 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    var result = \"\"\n    var\
    \ num = number\n    while num > 0 {\n        if num >= 1000 {\n            result\
    \ += \"m\"\n            num -= 1000\n        } else if num >= 900 {\n        \
    \    result += \"cm\"\n            num -= 900\n        } else if num >= 500 {\n\
    \            result += \"d\"\n            num -= 500\n        } else if num >=\
    \ 400 {\n            result += \"cd\"\n            num -= 400\n        } else\
    \ if num >= 100 {\n            result += \"c\"\n            num -= 100\n     \
    \   } else if num >= 90 {\n            result += \"xc\"\n            num -= 90\n\
    \        } else if num >= 50 {\n            result += \"l\"\n            num -=\
    \ 50\n        } else if num >= 40 {\n            result += \"xl\"\n          \
    \  num -= 40\n        } else if num >= 10 {\n            result += \"x\"\n   \
    \         num -= 10\n        } else if num >= 9 {\n            result += \"ix\"\
    \n            num -= 9\n        } else if num >= 5 {\n            result += \"\
    v\"\n            num -= 5\n        } else if num >= 4 {\n            result +=\
    \ \"iv\"\n            num -= 4\n        } else if num >= 1 {\n            result\
    \ += \"i\"\n            num -= 1\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(int_to_mini_roman(number: 19) == \"xix\")\nassert(int_to_mini_roman(number:\
    \ 152) == \"clii\")\nassert(int_to_mini_roman(number: 251) == \"ccli\")\nassert(int_to_mini_roman(number:\
    \ 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number: 500) == \"d\")\nassert(int_to_mini_roman(number:\
    \ 1) == \"i\")\nassert(int_to_mini_roman(number: 4) == \"iv\")\nassert(int_to_mini_roman(number:\
    \ 43) == \"xliii\")\nassert(int_to_mini_roman(number: 90) == \"xc\")\nassert(int_to_mini_roman(number:\
    \ 94) == \"xciv\")\nassert(int_to_mini_roman(number: 532) == \"dxxxii\")\nassert(int_to_mini_roman(number:\
    \ 900) == \"cm\")\nassert(int_to_mini_roman(number: 994) == \"cmxciv\")\nassert(int_to_mini_roman(number:\
    \ 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    var result = \"\"\n    var\
    \ num = number\n    while num >= 1000 {\n        result += \"m\"\n        num\
    \ -= 1000\n    }\n    while num >= 900 {\n        result += \"cm\"\n        num\
    \ -= 900\n    }\n    while num >= 500 {\n        result += \"d\"\n        num\
    \ -= 500\n    }\n    while num >= 400 {\n        result += \"cd\"\n        num\
    \ -= 400\n    }\n    while num >= 100 {\n        result += \"c\"\n        num\
    \ -= 100\n    }\n    while num >= 90 {\n        result += \"xc\"\n        num\
    \ -= 90\n    }\n    while num >= 50 {\n        result += \"l\"\n        num -=\
    \ 50\n    }\n    while num >= 40 {\n        result += \"xl\"\n        num -= 40\n\
    \    }\n    while num >= 10 {\n        result += \"x\"\n        num -= 10\n  \
    \  }\n    while num >= 9 {\n        result += \"ix\"\n        num -= 9\n    }\n\
    \    while num >= 5 {\n        result += \"v\"\n        num -= 5\n    }\n    while\
    \ num >= 4 {\n        result += \"iv\"\n        num -= 4\n    }\n    while num\
    \ >= 1 {\n        result += \"i\"\n        num -= 1\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(int_to_mini_roman(number: 19) == \"xix\")\nassert(int_to_mini_roman(number:\
    \ 152) == \"clii\")\nassert(int_to_mini_roman(number: 251) == \"ccli\")\nassert(int_to_mini_roman(number:\
    \ 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number: 500) == \"d\")\nassert(int_to_mini_roman(number:\
    \ 1) == \"i\")\nassert(int_to_mini_roman(number: 4) == \"iv\")\nassert(int_to_mini_roman(number:\
    \ 43) == \"xliii\")\nassert(int_to_mini_roman(number: 90) == \"xc\")\nassert(int_to_mini_roman(number:\
    \ 94) == \"xciv\")\nassert(int_to_mini_roman(number: 532) == \"dxxxii\")\nassert(int_to_mini_roman(number:\
    \ 900) == \"cm\")\nassert(int_to_mini_roman(number: 994) == \"cmxciv\")\nassert(int_to_mini_roman(number:\
    \ 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    var result = \"\"\n    var\
    \ num = number\n    while num > 0 {\n        if num >= 1000 {\n            result\
    \ += \"m\"\n            num -= 1000\n        } else if num >= 900 {\n        \
    \    result += \"cm\"\n            num -= 900\n        } else if num >= 500 {\n\
    \            result += \"d\"\n            num -= 500\n        } else if num >=\
    \ 400 {\n            result += \"cd\"\n            num -= 400\n        } else\
    \ if num >= 100 {\n            result += \"c\"\n            num -= 100\n     \
    \   } else if num >= 90 {\n            result += \"xc\"\n            num -= 90\n\
    \        } else if num >= 50 {\n            result += \"l\"\n            num -=\
    \ 50\n        } else if num >= 40 {\n            result += \"xl\"\n          \
    \  num -= 40\n        } else if num >= 10 {\n            result += \"x\"\n   \
    \         num -= 10\n        } else if num >= 9 {\n            result += \"ix\"\
    \n            num -= 9\n        } else if num >= 5 {\n            result += \"\
    v\"\n            num -= 5\n        } else if num >= 4 {\n            result +=\
    \ \"iv\"\n            num -= 4\n        } else if num >= 1 {\n            result\
    \ += \"i\"\n            num -= 1\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(int_to_mini_roman(number: 19) == \"xix\")\nassert(int_to_mini_roman(number:\
    \ 152) == \"clii\")\nassert(int_to_mini_roman(number: 251) == \"ccli\")\nassert(int_to_mini_roman(number:\
    \ 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number: 500) == \"d\")\nassert(int_to_mini_roman(number:\
    \ 1) == \"i\")\nassert(int_to_mini_roman(number: 4) == \"iv\")\nassert(int_to_mini_roman(number:\
    \ 43) == \"xliii\")\nassert(int_to_mini_roman(number: 90) == \"xc\")\nassert(int_to_mini_roman(number:\
    \ 94) == \"xciv\")\nassert(int_to_mini_roman(number: 532) == \"dxxxii\")\nassert(int_to_mini_roman(number:\
    \ 900) == \"cm\")\nassert(int_to_mini_roman(number: 994) == \"cmxciv\")\nassert(int_to_mini_roman(number:\
    \ 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    var result = \"\"\n    var\
    \ num = number\n    while num > 0 {\n        if num >= 1000 {\n            result\
    \ += \"m\"\n            num -= 1000\n        } else if num >= 900 {\n        \
    \    result += \"cm\"\n            num -= 900\n        } else if num >= 500 {\n\
    \            result += \"d\"\n            num -= 500\n        } else if num >=\
    \ 400 {\n            result += \"cd\"\n            num -= 400\n        } else\
    \ if num >= 100 {\n            result += \"c\"\n            num -= 100\n     \
    \   } else if num >= 90 {\n            result += \"xc\"\n            num -= 90\n\
    \        } else if num >= 50 {\n            result += \"l\"\n            num -=\
    \ 50\n        } else if num >= 40 {\n            result += \"xl\"\n          \
    \  num -= 40\n        } else if num >= 10 {\n            result += \"x\"\n   \
    \         num -= 10\n        } else if num >= 9 {\n            result += \"ix\"\
    \n            num -= 9\n        } else if num >= 5 {\n            result += \"\
    v\"\n            num -= 5\n        } else if num >= 4 {\n            result +=\
    \ \"iv\"\n            num -= 4\n        } else if num >= 1 {\n            result\
    \ += \"i\"\n            num -= 1\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(int_to_mini_roman(number: 19) == \"xix\")\nassert(int_to_mini_roman(number:\
    \ 152) == \"clii\")\nassert(int_to_mini_roman(number: 251) == \"ccli\")\nassert(int_to_mini_roman(number:\
    \ 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number: 500) == \"d\")\nassert(int_to_mini_roman(number:\
    \ 1) == \"i\")\nassert(int_to_mini_roman(number: 4) == \"iv\")\nassert(int_to_mini_roman(number:\
    \ 43) == \"xliii\")\nassert(int_to_mini_roman(number: 90) == \"xc\")\nassert(int_to_mini_roman(number:\
    \ 94) == \"xciv\")\nassert(int_to_mini_roman(number: 532) == \"dxxxii\")\nassert(int_to_mini_roman(number:\
    \ 900) == \"cm\")\nassert(int_to_mini_roman(number: 994) == \"cmxciv\")\nassert(int_to_mini_roman(number:\
    \ 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    var result = \"\"\n    var\
    \ num = number\n    while num > 0 {\n        if num >= 1000 {\n            result\
    \ += \"m\"\n            num -= 1000\n        } else if num >= 900 {\n        \
    \    result += \"cm\"\n            num -= 900\n        } else if num >= 500 {\n\
    \            result += \"d\"\n            num -= 500\n        } else if num >=\
    \ 400 {\n            result += \"cd\"\n            num -= 400\n        } else\
    \ if num >= 100 {\n            result += \"c\"\n            num -= 100\n     \
    \   } else if num >= 90 {\n            result += \"xc\"\n            num -= 90\n\
    \        } else if num >= 50 {\n            result += \"l\"\n            num -=\
    \ 50\n        } else if num >= 40 {\n            result += \"xl\"\n          \
    \  num -= 40\n        } else if num >= 10 {\n            result += \"x\"\n   \
    \         num -= 10\n        } else if num >= 9 {\n            result += \"ix\"\
    \n            num -= 9\n        } else if num >= 5 {\n            result += \"\
    v\"\n            num -= 5\n        } else if num >= 4 {\n            result +=\
    \ \"iv\"\n            num -= 4\n        } else if num >= 1 {\n            result\
    \ += \"i\"\n            num -= 1\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(int_to_mini_roman(number: 19) == \"xix\")\nassert(int_to_mini_roman(number:\
    \ 152) == \"clii\")\nassert(int_to_mini_roman(number: 251) == \"ccli\")\nassert(int_to_mini_roman(number:\
    \ 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number: 500) == \"d\")\nassert(int_to_mini_roman(number:\
    \ 1) == \"i\")\nassert(int_to_mini_roman(number: 4) == \"iv\")\nassert(int_to_mini_roman(number:\
    \ 43) == \"xliii\")\nassert(int_to_mini_roman(number: 90) == \"xc\")\nassert(int_to_mini_roman(number:\
    \ 94) == \"xciv\")\nassert(int_to_mini_roman(number: 532) == \"dxxxii\")\nassert(int_to_mini_roman(number:\
    \ 900) == \"cm\")\nassert(int_to_mini_roman(number: 994) == \"cmxciv\")\nassert(int_to_mini_roman(number:\
    \ 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    var result = \"\"\n    var\
    \ remaining = number\n    while remaining > 0 {\n        if remaining >= 1000\
    \ {\n            result += \"m\"\n            remaining -= 1000\n        } else\
    \ if remaining >= 900 {\n            result += \"cm\"\n            remaining -=\
    \ 900\n        } else if remaining >= 500 {\n            result += \"d\"\n   \
    \         remaining -= 500\n        } else if remaining >= 400 {\n           \
    \ result += \"cd\"\n            remaining -= 400\n        } else if remaining\
    \ >= 100 {\n            result += \"c\"\n            remaining -= 100\n      \
    \  } else if remaining >= 90 {\n            result += \"xc\"\n            remaining\
    \ -= 90\n        } else if remaining >= 50 {\n            result += \"l\"\n  \
    \          remaining -= 50\n        } else if remaining >= 40 {\n            result\
    \ += \"xl\"\n            remaining -= 40\n        } else if remaining >= 10 {\n\
    \            result += \"x\"\n            remaining -= 10\n        } else if remaining\
    \ >= 9 {\n            result += \"ix\"\n            remaining -= 9\n        }\
    \ else if remaining >= 5 {\n            result += \"v\"\n            remaining\
    \ -= 5\n        } else if remaining >= 4 {\n            result += \"iv\"\n   \
    \         remaining -= 4\n        } else if remaining >= 1 {\n            result\
    \ += \"i\"\n            remaining -= 1\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(int_to_mini_roman(number: 19) == \"xix\")\nassert(int_to_mini_roman(number:\
    \ 152) == \"clii\")\nassert(int_to_mini_roman(number: 251) == \"ccli\")\nassert(int_to_mini_roman(number:\
    \ 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number: 500) == \"d\")\nassert(int_to_mini_roman(number:\
    \ 1) == \"i\")\nassert(int_to_mini_roman(number: 4) == \"iv\")\nassert(int_to_mini_roman(number:\
    \ 43) == \"xliii\")\nassert(int_to_mini_roman(number: 90) == \"xc\")\nassert(int_to_mini_roman(number:\
    \ 94) == \"xciv\")\nassert(int_to_mini_roman(number: 532) == \"dxxxii\")\nassert(int_to_mini_roman(number:\
    \ 900) == \"cm\")\nassert(int_to_mini_roman(number: 994) == \"cmxciv\")\nassert(int_to_mini_roman(number:\
    \ 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    var result = \"\"\n    var\
    \ num = number\n    while num > 0 {\n        if num >= 1000 {\n            result\
    \ += \"m\"\n            num -= 1000\n        } else if num >= 900 {\n        \
    \    result += \"cm\"\n            num -= 900\n        } else if num >= 500 {\n\
    \            result += \"d\"\n            num -= 500\n        } else if num >=\
    \ 400 {\n            result += \"cd\"\n            num -= 400\n        } else\
    \ if num >= 100 {\n            result += \"c\"\n            num -= 100\n     \
    \   } else if num >= 90 {\n            result += \"xc\"\n            num -= 90\n\
    \        } else if num >= 50 {\n            result += \"l\"\n            num -=\
    \ 50\n        } else if num >= 40 {\n            result += \"xl\"\n          \
    \  num -= 40\n        } else if num >= 10 {\n            result += \"x\"\n   \
    \         num -= 10\n        } else if num >= 9 {\n            result += \"ix\"\
    \n            num -= 9\n        } else if num >= 5 {\n            result += \"\
    v\"\n            num -= 5\n        } else if num >= 4 {\n            result +=\
    \ \"iv\"\n            num -= 4\n        } else if num >= 1 {\n            result\
    \ += \"i\"\n            num -= 1\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(int_to_mini_roman(number: 19) == \"xix\")\nassert(int_to_mini_roman(number:\
    \ 152) == \"clii\")\nassert(int_to_mini_roman(number: 251) == \"ccli\")\nassert(int_to_mini_roman(number:\
    \ 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number: 500) == \"d\")\nassert(int_to_mini_roman(number:\
    \ 1) == \"i\")\nassert(int_to_mini_roman(number: 4) == \"iv\")\nassert(int_to_mini_roman(number:\
    \ 43) == \"xliii\")\nassert(int_to_mini_roman(number: 90) == \"xc\")\nassert(int_to_mini_roman(number:\
    \ 94) == \"xciv\")\nassert(int_to_mini_roman(number: 532) == \"dxxxii\")\nassert(int_to_mini_roman(number:\
    \ 900) == \"cm\")\nassert(int_to_mini_roman(number: 994) == \"cmxciv\")\nassert(int_to_mini_roman(number:\
    \ 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    var result = \"\"\n    var\
    \ num = number\n    while num > 0 {\n        if num >= 1000 {\n            result\
    \ += \"m\"\n            num -= 1000\n        } else if num >= 900 {\n        \
    \    result += \"cm\"\n            num -= 900\n        } else if num >= 500 {\n\
    \            result += \"d\"\n            num -= 500\n        } else if num >=\
    \ 400 {\n            result += \"cd\"\n            num -= 400\n        } else\
    \ if num >= 100 {\n            result += \"c\"\n            num -= 100\n     \
    \   } else if num >= 90 {\n            result += \"xc\"\n            num -= 90\n\
    \        } else if num >= 50 {\n            result += \"l\"\n            num -=\
    \ 50\n        } else if num >= 40 {\n            result += \"xl\"\n          \
    \  num -= 40\n        } else if num >= 10 {\n            result += \"x\"\n   \
    \         num -= 10\n        } else if num >= 9 {\n            result += \"ix\"\
    \n            num -= 9\n        } else if num >= 5 {\n            result += \"\
    v\"\n            num -= 5\n        } else if num >= 4 {\n            result +=\
    \ \"iv\"\n            num -= 4\n        } else if num >= 1 {\n            result\
    \ += \"i\"\n            num -= 1\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(int_to_mini_roman(number: 19) == \"xix\")\nassert(int_to_mini_roman(number:\
    \ 152) == \"clii\")\nassert(int_to_mini_roman(number: 251) == \"ccli\")\nassert(int_to_mini_roman(number:\
    \ 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number: 500) == \"d\")\nassert(int_to_mini_roman(number:\
    \ 1) == \"i\")\nassert(int_to_mini_roman(number: 4) == \"iv\")\nassert(int_to_mini_roman(number:\
    \ 43) == \"xliii\")\nassert(int_to_mini_roman(number: 90) == \"xc\")\nassert(int_to_mini_roman(number:\
    \ 94) == \"xciv\")\nassert(int_to_mini_roman(number: 532) == \"dxxxii\")\nassert(int_to_mini_roman(number:\
    \ 900) == \"cm\")\nassert(int_to_mini_roman(number: 994) == \"cmxciv\")\nassert(int_to_mini_roman(number:\
    \ 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    var result = \"\"\n    var\
    \ num = number\n    while num > 0 {\n        if num >= 1000 {\n            result\
    \ += \"m\"\n            num -= 1000\n        } else if num >= 900 {\n        \
    \    result += \"cm\"\n            num -= 900\n        } else if num >= 500 {\n\
    \            result += \"d\"\n            num -= 500\n        } else if num >=\
    \ 400 {\n            result += \"cd\"\n            num -= 400\n        } else\
    \ if num >= 100 {\n            result += \"c\"\n            num -= 100\n     \
    \   } else if num >= 90 {\n            result += \"xc\"\n            num -= 90\n\
    \        } else if num >= 50 {\n            result += \"l\"\n            num -=\
    \ 50\n        } else if num >= 40 {\n            result += \"xl\"\n          \
    \  num -= 40\n        } else if num >= 10 {\n            result += \"x\"\n   \
    \         num -= 10\n        } else if num >= 9 {\n            result += \"ix\"\
    \n            num -= 9\n        } else if num >= 5 {\n            result += \"\
    v\"\n            num -= 5\n        } else if num >= 4 {\n            result +=\
    \ \"iv\"\n            num -= 4\n        } else if num >= 1 {\n            result\
    \ += \"i\"\n            num -= 1\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(int_to_mini_roman(number: 19) == \"xix\")\nassert(int_to_mini_roman(number:\
    \ 152) == \"clii\")\nassert(int_to_mini_roman(number: 251) == \"ccli\")\nassert(int_to_mini_roman(number:\
    \ 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number: 500) == \"d\")\nassert(int_to_mini_roman(number:\
    \ 1) == \"i\")\nassert(int_to_mini_roman(number: 4) == \"iv\")\nassert(int_to_mini_roman(number:\
    \ 43) == \"xliii\")\nassert(int_to_mini_roman(number: 90) == \"xc\")\nassert(int_to_mini_roman(number:\
    \ 94) == \"xciv\")\nassert(int_to_mini_roman(number: 532) == \"dxxxii\")\nassert(int_to_mini_roman(number:\
    \ 900) == \"cm\")\nassert(int_to_mini_roman(number: 994) == \"cmxciv\")\nassert(int_to_mini_roman(number:\
    \ 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    var result = \"\"\n    var\
    \ num = number\n    while num > 0 {\n        if num >= 1000 {\n            result\
    \ += \"m\"\n            num -= 1000\n        } else if num >= 900 {\n        \
    \    result += \"cm\"\n            num -= 900\n        } else if num >= 500 {\n\
    \            result += \"d\"\n            num -= 500\n        } else if num >=\
    \ 400 {\n            result += \"cd\"\n            num -= 400\n        } else\
    \ if num >= 100 {\n            result += \"c\"\n            num -= 100\n     \
    \   } else if num >= 90 {\n            result += \"xc\"\n            num -= 90\n\
    \        } else if num >= 50 {\n            result += \"l\"\n            num -=\
    \ 50\n        } else if num >= 40 {\n            result += \"xl\"\n          \
    \  num -= 40\n        } else if num >= 10 {\n            result += \"x\"\n   \
    \         num -= 10\n        } else if num >= 9 {\n            result += \"ix\"\
    \n            num -= 9\n        } else if num >= 5 {\n            result += \"\
    v\"\n            num -= 5\n        } else if num >= 4 {\n            result +=\
    \ \"iv\"\n            num -= 4\n        } else if num >= 1 {\n            result\
    \ += \"i\"\n            num -= 1\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(int_to_mini_roman(number: 19) == \"xix\")\nassert(int_to_mini_roman(number:\
    \ 152) == \"clii\")\nassert(int_to_mini_roman(number: 251) == \"ccli\")\nassert(int_to_mini_roman(number:\
    \ 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number: 500) == \"d\")\nassert(int_to_mini_roman(number:\
    \ 1) == \"i\")\nassert(int_to_mini_roman(number: 4) == \"iv\")\nassert(int_to_mini_roman(number:\
    \ 43) == \"xliii\")\nassert(int_to_mini_roman(number: 90) == \"xc\")\nassert(int_to_mini_roman(number:\
    \ 94) == \"xciv\")\nassert(int_to_mini_roman(number: 532) == \"dxxxii\")\nassert(int_to_mini_roman(number:\
    \ 900) == \"cm\")\nassert(int_to_mini_roman(number: 994) == \"cmxciv\")\nassert(int_to_mini_roman(number:\
    \ 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    let roman_numerals = [\"\
    m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\"\
    , \"iv\", \"i\"]\n    let arabic_numerals = [1000, 900, 500, 400, 100, 90, 50,\
    \ 40, 10, 9, 5, 4, 1]\n    var result = \"\"\n    var remainder = number\n   \
    \ for (index, numeral) in roman_numerals.enumerated() {\n        let arabic_numeral\
    \ = arabic_numerals[index]\n        while remainder >= arabic_numeral {\n    \
    \        result += numeral\n            remainder -= arabic_numeral\n        }\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(int_to_mini_roman(number:\
    \ 19) == \"xix\")\nassert(int_to_mini_roman(number: 152) == \"clii\")\nassert(int_to_mini_roman(number:\
    \ 251) == \"ccli\")\nassert(int_to_mini_roman(number: 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number:\
    \ 500) == \"d\")\nassert(int_to_mini_roman(number: 1) == \"i\")\nassert(int_to_mini_roman(number:\
    \ 4) == \"iv\")\nassert(int_to_mini_roman(number: 43) == \"xliii\")\nassert(int_to_mini_roman(number:\
    \ 90) == \"xc\")\nassert(int_to_mini_roman(number: 94) == \"xciv\")\nassert(int_to_mini_roman(number:\
    \ 532) == \"dxxxii\")\nassert(int_to_mini_roman(number: 900) == \"cm\")\nassert(int_to_mini_roman(number:\
    \ 994) == \"cmxciv\")\nassert(int_to_mini_roman(number: 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    var result = \"\"\n    var\
    \ num = number\n    while num > 0 {\n        if num >= 1000 {\n            result\
    \ += \"m\"\n            num -= 1000\n        } else if num >= 900 {\n        \
    \    result += \"cm\"\n            num -= 900\n        } else if num >= 500 {\n\
    \            result += \"d\"\n            num -= 500\n        } else if num >=\
    \ 400 {\n            result += \"cd\"\n            num -= 400\n        } else\
    \ if num >= 100 {\n            result += \"c\"\n            num -= 100\n     \
    \   } else if num >= 90 {\n            result += \"xc\"\n            num -= 90\n\
    \        } else if num >= 50 {\n            result += \"l\"\n            num -=\
    \ 50\n        } else if num >= 40 {\n            result += \"xl\"\n          \
    \  num -= 40\n        } else if num >= 10 {\n            result += \"x\"\n   \
    \         num -= 10\n        } else if num >= 9 {\n            result += \"ix\"\
    \n            num -= 9\n        } else if num >= 5 {\n            result += \"\
    v\"\n            num -= 5\n        } else if num >= 4 {\n            result +=\
    \ \"iv\"\n            num -= 4\n        } else if num >= 1 {\n            result\
    \ += \"i\"\n            num -= 1\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(int_to_mini_roman(number: 19) == \"xix\")\nassert(int_to_mini_roman(number:\
    \ 152) == \"clii\")\nassert(int_to_mini_roman(number: 251) == \"ccli\")\nassert(int_to_mini_roman(number:\
    \ 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number: 500) == \"d\")\nassert(int_to_mini_roman(number:\
    \ 1) == \"i\")\nassert(int_to_mini_roman(number: 4) == \"iv\")\nassert(int_to_mini_roman(number:\
    \ 43) == \"xliii\")\nassert(int_to_mini_roman(number: 90) == \"xc\")\nassert(int_to_mini_roman(number:\
    \ 94) == \"xciv\")\nassert(int_to_mini_roman(number: 532) == \"dxxxii\")\nassert(int_to_mini_roman(number:\
    \ 900) == \"cm\")\nassert(int_to_mini_roman(number: 994) == \"cmxciv\")\nassert(int_to_mini_roman(number:\
    \ 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    var result = \"\"\n    var\
    \ num = number\n    while num > 0 {\n        if num >= 1000 {\n            result\
    \ += \"m\"\n            num -= 1000\n        } else if num >= 900 {\n        \
    \    result += \"cm\"\n            num -= 900\n        } else if num >= 500 {\n\
    \            result += \"d\"\n            num -= 500\n        } else if num >=\
    \ 400 {\n            result += \"cd\"\n            num -= 400\n        } else\
    \ if num >= 100 {\n            result += \"c\"\n            num -= 100\n     \
    \   } else if num >= 90 {\n            result += \"xc\"\n            num -= 90\n\
    \        } else if num >= 50 {\n            result += \"l\"\n            num -=\
    \ 50\n        } else if num >= 40 {\n            result += \"xl\"\n          \
    \  num -= 40\n        } else if num >= 10 {\n            result += \"x\"\n   \
    \         num -= 10\n        } else if num >= 9 {\n            result += \"ix\"\
    \n            num -= 9\n        } else if num >= 5 {\n            result += \"\
    v\"\n            num -= 5\n        } else if num >= 4 {\n            result +=\
    \ \"iv\"\n            num -= 4\n        } else if num >= 1 {\n            result\
    \ += \"i\"\n            num -= 1\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(int_to_mini_roman(number: 19) == \"xix\")\nassert(int_to_mini_roman(number:\
    \ 152) == \"clii\")\nassert(int_to_mini_roman(number: 251) == \"ccli\")\nassert(int_to_mini_roman(number:\
    \ 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number: 500) == \"d\")\nassert(int_to_mini_roman(number:\
    \ 1) == \"i\")\nassert(int_to_mini_roman(number: 4) == \"iv\")\nassert(int_to_mini_roman(number:\
    \ 43) == \"xliii\")\nassert(int_to_mini_roman(number: 90) == \"xc\")\nassert(int_to_mini_roman(number:\
    \ 94) == \"xciv\")\nassert(int_to_mini_roman(number: 532) == \"dxxxii\")\nassert(int_to_mini_roman(number:\
    \ 900) == \"cm\")\nassert(int_to_mini_roman(number: 994) == \"cmxciv\")\nassert(int_to_mini_roman(number:\
    \ 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    var result = \"\"\n    var\
    \ number = number\n    while number >= 1000 {\n        result += \"m\"\n     \
    \   number -= 1000\n    }\n    while number >= 900 {\n        result += \"cm\"\
    \n        number -= 900\n    }\n    while number >= 500 {\n        result += \"\
    d\"\n        number -= 500\n    }\n    while number >= 400 {\n        result +=\
    \ \"cd\"\n        number -= 400\n    }\n    while number >= 100 {\n        result\
    \ += \"c\"\n        number -= 100\n    }\n    while number >= 90 {\n        result\
    \ += \"xc\"\n        number -= 90\n    }\n    while number >= 50 {\n        result\
    \ += \"l\"\n        number -= 50\n    }\n    while number >= 40 {\n        result\
    \ += \"xl\"\n        number -= 40\n    }\n    while number >= 10 {\n        result\
    \ += \"x\"\n        number -= 10\n    }\n    while number >= 9 {\n        result\
    \ += \"ix\"\n        number -= 9\n    }\n    while number >= 5 {\n        result\
    \ += \"v\"\n        number -= 5\n    }\n    while number >= 4 {\n        result\
    \ += \"iv\"\n        number -= 4\n    }\n    while number >= 1 {\n        result\
    \ += \"i\"\n        number -= 1\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(int_to_mini_roman(number: 19) == \"xix\")\nassert(int_to_mini_roman(number:\
    \ 152) == \"clii\")\nassert(int_to_mini_roman(number: 251) == \"ccli\")\nassert(int_to_mini_roman(number:\
    \ 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number: 500) == \"d\")\nassert(int_to_mini_roman(number:\
    \ 1) == \"i\")\nassert(int_to_mini_roman(number: 4) == \"iv\")\nassert(int_to_mini_roman(number:\
    \ 43) == \"xliii\")\nassert(int_to_mini_roman(number: 90) == \"xc\")\nassert(int_to_mini_roman(number:\
    \ 94) == \"xciv\")\nassert(int_to_mini_roman(number: 532) == \"dxxxii\")\nassert(int_to_mini_roman(number:\
    \ 900) == \"cm\")\nassert(int_to_mini_roman(number: 994) == \"cmxciv\")\nassert(int_to_mini_roman(number:\
    \ 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    var result = \"\"\n    var\
    \ num = number\n    while num > 0 {\n        if num >= 1000 {\n            result\
    \ += \"m\"\n            num -= 1000\n        } else if num >= 900 {\n        \
    \    result += \"cm\"\n            num -= 900\n        } else if num >= 500 {\n\
    \            result += \"d\"\n            num -= 500\n        } else if num >=\
    \ 400 {\n            result += \"cd\"\n            num -= 400\n        } else\
    \ if num >= 100 {\n            result += \"c\"\n            num -= 100\n     \
    \   } else if num >= 90 {\n            result += \"xc\"\n            num -= 90\n\
    \        } else if num >= 50 {\n            result += \"l\"\n            num -=\
    \ 50\n        } else if num >= 40 {\n            result += \"xl\"\n          \
    \  num -= 40\n        } else if num >= 10 {\n            result += \"x\"\n   \
    \         num -= 10\n        } else if num >= 9 {\n            result += \"ix\"\
    \n            num -= 9\n        } else if num >= 5 {\n            result += \"\
    v\"\n            num -= 5\n        } else if num >= 4 {\n            result +=\
    \ \"iv\"\n            num -= 4\n        } else if num >= 1 {\n            result\
    \ += \"i\"\n            num -= 1\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(int_to_mini_roman(number: 19) == \"xix\")\nassert(int_to_mini_roman(number:\
    \ 152) == \"clii\")\nassert(int_to_mini_roman(number: 251) == \"ccli\")\nassert(int_to_mini_roman(number:\
    \ 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number: 500) == \"d\")\nassert(int_to_mini_roman(number:\
    \ 1) == \"i\")\nassert(int_to_mini_roman(number: 4) == \"iv\")\nassert(int_to_mini_roman(number:\
    \ 43) == \"xliii\")\nassert(int_to_mini_roman(number: 90) == \"xc\")\nassert(int_to_mini_roman(number:\
    \ 94) == \"xciv\")\nassert(int_to_mini_roman(number: 532) == \"dxxxii\")\nassert(int_to_mini_roman(number:\
    \ 900) == \"cm\")\nassert(int_to_mini_roman(number: 994) == \"cmxciv\")\nassert(int_to_mini_roman(number:\
    \ 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    var result = \"\"\n    var\
    \ num = number\n    while num > 0 {\n        if num >= 1000 {\n            result\
    \ += \"m\"\n            num -= 1000\n        } else if num >= 900 {\n        \
    \    result += \"cm\"\n            num -= 900\n        } else if num >= 500 {\n\
    \            result += \"d\"\n            num -= 500\n        } else if num >=\
    \ 400 {\n            result += \"cd\"\n            num -= 400\n        } else\
    \ if num >= 100 {\n            result += \"c\"\n            num -= 100\n     \
    \   } else if num >= 90 {\n            result += \"xc\"\n            num -= 90\n\
    \        } else if num >= 50 {\n            result += \"l\"\n            num -=\
    \ 50\n        } else if num >= 40 {\n            result += \"xl\"\n          \
    \  num -= 40\n        } else if num >= 10 {\n            result += \"x\"\n   \
    \         num -= 10\n        } else if num >= 9 {\n            result += \"ix\"\
    \n            num -= 9\n        } else if num >= 5 {\n            result += \"\
    v\"\n            num -= 5\n        } else if num >= 4 {\n            result +=\
    \ \"iv\"\n            num -= 4\n        } else if num >= 1 {\n            result\
    \ += \"i\"\n            num -= 1\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(int_to_mini_roman(number: 19) == \"xix\")\nassert(int_to_mini_roman(number:\
    \ 152) == \"clii\")\nassert(int_to_mini_roman(number: 251) == \"ccli\")\nassert(int_to_mini_roman(number:\
    \ 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number: 500) == \"d\")\nassert(int_to_mini_roman(number:\
    \ 1) == \"i\")\nassert(int_to_mini_roman(number: 4) == \"iv\")\nassert(int_to_mini_roman(number:\
    \ 43) == \"xliii\")\nassert(int_to_mini_roman(number: 90) == \"xc\")\nassert(int_to_mini_roman(number:\
    \ 94) == \"xciv\")\nassert(int_to_mini_roman(number: 532) == \"dxxxii\")\nassert(int_to_mini_roman(number:\
    \ 900) == \"cm\")\nassert(int_to_mini_roman(number: 994) == \"cmxciv\")\nassert(int_to_mini_roman(number:\
    \ 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    var result = \"\"\n    var\
    \ num = number\n    while num > 0 {\n        if num >= 1000 {\n            result\
    \ += \"m\"\n            num -= 1000\n        } else if num >= 900 {\n        \
    \    result += \"cm\"\n            num -= 900\n        } else if num >= 500 {\n\
    \            result += \"d\"\n            num -= 500\n        } else if num >=\
    \ 400 {\n            result += \"cd\"\n            num -= 400\n        } else\
    \ if num >= 100 {\n            result += \"c\"\n            num -= 100\n     \
    \   } else if num >= 90 {\n            result += \"xc\"\n            num -= 90\n\
    \        } else if num >= 50 {\n            result += \"l\"\n            num -=\
    \ 50\n        } else if num >= 40 {\n            result += \"xl\"\n          \
    \  num -= 40\n        } else if num >= 10 {\n            result += \"x\"\n   \
    \         num -= 10\n        } else if num >= 9 {\n            result += \"ix\"\
    \n            num -= 9\n        } else if num >= 5 {\n            result += \"\
    v\"\n            num -= 5\n        } else if num >= 4 {\n            result +=\
    \ \"iv\"\n            num -= 4\n        } else if num >= 1 {\n            result\
    \ += \"i\"\n            num -= 1\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(int_to_mini_roman(number: 19) == \"xix\")\nassert(int_to_mini_roman(number:\
    \ 152) == \"clii\")\nassert(int_to_mini_roman(number: 251) == \"ccli\")\nassert(int_to_mini_roman(number:\
    \ 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number: 500) == \"d\")\nassert(int_to_mini_roman(number:\
    \ 1) == \"i\")\nassert(int_to_mini_roman(number: 4) == \"iv\")\nassert(int_to_mini_roman(number:\
    \ 43) == \"xliii\")\nassert(int_to_mini_roman(number: 90) == \"xc\")\nassert(int_to_mini_roman(number:\
    \ 94) == \"xciv\")\nassert(int_to_mini_roman(number: 532) == \"dxxxii\")\nassert(int_to_mini_roman(number:\
    \ 900) == \"cm\")\nassert(int_to_mini_roman(number: 994) == \"cmxciv\")\nassert(int_to_mini_roman(number:\
    \ 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    var result = \"\"\n    var\
    \ num = number\n    while num > 0 {\n        if num >= 1000 {\n            result\
    \ += \"m\"\n            num -= 1000\n        } else if num >= 900 {\n        \
    \    result += \"cm\"\n            num -= 900\n        } else if num >= 500 {\n\
    \            result += \"d\"\n            num -= 500\n        } else if num >=\
    \ 400 {\n            result += \"cd\"\n            num -= 400\n        } else\
    \ if num >= 100 {\n            result += \"c\"\n            num -= 100\n     \
    \   } else if num >= 90 {\n            result += \"xc\"\n            num -= 90\n\
    \        } else if num >= 50 {\n            result += \"l\"\n            num -=\
    \ 50\n        } else if num >= 40 {\n            result += \"xl\"\n          \
    \  num -= 40\n        } else if num >= 10 {\n            result += \"x\"\n   \
    \         num -= 10\n        } else if num >= 9 {\n            result += \"ix\"\
    \n            num -= 9\n        } else if num >= 5 {\n            result += \"\
    v\"\n            num -= 5\n        } else if num >= 4 {\n            result +=\
    \ \"iv\"\n            num -= 4\n        } else if num >= 1 {\n            result\
    \ += \"i\"\n            num -= 1\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(int_to_mini_roman(number: 19) == \"xix\")\nassert(int_to_mini_roman(number:\
    \ 152) == \"clii\")\nassert(int_to_mini_roman(number: 251) == \"ccli\")\nassert(int_to_mini_roman(number:\
    \ 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number: 500) == \"d\")\nassert(int_to_mini_roman(number:\
    \ 1) == \"i\")\nassert(int_to_mini_roman(number: 4) == \"iv\")\nassert(int_to_mini_roman(number:\
    \ 43) == \"xliii\")\nassert(int_to_mini_roman(number: 90) == \"xc\")\nassert(int_to_mini_roman(number:\
    \ 94) == \"xciv\")\nassert(int_to_mini_roman(number: 532) == \"dxxxii\")\nassert(int_to_mini_roman(number:\
    \ 900) == \"cm\")\nassert(int_to_mini_roman(number: 994) == \"cmxciv\")\nassert(int_to_mini_roman(number:\
    \ 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    let roman_numerals = [\n\
    \        \"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"\
    ix\", \"v\", \"iv\", \"i\"\n    ]\n    let decimal_values = [\n        1000, 900,\
    \ 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1\n    ]\n    var result = \"\"\n  \
    \  var num = number\n    for (index, numeral) in roman_numerals.enumerated() {\n\
    \        while num >= decimal_values[index] {\n            result += numeral\n\
    \            num -= decimal_values[index]\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(int_to_mini_roman(number: 19) == \"xix\")\nassert(int_to_mini_roman(number:\
    \ 152) == \"clii\")\nassert(int_to_mini_roman(number: 251) == \"ccli\")\nassert(int_to_mini_roman(number:\
    \ 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number: 500) == \"d\")\nassert(int_to_mini_roman(number:\
    \ 1) == \"i\")\nassert(int_to_mini_roman(number: 4) == \"iv\")\nassert(int_to_mini_roman(number:\
    \ 43) == \"xliii\")\nassert(int_to_mini_roman(number: 90) == \"xc\")\nassert(int_to_mini_roman(number:\
    \ 94) == \"xciv\")\nassert(int_to_mini_roman(number: 532) == \"dxxxii\")\nassert(int_to_mini_roman(number:\
    \ 900) == \"cm\")\nassert(int_to_mini_roman(number: 994) == \"cmxciv\")\nassert(int_to_mini_roman(number:\
    \ 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    var result = \"\"\n    var\
    \ num = number\n    while num > 0 {\n        if num >= 1000 {\n            result\
    \ += \"m\"\n            num -= 1000\n        } else if num >= 900 {\n        \
    \    result += \"cm\"\n            num -= 900\n        } else if num >= 500 {\n\
    \            result += \"d\"\n            num -= 500\n        } else if num >=\
    \ 400 {\n            result += \"cd\"\n            num -= 400\n        } else\
    \ if num >= 100 {\n            result += \"c\"\n            num -= 100\n     \
    \   } else if num >= 90 {\n            result += \"xc\"\n            num -= 90\n\
    \        } else if num >= 50 {\n            result += \"l\"\n            num -=\
    \ 50\n        } else if num >= 40 {\n            result += \"xl\"\n          \
    \  num -= 40\n        } else if num >= 10 {\n            result += \"x\"\n   \
    \         num -= 10\n        } else if num >= 9 {\n            result += \"ix\"\
    \n            num -= 9\n        } else if num >= 5 {\n            result += \"\
    v\"\n            num -= 5\n        } else if num >= 4 {\n            result +=\
    \ \"iv\"\n            num -= 4\n        } else if num >= 1 {\n            result\
    \ += \"i\"\n            num -= 1\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(int_to_mini_roman(number: 19) == \"xix\")\nassert(int_to_mini_roman(number:\
    \ 152) == \"clii\")\nassert(int_to_mini_roman(number: 251) == \"ccli\")\nassert(int_to_mini_roman(number:\
    \ 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number: 500) == \"d\")\nassert(int_to_mini_roman(number:\
    \ 1) == \"i\")\nassert(int_to_mini_roman(number: 4) == \"iv\")\nassert(int_to_mini_roman(number:\
    \ 43) == \"xliii\")\nassert(int_to_mini_roman(number: 90) == \"xc\")\nassert(int_to_mini_roman(number:\
    \ 94) == \"xciv\")\nassert(int_to_mini_roman(number: 532) == \"dxxxii\")\nassert(int_to_mini_roman(number:\
    \ 900) == \"cm\")\nassert(int_to_mini_roman(number: 994) == \"cmxciv\")\nassert(int_to_mini_roman(number:\
    \ 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    let roman_numerals = [\"\
    m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\"\
    , \"iv\", \"i\"]\n    let numbers = [1000, 900, 500, 400, 100, 90, 50, 40, 10,\
    \ 9, 5, 4, 1]\n    var result = \"\"\n    var remaining = number\n    for i in\
    \ 0..<roman_numerals.count {\n        while remaining >= numbers[i] {\n      \
    \      result += roman_numerals[i]\n            remaining -= numbers[i]\n    \
    \    }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(int_to_mini_roman(number:\
    \ 19) == \"xix\")\nassert(int_to_mini_roman(number: 152) == \"clii\")\nassert(int_to_mini_roman(number:\
    \ 251) == \"ccli\")\nassert(int_to_mini_roman(number: 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number:\
    \ 500) == \"d\")\nassert(int_to_mini_roman(number: 1) == \"i\")\nassert(int_to_mini_roman(number:\
    \ 4) == \"iv\")\nassert(int_to_mini_roman(number: 43) == \"xliii\")\nassert(int_to_mini_roman(number:\
    \ 90) == \"xc\")\nassert(int_to_mini_roman(number: 94) == \"xciv\")\nassert(int_to_mini_roman(number:\
    \ 532) == \"dxxxii\")\nassert(int_to_mini_roman(number: 900) == \"cm\")\nassert(int_to_mini_roman(number:\
    \ 994) == \"cmxciv\")\nassert(int_to_mini_roman(number: 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    var result = \"\"\n    var\
    \ num = number\n    while num > 0 {\n        if num >= 1000 {\n            result\
    \ += \"m\"\n            num -= 1000\n        } else if num >= 900 {\n        \
    \    result += \"cm\"\n            num -= 900\n        } else if num >= 500 {\n\
    \            result += \"d\"\n            num -= 500\n        } else if num >=\
    \ 400 {\n            result += \"cd\"\n            num -= 400\n        } else\
    \ if num >= 100 {\n            result += \"c\"\n            num -= 100\n     \
    \   } else if num >= 90 {\n            result += \"xc\"\n            num -= 90\n\
    \        } else if num >= 50 {\n            result += \"l\"\n            num -=\
    \ 50\n        } else if num >= 40 {\n            result += \"xl\"\n          \
    \  num -= 40\n        } else if num >= 10 {\n            result += \"x\"\n   \
    \         num -= 10\n        } else if num >= 9 {\n            result += \"ix\"\
    \n            num -= 9\n        } else if num >= 5 {\n            result += \"\
    v\"\n            num -= 5\n        } else if num >= 4 {\n            result +=\
    \ \"iv\"\n            num -= 4\n        } else if num >= 1 {\n            result\
    \ += \"i\"\n            num -= 1\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(int_to_mini_roman(number: 19) == \"xix\")\nassert(int_to_mini_roman(number:\
    \ 152) == \"clii\")\nassert(int_to_mini_roman(number: 251) == \"ccli\")\nassert(int_to_mini_roman(number:\
    \ 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number: 500) == \"d\")\nassert(int_to_mini_roman(number:\
    \ 1) == \"i\")\nassert(int_to_mini_roman(number: 4) == \"iv\")\nassert(int_to_mini_roman(number:\
    \ 43) == \"xliii\")\nassert(int_to_mini_roman(number: 90) == \"xc\")\nassert(int_to_mini_roman(number:\
    \ 94) == \"xciv\")\nassert(int_to_mini_roman(number: 532) == \"dxxxii\")\nassert(int_to_mini_roman(number:\
    \ 900) == \"cm\")\nassert(int_to_mini_roman(number: 994) == \"cmxciv\")\nassert(int_to_mini_roman(number:\
    \ 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
- exit_code: 1
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    let roman_numerals = [\"\
    i\", \"v\", \"x\", \"l\", \"c\", \"d\", \"m\"]\n    var result = \"\"\n    var\
    \ num = number\n    var i = 0\n    while num > 0 {\n        let digit = num %\
    \ 10\n        if digit == 9 {\n            result = roman_numerals[i] + roman_numerals[i\
    \ + 2] + result\n        } else if digit == 4 {\n            result = roman_numerals[i]\
    \ + roman_numerals[i + 1] + result\n        } else {\n            if digit >=\
    \ 5 {\n                result = roman_numerals[i + 1] + result\n             \
    \   digit -= 5\n            }\n            for _ in 0..<digit {\n            \
    \    result = roman_numerals[i] + result\n            }\n        }\n        num\
    \ /= 10\n        i += 2\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(int_to_mini_roman(number: 19) == \"xix\")\nassert(int_to_mini_roman(number:\
    \ 152) == \"clii\")\nassert(int_to_mini_roman(number: 251) == \"ccli\")\nassert(int_to_mini_roman(number:\
    \ 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number: 500) == \"d\")\nassert(int_to_mini_roman(number:\
    \ 1) == \"i\")\nassert(int_to_mini_roman(number: 4) == \"iv\")\nassert(int_to_mini_roman(number:\
    \ 43) == \"xliii\")\nassert(int_to_mini_roman(number: 90) == \"xc\")\nassert(int_to_mini_roman(number:\
    \ 94) == \"xciv\")\nassert(int_to_mini_roman(number: 532) == \"dxxxii\")\nassert(int_to_mini_roman(number:\
    \ 900) == \"cm\")\nassert(int_to_mini_roman(number: 994) == \"cmxciv\")\nassert(int_to_mini_roman(number:\
    \ 1000) == \"m\")"
  status: SyntaxError
  stderr: "/tmp/tmpnpc78nm9.swift:26:23: error: left side of mutating operator isn't\
    \ mutable: 'digit' is a 'let' constant\n                digit -= 5\n         \
    \       ~~~~~ ^\n/tmp/tmpnpc78nm9.swift:18:9: note: change 'let' to 'var' to make\
    \ it mutable\n        let digit = num % 10\n        ^~~\n        var\n"
  stdout: ''
  timestamp: 1660014146
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    var result = \"\"\n    var\
    \ num = number\n    while num > 0 {\n        if num >= 1000 {\n            result\
    \ += \"m\"\n            num -= 1000\n        } else if num >= 900 {\n        \
    \    result += \"cm\"\n            num -= 900\n        } else if num >= 500 {\n\
    \            result += \"d\"\n            num -= 500\n        } else if num >=\
    \ 400 {\n            result += \"cd\"\n            num -= 400\n        } else\
    \ if num >= 100 {\n            result += \"c\"\n            num -= 100\n     \
    \   } else if num >= 90 {\n            result += \"xc\"\n            num -= 90\n\
    \        } else if num >= 50 {\n            result += \"l\"\n            num -=\
    \ 50\n        } else if num >= 40 {\n            result += \"xl\"\n          \
    \  num -= 40\n        } else if num >= 10 {\n            result += \"x\"\n   \
    \         num -= 10\n        } else if num >= 9 {\n            result += \"ix\"\
    \n            num -= 9\n        } else if num >= 5 {\n            result += \"\
    v\"\n            num -= 5\n        } else if num >= 4 {\n            result +=\
    \ \"iv\"\n            num -= 4\n        } else if num >= 1 {\n            result\
    \ += \"i\"\n            num -= 1\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(int_to_mini_roman(number: 19) == \"xix\")\nassert(int_to_mini_roman(number:\
    \ 152) == \"clii\")\nassert(int_to_mini_roman(number: 251) == \"ccli\")\nassert(int_to_mini_roman(number:\
    \ 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number: 500) == \"d\")\nassert(int_to_mini_roman(number:\
    \ 1) == \"i\")\nassert(int_to_mini_roman(number: 4) == \"iv\")\nassert(int_to_mini_roman(number:\
    \ 43) == \"xliii\")\nassert(int_to_mini_roman(number: 90) == \"xc\")\nassert(int_to_mini_roman(number:\
    \ 94) == \"xciv\")\nassert(int_to_mini_roman(number: 532) == \"dxxxii\")\nassert(int_to_mini_roman(number:\
    \ 900) == \"cm\")\nassert(int_to_mini_roman(number: 994) == \"cmxciv\")\nassert(int_to_mini_roman(number:\
    \ 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    var result = \"\"\n    var\
    \ num = number\n    while num > 0 {\n        if num >= 1000 {\n            result\
    \ += \"m\"\n            num -= 1000\n        } else if num >= 900 {\n        \
    \    result += \"cm\"\n            num -= 900\n        } else if num >= 500 {\n\
    \            result += \"d\"\n            num -= 500\n        } else if num >=\
    \ 400 {\n            result += \"cd\"\n            num -= 400\n        } else\
    \ if num >= 100 {\n            result += \"c\"\n            num -= 100\n     \
    \   } else if num >= 90 {\n            result += \"xc\"\n            num -= 90\n\
    \        } else if num >= 50 {\n            result += \"l\"\n            num -=\
    \ 50\n        } else if num >= 40 {\n            result += \"xl\"\n          \
    \  num -= 40\n        } else if num >= 10 {\n            result += \"x\"\n   \
    \         num -= 10\n        } else if num >= 9 {\n            result += \"ix\"\
    \n            num -= 9\n        } else if num >= 5 {\n            result += \"\
    v\"\n            num -= 5\n        } else if num >= 4 {\n            result +=\
    \ \"iv\"\n            num -= 4\n        } else if num >= 1 {\n            result\
    \ += \"i\"\n            num -= 1\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(int_to_mini_roman(number: 19) == \"xix\")\nassert(int_to_mini_roman(number:\
    \ 152) == \"clii\")\nassert(int_to_mini_roman(number: 251) == \"ccli\")\nassert(int_to_mini_roman(number:\
    \ 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number: 500) == \"d\")\nassert(int_to_mini_roman(number:\
    \ 1) == \"i\")\nassert(int_to_mini_roman(number: 4) == \"iv\")\nassert(int_to_mini_roman(number:\
    \ 43) == \"xliii\")\nassert(int_to_mini_roman(number: 90) == \"xc\")\nassert(int_to_mini_roman(number:\
    \ 94) == \"xciv\")\nassert(int_to_mini_roman(number: 532) == \"dxxxii\")\nassert(int_to_mini_roman(number:\
    \ 900) == \"cm\")\nassert(int_to_mini_roman(number: 994) == \"cmxciv\")\nassert(int_to_mini_roman(number:\
    \ 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    var result = \"\"\n    var\
    \ num = number\n    while num > 0 {\n        if num >= 1000 {\n            result\
    \ += \"m\"\n            num -= 1000\n        } else if num >= 900 {\n        \
    \    result += \"cm\"\n            num -= 900\n        } else if num >= 500 {\n\
    \            result += \"d\"\n            num -= 500\n        } else if num >=\
    \ 400 {\n            result += \"cd\"\n            num -= 400\n        } else\
    \ if num >= 100 {\n            result += \"c\"\n            num -= 100\n     \
    \   } else if num >= 90 {\n            result += \"xc\"\n            num -= 90\n\
    \        } else if num >= 50 {\n            result += \"l\"\n            num -=\
    \ 50\n        } else if num >= 40 {\n            result += \"xl\"\n          \
    \  num -= 40\n        } else if num >= 10 {\n            result += \"x\"\n   \
    \         num -= 10\n        } else if num >= 9 {\n            result += \"ix\"\
    \n            num -= 9\n        } else if num >= 5 {\n            result += \"\
    v\"\n            num -= 5\n        } else if num >= 4 {\n            result +=\
    \ \"iv\"\n            num -= 4\n        } else if num >= 1 {\n            result\
    \ += \"i\"\n            num -= 1\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(int_to_mini_roman(number: 19) == \"xix\")\nassert(int_to_mini_roman(number:\
    \ 152) == \"clii\")\nassert(int_to_mini_roman(number: 251) == \"ccli\")\nassert(int_to_mini_roman(number:\
    \ 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number: 500) == \"d\")\nassert(int_to_mini_roman(number:\
    \ 1) == \"i\")\nassert(int_to_mini_roman(number: 4) == \"iv\")\nassert(int_to_mini_roman(number:\
    \ 43) == \"xliii\")\nassert(int_to_mini_roman(number: 90) == \"xc\")\nassert(int_to_mini_roman(number:\
    \ 94) == \"xciv\")\nassert(int_to_mini_roman(number: 532) == \"dxxxii\")\nassert(int_to_mini_roman(number:\
    \ 900) == \"cm\")\nassert(int_to_mini_roman(number: 994) == \"cmxciv\")\nassert(int_to_mini_roman(number:\
    \ 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    var result = \"\"\n    var\
    \ number = number\n    while number > 0 {\n        if number >= 1000 {\n     \
    \       result += \"m\"\n            number -= 1000\n        } else if number\
    \ >= 900 {\n            result += \"cm\"\n            number -= 900\n        }\
    \ else if number >= 500 {\n            result += \"d\"\n            number -=\
    \ 500\n        } else if number >= 400 {\n            result += \"cd\"\n     \
    \       number -= 400\n        } else if number >= 100 {\n            result +=\
    \ \"c\"\n            number -= 100\n        } else if number >= 90 {\n       \
    \     result += \"xc\"\n            number -= 90\n        } else if number >=\
    \ 50 {\n            result += \"l\"\n            number -= 50\n        } else\
    \ if number >= 40 {\n            result += \"xl\"\n            number -= 40\n\
    \        } else if number >= 10 {\n            result += \"x\"\n            number\
    \ -= 10\n        } else if number >= 9 {\n            result += \"ix\"\n     \
    \       number -= 9\n        } else if number >= 5 {\n            result += \"\
    v\"\n            number -= 5\n        } else if number >= 4 {\n            result\
    \ += \"iv\"\n            number -= 4\n        } else if number >= 1 {\n      \
    \      result += \"i\"\n            number -= 1\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(int_to_mini_roman(number:\
    \ 19) == \"xix\")\nassert(int_to_mini_roman(number: 152) == \"clii\")\nassert(int_to_mini_roman(number:\
    \ 251) == \"ccli\")\nassert(int_to_mini_roman(number: 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number:\
    \ 500) == \"d\")\nassert(int_to_mini_roman(number: 1) == \"i\")\nassert(int_to_mini_roman(number:\
    \ 4) == \"iv\")\nassert(int_to_mini_roman(number: 43) == \"xliii\")\nassert(int_to_mini_roman(number:\
    \ 90) == \"xc\")\nassert(int_to_mini_roman(number: 94) == \"xciv\")\nassert(int_to_mini_roman(number:\
    \ 532) == \"dxxxii\")\nassert(int_to_mini_roman(number: 900) == \"cm\")\nassert(int_to_mini_roman(number:\
    \ 994) == \"cmxciv\")\nassert(int_to_mini_roman(number: 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    var result = \"\"\n    var\
    \ num = number\n    while num > 0 {\n        if num >= 1000 {\n            result\
    \ += \"m\"\n            num -= 1000\n        } else if num >= 900 {\n        \
    \    result += \"cm\"\n            num -= 900\n        } else if num >= 500 {\n\
    \            result += \"d\"\n            num -= 500\n        } else if num >=\
    \ 400 {\n            result += \"cd\"\n            num -= 400\n        } else\
    \ if num >= 100 {\n            result += \"c\"\n            num -= 100\n     \
    \   } else if num >= 90 {\n            result += \"xc\"\n            num -= 90\n\
    \        } else if num >= 50 {\n            result += \"l\"\n            num -=\
    \ 50\n        } else if num >= 40 {\n            result += \"xl\"\n          \
    \  num -= 40\n        } else if num >= 10 {\n            result += \"x\"\n   \
    \         num -= 10\n        } else if num >= 9 {\n            result += \"ix\"\
    \n            num -= 9\n        } else if num >= 5 {\n            result += \"\
    v\"\n            num -= 5\n        } else if num >= 4 {\n            result +=\
    \ \"iv\"\n            num -= 4\n        } else if num >= 1 {\n            result\
    \ += \"i\"\n            num -= 1\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(int_to_mini_roman(number: 19) == \"xix\")\nassert(int_to_mini_roman(number:\
    \ 152) == \"clii\")\nassert(int_to_mini_roman(number: 251) == \"ccli\")\nassert(int_to_mini_roman(number:\
    \ 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number: 500) == \"d\")\nassert(int_to_mini_roman(number:\
    \ 1) == \"i\")\nassert(int_to_mini_roman(number: 4) == \"iv\")\nassert(int_to_mini_roman(number:\
    \ 43) == \"xliii\")\nassert(int_to_mini_roman(number: 90) == \"xc\")\nassert(int_to_mini_roman(number:\
    \ 94) == \"xciv\")\nassert(int_to_mini_roman(number: 532) == \"dxxxii\")\nassert(int_to_mini_roman(number:\
    \ 900) == \"cm\")\nassert(int_to_mini_roman(number: 994) == \"cmxciv\")\nassert(int_to_mini_roman(number:\
    \ 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    var result = \"\"\n    var\
    \ num = number\n    while num > 0 {\n        if num >= 1000 {\n            result\
    \ += \"m\"\n            num -= 1000\n        } else if num >= 900 {\n        \
    \    result += \"cm\"\n            num -= 900\n        } else if num >= 500 {\n\
    \            result += \"d\"\n            num -= 500\n        } else if num >=\
    \ 400 {\n            result += \"cd\"\n            num -= 400\n        } else\
    \ if num >= 100 {\n            result += \"c\"\n            num -= 100\n     \
    \   } else if num >= 90 {\n            result += \"xc\"\n            num -= 90\n\
    \        } else if num >= 50 {\n            result += \"l\"\n            num -=\
    \ 50\n        } else if num >= 40 {\n            result += \"xl\"\n          \
    \  num -= 40\n        } else if num >= 10 {\n            result += \"x\"\n   \
    \         num -= 10\n        } else if num >= 9 {\n            result += \"ix\"\
    \n            num -= 9\n        } else if num >= 5 {\n            result += \"\
    v\"\n            num -= 5\n        } else if num >= 4 {\n            result +=\
    \ \"iv\"\n            num -= 4\n        } else if num >= 1 {\n            result\
    \ += \"i\"\n            num -= 1\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(int_to_mini_roman(number: 19) == \"xix\")\nassert(int_to_mini_roman(number:\
    \ 152) == \"clii\")\nassert(int_to_mini_roman(number: 251) == \"ccli\")\nassert(int_to_mini_roman(number:\
    \ 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number: 500) == \"d\")\nassert(int_to_mini_roman(number:\
    \ 1) == \"i\")\nassert(int_to_mini_roman(number: 4) == \"iv\")\nassert(int_to_mini_roman(number:\
    \ 43) == \"xliii\")\nassert(int_to_mini_roman(number: 90) == \"xc\")\nassert(int_to_mini_roman(number:\
    \ 94) == \"xciv\")\nassert(int_to_mini_roman(number: 532) == \"dxxxii\")\nassert(int_to_mini_roman(number:\
    \ 900) == \"cm\")\nassert(int_to_mini_roman(number: 994) == \"cmxciv\")\nassert(int_to_mini_roman(number:\
    \ 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    var result = \"\"\n    var\
    \ num = number\n    while num > 0 {\n        if num >= 1000 {\n            result\
    \ += \"m\"\n            num -= 1000\n        } else if num >= 900 {\n        \
    \    result += \"cm\"\n            num -= 900\n        } else if num >= 500 {\n\
    \            result += \"d\"\n            num -= 500\n        } else if num >=\
    \ 400 {\n            result += \"cd\"\n            num -= 400\n        } else\
    \ if num >= 100 {\n            result += \"c\"\n            num -= 100\n     \
    \   } else if num >= 90 {\n            result += \"xc\"\n            num -= 90\n\
    \        } else if num >= 50 {\n            result += \"l\"\n            num -=\
    \ 50\n        } else if num >= 40 {\n            result += \"xl\"\n          \
    \  num -= 40\n        } else if num >= 10 {\n            result += \"x\"\n   \
    \         num -= 10\n        } else if num >= 9 {\n            result += \"ix\"\
    \n            num -= 9\n        } else if num >= 5 {\n            result += \"\
    v\"\n            num -= 5\n        } else if num >= 4 {\n            result +=\
    \ \"iv\"\n            num -= 4\n        } else if num >= 1 {\n            result\
    \ += \"i\"\n            num -= 1\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(int_to_mini_roman(number: 19) == \"xix\")\nassert(int_to_mini_roman(number:\
    \ 152) == \"clii\")\nassert(int_to_mini_roman(number: 251) == \"ccli\")\nassert(int_to_mini_roman(number:\
    \ 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number: 500) == \"d\")\nassert(int_to_mini_roman(number:\
    \ 1) == \"i\")\nassert(int_to_mini_roman(number: 4) == \"iv\")\nassert(int_to_mini_roman(number:\
    \ 43) == \"xliii\")\nassert(int_to_mini_roman(number: 90) == \"xc\")\nassert(int_to_mini_roman(number:\
    \ 94) == \"xciv\")\nassert(int_to_mini_roman(number: 532) == \"dxxxii\")\nassert(int_to_mini_roman(number:\
    \ 900) == \"cm\")\nassert(int_to_mini_roman(number: 994) == \"cmxciv\")\nassert(int_to_mini_roman(number:\
    \ 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    var result = \"\"\n    var\
    \ num = number\n    while num > 0 {\n        if num >= 1000 {\n            result\
    \ += \"m\"\n            num -= 1000\n        } else if num >= 900 {\n        \
    \    result += \"cm\"\n            num -= 900\n        } else if num >= 500 {\n\
    \            result += \"d\"\n            num -= 500\n        } else if num >=\
    \ 400 {\n            result += \"cd\"\n            num -= 400\n        } else\
    \ if num >= 100 {\n            result += \"c\"\n            num -= 100\n     \
    \   } else if num >= 90 {\n            result += \"xc\"\n            num -= 90\n\
    \        } else if num >= 50 {\n            result += \"l\"\n            num -=\
    \ 50\n        } else if num >= 40 {\n            result += \"xl\"\n          \
    \  num -= 40\n        } else if num >= 10 {\n            result += \"x\"\n   \
    \         num -= 10\n        } else if num >= 9 {\n            result += \"ix\"\
    \n            num -= 9\n        } else if num >= 5 {\n            result += \"\
    v\"\n            num -= 5\n        } else if num >= 4 {\n            result +=\
    \ \"iv\"\n            num -= 4\n        } else if num >= 1 {\n            result\
    \ += \"i\"\n            num -= 1\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(int_to_mini_roman(number: 19) == \"xix\")\nassert(int_to_mini_roman(number:\
    \ 152) == \"clii\")\nassert(int_to_mini_roman(number: 251) == \"ccli\")\nassert(int_to_mini_roman(number:\
    \ 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number: 500) == \"d\")\nassert(int_to_mini_roman(number:\
    \ 1) == \"i\")\nassert(int_to_mini_roman(number: 4) == \"iv\")\nassert(int_to_mini_roman(number:\
    \ 43) == \"xliii\")\nassert(int_to_mini_roman(number: 90) == \"xc\")\nassert(int_to_mini_roman(number:\
    \ 94) == \"xciv\")\nassert(int_to_mini_roman(number: 532) == \"dxxxii\")\nassert(int_to_mini_roman(number:\
    \ 900) == \"cm\")\nassert(int_to_mini_roman(number: 994) == \"cmxciv\")\nassert(int_to_mini_roman(number:\
    \ 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    var result = \"\"\n    var\
    \ num = number\n    while num >= 1000 {\n        result += \"m\"\n        num\
    \ -= 1000\n    }\n    while num >= 900 {\n        result += \"cm\"\n        num\
    \ -= 900\n    }\n    while num >= 500 {\n        result += \"d\"\n        num\
    \ -= 500\n    }\n    while num >= 400 {\n        result += \"cd\"\n        num\
    \ -= 400\n    }\n    while num >= 100 {\n        result += \"c\"\n        num\
    \ -= 100\n    }\n    while num >= 90 {\n        result += \"xc\"\n        num\
    \ -= 90\n    }\n    while num >= 50 {\n        result += \"l\"\n        num -=\
    \ 50\n    }\n    while num >= 40 {\n        result += \"xl\"\n        num -= 40\n\
    \    }\n    while num >= 10 {\n        result += \"x\"\n        num -= 10\n  \
    \  }\n    while num >= 9 {\n        result += \"ix\"\n        num -= 9\n    }\n\
    \    while num >= 5 {\n        result += \"v\"\n        num -= 5\n    }\n    while\
    \ num >= 4 {\n        result += \"iv\"\n        num -= 4\n    }\n    while num\
    \ >= 1 {\n        result += \"i\"\n        num -= 1\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(int_to_mini_roman(number: 19) == \"xix\")\nassert(int_to_mini_roman(number:\
    \ 152) == \"clii\")\nassert(int_to_mini_roman(number: 251) == \"ccli\")\nassert(int_to_mini_roman(number:\
    \ 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number: 500) == \"d\")\nassert(int_to_mini_roman(number:\
    \ 1) == \"i\")\nassert(int_to_mini_roman(number: 4) == \"iv\")\nassert(int_to_mini_roman(number:\
    \ 43) == \"xliii\")\nassert(int_to_mini_roman(number: 90) == \"xc\")\nassert(int_to_mini_roman(number:\
    \ 94) == \"xciv\")\nassert(int_to_mini_roman(number: 532) == \"dxxxii\")\nassert(int_to_mini_roman(number:\
    \ 900) == \"cm\")\nassert(int_to_mini_roman(number: 994) == \"cmxciv\")\nassert(int_to_mini_roman(number:\
    \ 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    var result = \"\"\n    var\
    \ num = number\n    while num > 0 {\n        if num >= 1000 {\n            result\
    \ += \"m\"\n            num -= 1000\n        } else if num >= 900 {\n        \
    \    result += \"cm\"\n            num -= 900\n        } else if num >= 500 {\n\
    \            result += \"d\"\n            num -= 500\n        } else if num >=\
    \ 400 {\n            result += \"cd\"\n            num -= 400\n        } else\
    \ if num >= 100 {\n            result += \"c\"\n            num -= 100\n     \
    \   } else if num >= 90 {\n            result += \"xc\"\n            num -= 90\n\
    \        } else if num >= 50 {\n            result += \"l\"\n            num -=\
    \ 50\n        } else if num >= 40 {\n            result += \"xl\"\n          \
    \  num -= 40\n        } else if num >= 10 {\n            result += \"x\"\n   \
    \         num -= 10\n        } else if num >= 9 {\n            result += \"ix\"\
    \n            num -= 9\n        } else if num >= 5 {\n            result += \"\
    v\"\n            num -= 5\n        } else if num >= 4 {\n            result +=\
    \ \"iv\"\n            num -= 4\n        } else if num >= 1 {\n            result\
    \ += \"i\"\n            num -= 1\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(int_to_mini_roman(number: 19) == \"xix\")\nassert(int_to_mini_roman(number:\
    \ 152) == \"clii\")\nassert(int_to_mini_roman(number: 251) == \"ccli\")\nassert(int_to_mini_roman(number:\
    \ 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number: 500) == \"d\")\nassert(int_to_mini_roman(number:\
    \ 1) == \"i\")\nassert(int_to_mini_roman(number: 4) == \"iv\")\nassert(int_to_mini_roman(number:\
    \ 43) == \"xliii\")\nassert(int_to_mini_roman(number: 90) == \"xc\")\nassert(int_to_mini_roman(number:\
    \ 94) == \"xciv\")\nassert(int_to_mini_roman(number: 532) == \"dxxxii\")\nassert(int_to_mini_roman(number:\
    \ 900) == \"cm\")\nassert(int_to_mini_roman(number: 994) == \"cmxciv\")\nassert(int_to_mini_roman(number:\
    \ 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    var result = \"\"\n    var\
    \ num = number\n    while num > 0 {\n        if num >= 1000 {\n            result\
    \ += \"m\"\n            num -= 1000\n        } else if num >= 900 {\n        \
    \    result += \"cm\"\n            num -= 900\n        } else if num >= 500 {\n\
    \            result += \"d\"\n            num -= 500\n        } else if num >=\
    \ 400 {\n            result += \"cd\"\n            num -= 400\n        } else\
    \ if num >= 100 {\n            result += \"c\"\n            num -= 100\n     \
    \   } else if num >= 90 {\n            result += \"xc\"\n            num -= 90\n\
    \        } else if num >= 50 {\n            result += \"l\"\n            num -=\
    \ 50\n        } else if num >= 40 {\n            result += \"xl\"\n          \
    \  num -= 40\n        } else if num >= 10 {\n            result += \"x\"\n   \
    \         num -= 10\n        } else if num >= 9 {\n            result += \"ix\"\
    \n            num -= 9\n        } else if num >= 5 {\n            result += \"\
    v\"\n            num -= 5\n        } else if num >= 4 {\n            result +=\
    \ \"iv\"\n            num -= 4\n        } else if num >= 1 {\n            result\
    \ += \"i\"\n            num -= 1\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(int_to_mini_roman(number: 19) == \"xix\")\nassert(int_to_mini_roman(number:\
    \ 152) == \"clii\")\nassert(int_to_mini_roman(number: 251) == \"ccli\")\nassert(int_to_mini_roman(number:\
    \ 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number: 500) == \"d\")\nassert(int_to_mini_roman(number:\
    \ 1) == \"i\")\nassert(int_to_mini_roman(number: 4) == \"iv\")\nassert(int_to_mini_roman(number:\
    \ 43) == \"xliii\")\nassert(int_to_mini_roman(number: 90) == \"xc\")\nassert(int_to_mini_roman(number:\
    \ 94) == \"xciv\")\nassert(int_to_mini_roman(number: 532) == \"dxxxii\")\nassert(int_to_mini_roman(number:\
    \ 900) == \"cm\")\nassert(int_to_mini_roman(number: 994) == \"cmxciv\")\nassert(int_to_mini_roman(number:\
    \ 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    var result = \"\"\n    var\
    \ num = number\n    while num > 0 {\n        if num >= 1000 {\n            result\
    \ += \"m\"\n            num -= 1000\n        } else if num >= 900 {\n        \
    \    result += \"cm\"\n            num -= 900\n        } else if num >= 500 {\n\
    \            result += \"d\"\n            num -= 500\n        } else if num >=\
    \ 400 {\n            result += \"cd\"\n            num -= 400\n        } else\
    \ if num >= 100 {\n            result += \"c\"\n            num -= 100\n     \
    \   } else if num >= 90 {\n            result += \"xc\"\n            num -= 90\n\
    \        } else if num >= 50 {\n            result += \"l\"\n            num -=\
    \ 50\n        } else if num >= 40 {\n            result += \"xl\"\n          \
    \  num -= 40\n        } else if num >= 10 {\n            result += \"x\"\n   \
    \         num -= 10\n        } else if num >= 9 {\n            result += \"ix\"\
    \n            num -= 9\n        } else if num >= 5 {\n            result += \"\
    v\"\n            num -= 5\n        } else if num >= 4 {\n            result +=\
    \ \"iv\"\n            num -= 4\n        } else if num >= 1 {\n            result\
    \ += \"i\"\n            num -= 1\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(int_to_mini_roman(number: 19) == \"xix\")\nassert(int_to_mini_roman(number:\
    \ 152) == \"clii\")\nassert(int_to_mini_roman(number: 251) == \"ccli\")\nassert(int_to_mini_roman(number:\
    \ 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number: 500) == \"d\")\nassert(int_to_mini_roman(number:\
    \ 1) == \"i\")\nassert(int_to_mini_roman(number: 4) == \"iv\")\nassert(int_to_mini_roman(number:\
    \ 43) == \"xliii\")\nassert(int_to_mini_roman(number: 90) == \"xc\")\nassert(int_to_mini_roman(number:\
    \ 94) == \"xciv\")\nassert(int_to_mini_roman(number: 532) == \"dxxxii\")\nassert(int_to_mini_roman(number:\
    \ 900) == \"cm\")\nassert(int_to_mini_roman(number: 994) == \"cmxciv\")\nassert(int_to_mini_roman(number:\
    \ 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    var result = \"\"\n    var\
    \ num = number\n    while num > 0 {\n        if num >= 1000 {\n            result\
    \ += \"m\"\n            num -= 1000\n        } else if num >= 900 {\n        \
    \    result += \"cm\"\n            num -= 900\n        } else if num >= 500 {\n\
    \            result += \"d\"\n            num -= 500\n        } else if num >=\
    \ 400 {\n            result += \"cd\"\n            num -= 400\n        } else\
    \ if num >= 100 {\n            result += \"c\"\n            num -= 100\n     \
    \   } else if num >= 90 {\n            result += \"xc\"\n            num -= 90\n\
    \        } else if num >= 50 {\n            result += \"l\"\n            num -=\
    \ 50\n        } else if num >= 40 {\n            result += \"xl\"\n          \
    \  num -= 40\n        } else if num >= 10 {\n            result += \"x\"\n   \
    \         num -= 10\n        } else if num >= 9 {\n            result += \"ix\"\
    \n            num -= 9\n        } else if num >= 5 {\n            result += \"\
    v\"\n            num -= 5\n        } else if num >= 4 {\n            result +=\
    \ \"iv\"\n            num -= 4\n        } else if num >= 1 {\n            result\
    \ += \"i\"\n            num -= 1\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(int_to_mini_roman(number: 19) == \"xix\")\nassert(int_to_mini_roman(number:\
    \ 152) == \"clii\")\nassert(int_to_mini_roman(number: 251) == \"ccli\")\nassert(int_to_mini_roman(number:\
    \ 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number: 500) == \"d\")\nassert(int_to_mini_roman(number:\
    \ 1) == \"i\")\nassert(int_to_mini_roman(number: 4) == \"iv\")\nassert(int_to_mini_roman(number:\
    \ 43) == \"xliii\")\nassert(int_to_mini_roman(number: 90) == \"xc\")\nassert(int_to_mini_roman(number:\
    \ 94) == \"xciv\")\nassert(int_to_mini_roman(number: 532) == \"dxxxii\")\nassert(int_to_mini_roman(number:\
    \ 900) == \"cm\")\nassert(int_to_mini_roman(number: 994) == \"cmxciv\")\nassert(int_to_mini_roman(number:\
    \ 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    let roman_numerals = [\"\
    m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\"\
    , \"iv\", \"i\"]\n    let numbers = [1000, 900, 500, 400, 100, 90, 50, 40, 10,\
    \ 9, 5, 4, 1]\n    var result = \"\"\n    var num = number\n    for (index, roman_numeral)\
    \ in roman_numerals.enumerated() {\n        let number = numbers[index]\n    \
    \    while num >= number {\n            result += roman_numeral\n            num\
    \ -= number\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(int_to_mini_roman(number: 19) == \"xix\")\nassert(int_to_mini_roman(number:\
    \ 152) == \"clii\")\nassert(int_to_mini_roman(number: 251) == \"ccli\")\nassert(int_to_mini_roman(number:\
    \ 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number: 500) == \"d\")\nassert(int_to_mini_roman(number:\
    \ 1) == \"i\")\nassert(int_to_mini_roman(number: 4) == \"iv\")\nassert(int_to_mini_roman(number:\
    \ 43) == \"xliii\")\nassert(int_to_mini_roman(number: 90) == \"xc\")\nassert(int_to_mini_roman(number:\
    \ 94) == \"xciv\")\nassert(int_to_mini_roman(number: 532) == \"dxxxii\")\nassert(int_to_mini_roman(number:\
    \ 900) == \"cm\")\nassert(int_to_mini_roman(number: 994) == \"cmxciv\")\nassert(int_to_mini_roman(number:\
    \ 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014147
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    var result = \"\"\n    var\
    \ number = number\n    while number > 0 {\n        if number >= 1000 {\n     \
    \       result += \"m\"\n            number -= 1000\n        } else if number\
    \ >= 900 {\n            result += \"cm\"\n            number -= 900\n        }\
    \ else if number >= 500 {\n            result += \"d\"\n            number -=\
    \ 500\n        } else if number >= 400 {\n            result += \"cd\"\n     \
    \       number -= 400\n        } else if number >= 100 {\n            result +=\
    \ \"c\"\n            number -= 100\n        } else if number >= 90 {\n       \
    \     result += \"xc\"\n            number -= 90\n        } else if number >=\
    \ 50 {\n            result += \"l\"\n            number -= 50\n        } else\
    \ if number >= 40 {\n            result += \"xl\"\n            number -= 40\n\
    \        } else if number >= 10 {\n            result += \"x\"\n            number\
    \ -= 10\n        } else if number >= 9 {\n            result += \"ix\"\n     \
    \       number -= 9\n        } else if number >= 5 {\n            result += \"\
    v\"\n            number -= 5\n        } else if number >= 4 {\n            result\
    \ += \"iv\"\n            number -= 4\n        } else if number >= 1 {\n      \
    \      result += \"i\"\n            number -= 1\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(int_to_mini_roman(number:\
    \ 19) == \"xix\")\nassert(int_to_mini_roman(number: 152) == \"clii\")\nassert(int_to_mini_roman(number:\
    \ 251) == \"ccli\")\nassert(int_to_mini_roman(number: 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number:\
    \ 500) == \"d\")\nassert(int_to_mini_roman(number: 1) == \"i\")\nassert(int_to_mini_roman(number:\
    \ 4) == \"iv\")\nassert(int_to_mini_roman(number: 43) == \"xliii\")\nassert(int_to_mini_roman(number:\
    \ 90) == \"xc\")\nassert(int_to_mini_roman(number: 94) == \"xciv\")\nassert(int_to_mini_roman(number:\
    \ 532) == \"dxxxii\")\nassert(int_to_mini_roman(number: 900) == \"cm\")\nassert(int_to_mini_roman(number:\
    \ 994) == \"cmxciv\")\nassert(int_to_mini_roman(number: 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    var result = \"\"\n    var\
    \ num = number\n    while num > 0 {\n        if num >= 1000 {\n            result\
    \ += \"m\"\n            num -= 1000\n        } else if num >= 900 {\n        \
    \    result += \"cm\"\n            num -= 900\n        } else if num >= 500 {\n\
    \            result += \"d\"\n            num -= 500\n        } else if num >=\
    \ 400 {\n            result += \"cd\"\n            num -= 400\n        } else\
    \ if num >= 100 {\n            result += \"c\"\n            num -= 100\n     \
    \   } else if num >= 90 {\n            result += \"xc\"\n            num -= 90\n\
    \        } else if num >= 50 {\n            result += \"l\"\n            num -=\
    \ 50\n        } else if num >= 40 {\n            result += \"xl\"\n          \
    \  num -= 40\n        } else if num >= 10 {\n            result += \"x\"\n   \
    \         num -= 10\n        } else if num >= 9 {\n            result += \"ix\"\
    \n            num -= 9\n        } else if num >= 5 {\n            result += \"\
    v\"\n            num -= 5\n        } else if num >= 4 {\n            result +=\
    \ \"iv\"\n            num -= 4\n        } else if num >= 1 {\n            result\
    \ += \"i\"\n            num -= 1\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(int_to_mini_roman(number: 19) == \"xix\")\nassert(int_to_mini_roman(number:\
    \ 152) == \"clii\")\nassert(int_to_mini_roman(number: 251) == \"ccli\")\nassert(int_to_mini_roman(number:\
    \ 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number: 500) == \"d\")\nassert(int_to_mini_roman(number:\
    \ 1) == \"i\")\nassert(int_to_mini_roman(number: 4) == \"iv\")\nassert(int_to_mini_roman(number:\
    \ 43) == \"xliii\")\nassert(int_to_mini_roman(number: 90) == \"xc\")\nassert(int_to_mini_roman(number:\
    \ 94) == \"xciv\")\nassert(int_to_mini_roman(number: 532) == \"dxxxii\")\nassert(int_to_mini_roman(number:\
    \ 900) == \"cm\")\nassert(int_to_mini_roman(number: 994) == \"cmxciv\")\nassert(int_to_mini_roman(number:\
    \ 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    var result = \"\"\n    var\
    \ num = number\n    while num > 0 {\n        if num >= 1000 {\n            result\
    \ += \"m\"\n            num -= 1000\n        } else if num >= 900 {\n        \
    \    result += \"cm\"\n            num -= 900\n        } else if num >= 500 {\n\
    \            result += \"d\"\n            num -= 500\n        } else if num >=\
    \ 400 {\n            result += \"cd\"\n            num -= 400\n        } else\
    \ if num >= 100 {\n            result += \"c\"\n            num -= 100\n     \
    \   } else if num >= 90 {\n            result += \"xc\"\n            num -= 90\n\
    \        } else if num >= 50 {\n            result += \"l\"\n            num -=\
    \ 50\n        } else if num >= 40 {\n            result += \"xl\"\n          \
    \  num -= 40\n        } else if num >= 10 {\n            result += \"x\"\n   \
    \         num -= 10\n        } else if num >= 9 {\n            result += \"ix\"\
    \n            num -= 9\n        } else if num >= 5 {\n            result += \"\
    v\"\n            num -= 5\n        } else if num >= 4 {\n            result +=\
    \ \"iv\"\n            num -= 4\n        } else if num >= 1 {\n            result\
    \ += \"i\"\n            num -= 1\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(int_to_mini_roman(number: 19) == \"xix\")\nassert(int_to_mini_roman(number:\
    \ 152) == \"clii\")\nassert(int_to_mini_roman(number: 251) == \"ccli\")\nassert(int_to_mini_roman(number:\
    \ 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number: 500) == \"d\")\nassert(int_to_mini_roman(number:\
    \ 1) == \"i\")\nassert(int_to_mini_roman(number: 4) == \"iv\")\nassert(int_to_mini_roman(number:\
    \ 43) == \"xliii\")\nassert(int_to_mini_roman(number: 90) == \"xc\")\nassert(int_to_mini_roman(number:\
    \ 94) == \"xciv\")\nassert(int_to_mini_roman(number: 532) == \"dxxxii\")\nassert(int_to_mini_roman(number:\
    \ 900) == \"cm\")\nassert(int_to_mini_roman(number: 994) == \"cmxciv\")\nassert(int_to_mini_roman(number:\
    \ 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    var result = \"\"\n    var\
    \ num = number\n    while num > 0 {\n        if num >= 1000 {\n            result\
    \ += \"m\"\n            num -= 1000\n        } else if num >= 900 {\n        \
    \    result += \"cm\"\n            num -= 900\n        } else if num >= 500 {\n\
    \            result += \"d\"\n            num -= 500\n        } else if num >=\
    \ 400 {\n            result += \"cd\"\n            num -= 400\n        } else\
    \ if num >= 100 {\n            result += \"c\"\n            num -= 100\n     \
    \   } else if num >= 90 {\n            result += \"xc\"\n            num -= 90\n\
    \        } else if num >= 50 {\n            result += \"l\"\n            num -=\
    \ 50\n        } else if num >= 40 {\n            result += \"xl\"\n          \
    \  num -= 40\n        } else if num >= 10 {\n            result += \"x\"\n   \
    \         num -= 10\n        } else if num >= 9 {\n            result += \"ix\"\
    \n            num -= 9\n        } else if num >= 5 {\n            result += \"\
    v\"\n            num -= 5\n        } else if num >= 4 {\n            result +=\
    \ \"iv\"\n            num -= 4\n        } else if num >= 1 {\n            result\
    \ += \"i\"\n            num -= 1\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(int_to_mini_roman(number: 19) == \"xix\")\nassert(int_to_mini_roman(number:\
    \ 152) == \"clii\")\nassert(int_to_mini_roman(number: 251) == \"ccli\")\nassert(int_to_mini_roman(number:\
    \ 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number: 500) == \"d\")\nassert(int_to_mini_roman(number:\
    \ 1) == \"i\")\nassert(int_to_mini_roman(number: 4) == \"iv\")\nassert(int_to_mini_roman(number:\
    \ 43) == \"xliii\")\nassert(int_to_mini_roman(number: 90) == \"xc\")\nassert(int_to_mini_roman(number:\
    \ 94) == \"xciv\")\nassert(int_to_mini_roman(number: 532) == \"dxxxii\")\nassert(int_to_mini_roman(number:\
    \ 900) == \"cm\")\nassert(int_to_mini_roman(number: 994) == \"cmxciv\")\nassert(int_to_mini_roman(number:\
    \ 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
- exit_code: 1
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    let roman_numerals = [\"\
    i\", \"v\", \"x\", \"l\", \"c\", \"d\", \"m\"]\n    var roman_numeral_string =\
    \ \"\"\n    var number = number\n    var index = 0\n    while number > 0 {\n \
    \       let digit = number % 10\n        if digit == 9 {\n            roman_numeral_string\
    \ = roman_numerals[index] + roman_numerals[index + 2] + roman_numeral_string\n\
    \        } else if digit == 4 {\n            roman_numeral_string = roman_numerals[index]\
    \ + roman_numerals[index + 1] + roman_numeral_string\n        } else {\n     \
    \       if digit >= 5 {\n                roman_numeral_string = roman_numerals[index\
    \ + 1] + roman_numeral_string\n                digit -= 5\n            }\n   \
    \         for _ in 0..<digit {\n                roman_numeral_string = roman_numerals[index]\
    \ + roman_numeral_string\n            }\n        }\n        number /= 10\n   \
    \     index += 2\n    }\n    return roman_numeral_string\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(int_to_mini_roman(number: 19) == \"xix\")\nassert(int_to_mini_roman(number:\
    \ 152) == \"clii\")\nassert(int_to_mini_roman(number: 251) == \"ccli\")\nassert(int_to_mini_roman(number:\
    \ 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number: 500) == \"d\")\nassert(int_to_mini_roman(number:\
    \ 1) == \"i\")\nassert(int_to_mini_roman(number: 4) == \"iv\")\nassert(int_to_mini_roman(number:\
    \ 43) == \"xliii\")\nassert(int_to_mini_roman(number: 90) == \"xc\")\nassert(int_to_mini_roman(number:\
    \ 94) == \"xciv\")\nassert(int_to_mini_roman(number: 532) == \"dxxxii\")\nassert(int_to_mini_roman(number:\
    \ 900) == \"cm\")\nassert(int_to_mini_roman(number: 994) == \"cmxciv\")\nassert(int_to_mini_roman(number:\
    \ 1000) == \"m\")"
  status: SyntaxError
  stderr: "/tmp/tmpfb9hrx9o.swift:26:23: error: left side of mutating operator isn't\
    \ mutable: 'digit' is a 'let' constant\n                digit -= 5\n         \
    \       ~~~~~ ^\n/tmp/tmpfb9hrx9o.swift:18:9: note: change 'let' to 'var' to make\
    \ it mutable\n        let digit = number % 10\n        ^~~\n        var\n"
  stdout: ''
  timestamp: 1660014147
