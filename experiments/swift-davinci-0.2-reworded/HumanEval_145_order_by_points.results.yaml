language: swift
name: HumanEval_145_order_by_points
results:
- exit_code: 1
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    return nums.sorted { (a, b) -> Bool in\n        let aSum = a.digits.reduce(0,\
    \ +)\n        let bSum = b.digits.reduce(0, +)\n        return aSum == bSum ?\
    \ a < b : aSum < bSum\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(order_by_points(nums:\
    \ [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums:\
    \ [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2,\
    \ 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmp9yek2hhf.swift:13:22: error: value of type 'Int' has no member\
    \ 'digits'\n        let aSum = a.digits.reduce(0, +)\n                   ~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824799
- exit_code: 1
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    return nums.sorted { (a, b) -> Bool in\n        let aSum = a.digits.reduce(0,\
    \ +)\n        let bSum = b.digits.reduce(0, +)\n        return aSum < bSum\n \
    \   }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(order_by_points(nums: [1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums: [1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpdsme7rpy.swift:13:22: error: value of type 'Int' has no member\
    \ 'digits'\n        let aSum = a.digits.reduce(0, +)\n                   ~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824799
- exit_code: 1
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    return nums.sorted { (a, b) -> Bool in\n        return sum_of_digits(num:\
    \ a) < sum_of_digits(num: b)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\n\
    assert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as [Int])\nassert(order_by_points(nums:\
    \ [1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpd_r6btuq.swift:13:16: error: cannot find 'sum_of_digits' in scope\n\
    \        return sum_of_digits(num: a) < sum_of_digits(num: b)\n              \
    \ ^~~~~~~~~~~~~\n/tmp/tmpd_r6btuq.swift:13:40: error: cannot find 'sum_of_digits'\
    \ in scope\n        return sum_of_digits(num: a) < sum_of_digits(num: b)\n   \
    \                                    ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824799
- exit_code: 1
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    return nums.sorted { (a, b) -> Bool in\n        let aSum = a.digits.reduce(0,\
    \ +)\n        let bSum = b.digits.reduce(0, +)\n        return aSum == bSum ?\
    \ a < b : aSum < bSum\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(order_by_points(nums:\
    \ [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums:\
    \ [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2,\
    \ 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmp9yek2hhf.swift:13:22: error: value of type 'Int' has no member\
    \ 'digits'\n        let aSum = a.digits.reduce(0, +)\n                   ~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824799
- exit_code: 1
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    return nums.sorted {\n        let sum1 = $0.digits.reduce(0, +)\n       \
    \ let sum2 = $1.digits.reduce(0, +)\n        return sum1 == sum2 ? $0 < $1 : sum1\
    \ < sum2\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(order_by_points(nums:\
    \ [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums:\
    \ [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2,\
    \ 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpsu_zmzop.swift:13:23: error: value of type 'Int' has no member\
    \ 'digits'\n        let sum1 = $0.digits.reduce(0, +)\n                   ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824799
- exit_code: 1
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    return nums.sorted { (a, b) -> Bool in\n        let aSum = a.digits.reduce(0,\
    \ +)\n        let bSum = b.digits.reduce(0, +)\n        return aSum < bSum\n \
    \   }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(order_by_points(nums: [1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums: [1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpdsme7rpy.swift:13:22: error: value of type 'Int' has no member\
    \ 'digits'\n        let aSum = a.digits.reduce(0, +)\n                   ~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824799
- exit_code: 1
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    return nums.sorted { (a, b) -> Bool in\n        let aSum = a.digits.reduce(0,\
    \ +)\n        let bSum = b.digits.reduce(0, +)\n        return aSum < bSum\n \
    \   }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(order_by_points(nums: [1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums: [1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpdsme7rpy.swift:13:22: error: value of type 'Int' has no member\
    \ 'digits'\n        let aSum = a.digits.reduce(0, +)\n                   ~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824799
- exit_code: -4
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    var nums = nums\n    nums.sort { (a, b) -> Bool in\n        let aSum = String(a).reduce(0)\
    \ { $0 + Int(String($1))! }\n        let bSum = String(b).reduce(0) { $0 + Int(String($1))!\
    \ }\n        return aSum < bSum\n    }\n    return nums\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as\
    \ [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2, -3]) == [-3,\
    \ -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: Exception
  stderr: 'tmp993e8184/tmp993e8184.swift:14: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002b005af9dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b005ac94561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b005ac94286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b005ac9413c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b005ac93bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmp993e8184                        0x000055c02e2b231a <unavailable> + 8986

    6    libswiftCore.so                    0x00002b005ada3410 Sequence.reduce<A>(_:_:)
    + 530

    7    tmp993e8184                        0x000055c02e2b20f3 <unavailable> + 8435

    8    libswiftSwiftOnoneSupport.so       0x00002b005aa80020 specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)
    + 152

    9    libswiftSwiftOnoneSupport.so       0x00002b005aa8704d <unavailable> + 135245

    10   libswiftSwiftOnoneSupport.so       0x00002b005aa820d2 <unavailable> + 114898

    11   libswiftSwiftOnoneSupport.so       0x00002b005aa817b0 specialized MutableCollection<>.sort(by:)
    + 27

    12   tmp993e8184                        0x000055c02e2b2009 <unavailable> + 8201

    13   tmp993e8184                        0x000055c02e2b16c4 <unavailable> + 5828

    14   libc.so.6                          0x00002b005b189460 __libc_start_main +
    245

    15   tmp993e8184                        0x000055c02e2b1399 <unavailable> + 5017

    '
  stdout: ''
  timestamp: 1659824800
- exit_code: 1
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    return nums.sorted { (a, b) -> Bool in\n        let aSum = a.digits.reduce(0,\
    \ +)\n        let bSum = b.digits.reduce(0, +)\n        return aSum == bSum ?\
    \ a < b : aSum < bSum\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(order_by_points(nums:\
    \ [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums:\
    \ [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2,\
    \ 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmp9yek2hhf.swift:13:22: error: value of type 'Int' has no member\
    \ 'digits'\n        let aSum = a.digits.reduce(0, +)\n                   ~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824799
- exit_code: 1
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    return nums.sorted { (a, b) -> Bool in\n        let aSum = a.digits.reduce(0,\
    \ +)\n        let bSum = b.digits.reduce(0, +)\n        return aSum < bSum\n \
    \   }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(order_by_points(nums: [1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums: [1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpdsme7rpy.swift:13:22: error: value of type 'Int' has no member\
    \ 'digits'\n        let aSum = a.digits.reduce(0, +)\n                   ~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824799
- exit_code: 1
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    return nums.sorted { (a, b) -> Bool in\n        let aSum = a.digits.reduce(0,\
    \ +)\n        let bSum = b.digits.reduce(0, +)\n        return aSum == bSum ?\
    \ a < b : aSum < bSum\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(order_by_points(nums:\
    \ [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums:\
    \ [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2,\
    \ 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmp9yek2hhf.swift:13:22: error: value of type 'Int' has no member\
    \ 'digits'\n        let aSum = a.digits.reduce(0, +)\n                   ~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824799
- exit_code: 1
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    return nums.sorted { (lhs, rhs) -> Bool in\n        let lhsSum = lhs.digits.reduce(0,\
    \ +)\n        let rhsSum = rhs.digits.reduce(0, +)\n        return lhsSum == rhsSum\
    \ ? lhs < rhs : lhsSum < rhsSum\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\n\
    assert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as [Int])\nassert(order_by_points(nums:\
    \ [1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmp0pn8lysd.swift:13:26: error: value of type 'Int' has no member\
    \ 'digits'\n        let lhsSum = lhs.digits.reduce(0, +)\n                   \
    \  ~~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824799
- exit_code: 1
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    return nums.sorted { (lhs, rhs) -> Bool in\n        let lhsSum = lhs.digits.reduce(0,\
    \ +)\n        let rhsSum = rhs.digits.reduce(0, +)\n        return lhsSum < rhsSum\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(order_by_points(nums: [1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums: [1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmp90lvsi66.swift:13:26: error: value of type 'Int' has no member\
    \ 'digits'\n        let lhsSum = lhs.digits.reduce(0, +)\n                   \
    \  ~~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824799
- exit_code: 1
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    return nums.sorted { (a, b) -> Bool in\n        let aSum = a.digits.reduce(0,\
    \ +)\n        let bSum = b.digits.reduce(0, +)\n        return aSum < bSum\n \
    \   }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(order_by_points(nums: [1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums: [1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpdsme7rpy.swift:13:22: error: value of type 'Int' has no member\
    \ 'digits'\n        let aSum = a.digits.reduce(0, +)\n                   ~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824799
- exit_code: 1
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    return nums.sorted { (a, b) -> Bool in\n        let aSum = a.digits.reduce(0,\
    \ +)\n        let bSum = b.digits.reduce(0, +)\n        return aSum < bSum\n \
    \   }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(order_by_points(nums: [1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums: [1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpdsme7rpy.swift:13:22: error: value of type 'Int' has no member\
    \ 'digits'\n        let aSum = a.digits.reduce(0, +)\n                   ~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824799
- exit_code: -4
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    return nums.sorted { (a, b) -> Bool in\n        let aSum = String(a).map\
    \ { Int(String($0))! }.reduce(0, +)\n        let bSum = String(b).map { Int(String($0))!\
    \ }.reduce(0, +)\n        return aSum < bSum\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as\
    \ [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2, -3]) == [-3,\
    \ -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: Exception
  stderr: 'tmpkw1wpe01/tmpkw1wpe01.swift:13: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002b7d783b1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7d780a8561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b7d780a8286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b7d780a813c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b7d780a7bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpkw1wpe01                        0x000055d0a35eb4f1 <unavailable> + 9457

    6    libswiftCore.so                    0x00002b7d78090820 Collection.map<A>(_:)
    + 426

    7    tmpkw1wpe01                        0x000055d0a35eb131 <unavailable> + 8497

    8    libswiftCore.so                    0x00002b7d781c9c90 MutableCollection<>._insertionSort(within:sortedEnd:by:)
    + 770

    9    libswiftCore.so                    0x00002b7d781ca110 MutableCollection<>._insertionSort(within:by:)
    + 356

    10   libswiftCore.so                    0x00002b7d781c8d30 UnsafeMutableBufferPointer._stableSortImpl(by:)
    + 319

    11   libswiftCore.so                    0x00002b7d781c8d15 <unavailable> + 2616597

    12   libswiftCore.so                    0x00002b7d782ee65a <unavailable> + 3819098

    13   libswiftCore.so                    0x00002b7d780dd720 ContiguousArray.withContiguousMutableStorageIfAvailable<A>(_:)
    + 130

    14   libswiftCore.so                    0x00002b7d780dd70f <unavailable> + 1652495

    15   libswiftCore.so                    0x00002b7d781c8460 MutableCollection<>.sort(by:)
    + 771

    16   libswiftCore.so                    0x00002b7d781c8370 Sequence.sorted(by:)
    + 193

    17   tmpkw1wpe01                        0x000055d0a35eb060 <unavailable> + 8288

    18   tmpkw1wpe01                        0x000055d0a35ea714 <unavailable> + 5908

    19   libc.so.6                          0x00002b7d7859d460 __libc_start_main +
    245

    20   tmpkw1wpe01                        0x000055d0a35ea3e9 <unavailable'
  stdout: ''
  timestamp: 1659824800
- exit_code: 1
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    return nums.sorted { (a, b) -> Bool in\n        let aSum = a.digits.reduce(0,\
    \ +)\n        let bSum = b.digits.reduce(0, +)\n        return aSum < bSum\n \
    \   }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(order_by_points(nums: [1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums: [1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpdsme7rpy.swift:13:22: error: value of type 'Int' has no member\
    \ 'digits'\n        let aSum = a.digits.reduce(0, +)\n                   ~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824799
- exit_code: 1
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    return nums.sorted { (a, b) -> Bool in\n        let aSum = a.digits.reduce(0,\
    \ +)\n        let bSum = b.digits.reduce(0, +)\n        return aSum == bSum ?\
    \ a < b : aSum < bSum\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(order_by_points(nums:\
    \ [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums:\
    \ [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2,\
    \ 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmp9yek2hhf.swift:13:22: error: value of type 'Int' has no member\
    \ 'digits'\n        let aSum = a.digits.reduce(0, +)\n                   ~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824799
- exit_code: 1
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    return nums.sorted { (a, b) -> Bool in\n        let aSum = a.digits.reduce(0,\
    \ +)\n        let bSum = b.digits.reduce(0, +)\n        return aSum == bSum ?\
    \ a < b : aSum < bSum\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(order_by_points(nums:\
    \ [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums:\
    \ [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2,\
    \ 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmp9yek2hhf.swift:13:22: error: value of type 'Int' has no member\
    \ 'digits'\n        let aSum = a.digits.reduce(0, +)\n                   ~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824799
- exit_code: 1
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    return nums.sorted { (a, b) -> Bool in\n        let aSum = a.digits.reduce(0,\
    \ +)\n        let bSum = b.digits.reduce(0, +)\n        return aSum < bSum\n \
    \   }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(order_by_points(nums: [1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums: [1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpdsme7rpy.swift:13:22: error: value of type 'Int' has no member\
    \ 'digits'\n        let aSum = a.digits.reduce(0, +)\n                   ~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824799
- exit_code: -4
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    return nums.sorted(by: {\n        let a = String($0).map { Int(String($0))!\
    \ }.reduce(0, +)\n        let b = String($1).map { Int(String($0))! }.reduce(0,\
    \ +)\n        return a < b\n    })\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\n\
    assert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as [Int])\nassert(order_by_points(nums:\
    \ [1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: Exception
  stderr: 'tmp54rtx7kw/tmp54rtx7kw.swift:13: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002ac514261c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac513f58561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ac513f58286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ac513f5813c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ac513f57bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmp54rtx7kw                        0x0000559bde0854f1 <unavailable> + 9457

    6    libswiftCore.so                    0x00002ac513f40820 Collection.map<A>(_:)
    + 426

    7    tmp54rtx7kw                        0x0000559bde085131 <unavailable> + 8497

    8    libswiftCore.so                    0x00002ac514079c90 MutableCollection<>._insertionSort(within:sortedEnd:by:)
    + 770

    9    libswiftCore.so                    0x00002ac51407a110 MutableCollection<>._insertionSort(within:by:)
    + 356

    10   libswiftCore.so                    0x00002ac514078d30 UnsafeMutableBufferPointer._stableSortImpl(by:)
    + 319

    11   libswiftCore.so                    0x00002ac514078d15 <unavailable> + 2616597

    12   libswiftCore.so                    0x00002ac51419e65a <unavailable> + 3819098

    13   libswiftCore.so                    0x00002ac513f8d720 ContiguousArray.withContiguousMutableStorageIfAvailable<A>(_:)
    + 130

    14   libswiftCore.so                    0x00002ac513f8d70f <unavailable> + 1652495

    15   libswiftCore.so                    0x00002ac514078460 MutableCollection<>.sort(by:)
    + 771

    16   libswiftCore.so                    0x00002ac514078370 Sequence.sorted(by:)
    + 193

    17   tmp54rtx7kw                        0x0000559bde085060 <unavailable> + 8288

    18   tmp54rtx7kw                        0x0000559bde084714 <unavailable> + 5908

    19   libc.so.6                          0x00002ac51444d460 __libc_start_main +
    245

    20   tmp54rtx7kw                        0x0000559bde0843e9 <unavailable'
  stdout: ''
  timestamp: 1659824800
- exit_code: 1
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    return nums.sorted(by: {\n        let sum1 = $0.digits.reduce(0, +)\n   \
    \     let sum2 = $1.digits.reduce(0, +)\n        return sum1 < sum2\n    })\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) ==\
    \ [-1, -11, 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2,\
    \ 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int])\
    \ == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2,\
    \ -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmp4quvf8tl.swift:13:23: error: value of type 'Int' has no member\
    \ 'digits'\n        let sum1 = $0.digits.reduce(0, +)\n                   ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824799
- exit_code: 1
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    return nums.sorted { (a, b) -> Bool in\n        let aSum = a.digits.reduce(0,\
    \ +)\n        let bSum = b.digits.reduce(0, +)\n        return aSum < bSum\n \
    \   }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(order_by_points(nums: [1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums: [1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpdsme7rpy.swift:13:22: error: value of type 'Int' has no member\
    \ 'digits'\n        let aSum = a.digits.reduce(0, +)\n                   ~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824799
- exit_code: 1
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    return nums.sorted { (a, b) -> Bool in\n        let aSum = a.digits.reduce(0,\
    \ +)\n        let bSum = b.digits.reduce(0, +)\n        return aSum == bSum ?\
    \ a < b : aSum < bSum\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(order_by_points(nums:\
    \ [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums:\
    \ [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2,\
    \ 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmp9yek2hhf.swift:13:22: error: value of type 'Int' has no member\
    \ 'digits'\n        let aSum = a.digits.reduce(0, +)\n                   ~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824799
- exit_code: 1
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    return nums.sorted { (a, b) -> Bool in\n        let aSum = a.digits.reduce(0,\
    \ +)\n        let bSum = b.digits.reduce(0, +)\n        return aSum == bSum ?\
    \ a < b : aSum < bSum\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(order_by_points(nums:\
    \ [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums:\
    \ [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2,\
    \ 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmp9yek2hhf.swift:13:22: error: value of type 'Int' has no member\
    \ 'digits'\n        let aSum = a.digits.reduce(0, +)\n                   ~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824799
- exit_code: 1
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    return nums.sorted { (a, b) -> Bool in\n        let aSum = a.digits.reduce(0,\
    \ +)\n        let bSum = b.digits.reduce(0, +)\n        return aSum == bSum ?\
    \ a < b : aSum < bSum\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(order_by_points(nums:\
    \ [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums:\
    \ [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2,\
    \ 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmp9yek2hhf.swift:13:22: error: value of type 'Int' has no member\
    \ 'digits'\n        let aSum = a.digits.reduce(0, +)\n                   ~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824799
- exit_code: 1
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    var result = nums\n    for i in 0..<result.count {\n        for j in i+1..<result.count\
    \ {\n            if sum_of_digits(num: result[i]) > sum_of_digits(num: result[j])\
    \ {\n                let temp = result[i]\n                result[i] = result[j]\n\
    \                result[j] = temp\n            }\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(order_by_points(nums:\
    \ [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums:\
    \ [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2,\
    \ 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpsb4gn04f.swift:15:16: error: cannot find 'sum_of_digits' in scope\n\
    \            if sum_of_digits(num: result[i]) > sum_of_digits(num: result[j])\
    \ {\n               ^~~~~~~~~~~~~\n/tmp/tmpsb4gn04f.swift:15:48: error: cannot\
    \ find 'sum_of_digits' in scope\n            if sum_of_digits(num: result[i])\
    \ > sum_of_digits(num: result[j]) {\n                                        \
    \       ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824799
- exit_code: 1
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    return nums.sorted { (lhs, rhs) -> Bool in\n        let lhsSum = lhs.digits.reduce(0,\
    \ +)\n        let rhsSum = rhs.digits.reduce(0, +)\n        return lhsSum < rhsSum\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(order_by_points(nums: [1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums: [1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmp90lvsi66.swift:13:26: error: value of type 'Int' has no member\
    \ 'digits'\n        let lhsSum = lhs.digits.reduce(0, +)\n                   \
    \  ~~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824799
- exit_code: -4
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    return nums.sorted(by: {\n        let a = String($0).map { Int(String($0))!\
    \ }.reduce(0, +)\n        let b = String($1).map { Int(String($0))! }.reduce(0,\
    \ +)\n        return a < b\n    })\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\n\
    assert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as [Int])\nassert(order_by_points(nums:\
    \ [1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: Exception
  stderr: 'tmp54rtx7kw/tmp54rtx7kw.swift:13: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002ac514261c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac513f58561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ac513f58286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ac513f5813c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ac513f57bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmp54rtx7kw                        0x0000559bde0854f1 <unavailable> + 9457

    6    libswiftCore.so                    0x00002ac513f40820 Collection.map<A>(_:)
    + 426

    7    tmp54rtx7kw                        0x0000559bde085131 <unavailable> + 8497

    8    libswiftCore.so                    0x00002ac514079c90 MutableCollection<>._insertionSort(within:sortedEnd:by:)
    + 770

    9    libswiftCore.so                    0x00002ac51407a110 MutableCollection<>._insertionSort(within:by:)
    + 356

    10   libswiftCore.so                    0x00002ac514078d30 UnsafeMutableBufferPointer._stableSortImpl(by:)
    + 319

    11   libswiftCore.so                    0x00002ac514078d15 <unavailable> + 2616597

    12   libswiftCore.so                    0x00002ac51419e65a <unavailable> + 3819098

    13   libswiftCore.so                    0x00002ac513f8d720 ContiguousArray.withContiguousMutableStorageIfAvailable<A>(_:)
    + 130

    14   libswiftCore.so                    0x00002ac513f8d70f <unavailable> + 1652495

    15   libswiftCore.so                    0x00002ac514078460 MutableCollection<>.sort(by:)
    + 771

    16   libswiftCore.so                    0x00002ac514078370 Sequence.sorted(by:)
    + 193

    17   tmp54rtx7kw                        0x0000559bde085060 <unavailable> + 8288

    18   tmp54rtx7kw                        0x0000559bde084714 <unavailable> + 5908

    19   libc.so.6                          0x00002ac51444d460 __libc_start_main +
    245

    20   tmp54rtx7kw                        0x0000559bde0843e9 <unavailable'
  stdout: ''
  timestamp: 1659824800
- exit_code: 1
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    return nums.sorted { (a, b) -> Bool in\n        let aSum = a.digits.reduce(0,\
    \ +)\n        let bSum = b.digits.reduce(0, +)\n        return aSum < bSum\n \
    \   }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(order_by_points(nums: [1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums: [1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpdsme7rpy.swift:13:22: error: value of type 'Int' has no member\
    \ 'digits'\n        let aSum = a.digits.reduce(0, +)\n                   ~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824799
- exit_code: 1
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    return nums.sorted { (a, b) -> Bool in\n        let aSum = a.digits.reduce(0,\
    \ +)\n        let bSum = b.digits.reduce(0, +)\n        return aSum < bSum\n \
    \   }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(order_by_points(nums: [1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums: [1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpdsme7rpy.swift:13:22: error: value of type 'Int' has no member\
    \ 'digits'\n        let aSum = a.digits.reduce(0, +)\n                   ~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824799
- exit_code: -4
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    return nums.sorted { (a, b) -> Bool in\n        let aSum = String(a).map\
    \ { Int(String($0))! }.reduce(0, +)\n        let bSum = String(b).map { Int(String($0))!\
    \ }.reduce(0, +)\n        return aSum < bSum\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as\
    \ [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2, -3]) == [-3,\
    \ -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: Exception
  stderr: 'tmpkw1wpe01/tmpkw1wpe01.swift:13: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002b7d783b1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7d780a8561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b7d780a8286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b7d780a813c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b7d780a7bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpkw1wpe01                        0x000055d0a35eb4f1 <unavailable> + 9457

    6    libswiftCore.so                    0x00002b7d78090820 Collection.map<A>(_:)
    + 426

    7    tmpkw1wpe01                        0x000055d0a35eb131 <unavailable> + 8497

    8    libswiftCore.so                    0x00002b7d781c9c90 MutableCollection<>._insertionSort(within:sortedEnd:by:)
    + 770

    9    libswiftCore.so                    0x00002b7d781ca110 MutableCollection<>._insertionSort(within:by:)
    + 356

    10   libswiftCore.so                    0x00002b7d781c8d30 UnsafeMutableBufferPointer._stableSortImpl(by:)
    + 319

    11   libswiftCore.so                    0x00002b7d781c8d15 <unavailable> + 2616597

    12   libswiftCore.so                    0x00002b7d782ee65a <unavailable> + 3819098

    13   libswiftCore.so                    0x00002b7d780dd720 ContiguousArray.withContiguousMutableStorageIfAvailable<A>(_:)
    + 130

    14   libswiftCore.so                    0x00002b7d780dd70f <unavailable> + 1652495

    15   libswiftCore.so                    0x00002b7d781c8460 MutableCollection<>.sort(by:)
    + 771

    16   libswiftCore.so                    0x00002b7d781c8370 Sequence.sorted(by:)
    + 193

    17   tmpkw1wpe01                        0x000055d0a35eb060 <unavailable> + 8288

    18   tmpkw1wpe01                        0x000055d0a35ea714 <unavailable> + 5908

    19   libc.so.6                          0x00002b7d7859d460 __libc_start_main +
    245

    20   tmpkw1wpe01                        0x000055d0a35ea3e9 <unavailable'
  stdout: ''
  timestamp: 1659824800
- exit_code: 1
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    return nums.sorted { (a, b) -> Bool in\n        let aSum = a.digits.reduce(0,\
    \ +)\n        let bSum = b.digits.reduce(0, +)\n        return aSum < bSum\n \
    \   }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(order_by_points(nums: [1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums: [1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpdsme7rpy.swift:13:22: error: value of type 'Int' has no member\
    \ 'digits'\n        let aSum = a.digits.reduce(0, +)\n                   ~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824799
- exit_code: 1
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    return nums.sorted { (a, b) -> Bool in\n        let aSum = a.digits.reduce(0,\
    \ +)\n        let bSum = b.digits.reduce(0, +)\n        return aSum == bSum ?\
    \ a < b : aSum < bSum\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(order_by_points(nums:\
    \ [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums:\
    \ [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2,\
    \ 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmp9yek2hhf.swift:13:22: error: value of type 'Int' has no member\
    \ 'digits'\n        let aSum = a.digits.reduce(0, +)\n                   ~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824799
- exit_code: -4
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    var nums = nums\n    nums.sort { (a, b) -> Bool in\n        let aSum = String(a).reduce(0)\
    \ { $0 + Int(String($1))! }\n        let bSum = String(b).reduce(0) { $0 + Int(String($1))!\
    \ }\n        return aSum < bSum\n    }\n    return nums\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as\
    \ [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2, -3]) == [-3,\
    \ -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: Exception
  stderr: 'tmp993e8184/tmp993e8184.swift:14: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002b005af9dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b005ac94561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b005ac94286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b005ac9413c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b005ac93bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmp993e8184                        0x000055c02e2b231a <unavailable> + 8986

    6    libswiftCore.so                    0x00002b005ada3410 Sequence.reduce<A>(_:_:)
    + 530

    7    tmp993e8184                        0x000055c02e2b20f3 <unavailable> + 8435

    8    libswiftSwiftOnoneSupport.so       0x00002b005aa80020 specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)
    + 152

    9    libswiftSwiftOnoneSupport.so       0x00002b005aa8704d <unavailable> + 135245

    10   libswiftSwiftOnoneSupport.so       0x00002b005aa820d2 <unavailable> + 114898

    11   libswiftSwiftOnoneSupport.so       0x00002b005aa817b0 specialized MutableCollection<>.sort(by:)
    + 27

    12   tmp993e8184                        0x000055c02e2b2009 <unavailable> + 8201

    13   tmp993e8184                        0x000055c02e2b16c4 <unavailable> + 5828

    14   libc.so.6                          0x00002b005b189460 __libc_start_main +
    245

    15   tmp993e8184                        0x000055c02e2b1399 <unavailable> + 5017

    '
  stdout: ''
  timestamp: 1659824800
- exit_code: 1
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    return nums.sorted { (a, b) -> Bool in\n        let aSum = a.digits.reduce(0,\
    \ +)\n        let bSum = b.digits.reduce(0, +)\n        return aSum < bSum\n \
    \   }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(order_by_points(nums: [1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums: [1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpdsme7rpy.swift:13:22: error: value of type 'Int' has no member\
    \ 'digits'\n        let aSum = a.digits.reduce(0, +)\n                   ~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824799
- exit_code: 1
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    return nums.sorted { (a, b) -> Bool in\n        let aSum = a.digits.reduce(0,\
    \ +)\n        let bSum = b.digits.reduce(0, +)\n        return aSum < bSum\n \
    \   }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(order_by_points(nums: [1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums: [1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpdsme7rpy.swift:13:22: error: value of type 'Int' has no member\
    \ 'digits'\n        let aSum = a.digits.reduce(0, +)\n                   ~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824799
- exit_code: 1
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    return nums.sorted { (a, b) -> Bool in\n        let aSum = a.digits.reduce(0,\
    \ +)\n        let bSum = b.digits.reduce(0, +)\n        return aSum < bSum\n \
    \   }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(order_by_points(nums: [1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums: [1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpdsme7rpy.swift:13:22: error: value of type 'Int' has no member\
    \ 'digits'\n        let aSum = a.digits.reduce(0, +)\n                   ~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824799
- exit_code: 1
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    return nums.sorted { (a, b) -> Bool in\n        let aSum = a.digits.reduce(0,\
    \ +)\n        let bSum = b.digits.reduce(0, +)\n        return aSum == bSum ?\
    \ a < b : aSum < bSum\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(order_by_points(nums:\
    \ [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums:\
    \ [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2,\
    \ 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmp9yek2hhf.swift:13:22: error: value of type 'Int' has no member\
    \ 'digits'\n        let aSum = a.digits.reduce(0, +)\n                   ~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824799
- exit_code: 1
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    return nums.sorted { (lhs, rhs) -> Bool in\n        let lhsSum = lhs.digits.reduce(0,\
    \ +)\n        let rhsSum = rhs.digits.reduce(0, +)\n        return lhsSum < rhsSum\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(order_by_points(nums: [1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums: [1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmp90lvsi66.swift:13:26: error: value of type 'Int' has no member\
    \ 'digits'\n        let lhsSum = lhs.digits.reduce(0, +)\n                   \
    \  ~~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824799
- exit_code: 1
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    return nums.sorted { (a, b) -> Bool in\n        let aSum = a.digits.reduce(0,\
    \ +)\n        let bSum = b.digits.reduce(0, +)\n        return aSum == bSum ?\
    \ a < b : aSum < bSum\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(order_by_points(nums:\
    \ [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums:\
    \ [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2,\
    \ 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmp9yek2hhf.swift:13:22: error: value of type 'Int' has no member\
    \ 'digits'\n        let aSum = a.digits.reduce(0, +)\n                   ~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824799
- exit_code: 1
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    return nums.sorted(by: {\n        let a = $0.digits.reduce(0, +)\n      \
    \  let b = $1.digits.reduce(0, +)\n        return a == b ? $0 < $1 : a < b\n \
    \   })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(order_by_points(nums: [1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums: [1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmp6s7g3frf.swift:13:20: error: value of type 'Int' has no member\
    \ 'digits'\n        let a = $0.digits.reduce(0, +)\n                ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824799
- exit_code: 1
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    return nums.sorted { (a, b) -> Bool in\n        let aSum = a.digits.reduce(0,\
    \ +)\n        let bSum = b.digits.reduce(0, +)\n        return aSum < bSum\n \
    \   }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(order_by_points(nums: [1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums: [1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpdsme7rpy.swift:13:22: error: value of type 'Int' has no member\
    \ 'digits'\n        let aSum = a.digits.reduce(0, +)\n                   ~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824799
- exit_code: 1
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    return nums.sorted { (a, b) -> Bool in\n        let aSum = a.digits.reduce(0,\
    \ +)\n        let bSum = b.digits.reduce(0, +)\n        return aSum == bSum ?\
    \ a < b : aSum < bSum\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(order_by_points(nums:\
    \ [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums:\
    \ [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2,\
    \ 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmp9yek2hhf.swift:13:22: error: value of type 'Int' has no member\
    \ 'digits'\n        let aSum = a.digits.reduce(0, +)\n                   ~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824799
- exit_code: 1
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    return nums.sorted {\n        let sum1 = $0.digits.reduce(0, +)\n       \
    \ let sum2 = $1.digits.reduce(0, +)\n        if sum1 == sum2 {\n            return\
    \ nums.firstIndex(of: $0)! < nums.firstIndex(of: $1)!\n        }\n        return\
    \ sum1 < sum2\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(order_by_points(nums:\
    \ [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums:\
    \ [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2,\
    \ 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmp2x4agutc.swift:13:23: error: value of type 'Int' has no member\
    \ 'digits'\n        let sum1 = $0.digits.reduce(0, +)\n                   ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824799
- exit_code: 1
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    return nums.sorted { (a, b) -> Bool in\n        let aSum = a.digits.reduce(0,\
    \ +)\n        let bSum = b.digits.reduce(0, +)\n        return aSum < bSum\n \
    \   }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(order_by_points(nums: [1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums: [1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpdsme7rpy.swift:13:22: error: value of type 'Int' has no member\
    \ 'digits'\n        let aSum = a.digits.reduce(0, +)\n                   ~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824799
- exit_code: 1
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    return nums.sorted { (a, b) -> Bool in\n        let aSum = a.digits.reduce(0,\
    \ +)\n        let bSum = b.digits.reduce(0, +)\n        return aSum < bSum\n \
    \   }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(order_by_points(nums: [1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums: [1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpdsme7rpy.swift:13:22: error: value of type 'Int' has no member\
    \ 'digits'\n        let aSum = a.digits.reduce(0, +)\n                   ~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824799
- exit_code: 1
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    var nums = nums\n    nums.sort { (a, b) -> Bool in\n        let aSum = a.digits.reduce(0,\
    \ +)\n        let bSum = b.digits.reduce(0, +)\n        return aSum < bSum\n \
    \   }\n    return nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(order_by_points(nums:\
    \ [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums:\
    \ [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2,\
    \ 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpweuu3_7p.swift:14:22: error: value of type 'Int' has no member\
    \ 'digits'\n        let aSum = a.digits.reduce(0, +)\n                   ~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824799
- exit_code: 1
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    return nums.sorted { (a, b) -> Bool in\n        let aSum = sum_of_digits(num:\
    \ a)\n        let bSum = sum_of_digits(num: b)\n        return aSum < bSum\n \
    \   }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(order_by_points(nums: [1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums: [1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpbr_ic17c.swift:13:20: error: cannot find 'sum_of_digits' in scope\n\
    \        let aSum = sum_of_digits(num: a)\n                   ^~~~~~~~~~~~~\n\
    /tmp/tmpbr_ic17c.swift:14:20: error: cannot find 'sum_of_digits' in scope\n  \
    \      let bSum = sum_of_digits(num: b)\n                   ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824799
- exit_code: 1
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    return nums.sorted { (a, b) -> Bool in\n        let aSum = a.digits.reduce(0,\
    \ +)\n        let bSum = b.digits.reduce(0, +)\n        return aSum < bSum\n \
    \   }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(order_by_points(nums: [1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums: [1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpdsme7rpy.swift:13:22: error: value of type 'Int' has no member\
    \ 'digits'\n        let aSum = a.digits.reduce(0, +)\n                   ~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824799
- exit_code: 1
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    return nums.sorted { (a, b) -> Bool in\n        let aSum = a.digits.reduce(0,\
    \ +)\n        let bSum = b.digits.reduce(0, +)\n        return aSum < bSum\n \
    \   }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(order_by_points(nums: [1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums: [1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpdsme7rpy.swift:13:22: error: value of type 'Int' has no member\
    \ 'digits'\n        let aSum = a.digits.reduce(0, +)\n                   ~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824799
- exit_code: 1
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    return nums.sorted(by: {\n        let sum1 = $0.digits.reduce(0, +)\n   \
    \     let sum2 = $1.digits.reduce(0, +)\n        return sum1 < sum2\n    })\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) ==\
    \ [-1, -11, 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2,\
    \ 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int])\
    \ == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2,\
    \ -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmp4quvf8tl.swift:13:23: error: value of type 'Int' has no member\
    \ 'digits'\n        let sum1 = $0.digits.reduce(0, +)\n                   ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824799
- exit_code: -4
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    return nums.sorted { (a, b) -> Bool in\n        let aSum = String(a).reduce(0)\
    \ { $0 + Int(String($1))! }\n        let bSum = String(b).reduce(0) { $0 + Int(String($1))!\
    \ }\n        return aSum < bSum\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\n\
    assert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as [Int])\nassert(order_by_points(nums:\
    \ [1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: Exception
  stderr: 'tmpdf_hl_00/tmpdf_hl_00.swift:13: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002b05782f1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0577fe8561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b0577fe8286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b0577fe813c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b0577fe7bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpdf_hl_00                        0x0000559aecb842fa <unavailable> + 8954

    6    libswiftCore.so                    0x00002b05780f7410 Sequence.reduce<A>(_:_:)
    + 530

    7    tmpdf_hl_00                        0x0000559aecb840d3 <unavailable> + 8403

    8    libswiftCore.so                    0x00002b0578109c90 MutableCollection<>._insertionSort(within:sortedEnd:by:)
    + 770

    9    libswiftCore.so                    0x00002b057810a110 MutableCollection<>._insertionSort(within:by:)
    + 356

    10   libswiftCore.so                    0x00002b0578108d30 UnsafeMutableBufferPointer._stableSortImpl(by:)
    + 319

    11   libswiftCore.so                    0x00002b0578108d15 <unavailable> + 2616597

    12   libswiftCore.so                    0x00002b057822e65a <unavailable> + 3819098

    13   libswiftCore.so                    0x00002b057801d720 ContiguousArray.withContiguousMutableStorageIfAvailable<A>(_:)
    + 130

    14   libswiftCore.so                    0x00002b057801d70f <unavailable> + 1652495

    15   libswiftCore.so                    0x00002b0578108460 MutableCollection<>.sort(by:)
    + 771

    16   libswiftCore.so                    0x00002b0578108370 Sequence.sorted(by:)
    + 193

    17   tmpdf_hl_00                        0x0000559aecb84000 <unavailable> + 8192

    18   tmpdf_hl_00                        0x0000559aecb836b4 <unavailable> + 5812

    19   libc.so.6                          0x00002b05784dd460 __libc_start_main +
    245

    20   tmpdf_hl_00                        0x0000559aecb83389 <unavaila'
  stdout: ''
  timestamp: 1659824800
- exit_code: 1
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    return nums.sorted { (lhs, rhs) -> Bool in\n        let lhsSum = lhs.digits.reduce(0,\
    \ +)\n        let rhsSum = rhs.digits.reduce(0, +)\n        return lhsSum < rhsSum\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(order_by_points(nums: [1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums: [1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmp90lvsi66.swift:13:26: error: value of type 'Int' has no member\
    \ 'digits'\n        let lhsSum = lhs.digits.reduce(0, +)\n                   \
    \  ~~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824799
- exit_code: 1
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    var result = [Int]()\n    var dict = [Int: [Int]]()\n    for num in nums\
    \ {\n        let sum = num.digits.reduce(0, +)\n        if dict[sum] == nil {\n\
    \            dict[sum] = [num]\n        } else {\n            dict[sum]?.append(num)\n\
    \        }\n    }\n    let sortedKeys = dict.keys.sorted()\n    for key in sortedKeys\
    \ {\n        result.append(contentsOf: dict[key]!)\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) ==\
    \ [-1, -11, 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2,\
    \ 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int])\
    \ == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2,\
    \ -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmphmby3g2y.swift:15:23: error: value of type 'Int' has no member\
    \ 'digits'\n        let sum = num.digits.reduce(0, +)\n                  ~~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824799
- exit_code: 1
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    return nums.sorted { (a, b) -> Bool in\n        let aSum = a.digits.reduce(0,\
    \ +)\n        let bSum = b.digits.reduce(0, +)\n        return aSum < bSum\n \
    \   }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(order_by_points(nums: [1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums: [1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpdsme7rpy.swift:13:22: error: value of type 'Int' has no member\
    \ 'digits'\n        let aSum = a.digits.reduce(0, +)\n                   ~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824799
- exit_code: 1
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    var nums = nums\n    nums.sort { (a, b) -> Bool in\n        let aSum = a.digits.reduce(0,\
    \ +)\n        let bSum = b.digits.reduce(0, +)\n        return aSum == bSum ?\
    \ a < b : aSum < bSum\n    }\n    return nums\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46,\
    \ 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as [Int])\n\
    assert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98,\
    \ -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpgvtt5yim.swift:14:22: error: value of type 'Int' has no member\
    \ 'digits'\n        let aSum = a.digits.reduce(0, +)\n                   ~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824799
- exit_code: 1
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    return nums.sorted { (a, b) -> Bool in\n        return sum_of_digits(a) <\
    \ sum_of_digits(b)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(order_by_points(nums:\
    \ [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums:\
    \ [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2,\
    \ 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmp1m85qq94.swift:13:16: error: cannot find 'sum_of_digits' in scope\n\
    \        return sum_of_digits(a) < sum_of_digits(b)\n               ^~~~~~~~~~~~~\n\
    /tmp/tmp1m85qq94.swift:13:35: error: cannot find 'sum_of_digits' in scope\n  \
    \      return sum_of_digits(a) < sum_of_digits(b)\n                          \
    \        ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824799
- exit_code: 1
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    var result = nums\n    result.sort { (a, b) -> Bool in\n        let aSum\
    \ = a.digits.reduce(0, +)\n        let bSum = b.digits.reduce(0, +)\n        return\
    \ aSum < bSum\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\n\
    assert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as [Int])\nassert(order_by_points(nums:\
    \ [1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpz7d0i5gb.swift:14:22: error: value of type 'Int' has no member\
    \ 'digits'\n        let aSum = a.digits.reduce(0, +)\n                   ~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824799
- exit_code: 1
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    return nums.sorted(by: {\n        let a = $0.digits.reduce(0, +)\n      \
    \  let b = $1.digits.reduce(0, +)\n        return a == b ? $0 < $1 : a < b\n \
    \   })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(order_by_points(nums: [1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums: [1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmp6s7g3frf.swift:13:20: error: value of type 'Int' has no member\
    \ 'digits'\n        let a = $0.digits.reduce(0, +)\n                ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824799
- exit_code: -4
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    return nums.sorted(by: { (a, b) -> Bool in\n        let aSum = String(a).reduce(0,\
    \ { $0 + Int(String($1))! })\n        let bSum = String(b).reduce(0, { $0 + Int(String($1))!\
    \ })\n        return aSum < bSum\n    })\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\n\
    assert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as [Int])\nassert(order_by_points(nums:\
    \ [1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: Exception
  stderr: 'tmp7_qi7trl/tmp7_qi7trl.swift:13: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002b2dcd1ecc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2dccee3561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b2dccee3286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b2dccee313c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b2dccee2bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmp7_qi7trl                        0x00005624999082fa <unavailable> + 8954

    6    libswiftCore.so                    0x00002b2dccff2410 Sequence.reduce<A>(_:_:)
    + 530

    7    tmp7_qi7trl                        0x00005624999080d3 <unavailable> + 8403

    8    libswiftCore.so                    0x00002b2dcd004c90 MutableCollection<>._insertionSort(within:sortedEnd:by:)
    + 770

    9    libswiftCore.so                    0x00002b2dcd005110 MutableCollection<>._insertionSort(within:by:)
    + 356

    10   libswiftCore.so                    0x00002b2dcd003d30 UnsafeMutableBufferPointer._stableSortImpl(by:)
    + 319

    11   libswiftCore.so                    0x00002b2dcd003d15 <unavailable> + 2616597

    12   libswiftCore.so                    0x00002b2dcd12965a <unavailable> + 3819098

    13   libswiftCore.so                    0x00002b2dccf18720 ContiguousArray.withContiguousMutableStorageIfAvailable<A>(_:)
    + 130

    14   libswiftCore.so                    0x00002b2dccf1870f <unavailable> + 1652495

    15   libswiftCore.so                    0x00002b2dcd003460 MutableCollection<>.sort(by:)
    + 771

    16   libswiftCore.so                    0x00002b2dcd003370 Sequence.sorted(by:)
    + 193

    17   tmp7_qi7trl                        0x0000562499908000 <unavailable> + 8192

    18   tmp7_qi7trl                        0x00005624999076b4 <unavailable> + 5812

    19   libc.so.6                          0x00002b2dcd3d8460 __libc_start_main +
    245

    20   tmp7_qi7trl                        0x0000562499907389 <unavaila'
  stdout: ''
  timestamp: 1659824800
- exit_code: 1
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    var result = nums\n    result.sort { (a, b) -> Bool in\n        let aSum\
    \ = sum_of_digits(num: a)\n        let bSum = sum_of_digits(num: b)\n        if\
    \ aSum == bSum {\n            return a < b\n        }\n        return aSum < bSum\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(order_by_points(nums:\
    \ [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums:\
    \ [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2,\
    \ 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmp0w39t6tu.swift:14:20: error: cannot find 'sum_of_digits' in scope\n\
    \        let aSum = sum_of_digits(num: a)\n                   ^~~~~~~~~~~~~\n\
    /tmp/tmp0w39t6tu.swift:15:20: error: cannot find 'sum_of_digits' in scope\n  \
    \      let bSum = sum_of_digits(num: b)\n                   ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824799
- exit_code: 1
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    return nums.sorted { (a, b) -> Bool in\n        let aSum = a.digits.reduce(0,\
    \ +)\n        let bSum = b.digits.reduce(0, +)\n        return aSum < bSum\n \
    \   }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(order_by_points(nums: [1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums: [1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpdsme7rpy.swift:13:22: error: value of type 'Int' has no member\
    \ 'digits'\n        let aSum = a.digits.reduce(0, +)\n                   ~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824799
- exit_code: 1
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    return nums.sorted {\n        let sum1 = $0.digits.reduce(0, +)\n       \
    \ let sum2 = $1.digits.reduce(0, +)\n        if sum1 == sum2 {\n            return\
    \ nums.firstIndex(of: $0)! < nums.firstIndex(of: $1)!\n        }\n        return\
    \ sum1 < sum2\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(order_by_points(nums:\
    \ [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums:\
    \ [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2,\
    \ 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmp2x4agutc.swift:13:23: error: value of type 'Int' has no member\
    \ 'digits'\n        let sum1 = $0.digits.reduce(0, +)\n                   ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824799
- exit_code: 1
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    return nums.sorted { (a, b) -> Bool in\n        let aSum = a.digits.reduce(0,\
    \ +)\n        let bSum = b.digits.reduce(0, +)\n        return aSum < bSum\n \
    \   }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(order_by_points(nums: [1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums: [1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpdsme7rpy.swift:13:22: error: value of type 'Int' has no member\
    \ 'digits'\n        let aSum = a.digits.reduce(0, +)\n                   ~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824799
- exit_code: -4
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    return nums.sorted { (a, b) -> Bool in\n        let sumA = String(a).reduce(0)\
    \ { $0 + Int(String($1))! }\n        let sumB = String(b).reduce(0) { $0 + Int(String($1))!\
    \ }\n        return sumA < sumB\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\n\
    assert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as [Int])\nassert(order_by_points(nums:\
    \ [1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: Exception
  stderr: 'tmp83jtypo7/tmp83jtypo7.swift:13: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002b9fb1ac4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9fb17bb561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b9fb17bb286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b9fb17bb13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b9fb17babb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmp83jtypo7                        0x000055d53f71d2fa <unavailable> + 8954

    6    libswiftCore.so                    0x00002b9fb18ca410 Sequence.reduce<A>(_:_:)
    + 530

    7    tmp83jtypo7                        0x000055d53f71d0d3 <unavailable> + 8403

    8    libswiftCore.so                    0x00002b9fb18dcc90 MutableCollection<>._insertionSort(within:sortedEnd:by:)
    + 770

    9    libswiftCore.so                    0x00002b9fb18dd110 MutableCollection<>._insertionSort(within:by:)
    + 356

    10   libswiftCore.so                    0x00002b9fb18dbd30 UnsafeMutableBufferPointer._stableSortImpl(by:)
    + 319

    11   libswiftCore.so                    0x00002b9fb18dbd15 <unavailable> + 2616597

    12   libswiftCore.so                    0x00002b9fb1a0165a <unavailable> + 3819098

    13   libswiftCore.so                    0x00002b9fb17f0720 ContiguousArray.withContiguousMutableStorageIfAvailable<A>(_:)
    + 130

    14   libswiftCore.so                    0x00002b9fb17f070f <unavailable> + 1652495

    15   libswiftCore.so                    0x00002b9fb18db460 MutableCollection<>.sort(by:)
    + 771

    16   libswiftCore.so                    0x00002b9fb18db370 Sequence.sorted(by:)
    + 193

    17   tmp83jtypo7                        0x000055d53f71d000 <unavailable> + 8192

    18   tmp83jtypo7                        0x000055d53f71c6b4 <unavailable> + 5812

    19   libc.so.6                          0x00002b9fb1cb0460 __libc_start_main +
    245

    20   tmp83jtypo7                        0x000055d53f71c389 <unavaila'
  stdout: ''
  timestamp: 1659824800
- exit_code: 1
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    return nums.sorted { (a, b) -> Bool in\n        let aSum = a.digits.reduce(0,\
    \ +)\n        let bSum = b.digits.reduce(0, +)\n        return aSum < bSum\n \
    \   }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(order_by_points(nums: [1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums: [1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpdsme7rpy.swift:13:22: error: value of type 'Int' has no member\
    \ 'digits'\n        let aSum = a.digits.reduce(0, +)\n                   ~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824799
- exit_code: 1
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    return nums.sorted { (a, b) -> Bool in\n        let aSum = a.digits.reduce(0,\
    \ +)\n        let bSum = b.digits.reduce(0, +)\n        return aSum == bSum ?\
    \ a < b : aSum < bSum\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(order_by_points(nums:\
    \ [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums:\
    \ [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2,\
    \ 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmp9yek2hhf.swift:13:22: error: value of type 'Int' has no member\
    \ 'digits'\n        let aSum = a.digits.reduce(0, +)\n                   ~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824799
- exit_code: 1
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    return nums.sorted { (a, b) -> Bool in\n        let aSum = a.digits.reduce(0,\
    \ +)\n        let bSum = b.digits.reduce(0, +)\n        return aSum < bSum\n \
    \   }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(order_by_points(nums: [1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums: [1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpdsme7rpy.swift:13:22: error: value of type 'Int' has no member\
    \ 'digits'\n        let aSum = a.digits.reduce(0, +)\n                   ~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824799
- exit_code: 1
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    return nums.sorted { (lhs, rhs) -> Bool in\n        let lhsSum = lhs.digits.reduce(0,\
    \ +)\n        let rhsSum = rhs.digits.reduce(0, +)\n        return lhsSum < rhsSum\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(order_by_points(nums: [1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums: [1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmp90lvsi66.swift:13:26: error: value of type 'Int' has no member\
    \ 'digits'\n        let lhsSum = lhs.digits.reduce(0, +)\n                   \
    \  ~~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824799
- exit_code: 1
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    return nums.sorted { (a, b) -> Bool in\n        let aSum = a.digits.reduce(0,\
    \ +)\n        let bSum = b.digits.reduce(0, +)\n        return aSum == bSum ?\
    \ a < b : aSum < bSum\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(order_by_points(nums:\
    \ [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums:\
    \ [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2,\
    \ 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmp9yek2hhf.swift:13:22: error: value of type 'Int' has no member\
    \ 'digits'\n        let aSum = a.digits.reduce(0, +)\n                   ~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824799
- exit_code: 1
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    return nums.sorted { (a, b) -> Bool in\n        let aSum = a.digits.reduce(0,\
    \ +)\n        let bSum = b.digits.reduce(0, +)\n        return aSum < bSum\n \
    \   }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(order_by_points(nums: [1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums: [1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpdsme7rpy.swift:13:22: error: value of type 'Int' has no member\
    \ 'digits'\n        let aSum = a.digits.reduce(0, +)\n                   ~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824799
- exit_code: 1
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    return nums.sorted(by: {\n        let a = $0.digits.reduce(0, +)\n      \
    \  let b = $1.digits.reduce(0, +)\n        return a < b\n    })\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as\
    \ [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2, -3]) == [-3,\
    \ -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpb318fg4d.swift:13:20: error: value of type 'Int' has no member\
    \ 'digits'\n        let a = $0.digits.reduce(0, +)\n                ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824800
- exit_code: 1
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    return nums.sorted(by: { (a, b) -> Bool in\n        let aSum = a.digits.reduce(0,\
    \ +)\n        let bSum = b.digits.reduce(0, +)\n        return aSum < bSum\n \
    \   })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(order_by_points(nums: [1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums: [1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpsrqi9egr.swift:13:22: error: value of type 'Int' has no member\
    \ 'digits'\n        let aSum = a.digits.reduce(0, +)\n                   ~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824800
- exit_code: 1
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    return nums.sorted { (lhs, rhs) -> Bool in\n        let lhsSum = lhs.digits.reduce(0,\
    \ +)\n        let rhsSum = rhs.digits.reduce(0, +)\n        return lhsSum < rhsSum\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(order_by_points(nums: [1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums: [1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmp90lvsi66.swift:13:26: error: value of type 'Int' has no member\
    \ 'digits'\n        let lhsSum = lhs.digits.reduce(0, +)\n                   \
    \  ~~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824799
- exit_code: 1
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    return nums.sorted { (num1, num2) -> Bool in\n        let sum1 = sum_of_digits(num:\
    \ num1)\n        let sum2 = sum_of_digits(num: num2)\n        if sum1 == sum2\
    \ {\n            return nums.firstIndex(of: num1)! < nums.firstIndex(of: num2)!\n\
    \        }\n        return sum1 < sum2\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46,\
    \ 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as [Int])\n\
    assert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98,\
    \ -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpgppesfop.swift:13:20: error: cannot find 'sum_of_digits' in scope\n\
    \        let sum1 = sum_of_digits(num: num1)\n                   ^~~~~~~~~~~~~\n\
    /tmp/tmpgppesfop.swift:14:20: error: cannot find 'sum_of_digits' in scope\n  \
    \      let sum2 = sum_of_digits(num: num2)\n                   ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824800
- exit_code: 1
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    return nums.sorted { (lhs, rhs) -> Bool in\n        let lhsSum = sum_of_digits(num:\
    \ lhs)\n        let rhsSum = sum_of_digits(num: rhs)\n        if lhsSum == rhsSum\
    \ {\n            return lhs < rhs\n        }\n        return lhsSum < rhsSum\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(order_by_points(nums: [1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums: [1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmp97u42hwh.swift:13:22: error: cannot find 'sum_of_digits' in scope\n\
    \        let lhsSum = sum_of_digits(num: lhs)\n                     ^~~~~~~~~~~~~\n\
    /tmp/tmp97u42hwh.swift:14:22: error: cannot find 'sum_of_digits' in scope\n  \
    \      let rhsSum = sum_of_digits(num: rhs)\n                     ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824800
- exit_code: 1
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    return nums.sorted { (a, b) -> Bool in\n        let aSum = a.digits.reduce(0,\
    \ +)\n        let bSum = b.digits.reduce(0, +)\n        return aSum == bSum ?\
    \ a < b : aSum < bSum\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(order_by_points(nums:\
    \ [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums:\
    \ [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2,\
    \ 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmp9yek2hhf.swift:13:22: error: value of type 'Int' has no member\
    \ 'digits'\n        let aSum = a.digits.reduce(0, +)\n                   ~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824799
- exit_code: 1
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    return nums.sorted { (a, b) -> Bool in\n        let aSum = a.digits.reduce(0,\
    \ +)\n        let bSum = b.digits.reduce(0, +)\n        return aSum == bSum ?\
    \ a < b : aSum < bSum\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(order_by_points(nums:\
    \ [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums:\
    \ [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2,\
    \ 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmp9yek2hhf.swift:13:22: error: value of type 'Int' has no member\
    \ 'digits'\n        let aSum = a.digits.reduce(0, +)\n                   ~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824799
- exit_code: 1
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    return nums.sorted { (lhs, rhs) -> Bool in\n        let lhsSum = lhs.digits.reduce(0,\
    \ +)\n        let rhsSum = rhs.digits.reduce(0, +)\n        return lhsSum == rhsSum\
    \ ? lhs < rhs : lhsSum < rhsSum\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\n\
    assert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as [Int])\nassert(order_by_points(nums:\
    \ [1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmp0pn8lysd.swift:13:26: error: value of type 'Int' has no member\
    \ 'digits'\n        let lhsSum = lhs.digits.reduce(0, +)\n                   \
    \  ~~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824799
- exit_code: -4
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    return nums.sorted { (a, b) -> Bool in\n        let aSum = String(a).reduce(0)\
    \ { $0 + Int(String($1))! }\n        let bSum = String(b).reduce(0) { $0 + Int(String($1))!\
    \ }\n        return aSum < bSum\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\n\
    assert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as [Int])\nassert(order_by_points(nums:\
    \ [1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: Exception
  stderr: 'tmpdf_hl_00/tmpdf_hl_00.swift:13: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002b05782f1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0577fe8561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b0577fe8286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b0577fe813c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b0577fe7bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpdf_hl_00                        0x0000559aecb842fa <unavailable> + 8954

    6    libswiftCore.so                    0x00002b05780f7410 Sequence.reduce<A>(_:_:)
    + 530

    7    tmpdf_hl_00                        0x0000559aecb840d3 <unavailable> + 8403

    8    libswiftCore.so                    0x00002b0578109c90 MutableCollection<>._insertionSort(within:sortedEnd:by:)
    + 770

    9    libswiftCore.so                    0x00002b057810a110 MutableCollection<>._insertionSort(within:by:)
    + 356

    10   libswiftCore.so                    0x00002b0578108d30 UnsafeMutableBufferPointer._stableSortImpl(by:)
    + 319

    11   libswiftCore.so                    0x00002b0578108d15 <unavailable> + 2616597

    12   libswiftCore.so                    0x00002b057822e65a <unavailable> + 3819098

    13   libswiftCore.so                    0x00002b057801d720 ContiguousArray.withContiguousMutableStorageIfAvailable<A>(_:)
    + 130

    14   libswiftCore.so                    0x00002b057801d70f <unavailable> + 1652495

    15   libswiftCore.so                    0x00002b0578108460 MutableCollection<>.sort(by:)
    + 771

    16   libswiftCore.so                    0x00002b0578108370 Sequence.sorted(by:)
    + 193

    17   tmpdf_hl_00                        0x0000559aecb84000 <unavailable> + 8192

    18   tmpdf_hl_00                        0x0000559aecb836b4 <unavailable> + 5812

    19   libc.so.6                          0x00002b05784dd460 __libc_start_main +
    245

    20   tmpdf_hl_00                        0x0000559aecb83389 <unavaila'
  stdout: ''
  timestamp: 1659824800
- exit_code: 1
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    return nums.sorted { (a, b) -> Bool in\n        let aSum = a.digits.reduce(0,\
    \ +)\n        let bSum = b.digits.reduce(0, +)\n        return aSum == bSum ?\
    \ a < b : aSum < bSum\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(order_by_points(nums:\
    \ [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums:\
    \ [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2,\
    \ 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmp9yek2hhf.swift:13:22: error: value of type 'Int' has no member\
    \ 'digits'\n        let aSum = a.digits.reduce(0, +)\n                   ~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824799
- exit_code: 1
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    return nums.sorted { (a, b) -> Bool in\n        let aSum = a.digits.reduce(0,\
    \ +)\n        let bSum = b.digits.reduce(0, +)\n        return aSum < bSum\n \
    \   }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(order_by_points(nums: [1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums: [1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpdsme7rpy.swift:13:22: error: value of type 'Int' has no member\
    \ 'digits'\n        let aSum = a.digits.reduce(0, +)\n                   ~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824799
- exit_code: 1
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    return nums.sorted { (a, b) -> Bool in\n        let aSum = a.digits.reduce(0,\
    \ +)\n        let bSum = b.digits.reduce(0, +)\n        return aSum < bSum\n \
    \   }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(order_by_points(nums: [1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums: [1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpdsme7rpy.swift:13:22: error: value of type 'Int' has no member\
    \ 'digits'\n        let aSum = a.digits.reduce(0, +)\n                   ~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824799
- exit_code: 1
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    return nums.sorted { (a, b) -> Bool in\n        let aSum = a.digits.reduce(0,\
    \ +)\n        let bSum = b.digits.reduce(0, +)\n        return aSum < bSum\n \
    \   }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(order_by_points(nums: [1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums: [1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpdsme7rpy.swift:13:22: error: value of type 'Int' has no member\
    \ 'digits'\n        let aSum = a.digits.reduce(0, +)\n                   ~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824799
- exit_code: -4
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    return nums.sorted { (a, b) -> Bool in\n        let aSum = String(a).reduce(0)\
    \ { $0 + Int(String($1))! }\n        let bSum = String(b).reduce(0) { $0 + Int(String($1))!\
    \ }\n        return aSum < bSum\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\n\
    assert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as [Int])\nassert(order_by_points(nums:\
    \ [1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: Exception
  stderr: 'tmpdf_hl_00/tmpdf_hl_00.swift:13: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002b05782f1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0577fe8561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b0577fe8286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b0577fe813c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b0577fe7bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpdf_hl_00                        0x0000559aecb842fa <unavailable> + 8954

    6    libswiftCore.so                    0x00002b05780f7410 Sequence.reduce<A>(_:_:)
    + 530

    7    tmpdf_hl_00                        0x0000559aecb840d3 <unavailable> + 8403

    8    libswiftCore.so                    0x00002b0578109c90 MutableCollection<>._insertionSort(within:sortedEnd:by:)
    + 770

    9    libswiftCore.so                    0x00002b057810a110 MutableCollection<>._insertionSort(within:by:)
    + 356

    10   libswiftCore.so                    0x00002b0578108d30 UnsafeMutableBufferPointer._stableSortImpl(by:)
    + 319

    11   libswiftCore.so                    0x00002b0578108d15 <unavailable> + 2616597

    12   libswiftCore.so                    0x00002b057822e65a <unavailable> + 3819098

    13   libswiftCore.so                    0x00002b057801d720 ContiguousArray.withContiguousMutableStorageIfAvailable<A>(_:)
    + 130

    14   libswiftCore.so                    0x00002b057801d70f <unavailable> + 1652495

    15   libswiftCore.so                    0x00002b0578108460 MutableCollection<>.sort(by:)
    + 771

    16   libswiftCore.so                    0x00002b0578108370 Sequence.sorted(by:)
    + 193

    17   tmpdf_hl_00                        0x0000559aecb84000 <unavailable> + 8192

    18   tmpdf_hl_00                        0x0000559aecb836b4 <unavailable> + 5812

    19   libc.so.6                          0x00002b05784dd460 __libc_start_main +
    245

    20   tmpdf_hl_00                        0x0000559aecb83389 <unavaila'
  stdout: ''
  timestamp: 1659824800
- exit_code: 1
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    return nums.sorted { (a, b) -> Bool in\n        let aSum = a.digits.reduce(0,\
    \ +)\n        let bSum = b.digits.reduce(0, +)\n        return aSum == bSum ?\
    \ a < b : aSum < bSum\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(order_by_points(nums:\
    \ [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums:\
    \ [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2,\
    \ 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmp9yek2hhf.swift:13:22: error: value of type 'Int' has no member\
    \ 'digits'\n        let aSum = a.digits.reduce(0, +)\n                   ~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824799
- exit_code: 1
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    return nums.sorted { (a, b) -> Bool in\n        let aSum = a.digits.reduce(0,\
    \ +)\n        let bSum = b.digits.reduce(0, +)\n        return aSum == bSum ?\
    \ a < b : aSum < bSum\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(order_by_points(nums:\
    \ [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums:\
    \ [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2,\
    \ 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmp9yek2hhf.swift:13:22: error: value of type 'Int' has no member\
    \ 'digits'\n        let aSum = a.digits.reduce(0, +)\n                   ~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824799
- exit_code: -4
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    return nums.sorted {\n        let sum1 = String($0).reduce(0) { $0 + Int(String($1))!\
    \ }\n        let sum2 = String($1).reduce(0) { $0 + Int(String($1))! }\n     \
    \   return sum1 < sum2\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(order_by_points(nums:\
    \ [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums:\
    \ [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2,\
    \ 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: Exception
  stderr: 'tmpqx_dx3rr/tmpqx_dx3rr.swift:13: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002ac665058c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac664d4f561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ac664d4f286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ac664d4f13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ac664d4ebb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpqx_dx3rr                        0x0000563217efa2fa <unavailable> + 8954

    6    libswiftCore.so                    0x00002ac664e5e410 Sequence.reduce<A>(_:_:)
    + 530

    7    tmpqx_dx3rr                        0x0000563217efa0d3 <unavailable> + 8403

    8    libswiftCore.so                    0x00002ac664e70c90 MutableCollection<>._insertionSort(within:sortedEnd:by:)
    + 770

    9    libswiftCore.so                    0x00002ac664e71110 MutableCollection<>._insertionSort(within:by:)
    + 356

    10   libswiftCore.so                    0x00002ac664e6fd30 UnsafeMutableBufferPointer._stableSortImpl(by:)
    + 319

    11   libswiftCore.so                    0x00002ac664e6fd15 <unavailable> + 2616597

    12   libswiftCore.so                    0x00002ac664f9565a <unavailable> + 3819098

    13   libswiftCore.so                    0x00002ac664d84720 ContiguousArray.withContiguousMutableStorageIfAvailable<A>(_:)
    + 130

    14   libswiftCore.so                    0x00002ac664d8470f <unavailable> + 1652495

    15   libswiftCore.so                    0x00002ac664e6f460 MutableCollection<>.sort(by:)
    + 771

    16   libswiftCore.so                    0x00002ac664e6f370 Sequence.sorted(by:)
    + 193

    17   tmpqx_dx3rr                        0x0000563217efa000 <unavailable> + 8192

    18   tmpqx_dx3rr                        0x0000563217ef96b4 <unavailable> + 5812

    19   libc.so.6                          0x00002ac665244460 __libc_start_main +
    245

    20   tmpqx_dx3rr                        0x0000563217ef9389 <unavaila'
  stdout: ''
  timestamp: 1659824800
- exit_code: 1
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    let sums = nums.map { $0.digits.reduce(0, +) }\n    return zip(nums, sums).sorted\
    \ { $0.1 < $1.1 }.map { $0.0 }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(order_by_points(nums:\
    \ [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums:\
    \ [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2,\
    \ 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpp75k926d.swift:12:30: error: value of type 'Int' has no member\
    \ 'digits'\n    let sums = nums.map { $0.digits.reduce(0, +) }\n             \
    \             ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824800
- exit_code: 1
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    return nums.sorted { (a, b) -> Bool in\n        let aSum = a.digits.reduce(0,\
    \ +)\n        let bSum = b.digits.reduce(0, +)\n        return aSum < bSum\n \
    \   }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(order_by_points(nums: [1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums: [1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpdsme7rpy.swift:13:22: error: value of type 'Int' has no member\
    \ 'digits'\n        let aSum = a.digits.reduce(0, +)\n                   ~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824799
- exit_code: 1
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    return nums.sorted { (a, b) -> Bool in\n        let aSum = a.digits.reduce(0,\
    \ +)\n        let bSum = b.digits.reduce(0, +)\n        return aSum < bSum\n \
    \   }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(order_by_points(nums: [1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums: [1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpdsme7rpy.swift:13:22: error: value of type 'Int' has no member\
    \ 'digits'\n        let aSum = a.digits.reduce(0, +)\n                   ~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824799
- exit_code: 1
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    return nums.sorted { (a, b) -> Bool in\n        let aSum = a.digits.reduce(0,\
    \ +)\n        let bSum = b.digits.reduce(0, +)\n        return aSum < bSum\n \
    \   }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(order_by_points(nums: [1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums: [1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpdsme7rpy.swift:13:22: error: value of type 'Int' has no member\
    \ 'digits'\n        let aSum = a.digits.reduce(0, +)\n                   ~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824799
- exit_code: 1
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    var nums = nums\n    nums.sort { (a, b) -> Bool in\n        let aSum = a.digits.reduce(0,\
    \ +)\n        let bSum = b.digits.reduce(0, +)\n        return aSum < bSum\n \
    \   }\n    return nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(order_by_points(nums:\
    \ [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums:\
    \ [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2,\
    \ 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpweuu3_7p.swift:14:22: error: value of type 'Int' has no member\
    \ 'digits'\n        let aSum = a.digits.reduce(0, +)\n                   ~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824799
- exit_code: 1
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    return nums.sorted { (a, b) -> Bool in\n        let aSum = a.digits.reduce(0,\
    \ +)\n        let bSum = b.digits.reduce(0, +)\n        return aSum < bSum\n \
    \   }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(order_by_points(nums: [1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums: [1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpdsme7rpy.swift:13:22: error: value of type 'Int' has no member\
    \ 'digits'\n        let aSum = a.digits.reduce(0, +)\n                   ~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824799
- exit_code: 1
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    return nums.sorted { (a, b) -> Bool in\n        let aSum = a.digits.reduce(0,\
    \ +)\n        let bSum = b.digits.reduce(0, +)\n        return aSum == bSum ?\
    \ a < b : aSum < bSum\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(order_by_points(nums:\
    \ [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums:\
    \ [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2,\
    \ 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmp9yek2hhf.swift:13:22: error: value of type 'Int' has no member\
    \ 'digits'\n        let aSum = a.digits.reduce(0, +)\n                   ~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824799
- exit_code: 1
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    return nums.sorted { (a, b) -> Bool in\n        let aSum = a.digits.reduce(0,\
    \ +)\n        let bSum = b.digits.reduce(0, +)\n        return aSum == bSum ?\
    \ a < b : aSum < bSum\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(order_by_points(nums:\
    \ [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums:\
    \ [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2,\
    \ 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmp9yek2hhf.swift:13:22: error: value of type 'Int' has no member\
    \ 'digits'\n        let aSum = a.digits.reduce(0, +)\n                   ~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824799
- exit_code: 1
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    return nums.sorted { (a, b) -> Bool in\n        let aSum = a.digits.reduce(0,\
    \ +)\n        let bSum = b.digits.reduce(0, +)\n        return aSum == bSum ?\
    \ a < b : aSum < bSum\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(order_by_points(nums:\
    \ [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums:\
    \ [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2,\
    \ 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmp9yek2hhf.swift:13:22: error: value of type 'Int' has no member\
    \ 'digits'\n        let aSum = a.digits.reduce(0, +)\n                   ~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824799
- exit_code: -4
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    return nums.sorted { (a, b) -> Bool in\n        let aSum = String(a).reduce(0)\
    \ { $0 + Int(String($1))! }\n        let bSum = String(b).reduce(0) { $0 + Int(String($1))!\
    \ }\n        return aSum < bSum\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\n\
    assert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as [Int])\nassert(order_by_points(nums:\
    \ [1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: Exception
  stderr: 'tmpdf_hl_00/tmpdf_hl_00.swift:13: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002b05782f1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0577fe8561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b0577fe8286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b0577fe813c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b0577fe7bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpdf_hl_00                        0x0000559aecb842fa <unavailable> + 8954

    6    libswiftCore.so                    0x00002b05780f7410 Sequence.reduce<A>(_:_:)
    + 530

    7    tmpdf_hl_00                        0x0000559aecb840d3 <unavailable> + 8403

    8    libswiftCore.so                    0x00002b0578109c90 MutableCollection<>._insertionSort(within:sortedEnd:by:)
    + 770

    9    libswiftCore.so                    0x00002b057810a110 MutableCollection<>._insertionSort(within:by:)
    + 356

    10   libswiftCore.so                    0x00002b0578108d30 UnsafeMutableBufferPointer._stableSortImpl(by:)
    + 319

    11   libswiftCore.so                    0x00002b0578108d15 <unavailable> + 2616597

    12   libswiftCore.so                    0x00002b057822e65a <unavailable> + 3819098

    13   libswiftCore.so                    0x00002b057801d720 ContiguousArray.withContiguousMutableStorageIfAvailable<A>(_:)
    + 130

    14   libswiftCore.so                    0x00002b057801d70f <unavailable> + 1652495

    15   libswiftCore.so                    0x00002b0578108460 MutableCollection<>.sort(by:)
    + 771

    16   libswiftCore.so                    0x00002b0578108370 Sequence.sorted(by:)
    + 193

    17   tmpdf_hl_00                        0x0000559aecb84000 <unavailable> + 8192

    18   tmpdf_hl_00                        0x0000559aecb836b4 <unavailable> + 5812

    19   libc.so.6                          0x00002b05784dd460 __libc_start_main +
    245

    20   tmpdf_hl_00                        0x0000559aecb83389 <unavaila'
  stdout: ''
  timestamp: 1659824800
- exit_code: 1
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    return nums.sorted { (lhs, rhs) -> Bool in\n        let lhsSum = lhs.digits.reduce(0,\
    \ +)\n        let rhsSum = rhs.digits.reduce(0, +)\n        return lhsSum == rhsSum\
    \ ? lhs < rhs : lhsSum < rhsSum\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\n\
    assert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as [Int])\nassert(order_by_points(nums:\
    \ [1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmp0pn8lysd.swift:13:26: error: value of type 'Int' has no member\
    \ 'digits'\n        let lhsSum = lhs.digits.reduce(0, +)\n                   \
    \  ~~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824799
- exit_code: 1
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    var result = nums\n    result.sort { (a, b) -> Bool in\n        let aSum\
    \ = a.digits.reduce(0, +)\n        let bSum = b.digits.reduce(0, +)\n        return\
    \ aSum < bSum\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\n\
    assert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as [Int])\nassert(order_by_points(nums:\
    \ [1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpz7d0i5gb.swift:14:22: error: value of type 'Int' has no member\
    \ 'digits'\n        let aSum = a.digits.reduce(0, +)\n                   ~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824799
- exit_code: 1
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    return nums.sorted { (a, b) -> Bool in\n        let aSum = a.digits.reduce(0,\
    \ +)\n        let bSum = b.digits.reduce(0, +)\n        return aSum == bSum ?\
    \ a < b : aSum < bSum\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(order_by_points(nums:\
    \ [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums:\
    \ [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2,\
    \ 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmp9yek2hhf.swift:13:22: error: value of type 'Int' has no member\
    \ 'digits'\n        let aSum = a.digits.reduce(0, +)\n                   ~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824799
- exit_code: 1
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    return nums.sorted { (a, b) -> Bool in\n        let aSum = a.digits.reduce(0,\
    \ +)\n        let bSum = b.digits.reduce(0, +)\n        return aSum < bSum\n \
    \   }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(order_by_points(nums: [1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums: [1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpdsme7rpy.swift:13:22: error: value of type 'Int' has no member\
    \ 'digits'\n        let aSum = a.digits.reduce(0, +)\n                   ~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824799
- exit_code: 1
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    return nums.sorted { (a, b) -> Bool in\n        let aSum = a.digits.reduce(0,\
    \ +)\n        let bSum = b.digits.reduce(0, +)\n        return aSum < bSum\n \
    \   }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(order_by_points(nums: [1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums: [1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpdsme7rpy.swift:13:22: error: value of type 'Int' has no member\
    \ 'digits'\n        let aSum = a.digits.reduce(0, +)\n                   ~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824799
- exit_code: 1
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    return nums.sorted(by: { (a, b) -> Bool in\n        let aSum = a.digits.reduce(0,\
    \ +)\n        let bSum = b.digits.reduce(0, +)\n        return aSum < bSum\n \
    \   })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(order_by_points(nums: [1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums: [1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpsrqi9egr.swift:13:22: error: value of type 'Int' has no member\
    \ 'digits'\n        let aSum = a.digits.reduce(0, +)\n                   ~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824800
- exit_code: 1
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    return nums.sorted { (lhs, rhs) -> Bool in\n        let lhsSum = lhs.digits.reduce(0,\
    \ +)\n        let rhsSum = rhs.digits.reduce(0, +)\n        return lhsSum < rhsSum\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(order_by_points(nums: [1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums: [1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmp90lvsi66.swift:13:26: error: value of type 'Int' has no member\
    \ 'digits'\n        let lhsSum = lhs.digits.reduce(0, +)\n                   \
    \  ~~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824799
- exit_code: 1
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    return nums.sorted { (a, b) -> Bool in\n        let aSum = a.digits.reduce(0,\
    \ +)\n        let bSum = b.digits.reduce(0, +)\n        return aSum == bSum ?\
    \ a < b : aSum < bSum\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(order_by_points(nums:\
    \ [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums:\
    \ [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2,\
    \ 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmp9yek2hhf.swift:13:22: error: value of type 'Int' has no member\
    \ 'digits'\n        let aSum = a.digits.reduce(0, +)\n                   ~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824799
- exit_code: 1
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    return nums.sorted { (a, b) -> Bool in\n        let sumA = a.digits.reduce(0,\
    \ +)\n        let sumB = b.digits.reduce(0, +)\n        return sumA < sumB\n \
    \   }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(order_by_points(nums: [1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums: [1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpogvzywjo.swift:13:22: error: value of type 'Int' has no member\
    \ 'digits'\n        let sumA = a.digits.reduce(0, +)\n                   ~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824800
- exit_code: 1
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    return nums.sorted { (lhs, rhs) -> Bool in\n        let lhsSum = lhs.digits.reduce(0,\
    \ +)\n        let rhsSum = rhs.digits.reduce(0, +)\n        return lhsSum == rhsSum\
    \ ? lhs < rhs : lhsSum < rhsSum\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\n\
    assert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as [Int])\nassert(order_by_points(nums:\
    \ [1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmp0pn8lysd.swift:13:26: error: value of type 'Int' has no member\
    \ 'digits'\n        let lhsSum = lhs.digits.reduce(0, +)\n                   \
    \  ~~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824799
- exit_code: 1
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    return nums.sorted { (a, b) -> Bool in\n        let aSum = a.digits.reduce(0,\
    \ +)\n        let bSum = b.digits.reduce(0, +)\n        return aSum < bSum\n \
    \   }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(order_by_points(nums: [1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums: [1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpdsme7rpy.swift:13:22: error: value of type 'Int' has no member\
    \ 'digits'\n        let aSum = a.digits.reduce(0, +)\n                   ~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824799
- exit_code: 1
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    return nums.sorted { (a, b) -> Bool in\n        let aSum = a.digits.reduce(0,\
    \ +)\n        let bSum = b.digits.reduce(0, +)\n        return aSum == bSum ?\
    \ a < b : aSum < bSum\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(order_by_points(nums:\
    \ [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums:\
    \ [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2,\
    \ 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmp9yek2hhf.swift:13:22: error: value of type 'Int' has no member\
    \ 'digits'\n        let aSum = a.digits.reduce(0, +)\n                   ~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824799
- exit_code: 1
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    return nums.sorted { (num1, num2) -> Bool in\n        let num1Sum = num1.digits.reduce(0,\
    \ +)\n        let num2Sum = num2.digits.reduce(0, +)\n        return num1Sum <\
    \ num2Sum\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(order_by_points(nums:\
    \ [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums:\
    \ [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2,\
    \ 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmp0w98ehq_.swift:13:28: error: value of type 'Int' has no member\
    \ 'digits'\n        let num1Sum = num1.digits.reduce(0, +)\n                 \
    \     ~~~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824800
- exit_code: 1
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    var result: [Int] = []\n    var dict: [Int: Int] = [:]\n    for (index, num)\
    \ in nums.enumerated() {\n        let sum = sum_of_digits(num: num)\n        if\
    \ dict[sum] == nil {\n            dict[sum] = index\n        } else {\n      \
    \      if nums[dict[sum]!] > num {\n                dict[sum] = index\n      \
    \      }\n        }\n    }\n    let sortedKeys = dict.keys.sorted()\n    for key\
    \ in sortedKeys {\n        result.append(nums[dict[key]!])\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(order_by_points(nums:\
    \ [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums:\
    \ [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2,\
    \ 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpg3eliw84.swift:15:19: error: cannot find 'sum_of_digits' in scope\n\
    \        let sum = sum_of_digits(num: num)\n                  ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824800
- exit_code: 1
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    var dict = [Int: Int]()\n    for (index, num) in nums.enumerated() {\n  \
    \      dict[num] = sum_of_digits(num: num)\n    }\n    return nums.sorted { dict[$0]!\
    \ < dict[$1]! }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(order_by_points(nums:\
    \ [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums:\
    \ [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2,\
    \ 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpdpvh7ux3.swift:14:21: error: cannot find 'sum_of_digits' in scope\n\
    \        dict[num] = sum_of_digits(num: num)\n                    ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824800
- exit_code: 1
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    return nums.sorted { (a, b) -> Bool in\n        let aSum = a.digits.reduce(0,\
    \ +)\n        let bSum = b.digits.reduce(0, +)\n        return aSum < bSum\n \
    \   }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(order_by_points(nums: [1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums: [1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpdsme7rpy.swift:13:22: error: value of type 'Int' has no member\
    \ 'digits'\n        let aSum = a.digits.reduce(0, +)\n                   ~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824799
- exit_code: 1
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    var result = nums\n    result.sort { (a, b) -> Bool in\n        let aSum\
    \ = a.digits.reduce(0, +)\n        let bSum = b.digits.reduce(0, +)\n        return\
    \ aSum < bSum\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\n\
    assert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as [Int])\nassert(order_by_points(nums:\
    \ [1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpz7d0i5gb.swift:14:22: error: value of type 'Int' has no member\
    \ 'digits'\n        let aSum = a.digits.reduce(0, +)\n                   ~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824799
- exit_code: 1
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    return nums.sorted { (a, b) -> Bool in\n        let aSum = a.digits.reduce(0,\
    \ +)\n        let bSum = b.digits.reduce(0, +)\n        return aSum < bSum\n \
    \   }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(order_by_points(nums: [1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums: [1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpdsme7rpy.swift:13:22: error: value of type 'Int' has no member\
    \ 'digits'\n        let aSum = a.digits.reduce(0, +)\n                   ~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824799
- exit_code: 1
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    return nums.sorted { (num1, num2) -> Bool in\n        let num1Sum = num1.digits.reduce(0,\
    \ +)\n        let num2Sum = num2.digits.reduce(0, +)\n        return num1Sum <\
    \ num2Sum\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(order_by_points(nums:\
    \ [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums:\
    \ [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2,\
    \ 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmp0w98ehq_.swift:13:28: error: value of type 'Int' has no member\
    \ 'digits'\n        let num1Sum = num1.digits.reduce(0, +)\n                 \
    \     ~~~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824800
- exit_code: 1
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    return nums.sorted { (lhs, rhs) -> Bool in\n        let lhsSum = lhs.digits.reduce(0,\
    \ +)\n        let rhsSum = rhs.digits.reduce(0, +)\n        return lhsSum < rhsSum\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(order_by_points(nums: [1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums: [1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmp90lvsi66.swift:13:26: error: value of type 'Int' has no member\
    \ 'digits'\n        let lhsSum = lhs.digits.reduce(0, +)\n                   \
    \  ~~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824799
- exit_code: 1
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    return nums.sorted { (a, b) -> Bool in\n        let aSum = a.digits.reduce(0,\
    \ +)\n        let bSum = b.digits.reduce(0, +)\n        return aSum < bSum\n \
    \   }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(order_by_points(nums: [1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums: [1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpdsme7rpy.swift:13:22: error: value of type 'Int' has no member\
    \ 'digits'\n        let aSum = a.digits.reduce(0, +)\n                   ~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824799
- exit_code: 1
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    return nums.sorted {\n        let a = $0.digits.reduce(0, +)\n        let\
    \ b = $1.digits.reduce(0, +)\n        return a == b ? $0 < $1 : a < b\n    }\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) ==\
    \ [-1, -11, 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2,\
    \ 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int])\
    \ == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2,\
    \ -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmp7lao_mug.swift:13:20: error: value of type 'Int' has no member\
    \ 'digits'\n        let a = $0.digits.reduce(0, +)\n                ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824800
- exit_code: 1
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    return nums.sorted { (lhs, rhs) -> Bool in\n        let lhsSum = lhs.digits.reduce(0,\
    \ +)\n        let rhsSum = rhs.digits.reduce(0, +)\n        return lhsSum < rhsSum\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(order_by_points(nums: [1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums: [1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmp90lvsi66.swift:13:26: error: value of type 'Int' has no member\
    \ 'digits'\n        let lhsSum = lhs.digits.reduce(0, +)\n                   \
    \  ~~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824799
- exit_code: 1
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    return nums.sorted { (a, b) -> Bool in\n        let aSum = a.digits.reduce(0,\
    \ +)\n        let bSum = b.digits.reduce(0, +)\n        return aSum == bSum ?\
    \ a < b : aSum < bSum\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(order_by_points(nums:\
    \ [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums:\
    \ [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2,\
    \ 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmp9yek2hhf.swift:13:22: error: value of type 'Int' has no member\
    \ 'digits'\n        let aSum = a.digits.reduce(0, +)\n                   ~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824799
- exit_code: 1
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    return nums.sorted { (a, b) -> Bool in\n        let sumA = a.digits.reduce(0,\
    \ +)\n        let sumB = b.digits.reduce(0, +)\n        return sumA < sumB\n \
    \   }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(order_by_points(nums: [1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums: [1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpogvzywjo.swift:13:22: error: value of type 'Int' has no member\
    \ 'digits'\n        let sumA = a.digits.reduce(0, +)\n                   ~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824800
- exit_code: -4
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    return nums.sorted { (lhs, rhs) -> Bool in\n        var lhsSum = 0\n    \
    \    var rhsSum = 0\n        for char in String(lhs) {\n            lhsSum +=\
    \ Int(String(char))!\n        }\n        for char in String(rhs) {\n         \
    \   rhsSum += Int(String(char))!\n        }\n        return lhsSum < rhsSum\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(order_by_points(nums: [1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums: [1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: Exception
  stderr: 'tmpp10j8hmw/tmpp10j8hmw.swift:16: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002b3723d5ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3723a55561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b3723a55286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b3723a5513c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b3723a54bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpp10j8hmw                        0x0000561b7f0f52b5 <unavailable> + 8885

    6    libswiftCore.so                    0x00002b3723b76c90 MutableCollection<>._insertionSort(within:sortedEnd:by:)
    + 770

    7    libswiftCore.so                    0x00002b3723b77110 MutableCollection<>._insertionSort(within:by:)
    + 356

    8    libswiftCore.so                    0x00002b3723b75d30 UnsafeMutableBufferPointer._stableSortImpl(by:)
    + 319

    9    libswiftCore.so                    0x00002b3723b75d15 <unavailable> + 2616597

    10   libswiftCore.so                    0x00002b3723c9b65a <unavailable> + 3819098

    11   libswiftCore.so                    0x00002b3723a8a720 ContiguousArray.withContiguousMutableStorageIfAvailable<A>(_:)
    + 130

    12   libswiftCore.so                    0x00002b3723a8a70f <unavailable> + 1652495

    13   libswiftCore.so                    0x00002b3723b75460 MutableCollection<>.sort(by:)
    + 771

    14   libswiftCore.so                    0x00002b3723b75370 Sequence.sorted(by:)
    + 193

    15   tmpp10j8hmw                        0x0000561b7f0f4fc0 <unavailable> + 8128

    16   tmpp10j8hmw                        0x0000561b7f0f4674 <unavailable> + 5748

    17   libc.so.6                          0x00002b3723f4a460 __libc_start_main +
    245

    18   tmpp10j8hmw                        0x0000561b7f0f4349 <unavailable> + 4937

    '
  stdout: ''
  timestamp: 1659824800
- exit_code: 1
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    return nums.sorted { (a, b) -> Bool in\n        let aSum = a.digits.reduce(0,\
    \ +)\n        let bSum = b.digits.reduce(0, +)\n        return aSum < bSum\n \
    \   }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(order_by_points(nums: [1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums: [1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpdsme7rpy.swift:13:22: error: value of type 'Int' has no member\
    \ 'digits'\n        let aSum = a.digits.reduce(0, +)\n                   ~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824799
- exit_code: 1
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    return nums.sorted {\n        let sum1 = $0.digits.reduce(0, +)\n       \
    \ let sum2 = $1.digits.reduce(0, +)\n        return sum1 == sum2 ? $0 < $1 : sum1\
    \ < sum2\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(order_by_points(nums:\
    \ [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums:\
    \ [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2,\
    \ 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpsu_zmzop.swift:13:23: error: value of type 'Int' has no member\
    \ 'digits'\n        let sum1 = $0.digits.reduce(0, +)\n                   ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824799
- exit_code: 1
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    return nums.sorted { (a, b) -> Bool in\n        let aSum = a.digits.reduce(0,\
    \ +)\n        let bSum = b.digits.reduce(0, +)\n        return aSum < bSum\n \
    \   }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(order_by_points(nums: [1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums: [1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpdsme7rpy.swift:13:22: error: value of type 'Int' has no member\
    \ 'digits'\n        let aSum = a.digits.reduce(0, +)\n                   ~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824799
- exit_code: 1
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    return nums.sorted { (a, b) -> Bool in\n        let aSum = a.digits.reduce(0,\
    \ +)\n        let bSum = b.digits.reduce(0, +)\n        return aSum < bSum\n \
    \   }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(order_by_points(nums: [1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums: [1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpdsme7rpy.swift:13:22: error: value of type 'Int' has no member\
    \ 'digits'\n        let aSum = a.digits.reduce(0, +)\n                   ~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824799
- exit_code: 1
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    return nums.sorted { (a, b) -> Bool in\n        let aSum = a.digits.reduce(0,\
    \ +)\n        let bSum = b.digits.reduce(0, +)\n        return aSum == bSum ?\
    \ a < b : aSum < bSum\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(order_by_points(nums:\
    \ [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums:\
    \ [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2,\
    \ 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmp9yek2hhf.swift:13:22: error: value of type 'Int' has no member\
    \ 'digits'\n        let aSum = a.digits.reduce(0, +)\n                   ~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824799
- exit_code: 1
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    return nums.sorted { (a, b) -> Bool in\n        let aSum = a.digits.reduce(0,\
    \ +)\n        let bSum = b.digits.reduce(0, +)\n        return aSum == bSum ?\
    \ a < b : aSum < bSum\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(order_by_points(nums:\
    \ [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums:\
    \ [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2,\
    \ 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmp9yek2hhf.swift:13:22: error: value of type 'Int' has no member\
    \ 'digits'\n        let aSum = a.digits.reduce(0, +)\n                   ~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824799
- exit_code: 1
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    return nums.sorted { (a, b) -> Bool in\n        let aSum = a.digits.reduce(0,\
    \ +)\n        let bSum = b.digits.reduce(0, +)\n        return aSum < bSum\n \
    \   }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(order_by_points(nums: [1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums: [1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpdsme7rpy.swift:13:22: error: value of type 'Int' has no member\
    \ 'digits'\n        let aSum = a.digits.reduce(0, +)\n                   ~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824799
- exit_code: 1
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    return nums.sorted { (a, b) -> Bool in\n        let aSum = a.digits.reduce(0,\
    \ +)\n        let bSum = b.digits.reduce(0, +)\n        return aSum < bSum\n \
    \   }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(order_by_points(nums: [1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums: [1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpdsme7rpy.swift:13:22: error: value of type 'Int' has no member\
    \ 'digits'\n        let aSum = a.digits.reduce(0, +)\n                   ~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824799
- exit_code: 1
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    return nums.sorted { (a, b) -> Bool in\n        let aSum = a.digits.reduce(0,\
    \ +)\n        let bSum = b.digits.reduce(0, +)\n        return aSum < bSum\n \
    \   }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(order_by_points(nums: [1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums: [1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpdsme7rpy.swift:13:22: error: value of type 'Int' has no member\
    \ 'digits'\n        let aSum = a.digits.reduce(0, +)\n                   ~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824799
- exit_code: 1
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    return nums.sorted { (a, b) -> Bool in\n        let aSum = a.digits.reduce(0,\
    \ +)\n        let bSum = b.digits.reduce(0, +)\n        return aSum == bSum ?\
    \ a < b : aSum < bSum\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(order_by_points(nums:\
    \ [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums:\
    \ [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2,\
    \ 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmp9yek2hhf.swift:13:22: error: value of type 'Int' has no member\
    \ 'digits'\n        let aSum = a.digits.reduce(0, +)\n                   ~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824799
- exit_code: 1
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    return nums.sorted { (a, b) -> Bool in\n        let aSum = a.digits.reduce(0,\
    \ +)\n        let bSum = b.digits.reduce(0, +)\n        return aSum < bSum\n \
    \   }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(order_by_points(nums: [1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums: [1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpdsme7rpy.swift:13:22: error: value of type 'Int' has no member\
    \ 'digits'\n        let aSum = a.digits.reduce(0, +)\n                   ~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824799
- exit_code: 1
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    return nums.sorted { (a, b) -> Bool in\n        if a.digitSum() == b.digitSum()\
    \ {\n            return a < b\n        }\n        return a.digitSum() < b.digitSum()\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(order_by_points(nums: [1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums: [1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmp1xke7tgn.swift:13:14: error: value of type 'Int' has no member\
    \ 'digitSum'\n        if a.digitSum() == b.digitSum() {\n           ~ ^~~~~~~~\n\
    /tmp/tmp1xke7tgn.swift:13:30: error: value of type 'Int' has no member 'digitSum'\n\
    \        if a.digitSum() == b.digitSum() {\n                           ~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824800
- exit_code: 1
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    return nums.sorted { (a, b) -> Bool in\n        let aSum = a.digits.reduce(0,\
    \ +)\n        let bSum = b.digits.reduce(0, +)\n        return aSum < bSum\n \
    \   }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(order_by_points(nums: [1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums: [1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpdsme7rpy.swift:13:22: error: value of type 'Int' has no member\
    \ 'digits'\n        let aSum = a.digits.reduce(0, +)\n                   ~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824799
- exit_code: 1
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    return nums.sorted { (a, b) -> Bool in\n        let aSum = sum_of_digits(num:\
    \ a)\n        let bSum = sum_of_digits(num: b)\n        if aSum == bSum {\n  \
    \          return a < b\n        }\n        return aSum < bSum\n    }\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) ==\
    \ [-1, -11, 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2,\
    \ 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int])\
    \ == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2,\
    \ -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpd555v6cu.swift:13:20: error: cannot find 'sum_of_digits' in scope\n\
    \        let aSum = sum_of_digits(num: a)\n                   ^~~~~~~~~~~~~\n\
    /tmp/tmpd555v6cu.swift:14:20: error: cannot find 'sum_of_digits' in scope\n  \
    \      let bSum = sum_of_digits(num: b)\n                   ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824800
- exit_code: 1
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    return nums.sorted {\n        if sum_of_digits(num: $0) == sum_of_digits(num:\
    \ $1) {\n            return nums.firstIndex(of: $0)! < nums.firstIndex(of: $1)!\n\
    \        }\n        return sum_of_digits(num: $0) < sum_of_digits(num: $1)\n \
    \   }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(order_by_points(nums: [1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums: [1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmprkn9bchv.swift:13:12: error: cannot find 'sum_of_digits' in scope\n\
    \        if sum_of_digits(num: $0) == sum_of_digits(num: $1) {\n           ^~~~~~~~~~~~~\n\
    /tmp/tmprkn9bchv.swift:13:38: error: cannot find 'sum_of_digits' in scope\n  \
    \      if sum_of_digits(num: $0) == sum_of_digits(num: $1) {\n               \
    \                      ^~~~~~~~~~~~~\n/tmp/tmprkn9bchv.swift:16:16: error: cannot\
    \ find 'sum_of_digits' in scope\n        return sum_of_digits(num: $0) < sum_of_digits(num:\
    \ $1)\n               ^~~~~~~~~~~~~\n/tmp/tmprkn9bchv.swift:16:41: error: cannot\
    \ find 'sum_of_digits' in scope\n        return sum_of_digits(num: $0) < sum_of_digits(num:\
    \ $1)\n                                        ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824800
- exit_code: 1
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    return nums.sorted { (lhs, rhs) -> Bool in\n        let lhsSum = lhs.digits.reduce(0,\
    \ +)\n        let rhsSum = rhs.digits.reduce(0, +)\n        return lhsSum < rhsSum\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(order_by_points(nums: [1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums: [1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmp90lvsi66.swift:13:26: error: value of type 'Int' has no member\
    \ 'digits'\n        let lhsSum = lhs.digits.reduce(0, +)\n                   \
    \  ~~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824799
- exit_code: 1
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    return nums.sorted(by: {\n        let sum1 = sum_of_digits(num: $0)\n   \
    \     let sum2 = sum_of_digits(num: $1)\n        if sum1 == sum2 {\n         \
    \   return nums.firstIndex(of: $0)! < nums.firstIndex(of: $1)!\n        }\n  \
    \      return sum1 < sum2\n    })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(order_by_points(nums:\
    \ [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums:\
    \ [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2,\
    \ 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpqis1i4vq.swift:13:20: error: cannot find 'sum_of_digits' in scope\n\
    \        let sum1 = sum_of_digits(num: $0)\n                   ^~~~~~~~~~~~~\n\
    /tmp/tmpqis1i4vq.swift:14:20: error: cannot find 'sum_of_digits' in scope\n  \
    \      let sum2 = sum_of_digits(num: $1)\n                   ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824800
- exit_code: -4
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    return nums.sorted { (a, b) -> Bool in\n        let aSum = String(a).map\
    \ { Int(String($0))! }.reduce(0, +)\n        let bSum = String(b).map { Int(String($0))!\
    \ }.reduce(0, +)\n        return aSum < bSum\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as\
    \ [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2, -3]) == [-3,\
    \ -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: Exception
  stderr: 'tmpkw1wpe01/tmpkw1wpe01.swift:13: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002b7d783b1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7d780a8561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b7d780a8286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b7d780a813c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b7d780a7bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpkw1wpe01                        0x000055d0a35eb4f1 <unavailable> + 9457

    6    libswiftCore.so                    0x00002b7d78090820 Collection.map<A>(_:)
    + 426

    7    tmpkw1wpe01                        0x000055d0a35eb131 <unavailable> + 8497

    8    libswiftCore.so                    0x00002b7d781c9c90 MutableCollection<>._insertionSort(within:sortedEnd:by:)
    + 770

    9    libswiftCore.so                    0x00002b7d781ca110 MutableCollection<>._insertionSort(within:by:)
    + 356

    10   libswiftCore.so                    0x00002b7d781c8d30 UnsafeMutableBufferPointer._stableSortImpl(by:)
    + 319

    11   libswiftCore.so                    0x00002b7d781c8d15 <unavailable> + 2616597

    12   libswiftCore.so                    0x00002b7d782ee65a <unavailable> + 3819098

    13   libswiftCore.so                    0x00002b7d780dd720 ContiguousArray.withContiguousMutableStorageIfAvailable<A>(_:)
    + 130

    14   libswiftCore.so                    0x00002b7d780dd70f <unavailable> + 1652495

    15   libswiftCore.so                    0x00002b7d781c8460 MutableCollection<>.sort(by:)
    + 771

    16   libswiftCore.so                    0x00002b7d781c8370 Sequence.sorted(by:)
    + 193

    17   tmpkw1wpe01                        0x000055d0a35eb060 <unavailable> + 8288

    18   tmpkw1wpe01                        0x000055d0a35ea714 <unavailable> + 5908

    19   libc.so.6                          0x00002b7d7859d460 __libc_start_main +
    245

    20   tmpkw1wpe01                        0x000055d0a35ea3e9 <unavailable'
  stdout: ''
  timestamp: 1659824800
- exit_code: -4
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    return nums.sorted { (a, b) -> Bool in\n        let aSum = String(a).reduce(0)\
    \ { $0 + Int(String($1))! }\n        let bSum = String(b).reduce(0) { $0 + Int(String($1))!\
    \ }\n        return aSum < bSum\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\n\
    assert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as [Int])\nassert(order_by_points(nums:\
    \ [1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: Exception
  stderr: 'tmpdf_hl_00/tmpdf_hl_00.swift:13: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002b05782f1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0577fe8561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b0577fe8286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b0577fe813c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b0577fe7bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpdf_hl_00                        0x0000559aecb842fa <unavailable> + 8954

    6    libswiftCore.so                    0x00002b05780f7410 Sequence.reduce<A>(_:_:)
    + 530

    7    tmpdf_hl_00                        0x0000559aecb840d3 <unavailable> + 8403

    8    libswiftCore.so                    0x00002b0578109c90 MutableCollection<>._insertionSort(within:sortedEnd:by:)
    + 770

    9    libswiftCore.so                    0x00002b057810a110 MutableCollection<>._insertionSort(within:by:)
    + 356

    10   libswiftCore.so                    0x00002b0578108d30 UnsafeMutableBufferPointer._stableSortImpl(by:)
    + 319

    11   libswiftCore.so                    0x00002b0578108d15 <unavailable> + 2616597

    12   libswiftCore.so                    0x00002b057822e65a <unavailable> + 3819098

    13   libswiftCore.so                    0x00002b057801d720 ContiguousArray.withContiguousMutableStorageIfAvailable<A>(_:)
    + 130

    14   libswiftCore.so                    0x00002b057801d70f <unavailable> + 1652495

    15   libswiftCore.so                    0x00002b0578108460 MutableCollection<>.sort(by:)
    + 771

    16   libswiftCore.so                    0x00002b0578108370 Sequence.sorted(by:)
    + 193

    17   tmpdf_hl_00                        0x0000559aecb84000 <unavailable> + 8192

    18   tmpdf_hl_00                        0x0000559aecb836b4 <unavailable> + 5812

    19   libc.so.6                          0x00002b05784dd460 __libc_start_main +
    245

    20   tmpdf_hl_00                        0x0000559aecb83389 <unavaila'
  stdout: ''
  timestamp: 1659824800
- exit_code: 1
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    return nums.sorted(by: { (a, b) -> Bool in\n        let aSum = a.digits.reduce(0,\
    \ +)\n        let bSum = b.digits.reduce(0, +)\n        return aSum == bSum ?\
    \ a < b : aSum < bSum\n    })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(order_by_points(nums:\
    \ [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums:\
    \ [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2,\
    \ 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpa70bob7d.swift:13:22: error: value of type 'Int' has no member\
    \ 'digits'\n        let aSum = a.digits.reduce(0, +)\n                   ~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824800
- exit_code: 1
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    return nums.sorted { (lhs, rhs) -> Bool in\n        let lhsSum = lhs.digits.reduce(0,\
    \ +)\n        let rhsSum = rhs.digits.reduce(0, +)\n        return lhsSum == rhsSum\
    \ ? lhs < rhs : lhsSum < rhsSum\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\n\
    assert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as [Int])\nassert(order_by_points(nums:\
    \ [1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmp0pn8lysd.swift:13:26: error: value of type 'Int' has no member\
    \ 'digits'\n        let lhsSum = lhs.digits.reduce(0, +)\n                   \
    \  ~~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824799
- exit_code: 1
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    return nums.sorted { (a, b) -> Bool in\n        let aSum = a.digits.reduce(0,\
    \ +)\n        let bSum = b.digits.reduce(0, +)\n        return aSum < bSum\n \
    \   }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(order_by_points(nums: [1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums: [1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpdsme7rpy.swift:13:22: error: value of type 'Int' has no member\
    \ 'digits'\n        let aSum = a.digits.reduce(0, +)\n                   ~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824799
- exit_code: 1
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    return nums.sorted { (a, b) -> Bool in\n        let aSum = a.digits.reduce(0,\
    \ +)\n        let bSum = b.digits.reduce(0, +)\n        return aSum == bSum ?\
    \ a < b : aSum < bSum\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(order_by_points(nums:\
    \ [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums:\
    \ [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2,\
    \ 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmp9yek2hhf.swift:13:22: error: value of type 'Int' has no member\
    \ 'digits'\n        let aSum = a.digits.reduce(0, +)\n                   ~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824799
- exit_code: 1
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    return nums.sorted { (lhs, rhs) -> Bool in\n        let lhsSum = lhs.digits.reduce(0,\
    \ +)\n        let rhsSum = rhs.digits.reduce(0, +)\n        return lhsSum < rhsSum\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(order_by_points(nums: [1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums: [1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmp90lvsi66.swift:13:26: error: value of type 'Int' has no member\
    \ 'digits'\n        let lhsSum = lhs.digits.reduce(0, +)\n                   \
    \  ~~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824799
- exit_code: 1
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    return nums.sorted { (a, b) -> Bool in\n        let aSum = a.digits.reduce(0,\
    \ +)\n        let bSum = b.digits.reduce(0, +)\n        return aSum < bSum\n \
    \   }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(order_by_points(nums: [1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums: [1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpdsme7rpy.swift:13:22: error: value of type 'Int' has no member\
    \ 'digits'\n        let aSum = a.digits.reduce(0, +)\n                   ~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824799
- exit_code: 1
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    return nums.sorted { (a, b) -> Bool in\n        let aSum = a.digits.reduce(0,\
    \ +)\n        let bSum = b.digits.reduce(0, +)\n        return aSum < bSum\n \
    \   }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(order_by_points(nums: [1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums: [1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpdsme7rpy.swift:13:22: error: value of type 'Int' has no member\
    \ 'digits'\n        let aSum = a.digits.reduce(0, +)\n                   ~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824799
- exit_code: 1
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    return nums.sorted { (a, b) -> Bool in\n        let aSum = a.digits.reduce(0,\
    \ +)\n        let bSum = b.digits.reduce(0, +)\n        return aSum < bSum\n \
    \   }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(order_by_points(nums: [1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums: [1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpdsme7rpy.swift:13:22: error: value of type 'Int' has no member\
    \ 'digits'\n        let aSum = a.digits.reduce(0, +)\n                   ~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824799
- exit_code: 1
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    return nums.sorted { (a, b) -> Bool in\n        let aSum = a.digits.reduce(0,\
    \ +)\n        let bSum = b.digits.reduce(0, +)\n        return aSum < bSum\n \
    \   }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(order_by_points(nums: [1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums: [1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpdsme7rpy.swift:13:22: error: value of type 'Int' has no member\
    \ 'digits'\n        let aSum = a.digits.reduce(0, +)\n                   ~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824799
- exit_code: 1
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    return nums.sorted { (num1, num2) -> Bool in\n        let sum1 = sum_of_digits(num:\
    \ num1)\n        let sum2 = sum_of_digits(num: num2)\n        if sum1 == sum2\
    \ {\n            return nums.firstIndex(of: num1)! < nums.firstIndex(of: num2)!\n\
    \        }\n        return sum1 < sum2\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46,\
    \ 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as [Int])\n\
    assert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98,\
    \ -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpgppesfop.swift:13:20: error: cannot find 'sum_of_digits' in scope\n\
    \        let sum1 = sum_of_digits(num: num1)\n                   ^~~~~~~~~~~~~\n\
    /tmp/tmpgppesfop.swift:14:20: error: cannot find 'sum_of_digits' in scope\n  \
    \      let sum2 = sum_of_digits(num: num2)\n                   ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824800
- exit_code: 1
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    return nums.sorted { (a, b) -> Bool in\n        let aSum = a.digits.reduce(0,\
    \ +)\n        let bSum = b.digits.reduce(0, +)\n        return aSum == bSum ?\
    \ a < b : aSum < bSum\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(order_by_points(nums:\
    \ [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums:\
    \ [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2,\
    \ 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmp9yek2hhf.swift:13:22: error: value of type 'Int' has no member\
    \ 'digits'\n        let aSum = a.digits.reduce(0, +)\n                   ~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824799
- exit_code: 1
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    return nums.sorted { (a, b) -> Bool in\n        let aSum = a.digits.reduce(0,\
    \ +)\n        let bSum = b.digits.reduce(0, +)\n        return aSum < bSum\n \
    \   }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(order_by_points(nums: [1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums: [1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpdsme7rpy.swift:13:22: error: value of type 'Int' has no member\
    \ 'digits'\n        let aSum = a.digits.reduce(0, +)\n                   ~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824799
- exit_code: 1
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    return nums.sorted { (a, b) -> Bool in\n        let aSum = a.digits.reduce(0,\
    \ +)\n        let bSum = b.digits.reduce(0, +)\n        return aSum < bSum\n \
    \   }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(order_by_points(nums: [1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums: [1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpdsme7rpy.swift:13:22: error: value of type 'Int' has no member\
    \ 'digits'\n        let aSum = a.digits.reduce(0, +)\n                   ~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824799
- exit_code: -4
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    return nums.sorted { (a, b) -> Bool in\n        let aSum = String(a).map\
    \ { Int(String($0))! }.reduce(0, +)\n        let bSum = String(b).map { Int(String($0))!\
    \ }.reduce(0, +)\n        return aSum < bSum\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as\
    \ [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2, -3]) == [-3,\
    \ -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: Exception
  stderr: 'tmpkw1wpe01/tmpkw1wpe01.swift:13: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002b7d783b1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7d780a8561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b7d780a8286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b7d780a813c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b7d780a7bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpkw1wpe01                        0x000055d0a35eb4f1 <unavailable> + 9457

    6    libswiftCore.so                    0x00002b7d78090820 Collection.map<A>(_:)
    + 426

    7    tmpkw1wpe01                        0x000055d0a35eb131 <unavailable> + 8497

    8    libswiftCore.so                    0x00002b7d781c9c90 MutableCollection<>._insertionSort(within:sortedEnd:by:)
    + 770

    9    libswiftCore.so                    0x00002b7d781ca110 MutableCollection<>._insertionSort(within:by:)
    + 356

    10   libswiftCore.so                    0x00002b7d781c8d30 UnsafeMutableBufferPointer._stableSortImpl(by:)
    + 319

    11   libswiftCore.so                    0x00002b7d781c8d15 <unavailable> + 2616597

    12   libswiftCore.so                    0x00002b7d782ee65a <unavailable> + 3819098

    13   libswiftCore.so                    0x00002b7d780dd720 ContiguousArray.withContiguousMutableStorageIfAvailable<A>(_:)
    + 130

    14   libswiftCore.so                    0x00002b7d780dd70f <unavailable> + 1652495

    15   libswiftCore.so                    0x00002b7d781c8460 MutableCollection<>.sort(by:)
    + 771

    16   libswiftCore.so                    0x00002b7d781c8370 Sequence.sorted(by:)
    + 193

    17   tmpkw1wpe01                        0x000055d0a35eb060 <unavailable> + 8288

    18   tmpkw1wpe01                        0x000055d0a35ea714 <unavailable> + 5908

    19   libc.so.6                          0x00002b7d7859d460 __libc_start_main +
    245

    20   tmpkw1wpe01                        0x000055d0a35ea3e9 <unavailable'
  stdout: ''
  timestamp: 1659824800
- exit_code: 1
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    var result: [Int] = []\n    var dict: [Int: [Int]] = [:]\n    for num in\
    \ nums {\n        let sum = num.digits.reduce(0, +)\n        if dict[sum] == nil\
    \ {\n            dict[sum] = [num]\n        } else {\n            dict[sum]?.append(num)\n\
    \        }\n    }\n    let sortedKeys = dict.keys.sorted()\n    for key in sortedKeys\
    \ {\n        result.append(contentsOf: dict[key]!)\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) ==\
    \ [-1, -11, 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2,\
    \ 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int])\
    \ == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2,\
    \ -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpi5lmnnv5.swift:15:23: error: value of type 'Int' has no member\
    \ 'digits'\n        let sum = num.digits.reduce(0, +)\n                  ~~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824800
- exit_code: 1
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    return nums.sorted(by: {\n        let a = $0.digits.reduce(0, +)\n      \
    \  let b = $1.digits.reduce(0, +)\n        return a < b\n    })\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as\
    \ [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2, -3]) == [-3,\
    \ -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpb318fg4d.swift:13:20: error: value of type 'Int' has no member\
    \ 'digits'\n        let a = $0.digits.reduce(0, +)\n                ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824800
- exit_code: 1
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    return nums.sorted { (a, b) -> Bool in\n        let aSum = a.digits.reduce(0,\
    \ +)\n        let bSum = b.digits.reduce(0, +)\n        return aSum < bSum\n \
    \   }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(order_by_points(nums: [1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums: [1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpdsme7rpy.swift:13:22: error: value of type 'Int' has no member\
    \ 'digits'\n        let aSum = a.digits.reduce(0, +)\n                   ~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824799
- exit_code: 1
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    return nums.sorted {\n        let sum1 = $0.digits.reduce(0, +)\n       \
    \ let sum2 = $1.digits.reduce(0, +)\n        return sum1 == sum2 ? $0 < $1 : sum1\
    \ < sum2\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(order_by_points(nums:\
    \ [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums:\
    \ [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2,\
    \ 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpsu_zmzop.swift:13:23: error: value of type 'Int' has no member\
    \ 'digits'\n        let sum1 = $0.digits.reduce(0, +)\n                   ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824799
- exit_code: 1
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    return nums.sorted(by: { sum_of_digits(num: $0) < sum_of_digits(num: $1)\
    \ })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(order_by_points(nums: [1, 11,\
    \ -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums: [1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpiojkrsym.swift:12:30: error: cannot find 'sum_of_digits' in scope\n\
    \    return nums.sorted(by: { sum_of_digits(num: $0) < sum_of_digits(num: $1)\
    \ })\n                             ^~~~~~~~~~~~~\n/tmp/tmpiojkrsym.swift:12:55:\
    \ error: cannot find 'sum_of_digits' in scope\n    return nums.sorted(by: { sum_of_digits(num:\
    \ $0) < sum_of_digits(num: $1) })\n                                          \
    \            ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824800
- exit_code: 1
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    return nums.sorted { (a, b) -> Bool in\n        let aSum = a.digits.reduce(0,\
    \ +)\n        let bSum = b.digits.reduce(0, +)\n        return aSum < bSum\n \
    \   }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(order_by_points(nums: [1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums: [1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpdsme7rpy.swift:13:22: error: value of type 'Int' has no member\
    \ 'digits'\n        let aSum = a.digits.reduce(0, +)\n                   ~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824799
- exit_code: 1
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    return nums.sorted {\n        let sum1 = $0.digits.reduce(0, +)\n       \
    \ let sum2 = $1.digits.reduce(0, +)\n        if sum1 == sum2 {\n            return\
    \ nums.firstIndex(of: $0)! < nums.firstIndex(of: $1)!\n        }\n        return\
    \ sum1 < sum2\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(order_by_points(nums:\
    \ [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums:\
    \ [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2,\
    \ 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmp2x4agutc.swift:13:23: error: value of type 'Int' has no member\
    \ 'digits'\n        let sum1 = $0.digits.reduce(0, +)\n                   ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824799
- exit_code: 1
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    return nums.sorted { (a, b) -> Bool in\n        let aSum = a.digits.reduce(0,\
    \ +)\n        let bSum = b.digits.reduce(0, +)\n        return aSum < bSum\n \
    \   }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(order_by_points(nums: [1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums: [1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpdsme7rpy.swift:13:22: error: value of type 'Int' has no member\
    \ 'digits'\n        let aSum = a.digits.reduce(0, +)\n                   ~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824799
- exit_code: 1
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    return nums.sorted { (a, b) -> Bool in\n        let aSum = a.digits.reduce(0,\
    \ +)\n        let bSum = b.digits.reduce(0, +)\n        return aSum < bSum\n \
    \   }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(order_by_points(nums: [1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums: [1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpdsme7rpy.swift:13:22: error: value of type 'Int' has no member\
    \ 'digits'\n        let aSum = a.digits.reduce(0, +)\n                   ~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824799
- exit_code: 1
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    return nums.sorted { (a, b) -> Bool in\n        let aSum = a.digits.reduce(0,\
    \ +)\n        let bSum = b.digits.reduce(0, +)\n        return aSum < bSum\n \
    \   }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(order_by_points(nums: [1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums: [1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpdsme7rpy.swift:13:22: error: value of type 'Int' has no member\
    \ 'digits'\n        let aSum = a.digits.reduce(0, +)\n                   ~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824799
- exit_code: 1
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    return nums.sorted { (lhs, rhs) -> Bool in\n        let lhsSum = lhs.digits.reduce(0,\
    \ +)\n        let rhsSum = rhs.digits.reduce(0, +)\n        return lhsSum == rhsSum\
    \ ? lhs < rhs : lhsSum < rhsSum\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\n\
    assert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as [Int])\nassert(order_by_points(nums:\
    \ [1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmp0pn8lysd.swift:13:26: error: value of type 'Int' has no member\
    \ 'digits'\n        let lhsSum = lhs.digits.reduce(0, +)\n                   \
    \  ~~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824799
- exit_code: -4
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    return nums.sorted { (a, b) -> Bool in\n        let aSum = String(a).reduce(0)\
    \ { $0 + Int(String($1))! }\n        let bSum = String(b).reduce(0) { $0 + Int(String($1))!\
    \ }\n        return aSum < bSum\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\n\
    assert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as [Int])\nassert(order_by_points(nums:\
    \ [1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: Exception
  stderr: 'tmpdf_hl_00/tmpdf_hl_00.swift:13: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002b05782f1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0577fe8561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b0577fe8286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b0577fe813c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b0577fe7bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpdf_hl_00                        0x0000559aecb842fa <unavailable> + 8954

    6    libswiftCore.so                    0x00002b05780f7410 Sequence.reduce<A>(_:_:)
    + 530

    7    tmpdf_hl_00                        0x0000559aecb840d3 <unavailable> + 8403

    8    libswiftCore.so                    0x00002b0578109c90 MutableCollection<>._insertionSort(within:sortedEnd:by:)
    + 770

    9    libswiftCore.so                    0x00002b057810a110 MutableCollection<>._insertionSort(within:by:)
    + 356

    10   libswiftCore.so                    0x00002b0578108d30 UnsafeMutableBufferPointer._stableSortImpl(by:)
    + 319

    11   libswiftCore.so                    0x00002b0578108d15 <unavailable> + 2616597

    12   libswiftCore.so                    0x00002b057822e65a <unavailable> + 3819098

    13   libswiftCore.so                    0x00002b057801d720 ContiguousArray.withContiguousMutableStorageIfAvailable<A>(_:)
    + 130

    14   libswiftCore.so                    0x00002b057801d70f <unavailable> + 1652495

    15   libswiftCore.so                    0x00002b0578108460 MutableCollection<>.sort(by:)
    + 771

    16   libswiftCore.so                    0x00002b0578108370 Sequence.sorted(by:)
    + 193

    17   tmpdf_hl_00                        0x0000559aecb84000 <unavailable> + 8192

    18   tmpdf_hl_00                        0x0000559aecb836b4 <unavailable> + 5812

    19   libc.so.6                          0x00002b05784dd460 __libc_start_main +
    245

    20   tmpdf_hl_00                        0x0000559aecb83389 <unavaila'
  stdout: ''
  timestamp: 1659824800
- exit_code: 1
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    return nums.sorted { (a, b) -> Bool in\n        let aSum = a.digits.reduce(0,\
    \ +)\n        let bSum = b.digits.reduce(0, +)\n        return aSum < bSum\n \
    \   }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(order_by_points(nums: [1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums: [1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpdsme7rpy.swift:13:22: error: value of type 'Int' has no member\
    \ 'digits'\n        let aSum = a.digits.reduce(0, +)\n                   ~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824799
- exit_code: 1
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    return nums.sorted { (lhs, rhs) -> Bool in\n        let lhsSum = lhs.digits.reduce(0,\
    \ +)\n        let rhsSum = rhs.digits.reduce(0, +)\n        return lhsSum < rhsSum\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(order_by_points(nums: [1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums: [1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmp90lvsi66.swift:13:26: error: value of type 'Int' has no member\
    \ 'digits'\n        let lhsSum = lhs.digits.reduce(0, +)\n                   \
    \  ~~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824799
- exit_code: 1
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    return nums.sorted { (a, b) -> Bool in\n        let aSum = a.digits.reduce(0,\
    \ +)\n        let bSum = b.digits.reduce(0, +)\n        return aSum < bSum\n \
    \   }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(order_by_points(nums: [1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums: [1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpdsme7rpy.swift:13:22: error: value of type 'Int' has no member\
    \ 'digits'\n        let aSum = a.digits.reduce(0, +)\n                   ~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824799
- exit_code: 1
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    return nums.sorted { (a, b) -> Bool in\n        let aSum = a.digits.reduce(0,\
    \ +)\n        let bSum = b.digits.reduce(0, +)\n        return aSum == bSum ?\
    \ a < b : aSum < bSum\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(order_by_points(nums:\
    \ [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums:\
    \ [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2,\
    \ 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmp9yek2hhf.swift:13:22: error: value of type 'Int' has no member\
    \ 'digits'\n        let aSum = a.digits.reduce(0, +)\n                   ~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824799
- exit_code: 1
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    var sorted = nums.sorted { (a, b) -> Bool in\n        let aSum = a.digits.reduce(0,\
    \ +)\n        let bSum = b.digits.reduce(0, +)\n        return aSum == bSum ?\
    \ a < b : aSum < bSum\n    }\n    return sorted\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46,\
    \ 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as [Int])\n\
    assert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98,\
    \ -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpq382ajo4.swift:13:22: error: value of type 'Int' has no member\
    \ 'digits'\n        let aSum = a.digits.reduce(0, +)\n                   ~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824800
- exit_code: 1
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    return nums.sorted { (a, b) -> Bool in\n        let aSum = a.digits.reduce(0,\
    \ +)\n        let bSum = b.digits.reduce(0, +)\n        return aSum < bSum\n \
    \   }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(order_by_points(nums: [1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums: [1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpdsme7rpy.swift:13:22: error: value of type 'Int' has no member\
    \ 'digits'\n        let aSum = a.digits.reduce(0, +)\n                   ~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824799
- exit_code: 1
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    return nums.sorted { (a, b) -> Bool in\n        let aSum = a.digits.reduce(0,\
    \ +)\n        let bSum = b.digits.reduce(0, +)\n        return aSum < bSum\n \
    \   }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(order_by_points(nums: [1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums: [1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpdsme7rpy.swift:13:22: error: value of type 'Int' has no member\
    \ 'digits'\n        let aSum = a.digits.reduce(0, +)\n                   ~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824799
- exit_code: 1
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    return nums.sorted { (a, b) -> Bool in\n        let aSum = a.digits.reduce(0,\
    \ +)\n        let bSum = b.digits.reduce(0, +)\n        return aSum == bSum ?\
    \ a < b : aSum < bSum\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(order_by_points(nums:\
    \ [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums:\
    \ [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2,\
    \ 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmp9yek2hhf.swift:13:22: error: value of type 'Int' has no member\
    \ 'digits'\n        let aSum = a.digits.reduce(0, +)\n                   ~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824799
- exit_code: 1
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    return nums.sorted { (lhs, rhs) -> Bool in\n        let lhsSum = lhs.digits.reduce(0,\
    \ +)\n        let rhsSum = rhs.digits.reduce(0, +)\n        return lhsSum == rhsSum\
    \ ? lhs < rhs : lhsSum < rhsSum\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\n\
    assert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as [Int])\nassert(order_by_points(nums:\
    \ [1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmp0pn8lysd.swift:13:26: error: value of type 'Int' has no member\
    \ 'digits'\n        let lhsSum = lhs.digits.reduce(0, +)\n                   \
    \  ~~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824799
- exit_code: 1
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    return nums.sorted { (a, b) -> Bool in\n        let aSum = a.digits.reduce(0,\
    \ +)\n        let bSum = b.digits.reduce(0, +)\n        return aSum < bSum\n \
    \   }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(order_by_points(nums: [1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums: [1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpdsme7rpy.swift:13:22: error: value of type 'Int' has no member\
    \ 'digits'\n        let aSum = a.digits.reduce(0, +)\n                   ~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824799
- exit_code: 1
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    return nums.sorted { (a, b) -> Bool in\n        let aSum = a.digits.reduce(0,\
    \ +)\n        let bSum = b.digits.reduce(0, +)\n        return aSum < bSum\n \
    \   }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(order_by_points(nums: [1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums: [1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpdsme7rpy.swift:13:22: error: value of type 'Int' has no member\
    \ 'digits'\n        let aSum = a.digits.reduce(0, +)\n                   ~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824799
- exit_code: 1
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    return nums.sorted(by: {\n        let sum1 = sum_of_digits(num: $0)\n   \
    \     let sum2 = sum_of_digits(num: $1)\n        if sum1 == sum2 {\n         \
    \   return nums.firstIndex(of: $0)! < nums.firstIndex(of: $1)!\n        }\n  \
    \      return sum1 < sum2\n    })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(order_by_points(nums:\
    \ [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums:\
    \ [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2,\
    \ 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpqis1i4vq.swift:13:20: error: cannot find 'sum_of_digits' in scope\n\
    \        let sum1 = sum_of_digits(num: $0)\n                   ^~~~~~~~~~~~~\n\
    /tmp/tmpqis1i4vq.swift:14:20: error: cannot find 'sum_of_digits' in scope\n  \
    \      let sum2 = sum_of_digits(num: $1)\n                   ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824800
- exit_code: 1
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    return nums.sorted {\n        let sum1 = $0.digits.reduce(0, +)\n       \
    \ let sum2 = $1.digits.reduce(0, +)\n        if sum1 == sum2 {\n            return\
    \ nums.firstIndex(of: $0)! < nums.firstIndex(of: $1)!\n        }\n        return\
    \ sum1 < sum2\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(order_by_points(nums:\
    \ [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums:\
    \ [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2,\
    \ 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmp2x4agutc.swift:13:23: error: value of type 'Int' has no member\
    \ 'digits'\n        let sum1 = $0.digits.reduce(0, +)\n                   ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824799
- exit_code: 1
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    return nums.sorted { (a, b) -> Bool in\n        let aSum = a.digits.reduce(0,\
    \ +)\n        let bSum = b.digits.reduce(0, +)\n        return aSum < bSum\n \
    \   }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(order_by_points(nums: [1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums: [1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpdsme7rpy.swift:13:22: error: value of type 'Int' has no member\
    \ 'digits'\n        let aSum = a.digits.reduce(0, +)\n                   ~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824799
- exit_code: 1
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    var nums = nums\n    nums.sort { (a, b) -> Bool in\n        let aSum = a.digits.reduce(0,\
    \ +)\n        let bSum = b.digits.reduce(0, +)\n        return aSum < bSum\n \
    \   }\n    return nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(order_by_points(nums:\
    \ [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums:\
    \ [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2,\
    \ 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpweuu3_7p.swift:14:22: error: value of type 'Int' has no member\
    \ 'digits'\n        let aSum = a.digits.reduce(0, +)\n                   ~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824799
- exit_code: 1
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    return nums.sorted { (a, b) -> Bool in\n        let aSum = a.digits.reduce(0,\
    \ +)\n        let bSum = b.digits.reduce(0, +)\n        return aSum < bSum\n \
    \   }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(order_by_points(nums: [1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums: [1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpdsme7rpy.swift:13:22: error: value of type 'Int' has no member\
    \ 'digits'\n        let aSum = a.digits.reduce(0, +)\n                   ~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824799
- exit_code: 1
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    return nums.sorted { (a, b) -> Bool in\n        let aSum = a.digits.reduce(0,\
    \ +)\n        let bSum = b.digits.reduce(0, +)\n        return aSum < bSum\n \
    \   }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(order_by_points(nums: [1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums: [1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpdsme7rpy.swift:13:22: error: value of type 'Int' has no member\
    \ 'digits'\n        let aSum = a.digits.reduce(0, +)\n                   ~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824799
- exit_code: 1
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    return nums.sorted { (a, b) -> Bool in\n        let aSum = a.digits.reduce(0,\
    \ +)\n        let bSum = b.digits.reduce(0, +)\n        return aSum < bSum\n \
    \   }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(order_by_points(nums: [1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums: [1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpdsme7rpy.swift:13:22: error: value of type 'Int' has no member\
    \ 'digits'\n        let aSum = a.digits.reduce(0, +)\n                   ~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824799
- exit_code: 1
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    return nums.sorted(by: {\n        let sum1 = sum_of_digits(num: $0)\n   \
    \     let sum2 = sum_of_digits(num: $1)\n        if sum1 == sum2 {\n         \
    \   return nums.firstIndex(of: $0)! < nums.firstIndex(of: $1)!\n        }\n  \
    \      return sum1 < sum2\n    })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(order_by_points(nums:\
    \ [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums:\
    \ [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2,\
    \ 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpqis1i4vq.swift:13:20: error: cannot find 'sum_of_digits' in scope\n\
    \        let sum1 = sum_of_digits(num: $0)\n                   ^~~~~~~~~~~~~\n\
    /tmp/tmpqis1i4vq.swift:14:20: error: cannot find 'sum_of_digits' in scope\n  \
    \      let sum2 = sum_of_digits(num: $1)\n                   ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824800
- exit_code: 1
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    return nums.sorted { (a, b) -> Bool in\n        let aSum = a.digits.reduce(0,\
    \ +)\n        let bSum = b.digits.reduce(0, +)\n        return aSum < bSum\n \
    \   }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(order_by_points(nums: [1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums: [1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpdsme7rpy.swift:13:22: error: value of type 'Int' has no member\
    \ 'digits'\n        let aSum = a.digits.reduce(0, +)\n                   ~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824799
- exit_code: 1
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    return nums.sorted(by: {\n        let sum1 = $0.digits.reduce(0, +)\n   \
    \     let sum2 = $1.digits.reduce(0, +)\n        return sum1 < sum2\n    })\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) ==\
    \ [-1, -11, 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2,\
    \ 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int])\
    \ == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2,\
    \ -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmp4quvf8tl.swift:13:23: error: value of type 'Int' has no member\
    \ 'digits'\n        let sum1 = $0.digits.reduce(0, +)\n                   ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824799
- exit_code: 1
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    return nums.sorted(by: { (a, b) -> Bool in\n        let aSum = a.digits.reduce(0,\
    \ +)\n        let bSum = b.digits.reduce(0, +)\n        return aSum < bSum\n \
    \   })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(order_by_points(nums: [1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums: [1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpsrqi9egr.swift:13:22: error: value of type 'Int' has no member\
    \ 'digits'\n        let aSum = a.digits.reduce(0, +)\n                   ~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824800
- exit_code: -4
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    return nums.sorted(by: {\n        var sum1 = 0\n        var sum2 = 0\n  \
    \      for digit in String($0).map({Int(String($0))!}) {\n            sum1 +=\
    \ digit\n        }\n        for digit in String($1).map({Int(String($0))!}) {\n\
    \            sum2 += digit\n        }\n        return sum1 < sum2\n    })\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) ==\
    \ [-1, -11, 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2,\
    \ 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int])\
    \ == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2,\
    \ -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: Exception
  stderr: 'tmp2da30mrd/tmp2da30mrd.swift:15: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002ae2407c0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae2404b7561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ae2404b7286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ae2404b713c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ae2404b6bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmp2da30mrd                        0x000055a97b35b651 <unavailable> + 9809

    6    libswiftCore.so                    0x00002ae24049f820 Collection.map<A>(_:)
    + 426

    7    tmp2da30mrd                        0x000055a97b35b25f <unavailable> + 8799

    8    libswiftCore.so                    0x00002ae2405d8c90 MutableCollection<>._insertionSort(within:sortedEnd:by:)
    + 770

    9    libswiftCore.so                    0x00002ae2405d9110 MutableCollection<>._insertionSort(within:by:)
    + 356

    10   libswiftCore.so                    0x00002ae2405d7d30 UnsafeMutableBufferPointer._stableSortImpl(by:)
    + 319

    11   libswiftCore.so                    0x00002ae2405d7d15 <unavailable> + 2616597

    12   libswiftCore.so                    0x00002ae2406fd65a <unavailable> + 3819098

    13   libswiftCore.so                    0x00002ae2404ec720 ContiguousArray.withContiguousMutableStorageIfAvailable<A>(_:)
    + 130

    14   libswiftCore.so                    0x00002ae2404ec70f <unavailable> + 1652495

    15   libswiftCore.so                    0x00002ae2405d7460 MutableCollection<>.sort(by:)
    + 771

    16   libswiftCore.so                    0x00002ae2405d7370 Sequence.sorted(by:)
    + 193

    17   tmp2da30mrd                        0x000055a97b35b160 <unavailable> + 8544

    18   tmp2da30mrd                        0x000055a97b35a814 <unavailable> + 6164

    19   libc.so.6                          0x00002ae2409ac460 __libc_start_main +
    245

    20   tmp2da30mrd                        0x000055a97b35a4e9 <unavailable'
  stdout: ''
  timestamp: 1659824800
- exit_code: 1
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    return nums.sorted { (lhs, rhs) -> Bool in\n        let lhsSum = lhs.digits.reduce(0,\
    \ +)\n        let rhsSum = rhs.digits.reduce(0, +)\n        return lhsSum < rhsSum\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(order_by_points(nums: [1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums: [1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmp90lvsi66.swift:13:26: error: value of type 'Int' has no member\
    \ 'digits'\n        let lhsSum = lhs.digits.reduce(0, +)\n                   \
    \  ~~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824799
- exit_code: 1
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    return nums.sorted { (a, b) -> Bool in\n        let aSum = a.digits.reduce(0,\
    \ +)\n        let bSum = b.digits.reduce(0, +)\n        return aSum < bSum\n \
    \   }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(order_by_points(nums: [1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums: [1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpdsme7rpy.swift:13:22: error: value of type 'Int' has no member\
    \ 'digits'\n        let aSum = a.digits.reduce(0, +)\n                   ~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824799
- exit_code: 1
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    return nums.sorted { (a, b) -> Bool in\n        let aSum = a.digits.reduce(0,\
    \ +)\n        let bSum = b.digits.reduce(0, +)\n        return aSum == bSum ?\
    \ a < b : aSum < bSum\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(order_by_points(nums:\
    \ [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums:\
    \ [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2,\
    \ 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmp9yek2hhf.swift:13:22: error: value of type 'Int' has no member\
    \ 'digits'\n        let aSum = a.digits.reduce(0, +)\n                   ~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824799
- exit_code: 1
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    return nums.sorted { (lhs, rhs) -> Bool in\n        let lhsSum = lhs.digits.reduce(0,\
    \ +)\n        let rhsSum = rhs.digits.reduce(0, +)\n        return lhsSum < rhsSum\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(order_by_points(nums: [1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums: [1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmp90lvsi66.swift:13:26: error: value of type 'Int' has no member\
    \ 'digits'\n        let lhsSum = lhs.digits.reduce(0, +)\n                   \
    \  ~~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824799
- exit_code: 1
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    return nums.sorted {\n        let sum1 = $0.digits.reduce(0, +)\n       \
    \ let sum2 = $1.digits.reduce(0, +)\n        return sum1 == sum2 ? $0 < $1 : sum1\
    \ < sum2\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(order_by_points(nums:\
    \ [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums:\
    \ [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2,\
    \ 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpsu_zmzop.swift:13:23: error: value of type 'Int' has no member\
    \ 'digits'\n        let sum1 = $0.digits.reduce(0, +)\n                   ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824799
- exit_code: 1
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    return nums.sorted { (a, b) -> Bool in\n        let aSum = a.digits.reduce(0,\
    \ +)\n        let bSum = b.digits.reduce(0, +)\n        return aSum < bSum\n \
    \   }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(order_by_points(nums: [1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums: [1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpdsme7rpy.swift:13:22: error: value of type 'Int' has no member\
    \ 'digits'\n        let aSum = a.digits.reduce(0, +)\n                   ~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824799
- exit_code: 1
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    return nums.sorted { (a, b) -> Bool in\n        let aSum = a.digits.reduce(0,\
    \ +)\n        let bSum = b.digits.reduce(0, +)\n        return aSum < bSum\n \
    \   }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(order_by_points(nums: [1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums: [1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpdsme7rpy.swift:13:22: error: value of type 'Int' has no member\
    \ 'digits'\n        let aSum = a.digits.reduce(0, +)\n                   ~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824799
