language: swift
name: HumanEval_1_separate_paren_groups
results:
- exit_code: -4
  program: "\n/// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n/// separate those group into separate\
    \ strings and return the array of those.\n/// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n/// Ignore\
    \ any spaces in the input string.\n/// >>> separate_paren_groups(paren_string:\
    \ \"( ) (( )) (( )( ))\")\n/// [\"()\", \"(())\", \"(()())\"]\nfunc separate_paren_groups(paren_string:\
    \ String) -> [String] {\n    var result: [String] = []\n    var openCount = 0\n\
    \    var closeCount = 0\n    var temp = \"\"\n    for char in paren_string {\n\
    \        if char == \"(\" {\n            openCount += 1\n        } else if char\
    \ == \")\" {\n            closeCount += 1\n        }\n        if openCount ==\
    \ closeCount {\n            result.append(temp)\n            temp = \"\"\n   \
    \         openCount = 0\n            closeCount = 0\n        } else {\n      \
    \      temp.append(char)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(separate_paren_groups(paren_string: \"(()()) ((())) ()\
    \ ((())()())\") == [\"(()())\", \"((()))\", \"()\", \"((())()())\"])\nassert(separate_paren_groups(paren_string:\
    \ \"() (()) ((())) (((())))\") == [\"()\", \"(())\", \"((()))\", \"(((())))\"\
    ])\nassert(separate_paren_groups(paren_string: \"(()(())((())))\") == [\"(()(())((())))\"\
    ])\nassert(separate_paren_groups(paren_string: \"( ) (( )) (( )( ))\") == [\"\
    ()\", \"(())\", \"(()())\"])"
  status: Exception
  stderr: 'tmpy5nl3kzs/tmpy5nl3kzs.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aee381e4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aee37edbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aee37edb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aee37eda7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpy5nl3kzs                        0x0000564e89d3c787 <unavailable> + 6023

    5    libc.so.6                          0x00002aee383d0460 __libc_start_main +
    245

    6    tmpy5nl3kzs                        0x0000564e89d3c319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1659824687
- exit_code: -4
  program: "\n/// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n/// separate those group into separate\
    \ strings and return the array of those.\n/// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n/// Ignore\
    \ any spaces in the input string.\n/// >>> separate_paren_groups(paren_string:\
    \ \"( ) (( )) (( )( ))\")\n/// [\"()\", \"(())\", \"(()())\"]\nfunc separate_paren_groups(paren_string:\
    \ String) -> [String] {\n    var result: [String] = []\n    var temp_string =\
    \ \"\"\n    var open_paren_count = 0\n    var close_paren_count = 0\n    for char\
    \ in paren_string {\n        if char == \"(\" {\n            open_paren_count\
    \ += 1\n        } else if char == \")\" {\n            close_paren_count += 1\n\
    \        }\n        if open_paren_count == close_paren_count {\n            if\
    \ open_paren_count != 0 {\n                result.append(temp_string)\n      \
    \          temp_string = \"\"\n                open_paren_count = 0\n        \
    \        close_paren_count = 0\n            }\n        } else {\n            temp_string.append(char)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(separate_paren_groups(paren_string: \"(()()) ((())) () ((())()())\") ==\
    \ [\"(()())\", \"((()))\", \"()\", \"((())()())\"])\nassert(separate_paren_groups(paren_string:\
    \ \"() (()) ((())) (((())))\") == [\"()\", \"(())\", \"((()))\", \"(((())))\"\
    ])\nassert(separate_paren_groups(paren_string: \"(()(())((())))\") == [\"(()(())((())))\"\
    ])\nassert(separate_paren_groups(paren_string: \"( ) (( )) (( )( ))\") == [\"\
    ()\", \"(())\", \"(()())\"])"
  status: Exception
  stderr: 'tmplumjn98a/tmplumjn98a.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b033ccedc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b033c9e4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b033c9e4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b033c9e37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplumjn98a                        0x0000558b2e363787 <unavailable> + 6023

    5    libc.so.6                          0x00002b033ced9460 __libc_start_main +
    245

    6    tmplumjn98a                        0x0000558b2e363319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1659824687
- exit_code: -4
  program: "\n/// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n/// separate those group into separate\
    \ strings and return the array of those.\n/// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n/// Ignore\
    \ any spaces in the input string.\n/// >>> separate_paren_groups(paren_string:\
    \ \"( ) (( )) (( )( ))\")\n/// [\"()\", \"(())\", \"(()())\"]\nfunc separate_paren_groups(paren_string:\
    \ String) -> [String] {\n    var result = [String]()\n    var paren_string = paren_string\n\
    \    while paren_string.count > 0 {\n        let first_paren = paren_string.firstIndex(of:\
    \ \"(\")!\n        let last_paren = paren_string.lastIndex(of: \")\")!\n     \
    \   result.append(String(paren_string[first_paren...last_paren]))\n        paren_string\
    \ = String(paren_string[last_paren...])\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(separate_paren_groups(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [\"(()())\", \"((()))\", \"()\", \"((())()())\"])\nassert(separate_paren_groups(paren_string:\
    \ \"() (()) ((())) (((())))\") == [\"()\", \"(())\", \"((()))\", \"(((())))\"\
    ])\nassert(separate_paren_groups(paren_string: \"(()(())((())))\") == [\"(()(())((())))\"\
    ])\nassert(separate_paren_groups(paren_string: \"( ) (( )) (( )( ))\") == [\"\
    ()\", \"(())\", \"(()())\"])"
  status: Exception
  stderr: 'tmp2a5yitxi/tmp2a5yitxi.swift:12: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002b65bf4b4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b65bf1ab561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b65bf1ab286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b65bf1ab13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b65bf1aabb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmp2a5yitxi                        0x00005579f72a71ce <unavailable> + 8654

    6    tmp2a5yitxi                        0x00005579f72a6976 <unavailable> + 6518

    7    libc.so.6                          0x00002b65bf6a0460 __libc_start_main +
    245

    8    tmp2a5yitxi                        0x00005579f72a6679 <unavailable> + 5753

    '
  stdout: ''
  timestamp: 1659824687
- exit_code: 1
  program: "\n/// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n/// separate those group into separate\
    \ strings and return the array of those.\n/// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n/// Ignore\
    \ any spaces in the input string.\n/// >>> separate_paren_groups(paren_string:\
    \ \"( ) (( )) (( )( ))\")\n/// [\"()\", \"(())\", \"(()())\"]\nfunc separate_paren_groups(paren_string:\
    \ String) -> [String] {\n    var paren_string = paren_string\n    var paren_groups:\
    \ [String] = []\n    while paren_string.count > 0 {\n        let paren_group =\
    \ paren_string.prefix(while: { $0 != \" \" })\n        paren_groups.append(String(paren_group))\n\
    \        paren_string = String(paren_string.dropFirst(paren_group.count))\n  \
    \      paren_string = paren_string.trimmingCharacters(in: .whitespaces)\n    }\n\
    \    return paren_groups\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(separate_paren_groups(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [\"(()())\", \"((()))\", \"()\", \"((())()())\"\
    ])\nassert(separate_paren_groups(paren_string: \"() (()) ((())) (((())))\") ==\
    \ [\"()\", \"(())\", \"((()))\", \"(((())))\"])\nassert(separate_paren_groups(paren_string:\
    \ \"(()(())((())))\") == [\"(()(())((())))\"])\nassert(separate_paren_groups(paren_string:\
    \ \"( ) (( )) (( )( ))\") == [\"()\", \"(())\", \"(()())\"])"
  status: SyntaxError
  stderr: "/tmp/tmpd6vkfqca.swift:15:37: error: value of type 'String' has no member\
    \ 'trimmingCharacters'\n        paren_string = paren_string.trimmingCharacters(in:\
    \ .whitespaces)\n                       ~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~\n/tmp/tmpd6vkfqca.swift:15:61:\
    \ error: cannot infer contextual base in reference to member 'whitespaces'\n \
    \       paren_string = paren_string.trimmingCharacters(in: .whitespaces)\n   \
    \                                                        ~^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824686
- exit_code: 0
  program: "\n/// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n/// separate those group into separate\
    \ strings and return the array of those.\n/// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n/// Ignore\
    \ any spaces in the input string.\n/// >>> separate_paren_groups(paren_string:\
    \ \"( ) (( )) (( )( ))\")\n/// [\"()\", \"(())\", \"(()())\"]\nfunc separate_paren_groups(paren_string:\
    \ String) -> [String] {\n    var result: [String] = []\n    var currentGroup:\
    \ String = \"\"\n    var openParenCount: Int = 0\n    for char in paren_string\
    \ {\n        if char == \"(\" {\n            openParenCount += 1\n           \
    \ currentGroup += String(char)\n        } else if char == \")\" {\n          \
    \  openParenCount -= 1\n            currentGroup += String(char)\n        }\n\
    \        if openParenCount == 0 && currentGroup != \"\" {\n            result.append(currentGroup)\n\
    \            currentGroup = \"\"\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(separate_paren_groups(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [\"(()())\", \"((()))\", \"()\", \"((())()())\"])\nassert(separate_paren_groups(paren_string:\
    \ \"() (()) ((())) (((())))\") == [\"()\", \"(())\", \"((()))\", \"(((())))\"\
    ])\nassert(separate_paren_groups(paren_string: \"(()(())((())))\") == [\"(()(())((())))\"\
    ])\nassert(separate_paren_groups(paren_string: \"( ) (( )) (( )( ))\") == [\"\
    ()\", \"(())\", \"(()())\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824687
- exit_code: -4
  program: "\n/// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n/// separate those group into separate\
    \ strings and return the array of those.\n/// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n/// Ignore\
    \ any spaces in the input string.\n/// >>> separate_paren_groups(paren_string:\
    \ \"( ) (( )) (( )( ))\")\n/// [\"()\", \"(())\", \"(()())\"]\nfunc separate_paren_groups(paren_string:\
    \ String) -> [String] {\n    var result: [String] = []\n    var current_paren_group:\
    \ String = \"\"\n    var open_paren_count: Int = 0\n    for char in paren_string\
    \ {\n        if char == \"(\" {\n            open_paren_count += 1\n         \
    \   current_paren_group += String(char)\n        } else if char == \")\" {\n \
    \           open_paren_count -= 1\n            current_paren_group += String(char)\n\
    \        }\n        if open_paren_count == 0 {\n            result.append(current_paren_group)\n\
    \            current_paren_group = \"\"\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(separate_paren_groups(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [\"(()())\", \"((()))\", \"()\", \"((())()())\"])\nassert(separate_paren_groups(paren_string:\
    \ \"() (()) ((())) (((())))\") == [\"()\", \"(())\", \"((()))\", \"(((())))\"\
    ])\nassert(separate_paren_groups(paren_string: \"(()(())((())))\") == [\"(()(())((())))\"\
    ])\nassert(separate_paren_groups(paren_string: \"( ) (( )) (( )( ))\") == [\"\
    ()\", \"(())\", \"(()())\"])"
  status: Exception
  stderr: 'tmp3ckjnwh8/tmp3ckjnwh8.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6ded354c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6ded04bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6ded04b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6ded04a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3ckjnwh8                        0x00005592929377e7 <unavailable> + 6119

    5    libc.so.6                          0x00002b6ded540460 __libc_start_main +
    245

    6    tmp3ckjnwh8                        0x0000559292937379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1659824687
- exit_code: 0
  program: "\n/// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n/// separate those group into separate\
    \ strings and return the array of those.\n/// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n/// Ignore\
    \ any spaces in the input string.\n/// >>> separate_paren_groups(paren_string:\
    \ \"( ) (( )) (( )( ))\")\n/// [\"()\", \"(())\", \"(()())\"]\nfunc separate_paren_groups(paren_string:\
    \ String) -> [String] {\n    var paren_groups: [String] = []\n    var current_group:\
    \ String = \"\"\n    var open_parens: Int = 0\n    for char in paren_string {\n\
    \        if char == \"(\" {\n            open_parens += 1\n            current_group\
    \ += \"(\"\n        } else if char == \")\" {\n            open_parens -= 1\n\
    \            current_group += \")\"\n        }\n        if open_parens == 0 &&\
    \ current_group != \"\" {\n            paren_groups.append(current_group)\n  \
    \          current_group = \"\"\n        }\n    }\n    return paren_groups\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(separate_paren_groups(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [\"(()())\", \"((()))\", \"()\", \"((())()())\"])\nassert(separate_paren_groups(paren_string:\
    \ \"() (()) ((())) (((())))\") == [\"()\", \"(())\", \"((()))\", \"(((())))\"\
    ])\nassert(separate_paren_groups(paren_string: \"(()(())((())))\") == [\"(()(())((())))\"\
    ])\nassert(separate_paren_groups(paren_string: \"( ) (( )) (( )( ))\") == [\"\
    ()\", \"(())\", \"(()())\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824687
- exit_code: -4
  program: "\n/// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n/// separate those group into separate\
    \ strings and return the array of those.\n/// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n/// Ignore\
    \ any spaces in the input string.\n/// >>> separate_paren_groups(paren_string:\
    \ \"( ) (( )) (( )( ))\")\n/// [\"()\", \"(())\", \"(()())\"]\nfunc separate_paren_groups(paren_string:\
    \ String) -> [String] {\n    var result: [String] = []\n    var temp: String =\
    \ \"\"\n    var open: Int = 0\n    var close: Int = 0\n    for char in paren_string\
    \ {\n        if char == \"(\" {\n            open += 1\n        } else if char\
    \ == \")\" {\n            close += 1\n        }\n        if open == close {\n\
    \            if temp != \"\" {\n                result.append(temp)\n        \
    \        temp = \"\"\n            }\n        } else {\n            temp.append(char)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(separate_paren_groups(paren_string: \"(()()) ((())) () ((())()())\") ==\
    \ [\"(()())\", \"((()))\", \"()\", \"((())()())\"])\nassert(separate_paren_groups(paren_string:\
    \ \"() (()) ((())) (((())))\") == [\"()\", \"(())\", \"((()))\", \"(((())))\"\
    ])\nassert(separate_paren_groups(paren_string: \"(()(())((())))\") == [\"(()(())((())))\"\
    ])\nassert(separate_paren_groups(paren_string: \"( ) (( )) (( )( ))\") == [\"\
    ()\", \"(())\", \"(()())\"])"
  status: Exception
  stderr: 'tmpb7mnwa3p/tmpb7mnwa3p.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae229f48c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae229c3fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae229c3f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae229c3e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpb7mnwa3p                        0x000055bcba6647e7 <unavailable> + 6119

    5    libc.so.6                          0x00002ae22a134460 __libc_start_main +
    245

    6    tmpb7mnwa3p                        0x000055bcba664379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1659824687
- exit_code: -4
  program: "\n/// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n/// separate those group into separate\
    \ strings and return the array of those.\n/// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n/// Ignore\
    \ any spaces in the input string.\n/// >>> separate_paren_groups(paren_string:\
    \ \"( ) (( )) (( )( ))\")\n/// [\"()\", \"(())\", \"(()())\"]\nfunc separate_paren_groups(paren_string:\
    \ String) -> [String] {\n    var result = [String]()\n    var current = \"\"\n\
    \    var open = 0\n    for char in paren_string {\n        if char == \"(\" {\n\
    \            open += 1\n            current += \"(\"\n        } else if char ==\
    \ \")\" {\n            open -= 1\n            current += \")\"\n        }\n  \
    \      if open == 0 {\n            result.append(current)\n            current\
    \ = \"\"\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(separate_paren_groups(paren_string: \"(()()) ((())) () ((())()())\"\
    ) == [\"(()())\", \"((()))\", \"()\", \"((())()())\"])\nassert(separate_paren_groups(paren_string:\
    \ \"() (()) ((())) (((())))\") == [\"()\", \"(())\", \"((()))\", \"(((())))\"\
    ])\nassert(separate_paren_groups(paren_string: \"(()(())((())))\") == [\"(()(())((())))\"\
    ])\nassert(separate_paren_groups(paren_string: \"( ) (( )) (( )( ))\") == [\"\
    ()\", \"(())\", \"(()())\"])"
  status: Exception
  stderr: 'tmpy8udsbj1/tmpy8udsbj1.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4bfe6f3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4bfe3eab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4bfe3ea988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4bfe3e97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpy8udsbj1                        0x000056233828f7e7 <unavailable> + 6119

    5    libc.so.6                          0x00002b4bfe8df460 __libc_start_main +
    245

    6    tmpy8udsbj1                        0x000056233828f379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1659824687
- exit_code: -4
  program: "\n/// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n/// separate those group into separate\
    \ strings and return the array of those.\n/// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n/// Ignore\
    \ any spaces in the input string.\n/// >>> separate_paren_groups(paren_string:\
    \ \"( ) (( )) (( )( ))\")\n/// [\"()\", \"(())\", \"(()())\"]\nfunc separate_paren_groups(paren_string:\
    \ String) -> [String] {\n    var result = [String]()\n    var current_group =\
    \ \"\"\n    var paren_count = 0\n    for char in paren_string {\n        if char\
    \ == \"(\" {\n            paren_count += 1\n        } else if char == \")\" {\n\
    \            paren_count -= 1\n        }\n        if paren_count == 0 {\n    \
    \        if current_group != \"\" {\n                result.append(current_group)\n\
    \                current_group = \"\"\n            }\n        } else {\n     \
    \       current_group.append(char)\n        }\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(separate_paren_groups(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [\"(()())\", \"((()))\", \"()\", \"((())()())\"])\nassert(separate_paren_groups(paren_string:\
    \ \"() (()) ((())) (((())))\") == [\"()\", \"(())\", \"((()))\", \"(((())))\"\
    ])\nassert(separate_paren_groups(paren_string: \"(()(())((())))\") == [\"(()(())((())))\"\
    ])\nassert(separate_paren_groups(paren_string: \"( ) (( )) (( )( ))\") == [\"\
    ()\", \"(())\", \"(()())\"])"
  status: Exception
  stderr: 'tmpmkksj91z/tmpmkksj91z.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab038fbdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab038cb4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab038cb4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab038cb37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmkksj91z                        0x00005555c042f837 <unavailable> + 6199

    5    libc.so.6                          0x00002ab0391a9460 __libc_start_main +
    245

    6    tmpmkksj91z                        0x00005555c042f3c9 <unavailable> + 5065

    '
  stdout: ''
  timestamp: 1659824687
- exit_code: -4
  program: "\n/// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n/// separate those group into separate\
    \ strings and return the array of those.\n/// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n/// Ignore\
    \ any spaces in the input string.\n/// >>> separate_paren_groups(paren_string:\
    \ \"( ) (( )) (( )( ))\")\n/// [\"()\", \"(())\", \"(()())\"]\nfunc separate_paren_groups(paren_string:\
    \ String) -> [String] {\n    var result = [String]()\n    var current = \"\"\n\
    \    var open = 0\n    for char in paren_string {\n        if char == \"(\" {\n\
    \            open += 1\n            current += \"(\"\n        } else if char ==\
    \ \")\" {\n            open -= 1\n            current += \")\"\n        }\n  \
    \      if open == 0 {\n            result.append(current)\n            current\
    \ = \"\"\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(separate_paren_groups(paren_string: \"(()()) ((())) () ((())()())\"\
    ) == [\"(()())\", \"((()))\", \"()\", \"((())()())\"])\nassert(separate_paren_groups(paren_string:\
    \ \"() (()) ((())) (((())))\") == [\"()\", \"(())\", \"((()))\", \"(((())))\"\
    ])\nassert(separate_paren_groups(paren_string: \"(()(())((())))\") == [\"(()(())((())))\"\
    ])\nassert(separate_paren_groups(paren_string: \"( ) (( )) (( )( ))\") == [\"\
    ()\", \"(())\", \"(()())\"])"
  status: Exception
  stderr: 'tmpy8udsbj1/tmpy8udsbj1.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4bfe6f3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4bfe3eab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4bfe3ea988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4bfe3e97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpy8udsbj1                        0x000056233828f7e7 <unavailable> + 6119

    5    libc.so.6                          0x00002b4bfe8df460 __libc_start_main +
    245

    6    tmpy8udsbj1                        0x000056233828f379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1659824687
- exit_code: -4
  program: "\n/// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n/// separate those group into separate\
    \ strings and return the array of those.\n/// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n/// Ignore\
    \ any spaces in the input string.\n/// >>> separate_paren_groups(paren_string:\
    \ \"( ) (( )) (( )( ))\")\n/// [\"()\", \"(())\", \"(()())\"]\nfunc separate_paren_groups(paren_string:\
    \ String) -> [String] {\n    var result: [String] = []\n    var current: String\
    \ = \"\"\n    var openCount: Int = 0\n    for char in paren_string {\n       \
    \ if char == \"(\" {\n            openCount += 1\n            current.append(char)\n\
    \        } else if char == \")\" {\n            openCount -= 1\n            current.append(char)\n\
    \        }\n        if openCount == 0 {\n            result.append(current)\n\
    \            current = \"\"\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(separate_paren_groups(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [\"(()())\", \"((()))\", \"()\", \"((())()())\"])\nassert(separate_paren_groups(paren_string:\
    \ \"() (()) ((())) (((())))\") == [\"()\", \"(())\", \"((()))\", \"(((())))\"\
    ])\nassert(separate_paren_groups(paren_string: \"(()(())((())))\") == [\"(()(())((())))\"\
    ])\nassert(separate_paren_groups(paren_string: \"( ) (( )) (( )( ))\") == [\"\
    ()\", \"(())\", \"(()())\"])"
  status: Exception
  stderr: 'tmpmqwygz6b/tmpmqwygz6b.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac55834cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac558043b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac558043988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac5580427b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmqwygz6b                        0x000055ae34839787 <unavailable> + 6023

    5    libc.so.6                          0x00002ac558538460 __libc_start_main +
    245

    6    tmpmqwygz6b                        0x000055ae34839319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1659824687
- exit_code: -4
  program: "\n/// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n/// separate those group into separate\
    \ strings and return the array of those.\n/// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n/// Ignore\
    \ any spaces in the input string.\n/// >>> separate_paren_groups(paren_string:\
    \ \"( ) (( )) (( )( ))\")\n/// [\"()\", \"(())\", \"(()())\"]\nfunc separate_paren_groups(paren_string:\
    \ String) -> [String] {\n    var result: [String] = []\n    var current: String\
    \ = \"\"\n    var open: Int = 0\n    var close: Int = 0\n    for char in paren_string\
    \ {\n        if char == \"(\" {\n            open += 1\n        } else if char\
    \ == \")\" {\n            close += 1\n        }\n        if open == close {\n\
    \            result.append(current)\n            current = \"\"\n            open\
    \ = 0\n            close = 0\n        } else {\n            current.append(char)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(separate_paren_groups(paren_string: \"(()()) ((())) () ((())()())\") ==\
    \ [\"(()())\", \"((()))\", \"()\", \"((())()())\"])\nassert(separate_paren_groups(paren_string:\
    \ \"() (()) ((())) (((())))\") == [\"()\", \"(())\", \"((()))\", \"(((())))\"\
    ])\nassert(separate_paren_groups(paren_string: \"(()(())((())))\") == [\"(()(())((())))\"\
    ])\nassert(separate_paren_groups(paren_string: \"( ) (( )) (( )( ))\") == [\"\
    ()\", \"(())\", \"(()())\"])"
  status: Exception
  stderr: 'tmpfpwd9lpn/tmpfpwd9lpn.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b38084fdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b38081f4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b38081f4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b38081f37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfpwd9lpn                        0x000055e3cdd0f787 <unavailable> + 6023

    5    libc.so.6                          0x00002b38086e9460 __libc_start_main +
    245

    6    tmpfpwd9lpn                        0x000055e3cdd0f319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1659824687
- exit_code: -4
  program: "\n/// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n/// separate those group into separate\
    \ strings and return the array of those.\n/// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n/// Ignore\
    \ any spaces in the input string.\n/// >>> separate_paren_groups(paren_string:\
    \ \"( ) (( )) (( )( ))\")\n/// [\"()\", \"(())\", \"(()())\"]\nfunc separate_paren_groups(paren_string:\
    \ String) -> [String] {\n    var result = [String]()\n    var current = \"\"\n\
    \    var count = 0\n    for char in paren_string {\n        if char == \"(\" {\n\
    \            count += 1\n        } else if char == \")\" {\n            count\
    \ -= 1\n        }\n        if count == 0 && char == \")\" {\n            result.append(current)\n\
    \            current = \"\"\n        } else if char != \" \" {\n            current.append(char)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(separate_paren_groups(paren_string: \"(()()) ((())) () ((())()())\") ==\
    \ [\"(()())\", \"((()))\", \"()\", \"((())()())\"])\nassert(separate_paren_groups(paren_string:\
    \ \"() (()) ((())) (((())))\") == [\"()\", \"(())\", \"((()))\", \"(((())))\"\
    ])\nassert(separate_paren_groups(paren_string: \"(()(())((())))\") == [\"(()(())((())))\"\
    ])\nassert(separate_paren_groups(paren_string: \"( ) (( )) (( )( ))\") == [\"\
    ()\", \"(())\", \"(()())\"])"
  status: Exception
  stderr: 'tmpub7n4ip2/tmpub7n4ip2.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acddfd14c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acddfa0bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acddfa0b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acddfa0a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpub7n4ip2                        0x000055de6b7627e7 <unavailable> + 6119

    5    libc.so.6                          0x00002acddff00460 __libc_start_main +
    245

    6    tmpub7n4ip2                        0x000055de6b762379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1659824687
- exit_code: -4
  program: "\n/// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n/// separate those group into separate\
    \ strings and return the array of those.\n/// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n/// Ignore\
    \ any spaces in the input string.\n/// >>> separate_paren_groups(paren_string:\
    \ \"( ) (( )) (( )( ))\")\n/// [\"()\", \"(())\", \"(()())\"]\nfunc separate_paren_groups(paren_string:\
    \ String) -> [String] {\n    var result = [String]()\n    var current_group =\
    \ \"\"\n    var open_parens = 0\n    for char in paren_string {\n        if char\
    \ == \"(\" {\n            open_parens += 1\n            current_group += \"(\"\
    \n        } else if char == \")\" {\n            open_parens -= 1\n          \
    \  current_group += \")\"\n        }\n        if open_parens == 0 {\n        \
    \    result.append(current_group)\n            current_group = \"\"\n        }\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(separate_paren_groups(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [\"(()())\", \"((()))\", \"()\", \"((())()())\"\
    ])\nassert(separate_paren_groups(paren_string: \"() (()) ((())) (((())))\") ==\
    \ [\"()\", \"(())\", \"((()))\", \"(((())))\"])\nassert(separate_paren_groups(paren_string:\
    \ \"(()(())((())))\") == [\"(()(())((())))\"])\nassert(separate_paren_groups(paren_string:\
    \ \"( ) (( )) (( )( ))\") == [\"()\", \"(())\", \"(()())\"])"
  status: Exception
  stderr: 'tmpypij2s5c/tmpypij2s5c.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9ffcdf2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9ffcae9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9ffcae9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9ffcae87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpypij2s5c                        0x0000564db99f07e7 <unavailable> + 6119

    5    libc.so.6                          0x00002b9ffcfde460 __libc_start_main +
    245

    6    tmpypij2s5c                        0x0000564db99f0379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1659824687
- exit_code: -4
  program: "\n/// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n/// separate those group into separate\
    \ strings and return the array of those.\n/// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n/// Ignore\
    \ any spaces in the input string.\n/// >>> separate_paren_groups(paren_string:\
    \ \"( ) (( )) (( )( ))\")\n/// [\"()\", \"(())\", \"(()())\"]\nfunc separate_paren_groups(paren_string:\
    \ String) -> [String] {\n    var result = [String]()\n    var current = \"\"\n\
    \    var open = 0\n    for char in paren_string {\n        if char == \"(\" {\n\
    \            open += 1\n            current += String(char)\n        } else if\
    \ char == \")\" {\n            open -= 1\n            current += String(char)\n\
    \        }\n        if open == 0 {\n            result.append(current)\n     \
    \       current = \"\"\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(separate_paren_groups(paren_string: \"(()()) ((())) ()\
    \ ((())()())\") == [\"(()())\", \"((()))\", \"()\", \"((())()())\"])\nassert(separate_paren_groups(paren_string:\
    \ \"() (()) ((())) (((())))\") == [\"()\", \"(())\", \"((()))\", \"(((())))\"\
    ])\nassert(separate_paren_groups(paren_string: \"(()(())((())))\") == [\"(()(())((())))\"\
    ])\nassert(separate_paren_groups(paren_string: \"( ) (( )) (( )( ))\") == [\"\
    ()\", \"(())\", \"(()())\"])"
  status: Exception
  stderr: 'tmp_se8cu6l/tmp_se8cu6l.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b37c9608c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b37c92ffb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b37c92ff988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b37c92fe7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_se8cu6l                        0x0000560622c66837 <unavailable> + 6199

    5    libc.so.6                          0x00002b37c97f4460 __libc_start_main +
    245

    6    tmp_se8cu6l                        0x0000560622c663c9 <unavailable> + 5065

    '
  stdout: ''
  timestamp: 1659824687
- exit_code: -4
  program: "\n/// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n/// separate those group into separate\
    \ strings and return the array of those.\n/// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n/// Ignore\
    \ any spaces in the input string.\n/// >>> separate_paren_groups(paren_string:\
    \ \"( ) (( )) (( )( ))\")\n/// [\"()\", \"(())\", \"(()())\"]\nfunc separate_paren_groups(paren_string:\
    \ String) -> [String] {\n    var result = [String]()\n    var current = \"\"\n\
    \    var open = 0\n    for char in paren_string {\n        if char == \"(\" {\n\
    \            open += 1\n            current += String(char)\n        } else if\
    \ char == \")\" {\n            open -= 1\n            current += String(char)\n\
    \        }\n        if open == 0 {\n            result.append(current)\n     \
    \       current = \"\"\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(separate_paren_groups(paren_string: \"(()()) ((())) ()\
    \ ((())()())\") == [\"(()())\", \"((()))\", \"()\", \"((())()())\"])\nassert(separate_paren_groups(paren_string:\
    \ \"() (()) ((())) (((())))\") == [\"()\", \"(())\", \"((()))\", \"(((())))\"\
    ])\nassert(separate_paren_groups(paren_string: \"(()(())((())))\") == [\"(()(())((())))\"\
    ])\nassert(separate_paren_groups(paren_string: \"( ) (( )) (( )( ))\") == [\"\
    ()\", \"(())\", \"(()())\"])"
  status: Exception
  stderr: 'tmp_se8cu6l/tmp_se8cu6l.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b37c9608c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b37c92ffb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b37c92ff988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b37c92fe7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_se8cu6l                        0x0000560622c66837 <unavailable> + 6199

    5    libc.so.6                          0x00002b37c97f4460 __libc_start_main +
    245

    6    tmp_se8cu6l                        0x0000560622c663c9 <unavailable> + 5065

    '
  stdout: ''
  timestamp: 1659824687
- exit_code: -4
  program: "\n/// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n/// separate those group into separate\
    \ strings and return the array of those.\n/// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n/// Ignore\
    \ any spaces in the input string.\n/// >>> separate_paren_groups(paren_string:\
    \ \"( ) (( )) (( )( ))\")\n/// [\"()\", \"(())\", \"(()())\"]\nfunc separate_paren_groups(paren_string:\
    \ String) -> [String] {\n    var result = [String]()\n    var current = \"\"\n\
    \    var openCount = 0\n    for char in paren_string {\n        if char == \"\
    (\" {\n            openCount += 1\n        } else if char == \")\" {\n       \
    \     openCount -= 1\n        }\n        if openCount == 0 {\n            if current\
    \ != \"\" {\n                result.append(current)\n                current =\
    \ \"\"\n            }\n        } else {\n            current.append(char)\n  \
    \      }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(separate_paren_groups(paren_string: \"(()()) ((())) () ((())()())\") ==\
    \ [\"(()())\", \"((()))\", \"()\", \"((())()())\"])\nassert(separate_paren_groups(paren_string:\
    \ \"() (()) ((())) (((())))\") == [\"()\", \"(())\", \"((()))\", \"(((())))\"\
    ])\nassert(separate_paren_groups(paren_string: \"(()(())((())))\") == [\"(()(())((())))\"\
    ])\nassert(separate_paren_groups(paren_string: \"( ) (( )) (( )( ))\") == [\"\
    ()\", \"(())\", \"(()())\"])"
  status: Exception
  stderr: 'tmpczcl140y/tmpczcl140y.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1d233fac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1d230f1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1d230f1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1d230f07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpczcl140y                        0x000055b68816f837 <unavailable> + 6199

    5    libc.so.6                          0x00002b1d235e6460 __libc_start_main +
    245

    6    tmpczcl140y                        0x000055b68816f3c9 <unavailable> + 5065

    '
  stdout: ''
  timestamp: 1659824687
- exit_code: -4
  program: "\n/// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n/// separate those group into separate\
    \ strings and return the array of those.\n/// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n/// Ignore\
    \ any spaces in the input string.\n/// >>> separate_paren_groups(paren_string:\
    \ \"( ) (( )) (( )( ))\")\n/// [\"()\", \"(())\", \"(()())\"]\nfunc separate_paren_groups(paren_string:\
    \ String) -> [String] {\n    var result = [String]()\n    var current = \"\"\n\
    \    var openCount = 0\n    for c in paren_string {\n        if c == \"(\" {\n\
    \            openCount += 1\n        } else if c == \")\" {\n            openCount\
    \ -= 1\n        }\n        if openCount == 0 {\n            if current != \"\"\
    \ {\n                result.append(current)\n                current = \"\"\n\
    \            }\n        } else {\n            current.append(c)\n        }\n \
    \   }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(separate_paren_groups(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [\"(()())\", \"((()))\", \"()\", \"((())()())\"\
    ])\nassert(separate_paren_groups(paren_string: \"() (()) ((())) (((())))\") ==\
    \ [\"()\", \"(())\", \"((()))\", \"(((())))\"])\nassert(separate_paren_groups(paren_string:\
    \ \"(()(())((())))\") == [\"(()(())((())))\"])\nassert(separate_paren_groups(paren_string:\
    \ \"( ) (( )) (( )( ))\") == [\"()\", \"(())\", \"(()())\"])"
  status: Exception
  stderr: 'tmpw7zch1lw/tmpw7zch1lw.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acac373dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acac3434b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acac3434988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acac34337b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpw7zch1lw                        0x00005608ebfd2837 <unavailable> + 6199

    5    libc.so.6                          0x00002acac3929460 __libc_start_main +
    245

    6    tmpw7zch1lw                        0x00005608ebfd23c9 <unavailable> + 5065

    '
  stdout: ''
  timestamp: 1659824687
- exit_code: -4
  program: "\n/// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n/// separate those group into separate\
    \ strings and return the array of those.\n/// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n/// Ignore\
    \ any spaces in the input string.\n/// >>> separate_paren_groups(paren_string:\
    \ \"( ) (( )) (( )( ))\")\n/// [\"()\", \"(())\", \"(()())\"]\nfunc separate_paren_groups(paren_string:\
    \ String) -> [String] {\n    var result = [String]()\n    var current = \"\"\n\
    \    var open = 0\n    for c in paren_string {\n        if c == \"(\" {\n    \
    \        open += 1\n            current.append(c)\n        } else if c == \")\"\
    \ {\n            open -= 1\n            current.append(c)\n        }\n       \
    \ if open == 0 {\n            result.append(current)\n            current = \"\
    \"\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(separate_paren_groups(paren_string: \"(()()) ((())) () ((())()())\") ==\
    \ [\"(()())\", \"((()))\", \"()\", \"((())()())\"])\nassert(separate_paren_groups(paren_string:\
    \ \"() (()) ((())) (((())))\") == [\"()\", \"(())\", \"((()))\", \"(((())))\"\
    ])\nassert(separate_paren_groups(paren_string: \"(()(())((())))\") == [\"(()(())((())))\"\
    ])\nassert(separate_paren_groups(paren_string: \"( ) (( )) (( )( ))\") == [\"\
    ()\", \"(())\", \"(()())\"])"
  status: Exception
  stderr: 'tmp5pv4tht3/tmp5pv4tht3.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2af1c7dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2af1974b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2af1974988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2af19737b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5pv4tht3                        0x000056027457a7e7 <unavailable> + 6119

    5    libc.so.6                          0x00002b2af1e69460 __libc_start_main +
    245

    6    tmp5pv4tht3                        0x000056027457a379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1659824687
- exit_code: -4
  program: "\n/// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n/// separate those group into separate\
    \ strings and return the array of those.\n/// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n/// Ignore\
    \ any spaces in the input string.\n/// >>> separate_paren_groups(paren_string:\
    \ \"( ) (( )) (( )( ))\")\n/// [\"()\", \"(())\", \"(()())\"]\nfunc separate_paren_groups(paren_string:\
    \ String) -> [String] {\n    var result: [String] = []\n    var current_group:\
    \ String = \"\"\n    var open_parens: Int = 0\n    for char in paren_string {\n\
    \        if char == \"(\" {\n            open_parens += 1\n            current_group\
    \ += \"(\"\n        } else if char == \")\" {\n            open_parens -= 1\n\
    \            current_group += \")\"\n        }\n        if open_parens == 0 {\n\
    \            result.append(current_group)\n            current_group = \"\"\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(separate_paren_groups(paren_string: \"(()()) ((())) () ((())()())\") ==\
    \ [\"(()())\", \"((()))\", \"()\", \"((())()())\"])\nassert(separate_paren_groups(paren_string:\
    \ \"() (()) ((())) (((())))\") == [\"()\", \"(())\", \"((()))\", \"(((())))\"\
    ])\nassert(separate_paren_groups(paren_string: \"(()(())((())))\") == [\"(()(())((())))\"\
    ])\nassert(separate_paren_groups(paren_string: \"( ) (( )) (( )( ))\") == [\"\
    ()\", \"(())\", \"(()())\"])"
  status: Exception
  stderr: 'tmpk1gs__d8/tmpk1gs__d8.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b45980ecc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4597de3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4597de3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4597de27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpk1gs__d8                        0x000055bf39d1d797 <unavailable> + 6039

    5    libc.so.6                          0x00002b45982d8460 __libc_start_main +
    245

    6    tmpk1gs__d8                        0x000055bf39d1d329 <unavailable> + 4905

    '
  stdout: ''
  timestamp: 1659824687
- exit_code: -4
  program: "\n/// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n/// separate those group into separate\
    \ strings and return the array of those.\n/// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n/// Ignore\
    \ any spaces in the input string.\n/// >>> separate_paren_groups(paren_string:\
    \ \"( ) (( )) (( )( ))\")\n/// [\"()\", \"(())\", \"(()())\"]\nfunc separate_paren_groups(paren_string:\
    \ String) -> [String] {\n    var result = [String]()\n    var current_group =\
    \ \"\"\n    var open_parens = 0\n    for char in paren_string {\n        if char\
    \ == \"(\" {\n            open_parens += 1\n            current_group += String(char)\n\
    \        } else if char == \")\" {\n            open_parens -= 1\n           \
    \ current_group += String(char)\n        }\n        if open_parens == 0 {\n  \
    \          result.append(current_group)\n            current_group = \"\"\n  \
    \      }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(separate_paren_groups(paren_string: \"(()()) ((())) () ((())()())\") ==\
    \ [\"(()())\", \"((()))\", \"()\", \"((())()())\"])\nassert(separate_paren_groups(paren_string:\
    \ \"() (()) ((())) (((())))\") == [\"()\", \"(())\", \"((()))\", \"(((())))\"\
    ])\nassert(separate_paren_groups(paren_string: \"(()(())((())))\") == [\"(()(())((())))\"\
    ])\nassert(separate_paren_groups(paren_string: \"( ) (( )) (( )( ))\") == [\"\
    ()\", \"(())\", \"(()())\"])"
  status: Exception
  stderr: 'tmp5qbxzuvz/tmp5qbxzuvz.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af5a85f9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af5a82f0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af5a82f0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af5a82ef7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5qbxzuvz                        0x000055e79ee27837 <unavailable> + 6199

    5    libc.so.6                          0x00002af5a87e5460 __libc_start_main +
    245

    6    tmp5qbxzuvz                        0x000055e79ee273c9 <unavailable> + 5065

    '
  stdout: ''
  timestamp: 1659824687
- exit_code: -4
  program: "\n/// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n/// separate those group into separate\
    \ strings and return the array of those.\n/// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n/// Ignore\
    \ any spaces in the input string.\n/// >>> separate_paren_groups(paren_string:\
    \ \"( ) (( )) (( )( ))\")\n/// [\"()\", \"(())\", \"(()())\"]\nfunc separate_paren_groups(paren_string:\
    \ String) -> [String] {\n    var result: [String] = []\n    var current_string\
    \ = \"\"\n    var open_paren_count = 0\n    for char in paren_string {\n     \
    \   if char == \"(\" {\n            open_paren_count += 1\n            current_string.append(char)\n\
    \        } else if char == \")\" {\n            open_paren_count -= 1\n      \
    \      current_string.append(char)\n        }\n        if open_paren_count ==\
    \ 0 {\n            result.append(current_string)\n            current_string =\
    \ \"\"\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(separate_paren_groups(paren_string: \"(()()) ((())) () ((())()())\"\
    ) == [\"(()())\", \"((()))\", \"()\", \"((())()())\"])\nassert(separate_paren_groups(paren_string:\
    \ \"() (()) ((())) (((())))\") == [\"()\", \"(())\", \"((()))\", \"(((())))\"\
    ])\nassert(separate_paren_groups(paren_string: \"(()(())((())))\") == [\"(()(())((())))\"\
    ])\nassert(separate_paren_groups(paren_string: \"( ) (( )) (( )( ))\") == [\"\
    ()\", \"(())\", \"(()())\"])"
  status: Exception
  stderr: 'tmpvtibezr_/tmpvtibezr_.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b70eaa08c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b70ea6ffb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b70ea6ff988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b70ea6fe7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvtibezr_                        0x0000563a4225c787 <unavailable> + 6023

    5    libc.so.6                          0x00002b70eabf4460 __libc_start_main +
    245

    6    tmpvtibezr_                        0x0000563a4225c319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1659824687
- exit_code: -4
  program: "\n/// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n/// separate those group into separate\
    \ strings and return the array of those.\n/// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n/// Ignore\
    \ any spaces in the input string.\n/// >>> separate_paren_groups(paren_string:\
    \ \"( ) (( )) (( )( ))\")\n/// [\"()\", \"(())\", \"(()())\"]\nfunc separate_paren_groups(paren_string:\
    \ String) -> [String] {\n    var paren_groups: [String] = []\n    var current_group:\
    \ String = \"\"\n    var open_parens: Int = 0\n    for char in paren_string {\n\
    \        if char == \"(\" {\n            open_parens += 1\n            current_group\
    \ += \"(\"\n        } else if char == \")\" {\n            open_parens -= 1\n\
    \            current_group += \")\"\n        }\n        if open_parens == 0 {\n\
    \            paren_groups.append(current_group)\n            current_group = \"\
    \"\n        }\n    }\n    return paren_groups\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(separate_paren_groups(paren_string: \"(()()) ((())) () ((())()())\"\
    ) == [\"(()())\", \"((()))\", \"()\", \"((())()())\"])\nassert(separate_paren_groups(paren_string:\
    \ \"() (()) ((())) (((())))\") == [\"()\", \"(())\", \"((()))\", \"(((())))\"\
    ])\nassert(separate_paren_groups(paren_string: \"(()(())((())))\") == [\"(()(())((())))\"\
    ])\nassert(separate_paren_groups(paren_string: \"( ) (( )) (( )( ))\") == [\"\
    ()\", \"(())\", \"(()())\"])"
  status: Exception
  stderr: 'tmpbd73pr9i/tmpbd73pr9i.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5e1d027c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5e1cd1eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5e1cd1e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5e1cd1d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbd73pr9i                        0x0000561787dc9797 <unavailable> + 6039

    5    libc.so.6                          0x00002b5e1d213460 __libc_start_main +
    245

    6    tmpbd73pr9i                        0x0000561787dc9329 <unavailable> + 4905

    '
  stdout: ''
  timestamp: 1659824687
- exit_code: -4
  program: "\n/// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n/// separate those group into separate\
    \ strings and return the array of those.\n/// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n/// Ignore\
    \ any spaces in the input string.\n/// >>> separate_paren_groups(paren_string:\
    \ \"( ) (( )) (( )( ))\")\n/// [\"()\", \"(())\", \"(()())\"]\nfunc separate_paren_groups(paren_string:\
    \ String) -> [String] {\n    var result = [String]()\n    var current = \"\"\n\
    \    var open = 0\n    for char in paren_string {\n        if char == \"(\" {\n\
    \            open += 1\n            current += String(char)\n        } else if\
    \ char == \")\" {\n            open -= 1\n            current += String(char)\n\
    \        }\n        if open == 0 {\n            result.append(current)\n     \
    \       current = \"\"\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(separate_paren_groups(paren_string: \"(()()) ((())) ()\
    \ ((())()())\") == [\"(()())\", \"((()))\", \"()\", \"((())()())\"])\nassert(separate_paren_groups(paren_string:\
    \ \"() (()) ((())) (((())))\") == [\"()\", \"(())\", \"((()))\", \"(((())))\"\
    ])\nassert(separate_paren_groups(paren_string: \"(()(())((())))\") == [\"(()(())((())))\"\
    ])\nassert(separate_paren_groups(paren_string: \"( ) (( )) (( )( ))\") == [\"\
    ()\", \"(())\", \"(()())\"])"
  status: Exception
  stderr: 'tmp_se8cu6l/tmp_se8cu6l.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b37c9608c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b37c92ffb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b37c92ff988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b37c92fe7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_se8cu6l                        0x0000560622c66837 <unavailable> + 6199

    5    libc.so.6                          0x00002b37c97f4460 __libc_start_main +
    245

    6    tmp_se8cu6l                        0x0000560622c663c9 <unavailable> + 5065

    '
  stdout: ''
  timestamp: 1659824687
- exit_code: -4
  program: "\n/// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n/// separate those group into separate\
    \ strings and return the array of those.\n/// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n/// Ignore\
    \ any spaces in the input string.\n/// >>> separate_paren_groups(paren_string:\
    \ \"( ) (( )) (( )( ))\")\n/// [\"()\", \"(())\", \"(()())\"]\nfunc separate_paren_groups(paren_string:\
    \ String) -> [String] {\n    var result: [String] = []\n    var current_group:\
    \ String = \"\"\n    var open_parens: Int = 0\n    for char in paren_string {\n\
    \        if char == \"(\" {\n            open_parens += 1\n            current_group\
    \ += \"(\"\n        } else if char == \")\" {\n            open_parens -= 1\n\
    \            current_group += \")\"\n        }\n        if open_parens == 0 {\n\
    \            result.append(current_group)\n            current_group = \"\"\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(separate_paren_groups(paren_string: \"(()()) ((())) () ((())()())\") ==\
    \ [\"(()())\", \"((()))\", \"()\", \"((())()())\"])\nassert(separate_paren_groups(paren_string:\
    \ \"() (()) ((())) (((())))\") == [\"()\", \"(())\", \"((()))\", \"(((())))\"\
    ])\nassert(separate_paren_groups(paren_string: \"(()(())((())))\") == [\"(()(())((())))\"\
    ])\nassert(separate_paren_groups(paren_string: \"( ) (( )) (( )( ))\") == [\"\
    ()\", \"(())\", \"(()())\"])"
  status: Exception
  stderr: 'tmpk1gs__d8/tmpk1gs__d8.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b45980ecc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4597de3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4597de3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4597de27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpk1gs__d8                        0x000055bf39d1d797 <unavailable> + 6039

    5    libc.so.6                          0x00002b45982d8460 __libc_start_main +
    245

    6    tmpk1gs__d8                        0x000055bf39d1d329 <unavailable> + 4905

    '
  stdout: ''
  timestamp: 1659824687
- exit_code: -4
  program: "\n/// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n/// separate those group into separate\
    \ strings and return the array of those.\n/// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n/// Ignore\
    \ any spaces in the input string.\n/// >>> separate_paren_groups(paren_string:\
    \ \"( ) (( )) (( )( ))\")\n/// [\"()\", \"(())\", \"(()())\"]\nfunc separate_paren_groups(paren_string:\
    \ String) -> [String] {\n    var paren_groups = [String]()\n    var current_paren_group\
    \ = \"\"\n    var open_parens = 0\n    for char in paren_string {\n        if\
    \ char == \"(\" {\n            open_parens += 1\n            current_paren_group\
    \ += \"(\"\n        } else if char == \")\" {\n            open_parens -= 1\n\
    \            current_paren_group += \")\"\n        }\n        if open_parens ==\
    \ 0 {\n            paren_groups.append(current_paren_group)\n            current_paren_group\
    \ = \"\"\n        }\n    }\n    return paren_groups\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(separate_paren_groups(paren_string: \"(()()) ((())) () ((())()())\"\
    ) == [\"(()())\", \"((()))\", \"()\", \"((())()())\"])\nassert(separate_paren_groups(paren_string:\
    \ \"() (()) ((())) (((())))\") == [\"()\", \"(())\", \"((()))\", \"(((())))\"\
    ])\nassert(separate_paren_groups(paren_string: \"(()(())((())))\") == [\"(()(())((())))\"\
    ])\nassert(separate_paren_groups(paren_string: \"( ) (( )) (( )( ))\") == [\"\
    ()\", \"(())\", \"(()())\"])"
  status: Exception
  stderr: 'tmpkphgga3h/tmpkphgga3h.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0f3678cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0f36483b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0f36483988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0f364827b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkphgga3h                        0x000055ce2bbfc7e7 <unavailable> + 6119

    5    libc.so.6                          0x00002b0f36978460 __libc_start_main +
    245

    6    tmpkphgga3h                        0x000055ce2bbfc379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1659824687
- exit_code: -4
  program: "\n/// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n/// separate those group into separate\
    \ strings and return the array of those.\n/// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n/// Ignore\
    \ any spaces in the input string.\n/// >>> separate_paren_groups(paren_string:\
    \ \"( ) (( )) (( )( ))\")\n/// [\"()\", \"(())\", \"(()())\"]\nfunc separate_paren_groups(paren_string:\
    \ String) -> [String] {\n    var result: [String] = []\n    var current_group:\
    \ String = \"\"\n    var open_parens: Int = 0\n    for char in paren_string {\n\
    \        if char == \"(\" {\n            open_parens += 1\n            current_group\
    \ += \"(\"\n        } else if char == \")\" {\n            open_parens -= 1\n\
    \            current_group += \")\"\n        }\n        if open_parens == 0 {\n\
    \            result.append(current_group)\n            current_group = \"\"\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(separate_paren_groups(paren_string: \"(()()) ((())) () ((())()())\") ==\
    \ [\"(()())\", \"((()))\", \"()\", \"((())()())\"])\nassert(separate_paren_groups(paren_string:\
    \ \"() (()) ((())) (((())))\") == [\"()\", \"(())\", \"((()))\", \"(((())))\"\
    ])\nassert(separate_paren_groups(paren_string: \"(()(())((())))\") == [\"(()(())((())))\"\
    ])\nassert(separate_paren_groups(paren_string: \"( ) (( )) (( )( ))\") == [\"\
    ()\", \"(())\", \"(()())\"])"
  status: Exception
  stderr: 'tmpk1gs__d8/tmpk1gs__d8.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b45980ecc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4597de3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4597de3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4597de27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpk1gs__d8                        0x000055bf39d1d797 <unavailable> + 6039

    5    libc.so.6                          0x00002b45982d8460 __libc_start_main +
    245

    6    tmpk1gs__d8                        0x000055bf39d1d329 <unavailable> + 4905

    '
  stdout: ''
  timestamp: 1659824687
- exit_code: -4
  program: "\n/// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n/// separate those group into separate\
    \ strings and return the array of those.\n/// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n/// Ignore\
    \ any spaces in the input string.\n/// >>> separate_paren_groups(paren_string:\
    \ \"( ) (( )) (( )( ))\")\n/// [\"()\", \"(())\", \"(()())\"]\nfunc separate_paren_groups(paren_string:\
    \ String) -> [String] {\n    var result = [String]()\n    var current = \"\"\n\
    \    var open = 0\n    for char in paren_string {\n        if char == \"(\" {\n\
    \            open += 1\n            current += \"(\"\n        } else if char ==\
    \ \")\" {\n            open -= 1\n            current += \")\"\n        }\n  \
    \      if open == 0 {\n            result.append(current)\n            current\
    \ = \"\"\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(separate_paren_groups(paren_string: \"(()()) ((())) () ((())()())\"\
    ) == [\"(()())\", \"((()))\", \"()\", \"((())()())\"])\nassert(separate_paren_groups(paren_string:\
    \ \"() (()) ((())) (((())))\") == [\"()\", \"(())\", \"((()))\", \"(((())))\"\
    ])\nassert(separate_paren_groups(paren_string: \"(()(())((())))\") == [\"(()(())((())))\"\
    ])\nassert(separate_paren_groups(paren_string: \"( ) (( )) (( )( ))\") == [\"\
    ()\", \"(())\", \"(()())\"])"
  status: Exception
  stderr: 'tmpy8udsbj1/tmpy8udsbj1.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4bfe6f3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4bfe3eab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4bfe3ea988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4bfe3e97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpy8udsbj1                        0x000056233828f7e7 <unavailable> + 6119

    5    libc.so.6                          0x00002b4bfe8df460 __libc_start_main +
    245

    6    tmpy8udsbj1                        0x000056233828f379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1659824687
- exit_code: -4
  program: "\n/// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n/// separate those group into separate\
    \ strings and return the array of those.\n/// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n/// Ignore\
    \ any spaces in the input string.\n/// >>> separate_paren_groups(paren_string:\
    \ \"( ) (( )) (( )( ))\")\n/// [\"()\", \"(())\", \"(()())\"]\nfunc separate_paren_groups(paren_string:\
    \ String) -> [String] {\n    var result: [String] = []\n    var current: String\
    \ = \"\"\n    var open: Int = 0\n    var close: Int = 0\n    for char in paren_string\
    \ {\n        if char == \"(\" {\n            open += 1\n        } else if char\
    \ == \")\" {\n            close += 1\n        }\n        if open == close {\n\
    \            if open != 0 {\n                result.append(current)\n        \
    \        current = \"\"\n                open = 0\n                close = 0\n\
    \            }\n        } else {\n            current.append(char)\n        }\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(separate_paren_groups(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [\"(()())\", \"((()))\", \"()\", \"((())()())\"\
    ])\nassert(separate_paren_groups(paren_string: \"() (()) ((())) (((())))\") ==\
    \ [\"()\", \"(())\", \"((()))\", \"(((())))\"])\nassert(separate_paren_groups(paren_string:\
    \ \"(()(())((())))\") == [\"(()(())((())))\"])\nassert(separate_paren_groups(paren_string:\
    \ \"( ) (( )) (( )( ))\") == [\"()\", \"(())\", \"(()())\"])"
  status: Exception
  stderr: 'tmp987a2z8b/tmp987a2z8b.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adb452a3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adb44f9ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adb44f9a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adb44f997b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp987a2z8b                        0x000056005617b787 <unavailable> + 6023

    5    libc.so.6                          0x00002adb4548f460 __libc_start_main +
    245

    6    tmp987a2z8b                        0x000056005617b319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1659824687
- exit_code: -4
  program: "\n/// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n/// separate those group into separate\
    \ strings and return the array of those.\n/// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n/// Ignore\
    \ any spaces in the input string.\n/// >>> separate_paren_groups(paren_string:\
    \ \"( ) (( )) (( )( ))\")\n/// [\"()\", \"(())\", \"(()())\"]\nfunc separate_paren_groups(paren_string:\
    \ String) -> [String] {\n    var result: [String] = []\n    var current_group:\
    \ String = \"\"\n    var open_parens: Int = 0\n    for char in paren_string {\n\
    \        if char == \"(\" {\n            open_parens += 1\n            current_group\
    \ += String(char)\n        } else if char == \")\" {\n            open_parens\
    \ -= 1\n            current_group += String(char)\n        }\n        if open_parens\
    \ == 0 {\n            result.append(current_group)\n            current_group\
    \ = \"\"\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(separate_paren_groups(paren_string: \"(()()) ((())) () ((())()())\"\
    ) == [\"(()())\", \"((()))\", \"()\", \"((())()())\"])\nassert(separate_paren_groups(paren_string:\
    \ \"() (()) ((())) (((())))\") == [\"()\", \"(())\", \"((()))\", \"(((())))\"\
    ])\nassert(separate_paren_groups(paren_string: \"(()(())((())))\") == [\"(()(())((())))\"\
    ])\nassert(separate_paren_groups(paren_string: \"( ) (( )) (( )( ))\") == [\"\
    ()\", \"(())\", \"(()())\"])"
  status: Exception
  stderr: 'tmp75iu15po/tmp75iu15po.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b33bb404c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b33bb0fbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b33bb0fb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b33bb0fa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp75iu15po                        0x000055a82b0bb7e7 <unavailable> + 6119

    5    libc.so.6                          0x00002b33bb5f0460 __libc_start_main +
    245

    6    tmp75iu15po                        0x000055a82b0bb379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1659824687
- exit_code: -4
  program: "\n/// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n/// separate those group into separate\
    \ strings and return the array of those.\n/// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n/// Ignore\
    \ any spaces in the input string.\n/// >>> separate_paren_groups(paren_string:\
    \ \"( ) (( )) (( )( ))\")\n/// [\"()\", \"(())\", \"(()())\"]\nfunc separate_paren_groups(paren_string:\
    \ String) -> [String] {\n    var result: [String] = []\n    var current_group:\
    \ String = \"\"\n    var open_parens: Int = 0\n    for char in paren_string {\n\
    \        if char == \"(\" {\n            open_parens += 1\n            current_group\
    \ += String(char)\n        } else if char == \")\" {\n            open_parens\
    \ -= 1\n            current_group += String(char)\n        }\n        if open_parens\
    \ == 0 {\n            result.append(current_group)\n            current_group\
    \ = \"\"\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(separate_paren_groups(paren_string: \"(()()) ((())) () ((())()())\"\
    ) == [\"(()())\", \"((()))\", \"()\", \"((())()())\"])\nassert(separate_paren_groups(paren_string:\
    \ \"() (()) ((())) (((())))\") == [\"()\", \"(())\", \"((()))\", \"(((())))\"\
    ])\nassert(separate_paren_groups(paren_string: \"(()(())((())))\") == [\"(()(())((())))\"\
    ])\nassert(separate_paren_groups(paren_string: \"( ) (( )) (( )( ))\") == [\"\
    ()\", \"(())\", \"(()())\"])"
  status: Exception
  stderr: 'tmp75iu15po/tmp75iu15po.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b33bb404c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b33bb0fbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b33bb0fb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b33bb0fa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp75iu15po                        0x000055a82b0bb7e7 <unavailable> + 6119

    5    libc.so.6                          0x00002b33bb5f0460 __libc_start_main +
    245

    6    tmp75iu15po                        0x000055a82b0bb379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1659824687
- exit_code: 0
  program: "\n/// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n/// separate those group into separate\
    \ strings and return the array of those.\n/// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n/// Ignore\
    \ any spaces in the input string.\n/// >>> separate_paren_groups(paren_string:\
    \ \"( ) (( )) (( )( ))\")\n/// [\"()\", \"(())\", \"(()())\"]\nfunc separate_paren_groups(paren_string:\
    \ String) -> [String] {\n    var result: [String] = []\n    var current: String\
    \ = \"\"\n    var open_parens: Int = 0\n    for char in paren_string {\n     \
    \   if char == \"(\" {\n            open_parens += 1\n            current.append(char)\n\
    \        } else if char == \")\" {\n            open_parens -= 1\n           \
    \ current.append(char)\n        }\n        if open_parens == 0 && current != \"\
    \" {\n            result.append(current)\n            current = \"\"\n       \
    \ }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(separate_paren_groups(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [\"(()())\", \"((()))\", \"()\", \"((())()())\"\
    ])\nassert(separate_paren_groups(paren_string: \"() (()) ((())) (((())))\") ==\
    \ [\"()\", \"(())\", \"((()))\", \"(((())))\"])\nassert(separate_paren_groups(paren_string:\
    \ \"(()(())((())))\") == [\"(()(())((())))\"])\nassert(separate_paren_groups(paren_string:\
    \ \"( ) (( )) (( )( ))\") == [\"()\", \"(())\", \"(()())\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824687
- exit_code: -4
  program: "\n/// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n/// separate those group into separate\
    \ strings and return the array of those.\n/// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n/// Ignore\
    \ any spaces in the input string.\n/// >>> separate_paren_groups(paren_string:\
    \ \"( ) (( )) (( )( ))\")\n/// [\"()\", \"(())\", \"(()())\"]\nfunc separate_paren_groups(paren_string:\
    \ String) -> [String] {\n    var result = [String]()\n    var current = \"\"\n\
    \    var open = 0\n    for c in paren_string {\n        if c == \"(\" {\n    \
    \        open += 1\n            current.append(c)\n        } else if c == \")\"\
    \ {\n            open -= 1\n            current.append(c)\n        }\n       \
    \ if open == 0 {\n            result.append(current)\n            current = \"\
    \"\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(separate_paren_groups(paren_string: \"(()()) ((())) () ((())()())\") ==\
    \ [\"(()())\", \"((()))\", \"()\", \"((())()())\"])\nassert(separate_paren_groups(paren_string:\
    \ \"() (()) ((())) (((())))\") == [\"()\", \"(())\", \"((()))\", \"(((())))\"\
    ])\nassert(separate_paren_groups(paren_string: \"(()(())((())))\") == [\"(()(())((())))\"\
    ])\nassert(separate_paren_groups(paren_string: \"( ) (( )) (( )( ))\") == [\"\
    ()\", \"(())\", \"(()())\"])"
  status: Exception
  stderr: 'tmp5pv4tht3/tmp5pv4tht3.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2af1c7dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2af1974b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2af1974988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2af19737b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5pv4tht3                        0x000056027457a7e7 <unavailable> + 6119

    5    libc.so.6                          0x00002b2af1e69460 __libc_start_main +
    245

    6    tmp5pv4tht3                        0x000056027457a379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1659824687
- exit_code: -4
  program: "\n/// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n/// separate those group into separate\
    \ strings and return the array of those.\n/// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n/// Ignore\
    \ any spaces in the input string.\n/// >>> separate_paren_groups(paren_string:\
    \ \"( ) (( )) (( )( ))\")\n/// [\"()\", \"(())\", \"(()())\"]\nfunc separate_paren_groups(paren_string:\
    \ String) -> [String] {\n    var result = [String]()\n    var current_group =\
    \ \"\"\n    var open_parens = 0\n    for char in paren_string {\n        if char\
    \ == \"(\" {\n            open_parens += 1\n            current_group += String(char)\n\
    \        } else if char == \")\" {\n            open_parens -= 1\n           \
    \ current_group += String(char)\n        }\n        if open_parens == 0 {\n  \
    \          result.append(current_group)\n            current_group = \"\"\n  \
    \      }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(separate_paren_groups(paren_string: \"(()()) ((())) () ((())()())\") ==\
    \ [\"(()())\", \"((()))\", \"()\", \"((())()())\"])\nassert(separate_paren_groups(paren_string:\
    \ \"() (()) ((())) (((())))\") == [\"()\", \"(())\", \"((()))\", \"(((())))\"\
    ])\nassert(separate_paren_groups(paren_string: \"(()(())((())))\") == [\"(()(())((())))\"\
    ])\nassert(separate_paren_groups(paren_string: \"( ) (( )) (( )( ))\") == [\"\
    ()\", \"(())\", \"(()())\"])"
  status: Exception
  stderr: 'tmp5qbxzuvz/tmp5qbxzuvz.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af5a85f9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af5a82f0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af5a82f0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af5a82ef7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5qbxzuvz                        0x000055e79ee27837 <unavailable> + 6199

    5    libc.so.6                          0x00002af5a87e5460 __libc_start_main +
    245

    6    tmp5qbxzuvz                        0x000055e79ee273c9 <unavailable> + 5065

    '
  stdout: ''
  timestamp: 1659824687
- exit_code: -4
  program: "\n/// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n/// separate those group into separate\
    \ strings and return the array of those.\n/// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n/// Ignore\
    \ any spaces in the input string.\n/// >>> separate_paren_groups(paren_string:\
    \ \"( ) (( )) (( )( ))\")\n/// [\"()\", \"(())\", \"(()())\"]\nfunc separate_paren_groups(paren_string:\
    \ String) -> [String] {\n    var result = [String]()\n    var current_paren_group\
    \ = \"\"\n    var open_paren_count = 0\n    for char in paren_string {\n     \
    \   if char == \"(\" {\n            open_paren_count += 1\n            current_paren_group\
    \ += \"(\"\n        } else if char == \")\" {\n            open_paren_count -=\
    \ 1\n            current_paren_group += \")\"\n        }\n        if open_paren_count\
    \ == 0 {\n            result.append(current_paren_group)\n            current_paren_group\
    \ = \"\"\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(separate_paren_groups(paren_string: \"(()()) ((())) () ((())()())\"\
    ) == [\"(()())\", \"((()))\", \"()\", \"((())()())\"])\nassert(separate_paren_groups(paren_string:\
    \ \"() (()) ((())) (((())))\") == [\"()\", \"(())\", \"((()))\", \"(((())))\"\
    ])\nassert(separate_paren_groups(paren_string: \"(()(())((())))\") == [\"(()(())((())))\"\
    ])\nassert(separate_paren_groups(paren_string: \"( ) (( )) (( )( ))\") == [\"\
    ()\", \"(())\", \"(()())\"])"
  status: Exception
  stderr: 'tmpi9h0zg1s/tmpi9h0zg1s.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba7e2d45c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba7e2a3cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba7e2a3c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba7e2a3b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpi9h0zg1s                        0x00005594199827e7 <unavailable> + 6119

    5    libc.so.6                          0x00002ba7e2f31460 __libc_start_main +
    245

    6    tmpi9h0zg1s                        0x0000559419982379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1659824687
- exit_code: -4
  program: "\n/// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n/// separate those group into separate\
    \ strings and return the array of those.\n/// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n/// Ignore\
    \ any spaces in the input string.\n/// >>> separate_paren_groups(paren_string:\
    \ \"( ) (( )) (( )( ))\")\n/// [\"()\", \"(())\", \"(()())\"]\nfunc separate_paren_groups(paren_string:\
    \ String) -> [String] {\n    var result: [String] = []\n    var current_group:\
    \ String = \"\"\n    var open_parens: Int = 0\n    for c in paren_string {\n \
    \       if c == \"(\" {\n            open_parens += 1\n            current_group\
    \ += \"(\"\n        } else if c == \")\" {\n            open_parens -= 1\n   \
    \         current_group += \")\"\n        }\n        if open_parens == 0 {\n \
    \           result.append(current_group)\n            current_group = \"\"\n \
    \       }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(separate_paren_groups(paren_string: \"(()()) ((())) () ((())()())\") ==\
    \ [\"(()())\", \"((()))\", \"()\", \"((())()())\"])\nassert(separate_paren_groups(paren_string:\
    \ \"() (()) ((())) (((())))\") == [\"()\", \"(())\", \"((()))\", \"(((())))\"\
    ])\nassert(separate_paren_groups(paren_string: \"(()(())((())))\") == [\"(()(())((())))\"\
    ])\nassert(separate_paren_groups(paren_string: \"( ) (( )) (( )( ))\") == [\"\
    ()\", \"(())\", \"(()())\"])"
  status: Exception
  stderr: 'tmpd_6ohv2_/tmpd_6ohv2_.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9fab4a0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9fab197b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9fab197988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9fab1967b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpd_6ohv2_                        0x000055806c5c2797 <unavailable> + 6039

    5    libc.so.6                          0x00002b9fab68c460 __libc_start_main +
    245

    6    tmpd_6ohv2_                        0x000055806c5c2329 <unavailable> + 4905

    '
  stdout: ''
  timestamp: 1659824687
- exit_code: -4
  program: "\n/// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n/// separate those group into separate\
    \ strings and return the array of those.\n/// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n/// Ignore\
    \ any spaces in the input string.\n/// >>> separate_paren_groups(paren_string:\
    \ \"( ) (( )) (( )( ))\")\n/// [\"()\", \"(())\", \"(()())\"]\nfunc separate_paren_groups(paren_string:\
    \ String) -> [String] {\n    var result = [String]()\n    var current = \"\"\n\
    \    var open = 0\n    for c in paren_string {\n        if c == \"(\" {\n    \
    \        open += 1\n            current.append(c)\n        } else if c == \")\"\
    \ {\n            open -= 1\n            current.append(c)\n        }\n       \
    \ if open == 0 {\n            result.append(current)\n            current = \"\
    \"\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(separate_paren_groups(paren_string: \"(()()) ((())) () ((())()())\") ==\
    \ [\"(()())\", \"((()))\", \"()\", \"((())()())\"])\nassert(separate_paren_groups(paren_string:\
    \ \"() (()) ((())) (((())))\") == [\"()\", \"(())\", \"((()))\", \"(((())))\"\
    ])\nassert(separate_paren_groups(paren_string: \"(()(())((())))\") == [\"(()(())((())))\"\
    ])\nassert(separate_paren_groups(paren_string: \"( ) (( )) (( )( ))\") == [\"\
    ()\", \"(())\", \"(()())\"])"
  status: Exception
  stderr: 'tmp5pv4tht3/tmp5pv4tht3.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2af1c7dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2af1974b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2af1974988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2af19737b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5pv4tht3                        0x000056027457a7e7 <unavailable> + 6119

    5    libc.so.6                          0x00002b2af1e69460 __libc_start_main +
    245

    6    tmp5pv4tht3                        0x000056027457a379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1659824687
- exit_code: -4
  program: "\n/// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n/// separate those group into separate\
    \ strings and return the array of those.\n/// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n/// Ignore\
    \ any spaces in the input string.\n/// >>> separate_paren_groups(paren_string:\
    \ \"( ) (( )) (( )( ))\")\n/// [\"()\", \"(())\", \"(()())\"]\nfunc separate_paren_groups(paren_string:\
    \ String) -> [String] {\n    var result: [String] = []\n    var current_group:\
    \ String = \"\"\n    var open_parens: Int = 0\n    for char in paren_string {\n\
    \        if char == \"(\" {\n            open_parens += 1\n            current_group\
    \ += \"(\"\n        } else if char == \")\" {\n            open_parens -= 1\n\
    \            current_group += \")\"\n        }\n        if open_parens == 0 {\n\
    \            result.append(current_group)\n            current_group = \"\"\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(separate_paren_groups(paren_string: \"(()()) ((())) () ((())()())\") ==\
    \ [\"(()())\", \"((()))\", \"()\", \"((())()())\"])\nassert(separate_paren_groups(paren_string:\
    \ \"() (()) ((())) (((())))\") == [\"()\", \"(())\", \"((()))\", \"(((())))\"\
    ])\nassert(separate_paren_groups(paren_string: \"(()(())((())))\") == [\"(()(())((())))\"\
    ])\nassert(separate_paren_groups(paren_string: \"( ) (( )) (( )( ))\") == [\"\
    ()\", \"(())\", \"(()())\"])"
  status: Exception
  stderr: 'tmpk1gs__d8/tmpk1gs__d8.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b45980ecc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4597de3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4597de3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4597de27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpk1gs__d8                        0x000055bf39d1d797 <unavailable> + 6039

    5    libc.so.6                          0x00002b45982d8460 __libc_start_main +
    245

    6    tmpk1gs__d8                        0x000055bf39d1d329 <unavailable> + 4905

    '
  stdout: ''
  timestamp: 1659824687
- exit_code: -4
  program: "\n/// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n/// separate those group into separate\
    \ strings and return the array of those.\n/// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n/// Ignore\
    \ any spaces in the input string.\n/// >>> separate_paren_groups(paren_string:\
    \ \"( ) (( )) (( )( ))\")\n/// [\"()\", \"(())\", \"(()())\"]\nfunc separate_paren_groups(paren_string:\
    \ String) -> [String] {\n    var result = [String]()\n    var current = \"\"\n\
    \    var open = 0\n    for char in paren_string {\n        if char == \"(\" {\n\
    \            open += 1\n            current += \"(\"\n        } else if char ==\
    \ \")\" {\n            open -= 1\n            current += \")\"\n        }\n  \
    \      if open == 0 {\n            result.append(current)\n            current\
    \ = \"\"\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(separate_paren_groups(paren_string: \"(()()) ((())) () ((())()())\"\
    ) == [\"(()())\", \"((()))\", \"()\", \"((())()())\"])\nassert(separate_paren_groups(paren_string:\
    \ \"() (()) ((())) (((())))\") == [\"()\", \"(())\", \"((()))\", \"(((())))\"\
    ])\nassert(separate_paren_groups(paren_string: \"(()(())((())))\") == [\"(()(())((())))\"\
    ])\nassert(separate_paren_groups(paren_string: \"( ) (( )) (( )( ))\") == [\"\
    ()\", \"(())\", \"(()())\"])"
  status: Exception
  stderr: 'tmpy8udsbj1/tmpy8udsbj1.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4bfe6f3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4bfe3eab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4bfe3ea988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4bfe3e97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpy8udsbj1                        0x000056233828f7e7 <unavailable> + 6119

    5    libc.so.6                          0x00002b4bfe8df460 __libc_start_main +
    245

    6    tmpy8udsbj1                        0x000056233828f379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1659824687
- exit_code: -4
  program: "\n/// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n/// separate those group into separate\
    \ strings and return the array of those.\n/// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n/// Ignore\
    \ any spaces in the input string.\n/// >>> separate_paren_groups(paren_string:\
    \ \"( ) (( )) (( )( ))\")\n/// [\"()\", \"(())\", \"(()())\"]\nfunc separate_paren_groups(paren_string:\
    \ String) -> [String] {\n    var result: [String] = []\n    var current: String\
    \ = \"\"\n    var count: Int = 0\n    for char in paren_string {\n        if char\
    \ == \"(\" {\n            count += 1\n        } else if char == \")\" {\n    \
    \        count -= 1\n        }\n        if count == 0 {\n            if current\
    \ != \"\" {\n                result.append(current)\n                current =\
    \ \"\"\n            }\n        } else {\n            current.append(char)\n  \
    \      }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(separate_paren_groups(paren_string: \"(()()) ((())) () ((())()())\") ==\
    \ [\"(()())\", \"((()))\", \"()\", \"((())()())\"])\nassert(separate_paren_groups(paren_string:\
    \ \"() (()) ((())) (((())))\") == [\"()\", \"(())\", \"((()))\", \"(((())))\"\
    ])\nassert(separate_paren_groups(paren_string: \"(()(())((())))\") == [\"(()(())((())))\"\
    ])\nassert(separate_paren_groups(paren_string: \"( ) (( )) (( )( ))\") == [\"\
    ()\", \"(())\", \"(()())\"])"
  status: Exception
  stderr: 'tmp25hico66/tmp25hico66.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1e02e97c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1e02b8eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1e02b8e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1e02b8d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp25hico66                        0x0000562e43a4c7e7 <unavailable> + 6119

    5    libc.so.6                          0x00002b1e03083460 __libc_start_main +
    245

    6    tmp25hico66                        0x0000562e43a4c379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1659824687
- exit_code: -4
  program: "\n/// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n/// separate those group into separate\
    \ strings and return the array of those.\n/// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n/// Ignore\
    \ any spaces in the input string.\n/// >>> separate_paren_groups(paren_string:\
    \ \"( ) (( )) (( )( ))\")\n/// [\"()\", \"(())\", \"(()())\"]\nfunc separate_paren_groups(paren_string:\
    \ String) -> [String] {\n    var result = [String]()\n    var current = \"\"\n\
    \    var open = 0\n    var close = 0\n    for char in paren_string {\n       \
    \ if char == \"(\" {\n            open += 1\n        } else if char == \")\" {\n\
    \            close += 1\n        }\n        if open == close {\n            result.append(current)\n\
    \            current = \"\"\n            open = 0\n            close = 0\n   \
    \     } else {\n            current.append(char)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(separate_paren_groups(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [\"(()())\", \"((()))\", \"()\", \"((())()())\"\
    ])\nassert(separate_paren_groups(paren_string: \"() (()) ((())) (((())))\") ==\
    \ [\"()\", \"(())\", \"((()))\", \"(((())))\"])\nassert(separate_paren_groups(paren_string:\
    \ \"(()(())((())))\") == [\"(()(())((())))\"])\nassert(separate_paren_groups(paren_string:\
    \ \"( ) (( )) (( )( ))\") == [\"()\", \"(())\", \"(()())\"])"
  status: Exception
  stderr: 'tmp8mx2eckh/tmp8mx2eckh.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b15db2cfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b15dafc6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b15dafc6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b15dafc57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8mx2eckh                        0x000055c4fdeda7e7 <unavailable> + 6119

    5    libc.so.6                          0x00002b15db4bb460 __libc_start_main +
    245

    6    tmp8mx2eckh                        0x000055c4fdeda379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1659824687
- exit_code: 0
  program: "\n/// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n/// separate those group into separate\
    \ strings and return the array of those.\n/// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n/// Ignore\
    \ any spaces in the input string.\n/// >>> separate_paren_groups(paren_string:\
    \ \"( ) (( )) (( )( ))\")\n/// [\"()\", \"(())\", \"(()())\"]\nfunc separate_paren_groups(paren_string:\
    \ String) -> [String] {\n    var result: [String] = []\n    var currentGroup:\
    \ String = \"\"\n    var openParenCount: Int = 0\n    for char in paren_string\
    \ {\n        if char == \"(\" {\n            openParenCount += 1\n           \
    \ currentGroup += String(char)\n        } else if char == \")\" {\n          \
    \  openParenCount -= 1\n            currentGroup += String(char)\n        }\n\
    \        if openParenCount == 0 && currentGroup != \"\" {\n            result.append(currentGroup)\n\
    \            currentGroup = \"\"\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(separate_paren_groups(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [\"(()())\", \"((()))\", \"()\", \"((())()())\"])\nassert(separate_paren_groups(paren_string:\
    \ \"() (()) ((())) (((())))\") == [\"()\", \"(())\", \"((()))\", \"(((())))\"\
    ])\nassert(separate_paren_groups(paren_string: \"(()(())((())))\") == [\"(()(())((())))\"\
    ])\nassert(separate_paren_groups(paren_string: \"( ) (( )) (( )( ))\") == [\"\
    ()\", \"(())\", \"(()())\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824687
- exit_code: -4
  program: "\n/// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n/// separate those group into separate\
    \ strings and return the array of those.\n/// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n/// Ignore\
    \ any spaces in the input string.\n/// >>> separate_paren_groups(paren_string:\
    \ \"( ) (( )) (( )( ))\")\n/// [\"()\", \"(())\", \"(()())\"]\nfunc separate_paren_groups(paren_string:\
    \ String) -> [String] {\n    var result = [String]()\n    var current_group =\
    \ \"\"\n    var open_parens = 0\n    for char in paren_string {\n        if char\
    \ == \"(\" {\n            open_parens += 1\n            current_group += \"(\"\
    \n        } else if char == \")\" {\n            open_parens -= 1\n          \
    \  current_group += \")\"\n        }\n        if open_parens == 0 {\n        \
    \    result.append(current_group)\n            current_group = \"\"\n        }\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(separate_paren_groups(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [\"(()())\", \"((()))\", \"()\", \"((())()())\"\
    ])\nassert(separate_paren_groups(paren_string: \"() (()) ((())) (((())))\") ==\
    \ [\"()\", \"(())\", \"((()))\", \"(((())))\"])\nassert(separate_paren_groups(paren_string:\
    \ \"(()(())((())))\") == [\"(()(())((())))\"])\nassert(separate_paren_groups(paren_string:\
    \ \"( ) (( )) (( )( ))\") == [\"()\", \"(())\", \"(()())\"])"
  status: Exception
  stderr: 'tmpypij2s5c/tmpypij2s5c.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9ffcdf2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9ffcae9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9ffcae9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9ffcae87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpypij2s5c                        0x0000564db99f07e7 <unavailable> + 6119

    5    libc.so.6                          0x00002b9ffcfde460 __libc_start_main +
    245

    6    tmpypij2s5c                        0x0000564db99f0379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1659824687
- exit_code: -4
  program: "\n/// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n/// separate those group into separate\
    \ strings and return the array of those.\n/// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n/// Ignore\
    \ any spaces in the input string.\n/// >>> separate_paren_groups(paren_string:\
    \ \"( ) (( )) (( )( ))\")\n/// [\"()\", \"(())\", \"(()())\"]\nfunc separate_paren_groups(paren_string:\
    \ String) -> [String] {\n    var result: [String] = []\n    var current_string\
    \ = \"\"\n    var open_parens = 0\n    for char in paren_string {\n        if\
    \ char == \"(\" {\n            open_parens += 1\n            current_string +=\
    \ \"(\"\n        } else if char == \")\" {\n            open_parens -= 1\n   \
    \         current_string += \")\"\n        }\n        if open_parens == 0 {\n\
    \            result.append(current_string)\n            current_string = \"\"\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(separate_paren_groups(paren_string: \"(()()) ((())) () ((())()())\") ==\
    \ [\"(()())\", \"((()))\", \"()\", \"((())()())\"])\nassert(separate_paren_groups(paren_string:\
    \ \"() (()) ((())) (((())))\") == [\"()\", \"(())\", \"((()))\", \"(((())))\"\
    ])\nassert(separate_paren_groups(paren_string: \"(()(())((())))\") == [\"(()(())((())))\"\
    ])\nassert(separate_paren_groups(paren_string: \"( ) (( )) (( )( ))\") == [\"\
    ()\", \"(())\", \"(()())\"])"
  status: Exception
  stderr: 'tmpd4o62yre/tmpd4o62yre.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b21b4957c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b21b464eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b21b464e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b21b464d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpd4o62yre                        0x000055a8fe8dd797 <unavailable> + 6039

    5    libc.so.6                          0x00002b21b4b43460 __libc_start_main +
    245

    6    tmpd4o62yre                        0x000055a8fe8dd329 <unavailable> + 4905

    '
  stdout: ''
  timestamp: 1659824687
- exit_code: 0
  program: "\n/// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n/// separate those group into separate\
    \ strings and return the array of those.\n/// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n/// Ignore\
    \ any spaces in the input string.\n/// >>> separate_paren_groups(paren_string:\
    \ \"( ) (( )) (( )( ))\")\n/// [\"()\", \"(())\", \"(()())\"]\nfunc separate_paren_groups(paren_string:\
    \ String) -> [String] {\n    var result = [String]()\n    var current = \"\"\n\
    \    var stack = [Character]()\n    for char in paren_string {\n        if char\
    \ == \"(\" {\n            stack.append(char)\n            current.append(char)\n\
    \        } else if char == \")\" {\n            if stack.count == 0 {\n      \
    \          return []\n            }\n            stack.removeLast()\n        \
    \    current.append(char)\n            if stack.count == 0 {\n               \
    \ result.append(current)\n                current = \"\"\n            }\n    \
    \    }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(separate_paren_groups(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [\"(()())\", \"((()))\", \"()\", \"((())()())\"\
    ])\nassert(separate_paren_groups(paren_string: \"() (()) ((())) (((())))\") ==\
    \ [\"()\", \"(())\", \"((()))\", \"(((())))\"])\nassert(separate_paren_groups(paren_string:\
    \ \"(()(())((())))\") == [\"(()(())((())))\"])\nassert(separate_paren_groups(paren_string:\
    \ \"( ) (( )) (( )( ))\") == [\"()\", \"(())\", \"(()())\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824687
- exit_code: -4
  program: "\n/// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n/// separate those group into separate\
    \ strings and return the array of those.\n/// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n/// Ignore\
    \ any spaces in the input string.\n/// >>> separate_paren_groups(paren_string:\
    \ \"( ) (( )) (( )( ))\")\n/// [\"()\", \"(())\", \"(()())\"]\nfunc separate_paren_groups(paren_string:\
    \ String) -> [String] {\n    var result = [String]()\n    var temp = \"\"\n  \
    \  var count = 0\n    for char in paren_string {\n        if char == \"(\" {\n\
    \            count += 1\n        } else if char == \")\" {\n            count\
    \ -= 1\n        }\n        if count == 0 {\n            result.append(temp)\n\
    \            temp = \"\"\n        } else {\n            temp.append(char)\n  \
    \      }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(separate_paren_groups(paren_string: \"(()()) ((())) () ((())()())\") ==\
    \ [\"(()())\", \"((()))\", \"()\", \"((())()())\"])\nassert(separate_paren_groups(paren_string:\
    \ \"() (()) ((())) (((())))\") == [\"()\", \"(())\", \"((()))\", \"(((())))\"\
    ])\nassert(separate_paren_groups(paren_string: \"(()(())((())))\") == [\"(()(())((())))\"\
    ])\nassert(separate_paren_groups(paren_string: \"( ) (( )) (( )( ))\") == [\"\
    ()\", \"(())\", \"(()())\"])"
  status: Exception
  stderr: 'tmpjpf94o5_/tmpjpf94o5_.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b583521ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5834f15b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5834f15988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5834f147b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjpf94o5_                        0x000055c0fb6927e7 <unavailable> + 6119

    5    libc.so.6                          0x00002b583540a460 __libc_start_main +
    245

    6    tmpjpf94o5_                        0x000055c0fb692379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1659824687
- exit_code: -4
  program: "\n/// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n/// separate those group into separate\
    \ strings and return the array of those.\n/// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n/// Ignore\
    \ any spaces in the input string.\n/// >>> separate_paren_groups(paren_string:\
    \ \"( ) (( )) (( )( ))\")\n/// [\"()\", \"(())\", \"(()())\"]\nfunc separate_paren_groups(paren_string:\
    \ String) -> [String] {\n    var result: [String] = []\n    var temp: String =\
    \ \"\"\n    var openCount: Int = 0\n    var closeCount: Int = 0\n    for char\
    \ in paren_string {\n        if char == \"(\" {\n            openCount += 1\n\
    \        } else if char == \")\" {\n            closeCount += 1\n        }\n \
    \       if openCount == closeCount {\n            if temp != \"\" {\n        \
    \        result.append(temp)\n                temp = \"\"\n            }\n   \
    \     } else {\n            temp.append(char)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(separate_paren_groups(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [\"(()())\", \"((()))\", \"()\", \"((())()())\"])\nassert(separate_paren_groups(paren_string:\
    \ \"() (()) ((())) (((())))\") == [\"()\", \"(())\", \"((()))\", \"(((())))\"\
    ])\nassert(separate_paren_groups(paren_string: \"(()(())((())))\") == [\"(()(())((())))\"\
    ])\nassert(separate_paren_groups(paren_string: \"( ) (( )) (( )( ))\") == [\"\
    ()\", \"(())\", \"(()())\"])"
  status: Exception
  stderr: 'tmpb3fyb0kh/tmpb3fyb0kh.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b28f287ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b28f2571b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b28f2571988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b28f25707b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpb3fyb0kh                        0x00005569adf837e7 <unavailable> + 6119

    5    libc.so.6                          0x00002b28f2a66460 __libc_start_main +
    245

    6    tmpb3fyb0kh                        0x00005569adf83379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1659824687
- exit_code: -4
  program: "\n/// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n/// separate those group into separate\
    \ strings and return the array of those.\n/// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n/// Ignore\
    \ any spaces in the input string.\n/// >>> separate_paren_groups(paren_string:\
    \ \"( ) (( )) (( )( ))\")\n/// [\"()\", \"(())\", \"(()())\"]\nfunc separate_paren_groups(paren_string:\
    \ String) -> [String] {\n    var result: [String] = []\n    var current_group:\
    \ String = \"\"\n    var open_paren_count: Int = 0\n    for char in paren_string\
    \ {\n        if char == \"(\" {\n            open_paren_count += 1\n         \
    \   current_group += String(char)\n        } else if char == \")\" {\n       \
    \     open_paren_count -= 1\n            current_group += String(char)\n     \
    \   }\n        if open_paren_count == 0 {\n            result.append(current_group)\n\
    \            current_group = \"\"\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(separate_paren_groups(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [\"(()())\", \"((()))\", \"()\", \"((())()())\"])\nassert(separate_paren_groups(paren_string:\
    \ \"() (()) ((())) (((())))\") == [\"()\", \"(())\", \"((()))\", \"(((())))\"\
    ])\nassert(separate_paren_groups(paren_string: \"(()(())((())))\") == [\"(()(())((())))\"\
    ])\nassert(separate_paren_groups(paren_string: \"( ) (( )) (( )( ))\") == [\"\
    ()\", \"(())\", \"(()())\"])"
  status: Exception
  stderr: 'tmp8lpwgxlv/tmp8lpwgxlv.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9d38726c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9d3841db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9d3841d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9d3841c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8lpwgxlv                        0x0000563d7f9917e7 <unavailable> + 6119

    5    libc.so.6                          0x00002b9d38912460 __libc_start_main +
    245

    6    tmp8lpwgxlv                        0x0000563d7f991379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1659824687
- exit_code: -4
  program: "\n/// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n/// separate those group into separate\
    \ strings and return the array of those.\n/// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n/// Ignore\
    \ any spaces in the input string.\n/// >>> separate_paren_groups(paren_string:\
    \ \"( ) (( )) (( )( ))\")\n/// [\"()\", \"(())\", \"(()())\"]\nfunc separate_paren_groups(paren_string:\
    \ String) -> [String] {\n    var result = [String]()\n    var current = \"\"\n\
    \    var count = 0\n    for char in paren_string {\n        if char == \"(\" {\n\
    \            count += 1\n        } else if char == \")\" {\n            count\
    \ -= 1\n        }\n        if count == 0 && char == \")\" {\n            result.append(current)\n\
    \            current = \"\"\n        } else if char != \" \" {\n            current.append(char)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(separate_paren_groups(paren_string: \"(()()) ((())) () ((())()())\") ==\
    \ [\"(()())\", \"((()))\", \"()\", \"((())()())\"])\nassert(separate_paren_groups(paren_string:\
    \ \"() (()) ((())) (((())))\") == [\"()\", \"(())\", \"((()))\", \"(((())))\"\
    ])\nassert(separate_paren_groups(paren_string: \"(()(())((())))\") == [\"(()(())((())))\"\
    ])\nassert(separate_paren_groups(paren_string: \"( ) (( )) (( )( ))\") == [\"\
    ()\", \"(())\", \"(()())\"])"
  status: Exception
  stderr: 'tmpub7n4ip2/tmpub7n4ip2.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acddfd14c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acddfa0bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acddfa0b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acddfa0a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpub7n4ip2                        0x000055de6b7627e7 <unavailable> + 6119

    5    libc.so.6                          0x00002acddff00460 __libc_start_main +
    245

    6    tmpub7n4ip2                        0x000055de6b762379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1659824687
- exit_code: -4
  program: "\n/// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n/// separate those group into separate\
    \ strings and return the array of those.\n/// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n/// Ignore\
    \ any spaces in the input string.\n/// >>> separate_paren_groups(paren_string:\
    \ \"( ) (( )) (( )( ))\")\n/// [\"()\", \"(())\", \"(()())\"]\nfunc separate_paren_groups(paren_string:\
    \ String) -> [String] {\n    var result = [String]()\n    var current = \"\"\n\
    \    var open = 0\n    for char in paren_string {\n        if char == \"(\" {\n\
    \            open += 1\n            current += \"(\"\n        } else if char ==\
    \ \")\" {\n            open -= 1\n            current += \")\"\n        }\n  \
    \      if open == 0 {\n            result.append(current)\n            current\
    \ = \"\"\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(separate_paren_groups(paren_string: \"(()()) ((())) () ((())()())\"\
    ) == [\"(()())\", \"((()))\", \"()\", \"((())()())\"])\nassert(separate_paren_groups(paren_string:\
    \ \"() (()) ((())) (((())))\") == [\"()\", \"(())\", \"((()))\", \"(((())))\"\
    ])\nassert(separate_paren_groups(paren_string: \"(()(())((())))\") == [\"(()(())((())))\"\
    ])\nassert(separate_paren_groups(paren_string: \"( ) (( )) (( )( ))\") == [\"\
    ()\", \"(())\", \"(()())\"])"
  status: Exception
  stderr: 'tmpy8udsbj1/tmpy8udsbj1.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4bfe6f3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4bfe3eab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4bfe3ea988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4bfe3e97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpy8udsbj1                        0x000056233828f7e7 <unavailable> + 6119

    5    libc.so.6                          0x00002b4bfe8df460 __libc_start_main +
    245

    6    tmpy8udsbj1                        0x000056233828f379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1659824687
- exit_code: 0
  program: "\n/// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n/// separate those group into separate\
    \ strings and return the array of those.\n/// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n/// Ignore\
    \ any spaces in the input string.\n/// >>> separate_paren_groups(paren_string:\
    \ \"( ) (( )) (( )( ))\")\n/// [\"()\", \"(())\", \"(()())\"]\nfunc separate_paren_groups(paren_string:\
    \ String) -> [String] {\n    var result: [String] = []\n    var current: String\
    \ = \"\"\n    var open_parens: Int = 0\n    for char in paren_string {\n     \
    \   if char == \"(\" {\n            open_parens += 1\n            current.append(char)\n\
    \        } else if char == \")\" {\n            open_parens -= 1\n           \
    \ current.append(char)\n        }\n        if open_parens == 0 && current != \"\
    \" {\n            result.append(current)\n            current = \"\"\n       \
    \ }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(separate_paren_groups(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [\"(()())\", \"((()))\", \"()\", \"((())()())\"\
    ])\nassert(separate_paren_groups(paren_string: \"() (()) ((())) (((())))\") ==\
    \ [\"()\", \"(())\", \"((()))\", \"(((())))\"])\nassert(separate_paren_groups(paren_string:\
    \ \"(()(())((())))\") == [\"(()(())((())))\"])\nassert(separate_paren_groups(paren_string:\
    \ \"( ) (( )) (( )( ))\") == [\"()\", \"(())\", \"(()())\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824687
- exit_code: 0
  program: "\n/// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n/// separate those group into separate\
    \ strings and return the array of those.\n/// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n/// Ignore\
    \ any spaces in the input string.\n/// >>> separate_paren_groups(paren_string:\
    \ \"( ) (( )) (( )( ))\")\n/// [\"()\", \"(())\", \"(()())\"]\nfunc separate_paren_groups(paren_string:\
    \ String) -> [String] {\n    var result: [String] = []\n    var current: String\
    \ = \"\"\n    var open_parens: Int = 0\n    for char in paren_string {\n     \
    \   if char == \"(\" {\n            open_parens += 1\n            current.append(char)\n\
    \        } else if char == \")\" {\n            open_parens -= 1\n           \
    \ current.append(char)\n        }\n        if open_parens == 0 && current != \"\
    \" {\n            result.append(current)\n            current = \"\"\n       \
    \ }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(separate_paren_groups(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [\"(()())\", \"((()))\", \"()\", \"((())()())\"\
    ])\nassert(separate_paren_groups(paren_string: \"() (()) ((())) (((())))\") ==\
    \ [\"()\", \"(())\", \"((()))\", \"(((())))\"])\nassert(separate_paren_groups(paren_string:\
    \ \"(()(())((())))\") == [\"(()(())((())))\"])\nassert(separate_paren_groups(paren_string:\
    \ \"( ) (( )) (( )( ))\") == [\"()\", \"(())\", \"(()())\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824687
- exit_code: -4
  program: "\n/// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n/// separate those group into separate\
    \ strings and return the array of those.\n/// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n/// Ignore\
    \ any spaces in the input string.\n/// >>> separate_paren_groups(paren_string:\
    \ \"( ) (( )) (( )( ))\")\n/// [\"()\", \"(())\", \"(()())\"]\nfunc separate_paren_groups(paren_string:\
    \ String) -> [String] {\n    var result: [String] = []\n    var current: String\
    \ = \"\"\n    var count: Int = 0\n    for char in paren_string {\n        if char\
    \ == \"(\" {\n            count += 1\n        } else if char == \")\" {\n    \
    \        count -= 1\n        }\n        if count == 0 {\n            result.append(current)\n\
    \            current = \"\"\n        } else {\n            current.append(char)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(separate_paren_groups(paren_string: \"(()()) ((())) () ((())()())\") ==\
    \ [\"(()())\", \"((()))\", \"()\", \"((())()())\"])\nassert(separate_paren_groups(paren_string:\
    \ \"() (()) ((())) (((())))\") == [\"()\", \"(())\", \"((()))\", \"(((())))\"\
    ])\nassert(separate_paren_groups(paren_string: \"(()(())((())))\") == [\"(()(())((())))\"\
    ])\nassert(separate_paren_groups(paren_string: \"( ) (( )) (( )( ))\") == [\"\
    ()\", \"(())\", \"(()())\"])"
  status: Exception
  stderr: 'tmpi9kq_nk3/tmpi9kq_nk3.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0124377c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b012406eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b012406e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b012406d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpi9kq_nk3                        0x00005626b628f787 <unavailable> + 6023

    5    libc.so.6                          0x00002b0124563460 __libc_start_main +
    245

    6    tmpi9kq_nk3                        0x00005626b628f319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1659824687
- exit_code: -4
  program: "\n/// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n/// separate those group into separate\
    \ strings and return the array of those.\n/// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n/// Ignore\
    \ any spaces in the input string.\n/// >>> separate_paren_groups(paren_string:\
    \ \"( ) (( )) (( )( ))\")\n/// [\"()\", \"(())\", \"(()())\"]\nfunc separate_paren_groups(paren_string:\
    \ String) -> [String] {\n    var result = [String]()\n    var temp = \"\"\n  \
    \  var open = 0\n    var close = 0\n    for char in paren_string {\n        if\
    \ char == \"(\" {\n            open += 1\n        } else if char == \")\" {\n\
    \            close += 1\n        }\n        if open == close {\n            result.append(temp)\n\
    \            temp = \"\"\n            open = 0\n            close = 0\n      \
    \  } else {\n            temp.append(char)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(separate_paren_groups(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [\"(()())\", \"((()))\", \"()\", \"((())()())\"])\nassert(separate_paren_groups(paren_string:\
    \ \"() (()) ((())) (((())))\") == [\"()\", \"(())\", \"((()))\", \"(((())))\"\
    ])\nassert(separate_paren_groups(paren_string: \"(()(())((())))\") == [\"(()(())((())))\"\
    ])\nassert(separate_paren_groups(paren_string: \"( ) (( )) (( )( ))\") == [\"\
    ()\", \"(())\", \"(()())\"])"
  status: Exception
  stderr: 'tmp2el8xgry/tmp2el8xgry.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9011814c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b901150bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b901150b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b901150a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2el8xgry                        0x000055fcdcf297e7 <unavailable> + 6119

    5    libc.so.6                          0x00002b9011a00460 __libc_start_main +
    245

    6    tmp2el8xgry                        0x000055fcdcf29379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1659824687
- exit_code: -4
  program: "\n/// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n/// separate those group into separate\
    \ strings and return the array of those.\n/// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n/// Ignore\
    \ any spaces in the input string.\n/// >>> separate_paren_groups(paren_string:\
    \ \"( ) (( )) (( )( ))\")\n/// [\"()\", \"(())\", \"(()())\"]\nfunc separate_paren_groups(paren_string:\
    \ String) -> [String] {\n    var result: [String] = []\n    var current_string\
    \ = \"\"\n    var current_open_parens = 0\n    for char in paren_string {\n  \
    \      if char == \"(\" {\n            current_open_parens += 1\n            current_string\
    \ += \"(\"\n        } else if char == \")\" {\n            current_open_parens\
    \ -= 1\n            current_string += \")\"\n        }\n        if current_open_parens\
    \ == 0 {\n            result.append(current_string)\n            current_string\
    \ = \"\"\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(separate_paren_groups(paren_string: \"(()()) ((())) () ((())()())\"\
    ) == [\"(()())\", \"((()))\", \"()\", \"((())()())\"])\nassert(separate_paren_groups(paren_string:\
    \ \"() (()) ((())) (((())))\") == [\"()\", \"(())\", \"((()))\", \"(((())))\"\
    ])\nassert(separate_paren_groups(paren_string: \"(()(())((())))\") == [\"(()(())((())))\"\
    ])\nassert(separate_paren_groups(paren_string: \"( ) (( )) (( )( ))\") == [\"\
    ()\", \"(())\", \"(()())\"])"
  status: Exception
  stderr: 'tmp5gux8lk5/tmp5gux8lk5.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af644d3bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af644a32b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af644a32988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af644a317b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5gux8lk5                        0x000055c6dd88b797 <unavailable> + 6039

    5    libc.so.6                          0x00002af644f27460 __libc_start_main +
    245

    6    tmp5gux8lk5                        0x000055c6dd88b329 <unavailable> + 4905

    '
  stdout: ''
  timestamp: 1659824687
- exit_code: 0
  program: "\n/// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n/// separate those group into separate\
    \ strings and return the array of those.\n/// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n/// Ignore\
    \ any spaces in the input string.\n/// >>> separate_paren_groups(paren_string:\
    \ \"( ) (( )) (( )( ))\")\n/// [\"()\", \"(())\", \"(()())\"]\nfunc separate_paren_groups(paren_string:\
    \ String) -> [String] {\n    var result: [String] = []\n    var current: String\
    \ = \"\"\n    var open: Int = 0\n    for char in paren_string {\n        if char\
    \ == \"(\" {\n            open += 1\n            current.append(char)\n      \
    \  } else if char == \")\" {\n            open -= 1\n            current.append(char)\n\
    \        }\n        if open == 0 && current != \"\" {\n            result.append(current)\n\
    \            current = \"\"\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(separate_paren_groups(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [\"(()())\", \"((()))\", \"()\", \"((())()())\"])\nassert(separate_paren_groups(paren_string:\
    \ \"() (()) ((())) (((())))\") == [\"()\", \"(())\", \"((()))\", \"(((())))\"\
    ])\nassert(separate_paren_groups(paren_string: \"(()(())((())))\") == [\"(()(())((())))\"\
    ])\nassert(separate_paren_groups(paren_string: \"( ) (( )) (( )( ))\") == [\"\
    ()\", \"(())\", \"(()())\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824687
- exit_code: -4
  program: "\n/// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n/// separate those group into separate\
    \ strings and return the array of those.\n/// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n/// Ignore\
    \ any spaces in the input string.\n/// >>> separate_paren_groups(paren_string:\
    \ \"( ) (( )) (( )( ))\")\n/// [\"()\", \"(())\", \"(()())\"]\nfunc separate_paren_groups(paren_string:\
    \ String) -> [String] {\n    var result: [String] = []\n    var current_group:\
    \ String = \"\"\n    var open_parens: Int = 0\n    for char in paren_string {\n\
    \        if char == \"(\" {\n            open_parens += 1\n            current_group\
    \ += String(char)\n        } else if char == \")\" {\n            open_parens\
    \ -= 1\n            current_group += String(char)\n        }\n        if open_parens\
    \ == 0 {\n            result.append(current_group)\n            current_group\
    \ = \"\"\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(separate_paren_groups(paren_string: \"(()()) ((())) () ((())()())\"\
    ) == [\"(()())\", \"((()))\", \"()\", \"((())()())\"])\nassert(separate_paren_groups(paren_string:\
    \ \"() (()) ((())) (((())))\") == [\"()\", \"(())\", \"((()))\", \"(((())))\"\
    ])\nassert(separate_paren_groups(paren_string: \"(()(())((())))\") == [\"(()(())((())))\"\
    ])\nassert(separate_paren_groups(paren_string: \"( ) (( )) (( )( ))\") == [\"\
    ()\", \"(())\", \"(()())\"])"
  status: Exception
  stderr: 'tmp75iu15po/tmp75iu15po.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b33bb404c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b33bb0fbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b33bb0fb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b33bb0fa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp75iu15po                        0x000055a82b0bb7e7 <unavailable> + 6119

    5    libc.so.6                          0x00002b33bb5f0460 __libc_start_main +
    245

    6    tmp75iu15po                        0x000055a82b0bb379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1659824687
- exit_code: -4
  program: "\n/// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n/// separate those group into separate\
    \ strings and return the array of those.\n/// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n/// Ignore\
    \ any spaces in the input string.\n/// >>> separate_paren_groups(paren_string:\
    \ \"( ) (( )) (( )( ))\")\n/// [\"()\", \"(())\", \"(()())\"]\nfunc separate_paren_groups(paren_string:\
    \ String) -> [String] {\n    var result = [String]()\n    var current = \"\"\n\
    \    var open = 0\n    for c in paren_string {\n        if c == \"(\" {\n    \
    \        open += 1\n            current.append(c)\n        } else if c == \")\"\
    \ {\n            open -= 1\n            current.append(c)\n        }\n       \
    \ if open == 0 {\n            result.append(current)\n            current = \"\
    \"\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(separate_paren_groups(paren_string: \"(()()) ((())) () ((())()())\") ==\
    \ [\"(()())\", \"((()))\", \"()\", \"((())()())\"])\nassert(separate_paren_groups(paren_string:\
    \ \"() (()) ((())) (((())))\") == [\"()\", \"(())\", \"((()))\", \"(((())))\"\
    ])\nassert(separate_paren_groups(paren_string: \"(()(())((())))\") == [\"(()(())((())))\"\
    ])\nassert(separate_paren_groups(paren_string: \"( ) (( )) (( )( ))\") == [\"\
    ()\", \"(())\", \"(()())\"])"
  status: Exception
  stderr: 'tmp5pv4tht3/tmp5pv4tht3.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2af1c7dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2af1974b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2af1974988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2af19737b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5pv4tht3                        0x000056027457a7e7 <unavailable> + 6119

    5    libc.so.6                          0x00002b2af1e69460 __libc_start_main +
    245

    6    tmp5pv4tht3                        0x000056027457a379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1659824687
- exit_code: -4
  program: "\n/// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n/// separate those group into separate\
    \ strings and return the array of those.\n/// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n/// Ignore\
    \ any spaces in the input string.\n/// >>> separate_paren_groups(paren_string:\
    \ \"( ) (( )) (( )( ))\")\n/// [\"()\", \"(())\", \"(()())\"]\nfunc separate_paren_groups(paren_string:\
    \ String) -> [String] {\n    var result: [String] = []\n    var current: String\
    \ = \"\"\n    var openCount: Int = 0\n    var closeCount: Int = 0\n    for char\
    \ in paren_string {\n        if char == \"(\" {\n            openCount += 1\n\
    \        } else if char == \")\" {\n            closeCount += 1\n        }\n \
    \       if openCount == closeCount {\n            if openCount != 0 {\n      \
    \          result.append(current)\n                current = \"\"\n          \
    \      openCount = 0\n                closeCount = 0\n            }\n        }\
    \ else {\n            current.append(char)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(separate_paren_groups(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [\"(()())\", \"((()))\", \"()\", \"((())()())\"])\nassert(separate_paren_groups(paren_string:\
    \ \"() (()) ((())) (((())))\") == [\"()\", \"(())\", \"((()))\", \"(((())))\"\
    ])\nassert(separate_paren_groups(paren_string: \"(()(())((())))\") == [\"(()(())((())))\"\
    ])\nassert(separate_paren_groups(paren_string: \"( ) (( )) (( )( ))\") == [\"\
    ()\", \"(())\", \"(()())\"])"
  status: Exception
  stderr: 'tmplhwhvt2i/tmplhwhvt2i.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1519cb6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b15199adb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b15199ad988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b15199ac7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplhwhvt2i                        0x000056243fb99787 <unavailable> + 6023

    5    libc.so.6                          0x00002b1519ea2460 __libc_start_main +
    245

    6    tmplhwhvt2i                        0x000056243fb99319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1659824687
- exit_code: -4
  program: "\n/// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n/// separate those group into separate\
    \ strings and return the array of those.\n/// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n/// Ignore\
    \ any spaces in the input string.\n/// >>> separate_paren_groups(paren_string:\
    \ \"( ) (( )) (( )( ))\")\n/// [\"()\", \"(())\", \"(()())\"]\nfunc separate_paren_groups(paren_string:\
    \ String) -> [String] {\n    var result = [String]()\n    var current = \"\"\n\
    \    var open = 0\n    for c in paren_string {\n        if c == \"(\" {\n    \
    \        open += 1\n            current.append(c)\n        } else if c == \")\"\
    \ {\n            open -= 1\n            current.append(c)\n        }\n       \
    \ if open == 0 {\n            result.append(current)\n            current = \"\
    \"\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(separate_paren_groups(paren_string: \"(()()) ((())) () ((())()())\") ==\
    \ [\"(()())\", \"((()))\", \"()\", \"((())()())\"])\nassert(separate_paren_groups(paren_string:\
    \ \"() (()) ((())) (((())))\") == [\"()\", \"(())\", \"((()))\", \"(((())))\"\
    ])\nassert(separate_paren_groups(paren_string: \"(()(())((())))\") == [\"(()(())((())))\"\
    ])\nassert(separate_paren_groups(paren_string: \"( ) (( )) (( )( ))\") == [\"\
    ()\", \"(())\", \"(()())\"])"
  status: Exception
  stderr: 'tmp5pv4tht3/tmp5pv4tht3.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2af1c7dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2af1974b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2af1974988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2af19737b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5pv4tht3                        0x000056027457a7e7 <unavailable> + 6119

    5    libc.so.6                          0x00002b2af1e69460 __libc_start_main +
    245

    6    tmp5pv4tht3                        0x000056027457a379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1659824687
- exit_code: -4
  program: "\n/// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n/// separate those group into separate\
    \ strings and return the array of those.\n/// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n/// Ignore\
    \ any spaces in the input string.\n/// >>> separate_paren_groups(paren_string:\
    \ \"( ) (( )) (( )( ))\")\n/// [\"()\", \"(())\", \"(()())\"]\nfunc separate_paren_groups(paren_string:\
    \ String) -> [String] {\n    var result = [String]()\n    var current_group =\
    \ \"\"\n    var open_parens = 0\n    for char in paren_string {\n        if char\
    \ == \"(\" {\n            open_parens += 1\n            current_group += \"(\"\
    \n        } else if char == \")\" {\n            open_parens -= 1\n          \
    \  current_group += \")\"\n        }\n        if open_parens == 0 {\n        \
    \    result.append(current_group)\n            current_group = \"\"\n        }\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(separate_paren_groups(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [\"(()())\", \"((()))\", \"()\", \"((())()())\"\
    ])\nassert(separate_paren_groups(paren_string: \"() (()) ((())) (((())))\") ==\
    \ [\"()\", \"(())\", \"((()))\", \"(((())))\"])\nassert(separate_paren_groups(paren_string:\
    \ \"(()(())((())))\") == [\"(()(())((())))\"])\nassert(separate_paren_groups(paren_string:\
    \ \"( ) (( )) (( )( ))\") == [\"()\", \"(())\", \"(()())\"])"
  status: Exception
  stderr: 'tmpypij2s5c/tmpypij2s5c.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9ffcdf2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9ffcae9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9ffcae9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9ffcae87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpypij2s5c                        0x0000564db99f07e7 <unavailable> + 6119

    5    libc.so.6                          0x00002b9ffcfde460 __libc_start_main +
    245

    6    tmpypij2s5c                        0x0000564db99f0379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1659824687
- exit_code: -4
  program: "\n/// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n/// separate those group into separate\
    \ strings and return the array of those.\n/// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n/// Ignore\
    \ any spaces in the input string.\n/// >>> separate_paren_groups(paren_string:\
    \ \"( ) (( )) (( )( ))\")\n/// [\"()\", \"(())\", \"(()())\"]\nfunc separate_paren_groups(paren_string:\
    \ String) -> [String] {\n    var result = [String]()\n    var current = \"\"\n\
    \    var open = 0\n    for char in paren_string {\n        if char == \"(\" {\n\
    \            open += 1\n            current += \"(\"\n        } else if char ==\
    \ \")\" {\n            open -= 1\n            current += \")\"\n        }\n  \
    \      if open == 0 {\n            result.append(current)\n            current\
    \ = \"\"\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(separate_paren_groups(paren_string: \"(()()) ((())) () ((())()())\"\
    ) == [\"(()())\", \"((()))\", \"()\", \"((())()())\"])\nassert(separate_paren_groups(paren_string:\
    \ \"() (()) ((())) (((())))\") == [\"()\", \"(())\", \"((()))\", \"(((())))\"\
    ])\nassert(separate_paren_groups(paren_string: \"(()(())((())))\") == [\"(()(())((())))\"\
    ])\nassert(separate_paren_groups(paren_string: \"( ) (( )) (( )( ))\") == [\"\
    ()\", \"(())\", \"(()())\"])"
  status: Exception
  stderr: 'tmpy8udsbj1/tmpy8udsbj1.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4bfe6f3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4bfe3eab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4bfe3ea988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4bfe3e97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpy8udsbj1                        0x000056233828f7e7 <unavailable> + 6119

    5    libc.so.6                          0x00002b4bfe8df460 __libc_start_main +
    245

    6    tmpy8udsbj1                        0x000056233828f379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1659824687
- exit_code: 0
  program: "\n/// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n/// separate those group into separate\
    \ strings and return the array of those.\n/// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n/// Ignore\
    \ any spaces in the input string.\n/// >>> separate_paren_groups(paren_string:\
    \ \"( ) (( )) (( )( ))\")\n/// [\"()\", \"(())\", \"(()())\"]\nfunc separate_paren_groups(paren_string:\
    \ String) -> [String] {\n    var paren_groups: [String] = []\n    var current_group:\
    \ String = \"\"\n    var open_parens: Int = 0\n    for char in paren_string {\n\
    \        if char == \"(\" {\n            open_parens += 1\n            current_group\
    \ += String(char)\n        } else if char == \")\" {\n            open_parens\
    \ -= 1\n            current_group += String(char)\n        }\n        if open_parens\
    \ == 0 && current_group != \"\" {\n            paren_groups.append(current_group)\n\
    \            current_group = \"\"\n        }\n    }\n    return paren_groups\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(separate_paren_groups(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [\"(()())\", \"((()))\", \"()\", \"((())()())\"])\nassert(separate_paren_groups(paren_string:\
    \ \"() (()) ((())) (((())))\") == [\"()\", \"(())\", \"((()))\", \"(((())))\"\
    ])\nassert(separate_paren_groups(paren_string: \"(()(())((())))\") == [\"(()(())((())))\"\
    ])\nassert(separate_paren_groups(paren_string: \"( ) (( )) (( )( ))\") == [\"\
    ()\", \"(())\", \"(()())\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824687
- exit_code: -4
  program: "\n/// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n/// separate those group into separate\
    \ strings and return the array of those.\n/// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n/// Ignore\
    \ any spaces in the input string.\n/// >>> separate_paren_groups(paren_string:\
    \ \"( ) (( )) (( )( ))\")\n/// [\"()\", \"(())\", \"(()())\"]\nfunc separate_paren_groups(paren_string:\
    \ String) -> [String] {\n    var result = [String]()\n    var current_string =\
    \ \"\"\n    var open_parens = 0\n    for char in paren_string {\n        if char\
    \ == \"(\" {\n            open_parens += 1\n            current_string += \"(\"\
    \n        } else if char == \")\" {\n            open_parens -= 1\n          \
    \  current_string += \")\"\n        }\n        if open_parens == 0 {\n       \
    \     result.append(current_string)\n            current_string = \"\"\n     \
    \   }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(separate_paren_groups(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [\"(()())\", \"((()))\", \"()\", \"((())()())\"\
    ])\nassert(separate_paren_groups(paren_string: \"() (()) ((())) (((())))\") ==\
    \ [\"()\", \"(())\", \"((()))\", \"(((())))\"])\nassert(separate_paren_groups(paren_string:\
    \ \"(()(())((())))\") == [\"(()(())((())))\"])\nassert(separate_paren_groups(paren_string:\
    \ \"( ) (( )) (( )( ))\") == [\"()\", \"(())\", \"(()())\"])"
  status: Exception
  stderr: 'tmphyorjgwq/tmphyorjgwq.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8af40d8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8af3dcfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8af3dcf988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8af3dce7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphyorjgwq                        0x000055a7465207e7 <unavailable> + 6119

    5    libc.so.6                          0x00002b8af42c4460 __libc_start_main +
    245

    6    tmphyorjgwq                        0x000055a746520379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1659824687
- exit_code: -4
  program: "\n/// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n/// separate those group into separate\
    \ strings and return the array of those.\n/// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n/// Ignore\
    \ any spaces in the input string.\n/// >>> separate_paren_groups(paren_string:\
    \ \"( ) (( )) (( )( ))\")\n/// [\"()\", \"(())\", \"(()())\"]\nfunc separate_paren_groups(paren_string:\
    \ String) -> [String] {\n    var result: [String] = []\n    var current: String\
    \ = \"\"\n    var open: Int = 0\n    var close: Int = 0\n    for char in paren_string\
    \ {\n        if char == \"(\" {\n            open += 1\n        } else if char\
    \ == \")\" {\n            close += 1\n        }\n        if open == close {\n\
    \            if open != 0 {\n                result.append(current)\n        \
    \        current = \"\"\n                open = 0\n                close = 0\n\
    \            }\n        } else {\n            current.append(char)\n        }\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(separate_paren_groups(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [\"(()())\", \"((()))\", \"()\", \"((())()())\"\
    ])\nassert(separate_paren_groups(paren_string: \"() (()) ((())) (((())))\") ==\
    \ [\"()\", \"(())\", \"((()))\", \"(((())))\"])\nassert(separate_paren_groups(paren_string:\
    \ \"(()(())((())))\") == [\"(()(())((())))\"])\nassert(separate_paren_groups(paren_string:\
    \ \"( ) (( )) (( )( ))\") == [\"()\", \"(())\", \"(()())\"])"
  status: Exception
  stderr: 'tmp987a2z8b/tmp987a2z8b.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adb452a3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adb44f9ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adb44f9a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adb44f997b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp987a2z8b                        0x000056005617b787 <unavailable> + 6023

    5    libc.so.6                          0x00002adb4548f460 __libc_start_main +
    245

    6    tmp987a2z8b                        0x000056005617b319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1659824687
- exit_code: -4
  program: "\n/// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n/// separate those group into separate\
    \ strings and return the array of those.\n/// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n/// Ignore\
    \ any spaces in the input string.\n/// >>> separate_paren_groups(paren_string:\
    \ \"( ) (( )) (( )( ))\")\n/// [\"()\", \"(())\", \"(()())\"]\nfunc separate_paren_groups(paren_string:\
    \ String) -> [String] {\n    var paren_groups = [String]()\n    var current_group\
    \ = \"\"\n    var open_parens = 0\n    for char in paren_string {\n        if\
    \ char == \"(\" {\n            open_parens += 1\n            current_group +=\
    \ String(char)\n        } else if char == \")\" {\n            open_parens -=\
    \ 1\n            current_group += String(char)\n        }\n        if open_parens\
    \ == 0 {\n            paren_groups.append(current_group)\n            current_group\
    \ = \"\"\n        }\n    }\n    return paren_groups\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(separate_paren_groups(paren_string: \"(()()) ((())) () ((())()())\"\
    ) == [\"(()())\", \"((()))\", \"()\", \"((())()())\"])\nassert(separate_paren_groups(paren_string:\
    \ \"() (()) ((())) (((())))\") == [\"()\", \"(())\", \"((()))\", \"(((())))\"\
    ])\nassert(separate_paren_groups(paren_string: \"(()(())((())))\") == [\"(()(())((())))\"\
    ])\nassert(separate_paren_groups(paren_string: \"( ) (( )) (( )( ))\") == [\"\
    ()\", \"(())\", \"(()())\"])"
  status: Exception
  stderr: 'tmp6uc4k394/tmp6uc4k394.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5b6cec3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5b6cbbab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5b6cbba988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5b6cbb97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6uc4k394                        0x00005598b8d65837 <unavailable> + 6199

    5    libc.so.6                          0x00002b5b6d0af460 __libc_start_main +
    245

    6    tmp6uc4k394                        0x00005598b8d653c9 <unavailable> + 5065

    '
  stdout: ''
  timestamp: 1659824687
- exit_code: -4
  program: "\n/// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n/// separate those group into separate\
    \ strings and return the array of those.\n/// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n/// Ignore\
    \ any spaces in the input string.\n/// >>> separate_paren_groups(paren_string:\
    \ \"( ) (( )) (( )( ))\")\n/// [\"()\", \"(())\", \"(()())\"]\nfunc separate_paren_groups(paren_string:\
    \ String) -> [String] {\n    var result = [String]()\n    var temp = \"\"\n  \
    \  var open = 0\n    var close = 0\n    for char in paren_string {\n        if\
    \ char == \"(\" {\n            open += 1\n        } else if char == \")\" {\n\
    \            close += 1\n        }\n        if open == close {\n            result.append(temp)\n\
    \            temp = \"\"\n            open = 0\n            close = 0\n      \
    \  } else {\n            temp.append(char)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(separate_paren_groups(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [\"(()())\", \"((()))\", \"()\", \"((())()())\"])\nassert(separate_paren_groups(paren_string:\
    \ \"() (()) ((())) (((())))\") == [\"()\", \"(())\", \"((()))\", \"(((())))\"\
    ])\nassert(separate_paren_groups(paren_string: \"(()(())((())))\") == [\"(()(())((())))\"\
    ])\nassert(separate_paren_groups(paren_string: \"( ) (( )) (( )( ))\") == [\"\
    ()\", \"(())\", \"(()())\"])"
  status: Exception
  stderr: 'tmp2el8xgry/tmp2el8xgry.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9011814c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b901150bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b901150b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b901150a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2el8xgry                        0x000055fcdcf297e7 <unavailable> + 6119

    5    libc.so.6                          0x00002b9011a00460 __libc_start_main +
    245

    6    tmp2el8xgry                        0x000055fcdcf29379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1659824687
- exit_code: -4
  program: "\n/// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n/// separate those group into separate\
    \ strings and return the array of those.\n/// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n/// Ignore\
    \ any spaces in the input string.\n/// >>> separate_paren_groups(paren_string:\
    \ \"( ) (( )) (( )( ))\")\n/// [\"()\", \"(())\", \"(()())\"]\nfunc separate_paren_groups(paren_string:\
    \ String) -> [String] {\n    var result: [String] = []\n    var current_string\
    \ = \"\"\n    var open_paren_count = 0\n    for char in paren_string {\n     \
    \   if char == \"(\" {\n            open_paren_count += 1\n            current_string.append(char)\n\
    \        } else if char == \")\" {\n            open_paren_count -= 1\n      \
    \      current_string.append(char)\n        }\n        if open_paren_count ==\
    \ 0 {\n            result.append(current_string)\n            current_string =\
    \ \"\"\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(separate_paren_groups(paren_string: \"(()()) ((())) () ((())()())\"\
    ) == [\"(()())\", \"((()))\", \"()\", \"((())()())\"])\nassert(separate_paren_groups(paren_string:\
    \ \"() (()) ((())) (((())))\") == [\"()\", \"(())\", \"((()))\", \"(((())))\"\
    ])\nassert(separate_paren_groups(paren_string: \"(()(())((())))\") == [\"(()(())((())))\"\
    ])\nassert(separate_paren_groups(paren_string: \"( ) (( )) (( )( ))\") == [\"\
    ()\", \"(())\", \"(()())\"])"
  status: Exception
  stderr: 'tmpvtibezr_/tmpvtibezr_.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b70eaa08c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b70ea6ffb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b70ea6ff988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b70ea6fe7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvtibezr_                        0x0000563a4225c787 <unavailable> + 6023

    5    libc.so.6                          0x00002b70eabf4460 __libc_start_main +
    245

    6    tmpvtibezr_                        0x0000563a4225c319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1659824687
- exit_code: -4
  program: "\n/// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n/// separate those group into separate\
    \ strings and return the array of those.\n/// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n/// Ignore\
    \ any spaces in the input string.\n/// >>> separate_paren_groups(paren_string:\
    \ \"( ) (( )) (( )( ))\")\n/// [\"()\", \"(())\", \"(()())\"]\nfunc separate_paren_groups(paren_string:\
    \ String) -> [String] {\n    var result = [String]()\n    var current = \"\"\n\
    \    var open = 0\n    for char in paren_string {\n        if char == \"(\" {\n\
    \            open += 1\n            current += String(char)\n        } else if\
    \ char == \")\" {\n            open -= 1\n            current += String(char)\n\
    \        }\n        if open == 0 {\n            result.append(current)\n     \
    \       current = \"\"\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(separate_paren_groups(paren_string: \"(()()) ((())) ()\
    \ ((())()())\") == [\"(()())\", \"((()))\", \"()\", \"((())()())\"])\nassert(separate_paren_groups(paren_string:\
    \ \"() (()) ((())) (((())))\") == [\"()\", \"(())\", \"((()))\", \"(((())))\"\
    ])\nassert(separate_paren_groups(paren_string: \"(()(())((())))\") == [\"(()(())((())))\"\
    ])\nassert(separate_paren_groups(paren_string: \"( ) (( )) (( )( ))\") == [\"\
    ()\", \"(())\", \"(()())\"])"
  status: Exception
  stderr: 'tmp_se8cu6l/tmp_se8cu6l.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b37c9608c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b37c92ffb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b37c92ff988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b37c92fe7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_se8cu6l                        0x0000560622c66837 <unavailable> + 6199

    5    libc.so.6                          0x00002b37c97f4460 __libc_start_main +
    245

    6    tmp_se8cu6l                        0x0000560622c663c9 <unavailable> + 5065

    '
  stdout: ''
  timestamp: 1659824687
- exit_code: -4
  program: "\n/// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n/// separate those group into separate\
    \ strings and return the array of those.\n/// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n/// Ignore\
    \ any spaces in the input string.\n/// >>> separate_paren_groups(paren_string:\
    \ \"( ) (( )) (( )( ))\")\n/// [\"()\", \"(())\", \"(()())\"]\nfunc separate_paren_groups(paren_string:\
    \ String) -> [String] {\n    var result = [String]()\n    var current_group =\
    \ \"\"\n    var open_parens = 0\n    for char in paren_string {\n        if char\
    \ == \"(\" {\n            open_parens += 1\n            current_group += String(char)\n\
    \        } else if char == \")\" {\n            open_parens -= 1\n           \
    \ current_group += String(char)\n        }\n        if open_parens == 0 {\n  \
    \          result.append(current_group)\n            current_group = \"\"\n  \
    \      }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(separate_paren_groups(paren_string: \"(()()) ((())) () ((())()())\") ==\
    \ [\"(()())\", \"((()))\", \"()\", \"((())()())\"])\nassert(separate_paren_groups(paren_string:\
    \ \"() (()) ((())) (((())))\") == [\"()\", \"(())\", \"((()))\", \"(((())))\"\
    ])\nassert(separate_paren_groups(paren_string: \"(()(())((())))\") == [\"(()(())((())))\"\
    ])\nassert(separate_paren_groups(paren_string: \"( ) (( )) (( )( ))\") == [\"\
    ()\", \"(())\", \"(()())\"])"
  status: Exception
  stderr: 'tmp5qbxzuvz/tmp5qbxzuvz.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af5a85f9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af5a82f0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af5a82f0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af5a82ef7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5qbxzuvz                        0x000055e79ee27837 <unavailable> + 6199

    5    libc.so.6                          0x00002af5a87e5460 __libc_start_main +
    245

    6    tmp5qbxzuvz                        0x000055e79ee273c9 <unavailable> + 5065

    '
  stdout: ''
  timestamp: 1659824687
- exit_code: -4
  program: "\n/// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n/// separate those group into separate\
    \ strings and return the array of those.\n/// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n/// Ignore\
    \ any spaces in the input string.\n/// >>> separate_paren_groups(paren_string:\
    \ \"( ) (( )) (( )( ))\")\n/// [\"()\", \"(())\", \"(()())\"]\nfunc separate_paren_groups(paren_string:\
    \ String) -> [String] {\n    var result = [String]()\n    var current = \"\"\n\
    \    var open = 0\n    for char in paren_string {\n        if char == \"(\" {\n\
    \            open += 1\n            current += String(char)\n        } else if\
    \ char == \")\" {\n            open -= 1\n            current += String(char)\n\
    \        }\n        if open == 0 {\n            result.append(current)\n     \
    \       current = \"\"\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(separate_paren_groups(paren_string: \"(()()) ((())) ()\
    \ ((())()())\") == [\"(()())\", \"((()))\", \"()\", \"((())()())\"])\nassert(separate_paren_groups(paren_string:\
    \ \"() (()) ((())) (((())))\") == [\"()\", \"(())\", \"((()))\", \"(((())))\"\
    ])\nassert(separate_paren_groups(paren_string: \"(()(())((())))\") == [\"(()(())((())))\"\
    ])\nassert(separate_paren_groups(paren_string: \"( ) (( )) (( )( ))\") == [\"\
    ()\", \"(())\", \"(()())\"])"
  status: Exception
  stderr: 'tmp_se8cu6l/tmp_se8cu6l.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b37c9608c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b37c92ffb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b37c92ff988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b37c92fe7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_se8cu6l                        0x0000560622c66837 <unavailable> + 6199

    5    libc.so.6                          0x00002b37c97f4460 __libc_start_main +
    245

    6    tmp_se8cu6l                        0x0000560622c663c9 <unavailable> + 5065

    '
  stdout: ''
  timestamp: 1659824687
- exit_code: -4
  program: "\n/// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n/// separate those group into separate\
    \ strings and return the array of those.\n/// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n/// Ignore\
    \ any spaces in the input string.\n/// >>> separate_paren_groups(paren_string:\
    \ \"( ) (( )) (( )( ))\")\n/// [\"()\", \"(())\", \"(()())\"]\nfunc separate_paren_groups(paren_string:\
    \ String) -> [String] {\n    var result = [String]()\n    var current = \"\"\n\
    \    var open = 0\n    for char in paren_string {\n        if char == \"(\" {\n\
    \            open += 1\n            current += String(char)\n        } else if\
    \ char == \")\" {\n            open -= 1\n            current += String(char)\n\
    \        }\n        if open == 0 {\n            result.append(current)\n     \
    \       current = \"\"\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(separate_paren_groups(paren_string: \"(()()) ((())) ()\
    \ ((())()())\") == [\"(()())\", \"((()))\", \"()\", \"((())()())\"])\nassert(separate_paren_groups(paren_string:\
    \ \"() (()) ((())) (((())))\") == [\"()\", \"(())\", \"((()))\", \"(((())))\"\
    ])\nassert(separate_paren_groups(paren_string: \"(()(())((())))\") == [\"(()(())((())))\"\
    ])\nassert(separate_paren_groups(paren_string: \"( ) (( )) (( )( ))\") == [\"\
    ()\", \"(())\", \"(()())\"])"
  status: Exception
  stderr: 'tmp_se8cu6l/tmp_se8cu6l.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b37c9608c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b37c92ffb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b37c92ff988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b37c92fe7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_se8cu6l                        0x0000560622c66837 <unavailable> + 6199

    5    libc.so.6                          0x00002b37c97f4460 __libc_start_main +
    245

    6    tmp_se8cu6l                        0x0000560622c663c9 <unavailable> + 5065

    '
  stdout: ''
  timestamp: 1659824687
- exit_code: 0
  program: "\n/// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n/// separate those group into separate\
    \ strings and return the array of those.\n/// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n/// Ignore\
    \ any spaces in the input string.\n/// >>> separate_paren_groups(paren_string:\
    \ \"( ) (( )) (( )( ))\")\n/// [\"()\", \"(())\", \"(()())\"]\nfunc separate_paren_groups(paren_string:\
    \ String) -> [String] {\n    var paren_groups: [String] = []\n    var current_paren_group:\
    \ String = \"\"\n    var open_paren_count: Int = 0\n    for char in paren_string\
    \ {\n        if char == \"(\" {\n            open_paren_count += 1\n         \
    \   current_paren_group += String(char)\n        } else if char == \")\" {\n \
    \           open_paren_count -= 1\n            current_paren_group += String(char)\n\
    \            if open_paren_count == 0 {\n                paren_groups.append(current_paren_group)\n\
    \                current_paren_group = \"\"\n            }\n        }\n    }\n\
    \    return paren_groups\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(separate_paren_groups(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [\"(()())\", \"((()))\", \"()\", \"((())()())\"\
    ])\nassert(separate_paren_groups(paren_string: \"() (()) ((())) (((())))\") ==\
    \ [\"()\", \"(())\", \"((()))\", \"(((())))\"])\nassert(separate_paren_groups(paren_string:\
    \ \"(()(())((())))\") == [\"(()(())((())))\"])\nassert(separate_paren_groups(paren_string:\
    \ \"( ) (( )) (( )( ))\") == [\"()\", \"(())\", \"(()())\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824687
- exit_code: -4
  program: "\n/// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n/// separate those group into separate\
    \ strings and return the array of those.\n/// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n/// Ignore\
    \ any spaces in the input string.\n/// >>> separate_paren_groups(paren_string:\
    \ \"( ) (( )) (( )( ))\")\n/// [\"()\", \"(())\", \"(()())\"]\nfunc separate_paren_groups(paren_string:\
    \ String) -> [String] {\n    var result: [String] = []\n    var current_string\
    \ = \"\"\n    var open_paren_count = 0\n    for char in paren_string {\n     \
    \   if char == \"(\" {\n            open_paren_count += 1\n            current_string.append(char)\n\
    \        } else if char == \")\" {\n            open_paren_count -= 1\n      \
    \      current_string.append(char)\n        }\n        if open_paren_count ==\
    \ 0 {\n            result.append(current_string)\n            current_string =\
    \ \"\"\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(separate_paren_groups(paren_string: \"(()()) ((())) () ((())()())\"\
    ) == [\"(()())\", \"((()))\", \"()\", \"((())()())\"])\nassert(separate_paren_groups(paren_string:\
    \ \"() (()) ((())) (((())))\") == [\"()\", \"(())\", \"((()))\", \"(((())))\"\
    ])\nassert(separate_paren_groups(paren_string: \"(()(())((())))\") == [\"(()(())((())))\"\
    ])\nassert(separate_paren_groups(paren_string: \"( ) (( )) (( )( ))\") == [\"\
    ()\", \"(())\", \"(()())\"])"
  status: Exception
  stderr: 'tmpvtibezr_/tmpvtibezr_.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b70eaa08c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b70ea6ffb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b70ea6ff988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b70ea6fe7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvtibezr_                        0x0000563a4225c787 <unavailable> + 6023

    5    libc.so.6                          0x00002b70eabf4460 __libc_start_main +
    245

    6    tmpvtibezr_                        0x0000563a4225c319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1659824687
- exit_code: -4
  program: "\n/// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n/// separate those group into separate\
    \ strings and return the array of those.\n/// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n/// Ignore\
    \ any spaces in the input string.\n/// >>> separate_paren_groups(paren_string:\
    \ \"( ) (( )) (( )( ))\")\n/// [\"()\", \"(())\", \"(()())\"]\nfunc separate_paren_groups(paren_string:\
    \ String) -> [String] {\n    var result: [String] = []\n    var current_group:\
    \ String = \"\"\n    var open_paren_count: Int = 0\n    for char in paren_string\
    \ {\n        if char == \"(\" {\n            open_paren_count += 1\n         \
    \   current_group += String(char)\n        } else if char == \")\" {\n       \
    \     open_paren_count -= 1\n            current_group += String(char)\n     \
    \   }\n        if open_paren_count == 0 {\n            result.append(current_group)\n\
    \            current_group = \"\"\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(separate_paren_groups(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [\"(()())\", \"((()))\", \"()\", \"((())()())\"])\nassert(separate_paren_groups(paren_string:\
    \ \"() (()) ((())) (((())))\") == [\"()\", \"(())\", \"((()))\", \"(((())))\"\
    ])\nassert(separate_paren_groups(paren_string: \"(()(())((())))\") == [\"(()(())((())))\"\
    ])\nassert(separate_paren_groups(paren_string: \"( ) (( )) (( )( ))\") == [\"\
    ()\", \"(())\", \"(()())\"])"
  status: Exception
  stderr: 'tmp8lpwgxlv/tmp8lpwgxlv.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9d38726c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9d3841db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9d3841d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9d3841c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8lpwgxlv                        0x0000563d7f9917e7 <unavailable> + 6119

    5    libc.so.6                          0x00002b9d38912460 __libc_start_main +
    245

    6    tmp8lpwgxlv                        0x0000563d7f991379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1659824687
- exit_code: -4
  program: "\n/// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n/// separate those group into separate\
    \ strings and return the array of those.\n/// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n/// Ignore\
    \ any spaces in the input string.\n/// >>> separate_paren_groups(paren_string:\
    \ \"( ) (( )) (( )( ))\")\n/// [\"()\", \"(())\", \"(()())\"]\nfunc separate_paren_groups(paren_string:\
    \ String) -> [String] {\n    var result = [String]()\n    var current_group =\
    \ \"\"\n    var open_parens = 0\n    for char in paren_string {\n        if char\
    \ == \"(\" {\n            open_parens += 1\n            current_group += String(char)\n\
    \        } else if char == \")\" {\n            open_parens -= 1\n           \
    \ current_group += String(char)\n        }\n        if open_parens == 0 {\n  \
    \          result.append(current_group)\n            current_group = \"\"\n  \
    \      }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(separate_paren_groups(paren_string: \"(()()) ((())) () ((())()())\") ==\
    \ [\"(()())\", \"((()))\", \"()\", \"((())()())\"])\nassert(separate_paren_groups(paren_string:\
    \ \"() (()) ((())) (((())))\") == [\"()\", \"(())\", \"((()))\", \"(((())))\"\
    ])\nassert(separate_paren_groups(paren_string: \"(()(())((())))\") == [\"(()(())((())))\"\
    ])\nassert(separate_paren_groups(paren_string: \"( ) (( )) (( )( ))\") == [\"\
    ()\", \"(())\", \"(()())\"])"
  status: Exception
  stderr: 'tmp5qbxzuvz/tmp5qbxzuvz.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af5a85f9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af5a82f0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af5a82f0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af5a82ef7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5qbxzuvz                        0x000055e79ee27837 <unavailable> + 6199

    5    libc.so.6                          0x00002af5a87e5460 __libc_start_main +
    245

    6    tmp5qbxzuvz                        0x000055e79ee273c9 <unavailable> + 5065

    '
  stdout: ''
  timestamp: 1659824687
- exit_code: -4
  program: "\n/// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n/// separate those group into separate\
    \ strings and return the array of those.\n/// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n/// Ignore\
    \ any spaces in the input string.\n/// >>> separate_paren_groups(paren_string:\
    \ \"( ) (( )) (( )( ))\")\n/// [\"()\", \"(())\", \"(()())\"]\nfunc separate_paren_groups(paren_string:\
    \ String) -> [String] {\n    var result = [String]()\n    var current_group =\
    \ \"\"\n    var open_parens = 0\n    for char in paren_string {\n        if char\
    \ == \"(\" {\n            open_parens += 1\n            current_group += \"(\"\
    \n        } else if char == \")\" {\n            open_parens -= 1\n          \
    \  current_group += \")\"\n        }\n        if open_parens == 0 {\n        \
    \    result.append(current_group)\n            current_group = \"\"\n        }\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(separate_paren_groups(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [\"(()())\", \"((()))\", \"()\", \"((())()())\"\
    ])\nassert(separate_paren_groups(paren_string: \"() (()) ((())) (((())))\") ==\
    \ [\"()\", \"(())\", \"((()))\", \"(((())))\"])\nassert(separate_paren_groups(paren_string:\
    \ \"(()(())((())))\") == [\"(()(())((())))\"])\nassert(separate_paren_groups(paren_string:\
    \ \"( ) (( )) (( )( ))\") == [\"()\", \"(())\", \"(()())\"])"
  status: Exception
  stderr: 'tmpypij2s5c/tmpypij2s5c.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9ffcdf2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9ffcae9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9ffcae9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9ffcae87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpypij2s5c                        0x0000564db99f07e7 <unavailable> + 6119

    5    libc.so.6                          0x00002b9ffcfde460 __libc_start_main +
    245

    6    tmpypij2s5c                        0x0000564db99f0379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1659824687
- exit_code: -4
  program: "\n/// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n/// separate those group into separate\
    \ strings and return the array of those.\n/// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n/// Ignore\
    \ any spaces in the input string.\n/// >>> separate_paren_groups(paren_string:\
    \ \"( ) (( )) (( )( ))\")\n/// [\"()\", \"(())\", \"(()())\"]\nfunc separate_paren_groups(paren_string:\
    \ String) -> [String] {\n    var paren_groups = [String]()\n    var paren_group\
    \ = \"\"\n    var open_parens = 0\n    for char in paren_string {\n        if\
    \ char == \"(\" {\n            open_parens += 1\n            paren_group += String(char)\n\
    \        } else if char == \")\" {\n            open_parens -= 1\n           \
    \ paren_group += String(char)\n        }\n        if open_parens == 0 {\n    \
    \        paren_groups.append(paren_group)\n            paren_group = \"\"\n  \
    \      }\n    }\n    return paren_groups\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(separate_paren_groups(paren_string: \"(()()) ((())) () ((())()())\") ==\
    \ [\"(()())\", \"((()))\", \"()\", \"((())()())\"])\nassert(separate_paren_groups(paren_string:\
    \ \"() (()) ((())) (((())))\") == [\"()\", \"(())\", \"((()))\", \"(((())))\"\
    ])\nassert(separate_paren_groups(paren_string: \"(()(())((())))\") == [\"(()(())((())))\"\
    ])\nassert(separate_paren_groups(paren_string: \"( ) (( )) (( )( ))\") == [\"\
    ()\", \"(())\", \"(()())\"])"
  status: Exception
  stderr: 'tmp09qmod1t/tmp09qmod1t.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b512fd5bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b512fa52b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b512fa52988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b512fa517b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp09qmod1t                        0x000055716b874837 <unavailable> + 6199

    5    libc.so.6                          0x00002b512ff47460 __libc_start_main +
    245

    6    tmp09qmod1t                        0x000055716b8743c9 <unavailable> + 5065

    '
  stdout: ''
  timestamp: 1659824687
- exit_code: -4
  program: "\n/// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n/// separate those group into separate\
    \ strings and return the array of those.\n/// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n/// Ignore\
    \ any spaces in the input string.\n/// >>> separate_paren_groups(paren_string:\
    \ \"( ) (( )) (( )( ))\")\n/// [\"()\", \"(())\", \"(()())\"]\nfunc separate_paren_groups(paren_string:\
    \ String) -> [String] {\n    var result = [String]()\n    var current_paren_group\
    \ = \"\"\n    var open_paren_count = 0\n    for char in paren_string {\n     \
    \   if char == \"(\" {\n            open_paren_count += 1\n            current_paren_group\
    \ += String(char)\n        } else if char == \")\" {\n            open_paren_count\
    \ -= 1\n            current_paren_group += String(char)\n        }\n        if\
    \ open_paren_count == 0 {\n            result.append(current_paren_group)\n  \
    \          current_paren_group = \"\"\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(separate_paren_groups(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [\"(()())\", \"((()))\", \"()\", \"((())()())\"])\nassert(separate_paren_groups(paren_string:\
    \ \"() (()) ((())) (((())))\") == [\"()\", \"(())\", \"((()))\", \"(((())))\"\
    ])\nassert(separate_paren_groups(paren_string: \"(()(())((())))\") == [\"(()(())((())))\"\
    ])\nassert(separate_paren_groups(paren_string: \"( ) (( )) (( )( ))\") == [\"\
    ()\", \"(())\", \"(()())\"])"
  status: Exception
  stderr: 'tmp8sqhx3e4/tmp8sqhx3e4.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b57f29bcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b57f26b3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b57f26b3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b57f26b27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8sqhx3e4                        0x000056516ade4837 <unavailable> + 6199

    5    libc.so.6                          0x00002b57f2ba8460 __libc_start_main +
    245

    6    tmp8sqhx3e4                        0x000056516ade43c9 <unavailable> + 5065

    '
  stdout: ''
  timestamp: 1659824687
- exit_code: -4
  program: "\n/// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n/// separate those group into separate\
    \ strings and return the array of those.\n/// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n/// Ignore\
    \ any spaces in the input string.\n/// >>> separate_paren_groups(paren_string:\
    \ \"( ) (( )) (( )( ))\")\n/// [\"()\", \"(())\", \"(()())\"]\nfunc separate_paren_groups(paren_string:\
    \ String) -> [String] {\n    var result = [String]()\n    var current_group =\
    \ \"\"\n    var open_parens = 0\n    for char in paren_string {\n        if char\
    \ == \"(\" {\n            open_parens += 1\n            current_group += \"(\"\
    \n        } else if char == \")\" {\n            open_parens -= 1\n          \
    \  current_group += \")\"\n        }\n        if open_parens == 0 {\n        \
    \    result.append(current_group)\n            current_group = \"\"\n        }\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(separate_paren_groups(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [\"(()())\", \"((()))\", \"()\", \"((())()())\"\
    ])\nassert(separate_paren_groups(paren_string: \"() (()) ((())) (((())))\") ==\
    \ [\"()\", \"(())\", \"((()))\", \"(((())))\"])\nassert(separate_paren_groups(paren_string:\
    \ \"(()(())((())))\") == [\"(()(())((())))\"])\nassert(separate_paren_groups(paren_string:\
    \ \"( ) (( )) (( )( ))\") == [\"()\", \"(())\", \"(()())\"])"
  status: Exception
  stderr: 'tmpypij2s5c/tmpypij2s5c.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9ffcdf2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9ffcae9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9ffcae9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9ffcae87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpypij2s5c                        0x0000564db99f07e7 <unavailable> + 6119

    5    libc.so.6                          0x00002b9ffcfde460 __libc_start_main +
    245

    6    tmpypij2s5c                        0x0000564db99f0379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1659824687
- exit_code: -4
  program: "\n/// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n/// separate those group into separate\
    \ strings and return the array of those.\n/// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n/// Ignore\
    \ any spaces in the input string.\n/// >>> separate_paren_groups(paren_string:\
    \ \"( ) (( )) (( )( ))\")\n/// [\"()\", \"(())\", \"(()())\"]\nfunc separate_paren_groups(paren_string:\
    \ String) -> [String] {\n    var result = [String]()\n    var current = \"\"\n\
    \    var open = 0\n    for char in paren_string {\n        if char == \"(\" {\n\
    \            open += 1\n            current += \"(\"\n        } else if char ==\
    \ \")\" {\n            open -= 1\n            current += \")\"\n        }\n  \
    \      if open == 0 {\n            result.append(current)\n            current\
    \ = \"\"\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(separate_paren_groups(paren_string: \"(()()) ((())) () ((())()())\"\
    ) == [\"(()())\", \"((()))\", \"()\", \"((())()())\"])\nassert(separate_paren_groups(paren_string:\
    \ \"() (()) ((())) (((())))\") == [\"()\", \"(())\", \"((()))\", \"(((())))\"\
    ])\nassert(separate_paren_groups(paren_string: \"(()(())((())))\") == [\"(()(())((())))\"\
    ])\nassert(separate_paren_groups(paren_string: \"( ) (( )) (( )( ))\") == [\"\
    ()\", \"(())\", \"(()())\"])"
  status: Exception
  stderr: 'tmpy8udsbj1/tmpy8udsbj1.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4bfe6f3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4bfe3eab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4bfe3ea988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4bfe3e97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpy8udsbj1                        0x000056233828f7e7 <unavailable> + 6119

    5    libc.so.6                          0x00002b4bfe8df460 __libc_start_main +
    245

    6    tmpy8udsbj1                        0x000056233828f379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1659824687
- exit_code: 0
  program: "\n/// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n/// separate those group into separate\
    \ strings and return the array of those.\n/// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n/// Ignore\
    \ any spaces in the input string.\n/// >>> separate_paren_groups(paren_string:\
    \ \"( ) (( )) (( )( ))\")\n/// [\"()\", \"(())\", \"(()())\"]\nfunc separate_paren_groups(paren_string:\
    \ String) -> [String] {\n    var result: [String] = []\n    var current: String\
    \ = \"\"\n    var open: Int = 0\n    for char in paren_string {\n        if char\
    \ == \"(\" {\n            open += 1\n            current.append(char)\n      \
    \  } else if char == \")\" {\n            open -= 1\n            current.append(char)\n\
    \        }\n        if open == 0 && current != \"\" {\n            result.append(current)\n\
    \            current = \"\"\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(separate_paren_groups(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [\"(()())\", \"((()))\", \"()\", \"((())()())\"])\nassert(separate_paren_groups(paren_string:\
    \ \"() (()) ((())) (((())))\") == [\"()\", \"(())\", \"((()))\", \"(((())))\"\
    ])\nassert(separate_paren_groups(paren_string: \"(()(())((())))\") == [\"(()(())((())))\"\
    ])\nassert(separate_paren_groups(paren_string: \"( ) (( )) (( )( ))\") == [\"\
    ()\", \"(())\", \"(()())\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824687
- exit_code: 0
  program: "\n/// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n/// separate those group into separate\
    \ strings and return the array of those.\n/// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n/// Ignore\
    \ any spaces in the input string.\n/// >>> separate_paren_groups(paren_string:\
    \ \"( ) (( )) (( )( ))\")\n/// [\"()\", \"(())\", \"(()())\"]\nfunc separate_paren_groups(paren_string:\
    \ String) -> [String] {\n    var paren_groups: [String] = []\n    var current_group:\
    \ String = \"\"\n    var open_parens: Int = 0\n    for char in paren_string {\n\
    \        if char == \"(\" {\n            open_parens += 1\n            current_group\
    \ += String(char)\n        } else if char == \")\" {\n            open_parens\
    \ -= 1\n            current_group += String(char)\n        }\n        if open_parens\
    \ == 0 && current_group != \"\" {\n            paren_groups.append(current_group)\n\
    \            current_group = \"\"\n        }\n    }\n    return paren_groups\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(separate_paren_groups(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [\"(()())\", \"((()))\", \"()\", \"((())()())\"])\nassert(separate_paren_groups(paren_string:\
    \ \"() (()) ((())) (((())))\") == [\"()\", \"(())\", \"((()))\", \"(((())))\"\
    ])\nassert(separate_paren_groups(paren_string: \"(()(())((())))\") == [\"(()(())((())))\"\
    ])\nassert(separate_paren_groups(paren_string: \"( ) (( )) (( )( ))\") == [\"\
    ()\", \"(())\", \"(()())\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824687
- exit_code: 1
  program: "\n/// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n/// separate those group into separate\
    \ strings and return the array of those.\n/// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n/// Ignore\
    \ any spaces in the input string.\n/// >>> separate_paren_groups(paren_string:\
    \ \"( ) (( )) (( )( ))\")\n/// [\"()\", \"(())\", \"(()())\"]\nfunc separate_paren_groups(paren_string:\
    \ String) -> [String] {\n    var result = [String]()\n    var paren_string = paren_string\n\
    \    while paren_string.count > 0 {\n        var paren_count = 0\n        var\
    \ paren_start = 0\n        var paren_end = 0\n        for (i, c) in paren_string.enumerated()\
    \ {\n            if c == \"(\" {\n                paren_count += 1\n         \
    \       if paren_count == 1 {\n                    paren_start = i\n         \
    \       }\n            } else if c == \")\" {\n                paren_count -=\
    \ 1\n                if paren_count == 0 {\n                    paren_end = i\n\
    \                    break\n                }\n            }\n        }\n    \
    \    result.append(paren_string[paren_start..<paren_end+1])\n        paren_string\
    \ = paren_string[paren_end+1..<paren_string.count]\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(separate_paren_groups(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [\"(()())\", \"((()))\", \"()\", \"((())()())\"])\nassert(separate_paren_groups(paren_string:\
    \ \"() (()) ((())) (((())))\") == [\"()\", \"(())\", \"((()))\", \"(((())))\"\
    ])\nassert(separate_paren_groups(paren_string: \"(()(())((())))\") == [\"(()(())((())))\"\
    ])\nassert(separate_paren_groups(paren_string: \"( ) (( )) (( )( ))\") == [\"\
    ()\", \"(())\", \"(()())\"])"
  status: SyntaxError
  stderr: "/tmp/tmp4g7apazn.swift:29:23: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an integer range, use a String.Index range instead.\n\
    \        result.append(paren_string[paren_start..<paren_end+1])\n            \
    \          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nSwift.String:5:12: note: 'subscript(_:)'\
    \ has been explicitly marked unavailable here\n    public subscript<R>(bounds:\
    \ R) -> String where R : RangeExpression, R.Bound == Int { get }\n           ^\n\
    /tmp/tmp4g7apazn.swift:30:24: error: 'subscript(_:)' is unavailable: cannot subscript\
    \ String with an integer range, use a String.Index range instead.\n        paren_string\
    \ = paren_string[paren_end+1..<paren_string.count]\n                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    Swift.String:5:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript<R>(bounds: R) -> String where R : RangeExpression,\
    \ R.Bound == Int { get }\n           ^\n"
  stdout: ''
  timestamp: 1659824687
- exit_code: -4
  program: "\n/// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n/// separate those group into separate\
    \ strings and return the array of those.\n/// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n/// Ignore\
    \ any spaces in the input string.\n/// >>> separate_paren_groups(paren_string:\
    \ \"( ) (( )) (( )( ))\")\n/// [\"()\", \"(())\", \"(()())\"]\nfunc separate_paren_groups(paren_string:\
    \ String) -> [String] {\n    var result = [String]()\n    var current = \"\"\n\
    \    var level = 0\n    for char in paren_string {\n        if char == \"(\" {\n\
    \            level += 1\n            current += \"(\"\n        } else if char\
    \ == \")\" {\n            level -= 1\n            current += \")\"\n        }\n\
    \        if level == 0 {\n            result.append(current)\n            current\
    \ = \"\"\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(separate_paren_groups(paren_string: \"(()()) ((())) () ((())()())\"\
    ) == [\"(()())\", \"((()))\", \"()\", \"((())()())\"])\nassert(separate_paren_groups(paren_string:\
    \ \"() (()) ((())) (((())))\") == [\"()\", \"(())\", \"((()))\", \"(((())))\"\
    ])\nassert(separate_paren_groups(paren_string: \"(()(())((())))\") == [\"(()(())((())))\"\
    ])\nassert(separate_paren_groups(paren_string: \"( ) (( )) (( )( ))\") == [\"\
    ()\", \"(())\", \"(()())\"])"
  status: Exception
  stderr: 'tmpanoug6pd/tmpanoug6pd.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b00f2cfdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b00f29f4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b00f29f4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b00f29f37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpanoug6pd                        0x0000563b3711c7e7 <unavailable> + 6119

    5    libc.so.6                          0x00002b00f2ee9460 __libc_start_main +
    245

    6    tmpanoug6pd                        0x0000563b3711c379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1659824687
- exit_code: -4
  program: "\n/// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n/// separate those group into separate\
    \ strings and return the array of those.\n/// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n/// Ignore\
    \ any spaces in the input string.\n/// >>> separate_paren_groups(paren_string:\
    \ \"( ) (( )) (( )( ))\")\n/// [\"()\", \"(())\", \"(()())\"]\nfunc separate_paren_groups(paren_string:\
    \ String) -> [String] {\n    var result: [String] = []\n    var current_string\
    \ = \"\"\n    var open_parens = 0\n    for char in paren_string {\n        if\
    \ char == \"(\" {\n            open_parens += 1\n            current_string +=\
    \ \"(\"\n        } else if char == \")\" {\n            open_parens -= 1\n   \
    \         current_string += \")\"\n        }\n        if open_parens == 0 {\n\
    \            result.append(current_string)\n            current_string = \"\"\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(separate_paren_groups(paren_string: \"(()()) ((())) () ((())()())\") ==\
    \ [\"(()())\", \"((()))\", \"()\", \"((())()())\"])\nassert(separate_paren_groups(paren_string:\
    \ \"() (()) ((())) (((())))\") == [\"()\", \"(())\", \"((()))\", \"(((())))\"\
    ])\nassert(separate_paren_groups(paren_string: \"(()(())((())))\") == [\"(()(())((())))\"\
    ])\nassert(separate_paren_groups(paren_string: \"( ) (( )) (( )( ))\") == [\"\
    ()\", \"(())\", \"(()())\"])"
  status: Exception
  stderr: 'tmpd4o62yre/tmpd4o62yre.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b21b4957c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b21b464eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b21b464e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b21b464d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpd4o62yre                        0x000055a8fe8dd797 <unavailable> + 6039

    5    libc.so.6                          0x00002b21b4b43460 __libc_start_main +
    245

    6    tmpd4o62yre                        0x000055a8fe8dd329 <unavailable> + 4905

    '
  stdout: ''
  timestamp: 1659824687
- exit_code: -4
  program: "\n/// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n/// separate those group into separate\
    \ strings and return the array of those.\n/// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n/// Ignore\
    \ any spaces in the input string.\n/// >>> separate_paren_groups(paren_string:\
    \ \"( ) (( )) (( )( ))\")\n/// [\"()\", \"(())\", \"(()())\"]\nfunc separate_paren_groups(paren_string:\
    \ String) -> [String] {\n    var result = [String]()\n    var paren_string = paren_string\n\
    \    while paren_string.count > 0 {\n        let first_paren = paren_string.firstIndex(of:\
    \ \"(\") ?? paren_string.endIndex\n        let last_paren = paren_string.lastIndex(of:\
    \ \")\") ?? paren_string.endIndex\n        let paren_group = String(paren_string[first_paren..<last_paren])\n\
    \        result.append(paren_group)\n        paren_string = String(paren_string[last_paren...])\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(separate_paren_groups(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [\"(()())\", \"((()))\", \"()\", \"((())()())\"\
    ])\nassert(separate_paren_groups(paren_string: \"() (()) ((())) (((())))\") ==\
    \ [\"()\", \"(())\", \"((()))\", \"(((())))\"])\nassert(separate_paren_groups(paren_string:\
    \ \"(()(())((())))\") == [\"(()(())((())))\"])\nassert(separate_paren_groups(paren_string:\
    \ \"( ) (( )) (( )( ))\") == [\"()\", \"(())\", \"(()())\"])"
  status: Exception
  stderr: 'Swift/Range.swift:743: Fatal error: Range requires lowerBound <= upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002b2cb6be7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2cb68de561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b2cb68de286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b2cb68de13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b2cb68ddbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmposq7tmx9                        0x00005613eba3c518 <unavailable> + 9496

    6    tmposq7tmx9                        0x00005613eba3b9e6 <unavailable> + 6630

    7    libc.so.6                          0x00002b2cb6dd3460 __libc_start_main +
    245

    8    tmposq7tmx9                        0x00005613eba3b6e9 <unavailable> + 5865

    '
  stdout: ''
  timestamp: 1659824687
- exit_code: -4
  program: "\n/// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n/// separate those group into separate\
    \ strings and return the array of those.\n/// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n/// Ignore\
    \ any spaces in the input string.\n/// >>> separate_paren_groups(paren_string:\
    \ \"( ) (( )) (( )( ))\")\n/// [\"()\", \"(())\", \"(()())\"]\nfunc separate_paren_groups(paren_string:\
    \ String) -> [String] {\n    var result = [String]()\n    var current = \"\"\n\
    \    var open = 0\n    for char in paren_string {\n        if char == \"(\" {\n\
    \            open += 1\n            current += String(char)\n        } else if\
    \ char == \")\" {\n            open -= 1\n            current += String(char)\n\
    \        }\n        if open == 0 {\n            result.append(current)\n     \
    \       current = \"\"\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(separate_paren_groups(paren_string: \"(()()) ((())) ()\
    \ ((())()())\") == [\"(()())\", \"((()))\", \"()\", \"((())()())\"])\nassert(separate_paren_groups(paren_string:\
    \ \"() (()) ((())) (((())))\") == [\"()\", \"(())\", \"((()))\", \"(((())))\"\
    ])\nassert(separate_paren_groups(paren_string: \"(()(())((())))\") == [\"(()(())((())))\"\
    ])\nassert(separate_paren_groups(paren_string: \"( ) (( )) (( )( ))\") == [\"\
    ()\", \"(())\", \"(()())\"])"
  status: Exception
  stderr: 'tmp_se8cu6l/tmp_se8cu6l.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b37c9608c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b37c92ffb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b37c92ff988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b37c92fe7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_se8cu6l                        0x0000560622c66837 <unavailable> + 6199

    5    libc.so.6                          0x00002b37c97f4460 __libc_start_main +
    245

    6    tmp_se8cu6l                        0x0000560622c663c9 <unavailable> + 5065

    '
  stdout: ''
  timestamp: 1659824687
- exit_code: -4
  program: "\n/// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n/// separate those group into separate\
    \ strings and return the array of those.\n/// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n/// Ignore\
    \ any spaces in the input string.\n/// >>> separate_paren_groups(paren_string:\
    \ \"( ) (( )) (( )( ))\")\n/// [\"()\", \"(())\", \"(()())\"]\nfunc separate_paren_groups(paren_string:\
    \ String) -> [String] {\n    var result = [String]()\n    var currentString =\
    \ \"\"\n    var openParen = 0\n    for char in paren_string {\n        if char\
    \ == \"(\" {\n            openParen += 1\n            currentString.append(char)\n\
    \        } else if char == \")\" {\n            openParen -= 1\n            currentString.append(char)\n\
    \        }\n        if openParen == 0 {\n            result.append(currentString)\n\
    \            currentString = \"\"\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(separate_paren_groups(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [\"(()())\", \"((()))\", \"()\", \"((())()())\"])\nassert(separate_paren_groups(paren_string:\
    \ \"() (()) ((())) (((())))\") == [\"()\", \"(())\", \"((()))\", \"(((())))\"\
    ])\nassert(separate_paren_groups(paren_string: \"(()(())((())))\") == [\"(()(())((())))\"\
    ])\nassert(separate_paren_groups(paren_string: \"( ) (( )) (( )( ))\") == [\"\
    ()\", \"(())\", \"(()())\"])"
  status: Exception
  stderr: 'tmpqo_xrsj5/tmpqo_xrsj5.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8e7cd45c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8e7ca3cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8e7ca3c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8e7ca3b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqo_xrsj5                        0x000055708a9297e7 <unavailable> + 6119

    5    libc.so.6                          0x00002b8e7cf31460 __libc_start_main +
    245

    6    tmpqo_xrsj5                        0x000055708a929379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1659824687
- exit_code: -4
  program: "\n/// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n/// separate those group into separate\
    \ strings and return the array of those.\n/// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n/// Ignore\
    \ any spaces in the input string.\n/// >>> separate_paren_groups(paren_string:\
    \ \"( ) (( )) (( )( ))\")\n/// [\"()\", \"(())\", \"(()())\"]\nfunc separate_paren_groups(paren_string:\
    \ String) -> [String] {\n    var result = [String]()\n    var current = \"\"\n\
    \    var open = 0\n    for char in paren_string {\n        if char == \"(\" {\n\
    \            open += 1\n            current += String(char)\n        } else if\
    \ char == \")\" {\n            open -= 1\n            current += String(char)\n\
    \        }\n        if open == 0 {\n            result.append(current)\n     \
    \       current = \"\"\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(separate_paren_groups(paren_string: \"(()()) ((())) ()\
    \ ((())()())\") == [\"(()())\", \"((()))\", \"()\", \"((())()())\"])\nassert(separate_paren_groups(paren_string:\
    \ \"() (()) ((())) (((())))\") == [\"()\", \"(())\", \"((()))\", \"(((())))\"\
    ])\nassert(separate_paren_groups(paren_string: \"(()(())((())))\") == [\"(()(())((())))\"\
    ])\nassert(separate_paren_groups(paren_string: \"( ) (( )) (( )( ))\") == [\"\
    ()\", \"(())\", \"(()())\"])"
  status: Exception
  stderr: 'tmp_se8cu6l/tmp_se8cu6l.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b37c9608c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b37c92ffb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b37c92ff988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b37c92fe7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_se8cu6l                        0x0000560622c66837 <unavailable> + 6199

    5    libc.so.6                          0x00002b37c97f4460 __libc_start_main +
    245

    6    tmp_se8cu6l                        0x0000560622c663c9 <unavailable> + 5065

    '
  stdout: ''
  timestamp: 1659824687
- exit_code: -4
  program: "\n/// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n/// separate those group into separate\
    \ strings and return the array of those.\n/// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n/// Ignore\
    \ any spaces in the input string.\n/// >>> separate_paren_groups(paren_string:\
    \ \"( ) (( )) (( )( ))\")\n/// [\"()\", \"(())\", \"(()())\"]\nfunc separate_paren_groups(paren_string:\
    \ String) -> [String] {\n    var result = [String]()\n    var current = \"\"\n\
    \    var open = 0\n    for char in paren_string {\n        if char == \"(\" {\n\
    \            open += 1\n            current += String(char)\n        } else if\
    \ char == \")\" {\n            open -= 1\n            current += String(char)\n\
    \        }\n        if open == 0 {\n            result.append(current)\n     \
    \       current = \"\"\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(separate_paren_groups(paren_string: \"(()()) ((())) ()\
    \ ((())()())\") == [\"(()())\", \"((()))\", \"()\", \"((())()())\"])\nassert(separate_paren_groups(paren_string:\
    \ \"() (()) ((())) (((())))\") == [\"()\", \"(())\", \"((()))\", \"(((())))\"\
    ])\nassert(separate_paren_groups(paren_string: \"(()(())((())))\") == [\"(()(())((())))\"\
    ])\nassert(separate_paren_groups(paren_string: \"( ) (( )) (( )( ))\") == [\"\
    ()\", \"(())\", \"(()())\"])"
  status: Exception
  stderr: 'tmp_se8cu6l/tmp_se8cu6l.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b37c9608c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b37c92ffb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b37c92ff988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b37c92fe7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_se8cu6l                        0x0000560622c66837 <unavailable> + 6199

    5    libc.so.6                          0x00002b37c97f4460 __libc_start_main +
    245

    6    tmp_se8cu6l                        0x0000560622c663c9 <unavailable> + 5065

    '
  stdout: ''
  timestamp: 1659824687
- exit_code: -4
  program: "\n/// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n/// separate those group into separate\
    \ strings and return the array of those.\n/// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n/// Ignore\
    \ any spaces in the input string.\n/// >>> separate_paren_groups(paren_string:\
    \ \"( ) (( )) (( )( ))\")\n/// [\"()\", \"(())\", \"(()())\"]\nfunc separate_paren_groups(paren_string:\
    \ String) -> [String] {\n    var result = [String]()\n    var temp = \"\"\n  \
    \  var count = 0\n    for char in paren_string {\n        if char == \"(\" {\n\
    \            count += 1\n        } else if char == \")\" {\n            count\
    \ -= 1\n        }\n        if count == 0 {\n            if temp != \"\" {\n  \
    \              result.append(temp)\n                temp = \"\"\n            }\n\
    \        } else {\n            temp.append(char)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(separate_paren_groups(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [\"(()())\", \"((()))\", \"()\", \"((())()())\"\
    ])\nassert(separate_paren_groups(paren_string: \"() (()) ((())) (((())))\") ==\
    \ [\"()\", \"(())\", \"((()))\", \"(((())))\"])\nassert(separate_paren_groups(paren_string:\
    \ \"(()(())((())))\") == [\"(()(())((())))\"])\nassert(separate_paren_groups(paren_string:\
    \ \"( ) (( )) (( )( ))\") == [\"()\", \"(())\", \"(()())\"])"
  status: Exception
  stderr: 'tmpeuyujl_o/tmpeuyujl_o.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b687ee8ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b687eb85b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b687eb85988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b687eb847b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeuyujl_o                        0x000055e3c967d837 <unavailable> + 6199

    5    libc.so.6                          0x00002b687f07a460 __libc_start_main +
    245

    6    tmpeuyujl_o                        0x000055e3c967d3c9 <unavailable> + 5065

    '
  stdout: ''
  timestamp: 1659824687
- exit_code: -4
  program: "\n/// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n/// separate those group into separate\
    \ strings and return the array of those.\n/// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n/// Ignore\
    \ any spaces in the input string.\n/// >>> separate_paren_groups(paren_string:\
    \ \"( ) (( )) (( )( ))\")\n/// [\"()\", \"(())\", \"(()())\"]\nfunc separate_paren_groups(paren_string:\
    \ String) -> [String] {\n    var result: [String] = []\n    var stack: [Character]\
    \ = []\n    var temp: [Character] = []\n    for char in paren_string {\n     \
    \   if char == \"(\" {\n            stack.append(char)\n        } else if char\
    \ == \")\" {\n            if stack.count > 0 {\n                stack.removeLast()\n\
    \                temp.append(char)\n            }\n        }\n        if stack.count\
    \ == 0 {\n            result.append(String(temp))\n            temp = []\n   \
    \     }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(separate_paren_groups(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [\"(()())\", \"((()))\", \"()\", \"((())()())\"\
    ])\nassert(separate_paren_groups(paren_string: \"() (()) ((())) (((())))\") ==\
    \ [\"()\", \"(())\", \"((()))\", \"(((())))\"])\nassert(separate_paren_groups(paren_string:\
    \ \"(()(())((())))\") == [\"(()(())((())))\"])\nassert(separate_paren_groups(paren_string:\
    \ \"( ) (( )) (( )( ))\") == [\"()\", \"(())\", \"(()())\"])"
  status: Exception
  stderr: 'tmpknvjhcek/tmpknvjhcek.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac8688ecc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac8685e3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac8685e3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac8685e27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpknvjhcek                        0x0000556f418af967 <unavailable> + 6503

    5    libc.so.6                          0x00002ac868ad8460 __libc_start_main +
    245

    6    tmpknvjhcek                        0x0000556f418af4f9 <unavailable> + 5369

    '
  stdout: ''
  timestamp: 1659824687
- exit_code: -4
  program: "\n/// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n/// separate those group into separate\
    \ strings and return the array of those.\n/// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n/// Ignore\
    \ any spaces in the input string.\n/// >>> separate_paren_groups(paren_string:\
    \ \"( ) (( )) (( )( ))\")\n/// [\"()\", \"(())\", \"(()())\"]\nfunc separate_paren_groups(paren_string:\
    \ String) -> [String] {\n    var result: [String] = []\n    var current_group:\
    \ String = \"\"\n    var open_paren_count: Int = 0\n    for char in paren_string\
    \ {\n        if char == \"(\" {\n            open_paren_count += 1\n         \
    \   current_group += \"(\"\n        } else if char == \")\" {\n            open_paren_count\
    \ -= 1\n            current_group += \")\"\n        }\n        if open_paren_count\
    \ == 0 {\n            result.append(current_group)\n            current_group\
    \ = \"\"\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(separate_paren_groups(paren_string: \"(()()) ((())) () ((())()())\"\
    ) == [\"(()())\", \"((()))\", \"()\", \"((())()())\"])\nassert(separate_paren_groups(paren_string:\
    \ \"() (()) ((())) (((())))\") == [\"()\", \"(())\", \"((()))\", \"(((())))\"\
    ])\nassert(separate_paren_groups(paren_string: \"(()(())((())))\") == [\"(()(())((())))\"\
    ])\nassert(separate_paren_groups(paren_string: \"( ) (( )) (( )( ))\") == [\"\
    ()\", \"(())\", \"(()())\"])"
  status: Exception
  stderr: 'tmp7zdzvt8s/tmp7zdzvt8s.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2d4fa15c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2d4f70cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2d4f70c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2d4f70b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7zdzvt8s                        0x0000560495b3a797 <unavailable> + 6039

    5    libc.so.6                          0x00002b2d4fc01460 __libc_start_main +
    245

    6    tmp7zdzvt8s                        0x0000560495b3a329 <unavailable> + 4905

    '
  stdout: ''
  timestamp: 1659824687
- exit_code: -4
  program: "\n/// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n/// separate those group into separate\
    \ strings and return the array of those.\n/// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n/// Ignore\
    \ any spaces in the input string.\n/// >>> separate_paren_groups(paren_string:\
    \ \"( ) (( )) (( )( ))\")\n/// [\"()\", \"(())\", \"(()())\"]\nfunc separate_paren_groups(paren_string:\
    \ String) -> [String] {\n    var result: [String] = []\n    var current_group:\
    \ String = \"\"\n    var open_parens: Int = 0\n    for c in paren_string {\n \
    \       if c == \"(\" {\n            open_parens += 1\n            current_group\
    \ += String(c)\n        } else if c == \")\" {\n            open_parens -= 1\n\
    \            current_group += String(c)\n        }\n        if open_parens ==\
    \ 0 {\n            result.append(current_group)\n            current_group = \"\
    \"\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(separate_paren_groups(paren_string: \"(()()) ((())) () ((())()())\") ==\
    \ [\"(()())\", \"((()))\", \"()\", \"((())()())\"])\nassert(separate_paren_groups(paren_string:\
    \ \"() (()) ((())) (((())))\") == [\"()\", \"(())\", \"((()))\", \"(((())))\"\
    ])\nassert(separate_paren_groups(paren_string: \"(()(())((())))\") == [\"(()(())((())))\"\
    ])\nassert(separate_paren_groups(paren_string: \"( ) (( )) (( )( ))\") == [\"\
    ()\", \"(())\", \"(()())\"])"
  status: Exception
  stderr: 'tmpksg9jtif/tmpksg9jtif.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b83488c1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b83485b8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b83485b8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b83485b77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpksg9jtif                        0x000055ede181a7e7 <unavailable> + 6119

    5    libc.so.6                          0x00002b8348aad460 __libc_start_main +
    245

    6    tmpksg9jtif                        0x000055ede181a379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1659824687
- exit_code: -4
  program: "\n/// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n/// separate those group into separate\
    \ strings and return the array of those.\n/// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n/// Ignore\
    \ any spaces in the input string.\n/// >>> separate_paren_groups(paren_string:\
    \ \"( ) (( )) (( )( ))\")\n/// [\"()\", \"(())\", \"(()())\"]\nfunc separate_paren_groups(paren_string:\
    \ String) -> [String] {\n    var result = [String]()\n    var current = \"\"\n\
    \    var open = 0\n    for c in paren_string {\n        if c == \"(\" {\n    \
    \        open += 1\n            current.append(c)\n        } else if c == \")\"\
    \ {\n            open -= 1\n            current.append(c)\n        }\n       \
    \ if open == 0 {\n            result.append(current)\n            current = \"\
    \"\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(separate_paren_groups(paren_string: \"(()()) ((())) () ((())()())\") ==\
    \ [\"(()())\", \"((()))\", \"()\", \"((())()())\"])\nassert(separate_paren_groups(paren_string:\
    \ \"() (()) ((())) (((())))\") == [\"()\", \"(())\", \"((()))\", \"(((())))\"\
    ])\nassert(separate_paren_groups(paren_string: \"(()(())((())))\") == [\"(()(())((())))\"\
    ])\nassert(separate_paren_groups(paren_string: \"( ) (( )) (( )( ))\") == [\"\
    ()\", \"(())\", \"(()())\"])"
  status: Exception
  stderr: 'tmp5pv4tht3/tmp5pv4tht3.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2af1c7dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2af1974b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2af1974988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2af19737b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5pv4tht3                        0x000056027457a7e7 <unavailable> + 6119

    5    libc.so.6                          0x00002b2af1e69460 __libc_start_main +
    245

    6    tmp5pv4tht3                        0x000056027457a379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1659824687
- exit_code: 0
  program: "\n/// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n/// separate those group into separate\
    \ strings and return the array of those.\n/// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n/// Ignore\
    \ any spaces in the input string.\n/// >>> separate_paren_groups(paren_string:\
    \ \"( ) (( )) (( )( ))\")\n/// [\"()\", \"(())\", \"(()())\"]\nfunc separate_paren_groups(paren_string:\
    \ String) -> [String] {\n    var paren_groups: [String] = []\n    var current_group:\
    \ String = \"\"\n    var open_parens: Int = 0\n    for char in paren_string {\n\
    \        if char == \"(\" {\n            open_parens += 1\n            current_group\
    \ += \"(\"\n        } else if char == \")\" {\n            open_parens -= 1\n\
    \            current_group += \")\"\n        }\n        if open_parens == 0 &&\
    \ current_group != \"\" {\n            paren_groups.append(current_group)\n  \
    \          current_group = \"\"\n        }\n    }\n    return paren_groups\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(separate_paren_groups(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [\"(()())\", \"((()))\", \"()\", \"((())()())\"])\nassert(separate_paren_groups(paren_string:\
    \ \"() (()) ((())) (((())))\") == [\"()\", \"(())\", \"((()))\", \"(((())))\"\
    ])\nassert(separate_paren_groups(paren_string: \"(()(())((())))\") == [\"(()(())((())))\"\
    ])\nassert(separate_paren_groups(paren_string: \"( ) (( )) (( )( ))\") == [\"\
    ()\", \"(())\", \"(()())\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824687
- exit_code: -4
  program: "\n/// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n/// separate those group into separate\
    \ strings and return the array of those.\n/// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n/// Ignore\
    \ any spaces in the input string.\n/// >>> separate_paren_groups(paren_string:\
    \ \"( ) (( )) (( )( ))\")\n/// [\"()\", \"(())\", \"(()())\"]\nfunc separate_paren_groups(paren_string:\
    \ String) -> [String] {\n    var result: [String] = []\n    var current_group:\
    \ String = \"\"\n    var open_paren_count: Int = 0\n    for char in paren_string\
    \ {\n        if char == \"(\" {\n            open_paren_count += 1\n         \
    \   current_group += String(char)\n        } else if char == \")\" {\n       \
    \     open_paren_count -= 1\n            current_group += String(char)\n     \
    \   }\n        if open_paren_count == 0 {\n            result.append(current_group)\n\
    \            current_group = \"\"\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(separate_paren_groups(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [\"(()())\", \"((()))\", \"()\", \"((())()())\"])\nassert(separate_paren_groups(paren_string:\
    \ \"() (()) ((())) (((())))\") == [\"()\", \"(())\", \"((()))\", \"(((())))\"\
    ])\nassert(separate_paren_groups(paren_string: \"(()(())((())))\") == [\"(()(())((())))\"\
    ])\nassert(separate_paren_groups(paren_string: \"( ) (( )) (( )( ))\") == [\"\
    ()\", \"(())\", \"(()())\"])"
  status: Exception
  stderr: 'tmp8lpwgxlv/tmp8lpwgxlv.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9d38726c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9d3841db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9d3841d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9d3841c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8lpwgxlv                        0x0000563d7f9917e7 <unavailable> + 6119

    5    libc.so.6                          0x00002b9d38912460 __libc_start_main +
    245

    6    tmp8lpwgxlv                        0x0000563d7f991379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1659824687
- exit_code: -4
  program: "\n/// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n/// separate those group into separate\
    \ strings and return the array of those.\n/// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n/// Ignore\
    \ any spaces in the input string.\n/// >>> separate_paren_groups(paren_string:\
    \ \"( ) (( )) (( )( ))\")\n/// [\"()\", \"(())\", \"(()())\"]\nfunc separate_paren_groups(paren_string:\
    \ String) -> [String] {\n    var result: [String] = []\n    var current: String\
    \ = \"\"\n    var count: Int = 0\n    for char in paren_string {\n        if char\
    \ == \"(\" {\n            count += 1\n        } else if char == \")\" {\n    \
    \        count -= 1\n        }\n        if count == 0 {\n            result.append(current)\n\
    \            current = \"\"\n        } else {\n            current.append(char)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(separate_paren_groups(paren_string: \"(()()) ((())) () ((())()())\") ==\
    \ [\"(()())\", \"((()))\", \"()\", \"((())()())\"])\nassert(separate_paren_groups(paren_string:\
    \ \"() (()) ((())) (((())))\") == [\"()\", \"(())\", \"((()))\", \"(((())))\"\
    ])\nassert(separate_paren_groups(paren_string: \"(()(())((())))\") == [\"(()(())((())))\"\
    ])\nassert(separate_paren_groups(paren_string: \"( ) (( )) (( )( ))\") == [\"\
    ()\", \"(())\", \"(()())\"])"
  status: Exception
  stderr: 'tmpi9kq_nk3/tmpi9kq_nk3.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0124377c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b012406eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b012406e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b012406d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpi9kq_nk3                        0x00005626b628f787 <unavailable> + 6023

    5    libc.so.6                          0x00002b0124563460 __libc_start_main +
    245

    6    tmpi9kq_nk3                        0x00005626b628f319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1659824687
- exit_code: -4
  program: "\n/// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n/// separate those group into separate\
    \ strings and return the array of those.\n/// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n/// Ignore\
    \ any spaces in the input string.\n/// >>> separate_paren_groups(paren_string:\
    \ \"( ) (( )) (( )( ))\")\n/// [\"()\", \"(())\", \"(()())\"]\nfunc separate_paren_groups(paren_string:\
    \ String) -> [String] {\n    var result = [String]()\n    var current_paren_group\
    \ = \"\"\n    var open_parens = 0\n    for char in paren_string {\n        if\
    \ char == \"(\" {\n            open_parens += 1\n            current_paren_group\
    \ += String(char)\n        } else if char == \")\" {\n            open_parens\
    \ -= 1\n            current_paren_group += String(char)\n        }\n        if\
    \ open_parens == 0 {\n            result.append(current_paren_group)\n       \
    \     current_paren_group = \"\"\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(separate_paren_groups(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [\"(()())\", \"((()))\", \"()\", \"((())()())\"])\nassert(separate_paren_groups(paren_string:\
    \ \"() (()) ((())) (((())))\") == [\"()\", \"(())\", \"((()))\", \"(((())))\"\
    ])\nassert(separate_paren_groups(paren_string: \"(()(())((())))\") == [\"(()(())((())))\"\
    ])\nassert(separate_paren_groups(paren_string: \"( ) (( )) (( )( ))\") == [\"\
    ()\", \"(())\", \"(()())\"])"
  status: Exception
  stderr: 'tmp_32blr05/tmp_32blr05.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac5ae8e0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac5ae5d7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac5ae5d7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac5ae5d67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_32blr05                        0x000055899ce22837 <unavailable> + 6199

    5    libc.so.6                          0x00002ac5aeacc460 __libc_start_main +
    245

    6    tmp_32blr05                        0x000055899ce223c9 <unavailable> + 5065

    '
  stdout: ''
  timestamp: 1659824687
- exit_code: -4
  program: "\n/// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n/// separate those group into separate\
    \ strings and return the array of those.\n/// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n/// Ignore\
    \ any spaces in the input string.\n/// >>> separate_paren_groups(paren_string:\
    \ \"( ) (( )) (( )( ))\")\n/// [\"()\", \"(())\", \"(()())\"]\nfunc separate_paren_groups(paren_string:\
    \ String) -> [String] {\n    var result = [String]()\n    var current_paren_group\
    \ = \"\"\n    var open_paren_count = 0\n    for char in paren_string {\n     \
    \   if char == \"(\" {\n            open_paren_count += 1\n            current_paren_group\
    \ += String(char)\n        } else if char == \")\" {\n            open_paren_count\
    \ -= 1\n            current_paren_group += String(char)\n        }\n        if\
    \ open_paren_count == 0 {\n            result.append(current_paren_group)\n  \
    \          current_paren_group = \"\"\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(separate_paren_groups(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [\"(()())\", \"((()))\", \"()\", \"((())()())\"])\nassert(separate_paren_groups(paren_string:\
    \ \"() (()) ((())) (((())))\") == [\"()\", \"(())\", \"((()))\", \"(((())))\"\
    ])\nassert(separate_paren_groups(paren_string: \"(()(())((())))\") == [\"(()(())((())))\"\
    ])\nassert(separate_paren_groups(paren_string: \"( ) (( )) (( )( ))\") == [\"\
    ()\", \"(())\", \"(()())\"])"
  status: Exception
  stderr: 'tmp8sqhx3e4/tmp8sqhx3e4.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b57f29bcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b57f26b3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b57f26b3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b57f26b27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8sqhx3e4                        0x000056516ade4837 <unavailable> + 6199

    5    libc.so.6                          0x00002b57f2ba8460 __libc_start_main +
    245

    6    tmp8sqhx3e4                        0x000056516ade43c9 <unavailable> + 5065

    '
  stdout: ''
  timestamp: 1659824687
- exit_code: -4
  program: "\n/// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n/// separate those group into separate\
    \ strings and return the array of those.\n/// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n/// Ignore\
    \ any spaces in the input string.\n/// >>> separate_paren_groups(paren_string:\
    \ \"( ) (( )) (( )( ))\")\n/// [\"()\", \"(())\", \"(()())\"]\nfunc separate_paren_groups(paren_string:\
    \ String) -> [String] {\n    var result: [String] = []\n    var current_group:\
    \ String = \"\"\n    var open_parens: Int = 0\n    for char in paren_string {\n\
    \        if char == \"(\" {\n            open_parens += 1\n            current_group\
    \ += String(char)\n        } else if char == \")\" {\n            open_parens\
    \ -= 1\n            current_group += String(char)\n        }\n        if open_parens\
    \ == 0 {\n            result.append(current_group)\n            current_group\
    \ = \"\"\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(separate_paren_groups(paren_string: \"(()()) ((())) () ((())()())\"\
    ) == [\"(()())\", \"((()))\", \"()\", \"((())()())\"])\nassert(separate_paren_groups(paren_string:\
    \ \"() (()) ((())) (((())))\") == [\"()\", \"(())\", \"((()))\", \"(((())))\"\
    ])\nassert(separate_paren_groups(paren_string: \"(()(())((())))\") == [\"(()(())((())))\"\
    ])\nassert(separate_paren_groups(paren_string: \"( ) (( )) (( )( ))\") == [\"\
    ()\", \"(())\", \"(()())\"])"
  status: Exception
  stderr: 'tmp75iu15po/tmp75iu15po.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b33bb404c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b33bb0fbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b33bb0fb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b33bb0fa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp75iu15po                        0x000055a82b0bb7e7 <unavailable> + 6119

    5    libc.so.6                          0x00002b33bb5f0460 __libc_start_main +
    245

    6    tmp75iu15po                        0x000055a82b0bb379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1659824687
- exit_code: -4
  program: "\n/// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n/// separate those group into separate\
    \ strings and return the array of those.\n/// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n/// Ignore\
    \ any spaces in the input string.\n/// >>> separate_paren_groups(paren_string:\
    \ \"( ) (( )) (( )( ))\")\n/// [\"()\", \"(())\", \"(()())\"]\nfunc separate_paren_groups(paren_string:\
    \ String) -> [String] {\n    var result = [String]()\n    var current_group =\
    \ \"\"\n    var open_parens = 0\n    for char in paren_string {\n        if char\
    \ == \"(\" {\n            open_parens += 1\n            current_group += String(char)\n\
    \        } else if char == \")\" {\n            open_parens -= 1\n           \
    \ current_group += String(char)\n        }\n        if open_parens == 0 {\n  \
    \          result.append(current_group)\n            current_group = \"\"\n  \
    \      }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(separate_paren_groups(paren_string: \"(()()) ((())) () ((())()())\") ==\
    \ [\"(()())\", \"((()))\", \"()\", \"((())()())\"])\nassert(separate_paren_groups(paren_string:\
    \ \"() (()) ((())) (((())))\") == [\"()\", \"(())\", \"((()))\", \"(((())))\"\
    ])\nassert(separate_paren_groups(paren_string: \"(()(())((())))\") == [\"(()(())((())))\"\
    ])\nassert(separate_paren_groups(paren_string: \"( ) (( )) (( )( ))\") == [\"\
    ()\", \"(())\", \"(()())\"])"
  status: Exception
  stderr: 'tmp5qbxzuvz/tmp5qbxzuvz.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af5a85f9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af5a82f0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af5a82f0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af5a82ef7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5qbxzuvz                        0x000055e79ee27837 <unavailable> + 6199

    5    libc.so.6                          0x00002af5a87e5460 __libc_start_main +
    245

    6    tmp5qbxzuvz                        0x000055e79ee273c9 <unavailable> + 5065

    '
  stdout: ''
  timestamp: 1659824687
- exit_code: 0
  program: "\n/// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n/// separate those group into separate\
    \ strings and return the array of those.\n/// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n/// Ignore\
    \ any spaces in the input string.\n/// >>> separate_paren_groups(paren_string:\
    \ \"( ) (( )) (( )( ))\")\n/// [\"()\", \"(())\", \"(()())\"]\nfunc separate_paren_groups(paren_string:\
    \ String) -> [String] {\n    var result: [String] = []\n    var current: String\
    \ = \"\"\n    var open: Int = 0\n    for char in paren_string {\n        if char\
    \ == \"(\" {\n            open += 1\n            current.append(char)\n      \
    \  } else if char == \")\" {\n            open -= 1\n            current.append(char)\n\
    \        }\n        if open == 0 && current != \"\" {\n            result.append(current)\n\
    \            current = \"\"\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(separate_paren_groups(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [\"(()())\", \"((()))\", \"()\", \"((())()())\"])\nassert(separate_paren_groups(paren_string:\
    \ \"() (()) ((())) (((())))\") == [\"()\", \"(())\", \"((()))\", \"(((())))\"\
    ])\nassert(separate_paren_groups(paren_string: \"(()(())((())))\") == [\"(()(())((())))\"\
    ])\nassert(separate_paren_groups(paren_string: \"( ) (( )) (( )( ))\") == [\"\
    ()\", \"(())\", \"(()())\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824687
- exit_code: 1
  program: "\n/// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n/// separate those group into separate\
    \ strings and return the array of those.\n/// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n/// Ignore\
    \ any spaces in the input string.\n/// >>> separate_paren_groups(paren_string:\
    \ \"( ) (( )) (( )( ))\")\n/// [\"()\", \"(())\", \"(()())\"]\nfunc separate_paren_groups(paren_string:\
    \ String) -> [String] {\n    var result: [String] = []\n    var start = 0\n  \
    \  var end = 0\n    var open = 0\n    var close = 0\n    for i in 0..<paren_string.count\
    \ {\n        let index = paren_string.index(paren_string.startIndex, offsetBy:\
    \ i)\n        if paren_string[index] == \"(\" {\n            open += 1\n     \
    \   } else if paren_string[index] == \")\" {\n            close += 1\n       \
    \ }\n        if open == close {\n            end = i\n            let range =\
    \ start...end\n            let sub = paren_string[range]\n            result.append(String(sub))\n\
    \            start = i + 1\n            open = 0\n            close = 0\n    \
    \    }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(separate_paren_groups(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [\"(()())\", \"((()))\", \"()\", \"((())()())\"\
    ])\nassert(separate_paren_groups(paren_string: \"() (()) ((())) (((())))\") ==\
    \ [\"()\", \"(())\", \"((()))\", \"(((())))\"])\nassert(separate_paren_groups(paren_string:\
    \ \"(()(())((())))\") == [\"(()(())((())))\"])\nassert(separate_paren_groups(paren_string:\
    \ \"( ) (( )) (( )( ))\") == [\"()\", \"(())\", \"(()())\"])"
  status: SyntaxError
  stderr: "/tmp/tmp3s7212gy.swift:24:23: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an integer range, use a String.Index range instead.\n\
    \            let sub = paren_string[range]\n                      ^~~~~~~~~~~~~~~~~~~\n\
    Swift.String:5:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript<R>(bounds: R) -> String where R : RangeExpression,\
    \ R.Bound == Int { get }\n           ^\n"
  stdout: ''
  timestamp: 1659824687
- exit_code: -4
  program: "\n/// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n/// separate those group into separate\
    \ strings and return the array of those.\n/// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n/// Ignore\
    \ any spaces in the input string.\n/// >>> separate_paren_groups(paren_string:\
    \ \"( ) (( )) (( )( ))\")\n/// [\"()\", \"(())\", \"(()())\"]\nfunc separate_paren_groups(paren_string:\
    \ String) -> [String] {\n    var result = [String]()\n    var current = \"\"\n\
    \    var open = 0\n    for char in paren_string {\n        if char == \"(\" {\n\
    \            open += 1\n            current += \"(\"\n        } else if char ==\
    \ \")\" {\n            open -= 1\n            current += \")\"\n        }\n  \
    \      if open == 0 {\n            result.append(current)\n            current\
    \ = \"\"\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(separate_paren_groups(paren_string: \"(()()) ((())) () ((())()())\"\
    ) == [\"(()())\", \"((()))\", \"()\", \"((())()())\"])\nassert(separate_paren_groups(paren_string:\
    \ \"() (()) ((())) (((())))\") == [\"()\", \"(())\", \"((()))\", \"(((())))\"\
    ])\nassert(separate_paren_groups(paren_string: \"(()(())((())))\") == [\"(()(())((())))\"\
    ])\nassert(separate_paren_groups(paren_string: \"( ) (( )) (( )( ))\") == [\"\
    ()\", \"(())\", \"(()())\"])"
  status: Exception
  stderr: 'tmpy8udsbj1/tmpy8udsbj1.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4bfe6f3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4bfe3eab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4bfe3ea988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4bfe3e97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpy8udsbj1                        0x000056233828f7e7 <unavailable> + 6119

    5    libc.so.6                          0x00002b4bfe8df460 __libc_start_main +
    245

    6    tmpy8udsbj1                        0x000056233828f379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1659824687
- exit_code: -4
  program: "\n/// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n/// separate those group into separate\
    \ strings and return the array of those.\n/// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n/// Ignore\
    \ any spaces in the input string.\n/// >>> separate_paren_groups(paren_string:\
    \ \"( ) (( )) (( )( ))\")\n/// [\"()\", \"(())\", \"(()())\"]\nfunc separate_paren_groups(paren_string:\
    \ String) -> [String] {\n    var result = [String]()\n    var current_group =\
    \ \"\"\n    var open_parens = 0\n    for char in paren_string {\n        if char\
    \ == \"(\" {\n            open_parens += 1\n            current_group += String(char)\n\
    \        } else if char == \")\" {\n            open_parens -= 1\n           \
    \ current_group += String(char)\n        }\n        if open_parens == 0 {\n  \
    \          result.append(current_group)\n            current_group = \"\"\n  \
    \      }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(separate_paren_groups(paren_string: \"(()()) ((())) () ((())()())\") ==\
    \ [\"(()())\", \"((()))\", \"()\", \"((())()())\"])\nassert(separate_paren_groups(paren_string:\
    \ \"() (()) ((())) (((())))\") == [\"()\", \"(())\", \"((()))\", \"(((())))\"\
    ])\nassert(separate_paren_groups(paren_string: \"(()(())((())))\") == [\"(()(())((())))\"\
    ])\nassert(separate_paren_groups(paren_string: \"( ) (( )) (( )( ))\") == [\"\
    ()\", \"(())\", \"(()())\"])"
  status: Exception
  stderr: 'tmp5qbxzuvz/tmp5qbxzuvz.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af5a85f9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af5a82f0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af5a82f0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af5a82ef7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5qbxzuvz                        0x000055e79ee27837 <unavailable> + 6199

    5    libc.so.6                          0x00002af5a87e5460 __libc_start_main +
    245

    6    tmp5qbxzuvz                        0x000055e79ee273c9 <unavailable> + 5065

    '
  stdout: ''
  timestamp: 1659824687
- exit_code: -4
  program: "\n/// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n/// separate those group into separate\
    \ strings and return the array of those.\n/// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n/// Ignore\
    \ any spaces in the input string.\n/// >>> separate_paren_groups(paren_string:\
    \ \"( ) (( )) (( )( ))\")\n/// [\"()\", \"(())\", \"(()())\"]\nfunc separate_paren_groups(paren_string:\
    \ String) -> [String] {\n    var paren_groups = [String]()\n    var current_group\
    \ = \"\"\n    var open_parens = 0\n    for char in paren_string {\n        if\
    \ char == \"(\" {\n            open_parens += 1\n            current_group +=\
    \ String(char)\n        } else if char == \")\" {\n            open_parens -=\
    \ 1\n            current_group += String(char)\n        }\n        if open_parens\
    \ == 0 {\n            paren_groups.append(current_group)\n            current_group\
    \ = \"\"\n        }\n    }\n    return paren_groups\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(separate_paren_groups(paren_string: \"(()()) ((())) () ((())()())\"\
    ) == [\"(()())\", \"((()))\", \"()\", \"((())()())\"])\nassert(separate_paren_groups(paren_string:\
    \ \"() (()) ((())) (((())))\") == [\"()\", \"(())\", \"((()))\", \"(((())))\"\
    ])\nassert(separate_paren_groups(paren_string: \"(()(())((())))\") == [\"(()(())((())))\"\
    ])\nassert(separate_paren_groups(paren_string: \"( ) (( )) (( )( ))\") == [\"\
    ()\", \"(())\", \"(()())\"])"
  status: Exception
  stderr: 'tmp6uc4k394/tmp6uc4k394.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5b6cec3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5b6cbbab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5b6cbba988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5b6cbb97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6uc4k394                        0x00005598b8d65837 <unavailable> + 6199

    5    libc.so.6                          0x00002b5b6d0af460 __libc_start_main +
    245

    6    tmp6uc4k394                        0x00005598b8d653c9 <unavailable> + 5065

    '
  stdout: ''
  timestamp: 1659824687
- exit_code: -4
  program: "\n/// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n/// separate those group into separate\
    \ strings and return the array of those.\n/// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n/// Ignore\
    \ any spaces in the input string.\n/// >>> separate_paren_groups(paren_string:\
    \ \"( ) (( )) (( )( ))\")\n/// [\"()\", \"(())\", \"(()())\"]\nfunc separate_paren_groups(paren_string:\
    \ String) -> [String] {\n    var result: [String] = []\n    var current_paren_group:\
    \ String = \"\"\n    var paren_count: Int = 0\n    for char in paren_string {\n\
    \        if char == \"(\" {\n            paren_count += 1\n        } else if char\
    \ == \")\" {\n            paren_count -= 1\n        }\n        if paren_count\
    \ == 0 {\n            if current_paren_group != \"\" {\n                result.append(current_paren_group)\n\
    \                current_paren_group = \"\"\n            }\n        } else {\n\
    \            current_paren_group.append(char)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(separate_paren_groups(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [\"(()())\", \"((()))\", \"()\", \"((())()())\"])\nassert(separate_paren_groups(paren_string:\
    \ \"() (()) ((())) (((())))\") == [\"()\", \"(())\", \"((()))\", \"(((())))\"\
    ])\nassert(separate_paren_groups(paren_string: \"(()(())((())))\") == [\"(()(())((())))\"\
    ])\nassert(separate_paren_groups(paren_string: \"( ) (( )) (( )( ))\") == [\"\
    ()\", \"(())\", \"(()())\"])"
  status: Exception
  stderr: 'tmpy3jehqao/tmpy3jehqao.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8a1c36dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8a1c064b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8a1c064988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8a1c0637b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpy3jehqao                        0x0000557f3c71c7e7 <unavailable> + 6119

    5    libc.so.6                          0x00002b8a1c559460 __libc_start_main +
    245

    6    tmpy3jehqao                        0x0000557f3c71c379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1659824687
- exit_code: -4
  program: "\n/// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n/// separate those group into separate\
    \ strings and return the array of those.\n/// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n/// Ignore\
    \ any spaces in the input string.\n/// >>> separate_paren_groups(paren_string:\
    \ \"( ) (( )) (( )( ))\")\n/// [\"()\", \"(())\", \"(()())\"]\nfunc separate_paren_groups(paren_string:\
    \ String) -> [String] {\n    var result = [String]()\n    var paren_string = paren_string\n\
    \    while paren_string.count > 0 {\n        let first_open_paren = paren_string.firstIndex(of:\
    \ \"(\")\n        let last_close_paren = paren_string.lastIndex(of: \")\")\n \
    \       if let first_open_paren = first_open_paren, let last_close_paren = last_close_paren\
    \ {\n            let start_index = paren_string.index(after: first_open_paren)\n\
    \            let end_index = paren_string.index(before: last_close_paren)\n  \
    \          result.append(String(paren_string[start_index...end_index]))\n    \
    \        paren_string = String(paren_string[last_close_paren...])\n        } else\
    \ {\n            break\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(separate_paren_groups(paren_string: \"(()()) ((())) ()\
    \ ((())()())\") == [\"(()())\", \"((()))\", \"()\", \"((())()())\"])\nassert(separate_paren_groups(paren_string:\
    \ \"() (()) ((())) (((())))\") == [\"()\", \"(())\", \"((()))\", \"(((())))\"\
    ])\nassert(separate_paren_groups(paren_string: \"(()(())((())))\") == [\"(()(())((())))\"\
    ])\nassert(separate_paren_groups(paren_string: \"( ) (( )) (( )( ))\") == [\"\
    ()\", \"(())\", \"(()())\"])"
  status: Exception
  stderr: 'tmpkqwjbvsq/tmpkqwjbvsq.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba7b37f4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba7b34ebb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba7b34eb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba7b34ea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkqwjbvsq                        0x0000557b56653ba7 <unavailable> + 7079

    5    libc.so.6                          0x00002ba7b39e0460 __libc_start_main +
    245

    6    tmpkqwjbvsq                        0x0000557b56653739 <unavailable> + 5945

    '
  stdout: ''
  timestamp: 1659824687
- exit_code: -4
  program: "\n/// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n/// separate those group into separate\
    \ strings and return the array of those.\n/// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n/// Ignore\
    \ any spaces in the input string.\n/// >>> separate_paren_groups(paren_string:\
    \ \"( ) (( )) (( )( ))\")\n/// [\"()\", \"(())\", \"(()())\"]\nfunc separate_paren_groups(paren_string:\
    \ String) -> [String] {\n    var result: [String] = []\n    var current_string\
    \ = \"\"\n    var current_count = 0\n    for char in paren_string {\n        if\
    \ char == \"(\" {\n            current_count += 1\n        } else if char == \"\
    )\" {\n            current_count -= 1\n        }\n        current_string.append(char)\n\
    \        if current_count == 0 {\n            result.append(current_string)\n\
    \            current_string = \"\"\n        }\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(separate_paren_groups(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [\"(()())\", \"((()))\", \"()\", \"((())()())\"])\nassert(separate_paren_groups(paren_string:\
    \ \"() (()) ((())) (((())))\") == [\"()\", \"(())\", \"((()))\", \"(((())))\"\
    ])\nassert(separate_paren_groups(paren_string: \"(()(())((())))\") == [\"(()(())((())))\"\
    ])\nassert(separate_paren_groups(paren_string: \"( ) (( )) (( )( ))\") == [\"\
    ()\", \"(())\", \"(()())\"])"
  status: Exception
  stderr: 'tmpaj63qe9g/tmpaj63qe9g.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2ff773cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2ff7433b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2ff7433988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2ff74327b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpaj63qe9g                        0x0000559f9b0ed787 <unavailable> + 6023

    5    libc.so.6                          0x00002b2ff7928460 __libc_start_main +
    245

    6    tmpaj63qe9g                        0x0000559f9b0ed319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1659824687
- exit_code: -4
  program: "\n/// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n/// separate those group into separate\
    \ strings and return the array of those.\n/// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n/// Ignore\
    \ any spaces in the input string.\n/// >>> separate_paren_groups(paren_string:\
    \ \"( ) (( )) (( )( ))\")\n/// [\"()\", \"(())\", \"(()())\"]\nfunc separate_paren_groups(paren_string:\
    \ String) -> [String] {\n    var result = [String]()\n    var current = \"\"\n\
    \    var count = 0\n    for char in paren_string {\n        if char == \"(\" {\n\
    \            count += 1\n        } else if char == \")\" {\n            count\
    \ -= 1\n        }\n        if count == 0 {\n            if current != \"\" {\n\
    \                result.append(current)\n                current = \"\"\n    \
    \        }\n        } else {\n            current.append(char)\n        }\n  \
    \  }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(separate_paren_groups(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [\"(()())\", \"((()))\", \"()\", \"((())()())\"\
    ])\nassert(separate_paren_groups(paren_string: \"() (()) ((())) (((())))\") ==\
    \ [\"()\", \"(())\", \"((()))\", \"(((())))\"])\nassert(separate_paren_groups(paren_string:\
    \ \"(()(())((())))\") == [\"(()(())((())))\"])\nassert(separate_paren_groups(paren_string:\
    \ \"( ) (( )) (( )( ))\") == [\"()\", \"(())\", \"(()())\"])"
  status: Exception
  stderr: 'tmpyx_kmg0e/tmpyx_kmg0e.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0e5db6fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0e5d866b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0e5d866988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0e5d8657b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyx_kmg0e                        0x000055b43c8e5837 <unavailable> + 6199

    5    libc.so.6                          0x00002b0e5dd5b460 __libc_start_main +
    245

    6    tmpyx_kmg0e                        0x000055b43c8e53c9 <unavailable> + 5065

    '
  stdout: ''
  timestamp: 1659824687
- exit_code: -4
  program: "\n/// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n/// separate those group into separate\
    \ strings and return the array of those.\n/// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n/// Ignore\
    \ any spaces in the input string.\n/// >>> separate_paren_groups(paren_string:\
    \ \"( ) (( )) (( )( ))\")\n/// [\"()\", \"(())\", \"(()())\"]\nfunc separate_paren_groups(paren_string:\
    \ String) -> [String] {\n    var result = [String]()\n    var current_group =\
    \ \"\"\n    var open_parens = 0\n    for char in paren_string {\n        if char\
    \ == \"(\" {\n            open_parens += 1\n            current_group += \"(\"\
    \n        } else if char == \")\" {\n            open_parens -= 1\n          \
    \  current_group += \")\"\n        }\n        if open_parens == 0 {\n        \
    \    result.append(current_group)\n            current_group = \"\"\n        }\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(separate_paren_groups(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [\"(()())\", \"((()))\", \"()\", \"((())()())\"\
    ])\nassert(separate_paren_groups(paren_string: \"() (()) ((())) (((())))\") ==\
    \ [\"()\", \"(())\", \"((()))\", \"(((())))\"])\nassert(separate_paren_groups(paren_string:\
    \ \"(()(())((())))\") == [\"(()(())((())))\"])\nassert(separate_paren_groups(paren_string:\
    \ \"( ) (( )) (( )( ))\") == [\"()\", \"(())\", \"(()())\"])"
  status: Exception
  stderr: 'tmpypij2s5c/tmpypij2s5c.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9ffcdf2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9ffcae9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9ffcae9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9ffcae87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpypij2s5c                        0x0000564db99f07e7 <unavailable> + 6119

    5    libc.so.6                          0x00002b9ffcfde460 __libc_start_main +
    245

    6    tmpypij2s5c                        0x0000564db99f0379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1659824687
- exit_code: -1
  program: "\n/// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n/// separate those group into separate\
    \ strings and return the array of those.\n/// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n/// Ignore\
    \ any spaces in the input string.\n/// >>> separate_paren_groups(paren_string:\
    \ \"( ) (( )) (( )( ))\")\n/// [\"()\", \"(())\", \"(()())\"]\nfunc separate_paren_groups(paren_string:\
    \ String) -> [String] {\n    var result: [String] = []\n    var paren_string =\
    \ paren_string\n    while paren_string.count > 0 {\n        let next_paren_group\
    \ = paren_string.prefix(while: { $0 != \" \" })\n        paren_string = String(paren_string.dropFirst(next_paren_group.count))\n\
    \        paren_string = paren_string.prefix(while: { $0 == \" \" }).description\
    \ + String(paren_string.dropFirst(paren_string.prefix(while: { $0 == \" \" }).count))\n\
    \        result.append(next_paren_group.description)\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(separate_paren_groups(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [\"(()())\", \"((()))\", \"()\", \"((())()())\"])\nassert(separate_paren_groups(paren_string:\
    \ \"() (()) ((())) (((())))\") == [\"()\", \"(())\", \"((()))\", \"(((())))\"\
    ])\nassert(separate_paren_groups(paren_string: \"(()(())((())))\") == [\"(()(())((())))\"\
    ])\nassert(separate_paren_groups(paren_string: \"( ) (( )) (( )( ))\") == [\"\
    ()\", \"(())\", \"(()())\"])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659824692
- exit_code: -4
  program: "\n/// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n/// separate those group into separate\
    \ strings and return the array of those.\n/// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n/// Ignore\
    \ any spaces in the input string.\n/// >>> separate_paren_groups(paren_string:\
    \ \"( ) (( )) (( )( ))\")\n/// [\"()\", \"(())\", \"(()())\"]\nfunc separate_paren_groups(paren_string:\
    \ String) -> [String] {\n    var result: [String] = []\n    var current_group:\
    \ String = \"\"\n    var open_parens: Int = 0\n    for char in paren_string {\n\
    \        if char == \"(\" {\n            open_parens += 1\n            current_group\
    \ += \"(\"\n        } else if char == \")\" {\n            open_parens -= 1\n\
    \            current_group += \")\"\n        }\n        if open_parens == 0 {\n\
    \            result.append(current_group)\n            current_group = \"\"\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(separate_paren_groups(paren_string: \"(()()) ((())) () ((())()())\") ==\
    \ [\"(()())\", \"((()))\", \"()\", \"((())()())\"])\nassert(separate_paren_groups(paren_string:\
    \ \"() (()) ((())) (((())))\") == [\"()\", \"(())\", \"((()))\", \"(((())))\"\
    ])\nassert(separate_paren_groups(paren_string: \"(()(())((())))\") == [\"(()(())((())))\"\
    ])\nassert(separate_paren_groups(paren_string: \"( ) (( )) (( )( ))\") == [\"\
    ()\", \"(())\", \"(()())\"])"
  status: Exception
  stderr: 'tmpk1gs__d8/tmpk1gs__d8.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b45980ecc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4597de3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4597de3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4597de27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpk1gs__d8                        0x000055bf39d1d797 <unavailable> + 6039

    5    libc.so.6                          0x00002b45982d8460 __libc_start_main +
    245

    6    tmpk1gs__d8                        0x000055bf39d1d329 <unavailable> + 4905

    '
  stdout: ''
  timestamp: 1659824687
- exit_code: -4
  program: "\n/// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n/// separate those group into separate\
    \ strings and return the array of those.\n/// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n/// Ignore\
    \ any spaces in the input string.\n/// >>> separate_paren_groups(paren_string:\
    \ \"( ) (( )) (( )( ))\")\n/// [\"()\", \"(())\", \"(()())\"]\nfunc separate_paren_groups(paren_string:\
    \ String) -> [String] {\n    var result: [String] = []\n    var current: String\
    \ = \"\"\n    var open_count: Int = 0\n    for c in paren_string {\n        if\
    \ c == \"(\" {\n            open_count += 1\n            current.append(c)\n \
    \       } else if c == \")\" {\n            open_count -= 1\n            current.append(c)\n\
    \        }\n        if open_count == 0 {\n            result.append(current)\n\
    \            current = \"\"\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(separate_paren_groups(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [\"(()())\", \"((()))\", \"()\", \"((())()())\"])\nassert(separate_paren_groups(paren_string:\
    \ \"() (()) ((())) (((())))\") == [\"()\", \"(())\", \"((()))\", \"(((())))\"\
    ])\nassert(separate_paren_groups(paren_string: \"(()(())((())))\") == [\"(()(())((())))\"\
    ])\nassert(separate_paren_groups(paren_string: \"( ) (( )) (( )( ))\") == [\"\
    ()\", \"(())\", \"(()())\"])"
  status: Exception
  stderr: 'tmp8h8qjpwq/tmp8h8qjpwq.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba83d774c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba83d46bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba83d46b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba83d46a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8h8qjpwq                        0x000055d187bc7787 <unavailable> + 6023

    5    libc.so.6                          0x00002ba83d960460 __libc_start_main +
    245

    6    tmp8h8qjpwq                        0x000055d187bc7319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1659824687
- exit_code: -4
  program: "\n/// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n/// separate those group into separate\
    \ strings and return the array of those.\n/// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n/// Ignore\
    \ any spaces in the input string.\n/// >>> separate_paren_groups(paren_string:\
    \ \"( ) (( )) (( )( ))\")\n/// [\"()\", \"(())\", \"(()())\"]\nfunc separate_paren_groups(paren_string:\
    \ String) -> [String] {\n    var result: [String] = []\n    var current_group:\
    \ String = \"\"\n    var open_parens: Int = 0\n    for char in paren_string {\n\
    \        if char == \"(\" {\n            open_parens += 1\n            current_group\
    \ += String(char)\n        } else if char == \")\" {\n            open_parens\
    \ -= 1\n            current_group += String(char)\n        }\n        if open_parens\
    \ == 0 {\n            result.append(current_group)\n            current_group\
    \ = \"\"\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(separate_paren_groups(paren_string: \"(()()) ((())) () ((())()())\"\
    ) == [\"(()())\", \"((()))\", \"()\", \"((())()())\"])\nassert(separate_paren_groups(paren_string:\
    \ \"() (()) ((())) (((())))\") == [\"()\", \"(())\", \"((()))\", \"(((())))\"\
    ])\nassert(separate_paren_groups(paren_string: \"(()(())((())))\") == [\"(()(())((())))\"\
    ])\nassert(separate_paren_groups(paren_string: \"( ) (( )) (( )( ))\") == [\"\
    ()\", \"(())\", \"(()())\"])"
  status: Exception
  stderr: 'tmp75iu15po/tmp75iu15po.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b33bb404c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b33bb0fbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b33bb0fb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b33bb0fa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp75iu15po                        0x000055a82b0bb7e7 <unavailable> + 6119

    5    libc.so.6                          0x00002b33bb5f0460 __libc_start_main +
    245

    6    tmp75iu15po                        0x000055a82b0bb379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1659824687
- exit_code: 0
  program: "\n/// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n/// separate those group into separate\
    \ strings and return the array of those.\n/// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n/// Ignore\
    \ any spaces in the input string.\n/// >>> separate_paren_groups(paren_string:\
    \ \"( ) (( )) (( )( ))\")\n/// [\"()\", \"(())\", \"(()())\"]\nfunc separate_paren_groups(paren_string:\
    \ String) -> [String] {\n    var result: [String] = []\n    var current: String\
    \ = \"\"\n    var open: Int = 0\n    for char in paren_string {\n        if char\
    \ == \"(\" {\n            open += 1\n            current.append(char)\n      \
    \  } else if char == \")\" {\n            open -= 1\n            current.append(char)\n\
    \        }\n        if open == 0 && current != \"\" {\n            result.append(current)\n\
    \            current = \"\"\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(separate_paren_groups(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [\"(()())\", \"((()))\", \"()\", \"((())()())\"])\nassert(separate_paren_groups(paren_string:\
    \ \"() (()) ((())) (((())))\") == [\"()\", \"(())\", \"((()))\", \"(((())))\"\
    ])\nassert(separate_paren_groups(paren_string: \"(()(())((())))\") == [\"(()(())((())))\"\
    ])\nassert(separate_paren_groups(paren_string: \"( ) (( )) (( )( ))\") == [\"\
    ()\", \"(())\", \"(()())\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824687
- exit_code: -4
  program: "\n/// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n/// separate those group into separate\
    \ strings and return the array of those.\n/// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n/// Ignore\
    \ any spaces in the input string.\n/// >>> separate_paren_groups(paren_string:\
    \ \"( ) (( )) (( )( ))\")\n/// [\"()\", \"(())\", \"(()())\"]\nfunc separate_paren_groups(paren_string:\
    \ String) -> [String] {\n    var result: [String] = []\n    var current_string\
    \ = \"\"\n    var open_paren_count = 0\n    for char in paren_string {\n     \
    \   if char == \"(\" {\n            open_paren_count += 1\n            current_string.append(char)\n\
    \        } else if char == \")\" {\n            open_paren_count -= 1\n      \
    \      current_string.append(char)\n        }\n        if open_paren_count ==\
    \ 0 {\n            result.append(current_string)\n            current_string =\
    \ \"\"\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(separate_paren_groups(paren_string: \"(()()) ((())) () ((())()())\"\
    ) == [\"(()())\", \"((()))\", \"()\", \"((())()())\"])\nassert(separate_paren_groups(paren_string:\
    \ \"() (()) ((())) (((())))\") == [\"()\", \"(())\", \"((()))\", \"(((())))\"\
    ])\nassert(separate_paren_groups(paren_string: \"(()(())((())))\") == [\"(()(())((())))\"\
    ])\nassert(separate_paren_groups(paren_string: \"( ) (( )) (( )( ))\") == [\"\
    ()\", \"(())\", \"(()())\"])"
  status: Exception
  stderr: 'tmpvtibezr_/tmpvtibezr_.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b70eaa08c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b70ea6ffb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b70ea6ff988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b70ea6fe7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvtibezr_                        0x0000563a4225c787 <unavailable> + 6023

    5    libc.so.6                          0x00002b70eabf4460 __libc_start_main +
    245

    6    tmpvtibezr_                        0x0000563a4225c319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1659824687
- exit_code: -4
  program: "\n/// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n/// separate those group into separate\
    \ strings and return the array of those.\n/// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n/// Ignore\
    \ any spaces in the input string.\n/// >>> separate_paren_groups(paren_string:\
    \ \"( ) (( )) (( )( ))\")\n/// [\"()\", \"(())\", \"(()())\"]\nfunc separate_paren_groups(paren_string:\
    \ String) -> [String] {\n    var result: [String] = []\n    var current_group:\
    \ String = \"\"\n    var open_parens: Int = 0\n    for c in paren_string {\n \
    \       if c == \"(\" {\n            open_parens += 1\n            current_group\
    \ += \"(\"\n        } else if c == \")\" {\n            open_parens -= 1\n   \
    \         current_group += \")\"\n        }\n        if open_parens == 0 {\n \
    \           result.append(current_group)\n            current_group = \"\"\n \
    \       }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(separate_paren_groups(paren_string: \"(()()) ((())) () ((())()())\") ==\
    \ [\"(()())\", \"((()))\", \"()\", \"((())()())\"])\nassert(separate_paren_groups(paren_string:\
    \ \"() (()) ((())) (((())))\") == [\"()\", \"(())\", \"((()))\", \"(((())))\"\
    ])\nassert(separate_paren_groups(paren_string: \"(()(())((())))\") == [\"(()(())((())))\"\
    ])\nassert(separate_paren_groups(paren_string: \"( ) (( )) (( )( ))\") == [\"\
    ()\", \"(())\", \"(()())\"])"
  status: Exception
  stderr: 'tmpd_6ohv2_/tmpd_6ohv2_.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9fab4a0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9fab197b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9fab197988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9fab1967b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpd_6ohv2_                        0x000055806c5c2797 <unavailable> + 6039

    5    libc.so.6                          0x00002b9fab68c460 __libc_start_main +
    245

    6    tmpd_6ohv2_                        0x000055806c5c2329 <unavailable> + 4905

    '
  stdout: ''
  timestamp: 1659824687
- exit_code: -4
  program: "\n/// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n/// separate those group into separate\
    \ strings and return the array of those.\n/// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n/// Ignore\
    \ any spaces in the input string.\n/// >>> separate_paren_groups(paren_string:\
    \ \"( ) (( )) (( )( ))\")\n/// [\"()\", \"(())\", \"(()())\"]\nfunc separate_paren_groups(paren_string:\
    \ String) -> [String] {\n    var result = [String]()\n    var current = \"\"\n\
    \    var open = 0\n    for char in paren_string {\n        if char == \"(\" {\n\
    \            open += 1\n            current += String(char)\n        } else if\
    \ char == \")\" {\n            open -= 1\n            current += String(char)\n\
    \        }\n        if open == 0 {\n            result.append(current)\n     \
    \       current = \"\"\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(separate_paren_groups(paren_string: \"(()()) ((())) ()\
    \ ((())()())\") == [\"(()())\", \"((()))\", \"()\", \"((())()())\"])\nassert(separate_paren_groups(paren_string:\
    \ \"() (()) ((())) (((())))\") == [\"()\", \"(())\", \"((()))\", \"(((())))\"\
    ])\nassert(separate_paren_groups(paren_string: \"(()(())((())))\") == [\"(()(())((())))\"\
    ])\nassert(separate_paren_groups(paren_string: \"( ) (( )) (( )( ))\") == [\"\
    ()\", \"(())\", \"(()())\"])"
  status: Exception
  stderr: 'tmp_se8cu6l/tmp_se8cu6l.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b37c9608c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b37c92ffb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b37c92ff988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b37c92fe7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_se8cu6l                        0x0000560622c66837 <unavailable> + 6199

    5    libc.so.6                          0x00002b37c97f4460 __libc_start_main +
    245

    6    tmp_se8cu6l                        0x0000560622c663c9 <unavailable> + 5065

    '
  stdout: ''
  timestamp: 1659824687
- exit_code: -4
  program: "\n/// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n/// separate those group into separate\
    \ strings and return the array of those.\n/// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n/// Ignore\
    \ any spaces in the input string.\n/// >>> separate_paren_groups(paren_string:\
    \ \"( ) (( )) (( )( ))\")\n/// [\"()\", \"(())\", \"(()())\"]\nfunc separate_paren_groups(paren_string:\
    \ String) -> [String] {\n    var result = [String]()\n    var current_group =\
    \ \"\"\n    var open_parens = 0\n    for char in paren_string {\n        if char\
    \ == \"(\" {\n            open_parens += 1\n            current_group += String(char)\n\
    \        } else if char == \")\" {\n            open_parens -= 1\n           \
    \ current_group += String(char)\n        }\n        if open_parens == 0 {\n  \
    \          result.append(current_group)\n            current_group = \"\"\n  \
    \      }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(separate_paren_groups(paren_string: \"(()()) ((())) () ((())()())\") ==\
    \ [\"(()())\", \"((()))\", \"()\", \"((())()())\"])\nassert(separate_paren_groups(paren_string:\
    \ \"() (()) ((())) (((())))\") == [\"()\", \"(())\", \"((()))\", \"(((())))\"\
    ])\nassert(separate_paren_groups(paren_string: \"(()(())((())))\") == [\"(()(())((())))\"\
    ])\nassert(separate_paren_groups(paren_string: \"( ) (( )) (( )( ))\") == [\"\
    ()\", \"(())\", \"(()())\"])"
  status: Exception
  stderr: 'tmp5qbxzuvz/tmp5qbxzuvz.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af5a85f9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af5a82f0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af5a82f0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af5a82ef7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5qbxzuvz                        0x000055e79ee27837 <unavailable> + 6199

    5    libc.so.6                          0x00002af5a87e5460 __libc_start_main +
    245

    6    tmp5qbxzuvz                        0x000055e79ee273c9 <unavailable> + 5065

    '
  stdout: ''
  timestamp: 1659824687
- exit_code: -4
  program: "\n/// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n/// separate those group into separate\
    \ strings and return the array of those.\n/// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n/// Ignore\
    \ any spaces in the input string.\n/// >>> separate_paren_groups(paren_string:\
    \ \"( ) (( )) (( )( ))\")\n/// [\"()\", \"(())\", \"(()())\"]\nfunc separate_paren_groups(paren_string:\
    \ String) -> [String] {\n    var result: [String] = []\n    var current_group:\
    \ String = \"\"\n    var open_parens: Int = 0\n    for char in paren_string {\n\
    \        if char == \"(\" {\n            open_parens += 1\n            current_group\
    \ += String(char)\n        } else if char == \")\" {\n            open_parens\
    \ -= 1\n            current_group += String(char)\n        }\n        if open_parens\
    \ == 0 {\n            result.append(current_group)\n            current_group\
    \ = \"\"\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(separate_paren_groups(paren_string: \"(()()) ((())) () ((())()())\"\
    ) == [\"(()())\", \"((()))\", \"()\", \"((())()())\"])\nassert(separate_paren_groups(paren_string:\
    \ \"() (()) ((())) (((())))\") == [\"()\", \"(())\", \"((()))\", \"(((())))\"\
    ])\nassert(separate_paren_groups(paren_string: \"(()(())((())))\") == [\"(()(())((())))\"\
    ])\nassert(separate_paren_groups(paren_string: \"( ) (( )) (( )( ))\") == [\"\
    ()\", \"(())\", \"(()())\"])"
  status: Exception
  stderr: 'tmp75iu15po/tmp75iu15po.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b33bb404c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b33bb0fbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b33bb0fb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b33bb0fa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp75iu15po                        0x000055a82b0bb7e7 <unavailable> + 6119

    5    libc.so.6                          0x00002b33bb5f0460 __libc_start_main +
    245

    6    tmp75iu15po                        0x000055a82b0bb379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1659824687
- exit_code: -4
  program: "\n/// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n/// separate those group into separate\
    \ strings and return the array of those.\n/// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n/// Ignore\
    \ any spaces in the input string.\n/// >>> separate_paren_groups(paren_string:\
    \ \"( ) (( )) (( )( ))\")\n/// [\"()\", \"(())\", \"(()())\"]\nfunc separate_paren_groups(paren_string:\
    \ String) -> [String] {\n    var result = [String]()\n    var current = \"\"\n\
    \    var open = 0\n    for char in paren_string {\n        if char == \"(\" {\n\
    \            open += 1\n            current += \"(\"\n        } else if char ==\
    \ \")\" {\n            open -= 1\n            current += \")\"\n        }\n  \
    \      if open == 0 {\n            result.append(current)\n            current\
    \ = \"\"\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(separate_paren_groups(paren_string: \"(()()) ((())) () ((())()())\"\
    ) == [\"(()())\", \"((()))\", \"()\", \"((())()())\"])\nassert(separate_paren_groups(paren_string:\
    \ \"() (()) ((())) (((())))\") == [\"()\", \"(())\", \"((()))\", \"(((())))\"\
    ])\nassert(separate_paren_groups(paren_string: \"(()(())((())))\") == [\"(()(())((())))\"\
    ])\nassert(separate_paren_groups(paren_string: \"( ) (( )) (( )( ))\") == [\"\
    ()\", \"(())\", \"(()())\"])"
  status: Exception
  stderr: 'tmpy8udsbj1/tmpy8udsbj1.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4bfe6f3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4bfe3eab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4bfe3ea988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4bfe3e97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpy8udsbj1                        0x000056233828f7e7 <unavailable> + 6119

    5    libc.so.6                          0x00002b4bfe8df460 __libc_start_main +
    245

    6    tmpy8udsbj1                        0x000056233828f379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1659824687
- exit_code: -4
  program: "\n/// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n/// separate those group into separate\
    \ strings and return the array of those.\n/// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n/// Ignore\
    \ any spaces in the input string.\n/// >>> separate_paren_groups(paren_string:\
    \ \"( ) (( )) (( )( ))\")\n/// [\"()\", \"(())\", \"(()())\"]\nfunc separate_paren_groups(paren_string:\
    \ String) -> [String] {\n    var result = [String]()\n    var current = \"\"\n\
    \    var open = 0\n    for char in paren_string {\n        if char == \"(\" {\n\
    \            open += 1\n            current += \"(\"\n        } else if char ==\
    \ \")\" {\n            open -= 1\n            current += \")\"\n        }\n  \
    \      if open == 0 {\n            result.append(current)\n            current\
    \ = \"\"\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(separate_paren_groups(paren_string: \"(()()) ((())) () ((())()())\"\
    ) == [\"(()())\", \"((()))\", \"()\", \"((())()())\"])\nassert(separate_paren_groups(paren_string:\
    \ \"() (()) ((())) (((())))\") == [\"()\", \"(())\", \"((()))\", \"(((())))\"\
    ])\nassert(separate_paren_groups(paren_string: \"(()(())((())))\") == [\"(()(())((())))\"\
    ])\nassert(separate_paren_groups(paren_string: \"( ) (( )) (( )( ))\") == [\"\
    ()\", \"(())\", \"(()())\"])"
  status: Exception
  stderr: 'tmpy8udsbj1/tmpy8udsbj1.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4bfe6f3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4bfe3eab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4bfe3ea988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4bfe3e97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpy8udsbj1                        0x000056233828f7e7 <unavailable> + 6119

    5    libc.so.6                          0x00002b4bfe8df460 __libc_start_main +
    245

    6    tmpy8udsbj1                        0x000056233828f379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1659824687
- exit_code: -4
  program: "\n/// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n/// separate those group into separate\
    \ strings and return the array of those.\n/// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n/// Ignore\
    \ any spaces in the input string.\n/// >>> separate_paren_groups(paren_string:\
    \ \"( ) (( )) (( )( ))\")\n/// [\"()\", \"(())\", \"(()())\"]\nfunc separate_paren_groups(paren_string:\
    \ String) -> [String] {\n    var result = [String]()\n    var current = \"\"\n\
    \    var count = 0\n    for char in paren_string {\n        if char == \"(\" {\n\
    \            count += 1\n        } else if char == \")\" {\n            count\
    \ -= 1\n        }\n        if count == 0 {\n            if current != \"\" {\n\
    \                result.append(current)\n                current = \"\"\n    \
    \        }\n        } else {\n            current.append(char)\n        }\n  \
    \  }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(separate_paren_groups(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [\"(()())\", \"((()))\", \"()\", \"((())()())\"\
    ])\nassert(separate_paren_groups(paren_string: \"() (()) ((())) (((())))\") ==\
    \ [\"()\", \"(())\", \"((()))\", \"(((())))\"])\nassert(separate_paren_groups(paren_string:\
    \ \"(()(())((())))\") == [\"(()(())((())))\"])\nassert(separate_paren_groups(paren_string:\
    \ \"( ) (( )) (( )( ))\") == [\"()\", \"(())\", \"(()())\"])"
  status: Exception
  stderr: 'tmpyx_kmg0e/tmpyx_kmg0e.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0e5db6fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0e5d866b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0e5d866988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0e5d8657b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyx_kmg0e                        0x000055b43c8e5837 <unavailable> + 6199

    5    libc.so.6                          0x00002b0e5dd5b460 __libc_start_main +
    245

    6    tmpyx_kmg0e                        0x000055b43c8e53c9 <unavailable> + 5065

    '
  stdout: ''
  timestamp: 1659824687
- exit_code: -4
  program: "\n/// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n/// separate those group into separate\
    \ strings and return the array of those.\n/// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n/// Ignore\
    \ any spaces in the input string.\n/// >>> separate_paren_groups(paren_string:\
    \ \"( ) (( )) (( )( ))\")\n/// [\"()\", \"(())\", \"(()())\"]\nfunc separate_paren_groups(paren_string:\
    \ String) -> [String] {\n    var result: [String] = []\n    var current_group:\
    \ String = \"\"\n    var open_paren_count: Int = 0\n    for char in paren_string\
    \ {\n        if char == \"(\" {\n            open_paren_count += 1\n         \
    \   current_group += String(char)\n        } else if char == \")\" {\n       \
    \     open_paren_count -= 1\n            current_group += String(char)\n     \
    \   }\n        if open_paren_count == 0 {\n            result.append(current_group)\n\
    \            current_group = \"\"\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(separate_paren_groups(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [\"(()())\", \"((()))\", \"()\", \"((())()())\"])\nassert(separate_paren_groups(paren_string:\
    \ \"() (()) ((())) (((())))\") == [\"()\", \"(())\", \"((()))\", \"(((())))\"\
    ])\nassert(separate_paren_groups(paren_string: \"(()(())((())))\") == [\"(()(())((())))\"\
    ])\nassert(separate_paren_groups(paren_string: \"( ) (( )) (( )( ))\") == [\"\
    ()\", \"(())\", \"(()())\"])"
  status: Exception
  stderr: 'tmp8lpwgxlv/tmp8lpwgxlv.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9d38726c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9d3841db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9d3841d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9d3841c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8lpwgxlv                        0x0000563d7f9917e7 <unavailable> + 6119

    5    libc.so.6                          0x00002b9d38912460 __libc_start_main +
    245

    6    tmp8lpwgxlv                        0x0000563d7f991379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1659824687
- exit_code: -4
  program: "\n/// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n/// separate those group into separate\
    \ strings and return the array of those.\n/// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n/// Ignore\
    \ any spaces in the input string.\n/// >>> separate_paren_groups(paren_string:\
    \ \"( ) (( )) (( )( ))\")\n/// [\"()\", \"(())\", \"(()())\"]\nfunc separate_paren_groups(paren_string:\
    \ String) -> [String] {\n    var result = [String]()\n    var current = \"\"\n\
    \    var count = 0\n    for char in paren_string {\n        if char == \"(\" {\n\
    \            count += 1\n        } else if char == \")\" {\n            count\
    \ -= 1\n        }\n        if count == 0 && char == \")\" {\n            result.append(current)\n\
    \            current = \"\"\n        } else if char != \" \" {\n            current.append(char)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(separate_paren_groups(paren_string: \"(()()) ((())) () ((())()())\") ==\
    \ [\"(()())\", \"((()))\", \"()\", \"((())()())\"])\nassert(separate_paren_groups(paren_string:\
    \ \"() (()) ((())) (((())))\") == [\"()\", \"(())\", \"((()))\", \"(((())))\"\
    ])\nassert(separate_paren_groups(paren_string: \"(()(())((())))\") == [\"(()(())((())))\"\
    ])\nassert(separate_paren_groups(paren_string: \"( ) (( )) (( )( ))\") == [\"\
    ()\", \"(())\", \"(()())\"])"
  status: Exception
  stderr: 'tmpub7n4ip2/tmpub7n4ip2.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acddfd14c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acddfa0bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acddfa0b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acddfa0a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpub7n4ip2                        0x000055de6b7627e7 <unavailable> + 6119

    5    libc.so.6                          0x00002acddff00460 __libc_start_main +
    245

    6    tmpub7n4ip2                        0x000055de6b762379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1659824687
- exit_code: -4
  program: "\n/// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n/// separate those group into separate\
    \ strings and return the array of those.\n/// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n/// Ignore\
    \ any spaces in the input string.\n/// >>> separate_paren_groups(paren_string:\
    \ \"( ) (( )) (( )( ))\")\n/// [\"()\", \"(())\", \"(()())\"]\nfunc separate_paren_groups(paren_string:\
    \ String) -> [String] {\n    var result: [String] = []\n    var current_paren_group:\
    \ String = \"\"\n    var open_paren_count: Int = 0\n    for char in paren_string\
    \ {\n        if char == \"(\" {\n            open_paren_count += 1\n         \
    \   current_paren_group += \"(\"\n        } else if char == \")\" {\n        \
    \    open_paren_count -= 1\n            current_paren_group += \")\"\n       \
    \ }\n        if open_paren_count == 0 {\n            result.append(current_paren_group)\n\
    \            current_paren_group = \"\"\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(separate_paren_groups(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [\"(()())\", \"((()))\", \"()\", \"((())()())\"])\nassert(separate_paren_groups(paren_string:\
    \ \"() (()) ((())) (((())))\") == [\"()\", \"(())\", \"((()))\", \"(((())))\"\
    ])\nassert(separate_paren_groups(paren_string: \"(()(())((())))\") == [\"(()(())((())))\"\
    ])\nassert(separate_paren_groups(paren_string: \"( ) (( )) (( )( ))\") == [\"\
    ()\", \"(())\", \"(()())\"])"
  status: Exception
  stderr: 'tmpbitqojfs/tmpbitqojfs.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac356c85c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac35697cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac35697c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac35697b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbitqojfs                        0x000055f24c1d1797 <unavailable> + 6039

    5    libc.so.6                          0x00002ac356e71460 __libc_start_main +
    245

    6    tmpbitqojfs                        0x000055f24c1d1329 <unavailable> + 4905

    '
  stdout: ''
  timestamp: 1659824687
- exit_code: 1
  program: "\n/// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n/// separate those group into separate\
    \ strings and return the array of those.\n/// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n/// Ignore\
    \ any spaces in the input string.\n/// >>> separate_paren_groups(paren_string:\
    \ \"( ) (( )) (( )( ))\")\n/// [\"()\", \"(())\", \"(()())\"]\nfunc separate_paren_groups(paren_string:\
    \ String) -> [String] {\n    let paren_string = paren_string.replacingOccurrences(of:\
    \ \" \", with: \"\")\n    var paren_groups: [String] = []\n    var current_group\
    \ = \"\"\n    var open_parens = 0\n    for char in paren_string {\n        if\
    \ char == \"(\" {\n            open_parens += 1\n        } else if char == \"\
    )\" {\n            open_parens -= 1\n        }\n        current_group.append(char)\n\
    \        if open_parens == 0 {\n            paren_groups.append(current_group)\n\
    \            current_group = \"\"\n        }\n    }\n    return paren_groups\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(separate_paren_groups(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [\"(()())\", \"((()))\", \"()\", \"((())()())\"])\nassert(separate_paren_groups(paren_string:\
    \ \"() (()) ((())) (((())))\") == [\"()\", \"(())\", \"((()))\", \"(((())))\"\
    ])\nassert(separate_paren_groups(paren_string: \"(()(())((())))\") == [\"(()(())((())))\"\
    ])\nassert(separate_paren_groups(paren_string: \"( ) (( )) (( )( ))\") == [\"\
    ()\", \"(())\", \"(()())\"])"
  status: SyntaxError
  stderr: "/tmp/tmpsazeqx_9.swift:9:37: error: value of type 'String' has no member\
    \ 'replacingOccurrences'\n    let paren_string = paren_string.replacingOccurrences(of:\
    \ \" \", with: \"\")\n                       ~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824687
- exit_code: 0
  program: "\n/// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n/// separate those group into separate\
    \ strings and return the array of those.\n/// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n/// Ignore\
    \ any spaces in the input string.\n/// >>> separate_paren_groups(paren_string:\
    \ \"( ) (( )) (( )( ))\")\n/// [\"()\", \"(())\", \"(()())\"]\nfunc separate_paren_groups(paren_string:\
    \ String) -> [String] {\n    var paren_groups: [String] = []\n    var current_group:\
    \ String = \"\"\n    var open_count: Int = 0\n    for char in paren_string {\n\
    \        if char == \"(\" {\n            open_count += 1\n            current_group\
    \ += String(char)\n        } else if char == \")\" {\n            open_count -=\
    \ 1\n            current_group += String(char)\n            if open_count == 0\
    \ {\n                paren_groups.append(current_group)\n                current_group\
    \ = \"\"\n            }\n        }\n    }\n    return paren_groups\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(separate_paren_groups(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [\"(()())\", \"((()))\", \"()\", \"((())()())\"])\nassert(separate_paren_groups(paren_string:\
    \ \"() (()) ((())) (((())))\") == [\"()\", \"(())\", \"((()))\", \"(((())))\"\
    ])\nassert(separate_paren_groups(paren_string: \"(()(())((())))\") == [\"(()(())((())))\"\
    ])\nassert(separate_paren_groups(paren_string: \"( ) (( )) (( )( ))\") == [\"\
    ()\", \"(())\", \"(()())\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824687
- exit_code: -4
  program: "\n/// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n/// separate those group into separate\
    \ strings and return the array of those.\n/// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n/// Ignore\
    \ any spaces in the input string.\n/// >>> separate_paren_groups(paren_string:\
    \ \"( ) (( )) (( )( ))\")\n/// [\"()\", \"(())\", \"(()())\"]\nfunc separate_paren_groups(paren_string:\
    \ String) -> [String] {\n    var result: [String] = []\n    var current_group:\
    \ String = \"\"\n    var open_parens: Int = 0\n    for char in paren_string {\n\
    \        if char == \"(\" {\n            open_parens += 1\n            current_group\
    \ += \"(\"\n        } else if char == \")\" {\n            open_parens -= 1\n\
    \            current_group += \")\"\n        }\n        if open_parens == 0 {\n\
    \            result.append(current_group)\n            current_group = \"\"\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(separate_paren_groups(paren_string: \"(()()) ((())) () ((())()())\") ==\
    \ [\"(()())\", \"((()))\", \"()\", \"((())()())\"])\nassert(separate_paren_groups(paren_string:\
    \ \"() (()) ((())) (((())))\") == [\"()\", \"(())\", \"((()))\", \"(((())))\"\
    ])\nassert(separate_paren_groups(paren_string: \"(()(())((())))\") == [\"(()(())((())))\"\
    ])\nassert(separate_paren_groups(paren_string: \"( ) (( )) (( )( ))\") == [\"\
    ()\", \"(())\", \"(()())\"])"
  status: Exception
  stderr: 'tmpk1gs__d8/tmpk1gs__d8.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b45980ecc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4597de3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4597de3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4597de27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpk1gs__d8                        0x000055bf39d1d797 <unavailable> + 6039

    5    libc.so.6                          0x00002b45982d8460 __libc_start_main +
    245

    6    tmpk1gs__d8                        0x000055bf39d1d329 <unavailable> + 4905

    '
  stdout: ''
  timestamp: 1659824687
- exit_code: -4
  program: "\n/// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n/// separate those group into separate\
    \ strings and return the array of those.\n/// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n/// Ignore\
    \ any spaces in the input string.\n/// >>> separate_paren_groups(paren_string:\
    \ \"( ) (( )) (( )( ))\")\n/// [\"()\", \"(())\", \"(()())\"]\nfunc separate_paren_groups(paren_string:\
    \ String) -> [String] {\n    var result = [String]()\n    var current = \"\"\n\
    \    var count = 0\n    for char in paren_string {\n        if char == \"(\" {\n\
    \            count += 1\n        } else if char == \")\" {\n            count\
    \ -= 1\n        }\n        if count == 0 {\n            if current != \"\" {\n\
    \                result.append(current)\n                current = \"\"\n    \
    \        }\n        } else {\n            current.append(char)\n        }\n  \
    \  }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(separate_paren_groups(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [\"(()())\", \"((()))\", \"()\", \"((())()())\"\
    ])\nassert(separate_paren_groups(paren_string: \"() (()) ((())) (((())))\") ==\
    \ [\"()\", \"(())\", \"((()))\", \"(((())))\"])\nassert(separate_paren_groups(paren_string:\
    \ \"(()(())((())))\") == [\"(()(())((())))\"])\nassert(separate_paren_groups(paren_string:\
    \ \"( ) (( )) (( )( ))\") == [\"()\", \"(())\", \"(()())\"])"
  status: Exception
  stderr: 'tmpyx_kmg0e/tmpyx_kmg0e.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0e5db6fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0e5d866b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0e5d866988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0e5d8657b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyx_kmg0e                        0x000055b43c8e5837 <unavailable> + 6199

    5    libc.so.6                          0x00002b0e5dd5b460 __libc_start_main +
    245

    6    tmpyx_kmg0e                        0x000055b43c8e53c9 <unavailable> + 5065

    '
  stdout: ''
  timestamp: 1659824687
- exit_code: -4
  program: "\n/// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n/// separate those group into separate\
    \ strings and return the array of those.\n/// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n/// Ignore\
    \ any spaces in the input string.\n/// >>> separate_paren_groups(paren_string:\
    \ \"( ) (( )) (( )( ))\")\n/// [\"()\", \"(())\", \"(()())\"]\nfunc separate_paren_groups(paren_string:\
    \ String) -> [String] {\n    var result: [String] = []\n    var current_group:\
    \ String = \"\"\n    var open_parens: Int = 0\n    for c in paren_string {\n \
    \       if c == \"(\" {\n            open_parens += 1\n            current_group\
    \ += String(c)\n        } else if c == \")\" {\n            open_parens -= 1\n\
    \            current_group += String(c)\n        }\n        if open_parens ==\
    \ 0 {\n            result.append(current_group)\n            current_group = \"\
    \"\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(separate_paren_groups(paren_string: \"(()()) ((())) () ((())()())\") ==\
    \ [\"(()())\", \"((()))\", \"()\", \"((())()())\"])\nassert(separate_paren_groups(paren_string:\
    \ \"() (()) ((())) (((())))\") == [\"()\", \"(())\", \"((()))\", \"(((())))\"\
    ])\nassert(separate_paren_groups(paren_string: \"(()(())((())))\") == [\"(()(())((())))\"\
    ])\nassert(separate_paren_groups(paren_string: \"( ) (( )) (( )( ))\") == [\"\
    ()\", \"(())\", \"(()())\"])"
  status: Exception
  stderr: 'tmpksg9jtif/tmpksg9jtif.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b83488c1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b83485b8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b83485b8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b83485b77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpksg9jtif                        0x000055ede181a7e7 <unavailable> + 6119

    5    libc.so.6                          0x00002b8348aad460 __libc_start_main +
    245

    6    tmpksg9jtif                        0x000055ede181a379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1659824687
- exit_code: -4
  program: "\n/// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n/// separate those group into separate\
    \ strings and return the array of those.\n/// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n/// Ignore\
    \ any spaces in the input string.\n/// >>> separate_paren_groups(paren_string:\
    \ \"( ) (( )) (( )( ))\")\n/// [\"()\", \"(())\", \"(()())\"]\nfunc separate_paren_groups(paren_string:\
    \ String) -> [String] {\n    var result = [String]()\n    var current = \"\"\n\
    \    var open = 0\n    for char in paren_string {\n        if char == \"(\" {\n\
    \            open += 1\n            current += String(char)\n        } else if\
    \ char == \")\" {\n            open -= 1\n            current += String(char)\n\
    \        }\n        if open == 0 {\n            result.append(current)\n     \
    \       current = \"\"\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(separate_paren_groups(paren_string: \"(()()) ((())) ()\
    \ ((())()())\") == [\"(()())\", \"((()))\", \"()\", \"((())()())\"])\nassert(separate_paren_groups(paren_string:\
    \ \"() (()) ((())) (((())))\") == [\"()\", \"(())\", \"((()))\", \"(((())))\"\
    ])\nassert(separate_paren_groups(paren_string: \"(()(())((())))\") == [\"(()(())((())))\"\
    ])\nassert(separate_paren_groups(paren_string: \"( ) (( )) (( )( ))\") == [\"\
    ()\", \"(())\", \"(()())\"])"
  status: Exception
  stderr: 'tmp_se8cu6l/tmp_se8cu6l.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b37c9608c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b37c92ffb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b37c92ff988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b37c92fe7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_se8cu6l                        0x0000560622c66837 <unavailable> + 6199

    5    libc.so.6                          0x00002b37c97f4460 __libc_start_main +
    245

    6    tmp_se8cu6l                        0x0000560622c663c9 <unavailable> + 5065

    '
  stdout: ''
  timestamp: 1659824687
- exit_code: 0
  program: "\n/// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n/// separate those group into separate\
    \ strings and return the array of those.\n/// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n/// Ignore\
    \ any spaces in the input string.\n/// >>> separate_paren_groups(paren_string:\
    \ \"( ) (( )) (( )( ))\")\n/// [\"()\", \"(())\", \"(()())\"]\nfunc separate_paren_groups(paren_string:\
    \ String) -> [String] {\n    var paren_groups: [String] = []\n    var current_group:\
    \ String = \"\"\n    var open_paren_count: Int = 0\n    for char in paren_string\
    \ {\n        if char == \"(\" {\n            open_paren_count += 1\n         \
    \   current_group += String(char)\n        } else if char == \")\" {\n       \
    \     open_paren_count -= 1\n            current_group += String(char)\n     \
    \       if open_paren_count == 0 {\n                paren_groups.append(current_group)\n\
    \                current_group = \"\"\n            }\n        }\n    }\n    return\
    \ paren_groups\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(separate_paren_groups(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [\"(()())\", \"((()))\", \"()\", \"((())()())\"\
    ])\nassert(separate_paren_groups(paren_string: \"() (()) ((())) (((())))\") ==\
    \ [\"()\", \"(())\", \"((()))\", \"(((())))\"])\nassert(separate_paren_groups(paren_string:\
    \ \"(()(())((())))\") == [\"(()(())((())))\"])\nassert(separate_paren_groups(paren_string:\
    \ \"( ) (( )) (( )( ))\") == [\"()\", \"(())\", \"(()())\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824687
- exit_code: -4
  program: "\n/// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n/// separate those group into separate\
    \ strings and return the array of those.\n/// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n/// Ignore\
    \ any spaces in the input string.\n/// >>> separate_paren_groups(paren_string:\
    \ \"( ) (( )) (( )( ))\")\n/// [\"()\", \"(())\", \"(()())\"]\nfunc separate_paren_groups(paren_string:\
    \ String) -> [String] {\n    var result: [String] = []\n    var current_group:\
    \ String = \"\"\n    var open_parens: Int = 0\n    for char in paren_string {\n\
    \        if char == \"(\" {\n            open_parens += 1\n            current_group\
    \ += \"(\"\n        } else if char == \")\" {\n            open_parens -= 1\n\
    \            current_group += \")\"\n        }\n        if open_parens == 0 {\n\
    \            result.append(current_group)\n            current_group = \"\"\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(separate_paren_groups(paren_string: \"(()()) ((())) () ((())()())\") ==\
    \ [\"(()())\", \"((()))\", \"()\", \"((())()())\"])\nassert(separate_paren_groups(paren_string:\
    \ \"() (()) ((())) (((())))\") == [\"()\", \"(())\", \"((()))\", \"(((())))\"\
    ])\nassert(separate_paren_groups(paren_string: \"(()(())((())))\") == [\"(()(())((())))\"\
    ])\nassert(separate_paren_groups(paren_string: \"( ) (( )) (( )( ))\") == [\"\
    ()\", \"(())\", \"(()())\"])"
  status: Exception
  stderr: 'tmpk1gs__d8/tmpk1gs__d8.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b45980ecc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4597de3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4597de3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4597de27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpk1gs__d8                        0x000055bf39d1d797 <unavailable> + 6039

    5    libc.so.6                          0x00002b45982d8460 __libc_start_main +
    245

    6    tmpk1gs__d8                        0x000055bf39d1d329 <unavailable> + 4905

    '
  stdout: ''
  timestamp: 1659824687
- exit_code: -4
  program: "\n/// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n/// separate those group into separate\
    \ strings and return the array of those.\n/// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n/// Ignore\
    \ any spaces in the input string.\n/// >>> separate_paren_groups(paren_string:\
    \ \"( ) (( )) (( )( ))\")\n/// [\"()\", \"(())\", \"(()())\"]\nfunc separate_paren_groups(paren_string:\
    \ String) -> [String] {\n    var result = [String]()\n    var current = \"\"\n\
    \    var open = 0\n    for char in paren_string {\n        if char == \"(\" {\n\
    \            open += 1\n            current += String(char)\n        } else if\
    \ char == \")\" {\n            open -= 1\n            current += String(char)\n\
    \        }\n        if open == 0 {\n            result.append(current)\n     \
    \       current = \"\"\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(separate_paren_groups(paren_string: \"(()()) ((())) ()\
    \ ((())()())\") == [\"(()())\", \"((()))\", \"()\", \"((())()())\"])\nassert(separate_paren_groups(paren_string:\
    \ \"() (()) ((())) (((())))\") == [\"()\", \"(())\", \"((()))\", \"(((())))\"\
    ])\nassert(separate_paren_groups(paren_string: \"(()(())((())))\") == [\"(()(())((())))\"\
    ])\nassert(separate_paren_groups(paren_string: \"( ) (( )) (( )( ))\") == [\"\
    ()\", \"(())\", \"(()())\"])"
  status: Exception
  stderr: 'tmp_se8cu6l/tmp_se8cu6l.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b37c9608c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b37c92ffb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b37c92ff988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b37c92fe7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_se8cu6l                        0x0000560622c66837 <unavailable> + 6199

    5    libc.so.6                          0x00002b37c97f4460 __libc_start_main +
    245

    6    tmp_se8cu6l                        0x0000560622c663c9 <unavailable> + 5065

    '
  stdout: ''
  timestamp: 1659824687
- exit_code: 0
  program: "\n/// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n/// separate those group into separate\
    \ strings and return the array of those.\n/// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n/// Ignore\
    \ any spaces in the input string.\n/// >>> separate_paren_groups(paren_string:\
    \ \"( ) (( )) (( )( ))\")\n/// [\"()\", \"(())\", \"(()())\"]\nfunc separate_paren_groups(paren_string:\
    \ String) -> [String] {\n    var result: [String] = []\n    var current_group:\
    \ String = \"\"\n    var open_paren_count: Int = 0\n    for char in paren_string\
    \ {\n        if char == \"(\" {\n            open_paren_count += 1\n         \
    \   current_group += \"(\"\n        } else if char == \")\" {\n            open_paren_count\
    \ -= 1\n            current_group += \")\"\n        } else {\n            continue\n\
    \        }\n        if open_paren_count == 0 {\n            result.append(current_group)\n\
    \            current_group = \"\"\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(separate_paren_groups(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [\"(()())\", \"((()))\", \"()\", \"((())()())\"])\nassert(separate_paren_groups(paren_string:\
    \ \"() (()) ((())) (((())))\") == [\"()\", \"(())\", \"((()))\", \"(((())))\"\
    ])\nassert(separate_paren_groups(paren_string: \"(()(())((())))\") == [\"(()(())((())))\"\
    ])\nassert(separate_paren_groups(paren_string: \"( ) (( )) (( )( ))\") == [\"\
    ()\", \"(())\", \"(()())\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824687
- exit_code: -4
  program: "\n/// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n/// separate those group into separate\
    \ strings and return the array of those.\n/// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n/// Ignore\
    \ any spaces in the input string.\n/// >>> separate_paren_groups(paren_string:\
    \ \"( ) (( )) (( )( ))\")\n/// [\"()\", \"(())\", \"(()())\"]\nfunc separate_paren_groups(paren_string:\
    \ String) -> [String] {\n    var paren_groups = [String]()\n    var current_group\
    \ = \"\"\n    var open_parens = 0\n    for char in paren_string {\n        if\
    \ char == \"(\" {\n            open_parens += 1\n            current_group +=\
    \ String(char)\n        } else if char == \")\" {\n            open_parens -=\
    \ 1\n            current_group += String(char)\n        }\n        if open_parens\
    \ == 0 {\n            paren_groups.append(current_group)\n            current_group\
    \ = \"\"\n        }\n    }\n    return paren_groups\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(separate_paren_groups(paren_string: \"(()()) ((())) () ((())()())\"\
    ) == [\"(()())\", \"((()))\", \"()\", \"((())()())\"])\nassert(separate_paren_groups(paren_string:\
    \ \"() (()) ((())) (((())))\") == [\"()\", \"(())\", \"((()))\", \"(((())))\"\
    ])\nassert(separate_paren_groups(paren_string: \"(()(())((())))\") == [\"(()(())((())))\"\
    ])\nassert(separate_paren_groups(paren_string: \"( ) (( )) (( )( ))\") == [\"\
    ()\", \"(())\", \"(()())\"])"
  status: Exception
  stderr: 'tmp6uc4k394/tmp6uc4k394.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5b6cec3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5b6cbbab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5b6cbba988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5b6cbb97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6uc4k394                        0x00005598b8d65837 <unavailable> + 6199

    5    libc.so.6                          0x00002b5b6d0af460 __libc_start_main +
    245

    6    tmp6uc4k394                        0x00005598b8d653c9 <unavailable> + 5065

    '
  stdout: ''
  timestamp: 1659824687
- exit_code: -4
  program: "\n/// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n/// separate those group into separate\
    \ strings and return the array of those.\n/// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n/// Ignore\
    \ any spaces in the input string.\n/// >>> separate_paren_groups(paren_string:\
    \ \"( ) (( )) (( )( ))\")\n/// [\"()\", \"(())\", \"(()())\"]\nfunc separate_paren_groups(paren_string:\
    \ String) -> [String] {\n    var result: [String] = []\n    var current_paren_group:\
    \ String = \"\"\n    var current_paren_count: Int = 0\n    for char in paren_string\
    \ {\n        if char == \"(\" {\n            current_paren_count += 1\n      \
    \  } else if char == \")\" {\n            current_paren_count -= 1\n        }\n\
    \        if current_paren_count == 0 {\n            result.append(current_paren_group)\n\
    \            current_paren_group = \"\"\n        } else {\n            current_paren_group.append(char)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(separate_paren_groups(paren_string: \"(()()) ((())) () ((())()())\") ==\
    \ [\"(()())\", \"((()))\", \"()\", \"((())()())\"])\nassert(separate_paren_groups(paren_string:\
    \ \"() (()) ((())) (((())))\") == [\"()\", \"(())\", \"((()))\", \"(((())))\"\
    ])\nassert(separate_paren_groups(paren_string: \"(()(())((())))\") == [\"(()(())((())))\"\
    ])\nassert(separate_paren_groups(paren_string: \"( ) (( )) (( )( ))\") == [\"\
    ()\", \"(())\", \"(()())\"])"
  status: Exception
  stderr: 'tmprgzxro3y/tmprgzxro3y.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af5bd7b9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af5bd4b0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af5bd4b0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af5bd4af7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprgzxro3y                        0x000055d5b0b74787 <unavailable> + 6023

    5    libc.so.6                          0x00002af5bd9a5460 __libc_start_main +
    245

    6    tmprgzxro3y                        0x000055d5b0b74319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1659824687
- exit_code: -4
  program: "\n/// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n/// separate those group into separate\
    \ strings and return the array of those.\n/// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n/// Ignore\
    \ any spaces in the input string.\n/// >>> separate_paren_groups(paren_string:\
    \ \"( ) (( )) (( )( ))\")\n/// [\"()\", \"(())\", \"(()())\"]\nfunc separate_paren_groups(paren_string:\
    \ String) -> [String] {\n    var result: [String] = []\n    var current_string\
    \ = \"\"\n    var open_parens = 0\n    for char in paren_string {\n        if\
    \ char == \"(\" {\n            open_parens += 1\n            current_string +=\
    \ \"(\"\n        } else if char == \")\" {\n            open_parens -= 1\n   \
    \         current_string += \")\"\n        }\n        if open_parens == 0 {\n\
    \            result.append(current_string)\n            current_string = \"\"\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(separate_paren_groups(paren_string: \"(()()) ((())) () ((())()())\") ==\
    \ [\"(()())\", \"((()))\", \"()\", \"((())()())\"])\nassert(separate_paren_groups(paren_string:\
    \ \"() (()) ((())) (((())))\") == [\"()\", \"(())\", \"((()))\", \"(((())))\"\
    ])\nassert(separate_paren_groups(paren_string: \"(()(())((())))\") == [\"(()(())((())))\"\
    ])\nassert(separate_paren_groups(paren_string: \"( ) (( )) (( )( ))\") == [\"\
    ()\", \"(())\", \"(()())\"])"
  status: Exception
  stderr: 'tmpd4o62yre/tmpd4o62yre.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b21b4957c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b21b464eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b21b464e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b21b464d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpd4o62yre                        0x000055a8fe8dd797 <unavailable> + 6039

    5    libc.so.6                          0x00002b21b4b43460 __libc_start_main +
    245

    6    tmpd4o62yre                        0x000055a8fe8dd329 <unavailable> + 4905

    '
  stdout: ''
  timestamp: 1659824687
- exit_code: 0
  program: "\n/// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n/// separate those group into separate\
    \ strings and return the array of those.\n/// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n/// Ignore\
    \ any spaces in the input string.\n/// >>> separate_paren_groups(paren_string:\
    \ \"( ) (( )) (( )( ))\")\n/// [\"()\", \"(())\", \"(()())\"]\nfunc separate_paren_groups(paren_string:\
    \ String) -> [String] {\n    var result: [String] = []\n    var paren_stack: [Character]\
    \ = []\n    var current_string: String = \"\"\n    for char in paren_string {\n\
    \        if char == \" \" {\n            continue\n        }\n        if char\
    \ == \"(\" {\n            paren_stack.append(char)\n            current_string.append(char)\n\
    \        } else if char == \")\" {\n            paren_stack.removeLast()\n   \
    \         current_string.append(char)\n            if paren_stack.isEmpty {\n\
    \                result.append(current_string)\n                current_string\
    \ = \"\"\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(separate_paren_groups(paren_string: \"(()()) ((())) ()\
    \ ((())()())\") == [\"(()())\", \"((()))\", \"()\", \"((())()())\"])\nassert(separate_paren_groups(paren_string:\
    \ \"() (()) ((())) (((())))\") == [\"()\", \"(())\", \"((()))\", \"(((())))\"\
    ])\nassert(separate_paren_groups(paren_string: \"(()(())((())))\") == [\"(()(())((())))\"\
    ])\nassert(separate_paren_groups(paren_string: \"( ) (( )) (( )( ))\") == [\"\
    ()\", \"(())\", \"(()())\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824687
- exit_code: -4
  program: "\n/// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n/// separate those group into separate\
    \ strings and return the array of those.\n/// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n/// Ignore\
    \ any spaces in the input string.\n/// >>> separate_paren_groups(paren_string:\
    \ \"( ) (( )) (( )( ))\")\n/// [\"()\", \"(())\", \"(()())\"]\nfunc separate_paren_groups(paren_string:\
    \ String) -> [String] {\n    var result: [String] = []\n    var current_string\
    \ = \"\"\n    var paren_count = 0\n    for char in paren_string {\n        if\
    \ char == \"(\" {\n            paren_count += 1\n        } else if char == \"\
    )\" {\n            paren_count -= 1\n        }\n        if paren_count == 0 {\n\
    \            result.append(current_string)\n            current_string = \"\"\n\
    \        } else {\n            current_string.append(char)\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(separate_paren_groups(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [\"(()())\", \"((()))\", \"()\", \"((())()())\"\
    ])\nassert(separate_paren_groups(paren_string: \"() (()) ((())) (((())))\") ==\
    \ [\"()\", \"(())\", \"((()))\", \"(((())))\"])\nassert(separate_paren_groups(paren_string:\
    \ \"(()(())((())))\") == [\"(()(())((())))\"])\nassert(separate_paren_groups(paren_string:\
    \ \"( ) (( )) (( )( ))\") == [\"()\", \"(())\", \"(()())\"])"
  status: Exception
  stderr: 'tmpl7h0em7h/tmpl7h0em7h.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aaf9a5ffc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aaf9a2f6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aaf9a2f6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aaf9a2f57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpl7h0em7h                        0x000055694d640787 <unavailable> + 6023

    5    libc.so.6                          0x00002aaf9a7eb460 __libc_start_main +
    245

    6    tmpl7h0em7h                        0x000055694d640319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1659824687
- exit_code: -4
  program: "\n/// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n/// separate those group into separate\
    \ strings and return the array of those.\n/// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n/// Ignore\
    \ any spaces in the input string.\n/// >>> separate_paren_groups(paren_string:\
    \ \"( ) (( )) (( )( ))\")\n/// [\"()\", \"(())\", \"(()())\"]\nfunc separate_paren_groups(paren_string:\
    \ String) -> [String] {\n    var result: [String] = []\n    var current_group:\
    \ String = \"\"\n    var open_paren_count: Int = 0\n    var close_paren_count:\
    \ Int = 0\n    for char in paren_string {\n        if char == \"(\" {\n      \
    \      open_paren_count += 1\n            current_group += String(char)\n    \
    \    } else if char == \")\" {\n            close_paren_count += 1\n         \
    \   current_group += String(char)\n        }\n        if open_paren_count == close_paren_count\
    \ {\n            result.append(current_group)\n            current_group = \"\"\
    \n            open_paren_count = 0\n            close_paren_count = 0\n      \
    \  }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(separate_paren_groups(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [\"(()())\", \"((()))\", \"()\", \"((())()())\"\
    ])\nassert(separate_paren_groups(paren_string: \"() (()) ((())) (((())))\") ==\
    \ [\"()\", \"(())\", \"((()))\", \"(((())))\"])\nassert(separate_paren_groups(paren_string:\
    \ \"(()(())((())))\") == [\"(()(())((())))\"])\nassert(separate_paren_groups(paren_string:\
    \ \"( ) (( )) (( )( ))\") == [\"()\", \"(())\", \"(()())\"])"
  status: Exception
  stderr: 'tmpzakmthp6/tmpzakmthp6.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad1f303ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad1f2d31b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad1f2d31988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad1f2d307b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzakmthp6                        0x000055aa53eb17e7 <unavailable> + 6119

    5    libc.so.6                          0x00002ad1f3226460 __libc_start_main +
    245

    6    tmpzakmthp6                        0x000055aa53eb1379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1659824688
- exit_code: -4
  program: "\n/// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n/// separate those group into separate\
    \ strings and return the array of those.\n/// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n/// Ignore\
    \ any spaces in the input string.\n/// >>> separate_paren_groups(paren_string:\
    \ \"( ) (( )) (( )( ))\")\n/// [\"()\", \"(())\", \"(()())\"]\nfunc separate_paren_groups(paren_string:\
    \ String) -> [String] {\n    var result = [String]()\n    var current_group =\
    \ \"\"\n    var open_parens = 0\n    for char in paren_string {\n        if char\
    \ == \"(\" {\n            open_parens += 1\n            current_group += \"(\"\
    \n        } else if char == \")\" {\n            open_parens -= 1\n          \
    \  current_group += \")\"\n        }\n        if open_parens == 0 {\n        \
    \    result.append(current_group)\n            current_group = \"\"\n        }\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(separate_paren_groups(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [\"(()())\", \"((()))\", \"()\", \"((())()())\"\
    ])\nassert(separate_paren_groups(paren_string: \"() (()) ((())) (((())))\") ==\
    \ [\"()\", \"(())\", \"((()))\", \"(((())))\"])\nassert(separate_paren_groups(paren_string:\
    \ \"(()(())((())))\") == [\"(()(())((())))\"])\nassert(separate_paren_groups(paren_string:\
    \ \"( ) (( )) (( )( ))\") == [\"()\", \"(())\", \"(()())\"])"
  status: Exception
  stderr: 'tmpypij2s5c/tmpypij2s5c.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9ffcdf2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9ffcae9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9ffcae9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9ffcae87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpypij2s5c                        0x0000564db99f07e7 <unavailable> + 6119

    5    libc.so.6                          0x00002b9ffcfde460 __libc_start_main +
    245

    6    tmpypij2s5c                        0x0000564db99f0379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1659824687
- exit_code: -4
  program: "\n/// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n/// separate those group into separate\
    \ strings and return the array of those.\n/// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n/// Ignore\
    \ any spaces in the input string.\n/// >>> separate_paren_groups(paren_string:\
    \ \"( ) (( )) (( )( ))\")\n/// [\"()\", \"(())\", \"(()())\"]\nfunc separate_paren_groups(paren_string:\
    \ String) -> [String] {\n    var result = [String]()\n    var current = \"\"\n\
    \    var open = 0\n    for char in paren_string {\n        if char == \"(\" {\n\
    \            open += 1\n            current += \"(\"\n        } else if char ==\
    \ \")\" {\n            open -= 1\n            current += \")\"\n        }\n  \
    \      if open == 0 {\n            result.append(current)\n            current\
    \ = \"\"\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(separate_paren_groups(paren_string: \"(()()) ((())) () ((())()())\"\
    ) == [\"(()())\", \"((()))\", \"()\", \"((())()())\"])\nassert(separate_paren_groups(paren_string:\
    \ \"() (()) ((())) (((())))\") == [\"()\", \"(())\", \"((()))\", \"(((())))\"\
    ])\nassert(separate_paren_groups(paren_string: \"(()(())((())))\") == [\"(()(())((())))\"\
    ])\nassert(separate_paren_groups(paren_string: \"( ) (( )) (( )( ))\") == [\"\
    ()\", \"(())\", \"(()())\"])"
  status: Exception
  stderr: 'tmpy8udsbj1/tmpy8udsbj1.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4bfe6f3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4bfe3eab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4bfe3ea988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4bfe3e97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpy8udsbj1                        0x000056233828f7e7 <unavailable> + 6119

    5    libc.so.6                          0x00002b4bfe8df460 __libc_start_main +
    245

    6    tmpy8udsbj1                        0x000056233828f379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1659824687
- exit_code: -4
  program: "\n/// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n/// separate those group into separate\
    \ strings and return the array of those.\n/// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n/// Ignore\
    \ any spaces in the input string.\n/// >>> separate_paren_groups(paren_string:\
    \ \"( ) (( )) (( )( ))\")\n/// [\"()\", \"(())\", \"(()())\"]\nfunc separate_paren_groups(paren_string:\
    \ String) -> [String] {\n    var result = [String]()\n    var current_string =\
    \ \"\"\n    var open_paren_count = 0\n    var close_paren_count = 0\n    for char\
    \ in paren_string {\n        if char == \"(\" {\n            open_paren_count\
    \ += 1\n        } else if char == \")\" {\n            close_paren_count += 1\n\
    \        }\n        if open_paren_count == close_paren_count {\n            if\
    \ current_string != \"\" {\n                result.append(current_string)\n  \
    \              current_string = \"\"\n            }\n        } else {\n      \
    \      current_string.append(char)\n        }\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(separate_paren_groups(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [\"(()())\", \"((()))\", \"()\", \"((())()())\"])\nassert(separate_paren_groups(paren_string:\
    \ \"() (()) ((())) (((())))\") == [\"()\", \"(())\", \"((()))\", \"(((())))\"\
    ])\nassert(separate_paren_groups(paren_string: \"(()(())((())))\") == [\"(()(())((())))\"\
    ])\nassert(separate_paren_groups(paren_string: \"( ) (( )) (( )( ))\") == [\"\
    ()\", \"(())\", \"(()())\"])"
  status: Exception
  stderr: 'tmp3qe9dhbw/tmp3qe9dhbw.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af9e3f2ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af9e3c21b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af9e3c21988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af9e3c207b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3qe9dhbw                        0x000055857aaef837 <unavailable> + 6199

    5    libc.so.6                          0x00002af9e4116460 __libc_start_main +
    245

    6    tmp3qe9dhbw                        0x000055857aaef3c9 <unavailable> + 5065

    '
  stdout: ''
  timestamp: 1659824688
- exit_code: -4
  program: "\n/// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n/// separate those group into separate\
    \ strings and return the array of those.\n/// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n/// Ignore\
    \ any spaces in the input string.\n/// >>> separate_paren_groups(paren_string:\
    \ \"( ) (( )) (( )( ))\")\n/// [\"()\", \"(())\", \"(()())\"]\nfunc separate_paren_groups(paren_string:\
    \ String) -> [String] {\n    var result: [String] = []\n    var current: String\
    \ = \"\"\n    var paren_count: Int = 0\n    for char in paren_string {\n     \
    \   if char == \"(\" {\n            paren_count += 1\n        } else if char ==\
    \ \")\" {\n            paren_count -= 1\n        }\n        if paren_count ==\
    \ 0 {\n            if current != \"\" {\n                result.append(current)\n\
    \                current = \"\"\n            }\n        } else {\n           \
    \ current.append(char)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(separate_paren_groups(paren_string: \"(()()) ((())) ()\
    \ ((())()())\") == [\"(()())\", \"((()))\", \"()\", \"((())()())\"])\nassert(separate_paren_groups(paren_string:\
    \ \"() (()) ((())) (((())))\") == [\"()\", \"(())\", \"((()))\", \"(((())))\"\
    ])\nassert(separate_paren_groups(paren_string: \"(()(())((())))\") == [\"(()(())((())))\"\
    ])\nassert(separate_paren_groups(paren_string: \"( ) (( )) (( )( ))\") == [\"\
    ()\", \"(())\", \"(()())\"])"
  status: Exception
  stderr: 'tmpft86lgsl/tmpft86lgsl.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae13f045c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae13ed3cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae13ed3c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae13ed3b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpft86lgsl                        0x000055e2940d57e7 <unavailable> + 6119

    5    libc.so.6                          0x00002ae13f231460 __libc_start_main +
    245

    6    tmpft86lgsl                        0x000055e2940d5379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1659824688
- exit_code: -4
  program: "\n/// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n/// separate those group into separate\
    \ strings and return the array of those.\n/// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n/// Ignore\
    \ any spaces in the input string.\n/// >>> separate_paren_groups(paren_string:\
    \ \"( ) (( )) (( )( ))\")\n/// [\"()\", \"(())\", \"(()())\"]\nfunc separate_paren_groups(paren_string:\
    \ String) -> [String] {\n    var result: [String] = []\n    var current_group:\
    \ String = \"\"\n    var open_parens: Int = 0\n    for char in paren_string {\n\
    \        if char == \"(\" {\n            open_parens += 1\n            current_group\
    \ += \"(\"\n        } else if char == \")\" {\n            open_parens -= 1\n\
    \            current_group += \")\"\n        }\n        if open_parens == 0 {\n\
    \            result.append(current_group)\n            current_group = \"\"\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(separate_paren_groups(paren_string: \"(()()) ((())) () ((())()())\") ==\
    \ [\"(()())\", \"((()))\", \"()\", \"((())()())\"])\nassert(separate_paren_groups(paren_string:\
    \ \"() (()) ((())) (((())))\") == [\"()\", \"(())\", \"((()))\", \"(((())))\"\
    ])\nassert(separate_paren_groups(paren_string: \"(()(())((())))\") == [\"(()(())((())))\"\
    ])\nassert(separate_paren_groups(paren_string: \"( ) (( )) (( )( ))\") == [\"\
    ()\", \"(())\", \"(()())\"])"
  status: Exception
  stderr: 'tmpk1gs__d8/tmpk1gs__d8.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b45980ecc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4597de3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4597de3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4597de27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpk1gs__d8                        0x000055bf39d1d797 <unavailable> + 6039

    5    libc.so.6                          0x00002b45982d8460 __libc_start_main +
    245

    6    tmpk1gs__d8                        0x000055bf39d1d329 <unavailable> + 4905

    '
  stdout: ''
  timestamp: 1659824687
- exit_code: -4
  program: "\n/// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n/// separate those group into separate\
    \ strings and return the array of those.\n/// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n/// Ignore\
    \ any spaces in the input string.\n/// >>> separate_paren_groups(paren_string:\
    \ \"( ) (( )) (( )( ))\")\n/// [\"()\", \"(())\", \"(()())\"]\nfunc separate_paren_groups(paren_string:\
    \ String) -> [String] {\n    var result: [String] = []\n    var current_string\
    \ = \"\"\n    var open_paren_count = 0\n    for char in paren_string {\n     \
    \   if char == \"(\" {\n            open_paren_count += 1\n            current_string.append(char)\n\
    \        } else if char == \")\" {\n            open_paren_count -= 1\n      \
    \      current_string.append(char)\n        }\n        if open_paren_count ==\
    \ 0 {\n            result.append(current_string)\n            current_string =\
    \ \"\"\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(separate_paren_groups(paren_string: \"(()()) ((())) () ((())()())\"\
    ) == [\"(()())\", \"((()))\", \"()\", \"((())()())\"])\nassert(separate_paren_groups(paren_string:\
    \ \"() (()) ((())) (((())))\") == [\"()\", \"(())\", \"((()))\", \"(((())))\"\
    ])\nassert(separate_paren_groups(paren_string: \"(()(())((())))\") == [\"(()(())((())))\"\
    ])\nassert(separate_paren_groups(paren_string: \"( ) (( )) (( )( ))\") == [\"\
    ()\", \"(())\", \"(()())\"])"
  status: Exception
  stderr: 'tmpvtibezr_/tmpvtibezr_.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b70eaa08c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b70ea6ffb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b70ea6ff988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b70ea6fe7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvtibezr_                        0x0000563a4225c787 <unavailable> + 6023

    5    libc.so.6                          0x00002b70eabf4460 __libc_start_main +
    245

    6    tmpvtibezr_                        0x0000563a4225c319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1659824687
- exit_code: -4
  program: "\n/// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n/// separate those group into separate\
    \ strings and return the array of those.\n/// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n/// Ignore\
    \ any spaces in the input string.\n/// >>> separate_paren_groups(paren_string:\
    \ \"( ) (( )) (( )( ))\")\n/// [\"()\", \"(())\", \"(()())\"]\nfunc separate_paren_groups(paren_string:\
    \ String) -> [String] {\n    var result = [String]()\n    var current = \"\"\n\
    \    var open = 0\n    for c in paren_string {\n        if c == \"(\" {\n    \
    \        open += 1\n            current.append(c)\n        } else if c == \")\"\
    \ {\n            open -= 1\n            current.append(c)\n        }\n       \
    \ if open == 0 {\n            result.append(current)\n            current = \"\
    \"\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(separate_paren_groups(paren_string: \"(()()) ((())) () ((())()())\") ==\
    \ [\"(()())\", \"((()))\", \"()\", \"((())()())\"])\nassert(separate_paren_groups(paren_string:\
    \ \"() (()) ((())) (((())))\") == [\"()\", \"(())\", \"((()))\", \"(((())))\"\
    ])\nassert(separate_paren_groups(paren_string: \"(()(())((())))\") == [\"(()(())((())))\"\
    ])\nassert(separate_paren_groups(paren_string: \"( ) (( )) (( )( ))\") == [\"\
    ()\", \"(())\", \"(()())\"])"
  status: Exception
  stderr: 'tmp5pv4tht3/tmp5pv4tht3.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2af1c7dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2af1974b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2af1974988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2af19737b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5pv4tht3                        0x000056027457a7e7 <unavailable> + 6119

    5    libc.so.6                          0x00002b2af1e69460 __libc_start_main +
    245

    6    tmp5pv4tht3                        0x000056027457a379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1659824687
- exit_code: -4
  program: "\n/// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n/// separate those group into separate\
    \ strings and return the array of those.\n/// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n/// Ignore\
    \ any spaces in the input string.\n/// >>> separate_paren_groups(paren_string:\
    \ \"( ) (( )) (( )( ))\")\n/// [\"()\", \"(())\", \"(()())\"]\nfunc separate_paren_groups(paren_string:\
    \ String) -> [String] {\n    var result: [String] = []\n    var current_group:\
    \ String = \"\"\n    var open_parens: Int = 0\n    for char in paren_string {\n\
    \        if char == \"(\" {\n            open_parens += 1\n            current_group\
    \ += \"(\"\n        } else if char == \")\" {\n            open_parens -= 1\n\
    \            current_group += \")\"\n        }\n        if open_parens == 0 {\n\
    \            result.append(current_group)\n            current_group = \"\"\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(separate_paren_groups(paren_string: \"(()()) ((())) () ((())()())\") ==\
    \ [\"(()())\", \"((()))\", \"()\", \"((())()())\"])\nassert(separate_paren_groups(paren_string:\
    \ \"() (()) ((())) (((())))\") == [\"()\", \"(())\", \"((()))\", \"(((())))\"\
    ])\nassert(separate_paren_groups(paren_string: \"(()(())((())))\") == [\"(()(())((())))\"\
    ])\nassert(separate_paren_groups(paren_string: \"( ) (( )) (( )( ))\") == [\"\
    ()\", \"(())\", \"(()())\"])"
  status: Exception
  stderr: 'tmpk1gs__d8/tmpk1gs__d8.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b45980ecc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4597de3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4597de3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4597de27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpk1gs__d8                        0x000055bf39d1d797 <unavailable> + 6039

    5    libc.so.6                          0x00002b45982d8460 __libc_start_main +
    245

    6    tmpk1gs__d8                        0x000055bf39d1d329 <unavailable> + 4905

    '
  stdout: ''
  timestamp: 1659824687
- exit_code: -4
  program: "\n/// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n/// separate those group into separate\
    \ strings and return the array of those.\n/// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n/// Ignore\
    \ any spaces in the input string.\n/// >>> separate_paren_groups(paren_string:\
    \ \"( ) (( )) (( )( ))\")\n/// [\"()\", \"(())\", \"(()())\"]\nfunc separate_paren_groups(paren_string:\
    \ String) -> [String] {\n    var result = [String]()\n    var current = \"\"\n\
    \    var count = 0\n    for char in paren_string {\n        if char == \"(\" {\n\
    \            count += 1\n        } else if char == \")\" {\n            count\
    \ -= 1\n        }\n        if count == 0 {\n            result.append(current)\n\
    \            current = \"\"\n        } else {\n            current.append(char)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(separate_paren_groups(paren_string: \"(()()) ((())) () ((())()())\") ==\
    \ [\"(()())\", \"((()))\", \"()\", \"((())()())\"])\nassert(separate_paren_groups(paren_string:\
    \ \"() (()) ((())) (((())))\") == [\"()\", \"(())\", \"((()))\", \"(((())))\"\
    ])\nassert(separate_paren_groups(paren_string: \"(()(())((())))\") == [\"(()(())((())))\"\
    ])\nassert(separate_paren_groups(paren_string: \"( ) (( )) (( )( ))\") == [\"\
    ()\", \"(())\", \"(()())\"])"
  status: Exception
  stderr: 'tmpa9bj22xb/tmpa9bj22xb.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4333f70c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4333c67b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4333c67988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4333c667b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpa9bj22xb                        0x00005572dcce47e7 <unavailable> + 6119

    5    libc.so.6                          0x00002b433415c460 __libc_start_main +
    245

    6    tmpa9bj22xb                        0x00005572dcce4379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1659824688
- exit_code: -4
  program: "\n/// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n/// separate those group into separate\
    \ strings and return the array of those.\n/// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n/// Ignore\
    \ any spaces in the input string.\n/// >>> separate_paren_groups(paren_string:\
    \ \"( ) (( )) (( )( ))\")\n/// [\"()\", \"(())\", \"(()())\"]\nfunc separate_paren_groups(paren_string:\
    \ String) -> [String] {\n    var result = [String]()\n    var current = \"\"\n\
    \    var count = 0\n    for char in paren_string {\n        if char == \"(\" {\n\
    \            count += 1\n        } else if char == \")\" {\n            count\
    \ -= 1\n        }\n        if count == 0 {\n            if current != \"\" {\n\
    \                result.append(current)\n                current = \"\"\n    \
    \        }\n        } else {\n            current.append(char)\n        }\n  \
    \  }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(separate_paren_groups(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [\"(()())\", \"((()))\", \"()\", \"((())()())\"\
    ])\nassert(separate_paren_groups(paren_string: \"() (()) ((())) (((())))\") ==\
    \ [\"()\", \"(())\", \"((()))\", \"(((())))\"])\nassert(separate_paren_groups(paren_string:\
    \ \"(()(())((())))\") == [\"(()(())((())))\"])\nassert(separate_paren_groups(paren_string:\
    \ \"( ) (( )) (( )( ))\") == [\"()\", \"(())\", \"(()())\"])"
  status: Exception
  stderr: 'tmpyx_kmg0e/tmpyx_kmg0e.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0e5db6fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0e5d866b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0e5d866988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0e5d8657b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyx_kmg0e                        0x000055b43c8e5837 <unavailable> + 6199

    5    libc.so.6                          0x00002b0e5dd5b460 __libc_start_main +
    245

    6    tmpyx_kmg0e                        0x000055b43c8e53c9 <unavailable> + 5065

    '
  stdout: ''
  timestamp: 1659824687
- exit_code: -4
  program: "\n/// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n/// separate those group into separate\
    \ strings and return the array of those.\n/// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n/// Ignore\
    \ any spaces in the input string.\n/// >>> separate_paren_groups(paren_string:\
    \ \"( ) (( )) (( )( ))\")\n/// [\"()\", \"(())\", \"(()())\"]\nfunc separate_paren_groups(paren_string:\
    \ String) -> [String] {\n    var result = [String]()\n    var current_paren_group\
    \ = \"\"\n    var open_paren_count = 0\n    for char in paren_string {\n     \
    \   if char == \"(\" {\n            open_paren_count += 1\n            current_paren_group\
    \ += \"(\"\n        } else if char == \")\" {\n            open_paren_count -=\
    \ 1\n            current_paren_group += \")\"\n        }\n        if open_paren_count\
    \ == 0 {\n            result.append(current_paren_group)\n            current_paren_group\
    \ = \"\"\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(separate_paren_groups(paren_string: \"(()()) ((())) () ((())()())\"\
    ) == [\"(()())\", \"((()))\", \"()\", \"((())()())\"])\nassert(separate_paren_groups(paren_string:\
    \ \"() (()) ((())) (((())))\") == [\"()\", \"(())\", \"((()))\", \"(((())))\"\
    ])\nassert(separate_paren_groups(paren_string: \"(()(())((())))\") == [\"(()(())((())))\"\
    ])\nassert(separate_paren_groups(paren_string: \"( ) (( )) (( )( ))\") == [\"\
    ()\", \"(())\", \"(()())\"])"
  status: Exception
  stderr: 'tmpi9h0zg1s/tmpi9h0zg1s.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba7e2d45c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba7e2a3cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba7e2a3c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba7e2a3b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpi9h0zg1s                        0x00005594199827e7 <unavailable> + 6119

    5    libc.so.6                          0x00002ba7e2f31460 __libc_start_main +
    245

    6    tmpi9h0zg1s                        0x0000559419982379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1659824687
- exit_code: -4
  program: "\n/// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n/// separate those group into separate\
    \ strings and return the array of those.\n/// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n/// Ignore\
    \ any spaces in the input string.\n/// >>> separate_paren_groups(paren_string:\
    \ \"( ) (( )) (( )( ))\")\n/// [\"()\", \"(())\", \"(()())\"]\nfunc separate_paren_groups(paren_string:\
    \ String) -> [String] {\n    var result = [String]()\n    var current = \"\"\n\
    \    var open = 0\n    for char in paren_string {\n        if char == \"(\" {\n\
    \            open += 1\n            current += \"(\"\n        } else if char ==\
    \ \")\" {\n            open -= 1\n            current += \")\"\n        }\n  \
    \      if open == 0 {\n            result.append(current)\n            current\
    \ = \"\"\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(separate_paren_groups(paren_string: \"(()()) ((())) () ((())()())\"\
    ) == [\"(()())\", \"((()))\", \"()\", \"((())()())\"])\nassert(separate_paren_groups(paren_string:\
    \ \"() (()) ((())) (((())))\") == [\"()\", \"(())\", \"((()))\", \"(((())))\"\
    ])\nassert(separate_paren_groups(paren_string: \"(()(())((())))\") == [\"(()(())((())))\"\
    ])\nassert(separate_paren_groups(paren_string: \"( ) (( )) (( )( ))\") == [\"\
    ()\", \"(())\", \"(()())\"])"
  status: Exception
  stderr: 'tmpy8udsbj1/tmpy8udsbj1.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4bfe6f3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4bfe3eab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4bfe3ea988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4bfe3e97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpy8udsbj1                        0x000056233828f7e7 <unavailable> + 6119

    5    libc.so.6                          0x00002b4bfe8df460 __libc_start_main +
    245

    6    tmpy8udsbj1                        0x000056233828f379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1659824687
- exit_code: -4
  program: "\n/// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n/// separate those group into separate\
    \ strings and return the array of those.\n/// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n/// Ignore\
    \ any spaces in the input string.\n/// >>> separate_paren_groups(paren_string:\
    \ \"( ) (( )) (( )( ))\")\n/// [\"()\", \"(())\", \"(()())\"]\nfunc separate_paren_groups(paren_string:\
    \ String) -> [String] {\n    var result: [String] = []\n    var current_paren_group:\
    \ String = \"\"\n    var paren_count: Int = 0\n    for char in paren_string {\n\
    \        if char == \"(\" {\n            paren_count += 1\n        } else if char\
    \ == \")\" {\n            paren_count -= 1\n        }\n        if paren_count\
    \ == 0 {\n            if current_paren_group != \"\" {\n                result.append(current_paren_group)\n\
    \                current_paren_group = \"\"\n            }\n        } else {\n\
    \            current_paren_group.append(char)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(separate_paren_groups(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [\"(()())\", \"((()))\", \"()\", \"((())()())\"])\nassert(separate_paren_groups(paren_string:\
    \ \"() (()) ((())) (((())))\") == [\"()\", \"(())\", \"((()))\", \"(((())))\"\
    ])\nassert(separate_paren_groups(paren_string: \"(()(())((())))\") == [\"(()(())((())))\"\
    ])\nassert(separate_paren_groups(paren_string: \"( ) (( )) (( )( ))\") == [\"\
    ()\", \"(())\", \"(()())\"])"
  status: Exception
  stderr: 'tmpy3jehqao/tmpy3jehqao.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8a1c36dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8a1c064b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8a1c064988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8a1c0637b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpy3jehqao                        0x0000557f3c71c7e7 <unavailable> + 6119

    5    libc.so.6                          0x00002b8a1c559460 __libc_start_main +
    245

    6    tmpy3jehqao                        0x0000557f3c71c379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1659824687
- exit_code: -4
  program: "\n/// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n/// separate those group into separate\
    \ strings and return the array of those.\n/// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n/// Ignore\
    \ any spaces in the input string.\n/// >>> separate_paren_groups(paren_string:\
    \ \"( ) (( )) (( )( ))\")\n/// [\"()\", \"(())\", \"(()())\"]\nfunc separate_paren_groups(paren_string:\
    \ String) -> [String] {\n    var result = [String]()\n    var current = \"\"\n\
    \    var open = 0\n    for char in paren_string {\n        if char == \"(\" {\n\
    \            open += 1\n            current += String(char)\n        } else if\
    \ char == \")\" {\n            open -= 1\n            current += String(char)\n\
    \        }\n        if open == 0 {\n            result.append(current)\n     \
    \       current = \"\"\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(separate_paren_groups(paren_string: \"(()()) ((())) ()\
    \ ((())()())\") == [\"(()())\", \"((()))\", \"()\", \"((())()())\"])\nassert(separate_paren_groups(paren_string:\
    \ \"() (()) ((())) (((())))\") == [\"()\", \"(())\", \"((()))\", \"(((())))\"\
    ])\nassert(separate_paren_groups(paren_string: \"(()(())((())))\") == [\"(()(())((())))\"\
    ])\nassert(separate_paren_groups(paren_string: \"( ) (( )) (( )( ))\") == [\"\
    ()\", \"(())\", \"(()())\"])"
  status: Exception
  stderr: 'tmp_se8cu6l/tmp_se8cu6l.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b37c9608c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b37c92ffb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b37c92ff988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b37c92fe7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_se8cu6l                        0x0000560622c66837 <unavailable> + 6199

    5    libc.so.6                          0x00002b37c97f4460 __libc_start_main +
    245

    6    tmp_se8cu6l                        0x0000560622c663c9 <unavailable> + 5065

    '
  stdout: ''
  timestamp: 1659824687
- exit_code: -4
  program: "\n/// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n/// separate those group into separate\
    \ strings and return the array of those.\n/// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n/// Ignore\
    \ any spaces in the input string.\n/// >>> separate_paren_groups(paren_string:\
    \ \"( ) (( )) (( )( ))\")\n/// [\"()\", \"(())\", \"(()())\"]\nfunc separate_paren_groups(paren_string:\
    \ String) -> [String] {\n    var result: [String] = []\n    var current_group:\
    \ String = \"\"\n    var open_parens: Int = 0\n    for char in paren_string {\n\
    \        if char == \"(\" {\n            open_parens += 1\n            current_group\
    \ += String(char)\n        } else if char == \")\" {\n            open_parens\
    \ -= 1\n            current_group += String(char)\n        }\n        if open_parens\
    \ == 0 {\n            result.append(current_group)\n            current_group\
    \ = \"\"\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(separate_paren_groups(paren_string: \"(()()) ((())) () ((())()())\"\
    ) == [\"(()())\", \"((()))\", \"()\", \"((())()())\"])\nassert(separate_paren_groups(paren_string:\
    \ \"() (()) ((())) (((())))\") == [\"()\", \"(())\", \"((()))\", \"(((())))\"\
    ])\nassert(separate_paren_groups(paren_string: \"(()(())((())))\") == [\"(()(())((())))\"\
    ])\nassert(separate_paren_groups(paren_string: \"( ) (( )) (( )( ))\") == [\"\
    ()\", \"(())\", \"(()())\"])"
  status: Exception
  stderr: 'tmp75iu15po/tmp75iu15po.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b33bb404c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b33bb0fbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b33bb0fb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b33bb0fa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp75iu15po                        0x000055a82b0bb7e7 <unavailable> + 6119

    5    libc.so.6                          0x00002b33bb5f0460 __libc_start_main +
    245

    6    tmp75iu15po                        0x000055a82b0bb379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1659824687
- exit_code: -4
  program: "\n/// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n/// separate those group into separate\
    \ strings and return the array of those.\n/// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n/// Ignore\
    \ any spaces in the input string.\n/// >>> separate_paren_groups(paren_string:\
    \ \"( ) (( )) (( )( ))\")\n/// [\"()\", \"(())\", \"(()())\"]\nfunc separate_paren_groups(paren_string:\
    \ String) -> [String] {\n    var result = [String]()\n    var current = \"\"\n\
    \    var parenCount = 0\n    for char in paren_string {\n        if char == \"\
    (\" {\n            parenCount += 1\n        } else if char == \")\" {\n      \
    \      parenCount -= 1\n        }\n        if parenCount == 0 {\n            if\
    \ current != \"\" {\n                result.append(current)\n                current\
    \ = \"\"\n            }\n        } else {\n            current.append(char)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(separate_paren_groups(paren_string: \"(()()) ((())) () ((())()())\") ==\
    \ [\"(()())\", \"((()))\", \"()\", \"((())()())\"])\nassert(separate_paren_groups(paren_string:\
    \ \"() (()) ((())) (((())))\") == [\"()\", \"(())\", \"((()))\", \"(((())))\"\
    ])\nassert(separate_paren_groups(paren_string: \"(()(())((())))\") == [\"(()(())((())))\"\
    ])\nassert(separate_paren_groups(paren_string: \"( ) (( )) (( )( ))\") == [\"\
    ()\", \"(())\", \"(()())\"])"
  status: Exception
  stderr: 'tmp_y1anhn0/tmp_y1anhn0.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b54211ddc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5420ed4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5420ed4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5420ed37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_y1anhn0                        0x000055c5e0e80837 <unavailable> + 6199

    5    libc.so.6                          0x00002b54213c9460 __libc_start_main +
    245

    6    tmp_y1anhn0                        0x000055c5e0e803c9 <unavailable> + 5065

    '
  stdout: ''
  timestamp: 1659824688
- exit_code: -4
  program: "\n/// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n/// separate those group into separate\
    \ strings and return the array of those.\n/// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n/// Ignore\
    \ any spaces in the input string.\n/// >>> separate_paren_groups(paren_string:\
    \ \"( ) (( )) (( )( ))\")\n/// [\"()\", \"(())\", \"(()())\"]\nfunc separate_paren_groups(paren_string:\
    \ String) -> [String] {\n    var result = [String]()\n    var current = \"\"\n\
    \    var open = 0\n    for char in paren_string {\n        if char == \"(\" {\n\
    \            open += 1\n            current += String(char)\n        } else if\
    \ char == \")\" {\n            open -= 1\n            current += String(char)\n\
    \        }\n        if open == 0 {\n            result.append(current)\n     \
    \       current = \"\"\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(separate_paren_groups(paren_string: \"(()()) ((())) ()\
    \ ((())()())\") == [\"(()())\", \"((()))\", \"()\", \"((())()())\"])\nassert(separate_paren_groups(paren_string:\
    \ \"() (()) ((())) (((())))\") == [\"()\", \"(())\", \"((()))\", \"(((())))\"\
    ])\nassert(separate_paren_groups(paren_string: \"(()(())((())))\") == [\"(()(())((())))\"\
    ])\nassert(separate_paren_groups(paren_string: \"( ) (( )) (( )( ))\") == [\"\
    ()\", \"(())\", \"(()())\"])"
  status: Exception
  stderr: 'tmp_se8cu6l/tmp_se8cu6l.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b37c9608c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b37c92ffb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b37c92ff988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b37c92fe7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_se8cu6l                        0x0000560622c66837 <unavailable> + 6199

    5    libc.so.6                          0x00002b37c97f4460 __libc_start_main +
    245

    6    tmp_se8cu6l                        0x0000560622c663c9 <unavailable> + 5065

    '
  stdout: ''
  timestamp: 1659824687
- exit_code: -4
  program: "\n/// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n/// separate those group into separate\
    \ strings and return the array of those.\n/// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n/// Ignore\
    \ any spaces in the input string.\n/// >>> separate_paren_groups(paren_string:\
    \ \"( ) (( )) (( )( ))\")\n/// [\"()\", \"(())\", \"(()())\"]\nfunc separate_paren_groups(paren_string:\
    \ String) -> [String] {\n    var result = [String]()\n    var current_group =\
    \ \"\"\n    var open_parens = 0\n    for char in paren_string {\n        if char\
    \ == \"(\" {\n            open_parens += 1\n            current_group += String(char)\n\
    \        } else if char == \")\" {\n            open_parens -= 1\n           \
    \ current_group += String(char)\n        }\n        if open_parens == 0 {\n  \
    \          result.append(current_group)\n            current_group = \"\"\n  \
    \      }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(separate_paren_groups(paren_string: \"(()()) ((())) () ((())()())\") ==\
    \ [\"(()())\", \"((()))\", \"()\", \"((())()())\"])\nassert(separate_paren_groups(paren_string:\
    \ \"() (()) ((())) (((())))\") == [\"()\", \"(())\", \"((()))\", \"(((())))\"\
    ])\nassert(separate_paren_groups(paren_string: \"(()(())((())))\") == [\"(()(())((())))\"\
    ])\nassert(separate_paren_groups(paren_string: \"( ) (( )) (( )( ))\") == [\"\
    ()\", \"(())\", \"(()())\"])"
  status: Exception
  stderr: 'tmp5qbxzuvz/tmp5qbxzuvz.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af5a85f9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af5a82f0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af5a82f0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af5a82ef7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5qbxzuvz                        0x000055e79ee27837 <unavailable> + 6199

    5    libc.so.6                          0x00002af5a87e5460 __libc_start_main +
    245

    6    tmp5qbxzuvz                        0x000055e79ee273c9 <unavailable> + 5065

    '
  stdout: ''
  timestamp: 1659824687
- exit_code: -4
  program: "\n/// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n/// separate those group into separate\
    \ strings and return the array of those.\n/// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n/// Ignore\
    \ any spaces in the input string.\n/// >>> separate_paren_groups(paren_string:\
    \ \"( ) (( )) (( )( ))\")\n/// [\"()\", \"(())\", \"(()())\"]\nfunc separate_paren_groups(paren_string:\
    \ String) -> [String] {\n    var result: [String] = []\n    var current_group:\
    \ String = \"\"\n    var open_paren_count: Int = 0\n    for char in paren_string\
    \ {\n        if char == \"(\" {\n            open_paren_count += 1\n         \
    \   current_group += \"(\"\n        } else if char == \")\" {\n            open_paren_count\
    \ -= 1\n            current_group += \")\"\n        }\n        if open_paren_count\
    \ == 0 {\n            result.append(current_group)\n            current_group\
    \ = \"\"\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(separate_paren_groups(paren_string: \"(()()) ((())) () ((())()())\"\
    ) == [\"(()())\", \"((()))\", \"()\", \"((())()())\"])\nassert(separate_paren_groups(paren_string:\
    \ \"() (()) ((())) (((())))\") == [\"()\", \"(())\", \"((()))\", \"(((())))\"\
    ])\nassert(separate_paren_groups(paren_string: \"(()(())((())))\") == [\"(()(())((())))\"\
    ])\nassert(separate_paren_groups(paren_string: \"( ) (( )) (( )( ))\") == [\"\
    ()\", \"(())\", \"(()())\"])"
  status: Exception
  stderr: 'tmp7zdzvt8s/tmp7zdzvt8s.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2d4fa15c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2d4f70cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2d4f70c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2d4f70b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7zdzvt8s                        0x0000560495b3a797 <unavailable> + 6039

    5    libc.so.6                          0x00002b2d4fc01460 __libc_start_main +
    245

    6    tmp7zdzvt8s                        0x0000560495b3a329 <unavailable> + 4905

    '
  stdout: ''
  timestamp: 1659824687
- exit_code: -4
  program: "\n/// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n/// separate those group into separate\
    \ strings and return the array of those.\n/// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n/// Ignore\
    \ any spaces in the input string.\n/// >>> separate_paren_groups(paren_string:\
    \ \"( ) (( )) (( )( ))\")\n/// [\"()\", \"(())\", \"(()())\"]\nfunc separate_paren_groups(paren_string:\
    \ String) -> [String] {\n    var result: [String] = []\n    var current_group:\
    \ String = \"\"\n    var open_paren_count: Int = 0\n    for char in paren_string\
    \ {\n        if char == \"(\" {\n            open_paren_count += 1\n         \
    \   current_group += String(char)\n        } else if char == \")\" {\n       \
    \     open_paren_count -= 1\n            current_group += String(char)\n     \
    \   }\n        if open_paren_count == 0 {\n            result.append(current_group)\n\
    \            current_group = \"\"\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(separate_paren_groups(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [\"(()())\", \"((()))\", \"()\", \"((())()())\"])\nassert(separate_paren_groups(paren_string:\
    \ \"() (()) ((())) (((())))\") == [\"()\", \"(())\", \"((()))\", \"(((())))\"\
    ])\nassert(separate_paren_groups(paren_string: \"(()(())((())))\") == [\"(()(())((())))\"\
    ])\nassert(separate_paren_groups(paren_string: \"( ) (( )) (( )( ))\") == [\"\
    ()\", \"(())\", \"(()())\"])"
  status: Exception
  stderr: 'tmp8lpwgxlv/tmp8lpwgxlv.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9d38726c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9d3841db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9d3841d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9d3841c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8lpwgxlv                        0x0000563d7f9917e7 <unavailable> + 6119

    5    libc.so.6                          0x00002b9d38912460 __libc_start_main +
    245

    6    tmp8lpwgxlv                        0x0000563d7f991379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1659824687
- exit_code: -4
  program: "\n/// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n/// separate those group into separate\
    \ strings and return the array of those.\n/// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n/// Ignore\
    \ any spaces in the input string.\n/// >>> separate_paren_groups(paren_string:\
    \ \"( ) (( )) (( )( ))\")\n/// [\"()\", \"(())\", \"(()())\"]\nfunc separate_paren_groups(paren_string:\
    \ String) -> [String] {\n    var result = [String]()\n    var current_group =\
    \ \"\"\n    var open_parens = 0\n    for char in paren_string {\n        if char\
    \ == \"(\" {\n            open_parens += 1\n            current_group += \"(\"\
    \n        } else if char == \")\" {\n            open_parens -= 1\n          \
    \  current_group += \")\"\n        }\n        if open_parens == 0 {\n        \
    \    result.append(current_group)\n            current_group = \"\"\n        }\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(separate_paren_groups(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [\"(()())\", \"((()))\", \"()\", \"((())()())\"\
    ])\nassert(separate_paren_groups(paren_string: \"() (()) ((())) (((())))\") ==\
    \ [\"()\", \"(())\", \"((()))\", \"(((())))\"])\nassert(separate_paren_groups(paren_string:\
    \ \"(()(())((())))\") == [\"(()(())((())))\"])\nassert(separate_paren_groups(paren_string:\
    \ \"( ) (( )) (( )( ))\") == [\"()\", \"(())\", \"(()())\"])"
  status: Exception
  stderr: 'tmpypij2s5c/tmpypij2s5c.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9ffcdf2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9ffcae9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9ffcae9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9ffcae87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpypij2s5c                        0x0000564db99f07e7 <unavailable> + 6119

    5    libc.so.6                          0x00002b9ffcfde460 __libc_start_main +
    245

    6    tmpypij2s5c                        0x0000564db99f0379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1659824687
- exit_code: -4
  program: "\n/// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n/// separate those group into separate\
    \ strings and return the array of those.\n/// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n/// Ignore\
    \ any spaces in the input string.\n/// >>> separate_paren_groups(paren_string:\
    \ \"( ) (( )) (( )( ))\")\n/// [\"()\", \"(())\", \"(()())\"]\nfunc separate_paren_groups(paren_string:\
    \ String) -> [String] {\n    var result: [String] = []\n    var current_group:\
    \ String = \"\"\n    var open_parens: Int = 0\n    for char in paren_string {\n\
    \        if char == \"(\" {\n            open_parens += 1\n            current_group\
    \ += \"(\"\n        } else if char == \")\" {\n            open_parens -= 1\n\
    \            current_group += \")\"\n        }\n        if open_parens == 0 {\n\
    \            result.append(current_group)\n            current_group = \"\"\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(separate_paren_groups(paren_string: \"(()()) ((())) () ((())()())\") ==\
    \ [\"(()())\", \"((()))\", \"()\", \"((())()())\"])\nassert(separate_paren_groups(paren_string:\
    \ \"() (()) ((())) (((())))\") == [\"()\", \"(())\", \"((()))\", \"(((())))\"\
    ])\nassert(separate_paren_groups(paren_string: \"(()(())((())))\") == [\"(()(())((())))\"\
    ])\nassert(separate_paren_groups(paren_string: \"( ) (( )) (( )( ))\") == [\"\
    ()\", \"(())\", \"(()())\"])"
  status: Exception
  stderr: 'tmpk1gs__d8/tmpk1gs__d8.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b45980ecc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4597de3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4597de3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4597de27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpk1gs__d8                        0x000055bf39d1d797 <unavailable> + 6039

    5    libc.so.6                          0x00002b45982d8460 __libc_start_main +
    245

    6    tmpk1gs__d8                        0x000055bf39d1d329 <unavailable> + 4905

    '
  stdout: ''
  timestamp: 1659824687
- exit_code: -4
  program: "\n/// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n/// separate those group into separate\
    \ strings and return the array of those.\n/// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n/// Ignore\
    \ any spaces in the input string.\n/// >>> separate_paren_groups(paren_string:\
    \ \"( ) (( )) (( )( ))\")\n/// [\"()\", \"(())\", \"(()())\"]\nfunc separate_paren_groups(paren_string:\
    \ String) -> [String] {\n    var result = [String]()\n    var current_group =\
    \ \"\"\n    var open_paren_count = 0\n    for char in paren_string {\n       \
    \ if char == \"(\" {\n            open_paren_count += 1\n            current_group\
    \ += String(char)\n        } else if char == \")\" {\n            open_paren_count\
    \ -= 1\n            current_group += String(char)\n        }\n        if open_paren_count\
    \ == 0 {\n            result.append(current_group)\n            current_group\
    \ = \"\"\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(separate_paren_groups(paren_string: \"(()()) ((())) () ((())()())\"\
    ) == [\"(()())\", \"((()))\", \"()\", \"((())()())\"])\nassert(separate_paren_groups(paren_string:\
    \ \"() (()) ((())) (((())))\") == [\"()\", \"(())\", \"((()))\", \"(((())))\"\
    ])\nassert(separate_paren_groups(paren_string: \"(()(())((())))\") == [\"(()(())((())))\"\
    ])\nassert(separate_paren_groups(paren_string: \"( ) (( )) (( )( ))\") == [\"\
    ()\", \"(())\", \"(()())\"])"
  status: Exception
  stderr: 'tmp_5eywj6d/tmp_5eywj6d.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b218f655c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b218f34cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b218f34c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b218f34b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_5eywj6d                        0x000055c3e167b837 <unavailable> + 6199

    5    libc.so.6                          0x00002b218f841460 __libc_start_main +
    245

    6    tmp_5eywj6d                        0x000055c3e167b3c9 <unavailable> + 5065

    '
  stdout: ''
  timestamp: 1659824688
- exit_code: -4
  program: "\n/// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n/// separate those group into separate\
    \ strings and return the array of those.\n/// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n/// Ignore\
    \ any spaces in the input string.\n/// >>> separate_paren_groups(paren_string:\
    \ \"( ) (( )) (( )( ))\")\n/// [\"()\", \"(())\", \"(()())\"]\nfunc separate_paren_groups(paren_string:\
    \ String) -> [String] {\n    var result = [String]()\n    var current = \"\"\n\
    \    var open = 0\n    for char in paren_string {\n        if char == \"(\" {\n\
    \            open += 1\n            current += \"(\"\n        } else if char ==\
    \ \")\" {\n            open -= 1\n            current += \")\"\n        }\n  \
    \      if open == 0 {\n            result.append(current)\n            current\
    \ = \"\"\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(separate_paren_groups(paren_string: \"(()()) ((())) () ((())()())\"\
    ) == [\"(()())\", \"((()))\", \"()\", \"((())()())\"])\nassert(separate_paren_groups(paren_string:\
    \ \"() (()) ((())) (((())))\") == [\"()\", \"(())\", \"((()))\", \"(((())))\"\
    ])\nassert(separate_paren_groups(paren_string: \"(()(())((())))\") == [\"(()(())((())))\"\
    ])\nassert(separate_paren_groups(paren_string: \"( ) (( )) (( )( ))\") == [\"\
    ()\", \"(())\", \"(()())\"])"
  status: Exception
  stderr: 'tmpy8udsbj1/tmpy8udsbj1.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4bfe6f3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4bfe3eab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4bfe3ea988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4bfe3e97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpy8udsbj1                        0x000056233828f7e7 <unavailable> + 6119

    5    libc.so.6                          0x00002b4bfe8df460 __libc_start_main +
    245

    6    tmpy8udsbj1                        0x000056233828f379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1659824687
- exit_code: -4
  program: "\n/// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n/// separate those group into separate\
    \ strings and return the array of those.\n/// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n/// Ignore\
    \ any spaces in the input string.\n/// >>> separate_paren_groups(paren_string:\
    \ \"( ) (( )) (( )( ))\")\n/// [\"()\", \"(())\", \"(()())\"]\nfunc separate_paren_groups(paren_string:\
    \ String) -> [String] {\n    var result: [String] = []\n    var current_group:\
    \ String = \"\"\n    var open_parens: Int = 0\n    for char in paren_string {\n\
    \        if char == \"(\" {\n            open_parens += 1\n            current_group\
    \ += \"(\"\n        } else if char == \")\" {\n            open_parens -= 1\n\
    \            current_group += \")\"\n        }\n        if open_parens == 0 {\n\
    \            result.append(current_group)\n            current_group = \"\"\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(separate_paren_groups(paren_string: \"(()()) ((())) () ((())()())\") ==\
    \ [\"(()())\", \"((()))\", \"()\", \"((())()())\"])\nassert(separate_paren_groups(paren_string:\
    \ \"() (()) ((())) (((())))\") == [\"()\", \"(())\", \"((()))\", \"(((())))\"\
    ])\nassert(separate_paren_groups(paren_string: \"(()(())((())))\") == [\"(()(())((())))\"\
    ])\nassert(separate_paren_groups(paren_string: \"( ) (( )) (( )( ))\") == [\"\
    ()\", \"(())\", \"(()())\"])"
  status: Exception
  stderr: 'tmpk1gs__d8/tmpk1gs__d8.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b45980ecc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4597de3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4597de3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4597de27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpk1gs__d8                        0x000055bf39d1d797 <unavailable> + 6039

    5    libc.so.6                          0x00002b45982d8460 __libc_start_main +
    245

    6    tmpk1gs__d8                        0x000055bf39d1d329 <unavailable> + 4905

    '
  stdout: ''
  timestamp: 1659824687
- exit_code: -4
  program: "\n/// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n/// separate those group into separate\
    \ strings and return the array of those.\n/// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n/// Ignore\
    \ any spaces in the input string.\n/// >>> separate_paren_groups(paren_string:\
    \ \"( ) (( )) (( )( ))\")\n/// [\"()\", \"(())\", \"(()())\"]\nfunc separate_paren_groups(paren_string:\
    \ String) -> [String] {\n    var result: [String] = []\n    var current_paren_group:\
    \ String = \"\"\n    var paren_count: Int = 0\n    for char in paren_string {\n\
    \        if char == \"(\" {\n            paren_count += 1\n        } else if char\
    \ == \")\" {\n            paren_count -= 1\n        }\n        if paren_count\
    \ == 0 {\n            if current_paren_group != \"\" {\n                result.append(current_paren_group)\n\
    \                current_paren_group = \"\"\n            }\n        } else {\n\
    \            current_paren_group.append(char)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(separate_paren_groups(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [\"(()())\", \"((()))\", \"()\", \"((())()())\"])\nassert(separate_paren_groups(paren_string:\
    \ \"() (()) ((())) (((())))\") == [\"()\", \"(())\", \"((()))\", \"(((())))\"\
    ])\nassert(separate_paren_groups(paren_string: \"(()(())((())))\") == [\"(()(())((())))\"\
    ])\nassert(separate_paren_groups(paren_string: \"( ) (( )) (( )( ))\") == [\"\
    ()\", \"(())\", \"(()())\"])"
  status: Exception
  stderr: 'tmpy3jehqao/tmpy3jehqao.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8a1c36dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8a1c064b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8a1c064988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8a1c0637b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpy3jehqao                        0x0000557f3c71c7e7 <unavailable> + 6119

    5    libc.so.6                          0x00002b8a1c559460 __libc_start_main +
    245

    6    tmpy3jehqao                        0x0000557f3c71c379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1659824687
- exit_code: -4
  program: "\n/// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n/// separate those group into separate\
    \ strings and return the array of those.\n/// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n/// Ignore\
    \ any spaces in the input string.\n/// >>> separate_paren_groups(paren_string:\
    \ \"( ) (( )) (( )( ))\")\n/// [\"()\", \"(())\", \"(()())\"]\nfunc separate_paren_groups(paren_string:\
    \ String) -> [String] {\n    var result = [String]()\n    var current = \"\"\n\
    \    var open = 0\n    for char in paren_string {\n        if char == \"(\" {\n\
    \            open += 1\n            current += \"(\"\n        } else if char ==\
    \ \")\" {\n            open -= 1\n            current += \")\"\n        }\n  \
    \      if open == 0 {\n            result.append(current)\n            current\
    \ = \"\"\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(separate_paren_groups(paren_string: \"(()()) ((())) () ((())()())\"\
    ) == [\"(()())\", \"((()))\", \"()\", \"((())()())\"])\nassert(separate_paren_groups(paren_string:\
    \ \"() (()) ((())) (((())))\") == [\"()\", \"(())\", \"((()))\", \"(((())))\"\
    ])\nassert(separate_paren_groups(paren_string: \"(()(())((())))\") == [\"(()(())((())))\"\
    ])\nassert(separate_paren_groups(paren_string: \"( ) (( )) (( )( ))\") == [\"\
    ()\", \"(())\", \"(()())\"])"
  status: Exception
  stderr: 'tmpy8udsbj1/tmpy8udsbj1.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4bfe6f3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4bfe3eab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4bfe3ea988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4bfe3e97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpy8udsbj1                        0x000056233828f7e7 <unavailable> + 6119

    5    libc.so.6                          0x00002b4bfe8df460 __libc_start_main +
    245

    6    tmpy8udsbj1                        0x000056233828f379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1659824687
- exit_code: -4
  program: "\n/// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n/// separate those group into separate\
    \ strings and return the array of those.\n/// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n/// Ignore\
    \ any spaces in the input string.\n/// >>> separate_paren_groups(paren_string:\
    \ \"( ) (( )) (( )( ))\")\n/// [\"()\", \"(())\", \"(()())\"]\nfunc separate_paren_groups(paren_string:\
    \ String) -> [String] {\n    var result = [String]()\n    var current = \"\"\n\
    \    var count = 0\n    for char in paren_string {\n        if char == \"(\" {\n\
    \            count += 1\n        } else if char == \")\" {\n            count\
    \ -= 1\n        }\n        if count == 0 && char == \")\" {\n            result.append(current)\n\
    \            current = \"\"\n        } else if char != \" \" {\n            current.append(char)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(separate_paren_groups(paren_string: \"(()()) ((())) () ((())()())\") ==\
    \ [\"(()())\", \"((()))\", \"()\", \"((())()())\"])\nassert(separate_paren_groups(paren_string:\
    \ \"() (()) ((())) (((())))\") == [\"()\", \"(())\", \"((()))\", \"(((())))\"\
    ])\nassert(separate_paren_groups(paren_string: \"(()(())((())))\") == [\"(()(())((())))\"\
    ])\nassert(separate_paren_groups(paren_string: \"( ) (( )) (( )( ))\") == [\"\
    ()\", \"(())\", \"(()())\"])"
  status: Exception
  stderr: 'tmpub7n4ip2/tmpub7n4ip2.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acddfd14c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acddfa0bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acddfa0b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acddfa0a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpub7n4ip2                        0x000055de6b7627e7 <unavailable> + 6119

    5    libc.so.6                          0x00002acddff00460 __libc_start_main +
    245

    6    tmpub7n4ip2                        0x000055de6b762379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1659824687
- exit_code: -4
  program: "\n/// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n/// separate those group into separate\
    \ strings and return the array of those.\n/// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n/// Ignore\
    \ any spaces in the input string.\n/// >>> separate_paren_groups(paren_string:\
    \ \"( ) (( )) (( )( ))\")\n/// [\"()\", \"(())\", \"(()())\"]\nfunc separate_paren_groups(paren_string:\
    \ String) -> [String] {\n    var result: [String] = []\n    var current: String\
    \ = \"\"\n    var open_count: Int = 0\n    for char in paren_string {\n      \
    \  if char == \"(\" {\n            open_count += 1\n            current.append(char)\n\
    \        } else if char == \")\" {\n            open_count -= 1\n            current.append(char)\n\
    \        }\n        if open_count == 0 {\n            result.append(current)\n\
    \            current = \"\"\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(separate_paren_groups(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [\"(()())\", \"((()))\", \"()\", \"((())()())\"])\nassert(separate_paren_groups(paren_string:\
    \ \"() (()) ((())) (((())))\") == [\"()\", \"(())\", \"((()))\", \"(((())))\"\
    ])\nassert(separate_paren_groups(paren_string: \"(()(())((())))\") == [\"(()(())((())))\"\
    ])\nassert(separate_paren_groups(paren_string: \"( ) (( )) (( )( ))\") == [\"\
    ()\", \"(())\", \"(()())\"])"
  status: Exception
  stderr: 'tmprv44qqsk/tmprv44qqsk.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b755ca21c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b755c718b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b755c718988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b755c7177b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprv44qqsk                        0x000056131e6e7787 <unavailable> + 6023

    5    libc.so.6                          0x00002b755cc0d460 __libc_start_main +
    245

    6    tmprv44qqsk                        0x000056131e6e7319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1659824688
- exit_code: -4
  program: "\n/// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n/// separate those group into separate\
    \ strings and return the array of those.\n/// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n/// Ignore\
    \ any spaces in the input string.\n/// >>> separate_paren_groups(paren_string:\
    \ \"( ) (( )) (( )( ))\")\n/// [\"()\", \"(())\", \"(()())\"]\nfunc separate_paren_groups(paren_string:\
    \ String) -> [String] {\n    var result = [String]()\n    var current = \"\"\n\
    \    var open = 0\n    for char in paren_string {\n        if char == \"(\" {\n\
    \            open += 1\n            current += String(char)\n        } else if\
    \ char == \")\" {\n            open -= 1\n            current += String(char)\n\
    \        }\n        if open == 0 {\n            result.append(current)\n     \
    \       current = \"\"\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(separate_paren_groups(paren_string: \"(()()) ((())) ()\
    \ ((())()())\") == [\"(()())\", \"((()))\", \"()\", \"((())()())\"])\nassert(separate_paren_groups(paren_string:\
    \ \"() (()) ((())) (((())))\") == [\"()\", \"(())\", \"((()))\", \"(((())))\"\
    ])\nassert(separate_paren_groups(paren_string: \"(()(())((())))\") == [\"(()(())((())))\"\
    ])\nassert(separate_paren_groups(paren_string: \"( ) (( )) (( )( ))\") == [\"\
    ()\", \"(())\", \"(()())\"])"
  status: Exception
  stderr: 'tmp_se8cu6l/tmp_se8cu6l.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b37c9608c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b37c92ffb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b37c92ff988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b37c92fe7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_se8cu6l                        0x0000560622c66837 <unavailable> + 6199

    5    libc.so.6                          0x00002b37c97f4460 __libc_start_main +
    245

    6    tmp_se8cu6l                        0x0000560622c663c9 <unavailable> + 5065

    '
  stdout: ''
  timestamp: 1659824687
- exit_code: -4
  program: "\n/// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n/// separate those group into separate\
    \ strings and return the array of those.\n/// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n/// Ignore\
    \ any spaces in the input string.\n/// >>> separate_paren_groups(paren_string:\
    \ \"( ) (( )) (( )( ))\")\n/// [\"()\", \"(())\", \"(()())\"]\nfunc separate_paren_groups(paren_string:\
    \ String) -> [String] {\n    var result: [String] = []\n    var current: String\
    \ = \"\"\n    var openCount: Int = 0\n    for char in paren_string {\n       \
    \ if char == \"(\" {\n            openCount += 1\n            current.append(char)\n\
    \        } else if char == \")\" {\n            openCount -= 1\n            current.append(char)\n\
    \        }\n        if openCount == 0 {\n            result.append(current)\n\
    \            current = \"\"\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(separate_paren_groups(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [\"(()())\", \"((()))\", \"()\", \"((())()())\"])\nassert(separate_paren_groups(paren_string:\
    \ \"() (()) ((())) (((())))\") == [\"()\", \"(())\", \"((()))\", \"(((())))\"\
    ])\nassert(separate_paren_groups(paren_string: \"(()(())((())))\") == [\"(()(())((())))\"\
    ])\nassert(separate_paren_groups(paren_string: \"( ) (( )) (( )( ))\") == [\"\
    ()\", \"(())\", \"(()())\"])"
  status: Exception
  stderr: 'tmpmqwygz6b/tmpmqwygz6b.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac55834cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac558043b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac558043988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac5580427b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmqwygz6b                        0x000055ae34839787 <unavailable> + 6023

    5    libc.so.6                          0x00002ac558538460 __libc_start_main +
    245

    6    tmpmqwygz6b                        0x000055ae34839319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1659824687
- exit_code: -4
  program: "\n/// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n/// separate those group into separate\
    \ strings and return the array of those.\n/// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n/// Ignore\
    \ any spaces in the input string.\n/// >>> separate_paren_groups(paren_string:\
    \ \"( ) (( )) (( )( ))\")\n/// [\"()\", \"(())\", \"(()())\"]\nfunc separate_paren_groups(paren_string:\
    \ String) -> [String] {\n    var result = [String]()\n    var temp = \"\"\n  \
    \  var count = 0\n    for char in paren_string {\n        if char == \"(\" {\n\
    \            count += 1\n        } else if char == \")\" {\n            count\
    \ -= 1\n        }\n        if count == 0 {\n            result.append(temp)\n\
    \            temp = \"\"\n        } else {\n            temp.append(char)\n  \
    \      }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(separate_paren_groups(paren_string: \"(()()) ((())) () ((())()())\") ==\
    \ [\"(()())\", \"((()))\", \"()\", \"((())()())\"])\nassert(separate_paren_groups(paren_string:\
    \ \"() (()) ((())) (((())))\") == [\"()\", \"(())\", \"((()))\", \"(((())))\"\
    ])\nassert(separate_paren_groups(paren_string: \"(()(())((())))\") == [\"(()(())((())))\"\
    ])\nassert(separate_paren_groups(paren_string: \"( ) (( )) (( )( ))\") == [\"\
    ()\", \"(())\", \"(()())\"])"
  status: Exception
  stderr: 'tmpjpf94o5_/tmpjpf94o5_.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b583521ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5834f15b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5834f15988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5834f147b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjpf94o5_                        0x000055c0fb6927e7 <unavailable> + 6119

    5    libc.so.6                          0x00002b583540a460 __libc_start_main +
    245

    6    tmpjpf94o5_                        0x000055c0fb692379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1659824687
- exit_code: -4
  program: "\n/// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n/// separate those group into separate\
    \ strings and return the array of those.\n/// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n/// Ignore\
    \ any spaces in the input string.\n/// >>> separate_paren_groups(paren_string:\
    \ \"( ) (( )) (( )( ))\")\n/// [\"()\", \"(())\", \"(()())\"]\nfunc separate_paren_groups(paren_string:\
    \ String) -> [String] {\n    var result: [String] = []\n    var temp = \"\"\n\
    \    var open = 0\n    var close = 0\n    for char in paren_string {\n       \
    \ if char == \"(\" {\n            open += 1\n        } else if char == \")\" {\n\
    \            close += 1\n        }\n        if open == close {\n            if\
    \ temp != \"\" {\n                result.append(temp)\n                temp =\
    \ \"\"\n            }\n        } else {\n            temp += String(char)\n  \
    \      }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(separate_paren_groups(paren_string: \"(()()) ((())) () ((())()())\") ==\
    \ [\"(()())\", \"((()))\", \"()\", \"((())()())\"])\nassert(separate_paren_groups(paren_string:\
    \ \"() (()) ((())) (((())))\") == [\"()\", \"(())\", \"((()))\", \"(((())))\"\
    ])\nassert(separate_paren_groups(paren_string: \"(()(())((())))\") == [\"(()(())((())))\"\
    ])\nassert(separate_paren_groups(paren_string: \"( ) (( )) (( )( ))\") == [\"\
    ()\", \"(())\", \"(()())\"])"
  status: Exception
  stderr: 'tmpe6i79ej8/tmpe6i79ej8.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b52920dcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5291dd3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5291dd3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5291dd27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpe6i79ej8                        0x00005589f0dc9837 <unavailable> + 6199

    5    libc.so.6                          0x00002b52922c8460 __libc_start_main +
    245

    6    tmpe6i79ej8                        0x00005589f0dc93c9 <unavailable> + 5065

    '
  stdout: ''
  timestamp: 1659824688
- exit_code: -4
  program: "\n/// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n/// separate those group into separate\
    \ strings and return the array of those.\n/// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n/// Ignore\
    \ any spaces in the input string.\n/// >>> separate_paren_groups(paren_string:\
    \ \"( ) (( )) (( )( ))\")\n/// [\"()\", \"(())\", \"(()())\"]\nfunc separate_paren_groups(paren_string:\
    \ String) -> [String] {\n    var result = [String]()\n    var current = \"\"\n\
    \    var open = 0\n    for char in paren_string {\n        if char == \"(\" {\n\
    \            open += 1\n            current += String(char)\n        } else if\
    \ char == \")\" {\n            open -= 1\n            current += String(char)\n\
    \        }\n        if open == 0 {\n            result.append(current)\n     \
    \       current = \"\"\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(separate_paren_groups(paren_string: \"(()()) ((())) ()\
    \ ((())()())\") == [\"(()())\", \"((()))\", \"()\", \"((())()())\"])\nassert(separate_paren_groups(paren_string:\
    \ \"() (()) ((())) (((())))\") == [\"()\", \"(())\", \"((()))\", \"(((())))\"\
    ])\nassert(separate_paren_groups(paren_string: \"(()(())((())))\") == [\"(()(())((())))\"\
    ])\nassert(separate_paren_groups(paren_string: \"( ) (( )) (( )( ))\") == [\"\
    ()\", \"(())\", \"(()())\"])"
  status: Exception
  stderr: 'tmp_se8cu6l/tmp_se8cu6l.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b37c9608c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b37c92ffb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b37c92ff988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b37c92fe7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_se8cu6l                        0x0000560622c66837 <unavailable> + 6199

    5    libc.so.6                          0x00002b37c97f4460 __libc_start_main +
    245

    6    tmp_se8cu6l                        0x0000560622c663c9 <unavailable> + 5065

    '
  stdout: ''
  timestamp: 1659824687
- exit_code: -4
  program: "\n/// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n/// separate those group into separate\
    \ strings and return the array of those.\n/// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n/// Ignore\
    \ any spaces in the input string.\n/// >>> separate_paren_groups(paren_string:\
    \ \"( ) (( )) (( )( ))\")\n/// [\"()\", \"(())\", \"(()())\"]\nfunc separate_paren_groups(paren_string:\
    \ String) -> [String] {\n    var result = [String]()\n    var currentString =\
    \ \"\"\n    var openParenCount = 0\n    for char in paren_string {\n        if\
    \ char == \"(\" {\n            openParenCount += 1\n        } else if char ==\
    \ \")\" {\n            openParenCount -= 1\n        }\n        currentString.append(char)\n\
    \        if openParenCount == 0 {\n            result.append(currentString)\n\
    \            currentString = \"\"\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(separate_paren_groups(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [\"(()())\", \"((()))\", \"()\", \"((())()())\"])\nassert(separate_paren_groups(paren_string:\
    \ \"() (()) ((())) (((())))\") == [\"()\", \"(())\", \"((()))\", \"(((())))\"\
    ])\nassert(separate_paren_groups(paren_string: \"(()(())((())))\") == [\"(()(())((())))\"\
    ])\nassert(separate_paren_groups(paren_string: \"( ) (( )) (( )( ))\") == [\"\
    ()\", \"(())\", \"(()())\"])"
  status: Exception
  stderr: 'tmp7wbgop4x/tmp7wbgop4x.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b923263ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9232335b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9232335988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b92323347b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7wbgop4x                        0x0000561729a327e7 <unavailable> + 6119

    5    libc.so.6                          0x00002b923282a460 __libc_start_main +
    245

    6    tmp7wbgop4x                        0x0000561729a32379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1659824688
- exit_code: 0
  program: "\n/// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n/// separate those group into separate\
    \ strings and return the array of those.\n/// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n/// Ignore\
    \ any spaces in the input string.\n/// >>> separate_paren_groups(paren_string:\
    \ \"( ) (( )) (( )( ))\")\n/// [\"()\", \"(())\", \"(()())\"]\nfunc separate_paren_groups(paren_string:\
    \ String) -> [String] {\n    var result: [String] = []\n    var current: String\
    \ = \"\"\n    var open_parens = 0\n    for char in paren_string {\n        if\
    \ char == \"(\" {\n            open_parens += 1\n            current.append(char)\n\
    \        } else if char == \")\" {\n            open_parens -= 1\n           \
    \ current.append(char)\n        }\n        if open_parens == 0 && current != \"\
    \" {\n            result.append(current)\n            current = \"\"\n       \
    \ }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(separate_paren_groups(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [\"(()())\", \"((()))\", \"()\", \"((())()())\"\
    ])\nassert(separate_paren_groups(paren_string: \"() (()) ((())) (((())))\") ==\
    \ [\"()\", \"(())\", \"((()))\", \"(((())))\"])\nassert(separate_paren_groups(paren_string:\
    \ \"(()(())((())))\") == [\"(()(())((())))\"])\nassert(separate_paren_groups(paren_string:\
    \ \"( ) (( )) (( )( ))\") == [\"()\", \"(())\", \"(()())\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824688
- exit_code: 0
  program: "\n/// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n/// separate those group into separate\
    \ strings and return the array of those.\n/// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n/// Ignore\
    \ any spaces in the input string.\n/// >>> separate_paren_groups(paren_string:\
    \ \"( ) (( )) (( )( ))\")\n/// [\"()\", \"(())\", \"(()())\"]\nfunc separate_paren_groups(paren_string:\
    \ String) -> [String] {\n    var result: [String] = []\n    var current: String\
    \ = \"\"\n    var open_parens: Int = 0\n    for c in paren_string {\n        if\
    \ c == \"(\" {\n            open_parens += 1\n            current.append(c)\n\
    \        } else if c == \")\" {\n            open_parens -= 1\n            current.append(c)\n\
    \        }\n        if open_parens == 0 && current != \"\" {\n            result.append(current)\n\
    \            current = \"\"\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(separate_paren_groups(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [\"(()())\", \"((()))\", \"()\", \"((())()())\"])\nassert(separate_paren_groups(paren_string:\
    \ \"() (()) ((())) (((())))\") == [\"()\", \"(())\", \"((()))\", \"(((())))\"\
    ])\nassert(separate_paren_groups(paren_string: \"(()(())((())))\") == [\"(()(())((())))\"\
    ])\nassert(separate_paren_groups(paren_string: \"( ) (( )) (( )( ))\") == [\"\
    ()\", \"(())\", \"(()())\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824688
- exit_code: -4
  program: "\n/// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n/// separate those group into separate\
    \ strings and return the array of those.\n/// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n/// Ignore\
    \ any spaces in the input string.\n/// >>> separate_paren_groups(paren_string:\
    \ \"( ) (( )) (( )( ))\")\n/// [\"()\", \"(())\", \"(()())\"]\nfunc separate_paren_groups(paren_string:\
    \ String) -> [String] {\n    var result: [String] = []\n    var current_string\
    \ = \"\"\n    var open_parens = 0\n    for char in paren_string {\n        if\
    \ char == \"(\" {\n            open_parens += 1\n            current_string +=\
    \ String(char)\n        } else if char == \")\" {\n            open_parens -=\
    \ 1\n            current_string += String(char)\n        }\n        if open_parens\
    \ == 0 {\n            result.append(current_string)\n            current_string\
    \ = \"\"\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(separate_paren_groups(paren_string: \"(()()) ((())) () ((())()())\"\
    ) == [\"(()())\", \"((()))\", \"()\", \"((())()())\"])\nassert(separate_paren_groups(paren_string:\
    \ \"() (()) ((())) (((())))\") == [\"()\", \"(())\", \"((()))\", \"(((())))\"\
    ])\nassert(separate_paren_groups(paren_string: \"(()(())((())))\") == [\"(()(())((())))\"\
    ])\nassert(separate_paren_groups(paren_string: \"( ) (( )) (( )( ))\") == [\"\
    ()\", \"(())\", \"(()())\"])"
  status: Exception
  stderr: 'tmpefbvfph5/tmpefbvfph5.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b97b2523c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b97b221ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b97b221a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b97b22197b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpefbvfph5                        0x000055f778e607e7 <unavailable> + 6119

    5    libc.so.6                          0x00002b97b270f460 __libc_start_main +
    245

    6    tmpefbvfph5                        0x000055f778e60379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1659824688
- exit_code: -4
  program: "\n/// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n/// separate those group into separate\
    \ strings and return the array of those.\n/// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n/// Ignore\
    \ any spaces in the input string.\n/// >>> separate_paren_groups(paren_string:\
    \ \"( ) (( )) (( )( ))\")\n/// [\"()\", \"(())\", \"(()())\"]\nfunc separate_paren_groups(paren_string:\
    \ String) -> [String] {\n    var result: [String] = []\n    var current_group:\
    \ String = \"\"\n    var open_parens: Int = 0\n    for char in paren_string {\n\
    \        if char == \"(\" {\n            open_parens += 1\n            current_group\
    \ += String(char)\n        } else if char == \")\" {\n            open_parens\
    \ -= 1\n            current_group += String(char)\n        }\n        if open_parens\
    \ == 0 {\n            result.append(current_group)\n            current_group\
    \ = \"\"\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(separate_paren_groups(paren_string: \"(()()) ((())) () ((())()())\"\
    ) == [\"(()())\", \"((()))\", \"()\", \"((())()())\"])\nassert(separate_paren_groups(paren_string:\
    \ \"() (()) ((())) (((())))\") == [\"()\", \"(())\", \"((()))\", \"(((())))\"\
    ])\nassert(separate_paren_groups(paren_string: \"(()(())((())))\") == [\"(()(())((())))\"\
    ])\nassert(separate_paren_groups(paren_string: \"( ) (( )) (( )( ))\") == [\"\
    ()\", \"(())\", \"(()())\"])"
  status: Exception
  stderr: 'tmp75iu15po/tmp75iu15po.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b33bb404c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b33bb0fbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b33bb0fb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b33bb0fa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp75iu15po                        0x000055a82b0bb7e7 <unavailable> + 6119

    5    libc.so.6                          0x00002b33bb5f0460 __libc_start_main +
    245

    6    tmp75iu15po                        0x000055a82b0bb379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1659824687
- exit_code: -4
  program: "\n/// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n/// separate those group into separate\
    \ strings and return the array of those.\n/// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n/// Ignore\
    \ any spaces in the input string.\n/// >>> separate_paren_groups(paren_string:\
    \ \"( ) (( )) (( )( ))\")\n/// [\"()\", \"(())\", \"(()())\"]\nfunc separate_paren_groups(paren_string:\
    \ String) -> [String] {\n    var result = [String]()\n    var current = \"\"\n\
    \    var open = 0\n    for char in paren_string {\n        if char == \"(\" {\n\
    \            open += 1\n            current += \"(\"\n        } else if char ==\
    \ \")\" {\n            open -= 1\n            current += \")\"\n        }\n  \
    \      if open == 0 {\n            result.append(current)\n            current\
    \ = \"\"\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(separate_paren_groups(paren_string: \"(()()) ((())) () ((())()())\"\
    ) == [\"(()())\", \"((()))\", \"()\", \"((())()())\"])\nassert(separate_paren_groups(paren_string:\
    \ \"() (()) ((())) (((())))\") == [\"()\", \"(())\", \"((()))\", \"(((())))\"\
    ])\nassert(separate_paren_groups(paren_string: \"(()(())((())))\") == [\"(()(())((())))\"\
    ])\nassert(separate_paren_groups(paren_string: \"( ) (( )) (( )( ))\") == [\"\
    ()\", \"(())\", \"(()())\"])"
  status: Exception
  stderr: 'tmpy8udsbj1/tmpy8udsbj1.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4bfe6f3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4bfe3eab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4bfe3ea988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4bfe3e97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpy8udsbj1                        0x000056233828f7e7 <unavailable> + 6119

    5    libc.so.6                          0x00002b4bfe8df460 __libc_start_main +
    245

    6    tmpy8udsbj1                        0x000056233828f379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1659824687
- exit_code: -4
  program: "\n/// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n/// separate those group into separate\
    \ strings and return the array of those.\n/// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n/// Ignore\
    \ any spaces in the input string.\n/// >>> separate_paren_groups(paren_string:\
    \ \"( ) (( )) (( )( ))\")\n/// [\"()\", \"(())\", \"(()())\"]\nfunc separate_paren_groups(paren_string:\
    \ String) -> [String] {\n    var result = [String]()\n    var current = \"\"\n\
    \    var open = 0\n    for char in paren_string {\n        if char == \"(\" {\n\
    \            open += 1\n            current += \"(\"\n        } else if char ==\
    \ \")\" {\n            open -= 1\n            current += \")\"\n        }\n  \
    \      if open == 0 {\n            result.append(current)\n            current\
    \ = \"\"\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(separate_paren_groups(paren_string: \"(()()) ((())) () ((())()())\"\
    ) == [\"(()())\", \"((()))\", \"()\", \"((())()())\"])\nassert(separate_paren_groups(paren_string:\
    \ \"() (()) ((())) (((())))\") == [\"()\", \"(())\", \"((()))\", \"(((())))\"\
    ])\nassert(separate_paren_groups(paren_string: \"(()(())((())))\") == [\"(()(())((())))\"\
    ])\nassert(separate_paren_groups(paren_string: \"( ) (( )) (( )( ))\") == [\"\
    ()\", \"(())\", \"(()())\"])"
  status: Exception
  stderr: 'tmpy8udsbj1/tmpy8udsbj1.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4bfe6f3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4bfe3eab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4bfe3ea988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4bfe3e97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpy8udsbj1                        0x000056233828f7e7 <unavailable> + 6119

    5    libc.so.6                          0x00002b4bfe8df460 __libc_start_main +
    245

    6    tmpy8udsbj1                        0x000056233828f379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1659824687
- exit_code: -4
  program: "\n/// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n/// separate those group into separate\
    \ strings and return the array of those.\n/// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n/// Ignore\
    \ any spaces in the input string.\n/// >>> separate_paren_groups(paren_string:\
    \ \"( ) (( )) (( )( ))\")\n/// [\"()\", \"(())\", \"(()())\"]\nfunc separate_paren_groups(paren_string:\
    \ String) -> [String] {\n    var result = [String]()\n    var current_paren_group\
    \ = \"\"\n    var open_paren_count = 0\n    var close_paren_count = 0\n    for\
    \ char in paren_string {\n        if char == \"(\" {\n            open_paren_count\
    \ += 1\n        } else if char == \")\" {\n            close_paren_count += 1\n\
    \        }\n        if open_paren_count == close_paren_count {\n            result.append(current_paren_group)\n\
    \            current_paren_group = \"\"\n            open_paren_count = 0\n  \
    \          close_paren_count = 0\n        } else {\n            current_paren_group.append(char)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(separate_paren_groups(paren_string: \"(()()) ((())) () ((())()())\") ==\
    \ [\"(()())\", \"((()))\", \"()\", \"((())()())\"])\nassert(separate_paren_groups(paren_string:\
    \ \"() (()) ((())) (((())))\") == [\"()\", \"(())\", \"((()))\", \"(((())))\"\
    ])\nassert(separate_paren_groups(paren_string: \"(()(())((())))\") == [\"(()(())((())))\"\
    ])\nassert(separate_paren_groups(paren_string: \"( ) (( )) (( )( ))\") == [\"\
    ()\", \"(())\", \"(()())\"])"
  status: Exception
  stderr: 'tmpitiy4vfd/tmpitiy4vfd.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0513f13c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0513c0ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0513c0a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0513c097b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpitiy4vfd                        0x000056474b12c7e7 <unavailable> + 6119

    5    libc.so.6                          0x00002b05140ff460 __libc_start_main +
    245

    6    tmpitiy4vfd                        0x000056474b12c379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1659824688
- exit_code: 0
  program: "\n/// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n/// separate those group into separate\
    \ strings and return the array of those.\n/// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n/// Ignore\
    \ any spaces in the input string.\n/// >>> separate_paren_groups(paren_string:\
    \ \"( ) (( )) (( )( ))\")\n/// [\"()\", \"(())\", \"(()())\"]\nfunc separate_paren_groups(paren_string:\
    \ String) -> [String] {\n    var result: [String] = []\n    var current: String\
    \ = \"\"\n    var open_count: Int = 0\n    for c in paren_string {\n        if\
    \ c == \"(\" {\n            open_count += 1\n            current.append(c)\n \
    \       } else if c == \")\" {\n            open_count -= 1\n            current.append(c)\n\
    \            if open_count == 0 {\n                result.append(current)\n  \
    \              current = \"\"\n            }\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(separate_paren_groups(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [\"(()())\", \"((()))\", \"()\", \"((())()())\"])\nassert(separate_paren_groups(paren_string:\
    \ \"() (()) ((())) (((())))\") == [\"()\", \"(())\", \"((()))\", \"(((())))\"\
    ])\nassert(separate_paren_groups(paren_string: \"(()(())((())))\") == [\"(()(())((())))\"\
    ])\nassert(separate_paren_groups(paren_string: \"( ) (( )) (( )( ))\") == [\"\
    ()\", \"(())\", \"(()())\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824688
- exit_code: -4
  program: "\n/// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n/// separate those group into separate\
    \ strings and return the array of those.\n/// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n/// Ignore\
    \ any spaces in the input string.\n/// >>> separate_paren_groups(paren_string:\
    \ \"( ) (( )) (( )( ))\")\n/// [\"()\", \"(())\", \"(()())\"]\nfunc separate_paren_groups(paren_string:\
    \ String) -> [String] {\n    var paren_groups: [String] = []\n    var current_paren_group:\
    \ String = \"\"\n    var current_paren_count: Int = 0\n    for char in paren_string\
    \ {\n        if char == \"(\" {\n            current_paren_count += 1\n      \
    \      current_paren_group += String(char)\n        } else if char == \")\" {\n\
    \            current_paren_count -= 1\n            current_paren_group += String(char)\n\
    \        }\n        if current_paren_count == 0 {\n            paren_groups.append(current_paren_group)\n\
    \            current_paren_group = \"\"\n        }\n    }\n    return paren_groups\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(separate_paren_groups(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [\"(()())\", \"((()))\", \"()\", \"((())()())\"])\nassert(separate_paren_groups(paren_string:\
    \ \"() (()) ((())) (((())))\") == [\"()\", \"(())\", \"((()))\", \"(((())))\"\
    ])\nassert(separate_paren_groups(paren_string: \"(()(())((())))\") == [\"(()(())((())))\"\
    ])\nassert(separate_paren_groups(paren_string: \"( ) (( )) (( )( ))\") == [\"\
    ()\", \"(())\", \"(()())\"])"
  status: Exception
  stderr: 'tmphpzj5jlr/tmphpzj5jlr.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2569109c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2568e00b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2568e00988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2568dff7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphpzj5jlr                        0x000055c6b9db97e7 <unavailable> + 6119

    5    libc.so.6                          0x00002b25692f5460 __libc_start_main +
    245

    6    tmphpzj5jlr                        0x000055c6b9db9379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1659824688
- exit_code: -4
  program: "\n/// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n/// separate those group into separate\
    \ strings and return the array of those.\n/// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n/// Ignore\
    \ any spaces in the input string.\n/// >>> separate_paren_groups(paren_string:\
    \ \"( ) (( )) (( )( ))\")\n/// [\"()\", \"(())\", \"(()())\"]\nfunc separate_paren_groups(paren_string:\
    \ String) -> [String] {\n    var result = [String]()\n    var current = \"\"\n\
    \    var open = 0\n    for char in paren_string {\n        if char == \"(\" {\n\
    \            open += 1\n            current += \"(\"\n        } else if char ==\
    \ \")\" {\n            open -= 1\n            current += \")\"\n        }\n  \
    \      if open == 0 {\n            result.append(current)\n            current\
    \ = \"\"\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(separate_paren_groups(paren_string: \"(()()) ((())) () ((())()())\"\
    ) == [\"(()())\", \"((()))\", \"()\", \"((())()())\"])\nassert(separate_paren_groups(paren_string:\
    \ \"() (()) ((())) (((())))\") == [\"()\", \"(())\", \"((()))\", \"(((())))\"\
    ])\nassert(separate_paren_groups(paren_string: \"(()(())((())))\") == [\"(()(())((())))\"\
    ])\nassert(separate_paren_groups(paren_string: \"( ) (( )) (( )( ))\") == [\"\
    ()\", \"(())\", \"(()())\"])"
  status: Exception
  stderr: 'tmpy8udsbj1/tmpy8udsbj1.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4bfe6f3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4bfe3eab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4bfe3ea988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4bfe3e97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpy8udsbj1                        0x000056233828f7e7 <unavailable> + 6119

    5    libc.so.6                          0x00002b4bfe8df460 __libc_start_main +
    245

    6    tmpy8udsbj1                        0x000056233828f379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1659824687
- exit_code: -4
  program: "\n/// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n/// separate those group into separate\
    \ strings and return the array of those.\n/// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n/// Ignore\
    \ any spaces in the input string.\n/// >>> separate_paren_groups(paren_string:\
    \ \"( ) (( )) (( )( ))\")\n/// [\"()\", \"(())\", \"(()())\"]\nfunc separate_paren_groups(paren_string:\
    \ String) -> [String] {\n    var result: [String] = []\n    var current_group:\
    \ String = \"\"\n    var open_parens: Int = 0\n    for char in paren_string {\n\
    \        if char == \"(\" {\n            open_parens += 1\n            current_group\
    \ += \"(\"\n        } else if char == \")\" {\n            open_parens -= 1\n\
    \            current_group += \")\"\n        }\n        if open_parens == 0 {\n\
    \            result.append(current_group)\n            current_group = \"\"\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(separate_paren_groups(paren_string: \"(()()) ((())) () ((())()())\") ==\
    \ [\"(()())\", \"((()))\", \"()\", \"((())()())\"])\nassert(separate_paren_groups(paren_string:\
    \ \"() (()) ((())) (((())))\") == [\"()\", \"(())\", \"((()))\", \"(((())))\"\
    ])\nassert(separate_paren_groups(paren_string: \"(()(())((())))\") == [\"(()(())((())))\"\
    ])\nassert(separate_paren_groups(paren_string: \"( ) (( )) (( )( ))\") == [\"\
    ()\", \"(())\", \"(()())\"])"
  status: Exception
  stderr: 'tmpk1gs__d8/tmpk1gs__d8.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b45980ecc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4597de3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4597de3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4597de27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpk1gs__d8                        0x000055bf39d1d797 <unavailable> + 6039

    5    libc.so.6                          0x00002b45982d8460 __libc_start_main +
    245

    6    tmpk1gs__d8                        0x000055bf39d1d329 <unavailable> + 4905

    '
  stdout: ''
  timestamp: 1659824687
- exit_code: -4
  program: "\n/// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n/// separate those group into separate\
    \ strings and return the array of those.\n/// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n/// Ignore\
    \ any spaces in the input string.\n/// >>> separate_paren_groups(paren_string:\
    \ \"( ) (( )) (( )( ))\")\n/// [\"()\", \"(())\", \"(()())\"]\nfunc separate_paren_groups(paren_string:\
    \ String) -> [String] {\n    // TODO: Implement\n    return []\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(separate_paren_groups(paren_string: \"(()()) ((())) ()\
    \ ((())()())\") == [\"(()())\", \"((()))\", \"()\", \"((())()())\"])\nassert(separate_paren_groups(paren_string:\
    \ \"() (()) ((())) (((())))\") == [\"()\", \"(())\", \"((()))\", \"(((())))\"\
    ])\nassert(separate_paren_groups(paren_string: \"(()(())((())))\") == [\"(()(())((())))\"\
    ])\nassert(separate_paren_groups(paren_string: \"( ) (( )) (( )( ))\") == [\"\
    ()\", \"(())\", \"(()())\"])"
  status: Exception
  stderr: 'tmp6rp1pkkn/tmp6rp1pkkn.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5a506adc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5a503a4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5a503a4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5a503a37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6rp1pkkn                        0x000055c39c9f9537 <unavailable> + 5431

    5    libc.so.6                          0x00002b5a50899460 __libc_start_main +
    245

    6    tmp6rp1pkkn                        0x000055c39c9f90c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1659824688
- exit_code: -4
  program: "\n/// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n/// separate those group into separate\
    \ strings and return the array of those.\n/// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n/// Ignore\
    \ any spaces in the input string.\n/// >>> separate_paren_groups(paren_string:\
    \ \"( ) (( )) (( )( ))\")\n/// [\"()\", \"(())\", \"(()())\"]\nfunc separate_paren_groups(paren_string:\
    \ String) -> [String] {\n    var result = [String]()\n    var current = \"\"\n\
    \    var open = 0\n    for char in paren_string {\n        if char == \"(\" {\n\
    \            open += 1\n            current += String(char)\n        } else if\
    \ char == \")\" {\n            open -= 1\n            current += String(char)\n\
    \        }\n        if open == 0 {\n            result.append(current)\n     \
    \       current = \"\"\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(separate_paren_groups(paren_string: \"(()()) ((())) ()\
    \ ((())()())\") == [\"(()())\", \"((()))\", \"()\", \"((())()())\"])\nassert(separate_paren_groups(paren_string:\
    \ \"() (()) ((())) (((())))\") == [\"()\", \"(())\", \"((()))\", \"(((())))\"\
    ])\nassert(separate_paren_groups(paren_string: \"(()(())((())))\") == [\"(()(())((())))\"\
    ])\nassert(separate_paren_groups(paren_string: \"( ) (( )) (( )( ))\") == [\"\
    ()\", \"(())\", \"(()())\"])"
  status: Exception
  stderr: 'tmp_se8cu6l/tmp_se8cu6l.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b37c9608c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b37c92ffb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b37c92ff988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b37c92fe7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_se8cu6l                        0x0000560622c66837 <unavailable> + 6199

    5    libc.so.6                          0x00002b37c97f4460 __libc_start_main +
    245

    6    tmp_se8cu6l                        0x0000560622c663c9 <unavailable> + 5065

    '
  stdout: ''
  timestamp: 1659824687
- exit_code: -4
  program: "\n/// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n/// separate those group into separate\
    \ strings and return the array of those.\n/// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n/// Ignore\
    \ any spaces in the input string.\n/// >>> separate_paren_groups(paren_string:\
    \ \"( ) (( )) (( )( ))\")\n/// [\"()\", \"(())\", \"(()())\"]\nfunc separate_paren_groups(paren_string:\
    \ String) -> [String] {\n    var result = [String]()\n    var current_string =\
    \ \"\"\n    var open_paren_count = 0\n    for char in paren_string {\n       \
    \ if char == \"(\" {\n            open_paren_count += 1\n            current_string.append(char)\n\
    \        } else if char == \")\" {\n            open_paren_count -= 1\n      \
    \      current_string.append(char)\n        }\n        if open_paren_count ==\
    \ 0 {\n            result.append(current_string)\n            current_string =\
    \ \"\"\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(separate_paren_groups(paren_string: \"(()()) ((())) () ((())()())\"\
    ) == [\"(()())\", \"((()))\", \"()\", \"((())()())\"])\nassert(separate_paren_groups(paren_string:\
    \ \"() (()) ((())) (((())))\") == [\"()\", \"(())\", \"((()))\", \"(((())))\"\
    ])\nassert(separate_paren_groups(paren_string: \"(()(())((())))\") == [\"(()(())((())))\"\
    ])\nassert(separate_paren_groups(paren_string: \"( ) (( )) (( )( ))\") == [\"\
    ()\", \"(())\", \"(()())\"])"
  status: Exception
  stderr: 'tmpd_49m28n/tmpd_49m28n.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1524cc3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b15249bab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b15249ba988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b15249b97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpd_49m28n                        0x00005640477407e7 <unavailable> + 6119

    5    libc.so.6                          0x00002b1524eaf460 __libc_start_main +
    245

    6    tmpd_49m28n                        0x0000564047740379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1659824688
- exit_code: -4
  program: "\n/// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n/// separate those group into separate\
    \ strings and return the array of those.\n/// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n/// Ignore\
    \ any spaces in the input string.\n/// >>> separate_paren_groups(paren_string:\
    \ \"( ) (( )) (( )( ))\")\n/// [\"()\", \"(())\", \"(()())\"]\nfunc separate_paren_groups(paren_string:\
    \ String) -> [String] {\n    var result = [String]()\n    var current_group =\
    \ \"\"\n    var open_parens = 0\n    for char in paren_string {\n        if char\
    \ == \"(\" {\n            open_parens += 1\n            current_group += String(char)\n\
    \        } else if char == \")\" {\n            open_parens -= 1\n           \
    \ current_group += String(char)\n        }\n        if open_parens == 0 {\n  \
    \          result.append(current_group)\n            current_group = \"\"\n  \
    \      }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(separate_paren_groups(paren_string: \"(()()) ((())) () ((())()())\") ==\
    \ [\"(()())\", \"((()))\", \"()\", \"((())()())\"])\nassert(separate_paren_groups(paren_string:\
    \ \"() (()) ((())) (((())))\") == [\"()\", \"(())\", \"((()))\", \"(((())))\"\
    ])\nassert(separate_paren_groups(paren_string: \"(()(())((())))\") == [\"(()(())((())))\"\
    ])\nassert(separate_paren_groups(paren_string: \"( ) (( )) (( )( ))\") == [\"\
    ()\", \"(())\", \"(()())\"])"
  status: Exception
  stderr: 'tmp5qbxzuvz/tmp5qbxzuvz.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af5a85f9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af5a82f0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af5a82f0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af5a82ef7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5qbxzuvz                        0x000055e79ee27837 <unavailable> + 6199

    5    libc.so.6                          0x00002af5a87e5460 __libc_start_main +
    245

    6    tmp5qbxzuvz                        0x000055e79ee273c9 <unavailable> + 5065

    '
  stdout: ''
  timestamp: 1659824687
- exit_code: -4
  program: "\n/// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n/// separate those group into separate\
    \ strings and return the array of those.\n/// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n/// Ignore\
    \ any spaces in the input string.\n/// >>> separate_paren_groups(paren_string:\
    \ \"( ) (( )) (( )( ))\")\n/// [\"()\", \"(())\", \"(()())\"]\nfunc separate_paren_groups(paren_string:\
    \ String) -> [String] {\n    var result: [String] = []\n    var current_group:\
    \ String = \"\"\n    var open_parens: Int = 0\n    for char in paren_string {\n\
    \        if char == \"(\" {\n            open_parens += 1\n            current_group\
    \ += String(char)\n        } else if char == \")\" {\n            open_parens\
    \ -= 1\n            current_group += String(char)\n        }\n        if open_parens\
    \ == 0 {\n            result.append(current_group)\n            current_group\
    \ = \"\"\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(separate_paren_groups(paren_string: \"(()()) ((())) () ((())()())\"\
    ) == [\"(()())\", \"((()))\", \"()\", \"((())()())\"])\nassert(separate_paren_groups(paren_string:\
    \ \"() (()) ((())) (((())))\") == [\"()\", \"(())\", \"((()))\", \"(((())))\"\
    ])\nassert(separate_paren_groups(paren_string: \"(()(())((())))\") == [\"(()(())((())))\"\
    ])\nassert(separate_paren_groups(paren_string: \"( ) (( )) (( )( ))\") == [\"\
    ()\", \"(())\", \"(()())\"])"
  status: Exception
  stderr: 'tmp75iu15po/tmp75iu15po.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b33bb404c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b33bb0fbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b33bb0fb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b33bb0fa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp75iu15po                        0x000055a82b0bb7e7 <unavailable> + 6119

    5    libc.so.6                          0x00002b33bb5f0460 __libc_start_main +
    245

    6    tmp75iu15po                        0x000055a82b0bb379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1659824687
- exit_code: -4
  program: "\n/// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n/// separate those group into separate\
    \ strings and return the array of those.\n/// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n/// Ignore\
    \ any spaces in the input string.\n/// >>> separate_paren_groups(paren_string:\
    \ \"( ) (( )) (( )( ))\")\n/// [\"()\", \"(())\", \"(()())\"]\nfunc separate_paren_groups(paren_string:\
    \ String) -> [String] {\n    var result = [String]()\n    var current_paren_group\
    \ = \"\"\n    var open_paren_count = 0\n    for char in paren_string {\n     \
    \   if char == \"(\" {\n            open_paren_count += 1\n            current_paren_group\
    \ += \"(\"\n        } else if char == \")\" {\n            open_paren_count -=\
    \ 1\n            current_paren_group += \")\"\n        }\n        if open_paren_count\
    \ == 0 {\n            result.append(current_paren_group)\n            current_paren_group\
    \ = \"\"\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(separate_paren_groups(paren_string: \"(()()) ((())) () ((())()())\"\
    ) == [\"(()())\", \"((()))\", \"()\", \"((())()())\"])\nassert(separate_paren_groups(paren_string:\
    \ \"() (()) ((())) (((())))\") == [\"()\", \"(())\", \"((()))\", \"(((())))\"\
    ])\nassert(separate_paren_groups(paren_string: \"(()(())((())))\") == [\"(()(())((())))\"\
    ])\nassert(separate_paren_groups(paren_string: \"( ) (( )) (( )( ))\") == [\"\
    ()\", \"(())\", \"(()())\"])"
  status: Exception
  stderr: 'tmpi9h0zg1s/tmpi9h0zg1s.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba7e2d45c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba7e2a3cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba7e2a3c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba7e2a3b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpi9h0zg1s                        0x00005594199827e7 <unavailable> + 6119

    5    libc.so.6                          0x00002ba7e2f31460 __libc_start_main +
    245

    6    tmpi9h0zg1s                        0x0000559419982379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1659824687
- exit_code: -4
  program: "\n/// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n/// separate those group into separate\
    \ strings and return the array of those.\n/// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n/// Ignore\
    \ any spaces in the input string.\n/// >>> separate_paren_groups(paren_string:\
    \ \"( ) (( )) (( )( ))\")\n/// [\"()\", \"(())\", \"(()())\"]\nfunc separate_paren_groups(paren_string:\
    \ String) -> [String] {\n    var result: [String] = []\n    var current_group:\
    \ String = \"\"\n    var open_parens: Int = 0\n    for char in paren_string {\n\
    \        if char == \"(\" {\n            open_parens += 1\n            current_group\
    \ += String(char)\n        } else if char == \")\" {\n            open_parens\
    \ -= 1\n            current_group += String(char)\n        }\n        if open_parens\
    \ == 0 {\n            result.append(current_group)\n            current_group\
    \ = \"\"\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(separate_paren_groups(paren_string: \"(()()) ((())) () ((())()())\"\
    ) == [\"(()())\", \"((()))\", \"()\", \"((())()())\"])\nassert(separate_paren_groups(paren_string:\
    \ \"() (()) ((())) (((())))\") == [\"()\", \"(())\", \"((()))\", \"(((())))\"\
    ])\nassert(separate_paren_groups(paren_string: \"(()(())((())))\") == [\"(()(())((())))\"\
    ])\nassert(separate_paren_groups(paren_string: \"( ) (( )) (( )( ))\") == [\"\
    ()\", \"(())\", \"(()())\"])"
  status: Exception
  stderr: 'tmp75iu15po/tmp75iu15po.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b33bb404c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b33bb0fbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b33bb0fb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b33bb0fa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp75iu15po                        0x000055a82b0bb7e7 <unavailable> + 6119

    5    libc.so.6                          0x00002b33bb5f0460 __libc_start_main +
    245

    6    tmp75iu15po                        0x000055a82b0bb379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1659824687
- exit_code: -4
  program: "\n/// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n/// separate those group into separate\
    \ strings and return the array of those.\n/// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n/// Ignore\
    \ any spaces in the input string.\n/// >>> separate_paren_groups(paren_string:\
    \ \"( ) (( )) (( )( ))\")\n/// [\"()\", \"(())\", \"(()())\"]\nfunc separate_paren_groups(paren_string:\
    \ String) -> [String] {\n    var result: [String] = []\n    var current_group:\
    \ String = \"\"\n    var open_parens: Int = 0\n    for char in paren_string {\n\
    \        if char == \"(\" {\n            open_parens += 1\n            current_group\
    \ += \"(\"\n        } else if char == \")\" {\n            open_parens -= 1\n\
    \            current_group += \")\"\n        }\n        if open_parens == 0 {\n\
    \            result.append(current_group)\n            current_group = \"\"\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(separate_paren_groups(paren_string: \"(()()) ((())) () ((())()())\") ==\
    \ [\"(()())\", \"((()))\", \"()\", \"((())()())\"])\nassert(separate_paren_groups(paren_string:\
    \ \"() (()) ((())) (((())))\") == [\"()\", \"(())\", \"((()))\", \"(((())))\"\
    ])\nassert(separate_paren_groups(paren_string: \"(()(())((())))\") == [\"(()(())((())))\"\
    ])\nassert(separate_paren_groups(paren_string: \"( ) (( )) (( )( ))\") == [\"\
    ()\", \"(())\", \"(()())\"])"
  status: Exception
  stderr: 'tmpk1gs__d8/tmpk1gs__d8.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b45980ecc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4597de3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4597de3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4597de27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpk1gs__d8                        0x000055bf39d1d797 <unavailable> + 6039

    5    libc.so.6                          0x00002b45982d8460 __libc_start_main +
    245

    6    tmpk1gs__d8                        0x000055bf39d1d329 <unavailable> + 4905

    '
  stdout: ''
  timestamp: 1659824687
