language: swift
name: HumanEval_162_string_to_md5
results:
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    guard !text.isEmpty else {\n        return nil\n \
    \   }\n    let messageData = text.data(using:.utf8)!\n    var digestData = Data(count:\
    \ Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp2894l5o7.swift:10:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmp2894l5o7.swift:10:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmp2894l5o7.swift:11:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmp2894l5o7.swift:11:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp2894l5o7.swift:15:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmp2894l5o7.swift:15:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmp2894l5o7.swift:18:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013368
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    guard !text.isEmpty else {\n        return nil\n \
    \   }\n    let messageData = text.data(using:.utf8)!\n    var digestData = Data(count:\
    \ Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp2894l5o7.swift:10:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmp2894l5o7.swift:10:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmp2894l5o7.swift:11:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmp2894l5o7.swift:11:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp2894l5o7.swift:15:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmp2894l5o7.swift:15:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmp2894l5o7.swift:18:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013368
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    guard !text.isEmpty else {\n        return nil\n \
    \   }\n    let messageData = text.data(using:.utf8)!\n    var digestData = Data(count:\
    \ Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp2894l5o7.swift:10:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmp2894l5o7.swift:10:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmp2894l5o7.swift:11:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmp2894l5o7.swift:11:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp2894l5o7.swift:15:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmp2894l5o7.swift:15:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmp2894l5o7.swift:18:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013368
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text.isEmpty {\n        return nil\n    }\n   \
    \ let messageData = text.data(using:.utf8)!\n    var digestData = Data(count:\
    \ Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp7rlmq0mm.swift:10:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmp7rlmq0mm.swift:10:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmp7rlmq0mm.swift:11:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmp7rlmq0mm.swift:11:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp7rlmq0mm.swift:15:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmp7rlmq0mm.swift:15:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmp7rlmq0mm.swift:18:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013368
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    guard !text.isEmpty else {\n        return nil\n \
    \   }\n    let messageData = text.data(using:.utf8)!\n    var digestData = Data(count:\
    \ Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp2894l5o7.swift:10:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmp2894l5o7.swift:10:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmp2894l5o7.swift:11:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmp2894l5o7.swift:11:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp2894l5o7.swift:15:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmp2894l5o7.swift:15:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmp2894l5o7.swift:18:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013368
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    guard !text.isEmpty else {\n        return nil\n \
    \   }\n    let messageData = text.data(using:.utf8)!\n    var digestData = Data(count:\
    \ Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp2894l5o7.swift:10:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmp2894l5o7.swift:10:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmp2894l5o7.swift:11:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmp2894l5o7.swift:11:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp2894l5o7.swift:15:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmp2894l5o7.swift:15:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmp2894l5o7.swift:18:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013368
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text.isEmpty {\n        return nil\n    }\n   \
    \ let messageData = text.data(using:.utf8)!\n    var digestData = Data(count:\
    \ Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp7rlmq0mm.swift:10:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmp7rlmq0mm.swift:10:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmp7rlmq0mm.swift:11:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmp7rlmq0mm.swift:11:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp7rlmq0mm.swift:15:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmp7rlmq0mm.swift:15:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmp7rlmq0mm.swift:18:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013368
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    guard !text.isEmpty else {\n        return nil\n \
    \   }\n    let messageData = text.data(using:.utf8)!\n    var digestData = Data(count:\
    \ Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp2894l5o7.swift:10:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmp2894l5o7.swift:10:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmp2894l5o7.swift:11:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmp2894l5o7.swift:11:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp2894l5o7.swift:15:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmp2894l5o7.swift:15:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmp2894l5o7.swift:18:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013368
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text.isEmpty {\n        return nil\n    }\n   \
    \ let messageData = text.data(using:.utf8)!\n    var digestData = Data(count:\
    \ Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp7rlmq0mm.swift:10:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmp7rlmq0mm.swift:10:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmp7rlmq0mm.swift:11:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmp7rlmq0mm.swift:11:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp7rlmq0mm.swift:15:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmp7rlmq0mm.swift:15:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmp7rlmq0mm.swift:18:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013368
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    guard !text.isEmpty else {\n        return nil\n \
    \   }\n    let messageData = text.data(using:.utf8)!\n    var digestData = Data(count:\
    \ Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp2894l5o7.swift:10:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmp2894l5o7.swift:10:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmp2894l5o7.swift:11:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmp2894l5o7.swift:11:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp2894l5o7.swift:15:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmp2894l5o7.swift:15:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmp2894l5o7.swift:18:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013368
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    guard !text.isEmpty else {\n        return nil\n \
    \   }\n    let messageData = text.data(using:.utf8)!\n    var digestData = Data(count:\
    \ Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp2894l5o7.swift:10:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmp2894l5o7.swift:10:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmp2894l5o7.swift:11:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmp2894l5o7.swift:11:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp2894l5o7.swift:15:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmp2894l5o7.swift:15:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmp2894l5o7.swift:18:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013368
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text.isEmpty {\n        return nil\n    }\n   \
    \ let messageData = text.data(using:.utf8)!\n    var digestData = Data(count:\
    \ Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp7rlmq0mm.swift:10:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmp7rlmq0mm.swift:10:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmp7rlmq0mm.swift:11:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmp7rlmq0mm.swift:11:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp7rlmq0mm.swift:15:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmp7rlmq0mm.swift:15:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmp7rlmq0mm.swift:18:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013368
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text.isEmpty {\n        return nil\n    }\n   \
    \ let messageData = text.data(using:.utf8)!\n    var digestData = Data(count:\
    \ Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp7rlmq0mm.swift:10:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmp7rlmq0mm.swift:10:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmp7rlmq0mm.swift:11:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmp7rlmq0mm.swift:11:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp7rlmq0mm.swift:15:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmp7rlmq0mm.swift:15:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmp7rlmq0mm.swift:18:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013368
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text.isEmpty {\n        return nil\n    }\n   \
    \ let messageData = text.data(using:.utf8)!\n    var digestData = Data(count:\
    \ Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp7rlmq0mm.swift:10:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmp7rlmq0mm.swift:10:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmp7rlmq0mm.swift:11:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmp7rlmq0mm.swift:11:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp7rlmq0mm.swift:15:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmp7rlmq0mm.swift:15:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmp7rlmq0mm.swift:18:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013368
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    guard text.count > 0 else {\n        return nil\n\
    \    }\n    let messageData = text.data(using:.utf8)!\n    var digestData = Data(count:\
    \ Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpqfx0ut4r.swift:10:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmpqfx0ut4r.swift:10:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmpqfx0ut4r.swift:11:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmpqfx0ut4r.swift:11:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmpqfx0ut4r.swift:15:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmpqfx0ut4r.swift:15:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmpqfx0ut4r.swift:18:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013368
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text.isEmpty {\n        return nil\n    }\n   \
    \ let messageData = text.data(using:.utf8)!\n    var digestData = Data(count:\
    \ Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp7rlmq0mm.swift:10:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmp7rlmq0mm.swift:10:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmp7rlmq0mm.swift:11:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmp7rlmq0mm.swift:11:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp7rlmq0mm.swift:15:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmp7rlmq0mm.swift:15:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmp7rlmq0mm.swift:18:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013368
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text.isEmpty {\n        return nil\n    }\n   \
    \ let messageData = text.data(using:.utf8)!\n    var digestData = Data(count:\
    \ Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp7rlmq0mm.swift:10:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmp7rlmq0mm.swift:10:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmp7rlmq0mm.swift:11:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmp7rlmq0mm.swift:11:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp7rlmq0mm.swift:15:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmp7rlmq0mm.swift:15:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmp7rlmq0mm.swift:18:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013368
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text.isEmpty {\n        return nil\n    }\n   \
    \ let messageData = text.data(using:.utf8)!\n    var digestData = Data(count:\
    \ Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp7rlmq0mm.swift:10:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmp7rlmq0mm.swift:10:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmp7rlmq0mm.swift:11:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmp7rlmq0mm.swift:11:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp7rlmq0mm.swift:15:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmp7rlmq0mm.swift:15:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmp7rlmq0mm.swift:18:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013368
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text.isEmpty {\n        return nil\n    }\n   \
    \ let messageData = text.data(using:.utf8)!\n    var digestData = Data(count:\
    \ Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp7rlmq0mm.swift:10:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmp7rlmq0mm.swift:10:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmp7rlmq0mm.swift:11:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmp7rlmq0mm.swift:11:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp7rlmq0mm.swift:15:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmp7rlmq0mm.swift:15:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmp7rlmq0mm.swift:18:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013368
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text.isEmpty {\n        return nil\n    }\n   \
    \ let messageData = text.data(using:.utf8)!\n    var digestData = Data(count:\
    \ Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp7rlmq0mm.swift:10:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmp7rlmq0mm.swift:10:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmp7rlmq0mm.swift:11:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmp7rlmq0mm.swift:11:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp7rlmq0mm.swift:15:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmp7rlmq0mm.swift:15:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmp7rlmq0mm.swift:18:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013368
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text.isEmpty {\n        return nil\n    }\n   \
    \ let messageData = text.data(using:.utf8)!\n    var digestData = Data(count:\
    \ Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp7rlmq0mm.swift:10:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmp7rlmq0mm.swift:10:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmp7rlmq0mm.swift:11:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmp7rlmq0mm.swift:11:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp7rlmq0mm.swift:15:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmp7rlmq0mm.swift:15:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmp7rlmq0mm.swift:18:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013368
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text.isEmpty {\n        return nil\n    }\n   \
    \ let messageData = text.data(using:.utf8)!\n    var digestData = Data(count:\
    \ Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp7rlmq0mm.swift:10:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmp7rlmq0mm.swift:10:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmp7rlmq0mm.swift:11:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmp7rlmq0mm.swift:11:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp7rlmq0mm.swift:15:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmp7rlmq0mm.swift:15:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmp7rlmq0mm.swift:18:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013368
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    guard !text.isEmpty else {\n        return nil\n \
    \   }\n    let messageData = text.data(using:.utf8)!\n    var digestData = Data(count:\
    \ Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp2894l5o7.swift:10:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmp2894l5o7.swift:10:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmp2894l5o7.swift:11:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmp2894l5o7.swift:11:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp2894l5o7.swift:15:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmp2894l5o7.swift:15:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmp2894l5o7.swift:18:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013368
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    guard text.count > 0 else {\n        return nil\n\
    \    }\n    let messageData = text.data(using:.utf8)!\n    var digestData = Data(count:\
    \ Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpqfx0ut4r.swift:10:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmpqfx0ut4r.swift:10:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmpqfx0ut4r.swift:11:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmpqfx0ut4r.swift:11:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmpqfx0ut4r.swift:15:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmpqfx0ut4r.swift:15:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmpqfx0ut4r.swift:18:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013368
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text.isEmpty {\n        return nil\n    }\n   \
    \ let messageData = text.data(using:.utf8)!\n    var digestData = Data(count:\
    \ Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp7rlmq0mm.swift:10:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmp7rlmq0mm.swift:10:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmp7rlmq0mm.swift:11:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmp7rlmq0mm.swift:11:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp7rlmq0mm.swift:15:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmp7rlmq0mm.swift:15:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmp7rlmq0mm.swift:18:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013368
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    guard !text.isEmpty else {\n        return nil\n \
    \   }\n    let messageData = text.data(using:.utf8)!\n    var digestData = Data(count:\
    \ Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp2894l5o7.swift:10:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmp2894l5o7.swift:10:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmp2894l5o7.swift:11:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmp2894l5o7.swift:11:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp2894l5o7.swift:15:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmp2894l5o7.swift:15:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmp2894l5o7.swift:18:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013368
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    guard !text.isEmpty else {\n        return nil\n \
    \   }\n    let messageData = text.data(using:.utf8)!\n    var digestData = Data(count:\
    \ Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp2894l5o7.swift:10:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmp2894l5o7.swift:10:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmp2894l5o7.swift:11:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmp2894l5o7.swift:11:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp2894l5o7.swift:15:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmp2894l5o7.swift:15:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmp2894l5o7.swift:18:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013368
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    guard !text.isEmpty else {\n        return nil\n \
    \   }\n    let messageData = text.data(using:.utf8)!\n    var digestData = Data(count:\
    \ Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp2894l5o7.swift:10:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmp2894l5o7.swift:10:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmp2894l5o7.swift:11:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmp2894l5o7.swift:11:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp2894l5o7.swift:15:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmp2894l5o7.swift:15:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmp2894l5o7.swift:18:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013368
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    guard !text.isEmpty else {\n        return nil\n \
    \   }\n    let messageData = text.data(using:.utf8)!\n    var digestData = Data(count:\
    \ Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp2894l5o7.swift:10:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmp2894l5o7.swift:10:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmp2894l5o7.swift:11:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmp2894l5o7.swift:11:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp2894l5o7.swift:15:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmp2894l5o7.swift:15:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmp2894l5o7.swift:18:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013368
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    guard !text.isEmpty else {\n        return nil\n \
    \   }\n    let messageData = text.data(using:.utf8)!\n    var digestData = Data(count:\
    \ Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp2894l5o7.swift:10:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmp2894l5o7.swift:10:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmp2894l5o7.swift:11:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmp2894l5o7.swift:11:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp2894l5o7.swift:15:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmp2894l5o7.swift:15:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmp2894l5o7.swift:18:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013368
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text.isEmpty {\n        return nil\n    }\n   \
    \ let messageData = text.data(using:.utf8)!\n    var digestData = Data(count:\
    \ Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp7rlmq0mm.swift:10:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmp7rlmq0mm.swift:10:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmp7rlmq0mm.swift:11:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmp7rlmq0mm.swift:11:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp7rlmq0mm.swift:15:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmp7rlmq0mm.swift:15:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmp7rlmq0mm.swift:18:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013368
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text.isEmpty {\n        return nil\n    }\n   \
    \ let messageData = text.data(using:.utf8)!\n    var digestData = Data(count:\
    \ Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp7rlmq0mm.swift:10:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmp7rlmq0mm.swift:10:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmp7rlmq0mm.swift:11:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmp7rlmq0mm.swift:11:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp7rlmq0mm.swift:15:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmp7rlmq0mm.swift:15:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmp7rlmq0mm.swift:18:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013368
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    guard !text.isEmpty else {\n        return nil\n \
    \   }\n    let messageData = text.data(using:.utf8)!\n    var digestData = Data(count:\
    \ Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp2894l5o7.swift:10:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmp2894l5o7.swift:10:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmp2894l5o7.swift:11:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmp2894l5o7.swift:11:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp2894l5o7.swift:15:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmp2894l5o7.swift:15:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmp2894l5o7.swift:18:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013368
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text.isEmpty {\n        return nil\n    }\n   \
    \ let messageData = text.data(using:.utf8)!\n    var digestData = Data(count:\
    \ Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp7rlmq0mm.swift:10:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmp7rlmq0mm.swift:10:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmp7rlmq0mm.swift:11:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmp7rlmq0mm.swift:11:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp7rlmq0mm.swift:15:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmp7rlmq0mm.swift:15:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmp7rlmq0mm.swift:18:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013368
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    guard !text.isEmpty else {\n        return nil\n \
    \   }\n    let messageData = text.data(using:.utf8)!\n    var digestData = Data(count:\
    \ Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp2894l5o7.swift:10:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmp2894l5o7.swift:10:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmp2894l5o7.swift:11:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmp2894l5o7.swift:11:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp2894l5o7.swift:15:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmp2894l5o7.swift:15:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmp2894l5o7.swift:18:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013368
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text.isEmpty {\n        return nil\n    }\n   \
    \ let messageData = text.data(using:.utf8)!\n    var digestData = Data(count:\
    \ Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp7rlmq0mm.swift:10:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmp7rlmq0mm.swift:10:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmp7rlmq0mm.swift:11:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmp7rlmq0mm.swift:11:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp7rlmq0mm.swift:15:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmp7rlmq0mm.swift:15:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmp7rlmq0mm.swift:18:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013368
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    guard !text.isEmpty else {\n        return nil\n \
    \   }\n    let messageData = text.data(using:.utf8)!\n    var digestData = Data(count:\
    \ Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp2894l5o7.swift:10:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmp2894l5o7.swift:10:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmp2894l5o7.swift:11:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmp2894l5o7.swift:11:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp2894l5o7.swift:15:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmp2894l5o7.swift:15:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmp2894l5o7.swift:18:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013368
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text.isEmpty {\n        return nil\n    }\n   \
    \ let messageData = text.data(using:.utf8)!\n    var digestData = Data(count:\
    \ Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp7rlmq0mm.swift:10:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmp7rlmq0mm.swift:10:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmp7rlmq0mm.swift:11:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmp7rlmq0mm.swift:11:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp7rlmq0mm.swift:15:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmp7rlmq0mm.swift:15:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmp7rlmq0mm.swift:18:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013368
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text.isEmpty {\n        return nil\n    }\n   \
    \ let messageData = text.data(using:.utf8)!\n    var digestData = Data(count:\
    \ Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp7rlmq0mm.swift:10:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmp7rlmq0mm.swift:10:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmp7rlmq0mm.swift:11:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmp7rlmq0mm.swift:11:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp7rlmq0mm.swift:15:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmp7rlmq0mm.swift:15:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmp7rlmq0mm.swift:18:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013368
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    guard text.count > 0 else {\n        return nil\n\
    \    }\n    let messageData = text.data(using:.utf8)!\n    var digestData = Data(count:\
    \ Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpqfx0ut4r.swift:10:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmpqfx0ut4r.swift:10:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmpqfx0ut4r.swift:11:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmpqfx0ut4r.swift:11:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmpqfx0ut4r.swift:15:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmpqfx0ut4r.swift:15:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmpqfx0ut4r.swift:18:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013368
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    guard !text.isEmpty else {\n        return nil\n \
    \   }\n    let messageData = text.data(using:.utf8)!\n    var digestData = Data(count:\
    \ Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp2894l5o7.swift:10:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmp2894l5o7.swift:10:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmp2894l5o7.swift:11:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmp2894l5o7.swift:11:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp2894l5o7.swift:15:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmp2894l5o7.swift:15:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmp2894l5o7.swift:18:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013368
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text.isEmpty {\n        return nil\n    }\n   \
    \ let messageData = text.data(using:.utf8)!\n    var digestData = Data(count:\
    \ Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp7rlmq0mm.swift:10:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmp7rlmq0mm.swift:10:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmp7rlmq0mm.swift:11:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmp7rlmq0mm.swift:11:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp7rlmq0mm.swift:15:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmp7rlmq0mm.swift:15:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmp7rlmq0mm.swift:18:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013368
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text.isEmpty {\n        return nil\n    }\n   \
    \ let messageData = text.data(using:.utf8)!\n    var digestData = Data(count:\
    \ Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp7rlmq0mm.swift:10:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmp7rlmq0mm.swift:10:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmp7rlmq0mm.swift:11:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmp7rlmq0mm.swift:11:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp7rlmq0mm.swift:15:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmp7rlmq0mm.swift:15:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmp7rlmq0mm.swift:18:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013368
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text.isEmpty {\n        return nil\n    }\n   \
    \ let messageData = text.data(using:.utf8)!\n    var digestData = Data(count:\
    \ Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp7rlmq0mm.swift:10:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmp7rlmq0mm.swift:10:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmp7rlmq0mm.swift:11:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmp7rlmq0mm.swift:11:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp7rlmq0mm.swift:15:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmp7rlmq0mm.swift:15:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmp7rlmq0mm.swift:18:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013368
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    guard !text.isEmpty else {\n        return nil\n \
    \   }\n    let messageData = text.data(using:.utf8)!\n    var digestData = Data(count:\
    \ Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp2894l5o7.swift:10:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmp2894l5o7.swift:10:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmp2894l5o7.swift:11:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmp2894l5o7.swift:11:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp2894l5o7.swift:15:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmp2894l5o7.swift:15:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmp2894l5o7.swift:18:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013368
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    guard !text.isEmpty else {\n        return nil\n \
    \   }\n    let messageData = text.data(using:.utf8)!\n    var digestData = Data(count:\
    \ Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp2894l5o7.swift:10:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmp2894l5o7.swift:10:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmp2894l5o7.swift:11:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmp2894l5o7.swift:11:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp2894l5o7.swift:15:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmp2894l5o7.swift:15:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmp2894l5o7.swift:18:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013368
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text.isEmpty {\n        return nil\n    }\n   \
    \ let messageData = text.data(using:.utf8)!\n    var digestData = Data(count:\
    \ Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp7rlmq0mm.swift:10:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmp7rlmq0mm.swift:10:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmp7rlmq0mm.swift:11:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmp7rlmq0mm.swift:11:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp7rlmq0mm.swift:15:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmp7rlmq0mm.swift:15:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmp7rlmq0mm.swift:18:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013368
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    guard !text.isEmpty else {\n        return nil\n \
    \   }\n    let data = Data(text.utf8)\n    let hash = data.withUnsafeBytes { (bytes:\
    \ UnsafeRawBufferPointer) -> [UInt8] in\n        var hash = [UInt8](repeating:\
    \ 0, count: Int(CC_MD5_DIGEST_LENGTH))\n        CC_MD5(bytes.baseAddress, CC_LONG(data.count),\
    \ &hash)\n        return hash\n    }\n    return hash.map { String(format: \"\
    %02x\", $0) }.joined()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(string_to_md5(text:\
    \ \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\nassert(string_to_md5(text:\
    \ \"\") == nil)\nassert(string_to_md5(text: \"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\nassert(string_to_md5(text: \"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpfyr15ydm.swift:10:16: error: cannot find 'Data' in scope\n    let\
    \ data = Data(text.utf8)\n               ^~~~\n/tmp/tmpfyr15ydm.swift:12:53: error:\
    \ cannot find 'CC_MD5_DIGEST_LENGTH' in scope\n        var hash = [UInt8](repeating:\
    \ 0, count: Int(CC_MD5_DIGEST_LENGTH))\n                                     \
    \               ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmpfyr15ydm.swift:13:9: error: cannot\
    \ find 'CC_MD5' in scope\n        CC_MD5(bytes.baseAddress, CC_LONG(data.count),\
    \ &hash)\n        ^~~~~~\n/tmp/tmpfyr15ydm.swift:13:35: error: cannot find 'CC_LONG'\
    \ in scope\n        CC_MD5(bytes.baseAddress, CC_LONG(data.count), &hash)\n  \
    \                                ^~~~~~~\n/tmp/tmpfyr15ydm.swift:16:29: error:\
    \ incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return hash.map { String(format: \"%02x\", $0) }.joined()\n             \
    \               ^~~~~~~\n                             repeating       count: \n"
  stdout: ''
  timestamp: 1660013368
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    guard text.count > 0 else {\n        return nil\n\
    \    }\n    let messageData = text.data(using:.utf8)!\n    var digestData = Data(count:\
    \ Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpqfx0ut4r.swift:10:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmpqfx0ut4r.swift:10:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmpqfx0ut4r.swift:11:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmpqfx0ut4r.swift:11:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmpqfx0ut4r.swift:15:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmpqfx0ut4r.swift:15:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmpqfx0ut4r.swift:18:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013368
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    guard !text.isEmpty else {\n        return nil\n \
    \   }\n    let messageData = text.data(using:.utf8)!\n    var digestData = Data(count:\
    \ Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp2894l5o7.swift:10:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmp2894l5o7.swift:10:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmp2894l5o7.swift:11:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmp2894l5o7.swift:11:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp2894l5o7.swift:15:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmp2894l5o7.swift:15:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmp2894l5o7.swift:18:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013368
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    guard !text.isEmpty else {\n        return nil\n \
    \   }\n    let messageData = text.data(using:.utf8)!\n    var digestData = Data(count:\
    \ Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp2894l5o7.swift:10:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmp2894l5o7.swift:10:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmp2894l5o7.swift:11:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmp2894l5o7.swift:11:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp2894l5o7.swift:15:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmp2894l5o7.swift:15:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmp2894l5o7.swift:18:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013368
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text.isEmpty {\n        return nil\n    }\n   \
    \ let messageData = text.data(using:.utf8)!\n    var digestData = Data(count:\
    \ Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp7rlmq0mm.swift:10:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmp7rlmq0mm.swift:10:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmp7rlmq0mm.swift:11:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmp7rlmq0mm.swift:11:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp7rlmq0mm.swift:15:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmp7rlmq0mm.swift:15:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmp7rlmq0mm.swift:18:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013368
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    guard !text.isEmpty else {\n        return nil\n \
    \   }\n    let messageData = text.data(using:.utf8)!\n    var digestData = Data(count:\
    \ Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp2894l5o7.swift:10:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmp2894l5o7.swift:10:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmp2894l5o7.swift:11:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmp2894l5o7.swift:11:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp2894l5o7.swift:15:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmp2894l5o7.swift:15:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmp2894l5o7.swift:18:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013368
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text.isEmpty {\n        return nil\n    }\n   \
    \ let data = text.data(using: .utf8)!\n    let md5 = data.withUnsafeBytes { (bytes:\
    \ UnsafePointer<Data>) -> [UInt8] in\n        var hash: [UInt8] = [UInt8](repeating:\
    \ 0, count: Int(CC_MD5_DIGEST_LENGTH))\n        CC_MD5(bytes, CC_LONG(data.count),\
    \ &hash)\n        return hash\n    }\n    return md5.map { String(format: \"%02x\"\
    , $0) }.joined()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(string_to_md5(text:\
    \ \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\nassert(string_to_md5(text:\
    \ \"\") == nil)\nassert(string_to_md5(text: \"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\nassert(string_to_md5(text: \"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp92lhtanm.swift:10:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: .utf8)!\n               ~~~~ ^~~~\n\
    /tmp/tmp92lhtanm.swift:10:34: error: cannot infer contextual base in reference\
    \ to member 'utf8'\n    let data = text.data(using: .utf8)!\n                \
    \                ~^~~~\n/tmp/tmp92lhtanm.swift:12:62: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n        var hash: [UInt8] = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                                                             ^~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp92lhtanm.swift:13:9: error: cannot find 'CC_MD5' in scope\n        CC_MD5(bytes,\
    \ CC_LONG(data.count), &hash)\n        ^~~~~~\n/tmp/tmp92lhtanm.swift:13:23: error:\
    \ cannot find 'CC_LONG' in scope\n        CC_MD5(bytes, CC_LONG(data.count), &hash)\n\
    \                      ^~~~~~~\n/tmp/tmp92lhtanm.swift:16:28: error: incorrect\
    \ argument labels in call (have 'format:_:', expected 'repeating:count:')\n  \
    \  return md5.map { String(format: \"%02x\", $0) }.joined()\n                \
    \           ^~~~~~~\n                            repeating       count: \n"
  stdout: ''
  timestamp: 1660013368
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text.isEmpty {\n        return nil\n    }\n   \
    \ let messageData = text.data(using:.utf8)!\n    var digestData = Data(count:\
    \ Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp7rlmq0mm.swift:10:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmp7rlmq0mm.swift:10:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmp7rlmq0mm.swift:11:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmp7rlmq0mm.swift:11:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp7rlmq0mm.swift:15:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmp7rlmq0mm.swift:15:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmp7rlmq0mm.swift:18:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013368
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    guard !text.isEmpty else {\n        return nil\n \
    \   }\n    let messageData = text.data(using:.utf8)!\n    var digestData = Data(count:\
    \ Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp2894l5o7.swift:10:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmp2894l5o7.swift:10:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmp2894l5o7.swift:11:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmp2894l5o7.swift:11:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp2894l5o7.swift:15:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmp2894l5o7.swift:15:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmp2894l5o7.swift:18:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013368
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text.isEmpty {\n        return nil\n    }\n   \
    \ let messageData = text.data(using:.utf8)!\n    var digestData = Data(count:\
    \ Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp7rlmq0mm.swift:10:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmp7rlmq0mm.swift:10:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmp7rlmq0mm.swift:11:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmp7rlmq0mm.swift:11:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp7rlmq0mm.swift:15:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmp7rlmq0mm.swift:15:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmp7rlmq0mm.swift:18:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013368
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text.isEmpty {\n        return nil\n    }\n   \
    \ let messageData = text.data(using:.utf8)!\n    var digestData = Data(count:\
    \ Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp7rlmq0mm.swift:10:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmp7rlmq0mm.swift:10:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmp7rlmq0mm.swift:11:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmp7rlmq0mm.swift:11:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp7rlmq0mm.swift:15:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmp7rlmq0mm.swift:15:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmp7rlmq0mm.swift:18:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013368
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text.isEmpty {\n        return nil\n    }\n   \
    \ let messageData = text.data(using:.utf8)!\n    var digestData = Data(count:\
    \ Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp7rlmq0mm.swift:10:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmp7rlmq0mm.swift:10:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmp7rlmq0mm.swift:11:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmp7rlmq0mm.swift:11:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp7rlmq0mm.swift:15:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmp7rlmq0mm.swift:15:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmp7rlmq0mm.swift:18:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013368
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text.isEmpty {\n        return nil\n    }\n   \
    \ let messageData = text.data(using:.utf8)!\n    var digestData = Data(count:\
    \ Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp7rlmq0mm.swift:10:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmp7rlmq0mm.swift:10:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmp7rlmq0mm.swift:11:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmp7rlmq0mm.swift:11:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp7rlmq0mm.swift:15:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmp7rlmq0mm.swift:15:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmp7rlmq0mm.swift:18:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013368
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    guard !text.isEmpty else {\n        return nil\n \
    \   }\n    let messageData = text.data(using:.utf8)!\n    var digestData = Data(count:\
    \ Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp2894l5o7.swift:10:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmp2894l5o7.swift:10:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmp2894l5o7.swift:11:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmp2894l5o7.swift:11:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp2894l5o7.swift:15:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmp2894l5o7.swift:15:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmp2894l5o7.swift:18:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013368
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text.isEmpty {\n        return nil\n    }\n   \
    \ let messageData = text.data(using:.utf8)!\n    var digestData = Data(count:\
    \ Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp7rlmq0mm.swift:10:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmp7rlmq0mm.swift:10:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmp7rlmq0mm.swift:11:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmp7rlmq0mm.swift:11:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp7rlmq0mm.swift:15:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmp7rlmq0mm.swift:15:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmp7rlmq0mm.swift:18:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013368
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    guard !text.isEmpty else {\n        return nil\n \
    \   }\n    let messageData = text.data(using:.utf8)!\n    var digestData = Data(count:\
    \ Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp2894l5o7.swift:10:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmp2894l5o7.swift:10:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmp2894l5o7.swift:11:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmp2894l5o7.swift:11:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp2894l5o7.swift:15:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmp2894l5o7.swift:15:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmp2894l5o7.swift:18:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013368
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text.isEmpty {\n        return nil\n    }\n   \
    \ let messageData = text.data(using:.utf8)!\n    var digestData = Data(count:\
    \ Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp7rlmq0mm.swift:10:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmp7rlmq0mm.swift:10:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmp7rlmq0mm.swift:11:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmp7rlmq0mm.swift:11:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp7rlmq0mm.swift:15:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmp7rlmq0mm.swift:15:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmp7rlmq0mm.swift:18:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013368
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    guard !text.isEmpty else {\n        return nil\n \
    \   }\n    let messageData = text.data(using:.utf8)!\n    var digestData = Data(count:\
    \ Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp2894l5o7.swift:10:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmp2894l5o7.swift:10:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmp2894l5o7.swift:11:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmp2894l5o7.swift:11:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp2894l5o7.swift:15:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmp2894l5o7.swift:15:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmp2894l5o7.swift:18:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013368
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    guard !text.isEmpty else {\n        return nil\n \
    \   }\n    let messageData = text.data(using:.utf8)!\n    var digestData = Data(count:\
    \ Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp2894l5o7.swift:10:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmp2894l5o7.swift:10:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmp2894l5o7.swift:11:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmp2894l5o7.swift:11:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp2894l5o7.swift:15:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmp2894l5o7.swift:15:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmp2894l5o7.swift:18:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013368
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    guard !text.isEmpty else {\n        return nil\n \
    \   }\n    let messageData = text.data(using:.utf8)!\n    var digestData = Data(count:\
    \ Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp2894l5o7.swift:10:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmp2894l5o7.swift:10:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmp2894l5o7.swift:11:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmp2894l5o7.swift:11:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp2894l5o7.swift:15:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmp2894l5o7.swift:15:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmp2894l5o7.swift:18:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013368
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text.isEmpty {\n        return nil\n    }\n   \
    \ let messageData = text.data(using:.utf8)!\n    var digestData = Data(count:\
    \ Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp7rlmq0mm.swift:10:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmp7rlmq0mm.swift:10:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmp7rlmq0mm.swift:11:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmp7rlmq0mm.swift:11:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp7rlmq0mm.swift:15:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmp7rlmq0mm.swift:15:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmp7rlmq0mm.swift:18:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013368
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text.isEmpty {\n        return nil\n    }\n   \
    \ let messageData = text.data(using:.utf8)!\n    var digestData = Data(count:\
    \ Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp7rlmq0mm.swift:10:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmp7rlmq0mm.swift:10:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmp7rlmq0mm.swift:11:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmp7rlmq0mm.swift:11:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp7rlmq0mm.swift:15:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmp7rlmq0mm.swift:15:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmp7rlmq0mm.swift:18:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013368
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text.isEmpty {\n        return nil\n    }\n   \
    \ let messageData = text.data(using:.utf8)!\n    var digestData = Data(count:\
    \ Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp7rlmq0mm.swift:10:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmp7rlmq0mm.swift:10:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmp7rlmq0mm.swift:11:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmp7rlmq0mm.swift:11:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp7rlmq0mm.swift:15:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmp7rlmq0mm.swift:15:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmp7rlmq0mm.swift:18:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013368
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    guard !text.isEmpty else {\n        return nil\n \
    \   }\n    let messageData = text.data(using:.utf8)!\n    var digestData = Data(count:\
    \ Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp2894l5o7.swift:10:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmp2894l5o7.swift:10:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmp2894l5o7.swift:11:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmp2894l5o7.swift:11:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp2894l5o7.swift:15:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmp2894l5o7.swift:15:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmp2894l5o7.swift:18:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013368
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text.isEmpty {\n        return nil\n    }\n   \
    \ let messageData = text.data(using:.utf8)!\n    var digestData = Data(count:\
    \ Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp7rlmq0mm.swift:10:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmp7rlmq0mm.swift:10:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmp7rlmq0mm.swift:11:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmp7rlmq0mm.swift:11:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp7rlmq0mm.swift:15:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmp7rlmq0mm.swift:15:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmp7rlmq0mm.swift:18:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013368
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text.isEmpty {\n        return nil\n    }\n   \
    \ let messageData = text.data(using:.utf8)!\n    var digestData = Data(count:\
    \ Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp7rlmq0mm.swift:10:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmp7rlmq0mm.swift:10:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmp7rlmq0mm.swift:11:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmp7rlmq0mm.swift:11:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp7rlmq0mm.swift:15:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmp7rlmq0mm.swift:15:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmp7rlmq0mm.swift:18:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013368
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    guard !text.isEmpty else {\n        return nil\n \
    \   }\n    let messageData = text.data(using:.utf8)!\n    var digestData = Data(count:\
    \ Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp2894l5o7.swift:10:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmp2894l5o7.swift:10:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmp2894l5o7.swift:11:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmp2894l5o7.swift:11:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp2894l5o7.swift:15:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmp2894l5o7.swift:15:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmp2894l5o7.swift:18:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013368
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    guard !text.isEmpty else {\n        return nil\n \
    \   }\n    let messageData = text.data(using:.utf8)!\n    var digestData = Data(count:\
    \ Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp2894l5o7.swift:10:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmp2894l5o7.swift:10:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmp2894l5o7.swift:11:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmp2894l5o7.swift:11:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp2894l5o7.swift:15:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmp2894l5o7.swift:15:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmp2894l5o7.swift:18:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013368
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text.isEmpty {\n        return nil\n    }\n   \
    \ let messageData = text.data(using:.utf8)!\n    var digestData = Data(count:\
    \ Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp7rlmq0mm.swift:10:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmp7rlmq0mm.swift:10:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmp7rlmq0mm.swift:11:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmp7rlmq0mm.swift:11:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp7rlmq0mm.swift:15:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmp7rlmq0mm.swift:15:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmp7rlmq0mm.swift:18:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013368
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text.isEmpty {\n        return nil\n    }\n   \
    \ let messageData = text.data(using:.utf8)!\n    var digestData = Data(count:\
    \ Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp7rlmq0mm.swift:10:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmp7rlmq0mm.swift:10:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmp7rlmq0mm.swift:11:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmp7rlmq0mm.swift:11:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp7rlmq0mm.swift:15:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmp7rlmq0mm.swift:15:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmp7rlmq0mm.swift:18:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013368
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    guard !text.isEmpty else {\n        return nil\n \
    \   }\n    let data = Data(text.utf8)\n    let hash = data.withUnsafeBytes { (bytes:\
    \ UnsafeRawBufferPointer) -> [UInt8] in\n        var hash = [UInt8](repeating:\
    \ 0, count: Int(CC_MD5_DIGEST_LENGTH))\n        CC_MD5(bytes.baseAddress, CC_LONG(data.count),\
    \ &hash)\n        return hash\n    }\n    return hash.map { String(format: \"\
    %02x\", $0) }.joined()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(string_to_md5(text:\
    \ \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\nassert(string_to_md5(text:\
    \ \"\") == nil)\nassert(string_to_md5(text: \"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\nassert(string_to_md5(text: \"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpfyr15ydm.swift:10:16: error: cannot find 'Data' in scope\n    let\
    \ data = Data(text.utf8)\n               ^~~~\n/tmp/tmpfyr15ydm.swift:12:53: error:\
    \ cannot find 'CC_MD5_DIGEST_LENGTH' in scope\n        var hash = [UInt8](repeating:\
    \ 0, count: Int(CC_MD5_DIGEST_LENGTH))\n                                     \
    \               ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmpfyr15ydm.swift:13:9: error: cannot\
    \ find 'CC_MD5' in scope\n        CC_MD5(bytes.baseAddress, CC_LONG(data.count),\
    \ &hash)\n        ^~~~~~\n/tmp/tmpfyr15ydm.swift:13:35: error: cannot find 'CC_LONG'\
    \ in scope\n        CC_MD5(bytes.baseAddress, CC_LONG(data.count), &hash)\n  \
    \                                ^~~~~~~\n/tmp/tmpfyr15ydm.swift:16:29: error:\
    \ incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return hash.map { String(format: \"%02x\", $0) }.joined()\n             \
    \               ^~~~~~~\n                             repeating       count: \n"
  stdout: ''
  timestamp: 1660013368
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    guard !text.isEmpty else {\n        return nil\n \
    \   }\n    let messageData = text.data(using:.utf8)!\n    var digestData = Data(count:\
    \ Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp2894l5o7.swift:10:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmp2894l5o7.swift:10:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmp2894l5o7.swift:11:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmp2894l5o7.swift:11:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp2894l5o7.swift:15:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmp2894l5o7.swift:15:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmp2894l5o7.swift:18:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013368
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text.isEmpty {\n        return nil\n    }\n   \
    \ let data = text.data(using: .utf8)!\n    var digest = [UInt8](repeating: 0,\
    \ count: Int(CC_MD5_DIGEST_LENGTH))\n    data.withUnsafeBytes {\n        _ = CC_MD5($0.baseAddress,\
    \ CC_LONG(data.count), &digest)\n    }\n    return digest.map { String(format:\
    \ \"%02x\", $0) }.joined()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(string_to_md5(text:\
    \ \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\nassert(string_to_md5(text:\
    \ \"\") == nil)\nassert(string_to_md5(text: \"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\nassert(string_to_md5(text: \"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp5db36mj2.swift:10:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: .utf8)!\n               ~~~~ ^~~~\n\
    /tmp/tmp5db36mj2.swift:10:34: error: cannot infer contextual base in reference\
    \ to member 'utf8'\n    let data = text.data(using: .utf8)!\n                \
    \                ~^~~~\n/tmp/tmp5db36mj2.swift:11:51: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digest = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                                                  ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp5db36mj2.swift:13:13:\
    \ error: cannot find 'CC_MD5' in scope\n        _ = CC_MD5($0.baseAddress, CC_LONG(data.count),\
    \ &digest)\n            ^~~~~~\n/tmp/tmp5db36mj2.swift:13:36: error: cannot find\
    \ 'CC_LONG' in scope\n        _ = CC_MD5($0.baseAddress, CC_LONG(data.count),\
    \ &digest)\n                                   ^~~~~~~\n/tmp/tmp5db36mj2.swift:15:31:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digest.map { String(format: \"%02x\", $0) }.joined()\n           \
    \                   ^~~~~~~\n                               repeating       count:\
    \ \n"
  stdout: ''
  timestamp: 1660013368
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    guard !text.isEmpty else {\n        return nil\n \
    \   }\n    let messageData = text.data(using:.utf8)!\n    var digestData = Data(count:\
    \ Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp2894l5o7.swift:10:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmp2894l5o7.swift:10:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmp2894l5o7.swift:11:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmp2894l5o7.swift:11:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp2894l5o7.swift:15:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmp2894l5o7.swift:15:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmp2894l5o7.swift:18:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013368
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text.isEmpty {\n        return nil\n    }\n   \
    \ let messageData = text.data(using:.utf8)!\n    var digestData = Data(count:\
    \ Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp7rlmq0mm.swift:10:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmp7rlmq0mm.swift:10:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmp7rlmq0mm.swift:11:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmp7rlmq0mm.swift:11:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp7rlmq0mm.swift:15:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmp7rlmq0mm.swift:15:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmp7rlmq0mm.swift:18:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013368
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text.isEmpty {\n        return nil\n    }\n   \
    \ let data = Data(text.utf8)\n    let hash = data.withUnsafeBytes { (bytes: UnsafeRawBufferPointer)\
    \ -> [UInt8] in\n        var hash = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \        CC_MD5(bytes.baseAddress, CC_LONG(data.count), &hash)\n        return\
    \ hash\n    }\n    return hash.map { String(format: \"%02x\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpfso857mf.swift:10:16: error: cannot find 'Data' in scope\n    let\
    \ data = Data(text.utf8)\n               ^~~~\n/tmp/tmpfso857mf.swift:12:53: error:\
    \ cannot find 'CC_MD5_DIGEST_LENGTH' in scope\n        var hash = [UInt8](repeating:\
    \ 0, count: Int(CC_MD5_DIGEST_LENGTH))\n                                     \
    \               ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmpfso857mf.swift:13:9: error: cannot\
    \ find 'CC_MD5' in scope\n        CC_MD5(bytes.baseAddress, CC_LONG(data.count),\
    \ &hash)\n        ^~~~~~\n/tmp/tmpfso857mf.swift:13:35: error: cannot find 'CC_LONG'\
    \ in scope\n        CC_MD5(bytes.baseAddress, CC_LONG(data.count), &hash)\n  \
    \                                ^~~~~~~\n/tmp/tmpfso857mf.swift:16:29: error:\
    \ incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return hash.map { String(format: \"%02x\", $0) }.joined()\n             \
    \               ^~~~~~~\n                             repeating       count: \n"
  stdout: ''
  timestamp: 1660013368
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text.isEmpty {\n        return nil\n    }\n   \
    \ let messageData = text.data(using:.utf8)!\n    var digestData = Data(count:\
    \ Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp7rlmq0mm.swift:10:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmp7rlmq0mm.swift:10:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmp7rlmq0mm.swift:11:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmp7rlmq0mm.swift:11:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp7rlmq0mm.swift:15:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmp7rlmq0mm.swift:15:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmp7rlmq0mm.swift:18:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013368
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    guard !text.isEmpty else {\n        return nil\n \
    \   }\n    let messageData = text.data(using:.utf8)!\n    var digestData = Data(count:\
    \ Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp2894l5o7.swift:10:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmp2894l5o7.swift:10:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmp2894l5o7.swift:11:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmp2894l5o7.swift:11:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp2894l5o7.swift:15:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmp2894l5o7.swift:15:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmp2894l5o7.swift:18:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013368
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    guard !text.isEmpty else {\n        return nil\n \
    \   }\n    let messageData = text.data(using:.utf8)!\n    var digestData = Data(count:\
    \ Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp2894l5o7.swift:10:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmp2894l5o7.swift:10:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmp2894l5o7.swift:11:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmp2894l5o7.swift:11:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp2894l5o7.swift:15:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmp2894l5o7.swift:15:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmp2894l5o7.swift:18:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013368
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text.isEmpty {\n        return nil\n    }\n   \
    \ let messageData = text.data(using:.utf8)!\n    var digestData = Data(count:\
    \ Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp7rlmq0mm.swift:10:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmp7rlmq0mm.swift:10:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmp7rlmq0mm.swift:11:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmp7rlmq0mm.swift:11:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp7rlmq0mm.swift:15:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmp7rlmq0mm.swift:15:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmp7rlmq0mm.swift:18:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013368
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text.isEmpty {\n        return nil\n    }\n   \
    \ let messageData = text.data(using:.utf8)!\n    var digestData = Data(count:\
    \ Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp7rlmq0mm.swift:10:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmp7rlmq0mm.swift:10:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmp7rlmq0mm.swift:11:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmp7rlmq0mm.swift:11:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp7rlmq0mm.swift:15:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmp7rlmq0mm.swift:15:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmp7rlmq0mm.swift:18:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013368
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text.isEmpty {\n        return nil\n    }\n   \
    \ let messageData = text.data(using:.utf8)!\n    var digestData = Data(count:\
    \ Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp7rlmq0mm.swift:10:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmp7rlmq0mm.swift:10:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmp7rlmq0mm.swift:11:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmp7rlmq0mm.swift:11:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp7rlmq0mm.swift:15:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmp7rlmq0mm.swift:15:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmp7rlmq0mm.swift:18:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013368
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text.isEmpty {\n        return nil\n    }\n   \
    \ let messageData = text.data(using:.utf8)!\n    var digestData = Data(count:\
    \ Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp7rlmq0mm.swift:10:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmp7rlmq0mm.swift:10:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmp7rlmq0mm.swift:11:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmp7rlmq0mm.swift:11:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp7rlmq0mm.swift:15:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmp7rlmq0mm.swift:15:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmp7rlmq0mm.swift:18:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013368
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text.isEmpty {\n        return nil\n    }\n   \
    \ let messageData = text.data(using:.utf8)!\n    var digestData = Data(count:\
    \ Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp7rlmq0mm.swift:10:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmp7rlmq0mm.swift:10:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmp7rlmq0mm.swift:11:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmp7rlmq0mm.swift:11:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp7rlmq0mm.swift:15:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmp7rlmq0mm.swift:15:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmp7rlmq0mm.swift:18:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013368
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    guard !text.isEmpty else {\n        return nil\n \
    \   }\n    let messageData = text.data(using:.utf8)!\n    var digestData = Data(count:\
    \ Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp2894l5o7.swift:10:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmp2894l5o7.swift:10:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmp2894l5o7.swift:11:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmp2894l5o7.swift:11:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp2894l5o7.swift:15:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmp2894l5o7.swift:15:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmp2894l5o7.swift:18:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013368
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    guard !text.isEmpty else {\n        return nil\n \
    \   }\n    let messageData = text.data(using:.utf8)!\n    var digestData = Data(count:\
    \ Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp2894l5o7.swift:10:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmp2894l5o7.swift:10:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmp2894l5o7.swift:11:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmp2894l5o7.swift:11:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp2894l5o7.swift:15:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmp2894l5o7.swift:15:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmp2894l5o7.swift:18:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013368
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    guard !text.isEmpty else {\n        return nil\n \
    \   }\n    let messageData = text.data(using:.utf8)!\n    var digestData = Data(count:\
    \ Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp2894l5o7.swift:10:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmp2894l5o7.swift:10:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmp2894l5o7.swift:11:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmp2894l5o7.swift:11:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp2894l5o7.swift:15:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmp2894l5o7.swift:15:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmp2894l5o7.swift:18:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013368
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text.isEmpty {\n        return nil\n    }\n   \
    \ let messageData = text.data(using:.utf8)!\n    var digestData = Data(count:\
    \ Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp7rlmq0mm.swift:10:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmp7rlmq0mm.swift:10:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmp7rlmq0mm.swift:11:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmp7rlmq0mm.swift:11:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp7rlmq0mm.swift:15:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmp7rlmq0mm.swift:15:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmp7rlmq0mm.swift:18:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013368
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text.isEmpty {\n        return nil\n    }\n   \
    \ let messageData = text.data(using:.utf8)!\n    var digestData = Data(count:\
    \ Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp7rlmq0mm.swift:10:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmp7rlmq0mm.swift:10:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmp7rlmq0mm.swift:11:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmp7rlmq0mm.swift:11:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp7rlmq0mm.swift:15:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmp7rlmq0mm.swift:15:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmp7rlmq0mm.swift:18:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013368
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    guard !text.isEmpty else {\n        return nil\n \
    \   }\n    let messageData = text.data(using:.utf8)!\n    var digestData = Data(count:\
    \ Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp2894l5o7.swift:10:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmp2894l5o7.swift:10:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmp2894l5o7.swift:11:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmp2894l5o7.swift:11:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp2894l5o7.swift:15:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmp2894l5o7.swift:15:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmp2894l5o7.swift:18:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013368
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    guard !text.isEmpty else {\n        return nil\n \
    \   }\n    let messageData = text.data(using:.utf8)!\n    var digestData = Data(count:\
    \ Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp2894l5o7.swift:10:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmp2894l5o7.swift:10:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmp2894l5o7.swift:11:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmp2894l5o7.swift:11:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp2894l5o7.swift:15:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmp2894l5o7.swift:15:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmp2894l5o7.swift:18:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013368
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    guard !text.isEmpty else {\n        return nil\n \
    \   }\n    let messageData = text.data(using:.utf8)!\n    var digestData = Data(count:\
    \ Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp2894l5o7.swift:10:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmp2894l5o7.swift:10:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmp2894l5o7.swift:11:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmp2894l5o7.swift:11:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp2894l5o7.swift:15:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmp2894l5o7.swift:15:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmp2894l5o7.swift:18:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013368
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text.isEmpty {\n        return nil\n    }\n   \
    \ let messageData = text.data(using:.utf8)!\n    var digestData = Data(count:\
    \ Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp7rlmq0mm.swift:10:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmp7rlmq0mm.swift:10:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmp7rlmq0mm.swift:11:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmp7rlmq0mm.swift:11:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp7rlmq0mm.swift:15:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmp7rlmq0mm.swift:15:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmp7rlmq0mm.swift:18:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013368
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text.isEmpty {\n        return nil\n    }\n   \
    \ let messageData = text.data(using:.utf8)!\n    var digestData = Data(count:\
    \ Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp7rlmq0mm.swift:10:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmp7rlmq0mm.swift:10:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmp7rlmq0mm.swift:11:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmp7rlmq0mm.swift:11:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp7rlmq0mm.swift:15:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmp7rlmq0mm.swift:15:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmp7rlmq0mm.swift:18:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013368
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    guard !text.isEmpty else {\n        return nil\n \
    \   }\n    let messageData = text.data(using:.utf8)!\n    var digestData = Data(count:\
    \ Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp2894l5o7.swift:10:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmp2894l5o7.swift:10:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmp2894l5o7.swift:11:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmp2894l5o7.swift:11:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp2894l5o7.swift:15:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmp2894l5o7.swift:15:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmp2894l5o7.swift:18:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013368
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text.isEmpty {\n        return nil\n    }\n   \
    \ let messageData = text.data(using:.utf8)!\n    var digestData = Data(count:\
    \ Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp7rlmq0mm.swift:10:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmp7rlmq0mm.swift:10:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmp7rlmq0mm.swift:11:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmp7rlmq0mm.swift:11:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp7rlmq0mm.swift:15:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmp7rlmq0mm.swift:15:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmp7rlmq0mm.swift:18:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013368
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    guard !text.isEmpty else {\n        return nil\n \
    \   }\n    let messageData = text.data(using:.utf8)!\n    var digestData = Data(count:\
    \ Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp2894l5o7.swift:10:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmp2894l5o7.swift:10:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmp2894l5o7.swift:11:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmp2894l5o7.swift:11:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp2894l5o7.swift:15:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmp2894l5o7.swift:15:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmp2894l5o7.swift:18:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013368
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text.isEmpty {\n        return nil\n    }\n   \
    \ let data = text.data(using: .utf8)!\n    let md5 = data.withUnsafeBytes { (bytes:\
    \ UnsafePointer<Data>) -> [UInt8] in\n        var hash: [UInt8] = [UInt8](repeating:\
    \ 0, count: Int(CC_MD5_DIGEST_LENGTH))\n        CC_MD5(bytes, CC_LONG(data.count),\
    \ &hash)\n        return hash\n    }\n    return md5.map { String(format: \"%02x\"\
    , $0) }.joined()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(string_to_md5(text:\
    \ \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\nassert(string_to_md5(text:\
    \ \"\") == nil)\nassert(string_to_md5(text: \"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\nassert(string_to_md5(text: \"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp92lhtanm.swift:10:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: .utf8)!\n               ~~~~ ^~~~\n\
    /tmp/tmp92lhtanm.swift:10:34: error: cannot infer contextual base in reference\
    \ to member 'utf8'\n    let data = text.data(using: .utf8)!\n                \
    \                ~^~~~\n/tmp/tmp92lhtanm.swift:12:62: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n        var hash: [UInt8] = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                                                             ^~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp92lhtanm.swift:13:9: error: cannot find 'CC_MD5' in scope\n        CC_MD5(bytes,\
    \ CC_LONG(data.count), &hash)\n        ^~~~~~\n/tmp/tmp92lhtanm.swift:13:23: error:\
    \ cannot find 'CC_LONG' in scope\n        CC_MD5(bytes, CC_LONG(data.count), &hash)\n\
    \                      ^~~~~~~\n/tmp/tmp92lhtanm.swift:16:28: error: incorrect\
    \ argument labels in call (have 'format:_:', expected 'repeating:count:')\n  \
    \  return md5.map { String(format: \"%02x\", $0) }.joined()\n                \
    \           ^~~~~~~\n                            repeating       count: \n"
  stdout: ''
  timestamp: 1660013368
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text.isEmpty {\n        return nil\n    }\n   \
    \ let messageData = text.data(using:.utf8)!\n    var digestData = Data(count:\
    \ Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp7rlmq0mm.swift:10:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmp7rlmq0mm.swift:10:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmp7rlmq0mm.swift:11:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmp7rlmq0mm.swift:11:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp7rlmq0mm.swift:15:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmp7rlmq0mm.swift:15:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmp7rlmq0mm.swift:18:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013368
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text.isEmpty {\n        return nil\n    }\n   \
    \ let messageData = text.data(using:.utf8)!\n    var digestData = Data(count:\
    \ Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp7rlmq0mm.swift:10:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmp7rlmq0mm.swift:10:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmp7rlmq0mm.swift:11:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmp7rlmq0mm.swift:11:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp7rlmq0mm.swift:15:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmp7rlmq0mm.swift:15:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmp7rlmq0mm.swift:18:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013368
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    guard !text.isEmpty else {\n        return nil\n \
    \   }\n    let messageData = text.data(using:.utf8)!\n    var digestData = Data(count:\
    \ Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp2894l5o7.swift:10:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmp2894l5o7.swift:10:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmp2894l5o7.swift:11:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmp2894l5o7.swift:11:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp2894l5o7.swift:15:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmp2894l5o7.swift:15:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmp2894l5o7.swift:18:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013368
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    guard !text.isEmpty else {\n        return nil\n \
    \   }\n    let messageData = text.data(using:.utf8)!\n    var digestData = Data(count:\
    \ Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp2894l5o7.swift:10:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmp2894l5o7.swift:10:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmp2894l5o7.swift:11:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmp2894l5o7.swift:11:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp2894l5o7.swift:15:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmp2894l5o7.swift:15:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmp2894l5o7.swift:18:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013368
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    guard !text.isEmpty else {\n        return nil\n \
    \   }\n    let messageData = text.data(using:.utf8)!\n    var digestData = Data(count:\
    \ Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp2894l5o7.swift:10:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmp2894l5o7.swift:10:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmp2894l5o7.swift:11:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmp2894l5o7.swift:11:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp2894l5o7.swift:15:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmp2894l5o7.swift:15:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmp2894l5o7.swift:18:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013368
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text.isEmpty {\n        return nil\n    }\n   \
    \ let messageData = text.data(using:.utf8)!\n    var digestData = Data(count:\
    \ Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp7rlmq0mm.swift:10:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmp7rlmq0mm.swift:10:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmp7rlmq0mm.swift:11:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmp7rlmq0mm.swift:11:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp7rlmq0mm.swift:15:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmp7rlmq0mm.swift:15:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmp7rlmq0mm.swift:18:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013368
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text.isEmpty {\n        return nil\n    }\n   \
    \ let messageData = text.data(using:.utf8)!\n    var digestData = Data(count:\
    \ Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp7rlmq0mm.swift:10:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmp7rlmq0mm.swift:10:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmp7rlmq0mm.swift:11:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmp7rlmq0mm.swift:11:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp7rlmq0mm.swift:15:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmp7rlmq0mm.swift:15:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmp7rlmq0mm.swift:18:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013368
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    guard !text.isEmpty else {\n        return nil\n \
    \   }\n    let messageData = text.data(using:.utf8)!\n    var digestData = Data(count:\
    \ Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp2894l5o7.swift:10:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmp2894l5o7.swift:10:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmp2894l5o7.swift:11:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmp2894l5o7.swift:11:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp2894l5o7.swift:15:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmp2894l5o7.swift:15:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmp2894l5o7.swift:18:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013368
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text.isEmpty {\n        return nil\n    }\n   \
    \ let messageData = text.data(using:.utf8)!\n    var digestData = Data(count:\
    \ Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp7rlmq0mm.swift:10:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmp7rlmq0mm.swift:10:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmp7rlmq0mm.swift:11:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmp7rlmq0mm.swift:11:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp7rlmq0mm.swift:15:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmp7rlmq0mm.swift:15:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmp7rlmq0mm.swift:18:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013368
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text.isEmpty {\n        return nil\n    }\n   \
    \ let messageData = text.data(using:.utf8)!\n    var digestData = Data(count:\
    \ Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp7rlmq0mm.swift:10:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmp7rlmq0mm.swift:10:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmp7rlmq0mm.swift:11:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmp7rlmq0mm.swift:11:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp7rlmq0mm.swift:15:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmp7rlmq0mm.swift:15:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmp7rlmq0mm.swift:18:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013368
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    guard !text.isEmpty else {\n        return nil\n \
    \   }\n    let messageData = text.data(using:.utf8)!\n    var digestData = Data(count:\
    \ Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp2894l5o7.swift:10:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmp2894l5o7.swift:10:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmp2894l5o7.swift:11:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmp2894l5o7.swift:11:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp2894l5o7.swift:15:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmp2894l5o7.swift:15:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmp2894l5o7.swift:18:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013368
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text.isEmpty {\n        return nil\n    }\n   \
    \ let messageData = text.data(using:.utf8)!\n    var digestData = Data(count:\
    \ Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp7rlmq0mm.swift:10:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmp7rlmq0mm.swift:10:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmp7rlmq0mm.swift:11:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmp7rlmq0mm.swift:11:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp7rlmq0mm.swift:15:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmp7rlmq0mm.swift:15:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmp7rlmq0mm.swift:18:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013368
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text.isEmpty {\n        return nil\n    }\n   \
    \ let messageData = text.data(using:.utf8)!\n    var digestData = Data(count:\
    \ Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp7rlmq0mm.swift:10:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmp7rlmq0mm.swift:10:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmp7rlmq0mm.swift:11:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmp7rlmq0mm.swift:11:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp7rlmq0mm.swift:15:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmp7rlmq0mm.swift:15:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmp7rlmq0mm.swift:18:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013368
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    guard !text.isEmpty else {\n        return nil\n \
    \   }\n    let messageData = text.data(using:.utf8)!\n    var digestData = Data(count:\
    \ Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp2894l5o7.swift:10:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmp2894l5o7.swift:10:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmp2894l5o7.swift:11:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmp2894l5o7.swift:11:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp2894l5o7.swift:15:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmp2894l5o7.swift:15:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmp2894l5o7.swift:18:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013368
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    guard !text.isEmpty else {\n        return nil\n \
    \   }\n    let messageData = text.data(using:.utf8)!\n    var digestData = Data(count:\
    \ Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp2894l5o7.swift:10:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmp2894l5o7.swift:10:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmp2894l5o7.swift:11:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmp2894l5o7.swift:11:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp2894l5o7.swift:15:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmp2894l5o7.swift:15:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmp2894l5o7.swift:18:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013368
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text.isEmpty {\n        return nil\n    }\n   \
    \ let messageData = text.data(using:.utf8)!\n    var digestData = Data(count:\
    \ Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp7rlmq0mm.swift:10:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmp7rlmq0mm.swift:10:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmp7rlmq0mm.swift:11:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmp7rlmq0mm.swift:11:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp7rlmq0mm.swift:15:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmp7rlmq0mm.swift:15:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmp7rlmq0mm.swift:18:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013368
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    guard !text.isEmpty else {\n        return nil\n \
    \   }\n    let messageData = text.data(using:.utf8)!\n    var digestData = Data(count:\
    \ Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp2894l5o7.swift:10:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmp2894l5o7.swift:10:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmp2894l5o7.swift:11:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmp2894l5o7.swift:11:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp2894l5o7.swift:15:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmp2894l5o7.swift:15:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmp2894l5o7.swift:18:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013368
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    guard !text.isEmpty else {\n        return nil\n \
    \   }\n    let messageData = text.data(using:.utf8)!\n    var digestData = Data(count:\
    \ Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp2894l5o7.swift:10:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmp2894l5o7.swift:10:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmp2894l5o7.swift:11:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmp2894l5o7.swift:11:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp2894l5o7.swift:15:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmp2894l5o7.swift:15:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmp2894l5o7.swift:18:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013368
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text.isEmpty {\n        return nil\n    }\n   \
    \ let messageData = text.data(using:.utf8)!\n    var digestData = Data(count:\
    \ Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp7rlmq0mm.swift:10:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmp7rlmq0mm.swift:10:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmp7rlmq0mm.swift:11:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmp7rlmq0mm.swift:11:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp7rlmq0mm.swift:15:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmp7rlmq0mm.swift:15:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmp7rlmq0mm.swift:18:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013368
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    guard text.count > 0 else {\n        return nil\n\
    \    }\n    let messageData = text.data(using:.utf8)!\n    var digestData = Data(count:\
    \ Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpqfx0ut4r.swift:10:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmpqfx0ut4r.swift:10:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmpqfx0ut4r.swift:11:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmpqfx0ut4r.swift:11:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmpqfx0ut4r.swift:15:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmpqfx0ut4r.swift:15:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmpqfx0ut4r.swift:18:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013368
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    guard !text.isEmpty else {\n        return nil\n \
    \   }\n    let messageData = text.data(using:.utf8)!\n    var digestData = Data(count:\
    \ Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp2894l5o7.swift:10:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmp2894l5o7.swift:10:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmp2894l5o7.swift:11:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmp2894l5o7.swift:11:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp2894l5o7.swift:15:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmp2894l5o7.swift:15:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmp2894l5o7.swift:18:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013368
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text.isEmpty {\n        return nil\n    }\n   \
    \ let messageData = text.data(using:.utf8)!\n    var digestData = Data(count:\
    \ Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp7rlmq0mm.swift:10:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmp7rlmq0mm.swift:10:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmp7rlmq0mm.swift:11:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmp7rlmq0mm.swift:11:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp7rlmq0mm.swift:15:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmp7rlmq0mm.swift:15:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmp7rlmq0mm.swift:18:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013368
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text.isEmpty {\n        return nil\n    }\n   \
    \ let messageData = text.data(using:.utf8)!\n    var digestData = Data(count:\
    \ Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp7rlmq0mm.swift:10:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmp7rlmq0mm.swift:10:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmp7rlmq0mm.swift:11:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmp7rlmq0mm.swift:11:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp7rlmq0mm.swift:15:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmp7rlmq0mm.swift:15:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmp7rlmq0mm.swift:18:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013368
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    guard !text.isEmpty else {\n        return nil\n \
    \   }\n    let messageData = text.data(using:.utf8)!\n    var digestData = Data(count:\
    \ Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp2894l5o7.swift:10:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmp2894l5o7.swift:10:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmp2894l5o7.swift:11:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmp2894l5o7.swift:11:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp2894l5o7.swift:15:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmp2894l5o7.swift:15:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmp2894l5o7.swift:18:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013368
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    guard text.count > 0 else {\n        return nil\n\
    \    }\n    let messageData = text.data(using:.utf8)!\n    var digestData = Data(count:\
    \ Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpqfx0ut4r.swift:10:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmpqfx0ut4r.swift:10:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmpqfx0ut4r.swift:11:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmpqfx0ut4r.swift:11:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmpqfx0ut4r.swift:15:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmpqfx0ut4r.swift:15:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmpqfx0ut4r.swift:18:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013368
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text.isEmpty {\n        return nil\n    }\n   \
    \ let messageData = text.data(using:.utf8)!\n    var digestData = Data(count:\
    \ Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp7rlmq0mm.swift:10:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmp7rlmq0mm.swift:10:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmp7rlmq0mm.swift:11:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmp7rlmq0mm.swift:11:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp7rlmq0mm.swift:15:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmp7rlmq0mm.swift:15:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmp7rlmq0mm.swift:18:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013368
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    guard !text.isEmpty else {\n        return nil\n \
    \   }\n    let messageData = text.data(using:.utf8)!\n    var digestData = Data(count:\
    \ Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp2894l5o7.swift:10:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmp2894l5o7.swift:10:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmp2894l5o7.swift:11:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmp2894l5o7.swift:11:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp2894l5o7.swift:15:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmp2894l5o7.swift:15:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmp2894l5o7.swift:18:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013368
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    guard !text.isEmpty else {\n        return nil\n \
    \   }\n    let messageData = text.data(using:.utf8)!\n    var digestData = Data(count:\
    \ Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp2894l5o7.swift:10:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmp2894l5o7.swift:10:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmp2894l5o7.swift:11:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmp2894l5o7.swift:11:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp2894l5o7.swift:15:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmp2894l5o7.swift:15:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmp2894l5o7.swift:18:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013368
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    guard !text.isEmpty else {\n        return nil\n \
    \   }\n    let messageData = text.data(using:.utf8)!\n    var digestData = Data(count:\
    \ Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp2894l5o7.swift:10:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmp2894l5o7.swift:10:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmp2894l5o7.swift:11:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmp2894l5o7.swift:11:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp2894l5o7.swift:15:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmp2894l5o7.swift:15:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmp2894l5o7.swift:18:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013368
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text.isEmpty {\n        return nil\n    }\n   \
    \ let messageData = text.data(using:.utf8)!\n    var digestData = Data(count:\
    \ Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp7rlmq0mm.swift:10:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmp7rlmq0mm.swift:10:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmp7rlmq0mm.swift:11:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmp7rlmq0mm.swift:11:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp7rlmq0mm.swift:15:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmp7rlmq0mm.swift:15:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmp7rlmq0mm.swift:18:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013368
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text.isEmpty {\n        return nil\n    }\n   \
    \ let messageData = text.data(using:.utf8)!\n    var digestData = Data(count:\
    \ Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp7rlmq0mm.swift:10:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmp7rlmq0mm.swift:10:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmp7rlmq0mm.swift:11:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmp7rlmq0mm.swift:11:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp7rlmq0mm.swift:15:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmp7rlmq0mm.swift:15:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmp7rlmq0mm.swift:18:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013368
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    guard !text.isEmpty else {\n        return nil\n \
    \   }\n    let messageData = text.data(using:.utf8)!\n    var digestData = Data(count:\
    \ Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp2894l5o7.swift:10:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmp2894l5o7.swift:10:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmp2894l5o7.swift:11:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmp2894l5o7.swift:11:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp2894l5o7.swift:15:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmp2894l5o7.swift:15:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmp2894l5o7.swift:18:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013368
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text.isEmpty {\n        return nil\n    }\n   \
    \ let messageData = text.data(using:.utf8)!\n    var digestData = Data(count:\
    \ Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp7rlmq0mm.swift:10:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmp7rlmq0mm.swift:10:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmp7rlmq0mm.swift:11:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmp7rlmq0mm.swift:11:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp7rlmq0mm.swift:15:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmp7rlmq0mm.swift:15:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmp7rlmq0mm.swift:18:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013368
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    guard !text.isEmpty else {\n        return nil\n \
    \   }\n    let messageData = text.data(using:.utf8)!\n    var digestData = Data(count:\
    \ Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp2894l5o7.swift:10:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmp2894l5o7.swift:10:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmp2894l5o7.swift:11:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmp2894l5o7.swift:11:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp2894l5o7.swift:15:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmp2894l5o7.swift:15:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmp2894l5o7.swift:18:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013368
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    guard !text.isEmpty else {\n        return nil\n \
    \   }\n    let messageData = text.data(using:.utf8)!\n    var digestData = Data(count:\
    \ Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp2894l5o7.swift:10:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmp2894l5o7.swift:10:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmp2894l5o7.swift:11:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmp2894l5o7.swift:11:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp2894l5o7.swift:15:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmp2894l5o7.swift:15:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmp2894l5o7.swift:18:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013368
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text.isEmpty {\n        return nil\n    }\n   \
    \ let messageData = text.data(using:.utf8)!\n    var digestData = Data(count:\
    \ Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp7rlmq0mm.swift:10:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmp7rlmq0mm.swift:10:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmp7rlmq0mm.swift:11:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmp7rlmq0mm.swift:11:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp7rlmq0mm.swift:15:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmp7rlmq0mm.swift:15:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmp7rlmq0mm.swift:18:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013368
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text.isEmpty {\n        return nil\n    }\n   \
    \ let messageData = text.data(using:.utf8)!\n    var digestData = Data(count:\
    \ Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp7rlmq0mm.swift:10:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmp7rlmq0mm.swift:10:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmp7rlmq0mm.swift:11:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmp7rlmq0mm.swift:11:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp7rlmq0mm.swift:15:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmp7rlmq0mm.swift:15:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmp7rlmq0mm.swift:18:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013368
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    guard !text.isEmpty else {\n        return nil\n \
    \   }\n    let messageData = text.data(using:.utf8)!\n    var digestData = Data(count:\
    \ Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp2894l5o7.swift:10:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmp2894l5o7.swift:10:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmp2894l5o7.swift:11:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmp2894l5o7.swift:11:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp2894l5o7.swift:15:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmp2894l5o7.swift:15:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmp2894l5o7.swift:18:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013368
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text.isEmpty {\n        return nil\n    }\n   \
    \ let messageData = text.data(using:.utf8)!\n    var digestData = Data(count:\
    \ Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp7rlmq0mm.swift:10:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmp7rlmq0mm.swift:10:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmp7rlmq0mm.swift:11:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmp7rlmq0mm.swift:11:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp7rlmq0mm.swift:15:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmp7rlmq0mm.swift:15:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmp7rlmq0mm.swift:18:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013368
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    guard !text.isEmpty else {\n        return nil\n \
    \   }\n    let messageData = text.data(using:.utf8)!\n    var digestData = Data(count:\
    \ Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp2894l5o7.swift:10:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmp2894l5o7.swift:10:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmp2894l5o7.swift:11:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmp2894l5o7.swift:11:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp2894l5o7.swift:15:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmp2894l5o7.swift:15:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmp2894l5o7.swift:18:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013368
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    guard !text.isEmpty else {\n        return nil\n \
    \   }\n    let messageData = text.data(using:.utf8)!\n    var digestData = Data(count:\
    \ Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp2894l5o7.swift:10:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmp2894l5o7.swift:10:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmp2894l5o7.swift:11:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmp2894l5o7.swift:11:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp2894l5o7.swift:15:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmp2894l5o7.swift:15:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmp2894l5o7.swift:18:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013368
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text.isEmpty {\n        return nil\n    }\n   \
    \ let messageData = text.data(using:.utf8)!\n    var digestData = Data(count:\
    \ Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp7rlmq0mm.swift:10:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmp7rlmq0mm.swift:10:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmp7rlmq0mm.swift:11:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmp7rlmq0mm.swift:11:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp7rlmq0mm.swift:15:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmp7rlmq0mm.swift:15:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmp7rlmq0mm.swift:18:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013368
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text.isEmpty {\n        return nil\n    }\n   \
    \ let messageData = text.data(using:.utf8)!\n    var digestData = Data(count:\
    \ Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp7rlmq0mm.swift:10:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmp7rlmq0mm.swift:10:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmp7rlmq0mm.swift:11:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmp7rlmq0mm.swift:11:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp7rlmq0mm.swift:15:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmp7rlmq0mm.swift:15:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmp7rlmq0mm.swift:18:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013368
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    guard !text.isEmpty else {\n        return nil\n \
    \   }\n    let messageData = text.data(using:.utf8)!\n    var digestData = Data(count:\
    \ Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp2894l5o7.swift:10:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmp2894l5o7.swift:10:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmp2894l5o7.swift:11:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmp2894l5o7.swift:11:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp2894l5o7.swift:15:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmp2894l5o7.swift:15:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmp2894l5o7.swift:18:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013368
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    guard !text.isEmpty else {\n        return nil\n \
    \   }\n    let messageData = text.data(using:.utf8)!\n    var digestData = Data(count:\
    \ Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp2894l5o7.swift:10:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmp2894l5o7.swift:10:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmp2894l5o7.swift:11:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmp2894l5o7.swift:11:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp2894l5o7.swift:15:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmp2894l5o7.swift:15:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmp2894l5o7.swift:18:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013368
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    guard !text.isEmpty else {\n        return nil\n \
    \   }\n    let messageData = text.data(using:.utf8)!\n    var digestData = Data(count:\
    \ Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp2894l5o7.swift:10:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmp2894l5o7.swift:10:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmp2894l5o7.swift:11:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmp2894l5o7.swift:11:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp2894l5o7.swift:15:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmp2894l5o7.swift:15:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmp2894l5o7.swift:18:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013368
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    guard !text.isEmpty else {\n        return nil\n \
    \   }\n    let messageData = text.data(using:.utf8)!\n    var digestData = Data(count:\
    \ Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp2894l5o7.swift:10:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmp2894l5o7.swift:10:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmp2894l5o7.swift:11:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmp2894l5o7.swift:11:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp2894l5o7.swift:15:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmp2894l5o7.swift:15:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmp2894l5o7.swift:18:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013368
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text.isEmpty {\n        return nil\n    }\n   \
    \ let messageData = text.data(using:.utf8)!\n    var digestData = Data(count:\
    \ Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp7rlmq0mm.swift:10:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmp7rlmq0mm.swift:10:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmp7rlmq0mm.swift:11:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmp7rlmq0mm.swift:11:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp7rlmq0mm.swift:15:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmp7rlmq0mm.swift:15:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmp7rlmq0mm.swift:18:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013368
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    guard !text.isEmpty else {\n        return nil\n \
    \   }\n    let messageData = text.data(using:.utf8)!\n    var digestData = Data(count:\
    \ Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp2894l5o7.swift:10:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmp2894l5o7.swift:10:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmp2894l5o7.swift:11:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmp2894l5o7.swift:11:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp2894l5o7.swift:15:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmp2894l5o7.swift:15:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmp2894l5o7.swift:18:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013368
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    guard !text.isEmpty else {\n        return nil\n \
    \   }\n    let messageData = text.data(using:.utf8)!\n    var digestData = Data(count:\
    \ Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp2894l5o7.swift:10:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmp2894l5o7.swift:10:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmp2894l5o7.swift:11:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmp2894l5o7.swift:11:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp2894l5o7.swift:15:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmp2894l5o7.swift:15:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmp2894l5o7.swift:18:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013368
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    guard !text.isEmpty else {\n        return nil\n \
    \   }\n    let messageData = text.data(using:.utf8)!\n    var digestData = Data(count:\
    \ Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp2894l5o7.swift:10:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmp2894l5o7.swift:10:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmp2894l5o7.swift:11:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmp2894l5o7.swift:11:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp2894l5o7.swift:15:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmp2894l5o7.swift:15:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmp2894l5o7.swift:18:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013368
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    guard !text.isEmpty else {\n        return nil\n \
    \   }\n    let messageData = text.data(using:.utf8)!\n    var digestData = Data(count:\
    \ Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp2894l5o7.swift:10:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmp2894l5o7.swift:10:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmp2894l5o7.swift:11:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmp2894l5o7.swift:11:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp2894l5o7.swift:15:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmp2894l5o7.swift:15:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmp2894l5o7.swift:18:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013368
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    guard text.count > 0 else {\n        return nil\n\
    \    }\n    let messageData = text.data(using:.utf8)!\n    var digestData = Data(count:\
    \ Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpqfx0ut4r.swift:10:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmpqfx0ut4r.swift:10:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmpqfx0ut4r.swift:11:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmpqfx0ut4r.swift:11:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmpqfx0ut4r.swift:15:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmpqfx0ut4r.swift:15:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmpqfx0ut4r.swift:18:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013368
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text.isEmpty {\n        return nil\n    }\n   \
    \ let messageData = text.data(using:.utf8)!\n    var digestData = Data(count:\
    \ Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp7rlmq0mm.swift:10:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmp7rlmq0mm.swift:10:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmp7rlmq0mm.swift:11:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmp7rlmq0mm.swift:11:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp7rlmq0mm.swift:15:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmp7rlmq0mm.swift:15:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmp7rlmq0mm.swift:18:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013368
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text.isEmpty {\n        return nil\n    }\n   \
    \ let messageData = text.data(using:.utf8)!\n    var digestData = Data(count:\
    \ Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp7rlmq0mm.swift:10:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmp7rlmq0mm.swift:10:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmp7rlmq0mm.swift:11:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmp7rlmq0mm.swift:11:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp7rlmq0mm.swift:15:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmp7rlmq0mm.swift:15:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmp7rlmq0mm.swift:18:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013368
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    guard !text.isEmpty else {\n        return nil\n \
    \   }\n    let messageData = text.data(using:.utf8)!\n    var digestData = Data(count:\
    \ Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp2894l5o7.swift:10:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmp2894l5o7.swift:10:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmp2894l5o7.swift:11:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmp2894l5o7.swift:11:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp2894l5o7.swift:15:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmp2894l5o7.swift:15:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmp2894l5o7.swift:18:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013368
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text.isEmpty {\n        return nil\n    }\n   \
    \ let messageData = text.data(using:.utf8)!\n    var digestData = Data(count:\
    \ Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp7rlmq0mm.swift:10:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmp7rlmq0mm.swift:10:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmp7rlmq0mm.swift:11:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmp7rlmq0mm.swift:11:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp7rlmq0mm.swift:15:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmp7rlmq0mm.swift:15:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmp7rlmq0mm.swift:18:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013368
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    guard text.count > 0 else {\n        return nil\n\
    \    }\n    let messageData = text.data(using:.utf8)!\n    var digestData = Data(count:\
    \ Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpqfx0ut4r.swift:10:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmpqfx0ut4r.swift:10:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmpqfx0ut4r.swift:11:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmpqfx0ut4r.swift:11:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmpqfx0ut4r.swift:15:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmpqfx0ut4r.swift:15:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmpqfx0ut4r.swift:18:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013368
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    guard !text.isEmpty else {\n        return nil\n \
    \   }\n    let messageData = text.data(using:.utf8)!\n    var digestData = Data(count:\
    \ Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp2894l5o7.swift:10:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmp2894l5o7.swift:10:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmp2894l5o7.swift:11:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmp2894l5o7.swift:11:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp2894l5o7.swift:15:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmp2894l5o7.swift:15:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmp2894l5o7.swift:18:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013368
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    guard !text.isEmpty else {\n        return nil\n \
    \   }\n    let messageData = text.data(using:.utf8)!\n    var digestData = Data(count:\
    \ Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp2894l5o7.swift:10:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmp2894l5o7.swift:10:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmp2894l5o7.swift:11:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmp2894l5o7.swift:11:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp2894l5o7.swift:15:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmp2894l5o7.swift:15:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmp2894l5o7.swift:18:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013368
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text.isEmpty {\n        return nil\n    }\n   \
    \ let messageData = text.data(using:.utf8)!\n    var digestData = Data(count:\
    \ Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp7rlmq0mm.swift:10:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmp7rlmq0mm.swift:10:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmp7rlmq0mm.swift:11:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmp7rlmq0mm.swift:11:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp7rlmq0mm.swift:15:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmp7rlmq0mm.swift:15:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmp7rlmq0mm.swift:18:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013368
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    guard text.count > 0 else {\n        return nil\n\
    \    }\n    let messageData = text.data(using:.utf8)!\n    var digestData = Data(count:\
    \ Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpqfx0ut4r.swift:10:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmpqfx0ut4r.swift:10:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmpqfx0ut4r.swift:11:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmpqfx0ut4r.swift:11:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmpqfx0ut4r.swift:15:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmpqfx0ut4r.swift:15:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmpqfx0ut4r.swift:18:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013368
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    guard !text.isEmpty else {\n        return nil\n \
    \   }\n    let messageData = text.data(using:.utf8)!\n    var digestData = Data(count:\
    \ Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp2894l5o7.swift:10:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmp2894l5o7.swift:10:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmp2894l5o7.swift:11:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmp2894l5o7.swift:11:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp2894l5o7.swift:15:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmp2894l5o7.swift:15:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmp2894l5o7.swift:18:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013368
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text.isEmpty {\n        return nil\n    }\n   \
    \ let messageData = text.data(using:.utf8)!\n    var digestData = Data(count:\
    \ Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp7rlmq0mm.swift:10:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmp7rlmq0mm.swift:10:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmp7rlmq0mm.swift:11:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmp7rlmq0mm.swift:11:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp7rlmq0mm.swift:15:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmp7rlmq0mm.swift:15:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmp7rlmq0mm.swift:18:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013368
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    guard !text.isEmpty else {\n        return nil\n \
    \   }\n    let messageData = text.data(using:.utf8)!\n    var digestData = Data(count:\
    \ Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp2894l5o7.swift:10:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmp2894l5o7.swift:10:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmp2894l5o7.swift:11:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmp2894l5o7.swift:11:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp2894l5o7.swift:15:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmp2894l5o7.swift:15:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmp2894l5o7.swift:18:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013368
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text.isEmpty {\n        return nil\n    }\n   \
    \ let messageData = text.data(using:.utf8)!\n    var digestData = Data(count:\
    \ Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp7rlmq0mm.swift:10:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmp7rlmq0mm.swift:10:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmp7rlmq0mm.swift:11:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmp7rlmq0mm.swift:11:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp7rlmq0mm.swift:15:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmp7rlmq0mm.swift:15:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmp7rlmq0mm.swift:18:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013368
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text.isEmpty {\n        return nil\n    }\n   \
    \ let messageData = text.data(using:.utf8)!\n    var digestData = Data(count:\
    \ Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp7rlmq0mm.swift:10:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmp7rlmq0mm.swift:10:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmp7rlmq0mm.swift:11:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmp7rlmq0mm.swift:11:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp7rlmq0mm.swift:15:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmp7rlmq0mm.swift:15:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmp7rlmq0mm.swift:18:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013368
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text.isEmpty {\n        return nil\n    }\n   \
    \ var digest = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n    if\
    \ let data = text.data(using: String.Encoding.utf8) {\n        CC_MD5((data as\
    \ NSData).bytes, CC_LONG(data.count), &digest)\n    }\n    var digestHex = \"\"\
    \n    for index in 0..<Int(CC_MD5_DIGEST_LENGTH) {\n        digestHex += String(format:\
    \ \"%02x\", digest[index])\n    }\n    return digestHex\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpoam735td.swift:10:51: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digest = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                                                  ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmpoam735td.swift:11:24:\
    \ error: value of type 'String' has no member 'data'\n    if let data = text.data(using:\
    \ String.Encoding.utf8) {\n                  ~~~~ ^~~~\n/tmp/tmpoam735td.swift:11:43:\
    \ error: type 'String' has no member 'Encoding'\n    if let data = text.data(using:\
    \ String.Encoding.utf8) {\n                                   ~~~~~~ ^~~~~~~~\n\
    /tmp/tmpoam735td.swift:12:9: error: cannot find 'CC_MD5' in scope\n        CC_MD5((data\
    \ as NSData).bytes, CC_LONG(data.count), &digest)\n        ^~~~~~\n/tmp/tmpoam735td.swift:12:40:\
    \ error: cannot find 'CC_LONG' in scope\n        CC_MD5((data as NSData).bytes,\
    \ CC_LONG(data.count), &digest)\n                                       ^~~~~~~\n\
    /tmp/tmpoam735td.swift:12:25: error: cannot find type 'NSData' in scope\n    \
    \    CC_MD5((data as NSData).bytes, CC_LONG(data.count), &digest)\n          \
    \              ^~~~~~\n/tmp/tmpoam735td.swift:15:26: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    for index in 0..<Int(CC_MD5_DIGEST_LENGTH) {\n               \
    \          ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013368
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    guard text.count > 0 else {\n        return nil\n\
    \    }\n    let messageData = text.data(using:.utf8)!\n    var digestData = Data(count:\
    \ Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpqfx0ut4r.swift:10:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmpqfx0ut4r.swift:10:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmpqfx0ut4r.swift:11:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmpqfx0ut4r.swift:11:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmpqfx0ut4r.swift:15:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmpqfx0ut4r.swift:15:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmpqfx0ut4r.swift:18:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013368
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text.isEmpty {\n        return nil\n    }\n   \
    \ let messageData = text.data(using:.utf8)!\n    var digestData = Data(count:\
    \ Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp7rlmq0mm.swift:10:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmp7rlmq0mm.swift:10:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmp7rlmq0mm.swift:11:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmp7rlmq0mm.swift:11:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp7rlmq0mm.swift:15:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmp7rlmq0mm.swift:15:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmp7rlmq0mm.swift:18:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013368
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    guard text.count > 0 else {\n        return nil\n\
    \    }\n    let messageData = text.data(using:.utf8)!\n    var digestData = Data(count:\
    \ Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpqfx0ut4r.swift:10:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmpqfx0ut4r.swift:10:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmpqfx0ut4r.swift:11:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmpqfx0ut4r.swift:11:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmpqfx0ut4r.swift:15:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmpqfx0ut4r.swift:15:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmpqfx0ut4r.swift:18:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013368
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text.isEmpty {\n        return nil\n    }\n   \
    \ let messageData = text.data(using:.utf8)!\n    var digestData = Data(count:\
    \ Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp7rlmq0mm.swift:10:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmp7rlmq0mm.swift:10:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmp7rlmq0mm.swift:11:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmp7rlmq0mm.swift:11:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp7rlmq0mm.swift:15:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmp7rlmq0mm.swift:15:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmp7rlmq0mm.swift:18:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013368
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text.isEmpty {\n        return nil\n    }\n   \
    \ let messageData = text.data(using:.utf8)!\n    var digestData = Data(count:\
    \ Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp7rlmq0mm.swift:10:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmp7rlmq0mm.swift:10:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmp7rlmq0mm.swift:11:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmp7rlmq0mm.swift:11:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp7rlmq0mm.swift:15:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmp7rlmq0mm.swift:15:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmp7rlmq0mm.swift:18:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013368
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text.isEmpty {\n        return nil\n    }\n   \
    \ let messageData = text.data(using:.utf8)!\n    var digestData = Data(count:\
    \ Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp7rlmq0mm.swift:10:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmp7rlmq0mm.swift:10:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmp7rlmq0mm.swift:11:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmp7rlmq0mm.swift:11:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp7rlmq0mm.swift:15:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmp7rlmq0mm.swift:15:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmp7rlmq0mm.swift:18:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013368
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text.isEmpty {\n        return nil\n    }\n   \
    \ let messageData = text.data(using:.utf8)!\n    var digestData = Data(count:\
    \ Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp7rlmq0mm.swift:10:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmp7rlmq0mm.swift:10:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmp7rlmq0mm.swift:11:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmp7rlmq0mm.swift:11:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp7rlmq0mm.swift:15:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmp7rlmq0mm.swift:15:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmp7rlmq0mm.swift:18:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013368
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    guard !text.isEmpty else {\n        return nil\n \
    \   }\n    let messageData = text.data(using:.utf8)!\n    var digestData = Data(count:\
    \ Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp2894l5o7.swift:10:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmp2894l5o7.swift:10:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmp2894l5o7.swift:11:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmp2894l5o7.swift:11:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp2894l5o7.swift:15:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmp2894l5o7.swift:15:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmp2894l5o7.swift:18:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013368
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text.isEmpty {\n        return nil\n    }\n   \
    \ let messageData = text.data(using:.utf8)!\n    var digestData = Data(count:\
    \ Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp7rlmq0mm.swift:10:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmp7rlmq0mm.swift:10:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmp7rlmq0mm.swift:11:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmp7rlmq0mm.swift:11:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp7rlmq0mm.swift:15:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmp7rlmq0mm.swift:15:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmp7rlmq0mm.swift:18:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013368
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    guard !text.isEmpty else {\n        return nil\n \
    \   }\n    let messageData = text.data(using:.utf8)!\n    var digestData = Data(count:\
    \ Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp2894l5o7.swift:10:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmp2894l5o7.swift:10:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmp2894l5o7.swift:11:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmp2894l5o7.swift:11:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp2894l5o7.swift:15:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmp2894l5o7.swift:15:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmp2894l5o7.swift:18:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013368
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    guard !text.isEmpty else {\n        return nil\n \
    \   }\n    let messageData = text.data(using:.utf8)!\n    var digestData = Data(count:\
    \ Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp2894l5o7.swift:10:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmp2894l5o7.swift:10:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmp2894l5o7.swift:11:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmp2894l5o7.swift:11:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp2894l5o7.swift:15:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmp2894l5o7.swift:15:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmp2894l5o7.swift:18:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013368
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text.isEmpty {\n        return nil\n    }\n   \
    \ let messageData = text.data(using:.utf8)!\n    var digestData = Data(count:\
    \ Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp7rlmq0mm.swift:10:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmp7rlmq0mm.swift:10:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmp7rlmq0mm.swift:11:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmp7rlmq0mm.swift:11:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp7rlmq0mm.swift:15:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmp7rlmq0mm.swift:15:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmp7rlmq0mm.swift:18:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013368
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text.isEmpty {\n        return nil\n    }\n   \
    \ let messageData = text.data(using:.utf8)!\n    var digestData = Data(count:\
    \ Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp7rlmq0mm.swift:10:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmp7rlmq0mm.swift:10:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmp7rlmq0mm.swift:11:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmp7rlmq0mm.swift:11:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp7rlmq0mm.swift:15:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmp7rlmq0mm.swift:15:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmp7rlmq0mm.swift:18:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013368
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    guard text.count > 0 else {\n        return nil\n\
    \    }\n    let messageData = text.data(using:.utf8)!\n    var digestData = Data(count:\
    \ Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpqfx0ut4r.swift:10:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmpqfx0ut4r.swift:10:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmpqfx0ut4r.swift:11:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmpqfx0ut4r.swift:11:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmpqfx0ut4r.swift:15:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmpqfx0ut4r.swift:15:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmpqfx0ut4r.swift:18:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013368
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text.isEmpty {\n        return nil\n    }\n   \
    \ let messageData = text.data(using:.utf8)!\n    var digestData = Data(count:\
    \ Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp7rlmq0mm.swift:10:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmp7rlmq0mm.swift:10:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmp7rlmq0mm.swift:11:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmp7rlmq0mm.swift:11:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp7rlmq0mm.swift:15:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmp7rlmq0mm.swift:15:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmp7rlmq0mm.swift:18:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013368
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    guard !text.isEmpty else {\n        return nil\n \
    \   }\n    let messageData = text.data(using:.utf8)!\n    var digestData = Data(count:\
    \ Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp2894l5o7.swift:10:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmp2894l5o7.swift:10:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmp2894l5o7.swift:11:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmp2894l5o7.swift:11:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp2894l5o7.swift:15:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmp2894l5o7.swift:15:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmp2894l5o7.swift:18:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013368
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text.isEmpty {\n        return nil\n    }\n   \
    \ let messageData = text.data(using:.utf8)!\n    var digestData = Data(count:\
    \ Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp7rlmq0mm.swift:10:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmp7rlmq0mm.swift:10:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmp7rlmq0mm.swift:11:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmp7rlmq0mm.swift:11:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp7rlmq0mm.swift:15:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmp7rlmq0mm.swift:15:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmp7rlmq0mm.swift:18:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013368
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    guard !text.isEmpty else {\n        return nil\n \
    \   }\n    let messageData = text.data(using:.utf8)!\n    var digestData = Data(count:\
    \ Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp2894l5o7.swift:10:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmp2894l5o7.swift:10:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmp2894l5o7.swift:11:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmp2894l5o7.swift:11:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp2894l5o7.swift:15:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmp2894l5o7.swift:15:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmp2894l5o7.swift:18:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013368
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    guard !text.isEmpty else {\n        return nil\n \
    \   }\n    let messageData = text.data(using:.utf8)!\n    var digestData = Data(count:\
    \ Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp2894l5o7.swift:10:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmp2894l5o7.swift:10:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmp2894l5o7.swift:11:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmp2894l5o7.swift:11:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp2894l5o7.swift:15:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmp2894l5o7.swift:15:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmp2894l5o7.swift:18:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013368
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text.isEmpty {\n        return nil\n    }\n   \
    \ let messageData = text.data(using:.utf8)!\n    var digestData = Data(count:\
    \ Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp7rlmq0mm.swift:10:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmp7rlmq0mm.swift:10:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmp7rlmq0mm.swift:11:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmp7rlmq0mm.swift:11:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp7rlmq0mm.swift:15:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmp7rlmq0mm.swift:15:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmp7rlmq0mm.swift:18:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013368
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    guard !text.isEmpty else {\n        return nil\n \
    \   }\n    let messageData = text.data(using:.utf8)!\n    var digestData = Data(count:\
    \ Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp2894l5o7.swift:10:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmp2894l5o7.swift:10:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmp2894l5o7.swift:11:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmp2894l5o7.swift:11:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp2894l5o7.swift:15:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmp2894l5o7.swift:15:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmp2894l5o7.swift:18:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013368
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    guard !text.isEmpty else {\n        return nil\n \
    \   }\n    let messageData = text.data(using:.utf8)!\n    var digestData = Data(count:\
    \ Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp2894l5o7.swift:10:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmp2894l5o7.swift:10:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmp2894l5o7.swift:11:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmp2894l5o7.swift:11:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp2894l5o7.swift:15:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmp2894l5o7.swift:15:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmp2894l5o7.swift:18:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013368
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    guard !text.isEmpty else {\n        return nil\n \
    \   }\n    let messageData = text.data(using:.utf8)!\n    var digestData = Data(count:\
    \ Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp2894l5o7.swift:10:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmp2894l5o7.swift:10:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmp2894l5o7.swift:11:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmp2894l5o7.swift:11:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp2894l5o7.swift:15:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmp2894l5o7.swift:15:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmp2894l5o7.swift:18:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013368
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    guard !text.isEmpty else {\n        return nil\n \
    \   }\n    let messageData = text.data(using:.utf8)!\n    var digestData = Data(count:\
    \ Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp2894l5o7.swift:10:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmp2894l5o7.swift:10:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmp2894l5o7.swift:11:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmp2894l5o7.swift:11:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp2894l5o7.swift:15:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmp2894l5o7.swift:15:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmp2894l5o7.swift:18:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013368
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text.isEmpty {\n        return nil\n    }\n   \
    \ let messageData = text.data(using:.utf8)!\n    var digestData = Data(count:\
    \ Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp7rlmq0mm.swift:10:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmp7rlmq0mm.swift:10:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmp7rlmq0mm.swift:11:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmp7rlmq0mm.swift:11:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp7rlmq0mm.swift:15:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmp7rlmq0mm.swift:15:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmp7rlmq0mm.swift:18:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013368
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    guard !text.isEmpty else {\n        return nil\n \
    \   }\n    let messageData = text.data(using:.utf8)!\n    var digestData = Data(count:\
    \ Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp2894l5o7.swift:10:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmp2894l5o7.swift:10:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmp2894l5o7.swift:11:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmp2894l5o7.swift:11:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp2894l5o7.swift:15:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmp2894l5o7.swift:15:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmp2894l5o7.swift:18:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013368
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    guard !text.isEmpty else {\n        return nil\n \
    \   }\n    let messageData = text.data(using:.utf8)!\n    var digestData = Data(count:\
    \ Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp2894l5o7.swift:10:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmp2894l5o7.swift:10:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmp2894l5o7.swift:11:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmp2894l5o7.swift:11:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp2894l5o7.swift:15:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmp2894l5o7.swift:15:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmp2894l5o7.swift:18:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013368
