name: HumanEval_75_is_multiply_prime
language: swift
prompt: "\n/// Write a function that returns true if the given number is the multiplication\
  \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
  \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2 *\
  \ 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
  \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
  \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
  \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
  \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
  \ 1001) == true)"
completions: ["    var is_multiply_prime = false\n    var a = a\n    var prime_numbers\
    \ = [Int]()\n    var i = 2\n    while i < a {\n        if is_prime(a: i) {\n \
    \           prime_numbers.append(i)\n        }\n        i += 1\n    }\n    for\
    \ prime_number in prime_numbers {\n        if a % prime_number == 0 {\n      \
    \      a /= prime_number\n        }\n    }\n    if a == 1 {\n        is_multiply_prime\
    \ = true\n    }\n    return is_multiply_prime", "    var a = a\n    var result\
    \ = true\n    var primes = [Int]()\n    while a > 1 {\n        for i in 2...a\
    \ {\n            if a % i == 0 {\n                primes.append(i)\n         \
    \       a /= i\n                break\n            }\n        }\n    }\n    for\
    \ i in primes {\n        if !is_prime(a: i) {\n            result = false\n  \
    \          break\n        }\n    }\n    return result", "    var is_prime = true\n\
    \    var prime_numbers = [Int]()\n    for i in 2...a {\n        for j in 2..<i\
    \ {\n            if i % j == 0 {\n                is_prime = false\n         \
    \       break\n            }\n        }\n        if is_prime {\n            prime_numbers.append(i)\n\
    \        }\n        is_prime = true\n    }\n    var count = 0\n    for i in prime_numbers\
    \ {\n        if a % i == 0 {\n            count += 1\n        }\n    }\n    if\
    \ count == 3 {\n        return true\n    }\n    return false", "    var a = a\n\
    \    var primes = [Int]()\n    for i in 2...a {\n        if is_prime(a: i) {\n\
    \            primes.append(i)\n        }\n    }\n    var result = false\n    for\
    \ i in 0..<primes.count {\n        for j in i..<primes.count {\n            for\
    \ k in j..<primes.count {\n                if primes[i] * primes[j] * primes[k]\
    \ == a {\n                    result = true\n                }\n            }\n\
    \        }\n    }\n    return result", "    var result = false\n    var primes\
    \ = [Int]()\n    for i in 2...a {\n        if is_prime(a: i) {\n            primes.append(i)\n\
    \        }\n    }\n    for i in 0..<primes.count {\n        for j in i..<primes.count\
    \ {\n            for k in j..<primes.count {\n                if primes[i] * primes[j]\
    \ * primes[k] == a {\n                    result = true\n                }\n \
    \           }\n        }\n    }\n    return result", "    var result = false\n\
    \    var primeNumbers = [Int]()\n    for i in 2...a {\n        if is_prime(a:\
    \ i) {\n            primeNumbers.append(i)\n        }\n    }\n    for i in 0..<primeNumbers.count\
    \ {\n        for j in i+1..<primeNumbers.count {\n            for k in j+1..<primeNumbers.count\
    \ {\n                if primeNumbers[i] * primeNumbers[j] * primeNumbers[k] ==\
    \ a {\n                    result = true\n                }\n            }\n \
    \       }\n    }\n    return result", "    var prime_numbers = [Int]()\n    for\
    \ i in 2...a {\n        if is_prime(a: i) {\n            prime_numbers.append(i)\n\
    \        }\n    }\n    var result = false\n    for i in 0..<prime_numbers.count\
    \ {\n        for j in i+1..<prime_numbers.count {\n            for k in j+1..<prime_numbers.count\
    \ {\n                if prime_numbers[i] * prime_numbers[j] * prime_numbers[k]\
    \ == a {\n                    result = true\n                }\n            }\n\
    \        }\n    }\n    return result", "    var prime_numbers = [2, 3, 5, 7, 11,\
    \ 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89,\
    \ 97]\n    var prime_factors = [Int]()\n    var i = 0\n    while a > 1 {\n   \
    \     if a % prime_numbers[i] == 0 {\n            prime_factors.append(prime_numbers[i])\n\
    \            a /= prime_numbers[i]\n        } else {\n            i += 1\n   \
    \     }\n    }\n    return prime_factors.count == 3", "    var result = false\n\
    \    var primeNumbers = [Int]()\n    for i in 2...a {\n        if is_prime(a:\
    \ i) {\n            primeNumbers.append(i)\n        }\n    }\n    for i in 0..<primeNumbers.count\
    \ {\n        for j in i+1..<primeNumbers.count {\n            for k in j+1..<primeNumbers.count\
    \ {\n                if primeNumbers[i] * primeNumbers[j] * primeNumbers[k] ==\
    \ a {\n                    result = true\n                }\n            }\n \
    \       }\n    }\n    return result", "    var isPrime = true\n    var primeNumbers\
    \ = [Int]()\n    for i in 2...a {\n        for j in 2..<i {\n            if i\
    \ % j == 0 {\n                isPrime = false\n            }\n        }\n    \
    \    if isPrime {\n            primeNumbers.append(i)\n        }\n        isPrime\
    \ = true\n    }\n    var result = 1\n    for i in primeNumbers {\n        result\
    \ *= i\n        if result == a {\n            return true\n        }\n    }\n\
    \    return false", "    var result = false\n    var primeNumbers = [Int]()\n\
    \    for i in 2...a {\n        if is_prime(a: i) {\n            primeNumbers.append(i)\n\
    \        }\n    }\n    for i in 0..<primeNumbers.count {\n        for j in i..<primeNumbers.count\
    \ {\n            for k in j..<primeNumbers.count {\n                if primeNumbers[i]\
    \ * primeNumbers[j] * primeNumbers[k] == a {\n                    result = true\n\
    \                }\n            }\n        }\n    }\n    return result", "   \
    \ var prime_numbers = [Int]()\n    for i in 2...a {\n        if is_prime(a: i)\
    \ {\n            prime_numbers.append(i)\n        }\n    }\n    var count = 0\n\
    \    for i in prime_numbers {\n        if a % i == 0 {\n            count += 1\n\
    \        }\n    }\n    if count == 3 {\n        return true\n    }\n    return\
    \ false", "    var isPrime = true\n    var i = 2\n    while i < a {\n        if\
    \ a % i == 0 {\n            isPrime = false\n        }\n        i += 1\n    }\n\
    \    return isPrime", "    var isPrime = true\n    var i = 2\n    while i < a\
    \ {\n        if a % i == 0 {\n            isPrime = false\n        }\n       \
    \ i += 1\n    }\n    return isPrime", "    var a = a\n    var result = true\n\
    \    var i = 2\n    while a > 1 {\n        if a % i == 0 {\n            a /= i\n\
    \            if !is_prime(a: i) {\n                result = false\n          \
    \      break\n            }\n        } else {\n            i += 1\n        }\n\
    \    }\n    return result", "    var isPrime = true\n    var a = a\n    for i\
    \ in 2...a {\n        if a % i == 0 {\n            a /= i\n            if is_prime(a:\
    \ i) == false {\n                isPrime = false\n            }\n        }\n \
    \   }\n    return isPrime", "    var primes = [Int]()\n    for i in 2...a {\n\
    \        if is_prime(a: i) {\n            primes.append(i)\n        }\n    }\n\
    \    for i in 0..<primes.count {\n        for j in i..<primes.count {\n      \
    \      for k in j..<primes.count {\n                if primes[i] * primes[j] *\
    \ primes[k] == a {\n                    return true\n                }\n     \
    \       }\n        }\n    }\n    return false", "    var isPrime = true\n    var\
    \ primeNumbers = [Int]()\n    for i in 2...a {\n        for j in 2..<i {\n   \
    \         if i % j == 0 {\n                isPrime = false\n            }\n  \
    \      }\n        if isPrime {\n            primeNumbers.append(i)\n        }\n\
    \        isPrime = true\n    }\n    var isMultiply = false\n    for i in 0..<primeNumbers.count\
    \ {\n        for j in i..<primeNumbers.count {\n            for k in j..<primeNumbers.count\
    \ {\n                if primeNumbers[i] * primeNumbers[j] * primeNumbers[k] ==\
    \ a {\n                    isMultiply = true\n                }\n            }\n\
    \        }\n    }\n    return isMultiply", "    var isPrime = true\n    var isMultiply\
    \ = false\n    var primeNumbers = [Int]()\n    for i in 2...a {\n        for j\
    \ in 2...i {\n            if i % j == 0 {\n                isPrime = false\n \
    \           }\n        }\n        if isPrime {\n            primeNumbers.append(i)\n\
    \        }\n        isPrime = true\n    }\n    for i in 0..<primeNumbers.count\
    \ {\n        for j in i..<primeNumbers.count {\n            for k in j..<primeNumbers.count\
    \ {\n                if primeNumbers[i] * primeNumbers[j] * primeNumbers[k] ==\
    \ a {\n                    isMultiply = true\n                }\n            }\n\
    \        }\n    }\n    return isMultiply", "    var isPrime = true\n    var primeNumbers\
    \ = [Int]()\n    var number = a\n    for i in 2...number {\n        isPrime =\
    \ true\n        for j in 2..<i {\n            if i % j == 0 {\n              \
    \  isPrime = false\n            }\n        }\n        if isPrime {\n         \
    \   primeNumbers.append(i)\n            if number % i == 0 {\n               \
    \ number /= i\n            }\n        }\n    }\n    return primeNumbers.count\
    \ == 3"]
stop_tokens:
- "\n}"
