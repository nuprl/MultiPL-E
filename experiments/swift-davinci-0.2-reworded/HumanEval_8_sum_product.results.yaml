language: swift
name: HumanEval_8_sum_product
results:
- exit_code: 0
  program: "\n/// For a given array of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in an array.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(numbers: []\
    \ as [Int])\n/// (0, 1)\n/// >>> sum_product(numbers: [1, 2, 3, 4])\n/// (10,\
    \ 24)\nfunc sum_product(numbers: [Int]) -> (Int, Int) {\n    var sum = 0\n   \
    \ var product = 1\n    for number in numbers {\n        sum += number\n      \
    \  product *= number\n    }\n    return (sum, product)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sum_product(numbers: [] as [Int]) == (0, 1))\nassert(sum_product(numbers:\
    \ [1, 1, 1]) == (3, 1))\nassert(sum_product(numbers: [100, 0]) == (100, 0))\n\
    assert(sum_product(numbers: [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers:\
    \ [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013823
- exit_code: 0
  program: "\n/// For a given array of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in an array.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(numbers: []\
    \ as [Int])\n/// (0, 1)\n/// >>> sum_product(numbers: [1, 2, 3, 4])\n/// (10,\
    \ 24)\nfunc sum_product(numbers: [Int]) -> (Int, Int) {\n    var sum = 0\n   \
    \ var product = 1\n    for number in numbers {\n        sum += number\n      \
    \  product *= number\n    }\n    return (sum, product)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sum_product(numbers: [] as [Int]) == (0, 1))\nassert(sum_product(numbers:\
    \ [1, 1, 1]) == (3, 1))\nassert(sum_product(numbers: [100, 0]) == (100, 0))\n\
    assert(sum_product(numbers: [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers:\
    \ [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013823
- exit_code: 0
  program: "\n/// For a given array of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in an array.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(numbers: []\
    \ as [Int])\n/// (0, 1)\n/// >>> sum_product(numbers: [1, 2, 3, 4])\n/// (10,\
    \ 24)\nfunc sum_product(numbers: [Int]) -> (Int, Int) {\n    var sum = 0\n   \
    \ var product = 1\n    for number in numbers {\n        sum += number\n      \
    \  product *= number\n    }\n    return (sum, product)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sum_product(numbers: [] as [Int]) == (0, 1))\nassert(sum_product(numbers:\
    \ [1, 1, 1]) == (3, 1))\nassert(sum_product(numbers: [100, 0]) == (100, 0))\n\
    assert(sum_product(numbers: [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers:\
    \ [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013823
- exit_code: 0
  program: "\n/// For a given array of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in an array.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(numbers: []\
    \ as [Int])\n/// (0, 1)\n/// >>> sum_product(numbers: [1, 2, 3, 4])\n/// (10,\
    \ 24)\nfunc sum_product(numbers: [Int]) -> (Int, Int) {\n    var sum = 0\n   \
    \ var product = 1\n    for number in numbers {\n        sum += number\n      \
    \  product *= number\n    }\n    return (sum, product)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sum_product(numbers: [] as [Int]) == (0, 1))\nassert(sum_product(numbers:\
    \ [1, 1, 1]) == (3, 1))\nassert(sum_product(numbers: [100, 0]) == (100, 0))\n\
    assert(sum_product(numbers: [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers:\
    \ [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013823
- exit_code: 0
  program: "\n/// For a given array of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in an array.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(numbers: []\
    \ as [Int])\n/// (0, 1)\n/// >>> sum_product(numbers: [1, 2, 3, 4])\n/// (10,\
    \ 24)\nfunc sum_product(numbers: [Int]) -> (Int, Int) {\n    var sum = 0\n   \
    \ var product = 1\n    for number in numbers {\n        sum += number\n      \
    \  product *= number\n    }\n    return (sum, product)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sum_product(numbers: [] as [Int]) == (0, 1))\nassert(sum_product(numbers:\
    \ [1, 1, 1]) == (3, 1))\nassert(sum_product(numbers: [100, 0]) == (100, 0))\n\
    assert(sum_product(numbers: [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers:\
    \ [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013823
- exit_code: 0
  program: "\n/// For a given array of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in an array.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(numbers: []\
    \ as [Int])\n/// (0, 1)\n/// >>> sum_product(numbers: [1, 2, 3, 4])\n/// (10,\
    \ 24)\nfunc sum_product(numbers: [Int]) -> (Int, Int) {\n    return (numbers.reduce(0,\
    \ +), numbers.reduce(1, *))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013823
- exit_code: 0
  program: "\n/// For a given array of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in an array.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(numbers: []\
    \ as [Int])\n/// (0, 1)\n/// >>> sum_product(numbers: [1, 2, 3, 4])\n/// (10,\
    \ 24)\nfunc sum_product(numbers: [Int]) -> (Int, Int) {\n    var sum = 0\n   \
    \ var product = 1\n    for number in numbers {\n        sum += number\n      \
    \  product *= number\n    }\n    return (sum, product)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sum_product(numbers: [] as [Int]) == (0, 1))\nassert(sum_product(numbers:\
    \ [1, 1, 1]) == (3, 1))\nassert(sum_product(numbers: [100, 0]) == (100, 0))\n\
    assert(sum_product(numbers: [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers:\
    \ [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013823
- exit_code: 0
  program: "\n/// For a given array of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in an array.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(numbers: []\
    \ as [Int])\n/// (0, 1)\n/// >>> sum_product(numbers: [1, 2, 3, 4])\n/// (10,\
    \ 24)\nfunc sum_product(numbers: [Int]) -> (Int, Int) {\n    return (numbers.reduce(0,\
    \ +), numbers.reduce(1, *))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013823
- exit_code: 0
  program: "\n/// For a given array of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in an array.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(numbers: []\
    \ as [Int])\n/// (0, 1)\n/// >>> sum_product(numbers: [1, 2, 3, 4])\n/// (10,\
    \ 24)\nfunc sum_product(numbers: [Int]) -> (Int, Int) {\n    var sum = 0\n   \
    \ var product = 1\n    for number in numbers {\n        sum += number\n      \
    \  product *= number\n    }\n    return (sum, product)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sum_product(numbers: [] as [Int]) == (0, 1))\nassert(sum_product(numbers:\
    \ [1, 1, 1]) == (3, 1))\nassert(sum_product(numbers: [100, 0]) == (100, 0))\n\
    assert(sum_product(numbers: [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers:\
    \ [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013823
- exit_code: 0
  program: "\n/// For a given array of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in an array.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(numbers: []\
    \ as [Int])\n/// (0, 1)\n/// >>> sum_product(numbers: [1, 2, 3, 4])\n/// (10,\
    \ 24)\nfunc sum_product(numbers: [Int]) -> (Int, Int) {\n    return (numbers.reduce(0,\
    \ +), numbers.reduce(1, *))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013823
- exit_code: 0
  program: "\n/// For a given array of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in an array.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(numbers: []\
    \ as [Int])\n/// (0, 1)\n/// >>> sum_product(numbers: [1, 2, 3, 4])\n/// (10,\
    \ 24)\nfunc sum_product(numbers: [Int]) -> (Int, Int) {\n    return (numbers.reduce(0,\
    \ +), numbers.reduce(1, *))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013823
- exit_code: 0
  program: "\n/// For a given array of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in an array.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(numbers: []\
    \ as [Int])\n/// (0, 1)\n/// >>> sum_product(numbers: [1, 2, 3, 4])\n/// (10,\
    \ 24)\nfunc sum_product(numbers: [Int]) -> (Int, Int) {\n    var sum = 0\n   \
    \ var product = 1\n    for number in numbers {\n        sum += number\n      \
    \  product *= number\n    }\n    return (sum, product)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sum_product(numbers: [] as [Int]) == (0, 1))\nassert(sum_product(numbers:\
    \ [1, 1, 1]) == (3, 1))\nassert(sum_product(numbers: [100, 0]) == (100, 0))\n\
    assert(sum_product(numbers: [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers:\
    \ [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013823
- exit_code: -4
  program: "\n/// For a given array of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in an array.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(numbers: []\
    \ as [Int])\n/// (0, 1)\n/// >>> sum_product(numbers: [1, 2, 3, 4])\n/// (10,\
    \ 24)\nfunc sum_product(numbers: [Int]) -> (Int, Int) {\n    return (0, 1)\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sum_product(numbers: [] as [Int]) == (0, 1))\n\
    assert(sum_product(numbers: [1, 1, 1]) == (3, 1))\nassert(sum_product(numbers:\
    \ [100, 0]) == (100, 0))\nassert(sum_product(numbers: [3, 5, 7]) == (15, 105))\n\
    assert(sum_product(numbers: [10]) == (10, 10))"
  status: Exception
  stderr: 'tmp132mzun0/tmp132mzun0.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2cb5391c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2cb5088b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2cb5088988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2cb50877b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp132mzun0                        0x000055a2f6f2a4dc <unavailable> + 5340

    5    libc.so.6                          0x00002b2cb557d460 __libc_start_main +
    245

    6    tmp132mzun0                        0x000055a2f6f29fd9 <unavailable> + 4057

    '
  stdout: ''
  timestamp: 1660013823
- exit_code: 0
  program: "\n/// For a given array of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in an array.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(numbers: []\
    \ as [Int])\n/// (0, 1)\n/// >>> sum_product(numbers: [1, 2, 3, 4])\n/// (10,\
    \ 24)\nfunc sum_product(numbers: [Int]) -> (Int, Int) {\n    var sum = 0\n   \
    \ var product = 1\n    for i in numbers {\n        sum += i\n        product *=\
    \ i\n    }\n    return (sum, product)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sum_product(numbers: [] as [Int]) == (0, 1))\nassert(sum_product(numbers:\
    \ [1, 1, 1]) == (3, 1))\nassert(sum_product(numbers: [100, 0]) == (100, 0))\n\
    assert(sum_product(numbers: [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers:\
    \ [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013823
- exit_code: 0
  program: "\n/// For a given array of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in an array.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(numbers: []\
    \ as [Int])\n/// (0, 1)\n/// >>> sum_product(numbers: [1, 2, 3, 4])\n/// (10,\
    \ 24)\nfunc sum_product(numbers: [Int]) -> (Int, Int) {\n    var sum = 0\n   \
    \ var product = 1\n    for number in numbers {\n        sum += number\n      \
    \  product *= number\n    }\n    return (sum, product)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sum_product(numbers: [] as [Int]) == (0, 1))\nassert(sum_product(numbers:\
    \ [1, 1, 1]) == (3, 1))\nassert(sum_product(numbers: [100, 0]) == (100, 0))\n\
    assert(sum_product(numbers: [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers:\
    \ [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013823
- exit_code: 0
  program: "\n/// For a given array of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in an array.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(numbers: []\
    \ as [Int])\n/// (0, 1)\n/// >>> sum_product(numbers: [1, 2, 3, 4])\n/// (10,\
    \ 24)\nfunc sum_product(numbers: [Int]) -> (Int, Int) {\n    return (numbers.reduce(0,\
    \ +), numbers.reduce(1, *))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013823
- exit_code: 0
  program: "\n/// For a given array of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in an array.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(numbers: []\
    \ as [Int])\n/// (0, 1)\n/// >>> sum_product(numbers: [1, 2, 3, 4])\n/// (10,\
    \ 24)\nfunc sum_product(numbers: [Int]) -> (Int, Int) {\n    var sum = 0\n   \
    \ var product = 1\n    for number in numbers {\n        sum += number\n      \
    \  product *= number\n    }\n    return (sum, product)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sum_product(numbers: [] as [Int]) == (0, 1))\nassert(sum_product(numbers:\
    \ [1, 1, 1]) == (3, 1))\nassert(sum_product(numbers: [100, 0]) == (100, 0))\n\
    assert(sum_product(numbers: [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers:\
    \ [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013823
- exit_code: 0
  program: "\n/// For a given array of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in an array.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(numbers: []\
    \ as [Int])\n/// (0, 1)\n/// >>> sum_product(numbers: [1, 2, 3, 4])\n/// (10,\
    \ 24)\nfunc sum_product(numbers: [Int]) -> (Int, Int) {\n    var sum = 0\n   \
    \ var product = 1\n    for number in numbers {\n        sum += number\n      \
    \  product *= number\n    }\n    return (sum, product)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sum_product(numbers: [] as [Int]) == (0, 1))\nassert(sum_product(numbers:\
    \ [1, 1, 1]) == (3, 1))\nassert(sum_product(numbers: [100, 0]) == (100, 0))\n\
    assert(sum_product(numbers: [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers:\
    \ [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013823
- exit_code: 0
  program: "\n/// For a given array of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in an array.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(numbers: []\
    \ as [Int])\n/// (0, 1)\n/// >>> sum_product(numbers: [1, 2, 3, 4])\n/// (10,\
    \ 24)\nfunc sum_product(numbers: [Int]) -> (Int, Int) {\n    var sum = 0\n   \
    \ var product = 1\n    for number in numbers {\n        sum += number\n      \
    \  product *= number\n    }\n    return (sum, product)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sum_product(numbers: [] as [Int]) == (0, 1))\nassert(sum_product(numbers:\
    \ [1, 1, 1]) == (3, 1))\nassert(sum_product(numbers: [100, 0]) == (100, 0))\n\
    assert(sum_product(numbers: [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers:\
    \ [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013823
- exit_code: 0
  program: "\n/// For a given array of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in an array.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(numbers: []\
    \ as [Int])\n/// (0, 1)\n/// >>> sum_product(numbers: [1, 2, 3, 4])\n/// (10,\
    \ 24)\nfunc sum_product(numbers: [Int]) -> (Int, Int) {\n    var sum = 0\n   \
    \ var product = 1\n    for number in numbers {\n        sum += number\n      \
    \  product *= number\n    }\n    return (sum, product)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sum_product(numbers: [] as [Int]) == (0, 1))\nassert(sum_product(numbers:\
    \ [1, 1, 1]) == (3, 1))\nassert(sum_product(numbers: [100, 0]) == (100, 0))\n\
    assert(sum_product(numbers: [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers:\
    \ [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013823
- exit_code: 0
  program: "\n/// For a given array of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in an array.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(numbers: []\
    \ as [Int])\n/// (0, 1)\n/// >>> sum_product(numbers: [1, 2, 3, 4])\n/// (10,\
    \ 24)\nfunc sum_product(numbers: [Int]) -> (Int, Int) {\n    var sum = 0\n   \
    \ var product = 1\n    for number in numbers {\n        sum += number\n      \
    \  product *= number\n    }\n    return (sum, product)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sum_product(numbers: [] as [Int]) == (0, 1))\nassert(sum_product(numbers:\
    \ [1, 1, 1]) == (3, 1))\nassert(sum_product(numbers: [100, 0]) == (100, 0))\n\
    assert(sum_product(numbers: [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers:\
    \ [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013823
- exit_code: 0
  program: "\n/// For a given array of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in an array.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(numbers: []\
    \ as [Int])\n/// (0, 1)\n/// >>> sum_product(numbers: [1, 2, 3, 4])\n/// (10,\
    \ 24)\nfunc sum_product(numbers: [Int]) -> (Int, Int) {\n    var sum = 0\n   \
    \ var product = 1\n    for number in numbers {\n        sum += number\n      \
    \  product *= number\n    }\n    return (sum, product)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sum_product(numbers: [] as [Int]) == (0, 1))\nassert(sum_product(numbers:\
    \ [1, 1, 1]) == (3, 1))\nassert(sum_product(numbers: [100, 0]) == (100, 0))\n\
    assert(sum_product(numbers: [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers:\
    \ [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013823
- exit_code: 0
  program: "\n/// For a given array of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in an array.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(numbers: []\
    \ as [Int])\n/// (0, 1)\n/// >>> sum_product(numbers: [1, 2, 3, 4])\n/// (10,\
    \ 24)\nfunc sum_product(numbers: [Int]) -> (Int, Int) {\n    var sum = 0\n   \
    \ var product = 1\n    for number in numbers {\n        sum += number\n      \
    \  product *= number\n    }\n    return (sum, product)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sum_product(numbers: [] as [Int]) == (0, 1))\nassert(sum_product(numbers:\
    \ [1, 1, 1]) == (3, 1))\nassert(sum_product(numbers: [100, 0]) == (100, 0))\n\
    assert(sum_product(numbers: [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers:\
    \ [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013823
- exit_code: 0
  program: "\n/// For a given array of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in an array.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(numbers: []\
    \ as [Int])\n/// (0, 1)\n/// >>> sum_product(numbers: [1, 2, 3, 4])\n/// (10,\
    \ 24)\nfunc sum_product(numbers: [Int]) -> (Int, Int) {\n    var sum = 0\n   \
    \ var product = 1\n    for number in numbers {\n        sum += number\n      \
    \  product *= number\n    }\n    return (sum, product)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sum_product(numbers: [] as [Int]) == (0, 1))\nassert(sum_product(numbers:\
    \ [1, 1, 1]) == (3, 1))\nassert(sum_product(numbers: [100, 0]) == (100, 0))\n\
    assert(sum_product(numbers: [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers:\
    \ [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013823
- exit_code: 0
  program: "\n/// For a given array of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in an array.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(numbers: []\
    \ as [Int])\n/// (0, 1)\n/// >>> sum_product(numbers: [1, 2, 3, 4])\n/// (10,\
    \ 24)\nfunc sum_product(numbers: [Int]) -> (Int, Int) {\n    var sum = 0\n   \
    \ var product = 1\n    for number in numbers {\n        sum += number\n      \
    \  product *= number\n    }\n    return (sum, product)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sum_product(numbers: [] as [Int]) == (0, 1))\nassert(sum_product(numbers:\
    \ [1, 1, 1]) == (3, 1))\nassert(sum_product(numbers: [100, 0]) == (100, 0))\n\
    assert(sum_product(numbers: [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers:\
    \ [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013823
- exit_code: 0
  program: "\n/// For a given array of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in an array.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(numbers: []\
    \ as [Int])\n/// (0, 1)\n/// >>> sum_product(numbers: [1, 2, 3, 4])\n/// (10,\
    \ 24)\nfunc sum_product(numbers: [Int]) -> (Int, Int) {\n    return (numbers.reduce(0,\
    \ +), numbers.reduce(1, *))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013823
- exit_code: 0
  program: "\n/// For a given array of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in an array.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(numbers: []\
    \ as [Int])\n/// (0, 1)\n/// >>> sum_product(numbers: [1, 2, 3, 4])\n/// (10,\
    \ 24)\nfunc sum_product(numbers: [Int]) -> (Int, Int) {\n    var sum = 0\n   \
    \ var product = 1\n    for number in numbers {\n        sum += number\n      \
    \  product *= number\n    }\n    return (sum, product)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sum_product(numbers: [] as [Int]) == (0, 1))\nassert(sum_product(numbers:\
    \ [1, 1, 1]) == (3, 1))\nassert(sum_product(numbers: [100, 0]) == (100, 0))\n\
    assert(sum_product(numbers: [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers:\
    \ [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013823
- exit_code: 0
  program: "\n/// For a given array of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in an array.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(numbers: []\
    \ as [Int])\n/// (0, 1)\n/// >>> sum_product(numbers: [1, 2, 3, 4])\n/// (10,\
    \ 24)\nfunc sum_product(numbers: [Int]) -> (Int, Int) {\n    var sum = 0\n   \
    \ var product = 1\n    for num in numbers {\n        sum += num\n        product\
    \ *= num\n    }\n    return (sum, product)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sum_product(numbers: [] as [Int]) == (0, 1))\nassert(sum_product(numbers:\
    \ [1, 1, 1]) == (3, 1))\nassert(sum_product(numbers: [100, 0]) == (100, 0))\n\
    assert(sum_product(numbers: [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers:\
    \ [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013823
- exit_code: 0
  program: "\n/// For a given array of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in an array.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(numbers: []\
    \ as [Int])\n/// (0, 1)\n/// >>> sum_product(numbers: [1, 2, 3, 4])\n/// (10,\
    \ 24)\nfunc sum_product(numbers: [Int]) -> (Int, Int) {\n    var sum = 0\n   \
    \ var product = 1\n    for number in numbers {\n        sum += number\n      \
    \  product *= number\n    }\n    return (sum, product)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sum_product(numbers: [] as [Int]) == (0, 1))\nassert(sum_product(numbers:\
    \ [1, 1, 1]) == (3, 1))\nassert(sum_product(numbers: [100, 0]) == (100, 0))\n\
    assert(sum_product(numbers: [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers:\
    \ [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013823
- exit_code: 0
  program: "\n/// For a given array of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in an array.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(numbers: []\
    \ as [Int])\n/// (0, 1)\n/// >>> sum_product(numbers: [1, 2, 3, 4])\n/// (10,\
    \ 24)\nfunc sum_product(numbers: [Int]) -> (Int, Int) {\n    var sum = 0\n   \
    \ var product = 1\n    for number in numbers {\n        sum += number\n      \
    \  product *= number\n    }\n    return (sum, product)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sum_product(numbers: [] as [Int]) == (0, 1))\nassert(sum_product(numbers:\
    \ [1, 1, 1]) == (3, 1))\nassert(sum_product(numbers: [100, 0]) == (100, 0))\n\
    assert(sum_product(numbers: [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers:\
    \ [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013823
- exit_code: 0
  program: "\n/// For a given array of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in an array.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(numbers: []\
    \ as [Int])\n/// (0, 1)\n/// >>> sum_product(numbers: [1, 2, 3, 4])\n/// (10,\
    \ 24)\nfunc sum_product(numbers: [Int]) -> (Int, Int) {\n    var sum = 0\n   \
    \ var product = 1\n    for number in numbers {\n        sum += number\n      \
    \  product *= number\n    }\n    return (sum, product)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sum_product(numbers: [] as [Int]) == (0, 1))\nassert(sum_product(numbers:\
    \ [1, 1, 1]) == (3, 1))\nassert(sum_product(numbers: [100, 0]) == (100, 0))\n\
    assert(sum_product(numbers: [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers:\
    \ [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013823
- exit_code: 0
  program: "\n/// For a given array of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in an array.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(numbers: []\
    \ as [Int])\n/// (0, 1)\n/// >>> sum_product(numbers: [1, 2, 3, 4])\n/// (10,\
    \ 24)\nfunc sum_product(numbers: [Int]) -> (Int, Int) {\n    var sum = 0\n   \
    \ var product = 1\n    for number in numbers {\n        sum += number\n      \
    \  product *= number\n    }\n    return (sum, product)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sum_product(numbers: [] as [Int]) == (0, 1))\nassert(sum_product(numbers:\
    \ [1, 1, 1]) == (3, 1))\nassert(sum_product(numbers: [100, 0]) == (100, 0))\n\
    assert(sum_product(numbers: [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers:\
    \ [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013823
- exit_code: 0
  program: "\n/// For a given array of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in an array.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(numbers: []\
    \ as [Int])\n/// (0, 1)\n/// >>> sum_product(numbers: [1, 2, 3, 4])\n/// (10,\
    \ 24)\nfunc sum_product(numbers: [Int]) -> (Int, Int) {\n    var sum = 0\n   \
    \ var product = 1\n    for number in numbers {\n        sum += number\n      \
    \  product *= number\n    }\n    return (sum, product)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sum_product(numbers: [] as [Int]) == (0, 1))\nassert(sum_product(numbers:\
    \ [1, 1, 1]) == (3, 1))\nassert(sum_product(numbers: [100, 0]) == (100, 0))\n\
    assert(sum_product(numbers: [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers:\
    \ [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013823
- exit_code: 0
  program: "\n/// For a given array of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in an array.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(numbers: []\
    \ as [Int])\n/// (0, 1)\n/// >>> sum_product(numbers: [1, 2, 3, 4])\n/// (10,\
    \ 24)\nfunc sum_product(numbers: [Int]) -> (Int, Int) {\n    var sum = 0\n   \
    \ var product = 1\n    for number in numbers {\n        sum += number\n      \
    \  product *= number\n    }\n    return (sum, product)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sum_product(numbers: [] as [Int]) == (0, 1))\nassert(sum_product(numbers:\
    \ [1, 1, 1]) == (3, 1))\nassert(sum_product(numbers: [100, 0]) == (100, 0))\n\
    assert(sum_product(numbers: [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers:\
    \ [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013823
- exit_code: 0
  program: "\n/// For a given array of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in an array.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(numbers: []\
    \ as [Int])\n/// (0, 1)\n/// >>> sum_product(numbers: [1, 2, 3, 4])\n/// (10,\
    \ 24)\nfunc sum_product(numbers: [Int]) -> (Int, Int) {\n    return (numbers.reduce(0,\
    \ +), numbers.reduce(1, *))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013823
- exit_code: 0
  program: "\n/// For a given array of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in an array.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(numbers: []\
    \ as [Int])\n/// (0, 1)\n/// >>> sum_product(numbers: [1, 2, 3, 4])\n/// (10,\
    \ 24)\nfunc sum_product(numbers: [Int]) -> (Int, Int) {\n    var sum = 0\n   \
    \ var product = 1\n    for number in numbers {\n        sum += number\n      \
    \  product *= number\n    }\n    return (sum, product)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sum_product(numbers: [] as [Int]) == (0, 1))\nassert(sum_product(numbers:\
    \ [1, 1, 1]) == (3, 1))\nassert(sum_product(numbers: [100, 0]) == (100, 0))\n\
    assert(sum_product(numbers: [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers:\
    \ [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013823
- exit_code: 0
  program: "\n/// For a given array of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in an array.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(numbers: []\
    \ as [Int])\n/// (0, 1)\n/// >>> sum_product(numbers: [1, 2, 3, 4])\n/// (10,\
    \ 24)\nfunc sum_product(numbers: [Int]) -> (Int, Int) {\n    var sum = 0\n   \
    \ var product = 1\n    for number in numbers {\n        sum += number\n      \
    \  product *= number\n    }\n    return (sum, product)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sum_product(numbers: [] as [Int]) == (0, 1))\nassert(sum_product(numbers:\
    \ [1, 1, 1]) == (3, 1))\nassert(sum_product(numbers: [100, 0]) == (100, 0))\n\
    assert(sum_product(numbers: [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers:\
    \ [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013823
- exit_code: 0
  program: "\n/// For a given array of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in an array.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(numbers: []\
    \ as [Int])\n/// (0, 1)\n/// >>> sum_product(numbers: [1, 2, 3, 4])\n/// (10,\
    \ 24)\nfunc sum_product(numbers: [Int]) -> (Int, Int) {\n    return (numbers.reduce(0,\
    \ +), numbers.reduce(1, *))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013823
- exit_code: 0
  program: "\n/// For a given array of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in an array.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(numbers: []\
    \ as [Int])\n/// (0, 1)\n/// >>> sum_product(numbers: [1, 2, 3, 4])\n/// (10,\
    \ 24)\nfunc sum_product(numbers: [Int]) -> (Int, Int) {\n    return (numbers.reduce(0,\
    \ +), numbers.reduce(1, *))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013823
- exit_code: 0
  program: "\n/// For a given array of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in an array.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(numbers: []\
    \ as [Int])\n/// (0, 1)\n/// >>> sum_product(numbers: [1, 2, 3, 4])\n/// (10,\
    \ 24)\nfunc sum_product(numbers: [Int]) -> (Int, Int) {\n    var sum = 0\n   \
    \ var product = 1\n    for number in numbers {\n        sum += number\n      \
    \  product *= number\n    }\n    return (sum, product)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sum_product(numbers: [] as [Int]) == (0, 1))\nassert(sum_product(numbers:\
    \ [1, 1, 1]) == (3, 1))\nassert(sum_product(numbers: [100, 0]) == (100, 0))\n\
    assert(sum_product(numbers: [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers:\
    \ [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013823
- exit_code: 0
  program: "\n/// For a given array of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in an array.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(numbers: []\
    \ as [Int])\n/// (0, 1)\n/// >>> sum_product(numbers: [1, 2, 3, 4])\n/// (10,\
    \ 24)\nfunc sum_product(numbers: [Int]) -> (Int, Int) {\n    var sum = 0\n   \
    \ var product = 1\n    for number in numbers {\n        sum += number\n      \
    \  product *= number\n    }\n    return (sum, product)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sum_product(numbers: [] as [Int]) == (0, 1))\nassert(sum_product(numbers:\
    \ [1, 1, 1]) == (3, 1))\nassert(sum_product(numbers: [100, 0]) == (100, 0))\n\
    assert(sum_product(numbers: [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers:\
    \ [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013823
- exit_code: 0
  program: "\n/// For a given array of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in an array.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(numbers: []\
    \ as [Int])\n/// (0, 1)\n/// >>> sum_product(numbers: [1, 2, 3, 4])\n/// (10,\
    \ 24)\nfunc sum_product(numbers: [Int]) -> (Int, Int) {\n    var sum = 0\n   \
    \ var product = 1\n    for number in numbers {\n        sum += number\n      \
    \  product *= number\n    }\n    return (sum, product)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sum_product(numbers: [] as [Int]) == (0, 1))\nassert(sum_product(numbers:\
    \ [1, 1, 1]) == (3, 1))\nassert(sum_product(numbers: [100, 0]) == (100, 0))\n\
    assert(sum_product(numbers: [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers:\
    \ [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013823
- exit_code: 0
  program: "\n/// For a given array of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in an array.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(numbers: []\
    \ as [Int])\n/// (0, 1)\n/// >>> sum_product(numbers: [1, 2, 3, 4])\n/// (10,\
    \ 24)\nfunc sum_product(numbers: [Int]) -> (Int, Int) {\n    var sum = 0\n   \
    \ var product = 1\n    for number in numbers {\n        sum += number\n      \
    \  product *= number\n    }\n    return (sum, product)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sum_product(numbers: [] as [Int]) == (0, 1))\nassert(sum_product(numbers:\
    \ [1, 1, 1]) == (3, 1))\nassert(sum_product(numbers: [100, 0]) == (100, 0))\n\
    assert(sum_product(numbers: [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers:\
    \ [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013823
- exit_code: 0
  program: "\n/// For a given array of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in an array.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(numbers: []\
    \ as [Int])\n/// (0, 1)\n/// >>> sum_product(numbers: [1, 2, 3, 4])\n/// (10,\
    \ 24)\nfunc sum_product(numbers: [Int]) -> (Int, Int) {\n    return (numbers.reduce(0,\
    \ +), numbers.reduce(1, *))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013823
- exit_code: -4
  program: "\n/// For a given array of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in an array.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(numbers: []\
    \ as [Int])\n/// (0, 1)\n/// >>> sum_product(numbers: [1, 2, 3, 4])\n/// (10,\
    \ 24)\nfunc sum_product(numbers: [Int]) -> (Int, Int) {\n    return (0, 1)\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sum_product(numbers: [] as [Int]) == (0, 1))\n\
    assert(sum_product(numbers: [1, 1, 1]) == (3, 1))\nassert(sum_product(numbers:\
    \ [100, 0]) == (100, 0))\nassert(sum_product(numbers: [3, 5, 7]) == (15, 105))\n\
    assert(sum_product(numbers: [10]) == (10, 10))"
  status: Exception
  stderr: 'tmp132mzun0/tmp132mzun0.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2cb5391c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2cb5088b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2cb5088988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2cb50877b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp132mzun0                        0x000055a2f6f2a4dc <unavailable> + 5340

    5    libc.so.6                          0x00002b2cb557d460 __libc_start_main +
    245

    6    tmp132mzun0                        0x000055a2f6f29fd9 <unavailable> + 4057

    '
  stdout: ''
  timestamp: 1660013823
- exit_code: 0
  program: "\n/// For a given array of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in an array.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(numbers: []\
    \ as [Int])\n/// (0, 1)\n/// >>> sum_product(numbers: [1, 2, 3, 4])\n/// (10,\
    \ 24)\nfunc sum_product(numbers: [Int]) -> (Int, Int) {\n    var sum = 0\n   \
    \ var product = 1\n    for number in numbers {\n        sum += number\n      \
    \  product *= number\n    }\n    return (sum, product)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sum_product(numbers: [] as [Int]) == (0, 1))\nassert(sum_product(numbers:\
    \ [1, 1, 1]) == (3, 1))\nassert(sum_product(numbers: [100, 0]) == (100, 0))\n\
    assert(sum_product(numbers: [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers:\
    \ [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013823
- exit_code: 0
  program: "\n/// For a given array of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in an array.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(numbers: []\
    \ as [Int])\n/// (0, 1)\n/// >>> sum_product(numbers: [1, 2, 3, 4])\n/// (10,\
    \ 24)\nfunc sum_product(numbers: [Int]) -> (Int, Int) {\n    var sum = 0\n   \
    \ var product = 1\n    for number in numbers {\n        sum += number\n      \
    \  product *= number\n    }\n    return (sum, product)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sum_product(numbers: [] as [Int]) == (0, 1))\nassert(sum_product(numbers:\
    \ [1, 1, 1]) == (3, 1))\nassert(sum_product(numbers: [100, 0]) == (100, 0))\n\
    assert(sum_product(numbers: [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers:\
    \ [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013823
- exit_code: 0
  program: "\n/// For a given array of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in an array.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(numbers: []\
    \ as [Int])\n/// (0, 1)\n/// >>> sum_product(numbers: [1, 2, 3, 4])\n/// (10,\
    \ 24)\nfunc sum_product(numbers: [Int]) -> (Int, Int) {\n    var sum = 0\n   \
    \ var product = 1\n    for number in numbers {\n        sum += number\n      \
    \  product *= number\n    }\n    return (sum, product)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sum_product(numbers: [] as [Int]) == (0, 1))\nassert(sum_product(numbers:\
    \ [1, 1, 1]) == (3, 1))\nassert(sum_product(numbers: [100, 0]) == (100, 0))\n\
    assert(sum_product(numbers: [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers:\
    \ [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013823
- exit_code: 0
  program: "\n/// For a given array of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in an array.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(numbers: []\
    \ as [Int])\n/// (0, 1)\n/// >>> sum_product(numbers: [1, 2, 3, 4])\n/// (10,\
    \ 24)\nfunc sum_product(numbers: [Int]) -> (Int, Int) {\n    var sum = 0\n   \
    \ var product = 1\n    for number in numbers {\n        sum += number\n      \
    \  product *= number\n    }\n    return (sum, product)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sum_product(numbers: [] as [Int]) == (0, 1))\nassert(sum_product(numbers:\
    \ [1, 1, 1]) == (3, 1))\nassert(sum_product(numbers: [100, 0]) == (100, 0))\n\
    assert(sum_product(numbers: [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers:\
    \ [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013823
- exit_code: 0
  program: "\n/// For a given array of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in an array.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(numbers: []\
    \ as [Int])\n/// (0, 1)\n/// >>> sum_product(numbers: [1, 2, 3, 4])\n/// (10,\
    \ 24)\nfunc sum_product(numbers: [Int]) -> (Int, Int) {\n    return (numbers.reduce(0,\
    \ +), numbers.reduce(1, *))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013823
- exit_code: 0
  program: "\n/// For a given array of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in an array.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(numbers: []\
    \ as [Int])\n/// (0, 1)\n/// >>> sum_product(numbers: [1, 2, 3, 4])\n/// (10,\
    \ 24)\nfunc sum_product(numbers: [Int]) -> (Int, Int) {\n    return (numbers.reduce(0,\
    \ +), numbers.reduce(1, *))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013823
- exit_code: 0
  program: "\n/// For a given array of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in an array.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(numbers: []\
    \ as [Int])\n/// (0, 1)\n/// >>> sum_product(numbers: [1, 2, 3, 4])\n/// (10,\
    \ 24)\nfunc sum_product(numbers: [Int]) -> (Int, Int) {\n    var sum = 0\n   \
    \ var product = 1\n    for number in numbers {\n        sum += number\n      \
    \  product *= number\n    }\n    return (sum, product)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sum_product(numbers: [] as [Int]) == (0, 1))\nassert(sum_product(numbers:\
    \ [1, 1, 1]) == (3, 1))\nassert(sum_product(numbers: [100, 0]) == (100, 0))\n\
    assert(sum_product(numbers: [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers:\
    \ [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013823
- exit_code: 0
  program: "\n/// For a given array of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in an array.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(numbers: []\
    \ as [Int])\n/// (0, 1)\n/// >>> sum_product(numbers: [1, 2, 3, 4])\n/// (10,\
    \ 24)\nfunc sum_product(numbers: [Int]) -> (Int, Int) {\n    var sum = 0\n   \
    \ var product = 1\n    for number in numbers {\n        sum += number\n      \
    \  product *= number\n    }\n    return (sum, product)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sum_product(numbers: [] as [Int]) == (0, 1))\nassert(sum_product(numbers:\
    \ [1, 1, 1]) == (3, 1))\nassert(sum_product(numbers: [100, 0]) == (100, 0))\n\
    assert(sum_product(numbers: [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers:\
    \ [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013823
- exit_code: 0
  program: "\n/// For a given array of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in an array.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(numbers: []\
    \ as [Int])\n/// (0, 1)\n/// >>> sum_product(numbers: [1, 2, 3, 4])\n/// (10,\
    \ 24)\nfunc sum_product(numbers: [Int]) -> (Int, Int) {\n    return (numbers.reduce(0,\
    \ +), numbers.reduce(1, *))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013823
- exit_code: 0
  program: "\n/// For a given array of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in an array.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(numbers: []\
    \ as [Int])\n/// (0, 1)\n/// >>> sum_product(numbers: [1, 2, 3, 4])\n/// (10,\
    \ 24)\nfunc sum_product(numbers: [Int]) -> (Int, Int) {\n    var sum = 0\n   \
    \ var product = 1\n    for number in numbers {\n        sum += number\n      \
    \  product *= number\n    }\n    return (sum, product)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sum_product(numbers: [] as [Int]) == (0, 1))\nassert(sum_product(numbers:\
    \ [1, 1, 1]) == (3, 1))\nassert(sum_product(numbers: [100, 0]) == (100, 0))\n\
    assert(sum_product(numbers: [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers:\
    \ [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013823
- exit_code: 0
  program: "\n/// For a given array of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in an array.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(numbers: []\
    \ as [Int])\n/// (0, 1)\n/// >>> sum_product(numbers: [1, 2, 3, 4])\n/// (10,\
    \ 24)\nfunc sum_product(numbers: [Int]) -> (Int, Int) {\n    var sum = 0\n   \
    \ var product = 1\n    for number in numbers {\n        sum += number\n      \
    \  product *= number\n    }\n    return (sum, product)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sum_product(numbers: [] as [Int]) == (0, 1))\nassert(sum_product(numbers:\
    \ [1, 1, 1]) == (3, 1))\nassert(sum_product(numbers: [100, 0]) == (100, 0))\n\
    assert(sum_product(numbers: [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers:\
    \ [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013823
- exit_code: 0
  program: "\n/// For a given array of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in an array.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(numbers: []\
    \ as [Int])\n/// (0, 1)\n/// >>> sum_product(numbers: [1, 2, 3, 4])\n/// (10,\
    \ 24)\nfunc sum_product(numbers: [Int]) -> (Int, Int) {\n    return (numbers.reduce(0,\
    \ +), numbers.reduce(1, *))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013823
- exit_code: 0
  program: "\n/// For a given array of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in an array.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(numbers: []\
    \ as [Int])\n/// (0, 1)\n/// >>> sum_product(numbers: [1, 2, 3, 4])\n/// (10,\
    \ 24)\nfunc sum_product(numbers: [Int]) -> (Int, Int) {\n    var sum = 0\n   \
    \ var product = 1\n    for number in numbers {\n        sum += number\n      \
    \  product *= number\n    }\n    return (sum, product)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sum_product(numbers: [] as [Int]) == (0, 1))\nassert(sum_product(numbers:\
    \ [1, 1, 1]) == (3, 1))\nassert(sum_product(numbers: [100, 0]) == (100, 0))\n\
    assert(sum_product(numbers: [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers:\
    \ [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013823
- exit_code: 0
  program: "\n/// For a given array of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in an array.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(numbers: []\
    \ as [Int])\n/// (0, 1)\n/// >>> sum_product(numbers: [1, 2, 3, 4])\n/// (10,\
    \ 24)\nfunc sum_product(numbers: [Int]) -> (Int, Int) {\n    var sum = 0\n   \
    \ var product = 1\n    for number in numbers {\n        sum += number\n      \
    \  product *= number\n    }\n    return (sum, product)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sum_product(numbers: [] as [Int]) == (0, 1))\nassert(sum_product(numbers:\
    \ [1, 1, 1]) == (3, 1))\nassert(sum_product(numbers: [100, 0]) == (100, 0))\n\
    assert(sum_product(numbers: [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers:\
    \ [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013823
- exit_code: 0
  program: "\n/// For a given array of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in an array.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(numbers: []\
    \ as [Int])\n/// (0, 1)\n/// >>> sum_product(numbers: [1, 2, 3, 4])\n/// (10,\
    \ 24)\nfunc sum_product(numbers: [Int]) -> (Int, Int) {\n    let sum = numbers.reduce(0,\
    \ +)\n    let product = numbers.reduce(1, *)\n    return (sum, product)\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sum_product(numbers: [] as [Int]) == (0, 1))\n\
    assert(sum_product(numbers: [1, 1, 1]) == (3, 1))\nassert(sum_product(numbers:\
    \ [100, 0]) == (100, 0))\nassert(sum_product(numbers: [3, 5, 7]) == (15, 105))\n\
    assert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013823
- exit_code: 0
  program: "\n/// For a given array of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in an array.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(numbers: []\
    \ as [Int])\n/// (0, 1)\n/// >>> sum_product(numbers: [1, 2, 3, 4])\n/// (10,\
    \ 24)\nfunc sum_product(numbers: [Int]) -> (Int, Int) {\n    var sum = 0\n   \
    \ var product = 1\n    for number in numbers {\n        sum += number\n      \
    \  product *= number\n    }\n    return (sum, product)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sum_product(numbers: [] as [Int]) == (0, 1))\nassert(sum_product(numbers:\
    \ [1, 1, 1]) == (3, 1))\nassert(sum_product(numbers: [100, 0]) == (100, 0))\n\
    assert(sum_product(numbers: [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers:\
    \ [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013823
- exit_code: 0
  program: "\n/// For a given array of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in an array.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(numbers: []\
    \ as [Int])\n/// (0, 1)\n/// >>> sum_product(numbers: [1, 2, 3, 4])\n/// (10,\
    \ 24)\nfunc sum_product(numbers: [Int]) -> (Int, Int) {\n    var sum = 0\n   \
    \ var product = 1\n    for number in numbers {\n        sum += number\n      \
    \  product *= number\n    }\n    return (sum, product)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sum_product(numbers: [] as [Int]) == (0, 1))\nassert(sum_product(numbers:\
    \ [1, 1, 1]) == (3, 1))\nassert(sum_product(numbers: [100, 0]) == (100, 0))\n\
    assert(sum_product(numbers: [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers:\
    \ [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013823
- exit_code: 0
  program: "\n/// For a given array of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in an array.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(numbers: []\
    \ as [Int])\n/// (0, 1)\n/// >>> sum_product(numbers: [1, 2, 3, 4])\n/// (10,\
    \ 24)\nfunc sum_product(numbers: [Int]) -> (Int, Int) {\n    var sum = 0\n   \
    \ var product = 1\n    for number in numbers {\n        sum += number\n      \
    \  product *= number\n    }\n    return (sum, product)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sum_product(numbers: [] as [Int]) == (0, 1))\nassert(sum_product(numbers:\
    \ [1, 1, 1]) == (3, 1))\nassert(sum_product(numbers: [100, 0]) == (100, 0))\n\
    assert(sum_product(numbers: [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers:\
    \ [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013823
- exit_code: 0
  program: "\n/// For a given array of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in an array.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(numbers: []\
    \ as [Int])\n/// (0, 1)\n/// >>> sum_product(numbers: [1, 2, 3, 4])\n/// (10,\
    \ 24)\nfunc sum_product(numbers: [Int]) -> (Int, Int) {\n    return (numbers.reduce(0,\
    \ +), numbers.reduce(1, *))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013823
- exit_code: 0
  program: "\n/// For a given array of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in an array.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(numbers: []\
    \ as [Int])\n/// (0, 1)\n/// >>> sum_product(numbers: [1, 2, 3, 4])\n/// (10,\
    \ 24)\nfunc sum_product(numbers: [Int]) -> (Int, Int) {\n    return (numbers.reduce(0,\
    \ +), numbers.reduce(1, *))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013823
- exit_code: 0
  program: "\n/// For a given array of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in an array.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(numbers: []\
    \ as [Int])\n/// (0, 1)\n/// >>> sum_product(numbers: [1, 2, 3, 4])\n/// (10,\
    \ 24)\nfunc sum_product(numbers: [Int]) -> (Int, Int) {\n    var sum = 0\n   \
    \ var product = 1\n    for number in numbers {\n        sum += number\n      \
    \  product *= number\n    }\n    return (sum, product)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sum_product(numbers: [] as [Int]) == (0, 1))\nassert(sum_product(numbers:\
    \ [1, 1, 1]) == (3, 1))\nassert(sum_product(numbers: [100, 0]) == (100, 0))\n\
    assert(sum_product(numbers: [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers:\
    \ [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013823
- exit_code: 0
  program: "\n/// For a given array of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in an array.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(numbers: []\
    \ as [Int])\n/// (0, 1)\n/// >>> sum_product(numbers: [1, 2, 3, 4])\n/// (10,\
    \ 24)\nfunc sum_product(numbers: [Int]) -> (Int, Int) {\n    return (numbers.reduce(0,\
    \ +), numbers.reduce(1, *))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013823
- exit_code: 0
  program: "\n/// For a given array of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in an array.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(numbers: []\
    \ as [Int])\n/// (0, 1)\n/// >>> sum_product(numbers: [1, 2, 3, 4])\n/// (10,\
    \ 24)\nfunc sum_product(numbers: [Int]) -> (Int, Int) {\n    var sum = 0\n   \
    \ var product = 1\n    for number in numbers {\n        sum += number\n      \
    \  product *= number\n    }\n    return (sum, product)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sum_product(numbers: [] as [Int]) == (0, 1))\nassert(sum_product(numbers:\
    \ [1, 1, 1]) == (3, 1))\nassert(sum_product(numbers: [100, 0]) == (100, 0))\n\
    assert(sum_product(numbers: [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers:\
    \ [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013823
- exit_code: 0
  program: "\n/// For a given array of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in an array.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(numbers: []\
    \ as [Int])\n/// (0, 1)\n/// >>> sum_product(numbers: [1, 2, 3, 4])\n/// (10,\
    \ 24)\nfunc sum_product(numbers: [Int]) -> (Int, Int) {\n    return (numbers.reduce(0,\
    \ +), numbers.reduce(1, *))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013823
- exit_code: 0
  program: "\n/// For a given array of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in an array.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(numbers: []\
    \ as [Int])\n/// (0, 1)\n/// >>> sum_product(numbers: [1, 2, 3, 4])\n/// (10,\
    \ 24)\nfunc sum_product(numbers: [Int]) -> (Int, Int) {\n    return (numbers.reduce(0,\
    \ +), numbers.reduce(1, *))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013823
- exit_code: 0
  program: "\n/// For a given array of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in an array.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(numbers: []\
    \ as [Int])\n/// (0, 1)\n/// >>> sum_product(numbers: [1, 2, 3, 4])\n/// (10,\
    \ 24)\nfunc sum_product(numbers: [Int]) -> (Int, Int) {\n    var sum = 0\n   \
    \ var product = 1\n    for number in numbers {\n        sum += number\n      \
    \  product *= number\n    }\n    return (sum, product)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sum_product(numbers: [] as [Int]) == (0, 1))\nassert(sum_product(numbers:\
    \ [1, 1, 1]) == (3, 1))\nassert(sum_product(numbers: [100, 0]) == (100, 0))\n\
    assert(sum_product(numbers: [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers:\
    \ [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013823
- exit_code: 0
  program: "\n/// For a given array of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in an array.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(numbers: []\
    \ as [Int])\n/// (0, 1)\n/// >>> sum_product(numbers: [1, 2, 3, 4])\n/// (10,\
    \ 24)\nfunc sum_product(numbers: [Int]) -> (Int, Int) {\n    return (numbers.reduce(0,\
    \ +), numbers.reduce(1, *))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013823
- exit_code: 0
  program: "\n/// For a given array of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in an array.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(numbers: []\
    \ as [Int])\n/// (0, 1)\n/// >>> sum_product(numbers: [1, 2, 3, 4])\n/// (10,\
    \ 24)\nfunc sum_product(numbers: [Int]) -> (Int, Int) {\n    var sum = 0\n   \
    \ var product = 1\n    for number in numbers {\n        sum += number\n      \
    \  product *= number\n    }\n    return (sum, product)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sum_product(numbers: [] as [Int]) == (0, 1))\nassert(sum_product(numbers:\
    \ [1, 1, 1]) == (3, 1))\nassert(sum_product(numbers: [100, 0]) == (100, 0))\n\
    assert(sum_product(numbers: [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers:\
    \ [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013823
- exit_code: 0
  program: "\n/// For a given array of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in an array.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(numbers: []\
    \ as [Int])\n/// (0, 1)\n/// >>> sum_product(numbers: [1, 2, 3, 4])\n/// (10,\
    \ 24)\nfunc sum_product(numbers: [Int]) -> (Int, Int) {\n    return (numbers.reduce(0,\
    \ +), numbers.reduce(1, *))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013823
- exit_code: 0
  program: "\n/// For a given array of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in an array.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(numbers: []\
    \ as [Int])\n/// (0, 1)\n/// >>> sum_product(numbers: [1, 2, 3, 4])\n/// (10,\
    \ 24)\nfunc sum_product(numbers: [Int]) -> (Int, Int) {\n    var sum = 0\n   \
    \ var product = 1\n    for number in numbers {\n        sum += number\n      \
    \  product *= number\n    }\n    return (sum, product)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sum_product(numbers: [] as [Int]) == (0, 1))\nassert(sum_product(numbers:\
    \ [1, 1, 1]) == (3, 1))\nassert(sum_product(numbers: [100, 0]) == (100, 0))\n\
    assert(sum_product(numbers: [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers:\
    \ [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013823
- exit_code: 0
  program: "\n/// For a given array of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in an array.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(numbers: []\
    \ as [Int])\n/// (0, 1)\n/// >>> sum_product(numbers: [1, 2, 3, 4])\n/// (10,\
    \ 24)\nfunc sum_product(numbers: [Int]) -> (Int, Int) {\n    return (numbers.reduce(0,\
    \ +), numbers.reduce(1, *))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013823
- exit_code: -4
  program: "\n/// For a given array of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in an array.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(numbers: []\
    \ as [Int])\n/// (0, 1)\n/// >>> sum_product(numbers: [1, 2, 3, 4])\n/// (10,\
    \ 24)\nfunc sum_product(numbers: [Int]) -> (Int, Int) {\n    return (0, 1)\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sum_product(numbers: [] as [Int]) == (0, 1))\n\
    assert(sum_product(numbers: [1, 1, 1]) == (3, 1))\nassert(sum_product(numbers:\
    \ [100, 0]) == (100, 0))\nassert(sum_product(numbers: [3, 5, 7]) == (15, 105))\n\
    assert(sum_product(numbers: [10]) == (10, 10))"
  status: Exception
  stderr: 'tmp132mzun0/tmp132mzun0.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2cb5391c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2cb5088b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2cb5088988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2cb50877b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp132mzun0                        0x000055a2f6f2a4dc <unavailable> + 5340

    5    libc.so.6                          0x00002b2cb557d460 __libc_start_main +
    245

    6    tmp132mzun0                        0x000055a2f6f29fd9 <unavailable> + 4057

    '
  stdout: ''
  timestamp: 1660013823
- exit_code: 0
  program: "\n/// For a given array of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in an array.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(numbers: []\
    \ as [Int])\n/// (0, 1)\n/// >>> sum_product(numbers: [1, 2, 3, 4])\n/// (10,\
    \ 24)\nfunc sum_product(numbers: [Int]) -> (Int, Int) {\n    var sum = 0\n   \
    \ var product = 1\n    for number in numbers {\n        sum += number\n      \
    \  product *= number\n    }\n    return (sum, product)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sum_product(numbers: [] as [Int]) == (0, 1))\nassert(sum_product(numbers:\
    \ [1, 1, 1]) == (3, 1))\nassert(sum_product(numbers: [100, 0]) == (100, 0))\n\
    assert(sum_product(numbers: [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers:\
    \ [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013823
- exit_code: 0
  program: "\n/// For a given array of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in an array.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(numbers: []\
    \ as [Int])\n/// (0, 1)\n/// >>> sum_product(numbers: [1, 2, 3, 4])\n/// (10,\
    \ 24)\nfunc sum_product(numbers: [Int]) -> (Int, Int) {\n    var sum = 0\n   \
    \ var product = 1\n    for number in numbers {\n        sum += number\n      \
    \  product *= number\n    }\n    return (sum, product)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sum_product(numbers: [] as [Int]) == (0, 1))\nassert(sum_product(numbers:\
    \ [1, 1, 1]) == (3, 1))\nassert(sum_product(numbers: [100, 0]) == (100, 0))\n\
    assert(sum_product(numbers: [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers:\
    \ [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013823
- exit_code: 0
  program: "\n/// For a given array of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in an array.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(numbers: []\
    \ as [Int])\n/// (0, 1)\n/// >>> sum_product(numbers: [1, 2, 3, 4])\n/// (10,\
    \ 24)\nfunc sum_product(numbers: [Int]) -> (Int, Int) {\n    var sum = 0\n   \
    \ var product = 1\n    for number in numbers {\n        sum += number\n      \
    \  product *= number\n    }\n    return (sum, product)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sum_product(numbers: [] as [Int]) == (0, 1))\nassert(sum_product(numbers:\
    \ [1, 1, 1]) == (3, 1))\nassert(sum_product(numbers: [100, 0]) == (100, 0))\n\
    assert(sum_product(numbers: [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers:\
    \ [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013823
- exit_code: 0
  program: "\n/// For a given array of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in an array.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(numbers: []\
    \ as [Int])\n/// (0, 1)\n/// >>> sum_product(numbers: [1, 2, 3, 4])\n/// (10,\
    \ 24)\nfunc sum_product(numbers: [Int]) -> (Int, Int) {\n    var sum = 0\n   \
    \ var product = 1\n    for number in numbers {\n        sum += number\n      \
    \  product *= number\n    }\n    return (sum, product)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sum_product(numbers: [] as [Int]) == (0, 1))\nassert(sum_product(numbers:\
    \ [1, 1, 1]) == (3, 1))\nassert(sum_product(numbers: [100, 0]) == (100, 0))\n\
    assert(sum_product(numbers: [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers:\
    \ [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013823
- exit_code: 0
  program: "\n/// For a given array of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in an array.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(numbers: []\
    \ as [Int])\n/// (0, 1)\n/// >>> sum_product(numbers: [1, 2, 3, 4])\n/// (10,\
    \ 24)\nfunc sum_product(numbers: [Int]) -> (Int, Int) {\n    var sum = 0\n   \
    \ var product = 1\n    for num in numbers {\n        sum += num\n        product\
    \ *= num\n    }\n    return (sum, product)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sum_product(numbers: [] as [Int]) == (0, 1))\nassert(sum_product(numbers:\
    \ [1, 1, 1]) == (3, 1))\nassert(sum_product(numbers: [100, 0]) == (100, 0))\n\
    assert(sum_product(numbers: [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers:\
    \ [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013823
- exit_code: 0
  program: "\n/// For a given array of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in an array.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(numbers: []\
    \ as [Int])\n/// (0, 1)\n/// >>> sum_product(numbers: [1, 2, 3, 4])\n/// (10,\
    \ 24)\nfunc sum_product(numbers: [Int]) -> (Int, Int) {\n    var sum = 0\n   \
    \ var product = 1\n    for number in numbers {\n        sum += number\n      \
    \  product *= number\n    }\n    return (sum, product)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sum_product(numbers: [] as [Int]) == (0, 1))\nassert(sum_product(numbers:\
    \ [1, 1, 1]) == (3, 1))\nassert(sum_product(numbers: [100, 0]) == (100, 0))\n\
    assert(sum_product(numbers: [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers:\
    \ [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013823
- exit_code: 0
  program: "\n/// For a given array of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in an array.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(numbers: []\
    \ as [Int])\n/// (0, 1)\n/// >>> sum_product(numbers: [1, 2, 3, 4])\n/// (10,\
    \ 24)\nfunc sum_product(numbers: [Int]) -> (Int, Int) {\n    var sum = 0\n   \
    \ var product = 1\n    for number in numbers {\n        sum += number\n      \
    \  product *= number\n    }\n    return (sum, product)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sum_product(numbers: [] as [Int]) == (0, 1))\nassert(sum_product(numbers:\
    \ [1, 1, 1]) == (3, 1))\nassert(sum_product(numbers: [100, 0]) == (100, 0))\n\
    assert(sum_product(numbers: [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers:\
    \ [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013823
- exit_code: 0
  program: "\n/// For a given array of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in an array.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(numbers: []\
    \ as [Int])\n/// (0, 1)\n/// >>> sum_product(numbers: [1, 2, 3, 4])\n/// (10,\
    \ 24)\nfunc sum_product(numbers: [Int]) -> (Int, Int) {\n    var sum = 0\n   \
    \ var product = 1\n    for number in numbers {\n        sum += number\n      \
    \  product *= number\n    }\n    return (sum, product)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sum_product(numbers: [] as [Int]) == (0, 1))\nassert(sum_product(numbers:\
    \ [1, 1, 1]) == (3, 1))\nassert(sum_product(numbers: [100, 0]) == (100, 0))\n\
    assert(sum_product(numbers: [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers:\
    \ [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013823
- exit_code: 0
  program: "\n/// For a given array of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in an array.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(numbers: []\
    \ as [Int])\n/// (0, 1)\n/// >>> sum_product(numbers: [1, 2, 3, 4])\n/// (10,\
    \ 24)\nfunc sum_product(numbers: [Int]) -> (Int, Int) {\n    var sum = 0\n   \
    \ var product = 1\n    for number in numbers {\n        sum += number\n      \
    \  product *= number\n    }\n    return (sum, product)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sum_product(numbers: [] as [Int]) == (0, 1))\nassert(sum_product(numbers:\
    \ [1, 1, 1]) == (3, 1))\nassert(sum_product(numbers: [100, 0]) == (100, 0))\n\
    assert(sum_product(numbers: [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers:\
    \ [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013823
- exit_code: 0
  program: "\n/// For a given array of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in an array.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(numbers: []\
    \ as [Int])\n/// (0, 1)\n/// >>> sum_product(numbers: [1, 2, 3, 4])\n/// (10,\
    \ 24)\nfunc sum_product(numbers: [Int]) -> (Int, Int) {\n    var sum = 0\n   \
    \ var product = 1\n    for number in numbers {\n        sum += number\n      \
    \  product *= number\n    }\n    return (sum, product)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sum_product(numbers: [] as [Int]) == (0, 1))\nassert(sum_product(numbers:\
    \ [1, 1, 1]) == (3, 1))\nassert(sum_product(numbers: [100, 0]) == (100, 0))\n\
    assert(sum_product(numbers: [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers:\
    \ [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013823
- exit_code: 0
  program: "\n/// For a given array of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in an array.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(numbers: []\
    \ as [Int])\n/// (0, 1)\n/// >>> sum_product(numbers: [1, 2, 3, 4])\n/// (10,\
    \ 24)\nfunc sum_product(numbers: [Int]) -> (Int, Int) {\n    var sum = 0\n   \
    \ var product = 1\n    for number in numbers {\n        sum += number\n      \
    \  product *= number\n    }\n    return (sum, product)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sum_product(numbers: [] as [Int]) == (0, 1))\nassert(sum_product(numbers:\
    \ [1, 1, 1]) == (3, 1))\nassert(sum_product(numbers: [100, 0]) == (100, 0))\n\
    assert(sum_product(numbers: [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers:\
    \ [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013823
- exit_code: 0
  program: "\n/// For a given array of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in an array.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(numbers: []\
    \ as [Int])\n/// (0, 1)\n/// >>> sum_product(numbers: [1, 2, 3, 4])\n/// (10,\
    \ 24)\nfunc sum_product(numbers: [Int]) -> (Int, Int) {\n    var sum = 0\n   \
    \ var product = 1\n    for number in numbers {\n        sum += number\n      \
    \  product *= number\n    }\n    return (sum, product)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sum_product(numbers: [] as [Int]) == (0, 1))\nassert(sum_product(numbers:\
    \ [1, 1, 1]) == (3, 1))\nassert(sum_product(numbers: [100, 0]) == (100, 0))\n\
    assert(sum_product(numbers: [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers:\
    \ [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013823
- exit_code: -4
  program: "\n/// For a given array of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in an array.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(numbers: []\
    \ as [Int])\n/// (0, 1)\n/// >>> sum_product(numbers: [1, 2, 3, 4])\n/// (10,\
    \ 24)\nfunc sum_product(numbers: [Int]) -> (Int, Int) {\n    return (0, 1)\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sum_product(numbers: [] as [Int]) == (0, 1))\n\
    assert(sum_product(numbers: [1, 1, 1]) == (3, 1))\nassert(sum_product(numbers:\
    \ [100, 0]) == (100, 0))\nassert(sum_product(numbers: [3, 5, 7]) == (15, 105))\n\
    assert(sum_product(numbers: [10]) == (10, 10))"
  status: Exception
  stderr: 'tmp132mzun0/tmp132mzun0.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2cb5391c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2cb5088b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2cb5088988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2cb50877b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp132mzun0                        0x000055a2f6f2a4dc <unavailable> + 5340

    5    libc.so.6                          0x00002b2cb557d460 __libc_start_main +
    245

    6    tmp132mzun0                        0x000055a2f6f29fd9 <unavailable> + 4057

    '
  stdout: ''
  timestamp: 1660013823
- exit_code: 0
  program: "\n/// For a given array of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in an array.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(numbers: []\
    \ as [Int])\n/// (0, 1)\n/// >>> sum_product(numbers: [1, 2, 3, 4])\n/// (10,\
    \ 24)\nfunc sum_product(numbers: [Int]) -> (Int, Int) {\n    var sum = 0\n   \
    \ var product = 1\n    for num in numbers {\n        sum += num\n        product\
    \ *= num\n    }\n    return (sum, product)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sum_product(numbers: [] as [Int]) == (0, 1))\nassert(sum_product(numbers:\
    \ [1, 1, 1]) == (3, 1))\nassert(sum_product(numbers: [100, 0]) == (100, 0))\n\
    assert(sum_product(numbers: [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers:\
    \ [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013823
- exit_code: 0
  program: "\n/// For a given array of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in an array.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(numbers: []\
    \ as [Int])\n/// (0, 1)\n/// >>> sum_product(numbers: [1, 2, 3, 4])\n/// (10,\
    \ 24)\nfunc sum_product(numbers: [Int]) -> (Int, Int) {\n    return (numbers.reduce(0,\
    \ +), numbers.reduce(1, *))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013823
- exit_code: 0
  program: "\n/// For a given array of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in an array.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(numbers: []\
    \ as [Int])\n/// (0, 1)\n/// >>> sum_product(numbers: [1, 2, 3, 4])\n/// (10,\
    \ 24)\nfunc sum_product(numbers: [Int]) -> (Int, Int) {\n    var sum = 0\n   \
    \ var product = 1\n    for number in numbers {\n        sum += number\n      \
    \  product *= number\n    }\n    return (sum, product)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sum_product(numbers: [] as [Int]) == (0, 1))\nassert(sum_product(numbers:\
    \ [1, 1, 1]) == (3, 1))\nassert(sum_product(numbers: [100, 0]) == (100, 0))\n\
    assert(sum_product(numbers: [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers:\
    \ [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013823
- exit_code: 0
  program: "\n/// For a given array of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in an array.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(numbers: []\
    \ as [Int])\n/// (0, 1)\n/// >>> sum_product(numbers: [1, 2, 3, 4])\n/// (10,\
    \ 24)\nfunc sum_product(numbers: [Int]) -> (Int, Int) {\n    var sum = 0\n   \
    \ var product = 1\n    for number in numbers {\n        sum += number\n      \
    \  product *= number\n    }\n    return (sum, product)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sum_product(numbers: [] as [Int]) == (0, 1))\nassert(sum_product(numbers:\
    \ [1, 1, 1]) == (3, 1))\nassert(sum_product(numbers: [100, 0]) == (100, 0))\n\
    assert(sum_product(numbers: [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers:\
    \ [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013823
- exit_code: 0
  program: "\n/// For a given array of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in an array.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(numbers: []\
    \ as [Int])\n/// (0, 1)\n/// >>> sum_product(numbers: [1, 2, 3, 4])\n/// (10,\
    \ 24)\nfunc sum_product(numbers: [Int]) -> (Int, Int) {\n    var sum = 0\n   \
    \ var product = 1\n    for number in numbers {\n        sum += number\n      \
    \  product *= number\n    }\n    return (sum, product)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sum_product(numbers: [] as [Int]) == (0, 1))\nassert(sum_product(numbers:\
    \ [1, 1, 1]) == (3, 1))\nassert(sum_product(numbers: [100, 0]) == (100, 0))\n\
    assert(sum_product(numbers: [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers:\
    \ [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013823
- exit_code: 0
  program: "\n/// For a given array of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in an array.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(numbers: []\
    \ as [Int])\n/// (0, 1)\n/// >>> sum_product(numbers: [1, 2, 3, 4])\n/// (10,\
    \ 24)\nfunc sum_product(numbers: [Int]) -> (Int, Int) {\n    var sum = 0\n   \
    \ var product = 1\n    for number in numbers {\n        sum += number\n      \
    \  product *= number\n    }\n    return (sum, product)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sum_product(numbers: [] as [Int]) == (0, 1))\nassert(sum_product(numbers:\
    \ [1, 1, 1]) == (3, 1))\nassert(sum_product(numbers: [100, 0]) == (100, 0))\n\
    assert(sum_product(numbers: [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers:\
    \ [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013823
- exit_code: 0
  program: "\n/// For a given array of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in an array.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(numbers: []\
    \ as [Int])\n/// (0, 1)\n/// >>> sum_product(numbers: [1, 2, 3, 4])\n/// (10,\
    \ 24)\nfunc sum_product(numbers: [Int]) -> (Int, Int) {\n    var sum = 0\n   \
    \ var product = 1\n    for number in numbers {\n        sum += number\n      \
    \  product *= number\n    }\n    return (sum, product)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sum_product(numbers: [] as [Int]) == (0, 1))\nassert(sum_product(numbers:\
    \ [1, 1, 1]) == (3, 1))\nassert(sum_product(numbers: [100, 0]) == (100, 0))\n\
    assert(sum_product(numbers: [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers:\
    \ [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013823
- exit_code: 0
  program: "\n/// For a given array of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in an array.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(numbers: []\
    \ as [Int])\n/// (0, 1)\n/// >>> sum_product(numbers: [1, 2, 3, 4])\n/// (10,\
    \ 24)\nfunc sum_product(numbers: [Int]) -> (Int, Int) {\n    var sum = 0\n   \
    \ var product = 1\n    for number in numbers {\n        sum += number\n      \
    \  product *= number\n    }\n    return (sum, product)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sum_product(numbers: [] as [Int]) == (0, 1))\nassert(sum_product(numbers:\
    \ [1, 1, 1]) == (3, 1))\nassert(sum_product(numbers: [100, 0]) == (100, 0))\n\
    assert(sum_product(numbers: [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers:\
    \ [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013823
- exit_code: -4
  program: "\n/// For a given array of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in an array.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(numbers: []\
    \ as [Int])\n/// (0, 1)\n/// >>> sum_product(numbers: [1, 2, 3, 4])\n/// (10,\
    \ 24)\nfunc sum_product(numbers: [Int]) -> (Int, Int) {\n    return (0, 1)\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sum_product(numbers: [] as [Int]) == (0, 1))\n\
    assert(sum_product(numbers: [1, 1, 1]) == (3, 1))\nassert(sum_product(numbers:\
    \ [100, 0]) == (100, 0))\nassert(sum_product(numbers: [3, 5, 7]) == (15, 105))\n\
    assert(sum_product(numbers: [10]) == (10, 10))"
  status: Exception
  stderr: 'tmp132mzun0/tmp132mzun0.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2cb5391c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2cb5088b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2cb5088988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2cb50877b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp132mzun0                        0x000055a2f6f2a4dc <unavailable> + 5340

    5    libc.so.6                          0x00002b2cb557d460 __libc_start_main +
    245

    6    tmp132mzun0                        0x000055a2f6f29fd9 <unavailable> + 4057

    '
  stdout: ''
  timestamp: 1660013823
- exit_code: 0
  program: "\n/// For a given array of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in an array.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(numbers: []\
    \ as [Int])\n/// (0, 1)\n/// >>> sum_product(numbers: [1, 2, 3, 4])\n/// (10,\
    \ 24)\nfunc sum_product(numbers: [Int]) -> (Int, Int) {\n    return (numbers.reduce(0,\
    \ +), numbers.reduce(1, *))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013823
- exit_code: 0
  program: "\n/// For a given array of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in an array.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(numbers: []\
    \ as [Int])\n/// (0, 1)\n/// >>> sum_product(numbers: [1, 2, 3, 4])\n/// (10,\
    \ 24)\nfunc sum_product(numbers: [Int]) -> (Int, Int) {\n    var sum = 0\n   \
    \ var product = 1\n    for number in numbers {\n        sum += number\n      \
    \  product *= number\n    }\n    return (sum, product)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sum_product(numbers: [] as [Int]) == (0, 1))\nassert(sum_product(numbers:\
    \ [1, 1, 1]) == (3, 1))\nassert(sum_product(numbers: [100, 0]) == (100, 0))\n\
    assert(sum_product(numbers: [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers:\
    \ [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013823
- exit_code: 0
  program: "\n/// For a given array of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in an array.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(numbers: []\
    \ as [Int])\n/// (0, 1)\n/// >>> sum_product(numbers: [1, 2, 3, 4])\n/// (10,\
    \ 24)\nfunc sum_product(numbers: [Int]) -> (Int, Int) {\n    var sum = 0\n   \
    \ var product = 1\n    for number in numbers {\n        sum += number\n      \
    \  product *= number\n    }\n    return (sum, product)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sum_product(numbers: [] as [Int]) == (0, 1))\nassert(sum_product(numbers:\
    \ [1, 1, 1]) == (3, 1))\nassert(sum_product(numbers: [100, 0]) == (100, 0))\n\
    assert(sum_product(numbers: [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers:\
    \ [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013823
- exit_code: 0
  program: "\n/// For a given array of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in an array.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(numbers: []\
    \ as [Int])\n/// (0, 1)\n/// >>> sum_product(numbers: [1, 2, 3, 4])\n/// (10,\
    \ 24)\nfunc sum_product(numbers: [Int]) -> (Int, Int) {\n    var sum = 0\n   \
    \ var product = 1\n    for number in numbers {\n        sum += number\n      \
    \  product *= number\n    }\n    return (sum, product)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sum_product(numbers: [] as [Int]) == (0, 1))\nassert(sum_product(numbers:\
    \ [1, 1, 1]) == (3, 1))\nassert(sum_product(numbers: [100, 0]) == (100, 0))\n\
    assert(sum_product(numbers: [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers:\
    \ [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013823
- exit_code: 0
  program: "\n/// For a given array of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in an array.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(numbers: []\
    \ as [Int])\n/// (0, 1)\n/// >>> sum_product(numbers: [1, 2, 3, 4])\n/// (10,\
    \ 24)\nfunc sum_product(numbers: [Int]) -> (Int, Int) {\n    var sum = 0\n   \
    \ var product = 1\n    for number in numbers {\n        sum += number\n      \
    \  product *= number\n    }\n    return (sum, product)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sum_product(numbers: [] as [Int]) == (0, 1))\nassert(sum_product(numbers:\
    \ [1, 1, 1]) == (3, 1))\nassert(sum_product(numbers: [100, 0]) == (100, 0))\n\
    assert(sum_product(numbers: [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers:\
    \ [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013823
- exit_code: 0
  program: "\n/// For a given array of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in an array.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(numbers: []\
    \ as [Int])\n/// (0, 1)\n/// >>> sum_product(numbers: [1, 2, 3, 4])\n/// (10,\
    \ 24)\nfunc sum_product(numbers: [Int]) -> (Int, Int) {\n    var sum = 0\n   \
    \ var product = 1\n    for number in numbers {\n        sum += number\n      \
    \  product *= number\n    }\n    return (sum, product)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sum_product(numbers: [] as [Int]) == (0, 1))\nassert(sum_product(numbers:\
    \ [1, 1, 1]) == (3, 1))\nassert(sum_product(numbers: [100, 0]) == (100, 0))\n\
    assert(sum_product(numbers: [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers:\
    \ [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013823
- exit_code: 0
  program: "\n/// For a given array of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in an array.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(numbers: []\
    \ as [Int])\n/// (0, 1)\n/// >>> sum_product(numbers: [1, 2, 3, 4])\n/// (10,\
    \ 24)\nfunc sum_product(numbers: [Int]) -> (Int, Int) {\n    return (numbers.reduce(0,\
    \ +), numbers.reduce(1, *))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013823
- exit_code: 0
  program: "\n/// For a given array of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in an array.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(numbers: []\
    \ as [Int])\n/// (0, 1)\n/// >>> sum_product(numbers: [1, 2, 3, 4])\n/// (10,\
    \ 24)\nfunc sum_product(numbers: [Int]) -> (Int, Int) {\n    var sum = 0\n   \
    \ var product = 1\n    for number in numbers {\n        sum += number\n      \
    \  product *= number\n    }\n    return (sum, product)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sum_product(numbers: [] as [Int]) == (0, 1))\nassert(sum_product(numbers:\
    \ [1, 1, 1]) == (3, 1))\nassert(sum_product(numbers: [100, 0]) == (100, 0))\n\
    assert(sum_product(numbers: [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers:\
    \ [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013823
- exit_code: 0
  program: "\n/// For a given array of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in an array.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(numbers: []\
    \ as [Int])\n/// (0, 1)\n/// >>> sum_product(numbers: [1, 2, 3, 4])\n/// (10,\
    \ 24)\nfunc sum_product(numbers: [Int]) -> (Int, Int) {\n    var sum = 0\n   \
    \ var product = 1\n    for number in numbers {\n        sum += number\n      \
    \  product *= number\n    }\n    return (sum, product)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sum_product(numbers: [] as [Int]) == (0, 1))\nassert(sum_product(numbers:\
    \ [1, 1, 1]) == (3, 1))\nassert(sum_product(numbers: [100, 0]) == (100, 0))\n\
    assert(sum_product(numbers: [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers:\
    \ [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013823
- exit_code: 0
  program: "\n/// For a given array of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in an array.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(numbers: []\
    \ as [Int])\n/// (0, 1)\n/// >>> sum_product(numbers: [1, 2, 3, 4])\n/// (10,\
    \ 24)\nfunc sum_product(numbers: [Int]) -> (Int, Int) {\n    var sum = 0\n   \
    \ var product = 1\n    for number in numbers {\n        sum += number\n      \
    \  product *= number\n    }\n    return (sum, product)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sum_product(numbers: [] as [Int]) == (0, 1))\nassert(sum_product(numbers:\
    \ [1, 1, 1]) == (3, 1))\nassert(sum_product(numbers: [100, 0]) == (100, 0))\n\
    assert(sum_product(numbers: [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers:\
    \ [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013823
- exit_code: 0
  program: "\n/// For a given array of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in an array.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(numbers: []\
    \ as [Int])\n/// (0, 1)\n/// >>> sum_product(numbers: [1, 2, 3, 4])\n/// (10,\
    \ 24)\nfunc sum_product(numbers: [Int]) -> (Int, Int) {\n    var sum = 0\n   \
    \ var product = 1\n    for number in numbers {\n        sum += number\n      \
    \  product *= number\n    }\n    return (sum, product)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sum_product(numbers: [] as [Int]) == (0, 1))\nassert(sum_product(numbers:\
    \ [1, 1, 1]) == (3, 1))\nassert(sum_product(numbers: [100, 0]) == (100, 0))\n\
    assert(sum_product(numbers: [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers:\
    \ [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013823
- exit_code: 0
  program: "\n/// For a given array of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in an array.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(numbers: []\
    \ as [Int])\n/// (0, 1)\n/// >>> sum_product(numbers: [1, 2, 3, 4])\n/// (10,\
    \ 24)\nfunc sum_product(numbers: [Int]) -> (Int, Int) {\n    var sum = 0\n   \
    \ var product = 1\n    for number in numbers {\n        sum += number\n      \
    \  product *= number\n    }\n    return (sum, product)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sum_product(numbers: [] as [Int]) == (0, 1))\nassert(sum_product(numbers:\
    \ [1, 1, 1]) == (3, 1))\nassert(sum_product(numbers: [100, 0]) == (100, 0))\n\
    assert(sum_product(numbers: [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers:\
    \ [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013823
- exit_code: 0
  program: "\n/// For a given array of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in an array.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(numbers: []\
    \ as [Int])\n/// (0, 1)\n/// >>> sum_product(numbers: [1, 2, 3, 4])\n/// (10,\
    \ 24)\nfunc sum_product(numbers: [Int]) -> (Int, Int) {\n    var sum = 0\n   \
    \ var product = 1\n    for number in numbers {\n        sum += number\n      \
    \  product *= number\n    }\n    return (sum, product)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sum_product(numbers: [] as [Int]) == (0, 1))\nassert(sum_product(numbers:\
    \ [1, 1, 1]) == (3, 1))\nassert(sum_product(numbers: [100, 0]) == (100, 0))\n\
    assert(sum_product(numbers: [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers:\
    \ [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013823
- exit_code: 0
  program: "\n/// For a given array of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in an array.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(numbers: []\
    \ as [Int])\n/// (0, 1)\n/// >>> sum_product(numbers: [1, 2, 3, 4])\n/// (10,\
    \ 24)\nfunc sum_product(numbers: [Int]) -> (Int, Int) {\n    var sum = 0\n   \
    \ var product = 1\n    for number in numbers {\n        sum += number\n      \
    \  product *= number\n    }\n    return (sum, product)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sum_product(numbers: [] as [Int]) == (0, 1))\nassert(sum_product(numbers:\
    \ [1, 1, 1]) == (3, 1))\nassert(sum_product(numbers: [100, 0]) == (100, 0))\n\
    assert(sum_product(numbers: [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers:\
    \ [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013823
- exit_code: 0
  program: "\n/// For a given array of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in an array.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(numbers: []\
    \ as [Int])\n/// (0, 1)\n/// >>> sum_product(numbers: [1, 2, 3, 4])\n/// (10,\
    \ 24)\nfunc sum_product(numbers: [Int]) -> (Int, Int) {\n    var sum = 0\n   \
    \ var product = 1\n    for number in numbers {\n        sum += number\n      \
    \  product *= number\n    }\n    return (sum, product)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sum_product(numbers: [] as [Int]) == (0, 1))\nassert(sum_product(numbers:\
    \ [1, 1, 1]) == (3, 1))\nassert(sum_product(numbers: [100, 0]) == (100, 0))\n\
    assert(sum_product(numbers: [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers:\
    \ [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013823
- exit_code: 0
  program: "\n/// For a given array of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in an array.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(numbers: []\
    \ as [Int])\n/// (0, 1)\n/// >>> sum_product(numbers: [1, 2, 3, 4])\n/// (10,\
    \ 24)\nfunc sum_product(numbers: [Int]) -> (Int, Int) {\n    var sum = 0\n   \
    \ var product = 1\n    for number in numbers {\n        sum += number\n      \
    \  product *= number\n    }\n    return (sum, product)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sum_product(numbers: [] as [Int]) == (0, 1))\nassert(sum_product(numbers:\
    \ [1, 1, 1]) == (3, 1))\nassert(sum_product(numbers: [100, 0]) == (100, 0))\n\
    assert(sum_product(numbers: [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers:\
    \ [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013823
- exit_code: 0
  program: "\n/// For a given array of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in an array.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(numbers: []\
    \ as [Int])\n/// (0, 1)\n/// >>> sum_product(numbers: [1, 2, 3, 4])\n/// (10,\
    \ 24)\nfunc sum_product(numbers: [Int]) -> (Int, Int) {\n    var sum = 0\n   \
    \ var product = 1\n    for number in numbers {\n        sum += number\n      \
    \  product *= number\n    }\n    return (sum, product)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sum_product(numbers: [] as [Int]) == (0, 1))\nassert(sum_product(numbers:\
    \ [1, 1, 1]) == (3, 1))\nassert(sum_product(numbers: [100, 0]) == (100, 0))\n\
    assert(sum_product(numbers: [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers:\
    \ [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013823
- exit_code: 0
  program: "\n/// For a given array of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in an array.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(numbers: []\
    \ as [Int])\n/// (0, 1)\n/// >>> sum_product(numbers: [1, 2, 3, 4])\n/// (10,\
    \ 24)\nfunc sum_product(numbers: [Int]) -> (Int, Int) {\n    return (numbers.reduce(0,\
    \ +), numbers.reduce(1, *))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013823
- exit_code: 0
  program: "\n/// For a given array of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in an array.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(numbers: []\
    \ as [Int])\n/// (0, 1)\n/// >>> sum_product(numbers: [1, 2, 3, 4])\n/// (10,\
    \ 24)\nfunc sum_product(numbers: [Int]) -> (Int, Int) {\n    return (numbers.reduce(0,\
    \ +), numbers.reduce(1, *))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013823
- exit_code: 0
  program: "\n/// For a given array of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in an array.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(numbers: []\
    \ as [Int])\n/// (0, 1)\n/// >>> sum_product(numbers: [1, 2, 3, 4])\n/// (10,\
    \ 24)\nfunc sum_product(numbers: [Int]) -> (Int, Int) {\n    var sum = 0\n   \
    \ var product = 1\n    for number in numbers {\n        sum += number\n      \
    \  product *= number\n    }\n    return (sum, product)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sum_product(numbers: [] as [Int]) == (0, 1))\nassert(sum_product(numbers:\
    \ [1, 1, 1]) == (3, 1))\nassert(sum_product(numbers: [100, 0]) == (100, 0))\n\
    assert(sum_product(numbers: [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers:\
    \ [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013823
- exit_code: 0
  program: "\n/// For a given array of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in an array.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(numbers: []\
    \ as [Int])\n/// (0, 1)\n/// >>> sum_product(numbers: [1, 2, 3, 4])\n/// (10,\
    \ 24)\nfunc sum_product(numbers: [Int]) -> (Int, Int) {\n    var sum = 0\n   \
    \ var product = 1\n    for num in numbers {\n        sum += num\n        product\
    \ *= num\n    }\n    return (sum, product)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sum_product(numbers: [] as [Int]) == (0, 1))\nassert(sum_product(numbers:\
    \ [1, 1, 1]) == (3, 1))\nassert(sum_product(numbers: [100, 0]) == (100, 0))\n\
    assert(sum_product(numbers: [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers:\
    \ [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013823
- exit_code: 0
  program: "\n/// For a given array of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in an array.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(numbers: []\
    \ as [Int])\n/// (0, 1)\n/// >>> sum_product(numbers: [1, 2, 3, 4])\n/// (10,\
    \ 24)\nfunc sum_product(numbers: [Int]) -> (Int, Int) {\n    var sum = 0\n   \
    \ var product = 1\n    for number in numbers {\n        sum += number\n      \
    \  product *= number\n    }\n    return (sum, product)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sum_product(numbers: [] as [Int]) == (0, 1))\nassert(sum_product(numbers:\
    \ [1, 1, 1]) == (3, 1))\nassert(sum_product(numbers: [100, 0]) == (100, 0))\n\
    assert(sum_product(numbers: [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers:\
    \ [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013823
- exit_code: 0
  program: "\n/// For a given array of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in an array.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(numbers: []\
    \ as [Int])\n/// (0, 1)\n/// >>> sum_product(numbers: [1, 2, 3, 4])\n/// (10,\
    \ 24)\nfunc sum_product(numbers: [Int]) -> (Int, Int) {\n    return (numbers.reduce(0,\
    \ +), numbers.reduce(1, *))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013823
- exit_code: 0
  program: "\n/// For a given array of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in an array.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(numbers: []\
    \ as [Int])\n/// (0, 1)\n/// >>> sum_product(numbers: [1, 2, 3, 4])\n/// (10,\
    \ 24)\nfunc sum_product(numbers: [Int]) -> (Int, Int) {\n    return (numbers.reduce(0,\
    \ +), numbers.reduce(1, *))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013823
- exit_code: 0
  program: "\n/// For a given array of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in an array.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(numbers: []\
    \ as [Int])\n/// (0, 1)\n/// >>> sum_product(numbers: [1, 2, 3, 4])\n/// (10,\
    \ 24)\nfunc sum_product(numbers: [Int]) -> (Int, Int) {\n    let sum = numbers.reduce(0,\
    \ +)\n    let product = numbers.reduce(1, *)\n    return (sum, product)\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sum_product(numbers: [] as [Int]) == (0, 1))\n\
    assert(sum_product(numbers: [1, 1, 1]) == (3, 1))\nassert(sum_product(numbers:\
    \ [100, 0]) == (100, 0))\nassert(sum_product(numbers: [3, 5, 7]) == (15, 105))\n\
    assert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013823
- exit_code: 0
  program: "\n/// For a given array of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in an array.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(numbers: []\
    \ as [Int])\n/// (0, 1)\n/// >>> sum_product(numbers: [1, 2, 3, 4])\n/// (10,\
    \ 24)\nfunc sum_product(numbers: [Int]) -> (Int, Int) {\n    var sum = 0\n   \
    \ var product = 1\n    for number in numbers {\n        sum += number\n      \
    \  product *= number\n    }\n    return (sum, product)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sum_product(numbers: [] as [Int]) == (0, 1))\nassert(sum_product(numbers:\
    \ [1, 1, 1]) == (3, 1))\nassert(sum_product(numbers: [100, 0]) == (100, 0))\n\
    assert(sum_product(numbers: [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers:\
    \ [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013823
- exit_code: 0
  program: "\n/// For a given array of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in an array.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(numbers: []\
    \ as [Int])\n/// (0, 1)\n/// >>> sum_product(numbers: [1, 2, 3, 4])\n/// (10,\
    \ 24)\nfunc sum_product(numbers: [Int]) -> (Int, Int) {\n    return (numbers.reduce(0,\
    \ +), numbers.reduce(1, *))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013823
- exit_code: 0
  program: "\n/// For a given array of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in an array.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(numbers: []\
    \ as [Int])\n/// (0, 1)\n/// >>> sum_product(numbers: [1, 2, 3, 4])\n/// (10,\
    \ 24)\nfunc sum_product(numbers: [Int]) -> (Int, Int) {\n    var sum = 0\n   \
    \ var product = 1\n    for number in numbers {\n        sum += number\n      \
    \  product *= number\n    }\n    return (sum, product)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sum_product(numbers: [] as [Int]) == (0, 1))\nassert(sum_product(numbers:\
    \ [1, 1, 1]) == (3, 1))\nassert(sum_product(numbers: [100, 0]) == (100, 0))\n\
    assert(sum_product(numbers: [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers:\
    \ [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013823
- exit_code: 0
  program: "\n/// For a given array of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in an array.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(numbers: []\
    \ as [Int])\n/// (0, 1)\n/// >>> sum_product(numbers: [1, 2, 3, 4])\n/// (10,\
    \ 24)\nfunc sum_product(numbers: [Int]) -> (Int, Int) {\n    return (numbers.reduce(0,\
    \ +), numbers.reduce(1, *))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013823
- exit_code: 0
  program: "\n/// For a given array of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in an array.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(numbers: []\
    \ as [Int])\n/// (0, 1)\n/// >>> sum_product(numbers: [1, 2, 3, 4])\n/// (10,\
    \ 24)\nfunc sum_product(numbers: [Int]) -> (Int, Int) {\n    return (numbers.reduce(0,\
    \ +), numbers.reduce(1, *))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013823
- exit_code: 0
  program: "\n/// For a given array of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in an array.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(numbers: []\
    \ as [Int])\n/// (0, 1)\n/// >>> sum_product(numbers: [1, 2, 3, 4])\n/// (10,\
    \ 24)\nfunc sum_product(numbers: [Int]) -> (Int, Int) {\n    var sum = 0\n   \
    \ var product = 1\n    for number in numbers {\n        sum += number\n      \
    \  product *= number\n    }\n    return (sum, product)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sum_product(numbers: [] as [Int]) == (0, 1))\nassert(sum_product(numbers:\
    \ [1, 1, 1]) == (3, 1))\nassert(sum_product(numbers: [100, 0]) == (100, 0))\n\
    assert(sum_product(numbers: [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers:\
    \ [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013823
- exit_code: 0
  program: "\n/// For a given array of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in an array.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(numbers: []\
    \ as [Int])\n/// (0, 1)\n/// >>> sum_product(numbers: [1, 2, 3, 4])\n/// (10,\
    \ 24)\nfunc sum_product(numbers: [Int]) -> (Int, Int) {\n    var sum = 0\n   \
    \ var product = 1\n    for number in numbers {\n        sum += number\n      \
    \  product *= number\n    }\n    return (sum, product)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sum_product(numbers: [] as [Int]) == (0, 1))\nassert(sum_product(numbers:\
    \ [1, 1, 1]) == (3, 1))\nassert(sum_product(numbers: [100, 0]) == (100, 0))\n\
    assert(sum_product(numbers: [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers:\
    \ [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013823
- exit_code: 0
  program: "\n/// For a given array of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in an array.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(numbers: []\
    \ as [Int])\n/// (0, 1)\n/// >>> sum_product(numbers: [1, 2, 3, 4])\n/// (10,\
    \ 24)\nfunc sum_product(numbers: [Int]) -> (Int, Int) {\n    var sum = 0\n   \
    \ var product = 1\n    for number in numbers {\n        sum += number\n      \
    \  product *= number\n    }\n    return (sum, product)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sum_product(numbers: [] as [Int]) == (0, 1))\nassert(sum_product(numbers:\
    \ [1, 1, 1]) == (3, 1))\nassert(sum_product(numbers: [100, 0]) == (100, 0))\n\
    assert(sum_product(numbers: [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers:\
    \ [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013823
- exit_code: 0
  program: "\n/// For a given array of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in an array.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(numbers: []\
    \ as [Int])\n/// (0, 1)\n/// >>> sum_product(numbers: [1, 2, 3, 4])\n/// (10,\
    \ 24)\nfunc sum_product(numbers: [Int]) -> (Int, Int) {\n    let sum = numbers.reduce(0,\
    \ +)\n    let product = numbers.reduce(1, *)\n    return (sum, product)\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sum_product(numbers: [] as [Int]) == (0, 1))\n\
    assert(sum_product(numbers: [1, 1, 1]) == (3, 1))\nassert(sum_product(numbers:\
    \ [100, 0]) == (100, 0))\nassert(sum_product(numbers: [3, 5, 7]) == (15, 105))\n\
    assert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013823
- exit_code: 0
  program: "\n/// For a given array of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in an array.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(numbers: []\
    \ as [Int])\n/// (0, 1)\n/// >>> sum_product(numbers: [1, 2, 3, 4])\n/// (10,\
    \ 24)\nfunc sum_product(numbers: [Int]) -> (Int, Int) {\n    return (numbers.reduce(0,\
    \ +), numbers.reduce(1, *))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013823
- exit_code: 0
  program: "\n/// For a given array of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in an array.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(numbers: []\
    \ as [Int])\n/// (0, 1)\n/// >>> sum_product(numbers: [1, 2, 3, 4])\n/// (10,\
    \ 24)\nfunc sum_product(numbers: [Int]) -> (Int, Int) {\n    var sum = 0\n   \
    \ var product = 1\n    for number in numbers {\n        sum += number\n      \
    \  product *= number\n    }\n    return (sum, product)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sum_product(numbers: [] as [Int]) == (0, 1))\nassert(sum_product(numbers:\
    \ [1, 1, 1]) == (3, 1))\nassert(sum_product(numbers: [100, 0]) == (100, 0))\n\
    assert(sum_product(numbers: [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers:\
    \ [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013823
- exit_code: 0
  program: "\n/// For a given array of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in an array.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(numbers: []\
    \ as [Int])\n/// (0, 1)\n/// >>> sum_product(numbers: [1, 2, 3, 4])\n/// (10,\
    \ 24)\nfunc sum_product(numbers: [Int]) -> (Int, Int) {\n    var sum = 0\n   \
    \ var product = 1\n    for number in numbers {\n        sum += number\n      \
    \  product *= number\n    }\n    return (sum, product)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sum_product(numbers: [] as [Int]) == (0, 1))\nassert(sum_product(numbers:\
    \ [1, 1, 1]) == (3, 1))\nassert(sum_product(numbers: [100, 0]) == (100, 0))\n\
    assert(sum_product(numbers: [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers:\
    \ [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013823
- exit_code: 0
  program: "\n/// For a given array of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in an array.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(numbers: []\
    \ as [Int])\n/// (0, 1)\n/// >>> sum_product(numbers: [1, 2, 3, 4])\n/// (10,\
    \ 24)\nfunc sum_product(numbers: [Int]) -> (Int, Int) {\n    return (numbers.reduce(0,\
    \ +), numbers.reduce(1, *))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013823
- exit_code: 0
  program: "\n/// For a given array of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in an array.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(numbers: []\
    \ as [Int])\n/// (0, 1)\n/// >>> sum_product(numbers: [1, 2, 3, 4])\n/// (10,\
    \ 24)\nfunc sum_product(numbers: [Int]) -> (Int, Int) {\n    var sum = 0\n   \
    \ var product = 1\n    for number in numbers {\n        sum += number\n      \
    \  product *= number\n    }\n    return (sum, product)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sum_product(numbers: [] as [Int]) == (0, 1))\nassert(sum_product(numbers:\
    \ [1, 1, 1]) == (3, 1))\nassert(sum_product(numbers: [100, 0]) == (100, 0))\n\
    assert(sum_product(numbers: [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers:\
    \ [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013823
- exit_code: -4
  program: "\n/// For a given array of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in an array.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(numbers: []\
    \ as [Int])\n/// (0, 1)\n/// >>> sum_product(numbers: [1, 2, 3, 4])\n/// (10,\
    \ 24)\nfunc sum_product(numbers: [Int]) -> (Int, Int) {\n    return (0, 0)\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sum_product(numbers: [] as [Int]) == (0, 1))\n\
    assert(sum_product(numbers: [1, 1, 1]) == (3, 1))\nassert(sum_product(numbers:\
    \ [100, 0]) == (100, 0))\nassert(sum_product(numbers: [3, 5, 7]) == (15, 105))\n\
    assert(sum_product(numbers: [10]) == (10, 10))"
  status: Exception
  stderr: 'tmpsl_f682z/tmpsl_f682z.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b390158ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3901285b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3901285988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b39012847b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsl_f682z                        0x0000562add7753b1 <unavailable> + 5041

    5    libc.so.6                          0x00002b390177a460 __libc_start_main +
    245

    6    tmpsl_f682z                        0x0000562add774fd9 <unavailable> + 4057

    '
  stdout: ''
  timestamp: 1660013823
- exit_code: 0
  program: "\n/// For a given array of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in an array.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(numbers: []\
    \ as [Int])\n/// (0, 1)\n/// >>> sum_product(numbers: [1, 2, 3, 4])\n/// (10,\
    \ 24)\nfunc sum_product(numbers: [Int]) -> (Int, Int) {\n    var sum = 0\n   \
    \ var product = 1\n    for number in numbers {\n        sum += number\n      \
    \  product *= number\n    }\n    return (sum, product)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sum_product(numbers: [] as [Int]) == (0, 1))\nassert(sum_product(numbers:\
    \ [1, 1, 1]) == (3, 1))\nassert(sum_product(numbers: [100, 0]) == (100, 0))\n\
    assert(sum_product(numbers: [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers:\
    \ [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013823
- exit_code: 0
  program: "\n/// For a given array of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in an array.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(numbers: []\
    \ as [Int])\n/// (0, 1)\n/// >>> sum_product(numbers: [1, 2, 3, 4])\n/// (10,\
    \ 24)\nfunc sum_product(numbers: [Int]) -> (Int, Int) {\n    return (numbers.reduce(0,\
    \ +), numbers.reduce(1, *))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013823
- exit_code: 0
  program: "\n/// For a given array of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in an array.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(numbers: []\
    \ as [Int])\n/// (0, 1)\n/// >>> sum_product(numbers: [1, 2, 3, 4])\n/// (10,\
    \ 24)\nfunc sum_product(numbers: [Int]) -> (Int, Int) {\n    return (numbers.reduce(0,\
    \ +), numbers.reduce(1, *))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013823
- exit_code: 0
  program: "\n/// For a given array of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in an array.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(numbers: []\
    \ as [Int])\n/// (0, 1)\n/// >>> sum_product(numbers: [1, 2, 3, 4])\n/// (10,\
    \ 24)\nfunc sum_product(numbers: [Int]) -> (Int, Int) {\n    var sum = 0\n   \
    \ var product = 1\n    for number in numbers {\n        sum += number\n      \
    \  product *= number\n    }\n    return (sum, product)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sum_product(numbers: [] as [Int]) == (0, 1))\nassert(sum_product(numbers:\
    \ [1, 1, 1]) == (3, 1))\nassert(sum_product(numbers: [100, 0]) == (100, 0))\n\
    assert(sum_product(numbers: [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers:\
    \ [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013823
- exit_code: 0
  program: "\n/// For a given array of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in an array.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(numbers: []\
    \ as [Int])\n/// (0, 1)\n/// >>> sum_product(numbers: [1, 2, 3, 4])\n/// (10,\
    \ 24)\nfunc sum_product(numbers: [Int]) -> (Int, Int) {\n    var sum = 0\n   \
    \ var product = 1\n    for number in numbers {\n        sum += number\n      \
    \  product *= number\n    }\n    return (sum, product)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sum_product(numbers: [] as [Int]) == (0, 1))\nassert(sum_product(numbers:\
    \ [1, 1, 1]) == (3, 1))\nassert(sum_product(numbers: [100, 0]) == (100, 0))\n\
    assert(sum_product(numbers: [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers:\
    \ [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013823
- exit_code: 0
  program: "\n/// For a given array of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in an array.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(numbers: []\
    \ as [Int])\n/// (0, 1)\n/// >>> sum_product(numbers: [1, 2, 3, 4])\n/// (10,\
    \ 24)\nfunc sum_product(numbers: [Int]) -> (Int, Int) {\n    var sum = 0\n   \
    \ var product = 1\n    for number in numbers {\n        sum += number\n      \
    \  product *= number\n    }\n    return (sum, product)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sum_product(numbers: [] as [Int]) == (0, 1))\nassert(sum_product(numbers:\
    \ [1, 1, 1]) == (3, 1))\nassert(sum_product(numbers: [100, 0]) == (100, 0))\n\
    assert(sum_product(numbers: [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers:\
    \ [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013823
- exit_code: 0
  program: "\n/// For a given array of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in an array.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(numbers: []\
    \ as [Int])\n/// (0, 1)\n/// >>> sum_product(numbers: [1, 2, 3, 4])\n/// (10,\
    \ 24)\nfunc sum_product(numbers: [Int]) -> (Int, Int) {\n    var sum = 0\n   \
    \ var product = 1\n    for number in numbers {\n        sum += number\n      \
    \  product *= number\n    }\n    return (sum, product)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sum_product(numbers: [] as [Int]) == (0, 1))\nassert(sum_product(numbers:\
    \ [1, 1, 1]) == (3, 1))\nassert(sum_product(numbers: [100, 0]) == (100, 0))\n\
    assert(sum_product(numbers: [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers:\
    \ [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013823
- exit_code: 0
  program: "\n/// For a given array of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in an array.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(numbers: []\
    \ as [Int])\n/// (0, 1)\n/// >>> sum_product(numbers: [1, 2, 3, 4])\n/// (10,\
    \ 24)\nfunc sum_product(numbers: [Int]) -> (Int, Int) {\n    var sum = 0\n   \
    \ var product = 1\n    for number in numbers {\n        sum += number\n      \
    \  product *= number\n    }\n    return (sum, product)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sum_product(numbers: [] as [Int]) == (0, 1))\nassert(sum_product(numbers:\
    \ [1, 1, 1]) == (3, 1))\nassert(sum_product(numbers: [100, 0]) == (100, 0))\n\
    assert(sum_product(numbers: [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers:\
    \ [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013823
- exit_code: 0
  program: "\n/// For a given array of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in an array.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(numbers: []\
    \ as [Int])\n/// (0, 1)\n/// >>> sum_product(numbers: [1, 2, 3, 4])\n/// (10,\
    \ 24)\nfunc sum_product(numbers: [Int]) -> (Int, Int) {\n    var sum = 0\n   \
    \ var product = 1\n    for number in numbers {\n        sum += number\n      \
    \  product *= number\n    }\n    return (sum, product)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sum_product(numbers: [] as [Int]) == (0, 1))\nassert(sum_product(numbers:\
    \ [1, 1, 1]) == (3, 1))\nassert(sum_product(numbers: [100, 0]) == (100, 0))\n\
    assert(sum_product(numbers: [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers:\
    \ [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013823
- exit_code: 0
  program: "\n/// For a given array of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in an array.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(numbers: []\
    \ as [Int])\n/// (0, 1)\n/// >>> sum_product(numbers: [1, 2, 3, 4])\n/// (10,\
    \ 24)\nfunc sum_product(numbers: [Int]) -> (Int, Int) {\n    var sum = 0\n   \
    \ var product = 1\n    for number in numbers {\n        sum += number\n      \
    \  product *= number\n    }\n    return (sum, product)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sum_product(numbers: [] as [Int]) == (0, 1))\nassert(sum_product(numbers:\
    \ [1, 1, 1]) == (3, 1))\nassert(sum_product(numbers: [100, 0]) == (100, 0))\n\
    assert(sum_product(numbers: [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers:\
    \ [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013823
- exit_code: 0
  program: "\n/// For a given array of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in an array.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(numbers: []\
    \ as [Int])\n/// (0, 1)\n/// >>> sum_product(numbers: [1, 2, 3, 4])\n/// (10,\
    \ 24)\nfunc sum_product(numbers: [Int]) -> (Int, Int) {\n    var sum = 0\n   \
    \ var product = 1\n    for number in numbers {\n        sum += number\n      \
    \  product *= number\n    }\n    return (sum, product)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sum_product(numbers: [] as [Int]) == (0, 1))\nassert(sum_product(numbers:\
    \ [1, 1, 1]) == (3, 1))\nassert(sum_product(numbers: [100, 0]) == (100, 0))\n\
    assert(sum_product(numbers: [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers:\
    \ [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013823
- exit_code: 0
  program: "\n/// For a given array of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in an array.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(numbers: []\
    \ as [Int])\n/// (0, 1)\n/// >>> sum_product(numbers: [1, 2, 3, 4])\n/// (10,\
    \ 24)\nfunc sum_product(numbers: [Int]) -> (Int, Int) {\n    return (numbers.reduce(0,\
    \ +), numbers.reduce(1, *))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013823
- exit_code: 0
  program: "\n/// For a given array of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in an array.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(numbers: []\
    \ as [Int])\n/// (0, 1)\n/// >>> sum_product(numbers: [1, 2, 3, 4])\n/// (10,\
    \ 24)\nfunc sum_product(numbers: [Int]) -> (Int, Int) {\n    var sum = 0\n   \
    \ var product = 1\n    for number in numbers {\n        sum += number\n      \
    \  product *= number\n    }\n    return (sum, product)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sum_product(numbers: [] as [Int]) == (0, 1))\nassert(sum_product(numbers:\
    \ [1, 1, 1]) == (3, 1))\nassert(sum_product(numbers: [100, 0]) == (100, 0))\n\
    assert(sum_product(numbers: [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers:\
    \ [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013823
- exit_code: 0
  program: "\n/// For a given array of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in an array.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(numbers: []\
    \ as [Int])\n/// (0, 1)\n/// >>> sum_product(numbers: [1, 2, 3, 4])\n/// (10,\
    \ 24)\nfunc sum_product(numbers: [Int]) -> (Int, Int) {\n    return (numbers.reduce(0,\
    \ +), numbers.reduce(1, *))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013823
- exit_code: -4
  program: "\n/// For a given array of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in an array.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(numbers: []\
    \ as [Int])\n/// (0, 1)\n/// >>> sum_product(numbers: [1, 2, 3, 4])\n/// (10,\
    \ 24)\nfunc sum_product(numbers: [Int]) -> (Int, Int) {\n    return (0, 0)\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sum_product(numbers: [] as [Int]) == (0, 1))\n\
    assert(sum_product(numbers: [1, 1, 1]) == (3, 1))\nassert(sum_product(numbers:\
    \ [100, 0]) == (100, 0))\nassert(sum_product(numbers: [3, 5, 7]) == (15, 105))\n\
    assert(sum_product(numbers: [10]) == (10, 10))"
  status: Exception
  stderr: 'tmpsl_f682z/tmpsl_f682z.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b390158ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3901285b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3901285988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b39012847b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsl_f682z                        0x0000562add7753b1 <unavailable> + 5041

    5    libc.so.6                          0x00002b390177a460 __libc_start_main +
    245

    6    tmpsl_f682z                        0x0000562add774fd9 <unavailable> + 4057

    '
  stdout: ''
  timestamp: 1660013823
- exit_code: 0
  program: "\n/// For a given array of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in an array.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(numbers: []\
    \ as [Int])\n/// (0, 1)\n/// >>> sum_product(numbers: [1, 2, 3, 4])\n/// (10,\
    \ 24)\nfunc sum_product(numbers: [Int]) -> (Int, Int) {\n    var sum = 0\n   \
    \ var product = 1\n    for number in numbers {\n        sum += number\n      \
    \  product *= number\n    }\n    return (sum, product)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sum_product(numbers: [] as [Int]) == (0, 1))\nassert(sum_product(numbers:\
    \ [1, 1, 1]) == (3, 1))\nassert(sum_product(numbers: [100, 0]) == (100, 0))\n\
    assert(sum_product(numbers: [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers:\
    \ [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013823
- exit_code: 0
  program: "\n/// For a given array of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in an array.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(numbers: []\
    \ as [Int])\n/// (0, 1)\n/// >>> sum_product(numbers: [1, 2, 3, 4])\n/// (10,\
    \ 24)\nfunc sum_product(numbers: [Int]) -> (Int, Int) {\n    var sum = 0\n   \
    \ var product = 1\n    for number in numbers {\n        sum += number\n      \
    \  product *= number\n    }\n    return (sum, product)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sum_product(numbers: [] as [Int]) == (0, 1))\nassert(sum_product(numbers:\
    \ [1, 1, 1]) == (3, 1))\nassert(sum_product(numbers: [100, 0]) == (100, 0))\n\
    assert(sum_product(numbers: [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers:\
    \ [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013823
- exit_code: 0
  program: "\n/// For a given array of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in an array.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(numbers: []\
    \ as [Int])\n/// (0, 1)\n/// >>> sum_product(numbers: [1, 2, 3, 4])\n/// (10,\
    \ 24)\nfunc sum_product(numbers: [Int]) -> (Int, Int) {\n    var sum = 0\n   \
    \ var product = 1\n    for number in numbers {\n        sum += number\n      \
    \  product *= number\n    }\n    return (sum, product)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sum_product(numbers: [] as [Int]) == (0, 1))\nassert(sum_product(numbers:\
    \ [1, 1, 1]) == (3, 1))\nassert(sum_product(numbers: [100, 0]) == (100, 0))\n\
    assert(sum_product(numbers: [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers:\
    \ [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013823
- exit_code: 0
  program: "\n/// For a given array of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in an array.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(numbers: []\
    \ as [Int])\n/// (0, 1)\n/// >>> sum_product(numbers: [1, 2, 3, 4])\n/// (10,\
    \ 24)\nfunc sum_product(numbers: [Int]) -> (Int, Int) {\n    var sum = 0\n   \
    \ var product = 1\n    for number in numbers {\n        sum += number\n      \
    \  product *= number\n    }\n    return (sum, product)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sum_product(numbers: [] as [Int]) == (0, 1))\nassert(sum_product(numbers:\
    \ [1, 1, 1]) == (3, 1))\nassert(sum_product(numbers: [100, 0]) == (100, 0))\n\
    assert(sum_product(numbers: [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers:\
    \ [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013823
- exit_code: 0
  program: "\n/// For a given array of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in an array.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(numbers: []\
    \ as [Int])\n/// (0, 1)\n/// >>> sum_product(numbers: [1, 2, 3, 4])\n/// (10,\
    \ 24)\nfunc sum_product(numbers: [Int]) -> (Int, Int) {\n    return (numbers.reduce(0,\
    \ +), numbers.reduce(1, *))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013823
- exit_code: 0
  program: "\n/// For a given array of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in an array.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(numbers: []\
    \ as [Int])\n/// (0, 1)\n/// >>> sum_product(numbers: [1, 2, 3, 4])\n/// (10,\
    \ 24)\nfunc sum_product(numbers: [Int]) -> (Int, Int) {\n    var sum = 0\n   \
    \ var product = 1\n    for number in numbers {\n        sum += number\n      \
    \  product *= number\n    }\n    return (sum, product)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sum_product(numbers: [] as [Int]) == (0, 1))\nassert(sum_product(numbers:\
    \ [1, 1, 1]) == (3, 1))\nassert(sum_product(numbers: [100, 0]) == (100, 0))\n\
    assert(sum_product(numbers: [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers:\
    \ [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013823
- exit_code: 0
  program: "\n/// For a given array of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in an array.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(numbers: []\
    \ as [Int])\n/// (0, 1)\n/// >>> sum_product(numbers: [1, 2, 3, 4])\n/// (10,\
    \ 24)\nfunc sum_product(numbers: [Int]) -> (Int, Int) {\n    var sum = 0\n   \
    \ var product = 1\n    for number in numbers {\n        sum += number\n      \
    \  product *= number\n    }\n    return (sum, product)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sum_product(numbers: [] as [Int]) == (0, 1))\nassert(sum_product(numbers:\
    \ [1, 1, 1]) == (3, 1))\nassert(sum_product(numbers: [100, 0]) == (100, 0))\n\
    assert(sum_product(numbers: [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers:\
    \ [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013823
- exit_code: 0
  program: "\n/// For a given array of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in an array.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(numbers: []\
    \ as [Int])\n/// (0, 1)\n/// >>> sum_product(numbers: [1, 2, 3, 4])\n/// (10,\
    \ 24)\nfunc sum_product(numbers: [Int]) -> (Int, Int) {\n    var sum = 0\n   \
    \ var product = 1\n    for number in numbers {\n        sum += number\n      \
    \  product *= number\n    }\n    return (sum, product)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sum_product(numbers: [] as [Int]) == (0, 1))\nassert(sum_product(numbers:\
    \ [1, 1, 1]) == (3, 1))\nassert(sum_product(numbers: [100, 0]) == (100, 0))\n\
    assert(sum_product(numbers: [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers:\
    \ [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013823
- exit_code: 0
  program: "\n/// For a given array of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in an array.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(numbers: []\
    \ as [Int])\n/// (0, 1)\n/// >>> sum_product(numbers: [1, 2, 3, 4])\n/// (10,\
    \ 24)\nfunc sum_product(numbers: [Int]) -> (Int, Int) {\n    var sum = 0\n   \
    \ var product = 1\n    for number in numbers {\n        sum += number\n      \
    \  product *= number\n    }\n    return (sum, product)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sum_product(numbers: [] as [Int]) == (0, 1))\nassert(sum_product(numbers:\
    \ [1, 1, 1]) == (3, 1))\nassert(sum_product(numbers: [100, 0]) == (100, 0))\n\
    assert(sum_product(numbers: [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers:\
    \ [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013823
- exit_code: 0
  program: "\n/// For a given array of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in an array.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(numbers: []\
    \ as [Int])\n/// (0, 1)\n/// >>> sum_product(numbers: [1, 2, 3, 4])\n/// (10,\
    \ 24)\nfunc sum_product(numbers: [Int]) -> (Int, Int) {\n    var sum = 0\n   \
    \ var product = 1\n    for number in numbers {\n        sum += number\n      \
    \  product *= number\n    }\n    return (sum, product)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sum_product(numbers: [] as [Int]) == (0, 1))\nassert(sum_product(numbers:\
    \ [1, 1, 1]) == (3, 1))\nassert(sum_product(numbers: [100, 0]) == (100, 0))\n\
    assert(sum_product(numbers: [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers:\
    \ [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013823
- exit_code: 0
  program: "\n/// For a given array of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in an array.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(numbers: []\
    \ as [Int])\n/// (0, 1)\n/// >>> sum_product(numbers: [1, 2, 3, 4])\n/// (10,\
    \ 24)\nfunc sum_product(numbers: [Int]) -> (Int, Int) {\n    var sum = 0\n   \
    \ var product = 1\n    for number in numbers {\n        sum += number\n      \
    \  product *= number\n    }\n    return (sum, product)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sum_product(numbers: [] as [Int]) == (0, 1))\nassert(sum_product(numbers:\
    \ [1, 1, 1]) == (3, 1))\nassert(sum_product(numbers: [100, 0]) == (100, 0))\n\
    assert(sum_product(numbers: [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers:\
    \ [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013823
- exit_code: 0
  program: "\n/// For a given array of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in an array.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(numbers: []\
    \ as [Int])\n/// (0, 1)\n/// >>> sum_product(numbers: [1, 2, 3, 4])\n/// (10,\
    \ 24)\nfunc sum_product(numbers: [Int]) -> (Int, Int) {\n    var sum = 0\n   \
    \ var product = 1\n    for number in numbers {\n        sum += number\n      \
    \  product *= number\n    }\n    return (sum, product)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sum_product(numbers: [] as [Int]) == (0, 1))\nassert(sum_product(numbers:\
    \ [1, 1, 1]) == (3, 1))\nassert(sum_product(numbers: [100, 0]) == (100, 0))\n\
    assert(sum_product(numbers: [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers:\
    \ [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013823
- exit_code: 0
  program: "\n/// For a given array of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in an array.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(numbers: []\
    \ as [Int])\n/// (0, 1)\n/// >>> sum_product(numbers: [1, 2, 3, 4])\n/// (10,\
    \ 24)\nfunc sum_product(numbers: [Int]) -> (Int, Int) {\n    var sum = 0\n   \
    \ var product = 1\n    for number in numbers {\n        sum += number\n      \
    \  product *= number\n    }\n    return (sum, product)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sum_product(numbers: [] as [Int]) == (0, 1))\nassert(sum_product(numbers:\
    \ [1, 1, 1]) == (3, 1))\nassert(sum_product(numbers: [100, 0]) == (100, 0))\n\
    assert(sum_product(numbers: [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers:\
    \ [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013823
- exit_code: 0
  program: "\n/// For a given array of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in an array.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(numbers: []\
    \ as [Int])\n/// (0, 1)\n/// >>> sum_product(numbers: [1, 2, 3, 4])\n/// (10,\
    \ 24)\nfunc sum_product(numbers: [Int]) -> (Int, Int) {\n    var sum = 0\n   \
    \ var product = 1\n    for number in numbers {\n        sum += number\n      \
    \  product *= number\n    }\n    return (sum, product)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sum_product(numbers: [] as [Int]) == (0, 1))\nassert(sum_product(numbers:\
    \ [1, 1, 1]) == (3, 1))\nassert(sum_product(numbers: [100, 0]) == (100, 0))\n\
    assert(sum_product(numbers: [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers:\
    \ [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013823
- exit_code: 0
  program: "\n/// For a given array of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in an array.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(numbers: []\
    \ as [Int])\n/// (0, 1)\n/// >>> sum_product(numbers: [1, 2, 3, 4])\n/// (10,\
    \ 24)\nfunc sum_product(numbers: [Int]) -> (Int, Int) {\n    var sum = 0\n   \
    \ var product = 1\n    for number in numbers {\n        sum += number\n      \
    \  product *= number\n    }\n    return (sum, product)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sum_product(numbers: [] as [Int]) == (0, 1))\nassert(sum_product(numbers:\
    \ [1, 1, 1]) == (3, 1))\nassert(sum_product(numbers: [100, 0]) == (100, 0))\n\
    assert(sum_product(numbers: [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers:\
    \ [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013823
- exit_code: 0
  program: "\n/// For a given array of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in an array.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(numbers: []\
    \ as [Int])\n/// (0, 1)\n/// >>> sum_product(numbers: [1, 2, 3, 4])\n/// (10,\
    \ 24)\nfunc sum_product(numbers: [Int]) -> (Int, Int) {\n    return (numbers.reduce(0,\
    \ +), numbers.reduce(1, *))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013823
- exit_code: 0
  program: "\n/// For a given array of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in an array.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(numbers: []\
    \ as [Int])\n/// (0, 1)\n/// >>> sum_product(numbers: [1, 2, 3, 4])\n/// (10,\
    \ 24)\nfunc sum_product(numbers: [Int]) -> (Int, Int) {\n    var sum = 0\n   \
    \ var product = 1\n    for number in numbers {\n        sum += number\n      \
    \  product *= number\n    }\n    return (sum, product)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sum_product(numbers: [] as [Int]) == (0, 1))\nassert(sum_product(numbers:\
    \ [1, 1, 1]) == (3, 1))\nassert(sum_product(numbers: [100, 0]) == (100, 0))\n\
    assert(sum_product(numbers: [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers:\
    \ [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013823
- exit_code: 0
  program: "\n/// For a given array of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in an array.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(numbers: []\
    \ as [Int])\n/// (0, 1)\n/// >>> sum_product(numbers: [1, 2, 3, 4])\n/// (10,\
    \ 24)\nfunc sum_product(numbers: [Int]) -> (Int, Int) {\n    var sum = 0\n   \
    \ var product = 1\n    for number in numbers {\n        sum += number\n      \
    \  product *= number\n    }\n    return (sum, product)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sum_product(numbers: [] as [Int]) == (0, 1))\nassert(sum_product(numbers:\
    \ [1, 1, 1]) == (3, 1))\nassert(sum_product(numbers: [100, 0]) == (100, 0))\n\
    assert(sum_product(numbers: [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers:\
    \ [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013823
- exit_code: 0
  program: "\n/// For a given array of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in an array.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(numbers: []\
    \ as [Int])\n/// (0, 1)\n/// >>> sum_product(numbers: [1, 2, 3, 4])\n/// (10,\
    \ 24)\nfunc sum_product(numbers: [Int]) -> (Int, Int) {\n    var sum = 0\n   \
    \ var product = 1\n    for number in numbers {\n        sum += number\n      \
    \  product *= number\n    }\n    return (sum, product)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sum_product(numbers: [] as [Int]) == (0, 1))\nassert(sum_product(numbers:\
    \ [1, 1, 1]) == (3, 1))\nassert(sum_product(numbers: [100, 0]) == (100, 0))\n\
    assert(sum_product(numbers: [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers:\
    \ [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013823
- exit_code: 0
  program: "\n/// For a given array of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in an array.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(numbers: []\
    \ as [Int])\n/// (0, 1)\n/// >>> sum_product(numbers: [1, 2, 3, 4])\n/// (10,\
    \ 24)\nfunc sum_product(numbers: [Int]) -> (Int, Int) {\n    var sum = 0\n   \
    \ var product = 1\n    for number in numbers {\n        sum += number\n      \
    \  product *= number\n    }\n    return (sum, product)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sum_product(numbers: [] as [Int]) == (0, 1))\nassert(sum_product(numbers:\
    \ [1, 1, 1]) == (3, 1))\nassert(sum_product(numbers: [100, 0]) == (100, 0))\n\
    assert(sum_product(numbers: [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers:\
    \ [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013823
- exit_code: 0
  program: "\n/// For a given array of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in an array.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(numbers: []\
    \ as [Int])\n/// (0, 1)\n/// >>> sum_product(numbers: [1, 2, 3, 4])\n/// (10,\
    \ 24)\nfunc sum_product(numbers: [Int]) -> (Int, Int) {\n    return (numbers.reduce(0,\
    \ +), numbers.reduce(1, *))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013823
- exit_code: 0
  program: "\n/// For a given array of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in an array.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(numbers: []\
    \ as [Int])\n/// (0, 1)\n/// >>> sum_product(numbers: [1, 2, 3, 4])\n/// (10,\
    \ 24)\nfunc sum_product(numbers: [Int]) -> (Int, Int) {\n    return (numbers.reduce(0,\
    \ +), numbers.reduce(1, *))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013823
- exit_code: 0
  program: "\n/// For a given array of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in an array.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(numbers: []\
    \ as [Int])\n/// (0, 1)\n/// >>> sum_product(numbers: [1, 2, 3, 4])\n/// (10,\
    \ 24)\nfunc sum_product(numbers: [Int]) -> (Int, Int) {\n    var sum = 0\n   \
    \ var product = 1\n    for number in numbers {\n        sum += number\n      \
    \  product *= number\n    }\n    return (sum, product)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sum_product(numbers: [] as [Int]) == (0, 1))\nassert(sum_product(numbers:\
    \ [1, 1, 1]) == (3, 1))\nassert(sum_product(numbers: [100, 0]) == (100, 0))\n\
    assert(sum_product(numbers: [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers:\
    \ [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013823
- exit_code: 0
  program: "\n/// For a given array of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in an array.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(numbers: []\
    \ as [Int])\n/// (0, 1)\n/// >>> sum_product(numbers: [1, 2, 3, 4])\n/// (10,\
    \ 24)\nfunc sum_product(numbers: [Int]) -> (Int, Int) {\n    var sum = 0\n   \
    \ var product = 1\n    for number in numbers {\n        sum += number\n      \
    \  product *= number\n    }\n    return (sum, product)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sum_product(numbers: [] as [Int]) == (0, 1))\nassert(sum_product(numbers:\
    \ [1, 1, 1]) == (3, 1))\nassert(sum_product(numbers: [100, 0]) == (100, 0))\n\
    assert(sum_product(numbers: [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers:\
    \ [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013823
- exit_code: 0
  program: "\n/// For a given array of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in an array.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(numbers: []\
    \ as [Int])\n/// (0, 1)\n/// >>> sum_product(numbers: [1, 2, 3, 4])\n/// (10,\
    \ 24)\nfunc sum_product(numbers: [Int]) -> (Int, Int) {\n    var sum = 0\n   \
    \ var product = 1\n    for number in numbers {\n        sum += number\n      \
    \  product *= number\n    }\n    return (sum, product)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sum_product(numbers: [] as [Int]) == (0, 1))\nassert(sum_product(numbers:\
    \ [1, 1, 1]) == (3, 1))\nassert(sum_product(numbers: [100, 0]) == (100, 0))\n\
    assert(sum_product(numbers: [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers:\
    \ [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013823
- exit_code: 0
  program: "\n/// For a given array of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in an array.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(numbers: []\
    \ as [Int])\n/// (0, 1)\n/// >>> sum_product(numbers: [1, 2, 3, 4])\n/// (10,\
    \ 24)\nfunc sum_product(numbers: [Int]) -> (Int, Int) {\n    var sum = 0\n   \
    \ var product = 1\n    for number in numbers {\n        sum += number\n      \
    \  product *= number\n    }\n    return (sum, product)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sum_product(numbers: [] as [Int]) == (0, 1))\nassert(sum_product(numbers:\
    \ [1, 1, 1]) == (3, 1))\nassert(sum_product(numbers: [100, 0]) == (100, 0))\n\
    assert(sum_product(numbers: [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers:\
    \ [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013823
- exit_code: 0
  program: "\n/// For a given array of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in an array.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(numbers: []\
    \ as [Int])\n/// (0, 1)\n/// >>> sum_product(numbers: [1, 2, 3, 4])\n/// (10,\
    \ 24)\nfunc sum_product(numbers: [Int]) -> (Int, Int) {\n    var sum = 0\n   \
    \ var product = 1\n    for number in numbers {\n        sum += number\n      \
    \  product *= number\n    }\n    return (sum, product)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sum_product(numbers: [] as [Int]) == (0, 1))\nassert(sum_product(numbers:\
    \ [1, 1, 1]) == (3, 1))\nassert(sum_product(numbers: [100, 0]) == (100, 0))\n\
    assert(sum_product(numbers: [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers:\
    \ [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013823
- exit_code: 0
  program: "\n/// For a given array of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in an array.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(numbers: []\
    \ as [Int])\n/// (0, 1)\n/// >>> sum_product(numbers: [1, 2, 3, 4])\n/// (10,\
    \ 24)\nfunc sum_product(numbers: [Int]) -> (Int, Int) {\n    return (numbers.reduce(0,\
    \ +), numbers.reduce(1, *))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013823
- exit_code: 0
  program: "\n/// For a given array of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in an array.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(numbers: []\
    \ as [Int])\n/// (0, 1)\n/// >>> sum_product(numbers: [1, 2, 3, 4])\n/// (10,\
    \ 24)\nfunc sum_product(numbers: [Int]) -> (Int, Int) {\n    var sum = 0\n   \
    \ var product = 1\n    for number in numbers {\n        sum += number\n      \
    \  product *= number\n    }\n    return (sum, product)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sum_product(numbers: [] as [Int]) == (0, 1))\nassert(sum_product(numbers:\
    \ [1, 1, 1]) == (3, 1))\nassert(sum_product(numbers: [100, 0]) == (100, 0))\n\
    assert(sum_product(numbers: [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers:\
    \ [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013823
- exit_code: 0
  program: "\n/// For a given array of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in an array.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(numbers: []\
    \ as [Int])\n/// (0, 1)\n/// >>> sum_product(numbers: [1, 2, 3, 4])\n/// (10,\
    \ 24)\nfunc sum_product(numbers: [Int]) -> (Int, Int) {\n    return (numbers.reduce(0,\
    \ +), numbers.reduce(1, *))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013823
- exit_code: 0
  program: "\n/// For a given array of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in an array.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(numbers: []\
    \ as [Int])\n/// (0, 1)\n/// >>> sum_product(numbers: [1, 2, 3, 4])\n/// (10,\
    \ 24)\nfunc sum_product(numbers: [Int]) -> (Int, Int) {\n    var sum = 0\n   \
    \ var product = 1\n    for number in numbers {\n        sum += number\n      \
    \  product *= number\n    }\n    return (sum, product)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sum_product(numbers: [] as [Int]) == (0, 1))\nassert(sum_product(numbers:\
    \ [1, 1, 1]) == (3, 1))\nassert(sum_product(numbers: [100, 0]) == (100, 0))\n\
    assert(sum_product(numbers: [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers:\
    \ [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013823
- exit_code: 0
  program: "\n/// For a given array of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in an array.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(numbers: []\
    \ as [Int])\n/// (0, 1)\n/// >>> sum_product(numbers: [1, 2, 3, 4])\n/// (10,\
    \ 24)\nfunc sum_product(numbers: [Int]) -> (Int, Int) {\n    var sum = 0\n   \
    \ var product = 1\n    for number in numbers {\n        sum += number\n      \
    \  product *= number\n    }\n    return (sum, product)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sum_product(numbers: [] as [Int]) == (0, 1))\nassert(sum_product(numbers:\
    \ [1, 1, 1]) == (3, 1))\nassert(sum_product(numbers: [100, 0]) == (100, 0))\n\
    assert(sum_product(numbers: [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers:\
    \ [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013823
- exit_code: 0
  program: "\n/// For a given array of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in an array.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(numbers: []\
    \ as [Int])\n/// (0, 1)\n/// >>> sum_product(numbers: [1, 2, 3, 4])\n/// (10,\
    \ 24)\nfunc sum_product(numbers: [Int]) -> (Int, Int) {\n    return (numbers.reduce(0,\
    \ +), numbers.reduce(1, *))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013823
- exit_code: 0
  program: "\n/// For a given array of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in an array.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(numbers: []\
    \ as [Int])\n/// (0, 1)\n/// >>> sum_product(numbers: [1, 2, 3, 4])\n/// (10,\
    \ 24)\nfunc sum_product(numbers: [Int]) -> (Int, Int) {\n    return (numbers.reduce(0,\
    \ +), numbers.reduce(1, *))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013823
- exit_code: 0
  program: "\n/// For a given array of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in an array.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(numbers: []\
    \ as [Int])\n/// (0, 1)\n/// >>> sum_product(numbers: [1, 2, 3, 4])\n/// (10,\
    \ 24)\nfunc sum_product(numbers: [Int]) -> (Int, Int) {\n    var sum = 0\n   \
    \ var product = 1\n    for num in numbers {\n        sum += num\n        product\
    \ *= num\n    }\n    return (sum, product)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sum_product(numbers: [] as [Int]) == (0, 1))\nassert(sum_product(numbers:\
    \ [1, 1, 1]) == (3, 1))\nassert(sum_product(numbers: [100, 0]) == (100, 0))\n\
    assert(sum_product(numbers: [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers:\
    \ [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013823
- exit_code: 0
  program: "\n/// For a given array of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in an array.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(numbers: []\
    \ as [Int])\n/// (0, 1)\n/// >>> sum_product(numbers: [1, 2, 3, 4])\n/// (10,\
    \ 24)\nfunc sum_product(numbers: [Int]) -> (Int, Int) {\n    var sum = 0\n   \
    \ var product = 1\n    for number in numbers {\n        sum += number\n      \
    \  product *= number\n    }\n    return (sum, product)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sum_product(numbers: [] as [Int]) == (0, 1))\nassert(sum_product(numbers:\
    \ [1, 1, 1]) == (3, 1))\nassert(sum_product(numbers: [100, 0]) == (100, 0))\n\
    assert(sum_product(numbers: [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers:\
    \ [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013823
- exit_code: 0
  program: "\n/// For a given array of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in an array.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(numbers: []\
    \ as [Int])\n/// (0, 1)\n/// >>> sum_product(numbers: [1, 2, 3, 4])\n/// (10,\
    \ 24)\nfunc sum_product(numbers: [Int]) -> (Int, Int) {\n    var sum = 0\n   \
    \ var product = 1\n    for number in numbers {\n        sum += number\n      \
    \  product *= number\n    }\n    return (sum, product)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sum_product(numbers: [] as [Int]) == (0, 1))\nassert(sum_product(numbers:\
    \ [1, 1, 1]) == (3, 1))\nassert(sum_product(numbers: [100, 0]) == (100, 0))\n\
    assert(sum_product(numbers: [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers:\
    \ [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013823
- exit_code: 0
  program: "\n/// For a given array of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in an array.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(numbers: []\
    \ as [Int])\n/// (0, 1)\n/// >>> sum_product(numbers: [1, 2, 3, 4])\n/// (10,\
    \ 24)\nfunc sum_product(numbers: [Int]) -> (Int, Int) {\n    var sum = 0\n   \
    \ var product = 1\n    for number in numbers {\n        sum += number\n      \
    \  product *= number\n    }\n    return (sum, product)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sum_product(numbers: [] as [Int]) == (0, 1))\nassert(sum_product(numbers:\
    \ [1, 1, 1]) == (3, 1))\nassert(sum_product(numbers: [100, 0]) == (100, 0))\n\
    assert(sum_product(numbers: [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers:\
    \ [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013823
- exit_code: -4
  program: "\n/// For a given array of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in an array.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(numbers: []\
    \ as [Int])\n/// (0, 1)\n/// >>> sum_product(numbers: [1, 2, 3, 4])\n/// (10,\
    \ 24)\nfunc sum_product(numbers: [Int]) -> (Int, Int) {\n    return (0, 0)\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sum_product(numbers: [] as [Int]) == (0, 1))\n\
    assert(sum_product(numbers: [1, 1, 1]) == (3, 1))\nassert(sum_product(numbers:\
    \ [100, 0]) == (100, 0))\nassert(sum_product(numbers: [3, 5, 7]) == (15, 105))\n\
    assert(sum_product(numbers: [10]) == (10, 10))"
  status: Exception
  stderr: 'tmpsl_f682z/tmpsl_f682z.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b390158ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3901285b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3901285988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b39012847b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsl_f682z                        0x0000562add7753b1 <unavailable> + 5041

    5    libc.so.6                          0x00002b390177a460 __libc_start_main +
    245

    6    tmpsl_f682z                        0x0000562add774fd9 <unavailable> + 4057

    '
  stdout: ''
  timestamp: 1660013823
- exit_code: 0
  program: "\n/// For a given array of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in an array.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(numbers: []\
    \ as [Int])\n/// (0, 1)\n/// >>> sum_product(numbers: [1, 2, 3, 4])\n/// (10,\
    \ 24)\nfunc sum_product(numbers: [Int]) -> (Int, Int) {\n    var sum = 0\n   \
    \ var product = 1\n    for number in numbers {\n        sum += number\n      \
    \  product *= number\n    }\n    return (sum, product)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sum_product(numbers: [] as [Int]) == (0, 1))\nassert(sum_product(numbers:\
    \ [1, 1, 1]) == (3, 1))\nassert(sum_product(numbers: [100, 0]) == (100, 0))\n\
    assert(sum_product(numbers: [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers:\
    \ [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013823
- exit_code: 0
  program: "\n/// For a given array of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in an array.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(numbers: []\
    \ as [Int])\n/// (0, 1)\n/// >>> sum_product(numbers: [1, 2, 3, 4])\n/// (10,\
    \ 24)\nfunc sum_product(numbers: [Int]) -> (Int, Int) {\n    var sum = 0\n   \
    \ var product = 1\n    for number in numbers {\n        sum += number\n      \
    \  product *= number\n    }\n    return (sum, product)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sum_product(numbers: [] as [Int]) == (0, 1))\nassert(sum_product(numbers:\
    \ [1, 1, 1]) == (3, 1))\nassert(sum_product(numbers: [100, 0]) == (100, 0))\n\
    assert(sum_product(numbers: [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers:\
    \ [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013823
- exit_code: 0
  program: "\n/// For a given array of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in an array.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(numbers: []\
    \ as [Int])\n/// (0, 1)\n/// >>> sum_product(numbers: [1, 2, 3, 4])\n/// (10,\
    \ 24)\nfunc sum_product(numbers: [Int]) -> (Int, Int) {\n    var sum = 0\n   \
    \ var product = 1\n    for number in numbers {\n        sum += number\n      \
    \  product *= number\n    }\n    return (sum, product)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sum_product(numbers: [] as [Int]) == (0, 1))\nassert(sum_product(numbers:\
    \ [1, 1, 1]) == (3, 1))\nassert(sum_product(numbers: [100, 0]) == (100, 0))\n\
    assert(sum_product(numbers: [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers:\
    \ [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013823
- exit_code: 0
  program: "\n/// For a given array of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in an array.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(numbers: []\
    \ as [Int])\n/// (0, 1)\n/// >>> sum_product(numbers: [1, 2, 3, 4])\n/// (10,\
    \ 24)\nfunc sum_product(numbers: [Int]) -> (Int, Int) {\n    var sum = 0\n   \
    \ var product = 1\n    for number in numbers {\n        sum += number\n      \
    \  product *= number\n    }\n    return (sum, product)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sum_product(numbers: [] as [Int]) == (0, 1))\nassert(sum_product(numbers:\
    \ [1, 1, 1]) == (3, 1))\nassert(sum_product(numbers: [100, 0]) == (100, 0))\n\
    assert(sum_product(numbers: [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers:\
    \ [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013823
- exit_code: 0
  program: "\n/// For a given array of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in an array.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(numbers: []\
    \ as [Int])\n/// (0, 1)\n/// >>> sum_product(numbers: [1, 2, 3, 4])\n/// (10,\
    \ 24)\nfunc sum_product(numbers: [Int]) -> (Int, Int) {\n    var sum = 0\n   \
    \ var product = 1\n    for number in numbers {\n        sum += number\n      \
    \  product *= number\n    }\n    return (sum, product)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sum_product(numbers: [] as [Int]) == (0, 1))\nassert(sum_product(numbers:\
    \ [1, 1, 1]) == (3, 1))\nassert(sum_product(numbers: [100, 0]) == (100, 0))\n\
    assert(sum_product(numbers: [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers:\
    \ [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013823
- exit_code: 0
  program: "\n/// For a given array of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in an array.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(numbers: []\
    \ as [Int])\n/// (0, 1)\n/// >>> sum_product(numbers: [1, 2, 3, 4])\n/// (10,\
    \ 24)\nfunc sum_product(numbers: [Int]) -> (Int, Int) {\n    return (numbers.reduce(0,\
    \ +), numbers.reduce(1, *))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013823
- exit_code: 0
  program: "\n/// For a given array of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in an array.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(numbers: []\
    \ as [Int])\n/// (0, 1)\n/// >>> sum_product(numbers: [1, 2, 3, 4])\n/// (10,\
    \ 24)\nfunc sum_product(numbers: [Int]) -> (Int, Int) {\n    var sum = 0\n   \
    \ var product = 1\n    for number in numbers {\n        sum += number\n      \
    \  product *= number\n    }\n    return (sum, product)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sum_product(numbers: [] as [Int]) == (0, 1))\nassert(sum_product(numbers:\
    \ [1, 1, 1]) == (3, 1))\nassert(sum_product(numbers: [100, 0]) == (100, 0))\n\
    assert(sum_product(numbers: [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers:\
    \ [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013823
