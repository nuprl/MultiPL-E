language: swift
name: HumanEval_125_split_words
results:
- exit_code: 0
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    if txt.contains(\" \") {\n        return .success(txt.split(separator:\
    \ \" \").map(String.init))\n    } else if txt.contains(\",\") {\n        return\
    \ .success(txt.split(separator: \",\").map(String.init))\n    } else {\n     \
    \   var count = 0\n        for char in txt {\n            if char.isLowercase\
    \ && (char.asciiValue! - 97) % 2 == 1 {\n                count += 1\n        \
    \    }\n        }\n        return .failure(count)\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"Hello\"\
    , \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820934
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    let words = txt.split(separator: \" \")\n    if words.count > 1\
    \ {\n        return .success(words.map { String($0) })\n    }\n    let words2\
    \ = txt.split(separator: \",\")\n    if words2.count > 1 {\n        return .success(words2.map\
    \ { String($0) })\n    }\n    var count = 0\n    for (i, c) in txt.lowercased().enumerated()\
    \ {\n        if i % 2 == 0 && c >= \"a\" && c <= \"z\" {\n            count +=\
    \ 1\n        }\n    }\n    return .failure(count)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(split_words(txt: \"Hello world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"Hello\"\
    , \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmpfoogxyza/tmpfoogxyza.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afc06cbbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afc069b2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afc069b2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afc069b17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfoogxyza                        0x0000562705cc272b <unavailable> + 10027

    5    libc.so.6                          0x00002afc06ea7460 __libc_start_main +
    245

    6    tmpfoogxyza                        0x0000562705cc1ad9 <unavailable> + 6873

    '
  stdout: ''
  timestamp: 1659820934
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    let words = txt.split(separator: \" \")\n    if words.count > 1\
    \ {\n        return .success(words.map { String($0) })\n    } else {\n       \
    \ let words = txt.split(separator: \",\")\n        if words.count > 1 {\n    \
    \        return .success(words.map { String($0) })\n        } else {\n       \
    \     return .failure(txt.filter { $0.isLowercase }.count % 2)\n        }\n  \
    \  }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(split_words(txt: \"Hello world!\"\
    ) == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello,world!\"\
    ) == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello world,!\"\
    ) == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world\
    \ !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"\
    abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: Exception
  stderr: 'tmpc3q3pljx/tmpc3q3pljx.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af55eed8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af55ebcfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af55ebcf988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af55ebce7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpc3q3pljx                        0x000056287b910373 <unavailable> + 9075

    5    libc.so.6                          0x00002af55f0c4460 __libc_start_main +
    245

    6    tmpc3q3pljx                        0x000056287b90f859 <unavailable> + 6233

    '
  stdout: ''
  timestamp: 1659820934
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    if txt.contains(\" \") {\n        return .success(txt.split(separator:\
    \ \" \").map { String($0) })\n    } else if txt.contains(\",\") {\n        return\
    \ .success(txt.split(separator: \",\").map { String($0) })\n    } else {\n   \
    \     var count = 0\n        for (index, char) in txt.enumerated() {\n       \
    \     if index % 2 == 0 && char.isLowercase {\n                count += 1\n  \
    \          }\n        }\n        return .failure(count)\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"Hello\"\
    , \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmpidsbb9jy/tmpidsbb9jy.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad232895c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad23258cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad23258c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad23258b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpidsbb9jy                        0x0000558e186b763b <unavailable> + 9787

    5    libc.so.6                          0x00002ad232a81460 __libc_start_main +
    245

    6    tmpidsbb9jy                        0x0000558e186b69e9 <unavailable> + 6633

    '
  stdout: ''
  timestamp: 1659820934
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    if txt.contains(\" \") {\n        return .success(txt.split(separator:\
    \ \" \").map { String($0) })\n    } else if txt.contains(\",\") {\n        return\
    \ .success(txt.split(separator: \",\").map { String($0) })\n    } else {\n   \
    \     return .failure(txt.filter { $0.isLowercase }.count)\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"\
    Hello\", \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmpz4e6qyo4/tmpz4e6qyo4.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae1553e4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae1550dbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae1550db988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae1550da7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpz4e6qyo4                        0x0000563563aa3343 <unavailable> + 9027

    5    libc.so.6                          0x00002ae1555d0460 __libc_start_main +
    245

    6    tmpz4e6qyo4                        0x0000563563aa2829 <unavailable> + 6185

    '
  stdout: ''
  timestamp: 1659820934
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    if txt.contains(\" \") {\n        return .success(txt.split(separator:\
    \ \" \").map { String($0) })\n    } else if txt.contains(\",\") {\n        return\
    \ .success(txt.split(separator: \",\").map { String($0) })\n    } else {\n   \
    \     return .failure(txt.filter { $0.isLowercase }.count)\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"\
    Hello\", \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmpz4e6qyo4/tmpz4e6qyo4.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae1553e4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae1550dbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae1550db988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae1550da7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpz4e6qyo4                        0x0000563563aa3343 <unavailable> + 9027

    5    libc.so.6                          0x00002ae1555d0460 __libc_start_main +
    245

    6    tmpz4e6qyo4                        0x0000563563aa2829 <unavailable> + 6185

    '
  stdout: ''
  timestamp: 1659820934
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    if txt.contains(\" \") {\n        return .success(txt.split(separator:\
    \ \" \").map { String($0) })\n    } else if txt.contains(\",\") {\n        return\
    \ .success(txt.split(separator: \",\").map { String($0) })\n    } else {\n   \
    \     var count = 0\n        for (i, c) in txt.enumerated() {\n            if\
    \ i % 2 == 0 && c.isLowercase {\n                count += 1\n            }\n \
    \       }\n        return .failure(count)\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(split_words(txt: \"Hello world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"Hello\"\
    , \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmp9vxntrum/tmp9vxntrum.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7211907c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b72115feb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b72115fe988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b72115fd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9vxntrum                        0x000056399b78963b <unavailable> + 9787

    5    libc.so.6                          0x00002b7211af3460 __libc_start_main +
    245

    6    tmp9vxntrum                        0x000056399b7889e9 <unavailable> + 6633

    '
  stdout: ''
  timestamp: 1659820934
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    if txt.contains(\" \") {\n        return .success(txt.split(separator:\
    \ \" \").map { String($0) })\n    } else if txt.contains(\",\") {\n        return\
    \ .success(txt.split(separator: \",\").map { String($0) })\n    } else {\n   \
    \     return .failure(txt.filter { $0.isLowercase }.count)\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"\
    Hello\", \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmpz4e6qyo4/tmpz4e6qyo4.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae1553e4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae1550dbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae1550db988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae1550da7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpz4e6qyo4                        0x0000563563aa3343 <unavailable> + 9027

    5    libc.so.6                          0x00002ae1555d0460 __libc_start_main +
    245

    6    tmpz4e6qyo4                        0x0000563563aa2829 <unavailable> + 6185

    '
  stdout: ''
  timestamp: 1659820934
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    if txt.contains(\" \") {\n        return .success(txt.split(separator:\
    \ \" \").map { String($0) })\n    } else if txt.contains(\",\") {\n        return\
    \ .success(txt.split(separator: \",\").map { String($0) })\n    } else {\n   \
    \     var count = 0\n        for (index, char) in txt.enumerated() {\n       \
    \     if index % 2 == 0 && char.isLowercase {\n                count += 1\n  \
    \          }\n        }\n        return .failure(count)\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"Hello\"\
    , \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmpidsbb9jy/tmpidsbb9jy.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad232895c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad23258cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad23258c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad23258b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpidsbb9jy                        0x0000558e186b763b <unavailable> + 9787

    5    libc.so.6                          0x00002ad232a81460 __libc_start_main +
    245

    6    tmpidsbb9jy                        0x0000558e186b69e9 <unavailable> + 6633

    '
  stdout: ''
  timestamp: 1659820934
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    if txt.contains(\" \") {\n        return .success(txt.split(separator:\
    \ \" \").map { String($0) })\n    } else if txt.contains(\",\") {\n        return\
    \ .success(txt.split(separator: \",\").map { String($0) })\n    } else {\n   \
    \     return .failure(txt.lowercased().filter { $0.isLetter }.enumerated().filter\
    \ { $0.offset % 2 == 0 }.count)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(split_words(txt: \"Hello world!\") == .success([\"Hello\", \"world!\"]))\n\
    assert(split_words(txt: \"Hello,world!\") == .success([\"Hello\", \"world!\"]))\n\
    assert(split_words(txt: \"Hello world,!\") == .success([\"Hello\", \"world,!\"\
    ]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\"\
    , \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\nassert(split_words(txt:\
    \ \"aaabb\") == .failure(2))\nassert(split_words(txt: \"aaaBb\") == .failure(1))\n\
    assert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmpusqqwafr/tmpusqqwafr.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abb3add8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abb3aacfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abb3aacf988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abb3aace7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpusqqwafr                        0x0000561cfd7e468b <unavailable> + 9867

    5    libc.so.6                          0x00002abb3afc4460 __libc_start_main +
    245

    6    tmpusqqwafr                        0x0000561cfd7e3a39 <unavailable> + 6713

    '
  stdout: ''
  timestamp: 1659820934
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    if txt.contains(\" \") {\n        return .success(txt.split(separator:\
    \ \" \").map { String($0) })\n    } else if txt.contains(\",\") {\n        return\
    \ .success(txt.split(separator: \",\").map { String($0) })\n    } else {\n   \
    \     var count = 0\n        for c in txt {\n            if c.isLowercase && Int(c.asciiValue!)\
    \ % 2 == 1 {\n                count += 1\n            }\n        }\n        return\
    \ .failure(count)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(split_words(txt:\
    \ \"Hello world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: Exception
  stderr: 'tmpuqdcbi9d/tmpuqdcbi9d.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b76a2a88c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b76a277fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b76a277f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b76a277e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuqdcbi9d                        0x00005617863a66bb <unavailable> + 9915

    5    libc.so.6                          0x00002b76a2c74460 __libc_start_main +
    245

    6    tmpuqdcbi9d                        0x00005617863a5a69 <unavailable> + 6761

    '
  stdout: ''
  timestamp: 1659820934
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    if txt.contains(\" \") {\n        return .success(txt.split(separator:\
    \ \" \").map { String($0) })\n    } else if txt.contains(\",\") {\n        return\
    \ .success(txt.split(separator: \",\").map { String($0) })\n    } else {\n   \
    \     return .failure(txt.filter { $0.isLowercase }.count)\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"\
    Hello\", \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmpz4e6qyo4/tmpz4e6qyo4.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae1553e4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae1550dbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae1550db988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae1550da7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpz4e6qyo4                        0x0000563563aa3343 <unavailable> + 9027

    5    libc.so.6                          0x00002ae1555d0460 __libc_start_main +
    245

    6    tmpz4e6qyo4                        0x0000563563aa2829 <unavailable> + 6185

    '
  stdout: ''
  timestamp: 1659820934
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    if txt.contains(\" \") {\n        return .success(txt.split(separator:\
    \ \" \").map(String.init))\n    } else if txt.contains(\",\") {\n        return\
    \ .success(txt.split(separator: \",\").map(String.init))\n    } else {\n     \
    \   return .failure(txt.lowercased().filter { $0.isLetter }.reduce(0) { $1.asciiValue!\
    \ % 2 == 1 ? $0 + 1 : $0 })\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(split_words(txt: \"Hello world!\") == .success([\"Hello\", \"world!\"]))\n\
    assert(split_words(txt: \"Hello,world!\") == .success([\"Hello\", \"world!\"]))\n\
    assert(split_words(txt: \"Hello world,!\") == .success([\"Hello\", \"world,!\"\
    ]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\"\
    , \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\nassert(split_words(txt:\
    \ \"aaabb\") == .failure(2))\nassert(split_words(txt: \"aaaBb\") == .failure(1))\n\
    assert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmpa92iadal/tmpa92iadal.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b01857e8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b01854dfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b01854df988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b01854de7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpa92iadal                        0x0000562dc94b85eb <unavailable> + 9707

    5    libc.so.6                          0x00002b01859d4460 __libc_start_main +
    245

    6    tmpa92iadal                        0x0000562dc94b7999 <unavailable> + 6553

    '
  stdout: ''
  timestamp: 1659820934
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    if txt.contains(\" \") {\n        return .success(txt.split(separator:\
    \ \" \").map { String($0) })\n    } else if txt.contains(\",\") {\n        return\
    \ .success(txt.split(separator: \",\").map { String($0) })\n    } else {\n   \
    \     return .failure(txt.filter { $0.isLowercase }.count)\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"\
    Hello\", \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmpz4e6qyo4/tmpz4e6qyo4.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae1553e4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae1550dbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae1550db988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae1550da7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpz4e6qyo4                        0x0000563563aa3343 <unavailable> + 9027

    5    libc.so.6                          0x00002ae1555d0460 __libc_start_main +
    245

    6    tmpz4e6qyo4                        0x0000563563aa2829 <unavailable> + 6185

    '
  stdout: ''
  timestamp: 1659820934
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    if let words = txt.split(separator: \" \").map(String.init) as?\
    \ [String] {\n        return .success(words)\n    } else if let words = txt.split(separator:\
    \ \",\").map(String.init) as? [String] {\n        return .success(words)\n   \
    \ } else {\n        var count = 0\n        for char in txt {\n            if let\
    \ ascii = char.asciiValue, ascii >= 97, ascii <= 122, ascii % 2 == 1 {\n     \
    \           count += 1\n            }\n        }\n        return .failure(count)\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(split_words(txt: \"Hello\
    \ world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt: \"\
    Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: Exception
  stderr: 'tmpvst2qda6/tmpvst2qda6.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4ba6af6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4ba67edb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4ba67ed988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4ba67ec7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvst2qda6                        0x0000561192f20cbe <unavailable> + 7358

    5    libc.so.6                          0x00002b4ba6ce2460 __libc_start_main +
    245

    6    tmpvst2qda6                        0x0000561192f20649 <unavailable> + 5705

    '
  stdout: ''
  timestamp: 1659820934
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    if txt.contains(\" \") {\n        return .success(txt.split(separator:\
    \ \" \").map { String($0) })\n    } else if txt.contains(\",\") {\n        return\
    \ .success(txt.split(separator: \",\").map { String($0) })\n    } else {\n   \
    \     return .failure(txt.filter { $0.isLowercase }.count)\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"\
    Hello\", \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmpz4e6qyo4/tmpz4e6qyo4.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae1553e4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae1550dbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae1550db988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae1550da7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpz4e6qyo4                        0x0000563563aa3343 <unavailable> + 9027

    5    libc.so.6                          0x00002ae1555d0460 __libc_start_main +
    245

    6    tmpz4e6qyo4                        0x0000563563aa2829 <unavailable> + 6185

    '
  stdout: ''
  timestamp: 1659820934
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    if txt.contains(\" \") {\n        return .success(txt.split(separator:\
    \ \" \").map { String($0) })\n    } else if txt.contains(\",\") {\n        return\
    \ .success(txt.split(separator: \",\").map { String($0) })\n    } else {\n   \
    \     var count = 0\n        for (i, c) in txt.enumerated() {\n            if\
    \ i % 2 == 0 && c.isLowercase {\n                count += 1\n            }\n \
    \       }\n        return .failure(count)\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(split_words(txt: \"Hello world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"Hello\"\
    , \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmp9vxntrum/tmp9vxntrum.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7211907c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b72115feb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b72115fe988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b72115fd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9vxntrum                        0x000056399b78963b <unavailable> + 9787

    5    libc.so.6                          0x00002b7211af3460 __libc_start_main +
    245

    6    tmp9vxntrum                        0x000056399b7889e9 <unavailable> + 6633

    '
  stdout: ''
  timestamp: 1659820934
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    if txt.contains(\" \") {\n        return .success(txt.split(separator:\
    \ \" \").map { String($0) })\n    } else if txt.contains(\",\") {\n        return\
    \ .success(txt.split(separator: \",\").map { String($0) })\n    } else {\n   \
    \     var count = 0\n        for (index, char) in txt.enumerated() {\n       \
    \     if index % 2 == 0 && char.isLowercase {\n                count += 1\n  \
    \          }\n        }\n        return .failure(count)\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"Hello\"\
    , \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmpidsbb9jy/tmpidsbb9jy.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad232895c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad23258cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad23258c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad23258b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpidsbb9jy                        0x0000558e186b763b <unavailable> + 9787

    5    libc.so.6                          0x00002ad232a81460 __libc_start_main +
    245

    6    tmpidsbb9jy                        0x0000558e186b69e9 <unavailable> + 6633

    '
  stdout: ''
  timestamp: 1659820934
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    if txt.contains(\" \") {\n        return .success(txt.split(separator:\
    \ \" \").map(String.init))\n    } else if txt.contains(\",\") {\n        return\
    \ .success(txt.split(separator: \",\").map(String.init))\n    } else {\n     \
    \   return .failure(txt.lowercased().filter { $0.isLetter }.enumerated().filter\
    \ { $0.offset % 2 == 1 }.map { $0.element.asciiValue! - 97 }.reduce(0, +))\n \
    \   }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(split_words(txt: \"Hello\
    \ world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt: \"\
    Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmpcvjo0n2j.swift:20:137: error: cannot convert value of type 'UInt8'\
    \ to closure result type 'Int'\n        return .failure(txt.lowercased().filter\
    \ { $0.isLetter }.enumerated().filter { $0.offset % 2 == 1 }.map { $0.element.asciiValue!\
    \ - 97 }.reduce(0, +))\n                                                     \
    \                                                            ~~~~~~~~~~~~~~~~~~~~~~~^~~~\n\
    \                                                                            \
    \                                     Int(                       )\n"
  stdout: ''
  timestamp: 1659820935
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    if txt.contains(\" \") {\n        return .success(txt.split(separator:\
    \ \" \").map(String.init))\n    } else if txt.contains(\",\") {\n        return\
    \ .success(txt.split(separator: \",\").map(String.init))\n    } else {\n     \
    \   return .failure(txt.lowercased().filter { $0.isLetter }.enumerated().filter\
    \ { $0.offset % 2 == 0 }.count)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(split_words(txt: \"Hello world!\") == .success([\"Hello\", \"world!\"]))\n\
    assert(split_words(txt: \"Hello,world!\") == .success([\"Hello\", \"world!\"]))\n\
    assert(split_words(txt: \"Hello world,!\") == .success([\"Hello\", \"world,!\"\
    ]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\"\
    , \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\nassert(split_words(txt:\
    \ \"aaabb\") == .failure(2))\nassert(split_words(txt: \"aaaBb\") == .failure(1))\n\
    assert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmpnx2rl_oi/tmpnx2rl_oi.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4006af5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b40067ecb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b40067ec988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b40067eb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnx2rl_oi                        0x000055ea31bee68b <unavailable> + 9867

    5    libc.so.6                          0x00002b4006ce1460 __libc_start_main +
    245

    6    tmpnx2rl_oi                        0x000055ea31beda39 <unavailable> + 6713

    '
  stdout: ''
  timestamp: 1659820934
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    if txt.contains(\" \") {\n        return .success(txt.split(separator:\
    \ \" \").map { String($0) })\n    } else if txt.contains(\",\") {\n        return\
    \ .success(txt.split(separator: \",\").map { String($0) })\n    } else {\n   \
    \     return .failure(txt.filter { $0.isLowercase }.count { $0.asciiValue! % 2\
    \ == 1 })\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(split_words(txt: \"\
    Hello world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmp0l52zj_s.swift:20:55: error: cannot call value of non-function\
    \ type 'Int'\n        return .failure(txt.filter { $0.isLowercase }.count { $0.asciiValue!\
    \ % 2 == 1 })\n                                                      ^\n"
  stdout: ''
  timestamp: 1659820935
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    if txt.contains(\" \") {\n        return .success(txt.split(separator:\
    \ \" \").map(String.init))\n    } else if txt.contains(\",\") {\n        return\
    \ .success(txt.split(separator: \",\").map(String.init))\n    } else {\n     \
    \   return .failure(txt.filter { $0.isLowercase }.count % 2)\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"\
    Hello\", \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmpbxnnr770/tmpbxnnr770.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0173aeec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b01737e5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b01737e5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b01737e47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbxnnr770                        0x0000564005c443e3 <unavailable> + 9187

    5    libc.so.6                          0x00002b0173cda460 __libc_start_main +
    245

    6    tmpbxnnr770                        0x0000564005c438c9 <unavailable> + 6345

    '
  stdout: ''
  timestamp: 1659820934
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    if txt.contains(\" \") {\n        return .success(txt.split(separator:\
    \ \" \").map { String($0) })\n    } else if txt.contains(\",\") {\n        return\
    \ .success(txt.split(separator: \",\").map { String($0) })\n    } else {\n   \
    \     return .failure(txt.filter { $0.isLowercase }.count)\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"\
    Hello\", \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmpz4e6qyo4/tmpz4e6qyo4.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae1553e4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae1550dbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae1550db988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae1550da7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpz4e6qyo4                        0x0000563563aa3343 <unavailable> + 9027

    5    libc.so.6                          0x00002ae1555d0460 __libc_start_main +
    245

    6    tmpz4e6qyo4                        0x0000563563aa2829 <unavailable> + 6185

    '
  stdout: ''
  timestamp: 1659820934
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    if txt.contains(\" \") {\n        return .success(txt.split(separator:\
    \ \" \").map { String($0) })\n    } else if txt.contains(\",\") {\n        return\
    \ .success(txt.split(separator: \",\").map { String($0) })\n    } else {\n   \
    \     return .failure(txt.filter { $0.isLowercase }.count % 2)\n    }\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"\
    Hello\", \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmpzeai57gw/tmpzeai57gw.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab4d3bf4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab4d38ebb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab4d38eb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab4d38ea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzeai57gw                        0x0000560110f373e3 <unavailable> + 9187

    5    libc.so.6                          0x00002ab4d3de0460 __libc_start_main +
    245

    6    tmpzeai57gw                        0x0000560110f368c9 <unavailable> + 6345

    '
  stdout: ''
  timestamp: 1659820934
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    if txt.contains(\" \") {\n        return .success(txt.split(separator:\
    \ \" \").map { String($0) })\n    } else if txt.contains(\",\") {\n        return\
    \ .success(txt.split(separator: \",\").map { String($0) })\n    } else {\n   \
    \     return .failure(txt.lowercased().filter { $0.isLetter }.enumerated().filter\
    \ { $0.offset % 2 == 0 }.count)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(split_words(txt: \"Hello world!\") == .success([\"Hello\", \"world!\"]))\n\
    assert(split_words(txt: \"Hello,world!\") == .success([\"Hello\", \"world!\"]))\n\
    assert(split_words(txt: \"Hello world,!\") == .success([\"Hello\", \"world,!\"\
    ]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\"\
    , \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\nassert(split_words(txt:\
    \ \"aaabb\") == .failure(2))\nassert(split_words(txt: \"aaaBb\") == .failure(1))\n\
    assert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmpusqqwafr/tmpusqqwafr.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abb3add8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abb3aacfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abb3aacf988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abb3aace7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpusqqwafr                        0x0000561cfd7e468b <unavailable> + 9867

    5    libc.so.6                          0x00002abb3afc4460 __libc_start_main +
    245

    6    tmpusqqwafr                        0x0000561cfd7e3a39 <unavailable> + 6713

    '
  stdout: ''
  timestamp: 1659820934
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    if let words = txt.split(separator: \" \").map(String.init) as?\
    \ [String] {\n        return .success(words)\n    } else if let words = txt.split(separator:\
    \ \",\").map(String.init) as? [String] {\n        return .success(words)\n   \
    \ } else {\n        var count = 0\n        for char in txt {\n            if let\
    \ ascii = char.asciiValue, ascii >= 97, ascii <= 122, ascii % 2 == 1 {\n     \
    \           count += 1\n            }\n        }\n        return .failure(count)\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(split_words(txt: \"Hello\
    \ world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt: \"\
    Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: Exception
  stderr: 'tmpvst2qda6/tmpvst2qda6.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4ba6af6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4ba67edb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4ba67ed988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4ba67ec7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvst2qda6                        0x0000561192f20cbe <unavailable> + 7358

    5    libc.so.6                          0x00002b4ba6ce2460 __libc_start_main +
    245

    6    tmpvst2qda6                        0x0000561192f20649 <unavailable> + 5705

    '
  stdout: ''
  timestamp: 1659820934
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    let words = txt.split(separator: \" \")\n    if words.count > 1\
    \ {\n        return .success(words.map { String($0) })\n    }\n    let words2\
    \ = txt.split(separator: \",\")\n    if words2.count > 1 {\n        return .success(words2.map\
    \ { String($0) })\n    }\n    var count = 0\n    for (i, c) in txt.lowercased().enumerated()\
    \ {\n        if i % 2 == 0 && c >= \"a\" && c <= \"z\" {\n            count +=\
    \ 1\n        }\n    }\n    return .failure(count)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(split_words(txt: \"Hello world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"Hello\"\
    , \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmpfoogxyza/tmpfoogxyza.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afc06cbbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afc069b2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afc069b2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afc069b17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfoogxyza                        0x0000562705cc272b <unavailable> + 10027

    5    libc.so.6                          0x00002afc06ea7460 __libc_start_main +
    245

    6    tmpfoogxyza                        0x0000562705cc1ad9 <unavailable> + 6873

    '
  stdout: ''
  timestamp: 1659820934
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    if txt.contains(\" \") {\n        return .success(txt.split(separator:\
    \ \" \").map { String($0) })\n    } else if txt.contains(\",\") {\n        return\
    \ .success(txt.split(separator: \",\").map { String($0) })\n    } else {\n   \
    \     var count = 0\n        for (i, c) in txt.enumerated() {\n            if\
    \ c.isLowercase && i % 2 == 0 {\n                count += 1\n            }\n \
    \       }\n        return .failure(count)\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(split_words(txt: \"Hello world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"Hello\"\
    , \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmpcog91bof/tmpcog91bof.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4e8904fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4e88d46b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4e88d46988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4e88d457b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcog91bof                        0x00005644b37a963b <unavailable> + 9787

    5    libc.so.6                          0x00002b4e8923b460 __libc_start_main +
    245

    6    tmpcog91bof                        0x00005644b37a89e9 <unavailable> + 6633

    '
  stdout: ''
  timestamp: 1659820934
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    if txt.contains(\" \") {\n        return .success(txt.split(separator:\
    \ \" \").map { String($0) })\n    } else if txt.contains(\",\") {\n        return\
    \ .success(txt.split(separator: \",\").map { String($0) })\n    } else {\n   \
    \     var count = 0\n        for (i, c) in txt.enumerated() {\n            if\
    \ c.isLowercase && i % 2 == 0 {\n                count += 1\n            }\n \
    \       }\n        return .failure(count)\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(split_words(txt: \"Hello world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"Hello\"\
    , \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmpcog91bof/tmpcog91bof.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4e8904fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4e88d46b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4e88d46988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4e88d457b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcog91bof                        0x00005644b37a963b <unavailable> + 9787

    5    libc.so.6                          0x00002b4e8923b460 __libc_start_main +
    245

    6    tmpcog91bof                        0x00005644b37a89e9 <unavailable> + 6633

    '
  stdout: ''
  timestamp: 1659820934
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    if txt.contains(\" \") {\n        return .success(txt.split(separator:\
    \ \" \").map(String.init))\n    } else if txt.contains(\",\") {\n        return\
    \ .success(txt.split(separator: \",\").map(String.init))\n    } else {\n     \
    \   var count = 0\n        for (index, char) in txt.lowercased().enumerated()\
    \ {\n            if index % 2 == 0 && char.asciiValue! >= 97 && char.asciiValue!\
    \ <= 122 {\n                count += 1\n            }\n        }\n        return\
    \ .failure(count)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(split_words(txt:\
    \ \"Hello world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: Exception
  stderr: 'tmpni1dkukj/tmpni1dkukj.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b353c656c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b353c34db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b353c34d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b353c34c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpni1dkukj                        0x000056404973f68b <unavailable> + 9867

    5    libc.so.6                          0x00002b353c842460 __libc_start_main +
    245

    6    tmpni1dkukj                        0x000056404973ea39 <unavailable> + 6713

    '
  stdout: ''
  timestamp: 1659820934
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    if txt.contains(\" \") {\n        return .success(txt.split(separator:\
    \ \" \").map(String.init))\n    } else if txt.contains(\",\") {\n        return\
    \ .success(txt.split(separator: \",\").map(String.init))\n    } else {\n     \
    \   return .failure(txt.filter { $0.isLowercase }.count)\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"Hello\"\
    , \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmpo6lu2fh4/tmpo6lu2fh4.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abd14f6fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abd14c66b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abd14c66988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abd14c657b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpo6lu2fh4                        0x0000564d5c4aa343 <unavailable> + 9027

    5    libc.so.6                          0x00002abd1515b460 __libc_start_main +
    245

    6    tmpo6lu2fh4                        0x0000564d5c4a9829 <unavailable> + 6185

    '
  stdout: ''
  timestamp: 1659820934
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    if txt.contains(\" \") {\n        return .success(txt.split(separator:\
    \ \" \").map { String($0) })\n    } else if txt.contains(\",\") {\n        return\
    \ .success(txt.split(separator: \",\").map { String($0) })\n    } else {\n   \
    \     return .failure(txt.filter { $0.isLowercase }.count { $0.asciiValue! % 2\
    \ == 1 })\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(split_words(txt: \"\
    Hello world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmp0l52zj_s.swift:20:55: error: cannot call value of non-function\
    \ type 'Int'\n        return .failure(txt.filter { $0.isLowercase }.count { $0.asciiValue!\
    \ % 2 == 1 })\n                                                      ^\n"
  stdout: ''
  timestamp: 1659820935
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    if txt.contains(\" \") {\n        return .success(txt.split(separator:\
    \ \" \").map(String.init))\n    } else if txt.contains(\",\") {\n        return\
    \ .success(txt.split(separator: \",\").map(String.init))\n    } else {\n     \
    \   return .failure(txt.lowercased().filter { $0.isLetter }.filter { $0.asciiValue!\
    \ % 2 == 1 }.count)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(split_words(txt:\
    \ \"Hello world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: Exception
  stderr: 'tmppq0wzq1k/tmppq0wzq1k.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4270090c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b426fd87b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b426fd87988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b426fd867b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppq0wzq1k                        0x0000558c22ffe5bb <unavailable> + 9659

    5    libc.so.6                          0x00002b427027c460 __libc_start_main +
    245

    6    tmppq0wzq1k                        0x0000558c22ffd969 <unavailable> + 6505

    '
  stdout: ''
  timestamp: 1659820934
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    return .failure(0)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(split_words(txt:\
    \ \"Hello world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: Exception
  stderr: 'tmpi6nwrd5r/tmpi6nwrd5r.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b996d825c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b996d51cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b996d51c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b996d51b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpi6nwrd5r                        0x0000562c2f58584c <unavailable> + 6220

    5    libc.so.6                          0x00002b996da11460 __libc_start_main +
    245

    6    tmpi6nwrd5r                        0x0000562c2f585389 <unavailable> + 5001

    '
  stdout: ''
  timestamp: 1659820934
- exit_code: 0
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    if txt.contains(\" \") {\n        return .success(txt.split(separator:\
    \ \" \").map { String($0) })\n    } else if txt.contains(\",\") {\n        return\
    \ .success(txt.split(separator: \",\").map { String($0) })\n    } else {\n   \
    \     var count = 0\n        for c in txt {\n            if c.isLowercase && (c.asciiValue!\
    \ - 97) % 2 == 1 {\n                count += 1\n            }\n        }\n   \
    \     return .failure(count)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(split_words(txt: \"Hello world!\") == .success([\"Hello\", \"world!\"]))\n\
    assert(split_words(txt: \"Hello,world!\") == .success([\"Hello\", \"world!\"]))\n\
    assert(split_words(txt: \"Hello world,!\") == .success([\"Hello\", \"world,!\"\
    ]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\"\
    , \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\nassert(split_words(txt:\
    \ \"aaabb\") == .failure(2))\nassert(split_words(txt: \"aaaBb\") == .failure(1))\n\
    assert(split_words(txt: \"\") == .failure(0))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820934
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    if txt.contains(\" \") {\n        return .success(txt.split(separator:\
    \ \" \").map { String($0) })\n    } else if txt.contains(\",\") {\n        return\
    \ .success(txt.split(separator: \",\").map { String($0) })\n    } else {\n   \
    \     return .failure(txt.lowercased().filter { $0.isLetter }.enumerated().filter\
    \ { $0.offset % 2 == 0 }.count)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(split_words(txt: \"Hello world!\") == .success([\"Hello\", \"world!\"]))\n\
    assert(split_words(txt: \"Hello,world!\") == .success([\"Hello\", \"world!\"]))\n\
    assert(split_words(txt: \"Hello world,!\") == .success([\"Hello\", \"world,!\"\
    ]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\"\
    , \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\nassert(split_words(txt:\
    \ \"aaabb\") == .failure(2))\nassert(split_words(txt: \"aaaBb\") == .failure(1))\n\
    assert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmpusqqwafr/tmpusqqwafr.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abb3add8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abb3aacfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abb3aacf988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abb3aace7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpusqqwafr                        0x0000561cfd7e468b <unavailable> + 9867

    5    libc.so.6                          0x00002abb3afc4460 __libc_start_main +
    245

    6    tmpusqqwafr                        0x0000561cfd7e3a39 <unavailable> + 6713

    '
  stdout: ''
  timestamp: 1659820934
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    if let words = txt.split(separator: \" \").map(String.init) as?\
    \ [String] {\n        return .success(words)\n    } else if let words = txt.split(separator:\
    \ \",\").map(String.init) as? [String] {\n        return .success(words)\n   \
    \ } else {\n        return .failure(txt.filter { $0.isLowercase }.count)\n   \
    \ }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(split_words(txt: \"Hello world!\"\
    ) == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello,world!\"\
    ) == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello world,!\"\
    ) == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world\
    \ !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"\
    abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: Exception
  stderr: 'tmp5kvz7ncz/tmp5kvz7ncz.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6c3db67c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6c3d85eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6c3d85e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6c3d85d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5kvz7ncz                        0x00005637afb0fcbe <unavailable> + 7358

    5    libc.so.6                          0x00002b6c3dd53460 __libc_start_main +
    245

    6    tmp5kvz7ncz                        0x00005637afb0f649 <unavailable> + 5705

    '
  stdout: ''
  timestamp: 1659820934
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    return .failure(0)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(split_words(txt:\
    \ \"Hello world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: Exception
  stderr: 'tmpi6nwrd5r/tmpi6nwrd5r.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b996d825c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b996d51cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b996d51c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b996d51b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpi6nwrd5r                        0x0000562c2f58584c <unavailable> + 6220

    5    libc.so.6                          0x00002b996da11460 __libc_start_main +
    245

    6    tmpi6nwrd5r                        0x0000562c2f585389 <unavailable> + 5001

    '
  stdout: ''
  timestamp: 1659820934
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    if let words = txt.split(separator: \" \").map(String.init) as?\
    \ [String] {\n        return .success(words)\n    } else if let words = txt.split(separator:\
    \ \",\").map(String.init) as? [String] {\n        return .success(words)\n   \
    \ } else {\n        var count = 0\n        for char in txt {\n            if let\
    \ ascii = char.asciiValue, ascii >= 97, ascii <= 122, ascii % 2 == 1 {\n     \
    \           count += 1\n            }\n        }\n        return .failure(count)\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(split_words(txt: \"Hello\
    \ world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt: \"\
    Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: Exception
  stderr: 'tmpvst2qda6/tmpvst2qda6.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4ba6af6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4ba67edb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4ba67ed988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4ba67ec7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvst2qda6                        0x0000561192f20cbe <unavailable> + 7358

    5    libc.so.6                          0x00002b4ba6ce2460 __libc_start_main +
    245

    6    tmpvst2qda6                        0x0000561192f20649 <unavailable> + 5705

    '
  stdout: ''
  timestamp: 1659820934
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    if txt.contains(\" \") {\n        return .success(txt.split(separator:\
    \ \" \").map { String($0) })\n    } else if txt.contains(\",\") {\n        return\
    \ .success(txt.split(separator: \",\").map { String($0) })\n    } else {\n   \
    \     return .failure(txt.lowercased().filter { $0.isLetter }.enumerated().filter\
    \ { $0.offset % 2 == 0 }.count)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(split_words(txt: \"Hello world!\") == .success([\"Hello\", \"world!\"]))\n\
    assert(split_words(txt: \"Hello,world!\") == .success([\"Hello\", \"world!\"]))\n\
    assert(split_words(txt: \"Hello world,!\") == .success([\"Hello\", \"world,!\"\
    ]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\"\
    , \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\nassert(split_words(txt:\
    \ \"aaabb\") == .failure(2))\nassert(split_words(txt: \"aaaBb\") == .failure(1))\n\
    assert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmpusqqwafr/tmpusqqwafr.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abb3add8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abb3aacfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abb3aacf988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abb3aace7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpusqqwafr                        0x0000561cfd7e468b <unavailable> + 9867

    5    libc.so.6                          0x00002abb3afc4460 __libc_start_main +
    245

    6    tmpusqqwafr                        0x0000561cfd7e3a39 <unavailable> + 6713

    '
  stdout: ''
  timestamp: 1659820934
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    if txt.contains(\" \") {\n        return .success(txt.split(separator:\
    \ \" \").map(String.init))\n    } else if txt.contains(\",\") {\n        return\
    \ .success(txt.split(separator: \",\").map(String.init))\n    } else {\n     \
    \   return .failure(txt.lowercased().filter { $0.isLetter }.enumerated().filter\
    \ { $0.offset % 2 == 0 }.count)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(split_words(txt: \"Hello world!\") == .success([\"Hello\", \"world!\"]))\n\
    assert(split_words(txt: \"Hello,world!\") == .success([\"Hello\", \"world!\"]))\n\
    assert(split_words(txt: \"Hello world,!\") == .success([\"Hello\", \"world,!\"\
    ]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\"\
    , \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\nassert(split_words(txt:\
    \ \"aaabb\") == .failure(2))\nassert(split_words(txt: \"aaaBb\") == .failure(1))\n\
    assert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmpnx2rl_oi/tmpnx2rl_oi.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4006af5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b40067ecb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b40067ec988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b40067eb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnx2rl_oi                        0x000055ea31bee68b <unavailable> + 9867

    5    libc.so.6                          0x00002b4006ce1460 __libc_start_main +
    245

    6    tmpnx2rl_oi                        0x000055ea31beda39 <unavailable> + 6713

    '
  stdout: ''
  timestamp: 1659820934
- exit_code: 0
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    if txt.contains(\" \") {\n        return .success(txt.split(separator:\
    \ \" \").map(String.init))\n    } else if txt.contains(\",\") {\n        return\
    \ .success(txt.split(separator: \",\").map(String.init))\n    } else {\n     \
    \   var count = 0\n        for c in txt {\n            if c.isLowercase {\n  \
    \              if (c.asciiValue! - 97) % 2 == 1 {\n                    count +=\
    \ 1\n                }\n            }\n        }\n        return .failure(count)\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(split_words(txt: \"Hello\
    \ world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt: \"\
    Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820934
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    if txt.contains(\" \") {\n        return .success(txt.split(separator:\
    \ \" \").map(String.init))\n    } else if txt.contains(\",\") {\n        return\
    \ .success(txt.split(separator: \",\").map(String.init))\n    } else {\n     \
    \   var count = 0\n        for i in txt.lowercased() {\n            if i.asciiValue!\
    \ % 2 == 1 {\n                count += 1\n            }\n        }\n        return\
    \ .failure(count)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(split_words(txt:\
    \ \"Hello world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: Exception
  stderr: 'tmp1z5euv1w/tmp1z5euv1w.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b50ae34fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b50ae046b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b50ae046988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b50ae0457b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1z5euv1w                        0x0000559b30e4353b <unavailable> + 9531

    5    libc.so.6                          0x00002b50ae53b460 __libc_start_main +
    245

    6    tmp1z5euv1w                        0x0000559b30e428e9 <unavailable> + 6377

    '
  stdout: ''
  timestamp: 1659820935
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    if txt.contains(\" \") {\n        return .success(txt.split(separator:\
    \ \" \").map(String.init))\n    } else if txt.contains(\",\") {\n        return\
    \ .success(txt.split(separator: \",\").map(String.init))\n    } else {\n     \
    \   return .failure(txt.lowercased().filter { $0.isLetter }.filter { $0.asciiValue!\
    \ % 2 == 1 }.count)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(split_words(txt:\
    \ \"Hello world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: Exception
  stderr: 'tmppq0wzq1k/tmppq0wzq1k.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4270090c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b426fd87b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b426fd87988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b426fd867b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppq0wzq1k                        0x0000558c22ffe5bb <unavailable> + 9659

    5    libc.so.6                          0x00002b427027c460 __libc_start_main +
    245

    6    tmppq0wzq1k                        0x0000558c22ffd969 <unavailable> + 6505

    '
  stdout: ''
  timestamp: 1659820934
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    if txt.contains(\" \") {\n        return .success(txt.split(separator:\
    \ \" \").map(String.init))\n    } else if txt.contains(\",\") {\n        return\
    \ .success(txt.split(separator: \",\").map(String.init))\n    } else {\n     \
    \   return .failure(txt.lowercased().filter { $0.isLetter }.enumerated().filter\
    \ { $0.offset % 2 == 0 }.count)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(split_words(txt: \"Hello world!\") == .success([\"Hello\", \"world!\"]))\n\
    assert(split_words(txt: \"Hello,world!\") == .success([\"Hello\", \"world!\"]))\n\
    assert(split_words(txt: \"Hello world,!\") == .success([\"Hello\", \"world,!\"\
    ]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\"\
    , \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\nassert(split_words(txt:\
    \ \"aaabb\") == .failure(2))\nassert(split_words(txt: \"aaaBb\") == .failure(1))\n\
    assert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmpnx2rl_oi/tmpnx2rl_oi.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4006af5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b40067ecb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b40067ec988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b40067eb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnx2rl_oi                        0x000055ea31bee68b <unavailable> + 9867

    5    libc.so.6                          0x00002b4006ce1460 __libc_start_main +
    245

    6    tmpnx2rl_oi                        0x000055ea31beda39 <unavailable> + 6713

    '
  stdout: ''
  timestamp: 1659820934
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    if txt.contains(\" \") {\n        return .success(txt.split(separator:\
    \ \" \").map { String($0) })\n    } else if txt.contains(\",\") {\n        return\
    \ .success(txt.split(separator: \",\").map { String($0) })\n    } else {\n   \
    \     return .failure(txt.filter { $0.isLowercase }.count { $0.asciiValue! % 2\
    \ == 1 })\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(split_words(txt: \"\
    Hello world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmp0l52zj_s.swift:20:55: error: cannot call value of non-function\
    \ type 'Int'\n        return .failure(txt.filter { $0.isLowercase }.count { $0.asciiValue!\
    \ % 2 == 1 })\n                                                      ^\n"
  stdout: ''
  timestamp: 1659820935
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    // TODO: Implement me!\n    return .failure(0)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"Hello\"\
    , \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmpetgn9bkh/tmpetgn9bkh.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abbecfe7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abbeccdeb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abbeccde988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abbeccdd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpetgn9bkh                        0x000055d17509b84c <unavailable> + 6220

    5    libc.so.6                          0x00002abbed1d3460 __libc_start_main +
    245

    6    tmpetgn9bkh                        0x000055d17509b389 <unavailable> + 5001

    '
  stdout: ''
  timestamp: 1659820935
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    if txt.contains(\" \") {\n        return .success(txt.split(separator:\
    \ \" \").map { String($0) })\n    } else if txt.contains(\",\") {\n        return\
    \ .success(txt.split(separator: \",\").map { String($0) })\n    } else {\n   \
    \     return .failure(txt.lowercased().filter { $0.isLetter }.enumerated().filter\
    \ { $0.offset % 2 == 0 }.count)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(split_words(txt: \"Hello world!\") == .success([\"Hello\", \"world!\"]))\n\
    assert(split_words(txt: \"Hello,world!\") == .success([\"Hello\", \"world!\"]))\n\
    assert(split_words(txt: \"Hello world,!\") == .success([\"Hello\", \"world,!\"\
    ]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\"\
    , \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\nassert(split_words(txt:\
    \ \"aaabb\") == .failure(2))\nassert(split_words(txt: \"aaaBb\") == .failure(1))\n\
    assert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmpusqqwafr/tmpusqqwafr.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abb3add8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abb3aacfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abb3aacf988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abb3aace7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpusqqwafr                        0x0000561cfd7e468b <unavailable> + 9867

    5    libc.so.6                          0x00002abb3afc4460 __libc_start_main +
    245

    6    tmpusqqwafr                        0x0000561cfd7e3a39 <unavailable> + 6713

    '
  stdout: ''
  timestamp: 1659820934
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    let words = txt.split(separator: \" \")\n    if words.count > 1\
    \ {\n        return .success(words.map { String($0) })\n    }\n    let words2\
    \ = txt.split(separator: \",\")\n    if words2.count > 1 {\n        return .success(words2.map\
    \ { String($0) })\n    }\n    let words3 = txt.filter { $0.isLowercase }\n   \
    \ return .failure(words3.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(split_words(txt:\
    \ \"Hello world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: Exception
  stderr: 'tmpvuzuv1iu/tmpvuzuv1iu.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1c18939c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1c18630b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1c18630988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1c1862f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvuzuv1iu                        0x00005561318e72d3 <unavailable> + 8915

    5    libc.so.6                          0x00002b1c18b25460 __libc_start_main +
    245

    6    tmpvuzuv1iu                        0x00005561318e67b9 <unavailable> + 6073

    '
  stdout: ''
  timestamp: 1659820935
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    if txt.contains(\" \") {\n        return .success(txt.split(separator:\
    \ \" \").map { String($0) })\n    } else if txt.contains(\",\") {\n        return\
    \ .success(txt.split(separator: \",\").map { String($0) })\n    } else {\n   \
    \     return .failure(txt.filter { $0.isLowercase }.count { $0.asciiValue! % 2\
    \ == 1 })\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(split_words(txt: \"\
    Hello world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmp0l52zj_s.swift:20:55: error: cannot call value of non-function\
    \ type 'Int'\n        return .failure(txt.filter { $0.isLowercase }.count { $0.asciiValue!\
    \ % 2 == 1 })\n                                                      ^\n"
  stdout: ''
  timestamp: 1659820935
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    if txt.contains(\" \") {\n        return .success(txt.split(separator:\
    \ \" \").map(String.init))\n    } else if txt.contains(\",\") {\n        return\
    \ .success(txt.split(separator: \",\").map(String.init))\n    } else {\n     \
    \   return .failure(txt.filter { $0.isLowercase }.count % 2)\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"\
    Hello\", \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmpbxnnr770/tmpbxnnr770.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0173aeec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b01737e5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b01737e5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b01737e47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbxnnr770                        0x0000564005c443e3 <unavailable> + 9187

    5    libc.so.6                          0x00002b0173cda460 __libc_start_main +
    245

    6    tmpbxnnr770                        0x0000564005c438c9 <unavailable> + 6345

    '
  stdout: ''
  timestamp: 1659820934
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    if let index = txt.firstIndex(of: \" \") {\n        return .success(txt.split(separator:\
    \ \" \").map { String($0) })\n    } else if let index = txt.firstIndex(of: \"\
    ,\") {\n        return .success(txt.split(separator: \",\").map { String($0) })\n\
    \    } else {\n        return .failure(txt.filter { $0.isLowercase }.count)\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(split_words(txt: \"Hello\
    \ world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt: \"\
    Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: Exception
  stderr: 'tmpl68hr_hx/tmpl68hr_hx.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6e995b0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6e992a7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6e992a7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6e992a67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpl68hr_hx                        0x000055bfc15d2313 <unavailable> + 8979

    5    libc.so.6                          0x00002b6e9979c460 __libc_start_main +
    245

    6    tmpl68hr_hx                        0x000055bfc15d17f9 <unavailable> + 6137

    '
  stdout: ''
  timestamp: 1659820935
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    if let words = txt.components(separatedBy: \" \").filter({ $0 !=\
    \ \"\" }) as? [String] {\n        return .success(words)\n    } else if let words\
    \ = txt.components(separatedBy: \",\").filter({ $0 != \"\" }) as? [String] {\n\
    \        return .success(words)\n    } else {\n        return .failure(txt.lowercased().filter({\
    \ $0 >= \"a\" && $0 <= \"z\" }).enumerated().filter({ $0.offset % 2 == 0 }).count)\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(split_words(txt: \"Hello\
    \ world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt: \"\
    Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmpvrw5e0kv.swift:15:24: error: value of type 'String' has no member\
    \ 'components'\n    if let words = txt.components(separatedBy: \" \").filter({\
    \ $0 != \"\" }) as? [String] {\n                   ~~~ ^~~~~~~~~~\n/tmp/tmpvrw5e0kv.swift:17:31:\
    \ error: value of type 'String' has no member 'components'\n    } else if let\
    \ words = txt.components(separatedBy: \",\").filter({ $0 != \"\" }) as? [String]\
    \ {\n                          ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820935
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    if txt.contains(\" \") {\n        return .success(txt.split(separator:\
    \ \" \").map { String($0) })\n    } else if txt.contains(\",\") {\n        return\
    \ .success(txt.split(separator: \",\").map { String($0) })\n    } else {\n   \
    \     return .failure(txt.filter { $0.isLowercase }.count)\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"\
    Hello\", \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmpz4e6qyo4/tmpz4e6qyo4.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae1553e4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae1550dbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae1550db988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae1550da7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpz4e6qyo4                        0x0000563563aa3343 <unavailable> + 9027

    5    libc.so.6                          0x00002ae1555d0460 __libc_start_main +
    245

    6    tmpz4e6qyo4                        0x0000563563aa2829 <unavailable> + 6185

    '
  stdout: ''
  timestamp: 1659820934
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    if txt.contains(\" \") {\n        return .success(txt.split(separator:\
    \ \" \").map { String($0) })\n    } else if txt.contains(\",\") {\n        return\
    \ .success(txt.split(separator: \",\").map { String($0) })\n    } else {\n   \
    \     var count = 0\n        for (i, c) in txt.enumerated() {\n            if\
    \ i % 2 == 0 && c.isLowercase {\n                count += 1\n            }\n \
    \       }\n        return .failure(count)\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(split_words(txt: \"Hello world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"Hello\"\
    , \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmp9vxntrum/tmp9vxntrum.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7211907c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b72115feb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b72115fe988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b72115fd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9vxntrum                        0x000056399b78963b <unavailable> + 9787

    5    libc.so.6                          0x00002b7211af3460 __libc_start_main +
    245

    6    tmp9vxntrum                        0x000056399b7889e9 <unavailable> + 6633

    '
  stdout: ''
  timestamp: 1659820934
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    if let index = txt.firstIndex(of: \" \") {\n        return .success(txt.split(separator:\
    \ \" \").map(String.init))\n    } else if let index = txt.firstIndex(of: \",\"\
    ) {\n        return .success(txt.split(separator: \",\").map(String.init))\n \
    \   } else {\n        return .failure(txt.filter { $0.isLowercase }.count)\n \
    \   }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(split_words(txt: \"Hello\
    \ world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt: \"\
    Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: Exception
  stderr: 'tmpk__9ixkc/tmpk__9ixkc.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b32afbc9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b32af8c0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b32af8c0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b32af8bf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpk__9ixkc                        0x000055e4e7591313 <unavailable> + 8979

    5    libc.so.6                          0x00002b32afdb5460 __libc_start_main +
    245

    6    tmpk__9ixkc                        0x000055e4e75907f9 <unavailable> + 6137

    '
  stdout: ''
  timestamp: 1659820935
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    if txt.contains(\" \") {\n        return .success(txt.split(separator:\
    \ \" \").map { String($0) })\n    } else if txt.contains(\",\") {\n        return\
    \ .success(txt.split(separator: \",\").map { String($0) })\n    } else {\n   \
    \     return .failure(txt.filter { $0.isLowercase }.count)\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"\
    Hello\", \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmpz4e6qyo4/tmpz4e6qyo4.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae1553e4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae1550dbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae1550db988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae1550da7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpz4e6qyo4                        0x0000563563aa3343 <unavailable> + 9027

    5    libc.so.6                          0x00002ae1555d0460 __libc_start_main +
    245

    6    tmpz4e6qyo4                        0x0000563563aa2829 <unavailable> + 6185

    '
  stdout: ''
  timestamp: 1659820934
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    if txt.contains(\" \") {\n        return .success(txt.split(separator:\
    \ \" \").map { String($0) })\n    } else if txt.contains(\",\") {\n        return\
    \ .success(txt.split(separator: \",\").map { String($0) })\n    } else {\n   \
    \     return .failure(txt.filter { $0.isLowercase }.count)\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"\
    Hello\", \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmpz4e6qyo4/tmpz4e6qyo4.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae1553e4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae1550dbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae1550db988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae1550da7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpz4e6qyo4                        0x0000563563aa3343 <unavailable> + 9027

    5    libc.so.6                          0x00002ae1555d0460 __libc_start_main +
    245

    6    tmpz4e6qyo4                        0x0000563563aa2829 <unavailable> + 6185

    '
  stdout: ''
  timestamp: 1659820934
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    if txt.contains(\" \") {\n        return .success(txt.split(separator:\
    \ \" \").map(String.init))\n    } else if txt.contains(\",\") {\n        return\
    \ .success(txt.split(separator: \",\").map(String.init))\n    } else {\n     \
    \   return .failure(txt.lowercased().filter { $0.isLetter }.enumerated().filter\
    \ { $0.offset % 2 == 0 }.count)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(split_words(txt: \"Hello world!\") == .success([\"Hello\", \"world!\"]))\n\
    assert(split_words(txt: \"Hello,world!\") == .success([\"Hello\", \"world!\"]))\n\
    assert(split_words(txt: \"Hello world,!\") == .success([\"Hello\", \"world,!\"\
    ]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\"\
    , \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\nassert(split_words(txt:\
    \ \"aaabb\") == .failure(2))\nassert(split_words(txt: \"aaaBb\") == .failure(1))\n\
    assert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmpnx2rl_oi/tmpnx2rl_oi.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4006af5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b40067ecb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b40067ec988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b40067eb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnx2rl_oi                        0x000055ea31bee68b <unavailable> + 9867

    5    libc.so.6                          0x00002b4006ce1460 __libc_start_main +
    245

    6    tmpnx2rl_oi                        0x000055ea31beda39 <unavailable> + 6713

    '
  stdout: ''
  timestamp: 1659820934
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    if txt.contains(\" \") {\n        return .success(txt.split(separator:\
    \ \" \").map { String($0) })\n    } else if txt.contains(\",\") {\n        return\
    \ .success(txt.split(separator: \",\").map { String($0) })\n    } else {\n   \
    \     return .failure(txt.filter { $0.isLowercase }.count { $0.asciiValue! % 2\
    \ == 1 })\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(split_words(txt: \"\
    Hello world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmp0l52zj_s.swift:20:55: error: cannot call value of non-function\
    \ type 'Int'\n        return .failure(txt.filter { $0.isLowercase }.count { $0.asciiValue!\
    \ % 2 == 1 })\n                                                      ^\n"
  stdout: ''
  timestamp: 1659820935
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    if txt.contains(\" \") {\n        return .success(txt.split(separator:\
    \ \" \").map { String($0) })\n    } else if txt.contains(\",\") {\n        return\
    \ .success(txt.split(separator: \",\").map { String($0) })\n    } else {\n   \
    \     return .failure(txt.filter { $0.isLowercase }.count)\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"\
    Hello\", \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmpz4e6qyo4/tmpz4e6qyo4.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae1553e4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae1550dbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae1550db988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae1550da7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpz4e6qyo4                        0x0000563563aa3343 <unavailable> + 9027

    5    libc.so.6                          0x00002ae1555d0460 __libc_start_main +
    245

    6    tmpz4e6qyo4                        0x0000563563aa2829 <unavailable> + 6185

    '
  stdout: ''
  timestamp: 1659820934
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    if txt.contains(\" \") {\n        return .success(txt.split(separator:\
    \ \" \").map(String.init))\n    } else if txt.contains(\",\") {\n        return\
    \ .success(txt.split(separator: \",\").map(String.init))\n    } else {\n     \
    \   return .failure(txt.lowercased().enumerated().filter({ $0.offset % 2 == 0\
    \ }).map({ $0.element.asciiValue! - 97 }).reduce(0, +))\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"Hello\"\
    , \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmptmpei409.swift:20:115: error: cannot convert value of type 'UInt8'\
    \ to closure result type 'Int'\n        return .failure(txt.lowercased().enumerated().filter({\
    \ $0.offset % 2 == 0 }).map({ $0.element.asciiValue! - 97 }).reduce(0, +))\n \
    \                                                                            \
    \              ~~~~~~~~~~~~~~~~~~~~~~~^~~~\n                                 \
    \                                                          Int(              \
    \         )\n"
  stdout: ''
  timestamp: 1659820935
- exit_code: 0
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    let words = txt.split(separator: \" \")\n    if words.count > 1\
    \ {\n        return .success(words.map { String($0) })\n    }\n    let words2\
    \ = txt.split(separator: \",\")\n    if words2.count > 1 {\n        return .success(words2.map\
    \ { String($0) })\n    }\n    var count = 0\n    for c in txt {\n        let i\
    \ = Int(c.asciiValue!) - Int(UnicodeScalar(\"a\").value)\n        if i % 2 ==\
    \ 1 {\n            count += 1\n        }\n    }\n    return .failure(count)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"\
    Hello\", \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820935
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    if txt.contains(\" \") {\n        return .success(txt.split(separator:\
    \ \" \").map { String($0) })\n    } else if txt.contains(\",\") {\n        return\
    \ .success(txt.split(separator: \",\").map { String($0) })\n    } else {\n   \
    \     return .failure(txt.filter { $0.isLowercase }.count { $0.asciiValue! % 2\
    \ == 1 })\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(split_words(txt: \"\
    Hello world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmp0l52zj_s.swift:20:55: error: cannot call value of non-function\
    \ type 'Int'\n        return .failure(txt.filter { $0.isLowercase }.count { $0.asciiValue!\
    \ % 2 == 1 })\n                                                      ^\n"
  stdout: ''
  timestamp: 1659820935
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    return .failure(0)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(split_words(txt:\
    \ \"Hello world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: Exception
  stderr: 'tmpi6nwrd5r/tmpi6nwrd5r.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b996d825c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b996d51cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b996d51c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b996d51b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpi6nwrd5r                        0x0000562c2f58584c <unavailable> + 6220

    5    libc.so.6                          0x00002b996da11460 __libc_start_main +
    245

    6    tmpi6nwrd5r                        0x0000562c2f585389 <unavailable> + 5001

    '
  stdout: ''
  timestamp: 1659820934
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    // TODO: Implement\n    return .failure(0)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"Hello\"\
    , \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmpes10xz_n/tmpes10xz_n.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b09df65ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b09df351b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b09df351988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b09df3507b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpes10xz_n                        0x0000558f08c0984c <unavailable> + 6220

    5    libc.so.6                          0x00002b09df846460 __libc_start_main +
    245

    6    tmpes10xz_n                        0x0000558f08c09389 <unavailable> + 5001

    '
  stdout: ''
  timestamp: 1659820935
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    // TODO: Implement\n    return .failure(0)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"Hello\"\
    , \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmpes10xz_n/tmpes10xz_n.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b09df65ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b09df351b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b09df351988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b09df3507b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpes10xz_n                        0x0000558f08c0984c <unavailable> + 6220

    5    libc.so.6                          0x00002b09df846460 __libc_start_main +
    245

    6    tmpes10xz_n                        0x0000558f08c09389 <unavailable> + 5001

    '
  stdout: ''
  timestamp: 1659820935
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    if txt.contains(\" \") {\n        return .success(txt.split(separator:\
    \ \" \").map { String($0) })\n    } else if txt.contains(\",\") {\n        return\
    \ .success(txt.split(separator: \",\").map { String($0) })\n    } else {\n   \
    \     return .failure(txt.filter { $0.isLowercase }.count % 2)\n    }\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"\
    Hello\", \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmpzeai57gw/tmpzeai57gw.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab4d3bf4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab4d38ebb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab4d38eb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab4d38ea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzeai57gw                        0x0000560110f373e3 <unavailable> + 9187

    5    libc.so.6                          0x00002ab4d3de0460 __libc_start_main +
    245

    6    tmpzeai57gw                        0x0000560110f368c9 <unavailable> + 6345

    '
  stdout: ''
  timestamp: 1659820934
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    if txt.contains(\" \") {\n        return .success(txt.split(separator:\
    \ \" \").map { String($0) })\n    } else if txt.contains(\",\") {\n        return\
    \ .success(txt.split(separator: \",\").map { String($0) })\n    } else {\n   \
    \     return .failure(txt.filter { $0.isLowercase }.count)\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"\
    Hello\", \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmpz4e6qyo4/tmpz4e6qyo4.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae1553e4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae1550dbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae1550db988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae1550da7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpz4e6qyo4                        0x0000563563aa3343 <unavailable> + 9027

    5    libc.so.6                          0x00002ae1555d0460 __libc_start_main +
    245

    6    tmpz4e6qyo4                        0x0000563563aa2829 <unavailable> + 6185

    '
  stdout: ''
  timestamp: 1659820934
- exit_code: 0
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    let words = txt.split(separator: \" \")\n    if words.count > 1\
    \ {\n        return .success(words.map { String($0) })\n    }\n    let words2\
    \ = txt.split(separator: \",\")\n    if words2.count > 1 {\n        return .success(words2.map\
    \ { String($0) })\n    }\n    var count = 0\n    for c in txt {\n        let i\
    \ = Int(c.asciiValue!) - Int(UnicodeScalar(\"a\").value)\n        if i % 2 ==\
    \ 1 {\n            count += 1\n        }\n    }\n    return .failure(count)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"\
    Hello\", \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820935
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    return .failure(0)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(split_words(txt:\
    \ \"Hello world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: Exception
  stderr: 'tmpi6nwrd5r/tmpi6nwrd5r.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b996d825c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b996d51cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b996d51c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b996d51b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpi6nwrd5r                        0x0000562c2f58584c <unavailable> + 6220

    5    libc.so.6                          0x00002b996da11460 __libc_start_main +
    245

    6    tmpi6nwrd5r                        0x0000562c2f585389 <unavailable> + 5001

    '
  stdout: ''
  timestamp: 1659820934
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    if txt.contains(\" \") {\n        return .success(txt.split(separator:\
    \ \" \").map { String($0) })\n    } else if txt.contains(\",\") {\n        return\
    \ .success(txt.split(separator: \",\").map { String($0) })\n    } else {\n   \
    \     var count = 0\n        for (i, c) in txt.enumerated() {\n            if\
    \ i % 2 == 0 && c.isLowercase {\n                count += 1\n            }\n \
    \       }\n        return .failure(count)\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(split_words(txt: \"Hello world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"Hello\"\
    , \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmp9vxntrum/tmp9vxntrum.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7211907c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b72115feb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b72115fe988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b72115fd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9vxntrum                        0x000056399b78963b <unavailable> + 9787

    5    libc.so.6                          0x00002b7211af3460 __libc_start_main +
    245

    6    tmp9vxntrum                        0x000056399b7889e9 <unavailable> + 6633

    '
  stdout: ''
  timestamp: 1659820934
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    if let words = txt.split(separator: \" \").map(String.init) as?\
    \ [String] {\n        return .success(words)\n    } else if let words = txt.split(separator:\
    \ \",\").map(String.init) as? [String] {\n        return .success(words)\n   \
    \ } else {\n        return .failure(txt.lowercased().filter { $0.isLetter }.enumerated().filter\
    \ { $0.offset % 2 == 0 }.count)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(split_words(txt: \"Hello world!\") == .success([\"Hello\", \"world!\"]))\n\
    assert(split_words(txt: \"Hello,world!\") == .success([\"Hello\", \"world!\"]))\n\
    assert(split_words(txt: \"Hello world,!\") == .success([\"Hello\", \"world,!\"\
    ]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\"\
    , \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\nassert(split_words(txt:\
    \ \"aaabb\") == .failure(2))\nassert(split_words(txt: \"aaaBb\") == .failure(1))\n\
    assert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmpoabafk3q/tmpoabafk3q.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b67ba468c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b67ba15fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b67ba15f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b67ba15e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpoabafk3q                        0x00005618d9e4ecbe <unavailable> + 7358

    5    libc.so.6                          0x00002b67ba654460 __libc_start_main +
    245

    6    tmpoabafk3q                        0x00005618d9e4e649 <unavailable> + 5705

    '
  stdout: ''
  timestamp: 1659820935
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    if txt.contains(\" \") {\n        return .success(txt.split(separator:\
    \ \" \").map { String($0) })\n    } else if txt.contains(\",\") {\n        return\
    \ .success(txt.split(separator: \",\").map { String($0) })\n    } else {\n   \
    \     return .failure(txt.filter { $0.isLowercase }.count % 2)\n    }\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"\
    Hello\", \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmpzeai57gw/tmpzeai57gw.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab4d3bf4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab4d38ebb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab4d38eb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab4d38ea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzeai57gw                        0x0000560110f373e3 <unavailable> + 9187

    5    libc.so.6                          0x00002ab4d3de0460 __libc_start_main +
    245

    6    tmpzeai57gw                        0x0000560110f368c9 <unavailable> + 6345

    '
  stdout: ''
  timestamp: 1659820934
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    let words = txt.split(separator: \" \")\n    if words.count > 1\
    \ {\n        return .success(words.map { String($0) })\n    }\n    let words2\
    \ = txt.split(separator: \",\")\n    if words2.count > 1 {\n        return .success(words2.map\
    \ { String($0) })\n    }\n    let count = txt.filter { $0.isLowercase && $0.asciiValue!\
    \ % 2 == 1 }.count\n    return .failure(count)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(split_words(txt: \"Hello world!\") == .success([\"Hello\", \"world!\"\
    ]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"Hello\", \"world!\"\
    ]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"Hello\", \"world,!\"\
    ]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\"\
    , \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\nassert(split_words(txt:\
    \ \"aaabb\") == .failure(2))\nassert(split_words(txt: \"aaaBb\") == .failure(1))\n\
    assert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmph0zgmna5/tmph0zgmna5.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adae6d0ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adae6a01b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adae6a01988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adae6a007b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmph0zgmna5                        0x000055f02433f50b <unavailable> + 9483

    5    libc.so.6                          0x00002adae6ef6460 __libc_start_main +
    245

    6    tmph0zgmna5                        0x000055f02433e8b9 <unavailable> + 6329

    '
  stdout: ''
  timestamp: 1659820935
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    if txt.contains(\" \") {\n        return .success(txt.split(separator:\
    \ \" \").map { String($0) })\n    } else if txt.contains(\",\") {\n        return\
    \ .success(txt.split(separator: \",\").map { String($0) })\n    } else {\n   \
    \     var count = 0\n        for (index, char) in txt.enumerated() {\n       \
    \     if index % 2 == 0 && char.isLowercase {\n                count += 1\n  \
    \          }\n        }\n        return .failure(count)\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"Hello\"\
    , \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmpidsbb9jy/tmpidsbb9jy.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad232895c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad23258cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad23258c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad23258b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpidsbb9jy                        0x0000558e186b763b <unavailable> + 9787

    5    libc.so.6                          0x00002ad232a81460 __libc_start_main +
    245

    6    tmpidsbb9jy                        0x0000558e186b69e9 <unavailable> + 6633

    '
  stdout: ''
  timestamp: 1659820934
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    let words = txt.split(separator: \" \")\n    if words.count > 1\
    \ {\n        return .success(words.map { String($0) })\n    }\n    let words2\
    \ = txt.split(separator: \",\")\n    if words2.count > 1 {\n        return .success(words2.map\
    \ { String($0) })\n    }\n    return .failure(txt.lowercased().filter { $0.isLetter\
    \ }.enumerated().filter { $0.offset % 2 == 0 }.count)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(split_words(txt: \"Hello world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"Hello\"\
    , \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmpiu4njfri/tmpiu4njfri.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aac216dcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aac213d3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aac213d3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aac213d27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpiu4njfri                        0x0000563340d5c65b <unavailable> + 9819

    5    libc.so.6                          0x00002aac218c8460 __libc_start_main +
    245

    6    tmpiu4njfri                        0x0000563340d5ba09 <unavailable> + 6665

    '
  stdout: ''
  timestamp: 1659820935
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    return .failure(0)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(split_words(txt:\
    \ \"Hello world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: Exception
  stderr: 'tmpi6nwrd5r/tmpi6nwrd5r.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b996d825c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b996d51cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b996d51c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b996d51b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpi6nwrd5r                        0x0000562c2f58584c <unavailable> + 6220

    5    libc.so.6                          0x00002b996da11460 __libc_start_main +
    245

    6    tmpi6nwrd5r                        0x0000562c2f585389 <unavailable> + 5001

    '
  stdout: ''
  timestamp: 1659820934
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    if txt.contains(\" \") {\n        return .success(txt.split(separator:\
    \ \" \").map { String($0) })\n    } else if txt.contains(\",\") {\n        return\
    \ .success(txt.split(separator: \",\").map { String($0) })\n    } else {\n   \
    \     return .failure(txt.filter { $0.isLowercase }.count)\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"\
    Hello\", \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmpz4e6qyo4/tmpz4e6qyo4.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae1553e4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae1550dbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae1550db988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae1550da7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpz4e6qyo4                        0x0000563563aa3343 <unavailable> + 9027

    5    libc.so.6                          0x00002ae1555d0460 __libc_start_main +
    245

    6    tmpz4e6qyo4                        0x0000563563aa2829 <unavailable> + 6185

    '
  stdout: ''
  timestamp: 1659820934
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    if txt.contains(\" \") {\n        return .success(txt.split(separator:\
    \ \" \").map(String.init))\n    } else if txt.contains(\",\") {\n        return\
    \ .success(txt.split(separator: \",\").map(String.init))\n    } else {\n     \
    \   return .failure(txt.lowercased().filter { $0.isLetter }.enumerated().filter\
    \ { $0.offset % 2 == 1 }.count)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(split_words(txt: \"Hello world!\") == .success([\"Hello\", \"world!\"]))\n\
    assert(split_words(txt: \"Hello,world!\") == .success([\"Hello\", \"world!\"]))\n\
    assert(split_words(txt: \"Hello world,!\") == .success([\"Hello\", \"world,!\"\
    ]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\"\
    , \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\nassert(split_words(txt:\
    \ \"aaabb\") == .failure(2))\nassert(split_words(txt: \"aaaBb\") == .failure(1))\n\
    assert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmp2n9y10jj/tmp2n9y10jj.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba8ea195c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba8e9e8cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba8e9e8c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba8e9e8b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2n9y10jj                        0x000055f9c16017c3 <unavailable> + 10179

    5    libc.so.6                          0x00002ba8ea381460 __libc_start_main +
    245

    6    tmp2n9y10jj                        0x000055f9c1600a39 <unavailable> + 6713

    '
  stdout: ''
  timestamp: 1659820935
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    if txt.contains(\" \") {\n        return .success(txt.split(separator:\
    \ \" \").map { String($0) })\n    } else if txt.contains(\",\") {\n        return\
    \ .success(txt.split(separator: \",\").map { String($0) })\n    } else {\n   \
    \     return .failure(txt.filter { $0.isLowercase }.count)\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"\
    Hello\", \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmpz4e6qyo4/tmpz4e6qyo4.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae1553e4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae1550dbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae1550db988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae1550da7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpz4e6qyo4                        0x0000563563aa3343 <unavailable> + 9027

    5    libc.so.6                          0x00002ae1555d0460 __libc_start_main +
    245

    6    tmpz4e6qyo4                        0x0000563563aa2829 <unavailable> + 6185

    '
  stdout: ''
  timestamp: 1659820934
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    if txt.contains(\" \") {\n        return .success(txt.split(separator:\
    \ \" \").map { String($0) })\n    } else if txt.contains(\",\") {\n        return\
    \ .success(txt.split(separator: \",\").map { String($0) })\n    } else {\n   \
    \     return .failure(txt.filter { $0.isLowercase }.count)\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"\
    Hello\", \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmpz4e6qyo4/tmpz4e6qyo4.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae1553e4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae1550dbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae1550db988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae1550da7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpz4e6qyo4                        0x0000563563aa3343 <unavailable> + 9027

    5    libc.so.6                          0x00002ae1555d0460 __libc_start_main +
    245

    6    tmpz4e6qyo4                        0x0000563563aa2829 <unavailable> + 6185

    '
  stdout: ''
  timestamp: 1659820934
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    if txt.contains(\" \") {\n        return .success(txt.split(separator:\
    \ \" \").map { String($0) })\n    } else if txt.contains(\",\") {\n        return\
    \ .success(txt.split(separator: \",\").map { String($0) })\n    } else {\n   \
    \     return .failure(txt.filter { $0.isLowercase }.count)\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"\
    Hello\", \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmpz4e6qyo4/tmpz4e6qyo4.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae1553e4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae1550dbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae1550db988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae1550da7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpz4e6qyo4                        0x0000563563aa3343 <unavailable> + 9027

    5    libc.so.6                          0x00002ae1555d0460 __libc_start_main +
    245

    6    tmpz4e6qyo4                        0x0000563563aa2829 <unavailable> + 6185

    '
  stdout: ''
  timestamp: 1659820934
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    let words = txt.split(separator: \" \")\n    if words.count > 1\
    \ {\n        return .success(words.map{String($0)})\n    }\n    let words2 = txt.split(separator:\
    \ \",\")\n    if words2.count > 1 {\n        return .success(words2.map{String($0)})\n\
    \    }\n    var count = 0\n    for c in txt {\n        if let i = c.asciiValue,\
    \ i >= 97, i <= 122, i % 2 == 1 {\n            count += 1\n        }\n    }\n\
    \    return .failure(count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(split_words(txt:\
    \ \"Hello world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: Exception
  stderr: 'tmp7mgrq908/tmp7mgrq908.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2799b66c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b279985db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b279985d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b279985c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7mgrq908                        0x0000557528bd53eb <unavailable> + 9195

    5    libc.so.6                          0x00002b2799d52460 __libc_start_main +
    245

    6    tmp7mgrq908                        0x0000557528bd4799 <unavailable> + 6041

    '
  stdout: ''
  timestamp: 1659820935
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    return .failure(0)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(split_words(txt:\
    \ \"Hello world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: Exception
  stderr: 'tmpi6nwrd5r/tmpi6nwrd5r.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b996d825c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b996d51cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b996d51c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b996d51b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpi6nwrd5r                        0x0000562c2f58584c <unavailable> + 6220

    5    libc.so.6                          0x00002b996da11460 __libc_start_main +
    245

    6    tmpi6nwrd5r                        0x0000562c2f585389 <unavailable> + 5001

    '
  stdout: ''
  timestamp: 1659820934
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    return .failure(0)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(split_words(txt:\
    \ \"Hello world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: Exception
  stderr: 'tmpi6nwrd5r/tmpi6nwrd5r.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b996d825c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b996d51cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b996d51c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b996d51b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpi6nwrd5r                        0x0000562c2f58584c <unavailable> + 6220

    5    libc.so.6                          0x00002b996da11460 __libc_start_main +
    245

    6    tmpi6nwrd5r                        0x0000562c2f585389 <unavailable> + 5001

    '
  stdout: ''
  timestamp: 1659820934
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    if let _ = txt.range(of: \" \") {\n        return .success(txt.components(separatedBy:\
    \ \" \"))\n    } else if let _ = txt.range(of: \",\") {\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n    } else {\n        var count = 0\n        for c in txt.lowercased()\
    \ {\n            if (Int(c.asciiValue!) - 97) % 2 == 1 {\n                count\
    \ += 1\n            }\n        }\n        return .failure(count)\n    }\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"\
    Hello\", \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmpq8sl50wx.swift:15:20: error: value of type 'String' has no member\
    \ 'range'\n    if let _ = txt.range(of: \" \") {\n               ~~~ ^~~~~\n/tmp/tmpq8sl50wx.swift:16:29:\
    \ error: value of type 'String' has no member 'components'\n        return .success(txt.components(separatedBy:\
    \ \" \"))\n                        ~~~ ^~~~~~~~~~\n/tmp/tmpq8sl50wx.swift:17:27:\
    \ error: value of type 'String' has no member 'range'\n    } else if let _ = txt.range(of:\
    \ \",\") {\n                      ~~~ ^~~~~\n/tmp/tmpq8sl50wx.swift:18:29: error:\
    \ value of type 'String' has no member 'components'\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n                        ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820935
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    if txt.contains(\" \") {\n        return .success(txt.split(separator:\
    \ \" \").map(String.init))\n    } else if txt.contains(\",\") {\n        return\
    \ .success(txt.split(separator: \",\").map(String.init))\n    } else {\n     \
    \   return .failure(txt.lowercased().filter { $0.isLetter }.filter { $0.asciiValue!\
    \ % 2 == 1 }.count)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(split_words(txt:\
    \ \"Hello world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: Exception
  stderr: 'tmppq0wzq1k/tmppq0wzq1k.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4270090c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b426fd87b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b426fd87988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b426fd867b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppq0wzq1k                        0x0000558c22ffe5bb <unavailable> + 9659

    5    libc.so.6                          0x00002b427027c460 __libc_start_main +
    245

    6    tmppq0wzq1k                        0x0000558c22ffd969 <unavailable> + 6505

    '
  stdout: ''
  timestamp: 1659820934
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    let words = txt.split(separator: \" \")\n    if words.count > 1\
    \ {\n        return .success(words.map { String($0) })\n    }\n    let words2\
    \ = txt.split(separator: \",\")\n    if words2.count > 1 {\n        return .success(words2.map\
    \ { String($0) })\n    }\n    return .failure(txt.filter { $0.isLowercase }.count\
    \ % 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(split_words(txt: \"Hello\
    \ world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt: \"\
    Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: Exception
  stderr: 'tmpb1q_r12i/tmpb1q_r12i.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b93c90a6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b93c8d9db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b93c8d9d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b93c8d9c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpb1q_r12i                        0x00005631d3136373 <unavailable> + 9075

    5    libc.so.6                          0x00002b93c9292460 __libc_start_main +
    245

    6    tmpb1q_r12i                        0x00005631d3135859 <unavailable> + 6233

    '
  stdout: ''
  timestamp: 1659820935
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    if txt.contains(\" \") {\n        return .success(txt.split(separator:\
    \ \" \").map { String($0) })\n    } else if txt.contains(\",\") {\n        return\
    \ .success(txt.split(separator: \",\").map { String($0) })\n    } else {\n   \
    \     var count = 0\n        for (i, c) in txt.enumerated() {\n            if\
    \ i % 2 == 0 && c.isLowercase {\n                count += 1\n            }\n \
    \       }\n        return .failure(count)\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(split_words(txt: \"Hello world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"Hello\"\
    , \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmp9vxntrum/tmp9vxntrum.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7211907c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b72115feb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b72115fe988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b72115fd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9vxntrum                        0x000056399b78963b <unavailable> + 9787

    5    libc.so.6                          0x00002b7211af3460 __libc_start_main +
    245

    6    tmp9vxntrum                        0x000056399b7889e9 <unavailable> + 6633

    '
  stdout: ''
  timestamp: 1659820934
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    if txt.contains(\" \") {\n        return .success(txt.split(separator:\
    \ \" \").map { String($0) })\n    } else if txt.contains(\",\") {\n        return\
    \ .success(txt.split(separator: \",\").map { String($0) })\n    } else {\n   \
    \     return .failure(txt.filter { $0.isLowercase }.count)\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"\
    Hello\", \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmpz4e6qyo4/tmpz4e6qyo4.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae1553e4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae1550dbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae1550db988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae1550da7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpz4e6qyo4                        0x0000563563aa3343 <unavailable> + 9027

    5    libc.so.6                          0x00002ae1555d0460 __libc_start_main +
    245

    6    tmpz4e6qyo4                        0x0000563563aa2829 <unavailable> + 6185

    '
  stdout: ''
  timestamp: 1659820934
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    if txt.contains(\" \") {\n        return .success(txt.split(separator:\
    \ \" \").map { String($0) })\n    } else if txt.contains(\",\") {\n        return\
    \ .success(txt.split(separator: \",\").map { String($0) })\n    } else {\n   \
    \     return .failure(txt.filter { $0.isLowercase }.count)\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"\
    Hello\", \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmpz4e6qyo4/tmpz4e6qyo4.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae1553e4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae1550dbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae1550db988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae1550da7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpz4e6qyo4                        0x0000563563aa3343 <unavailable> + 9027

    5    libc.so.6                          0x00002ae1555d0460 __libc_start_main +
    245

    6    tmpz4e6qyo4                        0x0000563563aa2829 <unavailable> + 6185

    '
  stdout: ''
  timestamp: 1659820934
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    if txt.contains(\" \") {\n        return .success(txt.split(separator:\
    \ \" \").map { String($0) })\n    } else if txt.contains(\",\") {\n        return\
    \ .success(txt.split(separator: \",\").map { String($0) })\n    } else {\n   \
    \     var count = 0\n        for (i, c) in txt.enumerated() {\n            if\
    \ i % 2 == 0 && c.isLowercase {\n                count += 1\n            }\n \
    \       }\n        return .failure(count)\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(split_words(txt: \"Hello world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"Hello\"\
    , \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmp9vxntrum/tmp9vxntrum.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7211907c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b72115feb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b72115fe988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b72115fd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9vxntrum                        0x000056399b78963b <unavailable> + 9787

    5    libc.so.6                          0x00002b7211af3460 __libc_start_main +
    245

    6    tmp9vxntrum                        0x000056399b7889e9 <unavailable> + 6633

    '
  stdout: ''
  timestamp: 1659820934
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    if txt.contains(\" \") {\n        return .success(txt.split(separator:\
    \ \" \").map { String($0) })\n    } else if txt.contains(\",\") {\n        return\
    \ .success(txt.split(separator: \",\").map { String($0) })\n    } else {\n   \
    \     return .failure(txt.filter { $0.isLowercase }.count)\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"\
    Hello\", \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmpz4e6qyo4/tmpz4e6qyo4.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae1553e4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae1550dbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae1550db988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae1550da7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpz4e6qyo4                        0x0000563563aa3343 <unavailable> + 9027

    5    libc.so.6                          0x00002ae1555d0460 __libc_start_main +
    245

    6    tmpz4e6qyo4                        0x0000563563aa2829 <unavailable> + 6185

    '
  stdout: ''
  timestamp: 1659820934
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    if txt.contains(\" \") {\n        return .success(txt.split(separator:\
    \ \" \").map { String($0) })\n    } else if txt.contains(\",\") {\n        return\
    \ .success(txt.split(separator: \",\").map { String($0) })\n    } else {\n   \
    \     return .failure(txt.filter { $0.isLowercase }.count % 2)\n    }\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"\
    Hello\", \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmpzeai57gw/tmpzeai57gw.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab4d3bf4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab4d38ebb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab4d38eb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab4d38ea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzeai57gw                        0x0000560110f373e3 <unavailable> + 9187

    5    libc.so.6                          0x00002ab4d3de0460 __libc_start_main +
    245

    6    tmpzeai57gw                        0x0000560110f368c9 <unavailable> + 6345

    '
  stdout: ''
  timestamp: 1659820934
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    if let _ = txt.range(of: \" \") {\n        return .success(txt.components(separatedBy:\
    \ \" \"))\n    } else if let _ = txt.range(of: \",\") {\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n    } else {\n        var count = 0\n        for c in txt.lowercased()\
    \ {\n            if c.asciiValue! % 2 == 1 {\n                count += 1\n   \
    \         }\n        }\n        return .failure(count)\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"Hello\"\
    , \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmpr8q1949m.swift:15:20: error: value of type 'String' has no member\
    \ 'range'\n    if let _ = txt.range(of: \" \") {\n               ~~~ ^~~~~\n/tmp/tmpr8q1949m.swift:16:29:\
    \ error: value of type 'String' has no member 'components'\n        return .success(txt.components(separatedBy:\
    \ \" \"))\n                        ~~~ ^~~~~~~~~~\n/tmp/tmpr8q1949m.swift:17:27:\
    \ error: value of type 'String' has no member 'range'\n    } else if let _ = txt.range(of:\
    \ \",\") {\n                      ~~~ ^~~~~\n/tmp/tmpr8q1949m.swift:18:29: error:\
    \ value of type 'String' has no member 'components'\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n                        ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820935
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    return .failure(0)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(split_words(txt:\
    \ \"Hello world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: Exception
  stderr: 'tmpi6nwrd5r/tmpi6nwrd5r.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b996d825c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b996d51cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b996d51c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b996d51b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpi6nwrd5r                        0x0000562c2f58584c <unavailable> + 6220

    5    libc.so.6                          0x00002b996da11460 __libc_start_main +
    245

    6    tmpi6nwrd5r                        0x0000562c2f585389 <unavailable> + 5001

    '
  stdout: ''
  timestamp: 1659820934
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    if txt.contains(\" \") {\n        return .success(txt.split(separator:\
    \ \" \").map(String.init))\n    } else if txt.contains(\",\") {\n        return\
    \ .success(txt.split(separator: \",\").map(String.init))\n    } else {\n     \
    \   return .failure(txt.filter { $0.isLowercase }.count)\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"Hello\"\
    , \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmpo6lu2fh4/tmpo6lu2fh4.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abd14f6fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abd14c66b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abd14c66988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abd14c657b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpo6lu2fh4                        0x0000564d5c4aa343 <unavailable> + 9027

    5    libc.so.6                          0x00002abd1515b460 __libc_start_main +
    245

    6    tmpo6lu2fh4                        0x0000564d5c4a9829 <unavailable> + 6185

    '
  stdout: ''
  timestamp: 1659820934
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    if txt.contains(\" \") {\n        return .success(txt.split(separator:\
    \ \" \").map { String($0) })\n    } else if txt.contains(\",\") {\n        return\
    \ .success(txt.split(separator: \",\").map { String($0) })\n    } else {\n   \
    \     return .failure(txt.filter { $0.isLowercase }.count)\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"\
    Hello\", \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmpz4e6qyo4/tmpz4e6qyo4.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae1553e4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae1550dbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae1550db988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae1550da7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpz4e6qyo4                        0x0000563563aa3343 <unavailable> + 9027

    5    libc.so.6                          0x00002ae1555d0460 __libc_start_main +
    245

    6    tmpz4e6qyo4                        0x0000563563aa2829 <unavailable> + 6185

    '
  stdout: ''
  timestamp: 1659820934
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    if txt.contains(\" \") {\n        return .success(txt.split(separator:\
    \ \" \").map(String.init))\n    } else if txt.contains(\",\") {\n        return\
    \ .success(txt.split(separator: \",\").map(String.init))\n    } else {\n     \
    \   return .failure(txt.filter { $0.isLowercase }.count)\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"Hello\"\
    , \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmpo6lu2fh4/tmpo6lu2fh4.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abd14f6fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abd14c66b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abd14c66988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abd14c657b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpo6lu2fh4                        0x0000564d5c4aa343 <unavailable> + 9027

    5    libc.so.6                          0x00002abd1515b460 __libc_start_main +
    245

    6    tmpo6lu2fh4                        0x0000564d5c4a9829 <unavailable> + 6185

    '
  stdout: ''
  timestamp: 1659820934
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    if txt.contains(\" \") {\n        return .success(txt.split(separator:\
    \ \" \").map { String($0) })\n    } else if txt.contains(\",\") {\n        return\
    \ .success(txt.split(separator: \",\").map { String($0) })\n    } else {\n   \
    \     var count = 0\n        for char in txt {\n            if (char.asciiValue!\
    \ - 97) % 2 == 1 {\n                count += 1\n            }\n        }\n   \
    \     return .failure(count)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(split_words(txt: \"Hello world!\") == .success([\"Hello\", \"world!\"]))\n\
    assert(split_words(txt: \"Hello,world!\") == .success([\"Hello\", \"world!\"]))\n\
    assert(split_words(txt: \"Hello world,!\") == .success([\"Hello\", \"world,!\"\
    ]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\"\
    , \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\nassert(split_words(txt:\
    \ \"aaabb\") == .failure(2))\nassert(split_words(txt: \"aaaBb\") == .failure(1))\n\
    assert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659820935
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    if txt.contains(\" \") {\n        return .success(txt.split(separator:\
    \ \" \").map { String($0) })\n    } else if txt.contains(\",\") {\n        return\
    \ .success(txt.split(separator: \",\").map { String($0) })\n    } else {\n   \
    \     return .failure(txt.filter { $0.isLowercase }.count)\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"\
    Hello\", \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmpz4e6qyo4/tmpz4e6qyo4.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae1553e4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae1550dbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae1550db988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae1550da7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpz4e6qyo4                        0x0000563563aa3343 <unavailable> + 9027

    5    libc.so.6                          0x00002ae1555d0460 __libc_start_main +
    245

    6    tmpz4e6qyo4                        0x0000563563aa2829 <unavailable> + 6185

    '
  stdout: ''
  timestamp: 1659820934
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    if txt.contains(\" \") {\n        return .success(txt.split(separator:\
    \ \" \").map { String($0) })\n    } else if txt.contains(\",\") {\n        return\
    \ .success(txt.split(separator: \",\").map { String($0) })\n    } else {\n   \
    \     return .failure(txt.lowercased().filter { $0.isLetter }.enumerated().filter\
    \ { $0.offset % 2 == 0 }.map { $0.element.asciiValue! - 97 }.reduce(0, +))\n \
    \   }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(split_words(txt: \"Hello\
    \ world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt: \"\
    Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmpwtnuxrey.swift:20:137: error: cannot convert value of type 'UInt8'\
    \ to closure result type 'Int'\n        return .failure(txt.lowercased().filter\
    \ { $0.isLetter }.enumerated().filter { $0.offset % 2 == 0 }.map { $0.element.asciiValue!\
    \ - 97 }.reduce(0, +))\n                                                     \
    \                                                            ~~~~~~~~~~~~~~~~~~~~~~~^~~~\n\
    \                                                                            \
    \                                     Int(                       )\n"
  stdout: ''
  timestamp: 1659820935
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    if txt.contains(\" \") {\n        return .success(txt.split(separator:\
    \ \" \").map { String($0) })\n    } else if txt.contains(\",\") {\n        return\
    \ .success(txt.split(separator: \",\").map { String($0) })\n    } else {\n   \
    \     var count = 0\n        for (i, c) in txt.enumerated() {\n            if\
    \ i % 2 == 0 && c.isLowercase {\n                count += 1\n            }\n \
    \       }\n        return .failure(count)\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(split_words(txt: \"Hello world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"Hello\"\
    , \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmp9vxntrum/tmp9vxntrum.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7211907c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b72115feb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b72115fe988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b72115fd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9vxntrum                        0x000056399b78963b <unavailable> + 9787

    5    libc.so.6                          0x00002b7211af3460 __libc_start_main +
    245

    6    tmp9vxntrum                        0x000056399b7889e9 <unavailable> + 6633

    '
  stdout: ''
  timestamp: 1659820934
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    if txt.contains(\" \") {\n        return .success(txt.split(separator:\
    \ \" \").map { String($0) })\n    } else if txt.contains(\",\") {\n        return\
    \ .success(txt.split(separator: \",\").map { String($0) })\n    } else {\n   \
    \     return .failure(txt.filter { $0.isLowercase }.count)\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"\
    Hello\", \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmpz4e6qyo4/tmpz4e6qyo4.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae1553e4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae1550dbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae1550db988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae1550da7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpz4e6qyo4                        0x0000563563aa3343 <unavailable> + 9027

    5    libc.so.6                          0x00002ae1555d0460 __libc_start_main +
    245

    6    tmpz4e6qyo4                        0x0000563563aa2829 <unavailable> + 6185

    '
  stdout: ''
  timestamp: 1659820934
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    if txt.contains(\" \") {\n        return .success(txt.split(separator:\
    \ \" \").map { String($0) })\n    } else if txt.contains(\",\") {\n        return\
    \ .success(txt.split(separator: \",\").map { String($0) })\n    } else {\n   \
    \     return .failure(txt.filter { $0.isLowercase }.count)\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"\
    Hello\", \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmpz4e6qyo4/tmpz4e6qyo4.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae1553e4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae1550dbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae1550db988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae1550da7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpz4e6qyo4                        0x0000563563aa3343 <unavailable> + 9027

    5    libc.so.6                          0x00002ae1555d0460 __libc_start_main +
    245

    6    tmpz4e6qyo4                        0x0000563563aa2829 <unavailable> + 6185

    '
  stdout: ''
  timestamp: 1659820934
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    if let idx = txt.firstIndex(of: \" \") {\n        return .success([String(txt[..<idx]),\
    \ String(txt[txt.index(after: idx)...])])\n    } else if let idx = txt.firstIndex(of:\
    \ \",\") {\n        return .success([String(txt[..<idx]), String(txt[txt.index(after:\
    \ idx)...])])\n    } else {\n        return .failure(txt.filter { $0.isLowercase\
    \ }.count)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(split_words(txt: \"\
    Hello world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: Exception
  stderr: 'tmpicsncv17/tmpicsncv17.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aef4b9b8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aef4b6afb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aef4b6af988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aef4b6ae7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpicsncv17                        0x000055705850d4a3 <unavailable> + 9379

    5    libc.so.6                          0x00002aef4bba4460 __libc_start_main +
    245

    6    tmpicsncv17                        0x000055705850c989 <unavailable> + 6537

    '
  stdout: ''
  timestamp: 1659820935
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    if txt.contains(\" \") {\n        return .success(txt.split(separator:\
    \ \" \").map { String($0) })\n    } else if txt.contains(\",\") {\n        return\
    \ .success(txt.split(separator: \",\").map { String($0) })\n    } else {\n   \
    \     return .failure(txt.lowercased().filter { $0 >= \"a\" && $0 <= \"z\" }.enumerated().filter\
    \ { $0.offset % 2 == 0 }.count)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(split_words(txt: \"Hello world!\") == .success([\"Hello\", \"world!\"]))\n\
    assert(split_words(txt: \"Hello,world!\") == .success([\"Hello\", \"world!\"]))\n\
    assert(split_words(txt: \"Hello world,!\") == .success([\"Hello\", \"world,!\"\
    ]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\"\
    , \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\nassert(split_words(txt:\
    \ \"aaabb\") == .failure(2))\nassert(split_words(txt: \"aaaBb\") == .failure(1))\n\
    assert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmp2e0k7s1i/tmp2e0k7s1i.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aeeab847c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aeeab53eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aeeab53e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aeeab53d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2e0k7s1i                        0x0000558410d4a75b <unavailable> + 10075

    5    libc.so.6                          0x00002aeeaba33460 __libc_start_main +
    245

    6    tmp2e0k7s1i                        0x0000558410d49b09 <unavailable> + 6921

    '
  stdout: ''
  timestamp: 1659820935
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    if txt.contains(\" \") {\n        return .success(txt.split(separator:\
    \ \" \").map { String($0) })\n    } else if txt.contains(\",\") {\n        return\
    \ .success(txt.split(separator: \",\").map { String($0) })\n    } else {\n   \
    \     var count = 0\n        for (index, char) in txt.enumerated() {\n       \
    \     if char.isLowercase && index % 2 == 0 {\n                count += 1\n  \
    \          }\n        }\n        return .failure(count)\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"Hello\"\
    , \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmpb_qnfda2/tmpb_qnfda2.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b11ad430c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b11ad127b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b11ad127988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b11ad1267b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpb_qnfda2                        0x000055fb1810563b <unavailable> + 9787

    5    libc.so.6                          0x00002b11ad61c460 __libc_start_main +
    245

    6    tmpb_qnfda2                        0x000055fb181049e9 <unavailable> + 6633

    '
  stdout: ''
  timestamp: 1659820935
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    if txt.contains(\" \") {\n        return .success(txt.split(separator:\
    \ \" \").map { String($0) })\n    } else if txt.contains(\",\") {\n        return\
    \ .success(txt.split(separator: \",\").map { String($0) })\n    } else {\n   \
    \     return .failure(txt.filter { $0.isLowercase }.count)\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"\
    Hello\", \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmpz4e6qyo4/tmpz4e6qyo4.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae1553e4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae1550dbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae1550db988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae1550da7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpz4e6qyo4                        0x0000563563aa3343 <unavailable> + 9027

    5    libc.so.6                          0x00002ae1555d0460 __libc_start_main +
    245

    6    tmpz4e6qyo4                        0x0000563563aa2829 <unavailable> + 6185

    '
  stdout: ''
  timestamp: 1659820934
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    let words = txt.split(separator: \" \")\n    if words.count > 1\
    \ {\n        return .success(words.map { String($0) })\n    }\n    let words2\
    \ = txt.split(separator: \",\")\n    if words2.count > 1 {\n        return .success(words2.map\
    \ { String($0) })\n    }\n    let odd = txt.lowercased().filter { $0.isLetter\
    \ }.filter { $0.asciiValue! % 2 == 1 }.count\n    return .failure(odd)\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"\
    Hello\", \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmpzwx9vjl9/tmpzwx9vjl9.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af3242cdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af323fc4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af323fc4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af323fc37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzwx9vjl9                        0x000055dae356155b <unavailable> + 9563

    5    libc.so.6                          0x00002af3244b9460 __libc_start_main +
    245

    6    tmpzwx9vjl9                        0x000055dae3560909 <unavailable> + 6409

    '
  stdout: ''
  timestamp: 1659820935
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    if txt.contains(\" \") {\n        return .success(txt.split(separator:\
    \ \" \").map { String($0) })\n    } else if txt.contains(\",\") {\n        return\
    \ .success(txt.split(separator: \",\").map { String($0) })\n    } else {\n   \
    \     return .failure(txt.filter { $0.isLowercase }.count)\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"\
    Hello\", \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmpz4e6qyo4/tmpz4e6qyo4.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae1553e4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae1550dbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae1550db988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae1550da7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpz4e6qyo4                        0x0000563563aa3343 <unavailable> + 9027

    5    libc.so.6                          0x00002ae1555d0460 __libc_start_main +
    245

    6    tmpz4e6qyo4                        0x0000563563aa2829 <unavailable> + 6185

    '
  stdout: ''
  timestamp: 1659820934
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    if txt.contains(\" \") {\n        return .success(txt.split(separator:\
    \ \" \").map { String($0) })\n    } else if txt.contains(\",\") {\n        return\
    \ .success(txt.split(separator: \",\").map { String($0) })\n    } else {\n   \
    \     return .failure(txt.filter { $0.isLowercase }.count % 2)\n    }\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"\
    Hello\", \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmpzeai57gw/tmpzeai57gw.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab4d3bf4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab4d38ebb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab4d38eb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab4d38ea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzeai57gw                        0x0000560110f373e3 <unavailable> + 9187

    5    libc.so.6                          0x00002ab4d3de0460 __libc_start_main +
    245

    6    tmpzeai57gw                        0x0000560110f368c9 <unavailable> + 6345

    '
  stdout: ''
  timestamp: 1659820934
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    if txt.contains(\" \") {\n        return .success(txt.split(separator:\
    \ \" \").map { String($0) })\n    } else if txt.contains(\",\") {\n        return\
    \ .success(txt.split(separator: \",\").map { String($0) })\n    } else {\n   \
    \     return .failure(txt.filter { $0.isLowercase }.count)\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"\
    Hello\", \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmpz4e6qyo4/tmpz4e6qyo4.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae1553e4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae1550dbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae1550db988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae1550da7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpz4e6qyo4                        0x0000563563aa3343 <unavailable> + 9027

    5    libc.so.6                          0x00002ae1555d0460 __libc_start_main +
    245

    6    tmpz4e6qyo4                        0x0000563563aa2829 <unavailable> + 6185

    '
  stdout: ''
  timestamp: 1659820934
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    if txt.contains(\" \") {\n        return .success(txt.split(separator:\
    \ \" \").map(String.init))\n    } else if txt.contains(\",\") {\n        return\
    \ .success(txt.split(separator: \",\").map(String.init))\n    } else {\n     \
    \   return .failure(txt.filter { $0.isLowercase }.count)\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"Hello\"\
    , \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmpo6lu2fh4/tmpo6lu2fh4.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abd14f6fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abd14c66b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abd14c66988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abd14c657b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpo6lu2fh4                        0x0000564d5c4aa343 <unavailable> + 9027

    5    libc.so.6                          0x00002abd1515b460 __libc_start_main +
    245

    6    tmpo6lu2fh4                        0x0000564d5c4a9829 <unavailable> + 6185

    '
  stdout: ''
  timestamp: 1659820934
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    if let words = txt.split(separator: \" \").map(String.init) as?\
    \ [String] {\n        return .success(words)\n    } else if let words = txt.split(separator:\
    \ \",\").map(String.init) as? [String] {\n        return .success(words)\n   \
    \ } else {\n        return .failure(txt.filter { $0.isLowercase }.count % 2)\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(split_words(txt: \"Hello\
    \ world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt: \"\
    Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: Exception
  stderr: 'tmp1b3ilns1/tmp1b3ilns1.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7cfad0fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7cfaa06b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7cfaa06988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7cfaa057b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1b3ilns1                        0x000055b916a48cbe <unavailable> + 7358

    5    libc.so.6                          0x00002b7cfaefb460 __libc_start_main +
    245

    6    tmp1b3ilns1                        0x000055b916a48649 <unavailable> + 5705

    '
  stdout: ''
  timestamp: 1659820935
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    if txt.contains(\" \") {\n        return .success(txt.split(separator:\
    \ \" \").map { String($0) })\n    } else if txt.contains(\",\") {\n        return\
    \ .success(txt.split(separator: \",\").map { String($0) })\n    } else {\n   \
    \     return .failure(txt.filter { $0.isLowercase }.count % 2)\n    }\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"\
    Hello\", \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmpzeai57gw/tmpzeai57gw.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab4d3bf4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab4d38ebb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab4d38eb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab4d38ea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzeai57gw                        0x0000560110f373e3 <unavailable> + 9187

    5    libc.so.6                          0x00002ab4d3de0460 __libc_start_main +
    245

    6    tmpzeai57gw                        0x0000560110f368c9 <unavailable> + 6345

    '
  stdout: ''
  timestamp: 1659820934
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    if txt.contains(\" \") {\n        return .success(txt.split(separator:\
    \ \" \").map { String($0) })\n    } else if txt.contains(\",\") {\n        return\
    \ .success(txt.split(separator: \",\").map { String($0) })\n    } else {\n   \
    \     return .failure(txt.filter { $0.isLowercase }.count { $0.asciiValue! % 2\
    \ == 1 })\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(split_words(txt: \"\
    Hello world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmp0l52zj_s.swift:20:55: error: cannot call value of non-function\
    \ type 'Int'\n        return .failure(txt.filter { $0.isLowercase }.count { $0.asciiValue!\
    \ % 2 == 1 })\n                                                      ^\n"
  stdout: ''
  timestamp: 1659820935
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    if txt.contains(\" \") {\n        return .success(txt.split(separator:\
    \ \" \").map { String($0) })\n    } else if txt.contains(\",\") {\n        return\
    \ .success(txt.split(separator: \",\").map { String($0) })\n    } else {\n   \
    \     return .failure(txt.lowercased().filter { $0.isLetter }.enumerated().filter\
    \ { $0.offset % 2 == 0 }.count)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(split_words(txt: \"Hello world!\") == .success([\"Hello\", \"world!\"]))\n\
    assert(split_words(txt: \"Hello,world!\") == .success([\"Hello\", \"world!\"]))\n\
    assert(split_words(txt: \"Hello world,!\") == .success([\"Hello\", \"world,!\"\
    ]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\"\
    , \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\nassert(split_words(txt:\
    \ \"aaabb\") == .failure(2))\nassert(split_words(txt: \"aaaBb\") == .failure(1))\n\
    assert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmpusqqwafr/tmpusqqwafr.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abb3add8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abb3aacfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abb3aacf988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abb3aace7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpusqqwafr                        0x0000561cfd7e468b <unavailable> + 9867

    5    libc.so.6                          0x00002abb3afc4460 __libc_start_main +
    245

    6    tmpusqqwafr                        0x0000561cfd7e3a39 <unavailable> + 6713

    '
  stdout: ''
  timestamp: 1659820934
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    if txt.contains(\" \") {\n        return .success(txt.split(separator:\
    \ \" \").map { String($0) })\n    } else if txt.contains(\",\") {\n        return\
    \ .success(txt.split(separator: \",\").map { String($0) })\n    } else {\n   \
    \     return .failure(txt.filter { $0.isLowercase }.count { $0.asciiValue! % 2\
    \ == 1 })\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(split_words(txt: \"\
    Hello world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmp0l52zj_s.swift:20:55: error: cannot call value of non-function\
    \ type 'Int'\n        return .failure(txt.filter { $0.isLowercase }.count { $0.asciiValue!\
    \ % 2 == 1 })\n                                                      ^\n"
  stdout: ''
  timestamp: 1659820935
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    if txt.contains(\" \") {\n        return .success(txt.split(separator:\
    \ \" \").map { String($0) })\n    } else if txt.contains(\",\") {\n        return\
    \ .success(txt.split(separator: \",\").map { String($0) })\n    } else {\n   \
    \     return .failure(txt.filter { $0.isLowercase }.count % 2)\n    }\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"\
    Hello\", \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmpzeai57gw/tmpzeai57gw.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab4d3bf4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab4d38ebb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab4d38eb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab4d38ea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzeai57gw                        0x0000560110f373e3 <unavailable> + 9187

    5    libc.so.6                          0x00002ab4d3de0460 __libc_start_main +
    245

    6    tmpzeai57gw                        0x0000560110f368c9 <unavailable> + 6345

    '
  stdout: ''
  timestamp: 1659820934
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    if txt.contains(\" \") {\n        return .success(txt.split(separator:\
    \ \" \").map(String.init))\n    } else if txt.contains(\",\") {\n        return\
    \ .success(txt.split(separator: \",\").map(String.init))\n    } else {\n     \
    \   return .failure(txt.lowercased().filter { $0.isLetter }.enumerated().filter\
    \ { $0.offset % 2 == 1 }.map { $0.element.asciiValue! - 97 }.reduce(0, +))\n \
    \   }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(split_words(txt: \"Hello\
    \ world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt: \"\
    Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmpcvjo0n2j.swift:20:137: error: cannot convert value of type 'UInt8'\
    \ to closure result type 'Int'\n        return .failure(txt.lowercased().filter\
    \ { $0.isLetter }.enumerated().filter { $0.offset % 2 == 1 }.map { $0.element.asciiValue!\
    \ - 97 }.reduce(0, +))\n                                                     \
    \                                                            ~~~~~~~~~~~~~~~~~~~~~~~^~~~\n\
    \                                                                            \
    \                                     Int(                       )\n"
  stdout: ''
  timestamp: 1659820935
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    if txt.contains(\" \") {\n        return .success(txt.split(separator:\
    \ \" \").map { String($0) })\n    } else if txt.contains(\",\") {\n        return\
    \ .success(txt.split(separator: \",\").map { String($0) })\n    } else {\n   \
    \     return .failure(txt.filter { $0.isLowercase }.count % 2)\n    }\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"\
    Hello\", \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmpzeai57gw/tmpzeai57gw.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab4d3bf4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab4d38ebb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab4d38eb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab4d38ea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzeai57gw                        0x0000560110f373e3 <unavailable> + 9187

    5    libc.so.6                          0x00002ab4d3de0460 __libc_start_main +
    245

    6    tmpzeai57gw                        0x0000560110f368c9 <unavailable> + 6345

    '
  stdout: ''
  timestamp: 1659820934
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    if txt.contains(\" \") {\n        return .success(txt.split(separator:\
    \ \" \").map { String($0) })\n    } else if txt.contains(\",\") {\n        return\
    \ .success(txt.split(separator: \",\").map { String($0) })\n    } else {\n   \
    \     return .failure(txt.filter { $0.isLowercase }.count % 2)\n    }\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"\
    Hello\", \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmpzeai57gw/tmpzeai57gw.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab4d3bf4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab4d38ebb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab4d38eb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab4d38ea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzeai57gw                        0x0000560110f373e3 <unavailable> + 9187

    5    libc.so.6                          0x00002ab4d3de0460 __libc_start_main +
    245

    6    tmpzeai57gw                        0x0000560110f368c9 <unavailable> + 6345

    '
  stdout: ''
  timestamp: 1659820934
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    if txt.contains(\" \") {\n        return .success(txt.split(separator:\
    \ \" \").map { String($0) })\n    } else if txt.contains(\",\") {\n        return\
    \ .success(txt.split(separator: \",\").map { String($0) })\n    } else {\n   \
    \     return .failure(txt.filter { $0.isLowercase }.count)\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"\
    Hello\", \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmpz4e6qyo4/tmpz4e6qyo4.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae1553e4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae1550dbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae1550db988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae1550da7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpz4e6qyo4                        0x0000563563aa3343 <unavailable> + 9027

    5    libc.so.6                          0x00002ae1555d0460 __libc_start_main +
    245

    6    tmpz4e6qyo4                        0x0000563563aa2829 <unavailable> + 6185

    '
  stdout: ''
  timestamp: 1659820934
- exit_code: 0
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    if txt.contains(\" \") {\n        return .success(txt.split(separator:\
    \ \" \").map { String($0) })\n    } else if txt.contains(\",\") {\n        return\
    \ .success(txt.split(separator: \",\").map { String($0) })\n    } else {\n   \
    \     var count = 0\n        for char in txt {\n            if char.isLowercase\
    \ && (char.asciiValue! - 97) % 2 == 1 {\n                count += 1\n        \
    \    }\n        }\n        return .failure(count)\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"Hello\"\
    , \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820935
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    if txt.contains(\" \") {\n        return .success(txt.split(separator:\
    \ \" \").map(String.init))\n    } else if txt.contains(\",\") {\n        return\
    \ .success(txt.split(separator: \",\").map(String.init))\n    } else {\n     \
    \   return .failure(txt.lowercased().filter { $0.isLetter }.reduce(0) { $1.asciiValue!\
    \ % 2 == 1 ? $0 + 1 : $0 })\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(split_words(txt: \"Hello world!\") == .success([\"Hello\", \"world!\"]))\n\
    assert(split_words(txt: \"Hello,world!\") == .success([\"Hello\", \"world!\"]))\n\
    assert(split_words(txt: \"Hello world,!\") == .success([\"Hello\", \"world,!\"\
    ]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\"\
    , \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\nassert(split_words(txt:\
    \ \"aaabb\") == .failure(2))\nassert(split_words(txt: \"aaaBb\") == .failure(1))\n\
    assert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmpa92iadal/tmpa92iadal.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b01857e8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b01854dfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b01854df988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b01854de7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpa92iadal                        0x0000562dc94b85eb <unavailable> + 9707

    5    libc.so.6                          0x00002b01859d4460 __libc_start_main +
    245

    6    tmpa92iadal                        0x0000562dc94b7999 <unavailable> + 6553

    '
  stdout: ''
  timestamp: 1659820934
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    if txt.contains(\" \") {\n        return .success(txt.split(separator:\
    \ \" \").map { String($0) })\n    } else if txt.contains(\",\") {\n        return\
    \ .success(txt.split(separator: \",\").map { String($0) })\n    } else {\n   \
    \     var count = 0\n        for (i, c) in txt.enumerated() {\n            if\
    \ i % 2 == 0 && c.isLowercase {\n                count += 1\n            }\n \
    \       }\n        return .failure(count)\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(split_words(txt: \"Hello world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"Hello\"\
    , \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmp9vxntrum/tmp9vxntrum.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7211907c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b72115feb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b72115fe988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b72115fd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9vxntrum                        0x000056399b78963b <unavailable> + 9787

    5    libc.so.6                          0x00002b7211af3460 __libc_start_main +
    245

    6    tmp9vxntrum                        0x000056399b7889e9 <unavailable> + 6633

    '
  stdout: ''
  timestamp: 1659820934
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    let words = txt.split(separator: \" \")\n    if words.count > 1\
    \ {\n        return .success(words.map { String($0) })\n    }\n    let words2\
    \ = txt.split(separator: \",\")\n    if words2.count > 1 {\n        return .success(words2.map\
    \ { String($0) })\n    }\n    let count = txt.filter { $0.isLowercase && $0.asciiValue!\
    \ % 2 == 1 }.count\n    return .failure(count)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(split_words(txt: \"Hello world!\") == .success([\"Hello\", \"world!\"\
    ]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"Hello\", \"world!\"\
    ]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"Hello\", \"world,!\"\
    ]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\"\
    , \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\nassert(split_words(txt:\
    \ \"aaabb\") == .failure(2))\nassert(split_words(txt: \"aaaBb\") == .failure(1))\n\
    assert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmph0zgmna5/tmph0zgmna5.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adae6d0ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adae6a01b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adae6a01988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adae6a007b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmph0zgmna5                        0x000055f02433f50b <unavailable> + 9483

    5    libc.so.6                          0x00002adae6ef6460 __libc_start_main +
    245

    6    tmph0zgmna5                        0x000055f02433e8b9 <unavailable> + 6329

    '
  stdout: ''
  timestamp: 1659820935
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    if txt.contains(\" \") {\n        return .success(txt.split(separator:\
    \ \" \").map(String.init))\n    } else if txt.contains(\",\") {\n        return\
    \ .success(txt.split(separator: \",\").map(String.init))\n    } else {\n     \
    \   return .failure(txt.lowercased().filter { $0.isLetter }.reduce(0) { $1.asciiValue!\
    \ % 2 == 1 ? $0 + 1 : $0 })\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(split_words(txt: \"Hello world!\") == .success([\"Hello\", \"world!\"]))\n\
    assert(split_words(txt: \"Hello,world!\") == .success([\"Hello\", \"world!\"]))\n\
    assert(split_words(txt: \"Hello world,!\") == .success([\"Hello\", \"world,!\"\
    ]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\"\
    , \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\nassert(split_words(txt:\
    \ \"aaabb\") == .failure(2))\nassert(split_words(txt: \"aaaBb\") == .failure(1))\n\
    assert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmpa92iadal/tmpa92iadal.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b01857e8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b01854dfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b01854df988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b01854de7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpa92iadal                        0x0000562dc94b85eb <unavailable> + 9707

    5    libc.so.6                          0x00002b01859d4460 __libc_start_main +
    245

    6    tmpa92iadal                        0x0000562dc94b7999 <unavailable> + 6553

    '
  stdout: ''
  timestamp: 1659820934
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    if txt.contains(\" \") {\n        return .success(txt.split(separator:\
    \ \" \").map { String($0) })\n    } else if txt.contains(\",\") {\n        return\
    \ .success(txt.split(separator: \",\").map { String($0) })\n    } else {\n   \
    \     var count = 0\n        for (i, c) in txt.enumerated() {\n            if\
    \ c.isLowercase && i % 2 == 0 {\n                count += 1\n            }\n \
    \       }\n        return .failure(count)\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(split_words(txt: \"Hello world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"Hello\"\
    , \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmpcog91bof/tmpcog91bof.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4e8904fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4e88d46b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4e88d46988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4e88d457b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcog91bof                        0x00005644b37a963b <unavailable> + 9787

    5    libc.so.6                          0x00002b4e8923b460 __libc_start_main +
    245

    6    tmpcog91bof                        0x00005644b37a89e9 <unavailable> + 6633

    '
  stdout: ''
  timestamp: 1659820934
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    if txt.contains(\" \") {\n        return .success(txt.split(separator:\
    \ \" \").map(String.init))\n    } else if txt.contains(\",\") {\n        return\
    \ .success(txt.split(separator: \",\").map(String.init))\n    } else {\n     \
    \   return .failure(txt.filter { $0.isLowercase }.count)\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"Hello\"\
    , \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmpo6lu2fh4/tmpo6lu2fh4.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abd14f6fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abd14c66b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abd14c66988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abd14c657b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpo6lu2fh4                        0x0000564d5c4aa343 <unavailable> + 9027

    5    libc.so.6                          0x00002abd1515b460 __libc_start_main +
    245

    6    tmpo6lu2fh4                        0x0000564d5c4a9829 <unavailable> + 6185

    '
  stdout: ''
  timestamp: 1659820934
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    if txt.contains(\" \") {\n        return .success(txt.split(separator:\
    \ \" \").map{String($0)})\n    } else if txt.contains(\",\") {\n        return\
    \ .success(txt.split(separator: \",\").map{String($0)})\n    } else {\n      \
    \  var count = 0\n        for char in txt {\n            if let index = \"abcdefghijklmnopqrstuvwxyz\"\
    .firstIndex(of: char) {\n                if index % 2 == 1 {\n               \
    \     count += 1\n                }\n            }\n        }\n        return\
    \ .failure(count)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(split_words(txt:\
    \ \"Hello world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmpzbnw1q_a.swift:23:20: error: cannot convert value of type 'String.Index'\
    \ to expected argument type 'Int'\n                if index % 2 == 1 {\n     \
    \              ^\n"
  stdout: ''
  timestamp: 1659820935
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    if txt.contains(\" \") {\n        return .success(txt.split(separator:\
    \ \" \").map(String.init))\n    } else if txt.contains(\",\") {\n        return\
    \ .success(txt.split(separator: \",\").map(String.init))\n    } else {\n     \
    \   return .failure(txt.filter { $0.isLowercase }.count)\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"Hello\"\
    , \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmpo6lu2fh4/tmpo6lu2fh4.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abd14f6fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abd14c66b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abd14c66988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abd14c657b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpo6lu2fh4                        0x0000564d5c4aa343 <unavailable> + 9027

    5    libc.so.6                          0x00002abd1515b460 __libc_start_main +
    245

    6    tmpo6lu2fh4                        0x0000564d5c4a9829 <unavailable> + 6185

    '
  stdout: ''
  timestamp: 1659820934
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    if txt.contains(\" \") {\n        return .success(txt.split(separator:\
    \ \" \").map { String($0) })\n    } else if txt.contains(\",\") {\n        return\
    \ .success(txt.split(separator: \",\").map { String($0) })\n    } else {\n   \
    \     return .failure(txt.lowercased().filter { $0.isLetter }.enumerated().filter\
    \ { $0.offset % 2 == 0 }.count)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(split_words(txt: \"Hello world!\") == .success([\"Hello\", \"world!\"]))\n\
    assert(split_words(txt: \"Hello,world!\") == .success([\"Hello\", \"world!\"]))\n\
    assert(split_words(txt: \"Hello world,!\") == .success([\"Hello\", \"world,!\"\
    ]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\"\
    , \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\nassert(split_words(txt:\
    \ \"aaabb\") == .failure(2))\nassert(split_words(txt: \"aaaBb\") == .failure(1))\n\
    assert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmpusqqwafr/tmpusqqwafr.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abb3add8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abb3aacfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abb3aacf988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abb3aace7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpusqqwafr                        0x0000561cfd7e468b <unavailable> + 9867

    5    libc.so.6                          0x00002abb3afc4460 __libc_start_main +
    245

    6    tmpusqqwafr                        0x0000561cfd7e3a39 <unavailable> + 6713

    '
  stdout: ''
  timestamp: 1659820934
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    if txt.contains(\" \") {\n        return .success(txt.split(separator:\
    \ \" \").map(String.init))\n    } else if txt.contains(\",\") {\n        return\
    \ .success(txt.split(separator: \",\").map(String.init))\n    } else {\n     \
    \   return .failure(txt.lowercased().filter { $0.isLetter }.filter { $0.asciiValue!\
    \ % 2 == 1 }.count)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(split_words(txt:\
    \ \"Hello world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: Exception
  stderr: 'tmppq0wzq1k/tmppq0wzq1k.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4270090c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b426fd87b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b426fd87988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b426fd867b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppq0wzq1k                        0x0000558c22ffe5bb <unavailable> + 9659

    5    libc.so.6                          0x00002b427027c460 __libc_start_main +
    245

    6    tmppq0wzq1k                        0x0000558c22ffd969 <unavailable> + 6505

    '
  stdout: ''
  timestamp: 1659820934
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    if txt.contains(\" \") {\n        return .success(txt.split(separator:\
    \ \" \").map { String($0) })\n    } else if txt.contains(\",\") {\n        return\
    \ .success(txt.split(separator: \",\").map { String($0) })\n    } else {\n   \
    \     var count = 0\n        for (i, c) in txt.enumerated() {\n            if\
    \ i % 2 == 0 && c.isLowercase {\n                count += 1\n            }\n \
    \       }\n        return .failure(count)\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(split_words(txt: \"Hello world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"Hello\"\
    , \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmp9vxntrum/tmp9vxntrum.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7211907c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b72115feb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b72115fe988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b72115fd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9vxntrum                        0x000056399b78963b <unavailable> + 9787

    5    libc.so.6                          0x00002b7211af3460 __libc_start_main +
    245

    6    tmp9vxntrum                        0x000056399b7889e9 <unavailable> + 6633

    '
  stdout: ''
  timestamp: 1659820934
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    let words = txt.split(separator: \" \")\n    if words.count > 1\
    \ {\n        return .success(words.map { String($0) })\n    }\n    let words2\
    \ = txt.split(separator: \",\")\n    if words2.count > 1 {\n        return .success(words2.map\
    \ { String($0) })\n    }\n    let count = txt.filter { $0.isLowercase && $0.asciiValue!\
    \ % 2 == 1 }.count\n    return .failure(count)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(split_words(txt: \"Hello world!\") == .success([\"Hello\", \"world!\"\
    ]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"Hello\", \"world!\"\
    ]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"Hello\", \"world,!\"\
    ]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\"\
    , \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\nassert(split_words(txt:\
    \ \"aaabb\") == .failure(2))\nassert(split_words(txt: \"aaaBb\") == .failure(1))\n\
    assert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmph0zgmna5/tmph0zgmna5.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adae6d0ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adae6a01b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adae6a01988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adae6a007b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmph0zgmna5                        0x000055f02433f50b <unavailable> + 9483

    5    libc.so.6                          0x00002adae6ef6460 __libc_start_main +
    245

    6    tmph0zgmna5                        0x000055f02433e8b9 <unavailable> + 6329

    '
  stdout: ''
  timestamp: 1659820935
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    if txt.contains(\" \") {\n        return .success(txt.split(separator:\
    \ \" \").map { String($0) })\n    } else if txt.contains(\",\") {\n        return\
    \ .success(txt.split(separator: \",\").map { String($0) })\n    } else {\n   \
    \     return .failure(txt.filter { $0.isLowercase }.count)\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"\
    Hello\", \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmpz4e6qyo4/tmpz4e6qyo4.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae1553e4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae1550dbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae1550db988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae1550da7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpz4e6qyo4                        0x0000563563aa3343 <unavailable> + 9027

    5    libc.so.6                          0x00002ae1555d0460 __libc_start_main +
    245

    6    tmpz4e6qyo4                        0x0000563563aa2829 <unavailable> + 6185

    '
  stdout: ''
  timestamp: 1659820934
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    // TODO: Implement\n    return .failure(0)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"Hello\"\
    , \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmpes10xz_n/tmpes10xz_n.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b09df65ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b09df351b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b09df351988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b09df3507b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpes10xz_n                        0x0000558f08c0984c <unavailable> + 6220

    5    libc.so.6                          0x00002b09df846460 __libc_start_main +
    245

    6    tmpes10xz_n                        0x0000558f08c09389 <unavailable> + 5001

    '
  stdout: ''
  timestamp: 1659820935
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    if txt.contains(\" \") {\n        return .success(txt.split(separator:\
    \ \" \").map { String($0) })\n    } else if txt.contains(\",\") {\n        return\
    \ .success(txt.split(separator: \",\").map { String($0) })\n    } else {\n   \
    \     return .failure(txt.lowercased().filter { $0.isLetter }.enumerated().filter\
    \ { $0.offset % 2 == 0 }.count)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(split_words(txt: \"Hello world!\") == .success([\"Hello\", \"world!\"]))\n\
    assert(split_words(txt: \"Hello,world!\") == .success([\"Hello\", \"world!\"]))\n\
    assert(split_words(txt: \"Hello world,!\") == .success([\"Hello\", \"world,!\"\
    ]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\"\
    , \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\nassert(split_words(txt:\
    \ \"aaabb\") == .failure(2))\nassert(split_words(txt: \"aaaBb\") == .failure(1))\n\
    assert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmpusqqwafr/tmpusqqwafr.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abb3add8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abb3aacfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abb3aacf988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abb3aace7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpusqqwafr                        0x0000561cfd7e468b <unavailable> + 9867

    5    libc.so.6                          0x00002abb3afc4460 __libc_start_main +
    245

    6    tmpusqqwafr                        0x0000561cfd7e3a39 <unavailable> + 6713

    '
  stdout: ''
  timestamp: 1659820934
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    // TODO: Implement\n    return .failure(0)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"Hello\"\
    , \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmpes10xz_n/tmpes10xz_n.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b09df65ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b09df351b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b09df351988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b09df3507b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpes10xz_n                        0x0000558f08c0984c <unavailable> + 6220

    5    libc.so.6                          0x00002b09df846460 __libc_start_main +
    245

    6    tmpes10xz_n                        0x0000558f08c09389 <unavailable> + 5001

    '
  stdout: ''
  timestamp: 1659820935
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    if txt.contains(\" \") {\n        return .success(txt.split(separator:\
    \ \" \").map { String($0) })\n    } else if txt.contains(\",\") {\n        return\
    \ .success(txt.split(separator: \",\").map { String($0) })\n    } else {\n   \
    \     return .failure(txt.lowercased().enumerated().filter { $0.offset % 2 ==\
    \ 1 }.map { $0.element }.count)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(split_words(txt: \"Hello world!\") == .success([\"Hello\", \"world!\"]))\n\
    assert(split_words(txt: \"Hello,world!\") == .success([\"Hello\", \"world!\"]))\n\
    assert(split_words(txt: \"Hello world,!\") == .success([\"Hello\", \"world,!\"\
    ]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\"\
    , \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\nassert(split_words(txt:\
    \ \"aaabb\") == .failure(2))\nassert(split_words(txt: \"aaaBb\") == .failure(1))\n\
    assert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmp60nacd2s/tmp60nacd2s.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8126710c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8126407b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8126407988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b81264067b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp60nacd2s                        0x0000559b83b9a763 <unavailable> + 10083

    5    libc.so.6                          0x00002b81268fc460 __libc_start_main +
    245

    6    tmp60nacd2s                        0x0000559b83b999d9 <unavailable> + 6617

    '
  stdout: ''
  timestamp: 1659820935
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    if txt.contains(\" \") {\n        return .success(txt.split(separator:\
    \ \" \").map { String($0) })\n    } else if txt.contains(\",\") {\n        return\
    \ .success(txt.split(separator: \",\").map { String($0) })\n    } else {\n   \
    \     return .failure(txt.lowercased().filter { $0.isLetter }.enumerated().filter\
    \ { $0.offset % 2 == 0 }.count)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(split_words(txt: \"Hello world!\") == .success([\"Hello\", \"world!\"]))\n\
    assert(split_words(txt: \"Hello,world!\") == .success([\"Hello\", \"world!\"]))\n\
    assert(split_words(txt: \"Hello world,!\") == .success([\"Hello\", \"world,!\"\
    ]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\"\
    , \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\nassert(split_words(txt:\
    \ \"aaabb\") == .failure(2))\nassert(split_words(txt: \"aaaBb\") == .failure(1))\n\
    assert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmpusqqwafr/tmpusqqwafr.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abb3add8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abb3aacfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abb3aacf988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abb3aace7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpusqqwafr                        0x0000561cfd7e468b <unavailable> + 9867

    5    libc.so.6                          0x00002abb3afc4460 __libc_start_main +
    245

    6    tmpusqqwafr                        0x0000561cfd7e3a39 <unavailable> + 6713

    '
  stdout: ''
  timestamp: 1659820934
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    if txt.contains(\" \") {\n        return .success(txt.split(separator:\
    \ \" \").map { String($0) })\n    } else if txt.contains(\",\") {\n        return\
    \ .success(txt.split(separator: \",\").map { String($0) })\n    } else {\n   \
    \     return .failure(txt.filter { $0.isLowercase }.count)\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"\
    Hello\", \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmpz4e6qyo4/tmpz4e6qyo4.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae1553e4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae1550dbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae1550db988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae1550da7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpz4e6qyo4                        0x0000563563aa3343 <unavailable> + 9027

    5    libc.so.6                          0x00002ae1555d0460 __libc_start_main +
    245

    6    tmpz4e6qyo4                        0x0000563563aa2829 <unavailable> + 6185

    '
  stdout: ''
  timestamp: 1659820934
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    if txt.contains(\" \") {\n        return .success(txt.split(separator:\
    \ \" \").map{String($0)})\n    } else if txt.contains(\",\") {\n        return\
    \ .success(txt.split(separator: \",\").map{String($0)})\n    } else {\n      \
    \  var count = 0\n        for i in txt.lowercased() {\n            if Int(i.asciiValue!)\
    \ % 2 == 1 {\n                count += 1\n            }\n        }\n        return\
    \ .failure(count)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(split_words(txt:\
    \ \"Hello world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: Exception
  stderr: 'tmp246ks_5v/tmp246ks_5v.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7762d34c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7762a2bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7762a2b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7762a2a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp246ks_5v                        0x000056510eea06bb <unavailable> + 9915

    5    libc.so.6                          0x00002b7762f20460 __libc_start_main +
    245

    6    tmp246ks_5v                        0x000056510ee9fa69 <unavailable> + 6761

    '
  stdout: ''
  timestamp: 1659820935
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    if txt.contains(\" \") {\n        return .success(txt.split(separator:\
    \ \" \").map { String($0) })\n    } else if txt.contains(\",\") {\n        return\
    \ .success(txt.split(separator: \",\").map { String($0) })\n    } else {\n   \
    \     return .failure(txt.filter { $0.isLowercase }.count % 2)\n    }\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"\
    Hello\", \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmpzeai57gw/tmpzeai57gw.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab4d3bf4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab4d38ebb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab4d38eb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab4d38ea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzeai57gw                        0x0000560110f373e3 <unavailable> + 9187

    5    libc.so.6                          0x00002ab4d3de0460 __libc_start_main +
    245

    6    tmpzeai57gw                        0x0000560110f368c9 <unavailable> + 6345

    '
  stdout: ''
  timestamp: 1659820934
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    return .failure(0)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(split_words(txt:\
    \ \"Hello world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: Exception
  stderr: 'tmpi6nwrd5r/tmpi6nwrd5r.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b996d825c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b996d51cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b996d51c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b996d51b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpi6nwrd5r                        0x0000562c2f58584c <unavailable> + 6220

    5    libc.so.6                          0x00002b996da11460 __libc_start_main +
    245

    6    tmpi6nwrd5r                        0x0000562c2f585389 <unavailable> + 5001

    '
  stdout: ''
  timestamp: 1659820934
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    // YOUR CODE HERE\n    return .failure(0)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"Hello\"\
    , \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmp3hj1tgim/tmp3hj1tgim.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac8886f2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac8883e9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac8883e9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac8883e87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3hj1tgim                        0x000055e4d4ab384c <unavailable> + 6220

    5    libc.so.6                          0x00002ac8888de460 __libc_start_main +
    245

    6    tmp3hj1tgim                        0x000055e4d4ab3389 <unavailable> + 5001

    '
  stdout: ''
  timestamp: 1659820935
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    if txt.contains(\" \") {\n        return .success(txt.split(separator:\
    \ \" \").map { String($0) })\n    } else if txt.contains(\",\") {\n        return\
    \ .success(txt.split(separator: \",\").map { String($0) })\n    } else {\n   \
    \     return .failure(txt.lowercased().filter { $0.isLetter }.enumerated().filter\
    \ { $0.offset % 2 == 0 }.count)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(split_words(txt: \"Hello world!\") == .success([\"Hello\", \"world!\"]))\n\
    assert(split_words(txt: \"Hello,world!\") == .success([\"Hello\", \"world!\"]))\n\
    assert(split_words(txt: \"Hello world,!\") == .success([\"Hello\", \"world,!\"\
    ]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\"\
    , \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\nassert(split_words(txt:\
    \ \"aaabb\") == .failure(2))\nassert(split_words(txt: \"aaaBb\") == .failure(1))\n\
    assert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmpusqqwafr/tmpusqqwafr.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abb3add8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abb3aacfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abb3aacf988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abb3aace7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpusqqwafr                        0x0000561cfd7e468b <unavailable> + 9867

    5    libc.so.6                          0x00002abb3afc4460 __libc_start_main +
    245

    6    tmpusqqwafr                        0x0000561cfd7e3a39 <unavailable> + 6713

    '
  stdout: ''
  timestamp: 1659820934
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    if txt.contains(\" \") {\n        return .success(txt.split(separator:\
    \ \" \").map { String($0) })\n    } else if txt.contains(\",\") {\n        return\
    \ .success(txt.split(separator: \",\").map { String($0) })\n    } else {\n   \
    \     return .failure(txt.filter { $0.isLowercase }.count)\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"\
    Hello\", \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmpz4e6qyo4/tmpz4e6qyo4.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae1553e4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae1550dbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae1550db988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae1550da7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpz4e6qyo4                        0x0000563563aa3343 <unavailable> + 9027

    5    libc.so.6                          0x00002ae1555d0460 __libc_start_main +
    245

    6    tmpz4e6qyo4                        0x0000563563aa2829 <unavailable> + 6185

    '
  stdout: ''
  timestamp: 1659820934
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    if txt.contains(\" \") {\n        return .success(txt.split(separator:\
    \ \" \").map { String($0) })\n    } else if txt.contains(\",\") {\n        return\
    \ .success(txt.split(separator: \",\").map { String($0) })\n    } else {\n   \
    \     return .failure(txt.filter { $0.isLowercase }.count)\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"\
    Hello\", \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmpz4e6qyo4/tmpz4e6qyo4.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae1553e4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae1550dbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae1550db988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae1550da7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpz4e6qyo4                        0x0000563563aa3343 <unavailable> + 9027

    5    libc.so.6                          0x00002ae1555d0460 __libc_start_main +
    245

    6    tmpz4e6qyo4                        0x0000563563aa2829 <unavailable> + 6185

    '
  stdout: ''
  timestamp: 1659820934
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    let words = txt.split(separator: \" \")\n    if words.count > 1\
    \ {\n        return .success(words.map { String($0) })\n    }\n    let words2\
    \ = txt.split(separator: \",\")\n    if words2.count > 1 {\n        return .success(words2.map\
    \ { String($0) })\n    }\n    let count = txt.filter { $0.isLowercase && $0.asciiValue!\
    \ % 2 == 1 }.count\n    return .failure(count)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(split_words(txt: \"Hello world!\") == .success([\"Hello\", \"world!\"\
    ]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"Hello\", \"world!\"\
    ]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"Hello\", \"world,!\"\
    ]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\"\
    , \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\nassert(split_words(txt:\
    \ \"aaabb\") == .failure(2))\nassert(split_words(txt: \"aaaBb\") == .failure(1))\n\
    assert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmph0zgmna5/tmph0zgmna5.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adae6d0ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adae6a01b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adae6a01988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adae6a007b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmph0zgmna5                        0x000055f02433f50b <unavailable> + 9483

    5    libc.so.6                          0x00002adae6ef6460 __libc_start_main +
    245

    6    tmph0zgmna5                        0x000055f02433e8b9 <unavailable> + 6329

    '
  stdout: ''
  timestamp: 1659820935
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    if txt.contains(\" \") {\n        return .success(txt.split(separator:\
    \ \" \").map { String($0) })\n    } else if txt.contains(\",\") {\n        return\
    \ .success(txt.split(separator: \",\").map { String($0) })\n    } else {\n   \
    \     return .failure(txt.filter { $0.isLowercase }.count)\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"\
    Hello\", \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmpz4e6qyo4/tmpz4e6qyo4.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae1553e4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae1550dbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae1550db988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae1550da7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpz4e6qyo4                        0x0000563563aa3343 <unavailable> + 9027

    5    libc.so.6                          0x00002ae1555d0460 __libc_start_main +
    245

    6    tmpz4e6qyo4                        0x0000563563aa2829 <unavailable> + 6185

    '
  stdout: ''
  timestamp: 1659820934
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    if txt.contains(\" \") {\n        return .success(txt.split(separator:\
    \ \" \").map(String.init))\n    } else if txt.contains(\",\") {\n        return\
    \ .success(txt.split(separator: \",\").map(String.init))\n    } else {\n     \
    \   return .failure(txt.lowercased().filter { $0.isLetter }.enumerated().filter\
    \ { $0.offset % 2 == 0 }.count)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(split_words(txt: \"Hello world!\") == .success([\"Hello\", \"world!\"]))\n\
    assert(split_words(txt: \"Hello,world!\") == .success([\"Hello\", \"world!\"]))\n\
    assert(split_words(txt: \"Hello world,!\") == .success([\"Hello\", \"world,!\"\
    ]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\"\
    , \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\nassert(split_words(txt:\
    \ \"aaabb\") == .failure(2))\nassert(split_words(txt: \"aaaBb\") == .failure(1))\n\
    assert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmpnx2rl_oi/tmpnx2rl_oi.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4006af5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b40067ecb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b40067ec988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b40067eb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnx2rl_oi                        0x000055ea31bee68b <unavailable> + 9867

    5    libc.so.6                          0x00002b4006ce1460 __libc_start_main +
    245

    6    tmpnx2rl_oi                        0x000055ea31beda39 <unavailable> + 6713

    '
  stdout: ''
  timestamp: 1659820934
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    if txt.contains(\" \") {\n        return .success(txt.split(separator:\
    \ \" \").map { String($0) })\n    } else if txt.contains(\",\") {\n        return\
    \ .success(txt.split(separator: \",\").map { String($0) })\n    } else {\n   \
    \     return .failure(txt.filter { $0.isLowercase }.count { $0.asciiValue! % 2\
    \ == 1 })\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(split_words(txt: \"\
    Hello world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmp0l52zj_s.swift:20:55: error: cannot call value of non-function\
    \ type 'Int'\n        return .failure(txt.filter { $0.isLowercase }.count { $0.asciiValue!\
    \ % 2 == 1 })\n                                                      ^\n"
  stdout: ''
  timestamp: 1659820935
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    if txt.contains(\" \") {\n        return .success(txt.split(separator:\
    \ \" \").map { String($0) })\n    } else if txt.contains(\",\") {\n        return\
    \ .success(txt.split(separator: \",\").map { String($0) })\n    } else {\n   \
    \     var count = 0\n        for (i, c) in txt.enumerated() {\n            if\
    \ i % 2 == 0 && c.isLowercase {\n                count += 1\n            }\n \
    \       }\n        return .failure(count)\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(split_words(txt: \"Hello world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"Hello\"\
    , \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmp9vxntrum/tmp9vxntrum.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7211907c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b72115feb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b72115fe988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b72115fd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9vxntrum                        0x000056399b78963b <unavailable> + 9787

    5    libc.so.6                          0x00002b7211af3460 __libc_start_main +
    245

    6    tmp9vxntrum                        0x000056399b7889e9 <unavailable> + 6633

    '
  stdout: ''
  timestamp: 1659820934
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    if txt.contains(\" \") {\n        return .success(txt.split(separator:\
    \ \" \").map { String($0) })\n    } else if txt.contains(\",\") {\n        return\
    \ .success(txt.split(separator: \",\").map { String($0) })\n    } else {\n   \
    \     return .failure(txt.lowercased().filter { $0.isLetter }.enumerated().filter\
    \ { $0.offset % 2 == 0 }.count)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(split_words(txt: \"Hello world!\") == .success([\"Hello\", \"world!\"]))\n\
    assert(split_words(txt: \"Hello,world!\") == .success([\"Hello\", \"world!\"]))\n\
    assert(split_words(txt: \"Hello world,!\") == .success([\"Hello\", \"world,!\"\
    ]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\"\
    , \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\nassert(split_words(txt:\
    \ \"aaabb\") == .failure(2))\nassert(split_words(txt: \"aaaBb\") == .failure(1))\n\
    assert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmpusqqwafr/tmpusqqwafr.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abb3add8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abb3aacfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abb3aacf988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abb3aace7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpusqqwafr                        0x0000561cfd7e468b <unavailable> + 9867

    5    libc.so.6                          0x00002abb3afc4460 __libc_start_main +
    245

    6    tmpusqqwafr                        0x0000561cfd7e3a39 <unavailable> + 6713

    '
  stdout: ''
  timestamp: 1659820934
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    if txt.contains(\" \") {\n        return .success(txt.split(separator:\
    \ \" \").map { String($0) })\n    } else if txt.contains(\",\") {\n        return\
    \ .success(txt.split(separator: \",\").map { String($0) })\n    } else {\n   \
    \     var count = 0\n        for (i, c) in txt.enumerated() {\n            if\
    \ c.isLowercase && i % 2 == 0 {\n                count += 1\n            }\n \
    \       }\n        return .failure(count)\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(split_words(txt: \"Hello world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"Hello\"\
    , \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmpcog91bof/tmpcog91bof.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4e8904fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4e88d46b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4e88d46988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4e88d457b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcog91bof                        0x00005644b37a963b <unavailable> + 9787

    5    libc.so.6                          0x00002b4e8923b460 __libc_start_main +
    245

    6    tmpcog91bof                        0x00005644b37a89e9 <unavailable> + 6633

    '
  stdout: ''
  timestamp: 1659820934
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    if txt.contains(\" \") {\n        return .success(txt.split(separator:\
    \ \" \").map { String($0) })\n    } else if txt.contains(\",\") {\n        return\
    \ .success(txt.split(separator: \",\").map { String($0) })\n    } else {\n   \
    \     return .failure(txt.filter { $0.isLowercase }.count)\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"\
    Hello\", \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmpz4e6qyo4/tmpz4e6qyo4.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae1553e4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae1550dbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae1550db988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae1550da7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpz4e6qyo4                        0x0000563563aa3343 <unavailable> + 9027

    5    libc.so.6                          0x00002ae1555d0460 __libc_start_main +
    245

    6    tmpz4e6qyo4                        0x0000563563aa2829 <unavailable> + 6185

    '
  stdout: ''
  timestamp: 1659820934
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    if txt.contains(\" \") {\n        return .success(txt.split(separator:\
    \ \" \").map { String($0) })\n    } else if txt.contains(\",\") {\n        return\
    \ .success(txt.split(separator: \",\").map { String($0) })\n    } else {\n   \
    \     var count = 0\n        for (i, c) in txt.enumerated() {\n            if\
    \ c.isLowercase && i % 2 == 0 {\n                count += 1\n            }\n \
    \       }\n        return .failure(count)\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(split_words(txt: \"Hello world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"Hello\"\
    , \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmpcog91bof/tmpcog91bof.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4e8904fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4e88d46b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4e88d46988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4e88d457b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcog91bof                        0x00005644b37a963b <unavailable> + 9787

    5    libc.so.6                          0x00002b4e8923b460 __libc_start_main +
    245

    6    tmpcog91bof                        0x00005644b37a89e9 <unavailable> + 6633

    '
  stdout: ''
  timestamp: 1659820934
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    if txt.contains(\" \") {\n        return .success(txt.split(separator:\
    \ \" \").map { String($0) })\n    } else if txt.contains(\",\") {\n        return\
    \ .success(txt.split(separator: \",\").map { String($0) })\n    } else {\n   \
    \     var count = 0\n        for (i, c) in txt.enumerated() {\n            if\
    \ i % 2 == 0 && c.isLowercase {\n                count += 1\n            }\n \
    \       }\n        return .failure(count)\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(split_words(txt: \"Hello world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"Hello\"\
    , \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmp9vxntrum/tmp9vxntrum.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7211907c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b72115feb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b72115fe988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b72115fd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9vxntrum                        0x000056399b78963b <unavailable> + 9787

    5    libc.so.6                          0x00002b7211af3460 __libc_start_main +
    245

    6    tmp9vxntrum                        0x000056399b7889e9 <unavailable> + 6633

    '
  stdout: ''
  timestamp: 1659820934
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    if txt.contains(\" \") {\n        return .success(txt.split(separator:\
    \ \" \").map { String($0) })\n    } else if txt.contains(\",\") {\n        return\
    \ .success(txt.split(separator: \",\").map { String($0) })\n    } else {\n   \
    \     var count = 0\n        for (i, c) in txt.enumerated() {\n            if\
    \ i % 2 == 0 && c.isLowercase {\n                count += 1\n            }\n \
    \       }\n        return .failure(count)\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(split_words(txt: \"Hello world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"Hello\"\
    , \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmp9vxntrum/tmp9vxntrum.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7211907c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b72115feb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b72115fe988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b72115fd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9vxntrum                        0x000056399b78963b <unavailable> + 9787

    5    libc.so.6                          0x00002b7211af3460 __libc_start_main +
    245

    6    tmp9vxntrum                        0x000056399b7889e9 <unavailable> + 6633

    '
  stdout: ''
  timestamp: 1659820934
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    // TODO: Implement me!\n    return .failure(0)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"Hello\"\
    , \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmpetgn9bkh/tmpetgn9bkh.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abbecfe7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abbeccdeb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abbeccde988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abbeccdd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpetgn9bkh                        0x000055d17509b84c <unavailable> + 6220

    5    libc.so.6                          0x00002abbed1d3460 __libc_start_main +
    245

    6    tmpetgn9bkh                        0x000055d17509b389 <unavailable> + 5001

    '
  stdout: ''
  timestamp: 1659820935
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    if txt.contains(\" \") {\n        return .success(txt.split(separator:\
    \ \" \").map { String($0) })\n    } else if txt.contains(\",\") {\n        return\
    \ .success(txt.split(separator: \",\").map { String($0) })\n    } else {\n   \
    \     return .failure(txt.filter { $0.isLowercase }.count)\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"\
    Hello\", \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmpz4e6qyo4/tmpz4e6qyo4.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae1553e4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae1550dbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae1550db988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae1550da7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpz4e6qyo4                        0x0000563563aa3343 <unavailable> + 9027

    5    libc.so.6                          0x00002ae1555d0460 __libc_start_main +
    245

    6    tmpz4e6qyo4                        0x0000563563aa2829 <unavailable> + 6185

    '
  stdout: ''
  timestamp: 1659820934
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    if txt.contains(\" \") {\n        return .success(txt.split(separator:\
    \ \" \").map { String($0) })\n    } else if txt.contains(\",\") {\n        return\
    \ .success(txt.split(separator: \",\").map { String($0) })\n    } else {\n   \
    \     return .failure(txt.filter { $0.isLowercase }.count % 2)\n    }\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"\
    Hello\", \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmpzeai57gw/tmpzeai57gw.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab4d3bf4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab4d38ebb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab4d38eb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab4d38ea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzeai57gw                        0x0000560110f373e3 <unavailable> + 9187

    5    libc.so.6                          0x00002ab4d3de0460 __libc_start_main +
    245

    6    tmpzeai57gw                        0x0000560110f368c9 <unavailable> + 6345

    '
  stdout: ''
  timestamp: 1659820934
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    if txt.contains(\" \") {\n        return .success(txt.split(separator:\
    \ \" \").map { String($0) })\n    } else if txt.contains(\",\") {\n        return\
    \ .success(txt.split(separator: \",\").map { String($0) })\n    } else {\n   \
    \     return .failure(txt.filter { $0.isLowercase }.count)\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"\
    Hello\", \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmpz4e6qyo4/tmpz4e6qyo4.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae1553e4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae1550dbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae1550db988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae1550da7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpz4e6qyo4                        0x0000563563aa3343 <unavailable> + 9027

    5    libc.so.6                          0x00002ae1555d0460 __libc_start_main +
    245

    6    tmpz4e6qyo4                        0x0000563563aa2829 <unavailable> + 6185

    '
  stdout: ''
  timestamp: 1659820934
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    if txt.contains(\" \") {\n        return .success(txt.split(separator:\
    \ \" \").map { String($0) })\n    } else if txt.contains(\",\") {\n        return\
    \ .success(txt.split(separator: \",\").map { String($0) })\n    } else {\n   \
    \     return .failure(txt.filter { $0.isLowercase }.count)\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"\
    Hello\", \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmpz4e6qyo4/tmpz4e6qyo4.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae1553e4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae1550dbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae1550db988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae1550da7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpz4e6qyo4                        0x0000563563aa3343 <unavailable> + 9027

    5    libc.so.6                          0x00002ae1555d0460 __libc_start_main +
    245

    6    tmpz4e6qyo4                        0x0000563563aa2829 <unavailable> + 6185

    '
  stdout: ''
  timestamp: 1659820934
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    let words = txt.split(separator: \" \")\n    if words.count > 1\
    \ {\n        return .success(words.map { String($0) })\n    }\n    let words2\
    \ = txt.split(separator: \",\")\n    if words2.count > 1 {\n        return .success(words2.map\
    \ { String($0) })\n    }\n    let count = txt.filter { $0.isLowercase && $0.asciiValue!\
    \ % 2 == 1 }.count\n    return .failure(count)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(split_words(txt: \"Hello world!\") == .success([\"Hello\", \"world!\"\
    ]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"Hello\", \"world!\"\
    ]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"Hello\", \"world,!\"\
    ]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\"\
    , \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\nassert(split_words(txt:\
    \ \"aaabb\") == .failure(2))\nassert(split_words(txt: \"aaaBb\") == .failure(1))\n\
    assert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmph0zgmna5/tmph0zgmna5.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adae6d0ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adae6a01b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adae6a01988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adae6a007b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmph0zgmna5                        0x000055f02433f50b <unavailable> + 9483

    5    libc.so.6                          0x00002adae6ef6460 __libc_start_main +
    245

    6    tmph0zgmna5                        0x000055f02433e8b9 <unavailable> + 6329

    '
  stdout: ''
  timestamp: 1659820935
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    if let words = txt.split(separator: \" \").map(String.init) as?\
    \ [String] {\n        return .success(words)\n    } else if let words = txt.split(separator:\
    \ \",\").map(String.init) as? [String] {\n        return .success(words)\n   \
    \ } else {\n        var count = 0\n        for c in txt {\n            if c.isLowercase\
    \ {\n                count += 1\n            }\n        }\n        return .failure(count)\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(split_words(txt: \"Hello\
    \ world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt: \"\
    Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: Exception
  stderr: 'tmpt1h7k_gf/tmpt1h7k_gf.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b67858dac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b67855d1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b67855d1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b67855d07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpt1h7k_gf                        0x000055905f9fbcbe <unavailable> + 7358

    5    libc.so.6                          0x00002b6785ac6460 __libc_start_main +
    245

    6    tmpt1h7k_gf                        0x000055905f9fb649 <unavailable> + 5705

    '
  stdout: ''
  timestamp: 1659820935
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    let words = txt.split(separator: \" \")\n    if words.count > 1\
    \ {\n        return .success(words.map { String($0) })\n    }\n    let words2\
    \ = txt.split(separator: \",\")\n    if words2.count > 1 {\n        return .success(words2.map\
    \ { String($0) })\n    }\n    var count = 0\n    for (i, c) in txt.lowercased().enumerated()\
    \ {\n        if i % 2 == 0 && c.asciiValue! > Int((\"a\" as UnicodeScalar).value)\
    \ {\n            count += 1\n        }\n    }\n    return .failure(count)\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"\
    Hello\", \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmp8wy9b4ah/tmp8wy9b4ah.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b56bf9ffc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b56bf6f6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b56bf6f6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b56bf6f57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8wy9b4ah                        0x00005647e512d713 <unavailable> + 10003

    5    libc.so.6                          0x00002b56bfbeb460 __libc_start_main +
    245

    6    tmp8wy9b4ah                        0x00005647e512cbf9 <unavailable> + 7161

    '
  stdout: ''
  timestamp: 1659820936
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    if txt.contains(\" \") {\n        return .success(txt.split(separator:\
    \ \" \").map { String($0) })\n    } else if txt.contains(\",\") {\n        return\
    \ .success(txt.split(separator: \",\").map { String($0) })\n    } else {\n   \
    \     return .failure(txt.filter { $0.isLowercase }.count)\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"\
    Hello\", \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmpz4e6qyo4/tmpz4e6qyo4.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae1553e4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae1550dbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae1550db988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae1550da7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpz4e6qyo4                        0x0000563563aa3343 <unavailable> + 9027

    5    libc.so.6                          0x00002ae1555d0460 __libc_start_main +
    245

    6    tmpz4e6qyo4                        0x0000563563aa2829 <unavailable> + 6185

    '
  stdout: ''
  timestamp: 1659820934
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    if txt.contains(\" \") {\n        return .success(txt.split(separator:\
    \ \" \").map { String($0) })\n    } else if txt.contains(\",\") {\n        return\
    \ .success(txt.split(separator: \",\").map { String($0) })\n    } else {\n   \
    \     return .failure(txt.filter { $0.isLowercase }.count % 2)\n    }\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"\
    Hello\", \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmpzeai57gw/tmpzeai57gw.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab4d3bf4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab4d38ebb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab4d38eb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab4d38ea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzeai57gw                        0x0000560110f373e3 <unavailable> + 9187

    5    libc.so.6                          0x00002ab4d3de0460 __libc_start_main +
    245

    6    tmpzeai57gw                        0x0000560110f368c9 <unavailable> + 6345

    '
  stdout: ''
  timestamp: 1659820934
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    if txt.contains(\" \") {\n        return .success(txt.split(separator:\
    \ \" \").map { String($0) })\n    } else if txt.contains(\",\") {\n        return\
    \ .success(txt.split(separator: \",\").map { String($0) })\n    } else {\n   \
    \     return .failure(txt.filter { $0.isLowercase }.count { $0.asciiValue! % 2\
    \ == 1 })\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(split_words(txt: \"\
    Hello world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmp0l52zj_s.swift:20:55: error: cannot call value of non-function\
    \ type 'Int'\n        return .failure(txt.filter { $0.isLowercase }.count { $0.asciiValue!\
    \ % 2 == 1 })\n                                                      ^\n"
  stdout: ''
  timestamp: 1659820935
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    if txt.contains(\" \") {\n        return .success(txt.split(separator:\
    \ \" \").map { String($0) })\n    } else if txt.contains(\",\") {\n        return\
    \ .success(txt.split(separator: \",\").map { String($0) })\n    } else {\n   \
    \     return .failure(txt.filter { $0.isLowercase }.count)\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"\
    Hello\", \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmpz4e6qyo4/tmpz4e6qyo4.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae1553e4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae1550dbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae1550db988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae1550da7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpz4e6qyo4                        0x0000563563aa3343 <unavailable> + 9027

    5    libc.so.6                          0x00002ae1555d0460 __libc_start_main +
    245

    6    tmpz4e6qyo4                        0x0000563563aa2829 <unavailable> + 6185

    '
  stdout: ''
  timestamp: 1659820934
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    if txt.contains(\" \") {\n        return .success(txt.split(separator:\
    \ \" \").map { String($0) })\n    } else if txt.contains(\",\") {\n        return\
    \ .success(txt.split(separator: \",\").map { String($0) })\n    } else {\n   \
    \     return .failure(txt.filter { $0.isLowercase }.count)\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"\
    Hello\", \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmpz4e6qyo4/tmpz4e6qyo4.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae1553e4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae1550dbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae1550db988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae1550da7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpz4e6qyo4                        0x0000563563aa3343 <unavailable> + 9027

    5    libc.so.6                          0x00002ae1555d0460 __libc_start_main +
    245

    6    tmpz4e6qyo4                        0x0000563563aa2829 <unavailable> + 6185

    '
  stdout: ''
  timestamp: 1659820934
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    if txt.contains(\" \") {\n        return .success(txt.split(separator:\
    \ \" \").map(String.init))\n    } else if txt.contains(\",\") {\n        return\
    \ .success(txt.split(separator: \",\").map(String.init))\n    } else {\n     \
    \   return .failure(txt.lowercased().filter { $0.isLetter }.enumerated().filter\
    \ { $0.offset % 2 == 0 }.count)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(split_words(txt: \"Hello world!\") == .success([\"Hello\", \"world!\"]))\n\
    assert(split_words(txt: \"Hello,world!\") == .success([\"Hello\", \"world!\"]))\n\
    assert(split_words(txt: \"Hello world,!\") == .success([\"Hello\", \"world,!\"\
    ]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\"\
    , \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\nassert(split_words(txt:\
    \ \"aaabb\") == .failure(2))\nassert(split_words(txt: \"aaaBb\") == .failure(1))\n\
    assert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmpnx2rl_oi/tmpnx2rl_oi.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4006af5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b40067ecb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b40067ec988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b40067eb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnx2rl_oi                        0x000055ea31bee68b <unavailable> + 9867

    5    libc.so.6                          0x00002b4006ce1460 __libc_start_main +
    245

    6    tmpnx2rl_oi                        0x000055ea31beda39 <unavailable> + 6713

    '
  stdout: ''
  timestamp: 1659820934
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    if txt.contains(\" \") {\n        return .success(txt.split(separator:\
    \ \" \").map { String($0) })\n    } else if txt.contains(\",\") {\n        return\
    \ .success(txt.split(separator: \",\").map { String($0) })\n    } else {\n   \
    \     var count = 0\n        for (i, c) in txt.enumerated() {\n            if\
    \ i % 2 == 0 && c.isLowercase {\n                count += 1\n            }\n \
    \       }\n        return .failure(count)\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(split_words(txt: \"Hello world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"Hello\"\
    , \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmp9vxntrum/tmp9vxntrum.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7211907c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b72115feb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b72115fe988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b72115fd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9vxntrum                        0x000056399b78963b <unavailable> + 9787

    5    libc.so.6                          0x00002b7211af3460 __libc_start_main +
    245

    6    tmp9vxntrum                        0x000056399b7889e9 <unavailable> + 6633

    '
  stdout: ''
  timestamp: 1659820934
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    let words = txt.split(separator: \" \")\n    if words.count > 1\
    \ {\n        return .success(words.map { String($0) })\n    }\n    let words2\
    \ = txt.split(separator: \",\")\n    if words2.count > 1 {\n        return .success(words2.map\
    \ { String($0) })\n    }\n    let count = txt.filter { $0.isLowercase && $0.asciiValue!\
    \ % 2 == 1 }.count\n    return .failure(count)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(split_words(txt: \"Hello world!\") == .success([\"Hello\", \"world!\"\
    ]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"Hello\", \"world!\"\
    ]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"Hello\", \"world,!\"\
    ]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\"\
    , \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\nassert(split_words(txt:\
    \ \"aaabb\") == .failure(2))\nassert(split_words(txt: \"aaaBb\") == .failure(1))\n\
    assert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmph0zgmna5/tmph0zgmna5.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adae6d0ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adae6a01b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adae6a01988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adae6a007b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmph0zgmna5                        0x000055f02433f50b <unavailable> + 9483

    5    libc.so.6                          0x00002adae6ef6460 __libc_start_main +
    245

    6    tmph0zgmna5                        0x000055f02433e8b9 <unavailable> + 6329

    '
  stdout: ''
  timestamp: 1659820935
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    if txt.contains(\" \") {\n        return .success(txt.split(separator:\
    \ \" \").map { String($0) })\n    } else if txt.contains(\",\") {\n        return\
    \ .success(txt.split(separator: \",\").map { String($0) })\n    } else {\n   \
    \     return .failure(txt.lowercased().filter { $0.isLetter }.enumerated().filter\
    \ { $0.offset % 2 == 0 }.count)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(split_words(txt: \"Hello world!\") == .success([\"Hello\", \"world!\"]))\n\
    assert(split_words(txt: \"Hello,world!\") == .success([\"Hello\", \"world!\"]))\n\
    assert(split_words(txt: \"Hello world,!\") == .success([\"Hello\", \"world,!\"\
    ]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\"\
    , \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\nassert(split_words(txt:\
    \ \"aaabb\") == .failure(2))\nassert(split_words(txt: \"aaaBb\") == .failure(1))\n\
    assert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmpusqqwafr/tmpusqqwafr.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abb3add8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abb3aacfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abb3aacf988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abb3aace7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpusqqwafr                        0x0000561cfd7e468b <unavailable> + 9867

    5    libc.so.6                          0x00002abb3afc4460 __libc_start_main +
    245

    6    tmpusqqwafr                        0x0000561cfd7e3a39 <unavailable> + 6713

    '
  stdout: ''
  timestamp: 1659820934
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    if let index = txt.firstIndex(of: \" \") {\n        return .success([String(txt[..<index]),\
    \ String(txt[index...])])\n    } else if let index = txt.firstIndex(of: \",\"\
    ) {\n        return .success([String(txt[..<index]), String(txt[index...])])\n\
    \    } else {\n        return .failure(txt.filter { $0.isLowercase }.count)\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(split_words(txt: \"Hello\
    \ world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt: \"\
    Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: Exception
  stderr: 'tmpffth4z2q/tmpffth4z2q.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b91fb572c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b91fb269b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b91fb269988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b91fb2687b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpffth4z2q                        0x000056514cfd0dec <unavailable> + 7660

    5    libc.so.6                          0x00002b91fb75e460 __libc_start_main +
    245

    6    tmpffth4z2q                        0x000056514cfd0929 <unavailable> + 6441

    '
  stdout: ''
  timestamp: 1659820935
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    if txt.contains(\" \") {\n        return .success(txt.split(separator:\
    \ \" \").map(String.init))\n    } else if txt.contains(\",\") {\n        return\
    \ .success(txt.split(separator: \",\").map(String.init))\n    } else {\n     \
    \   var count = 0\n        for char in txt {\n            if char.isLowercase\
    \ && (txt.firstIndex(of: char)!.encodedOffset % 2 == 1) {\n                count\
    \ += 1\n            }\n        }\n        return .failure(count)\n    }\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"\
    Hello\", \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmpjxdzmu5v/tmpjxdzmu5v.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1aca813c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1aca50ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1aca50a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1aca5097b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjxdzmu5v                        0x0000564ac31656e3 <unavailable> + 9955

    5    libc.so.6                          0x00002b1aca9ff460 __libc_start_main +
    245

    6    tmpjxdzmu5v                        0x0000564ac3164959 <unavailable> + 6489

    '
  stdout: ''
  timestamp: 1659820935
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    if let index = txt.firstIndex(of: \" \") {\n        return .success([String(txt[..<index]),\
    \ String(txt[index...])])\n    } else if let index = txt.firstIndex(of: \",\"\
    ) {\n        return .success([String(txt[..<index]), String(txt[index...])])\n\
    \    } else {\n        return .failure(txt.lowercased().filter { $0.isLetter }.enumerated().filter\
    \ { $0.offset % 2 == 0 }.count)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(split_words(txt: \"Hello world!\") == .success([\"Hello\", \"world!\"]))\n\
    assert(split_words(txt: \"Hello,world!\") == .success([\"Hello\", \"world!\"]))\n\
    assert(split_words(txt: \"Hello world,!\") == .success([\"Hello\", \"world,!\"\
    ]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\"\
    , \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\nassert(split_words(txt:\
    \ \"aaabb\") == .failure(2))\nassert(split_words(txt: \"aaaBb\") == .failure(1))\n\
    assert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmpc24a9e8h/tmpc24a9e8h.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4ac7018c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4ac6d0fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4ac6d0f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4ac6d0e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpc24a9e8h                        0x0000557120864fac <unavailable> + 8108

    5    libc.so.6                          0x00002b4ac7204460 __libc_start_main +
    245

    6    tmpc24a9e8h                        0x0000557120864ae9 <unavailable> + 6889

    '
  stdout: ''
  timestamp: 1659820935
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    let words = txt.split(separator: \" \")\n    if words.count > 1\
    \ {\n        return .success(words.map { String($0) })\n    }\n    let words2\
    \ = txt.split(separator: \",\")\n    if words2.count > 1 {\n        return .success(words2.map\
    \ { String($0) })\n    }\n    let chars = txt.lowercased().map { $0.asciiValue!\
    \ - 97 }\n    var count = 0\n    for i in 0..<chars.count {\n        if chars[i]\
    \ % 2 == 1 {\n            count += 1\n        }\n    }\n    return .failure(count)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"\
    Hello\", \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmpaht5r6yp/tmpaht5r6yp.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af0dda2ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af0dd721b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af0dd721988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af0dd7207b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpaht5r6yp                        0x000055b2aaae3733 <unavailable> + 10035

    5    libc.so.6                          0x00002af0ddc16460 __libc_start_main +
    245

    6    tmpaht5r6yp                        0x000055b2aaae29a9 <unavailable> + 6569

    '
  stdout: ''
  timestamp: 1659820935
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    if txt.contains(\" \") {\n        return .success(txt.split(separator:\
    \ \" \").map { String($0) })\n    } else if txt.contains(\",\") {\n        return\
    \ .success(txt.split(separator: \",\").map { String($0) })\n    } else {\n   \
    \     return .failure(txt.filter { $0.isLowercase }.count { $0.asciiValue! % 2\
    \ == 1 })\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(split_words(txt: \"\
    Hello world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmp0l52zj_s.swift:20:55: error: cannot call value of non-function\
    \ type 'Int'\n        return .failure(txt.filter { $0.isLowercase }.count { $0.asciiValue!\
    \ % 2 == 1 })\n                                                      ^\n"
  stdout: ''
  timestamp: 1659820935
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    if txt.contains(\" \") {\n        return .success(txt.split(separator:\
    \ \" \").map { String($0) })\n    } else if txt.contains(\",\") {\n        return\
    \ .success(txt.split(separator: \",\").map { String($0) })\n    } else {\n   \
    \     return .failure(txt.filter { $0.isLowercase }.count % 2)\n    }\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"\
    Hello\", \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmpzeai57gw/tmpzeai57gw.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab4d3bf4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab4d38ebb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab4d38eb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab4d38ea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzeai57gw                        0x0000560110f373e3 <unavailable> + 9187

    5    libc.so.6                          0x00002ab4d3de0460 __libc_start_main +
    245

    6    tmpzeai57gw                        0x0000560110f368c9 <unavailable> + 6345

    '
  stdout: ''
  timestamp: 1659820934
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    // TODO: Implement\n    return .failure(0)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"Hello\"\
    , \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmpes10xz_n/tmpes10xz_n.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b09df65ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b09df351b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b09df351988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b09df3507b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpes10xz_n                        0x0000558f08c0984c <unavailable> + 6220

    5    libc.so.6                          0x00002b09df846460 __libc_start_main +
    245

    6    tmpes10xz_n                        0x0000558f08c09389 <unavailable> + 5001

    '
  stdout: ''
  timestamp: 1659820935
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    if txt.contains(\" \") {\n        return .success(txt.split(separator:\
    \ \" \").map(String.init))\n    } else if txt.contains(\",\") {\n        return\
    \ .success(txt.split(separator: \",\").map(String.init))\n    } else {\n     \
    \   return .failure(txt.filter { $0.isLowercase }.count)\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"Hello\"\
    , \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmpo6lu2fh4/tmpo6lu2fh4.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abd14f6fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abd14c66b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abd14c66988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abd14c657b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpo6lu2fh4                        0x0000564d5c4aa343 <unavailable> + 9027

    5    libc.so.6                          0x00002abd1515b460 __libc_start_main +
    245

    6    tmpo6lu2fh4                        0x0000564d5c4a9829 <unavailable> + 6185

    '
  stdout: ''
  timestamp: 1659820934
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    if txt.contains(\" \") {\n        return .success(txt.split(separator:\
    \ \" \").map { String($0) })\n    } else if txt.contains(\",\") {\n        return\
    \ .success(txt.split(separator: \",\").map { String($0) })\n    } else {\n   \
    \     return .failure(txt.filter { $0.isLowercase }.count)\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"\
    Hello\", \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmpz4e6qyo4/tmpz4e6qyo4.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae1553e4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae1550dbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae1550db988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae1550da7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpz4e6qyo4                        0x0000563563aa3343 <unavailable> + 9027

    5    libc.so.6                          0x00002ae1555d0460 __libc_start_main +
    245

    6    tmpz4e6qyo4                        0x0000563563aa2829 <unavailable> + 6185

    '
  stdout: ''
  timestamp: 1659820934
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    if txt.contains(\" \") {\n        return .success(txt.split(separator:\
    \ \" \").map(String.init))\n    } else if txt.contains(\",\") {\n        return\
    \ .success(txt.split(separator: \",\").map(String.init))\n    } else {\n     \
    \   return .failure(txt.lowercased().filter { $0.isLetter }.enumerated().filter\
    \ { $0.offset % 2 == 1 }.count)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(split_words(txt: \"Hello world!\") == .success([\"Hello\", \"world!\"]))\n\
    assert(split_words(txt: \"Hello,world!\") == .success([\"Hello\", \"world!\"]))\n\
    assert(split_words(txt: \"Hello world,!\") == .success([\"Hello\", \"world,!\"\
    ]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\"\
    , \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\nassert(split_words(txt:\
    \ \"aaabb\") == .failure(2))\nassert(split_words(txt: \"aaaBb\") == .failure(1))\n\
    assert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmp2n9y10jj/tmp2n9y10jj.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba8ea195c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba8e9e8cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba8e9e8c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba8e9e8b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2n9y10jj                        0x000055f9c16017c3 <unavailable> + 10179

    5    libc.so.6                          0x00002ba8ea381460 __libc_start_main +
    245

    6    tmp2n9y10jj                        0x000055f9c1600a39 <unavailable> + 6713

    '
  stdout: ''
  timestamp: 1659820935
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    if txt.contains(\" \") {\n        return .success(txt.split(separator:\
    \ \" \").map { String($0) })\n    } else if txt.contains(\",\") {\n        return\
    \ .success(txt.split(separator: \",\").map { String($0) })\n    } else {\n   \
    \     return .failure(txt.filter { $0.isLowercase }.count % 2)\n    }\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"\
    Hello\", \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmpzeai57gw/tmpzeai57gw.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab4d3bf4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab4d38ebb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab4d38eb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab4d38ea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzeai57gw                        0x0000560110f373e3 <unavailable> + 9187

    5    libc.so.6                          0x00002ab4d3de0460 __libc_start_main +
    245

    6    tmpzeai57gw                        0x0000560110f368c9 <unavailable> + 6345

    '
  stdout: ''
  timestamp: 1659820934
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    let words = txt.split(separator: \" \")\n    if words.count > 1\
    \ {\n        return .success(words.map { String($0) })\n    }\n    let words2\
    \ = txt.split(separator: \",\")\n    if words2.count > 1 {\n        return .success(words2.map\
    \ { String($0) })\n    }\n    let count = txt.lowercased().filter { $0.isLetter\
    \ }.filter { $0.asciiValue! % 2 == 1 }.count\n    return .failure(count)\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"\
    Hello\", \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmpumqh2a1j/tmpumqh2a1j.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aeda7ff9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aeda7cf0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aeda7cf0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aeda7cef7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpumqh2a1j                        0x0000556b76b0a55b <unavailable> + 9563

    5    libc.so.6                          0x00002aeda81e5460 __libc_start_main +
    245

    6    tmpumqh2a1j                        0x0000556b76b09909 <unavailable> + 6409

    '
  stdout: ''
  timestamp: 1659820935
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    if txt.contains(\" \") {\n        return .success(txt.split(separator:\
    \ \" \").map { String($0) })\n    } else if txt.contains(\",\") {\n        return\
    \ .success(txt.split(separator: \",\").map { String($0) })\n    } else {\n   \
    \     return .failure(txt.filter { \"abcdefghijklmnopqrstuvwxyz\".contains($0)\
    \ }.filter { $0.asciiValue! % 2 == 1 }.count)\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(split_words(txt: \"Hello world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"Hello\"\
    , \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmp0oadtk02/tmp0oadtk02.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad734df0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad734ae7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad734ae7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad734ae67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0oadtk02                        0x000055bcd598251b <unavailable> + 9499

    5    libc.so.6                          0x00002ad734fdc460 __libc_start_main +
    245

    6    tmp0oadtk02                        0x000055bcd59818c9 <unavailable> + 6345

    '
  stdout: ''
  timestamp: 1659820935
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    if txt.contains(\" \") {\n        return .success(txt.split(separator:\
    \ \" \").map(String.init))\n    } else if txt.contains(\",\") {\n        return\
    \ .success(txt.split(separator: \",\").map(String.init))\n    } else {\n     \
    \   return .failure(txt.filter { $0.isLowercase }.count % 2)\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"\
    Hello\", \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmpbxnnr770/tmpbxnnr770.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0173aeec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b01737e5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b01737e5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b01737e47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbxnnr770                        0x0000564005c443e3 <unavailable> + 9187

    5    libc.so.6                          0x00002b0173cda460 __libc_start_main +
    245

    6    tmpbxnnr770                        0x0000564005c438c9 <unavailable> + 6345

    '
  stdout: ''
  timestamp: 1659820934
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    if txt.contains(\" \") {\n        return .success(txt.split(separator:\
    \ \" \").map(String.init))\n    } else if txt.contains(\",\") {\n        return\
    \ .success(txt.split(separator: \",\").map(String.init))\n    } else {\n     \
    \   return .failure(txt.filter { $0.isLowercase }.count)\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"Hello\"\
    , \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmpo6lu2fh4/tmpo6lu2fh4.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abd14f6fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abd14c66b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abd14c66988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abd14c657b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpo6lu2fh4                        0x0000564d5c4aa343 <unavailable> + 9027

    5    libc.so.6                          0x00002abd1515b460 __libc_start_main +
    245

    6    tmpo6lu2fh4                        0x0000564d5c4a9829 <unavailable> + 6185

    '
  stdout: ''
  timestamp: 1659820934
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    if txt.contains(\" \") {\n        return .success(txt.split(separator:\
    \ \" \").map { String($0) })\n    } else if txt.contains(\",\") {\n        return\
    \ .success(txt.split(separator: \",\").map { String($0) })\n    } else {\n   \
    \     return .failure(txt.lowercased().filter { $0.isLetter }.enumerated().filter\
    \ { $0.offset % 2 == 0 }.map { $0.element.asciiValue! - 97 }.reduce(0, +))\n \
    \   }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(split_words(txt: \"Hello\
    \ world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt: \"\
    Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmpwtnuxrey.swift:20:137: error: cannot convert value of type 'UInt8'\
    \ to closure result type 'Int'\n        return .failure(txt.lowercased().filter\
    \ { $0.isLetter }.enumerated().filter { $0.offset % 2 == 0 }.map { $0.element.asciiValue!\
    \ - 97 }.reduce(0, +))\n                                                     \
    \                                                            ~~~~~~~~~~~~~~~~~~~~~~~^~~~\n\
    \                                                                            \
    \                                     Int(                       )\n"
  stdout: ''
  timestamp: 1659820935
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    // TODO: Implement me!\n    return .failure(0)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"Hello\"\
    , \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmpetgn9bkh/tmpetgn9bkh.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abbecfe7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abbeccdeb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abbeccde988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abbeccdd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpetgn9bkh                        0x000055d17509b84c <unavailable> + 6220

    5    libc.so.6                          0x00002abbed1d3460 __libc_start_main +
    245

    6    tmpetgn9bkh                        0x000055d17509b389 <unavailable> + 5001

    '
  stdout: ''
  timestamp: 1659820935
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    if txt.contains(\" \") {\n        return .success(txt.split(separator:\
    \ \" \").map(String.init))\n    } else if txt.contains(\",\") {\n        return\
    \ .success(txt.split(separator: \",\").map(String.init))\n    } else {\n     \
    \   return .failure(txt.lowercased().filter { $0.isLetter }.enumerated().filter\
    \ { $0.offset % 2 == 1 }.count)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(split_words(txt: \"Hello world!\") == .success([\"Hello\", \"world!\"]))\n\
    assert(split_words(txt: \"Hello,world!\") == .success([\"Hello\", \"world!\"]))\n\
    assert(split_words(txt: \"Hello world,!\") == .success([\"Hello\", \"world,!\"\
    ]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\"\
    , \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\nassert(split_words(txt:\
    \ \"aaabb\") == .failure(2))\nassert(split_words(txt: \"aaaBb\") == .failure(1))\n\
    assert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmp2n9y10jj/tmp2n9y10jj.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba8ea195c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba8e9e8cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba8e9e8c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba8e9e8b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2n9y10jj                        0x000055f9c16017c3 <unavailable> + 10179

    5    libc.so.6                          0x00002ba8ea381460 __libc_start_main +
    245

    6    tmp2n9y10jj                        0x000055f9c1600a39 <unavailable> + 6713

    '
  stdout: ''
  timestamp: 1659820935
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    if txt.contains(\" \") {\n        return .success(txt.split(separator:\
    \ \" \").map(String.init))\n    } else if txt.contains(\",\") {\n        return\
    \ .success(txt.split(separator: \",\").map(String.init))\n    } else {\n     \
    \   return .failure(txt.lowercased().filter { $0.isLetter }.enumerated().filter\
    \ { $0.offset % 2 == 0 }.count)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(split_words(txt: \"Hello world!\") == .success([\"Hello\", \"world!\"]))\n\
    assert(split_words(txt: \"Hello,world!\") == .success([\"Hello\", \"world!\"]))\n\
    assert(split_words(txt: \"Hello world,!\") == .success([\"Hello\", \"world,!\"\
    ]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\"\
    , \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\nassert(split_words(txt:\
    \ \"aaabb\") == .failure(2))\nassert(split_words(txt: \"aaaBb\") == .failure(1))\n\
    assert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmpnx2rl_oi/tmpnx2rl_oi.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4006af5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b40067ecb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b40067ec988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b40067eb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnx2rl_oi                        0x000055ea31bee68b <unavailable> + 9867

    5    libc.so.6                          0x00002b4006ce1460 __libc_start_main +
    245

    6    tmpnx2rl_oi                        0x000055ea31beda39 <unavailable> + 6713

    '
  stdout: ''
  timestamp: 1659820934
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    if txt.contains(\" \") {\n        return .success(txt.split(separator:\
    \ \" \").map { String($0) })\n    } else if txt.contains(\",\") {\n        return\
    \ .success(txt.split(separator: \",\").map { String($0) })\n    } else {\n   \
    \     return .failure(txt.filter { $0.isLowercase }.count % 2)\n    }\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"\
    Hello\", \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmpzeai57gw/tmpzeai57gw.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab4d3bf4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab4d38ebb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab4d38eb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab4d38ea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzeai57gw                        0x0000560110f373e3 <unavailable> + 9187

    5    libc.so.6                          0x00002ab4d3de0460 __libc_start_main +
    245

    6    tmpzeai57gw                        0x0000560110f368c9 <unavailable> + 6345

    '
  stdout: ''
  timestamp: 1659820934
