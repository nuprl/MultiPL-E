language: swift
name: HumanEval_104_unique_digits
results:
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    return x.filter\
    \ { $0.digits.allSatisfy { $0.isOdd } }.sorted()\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmp142zorus.swift:11:26: error: value of type 'Int' has no member\
    \ 'digits'\n    return x.filter { $0.digits.allSatisfy { $0.isOdd } }.sorted()\n\
    \                      ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824309
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    for i in x {\n        if !has_even_digit(x: i) {\n            result.append(i)\n\
    \        }\n    }\n    return result.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpwhzlqgex.swift:13:13: error: cannot find 'has_even_digit' in scope\n\
    \        if !has_even_digit(x: i) {\n            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824309
- exit_code: 0
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    for i in x {\n        if i.description.filter({$0.isNumber && $0.wholeNumberValue!\
    \ % 2 != 0}).count == i.description.count {\n            result.append(i)\n  \
    \      }\n    }\n    return result.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824310
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    for number in x {\n        if !has_even_digit(number: number) {\n       \
    \     result.append(number)\n        }\n    }\n    return result.sorted()\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpzj8h5jfk.swift:13:13: error: cannot find 'has_even_digit' in scope\n\
    \        if !has_even_digit(number: number) {\n            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824309
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result: [Int]\
    \ = []\n    for i in x {\n        if !has_even_digit(x: i) {\n            result.append(i)\n\
    \        }\n    }\n    return result.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpkhl2zgww.swift:13:13: error: cannot find 'has_even_digit' in scope\n\
    \        if !has_even_digit(x: i) {\n            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824309
- exit_code: 0
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    for i in x {\n        var is_even = false\n        var num = i\n        while\
    \ num > 0 {\n            if num % 10 % 2 == 0 {\n                is_even = true\n\
    \                break\n            }\n            num /= 10\n        }\n    \
    \    if !is_even {\n            result.append(i)\n        }\n    }\n    return\
    \ result.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(unique_digits(x: [15,\
    \ 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422, 10])\
    \ == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111, 151])\n\
    assert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824310
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    for i in x {\n        if !has_even_digit(x: i) {\n            result.append(i)\n\
    \        }\n    }\n    return result.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpwhzlqgex.swift:13:13: error: cannot find 'has_even_digit' in scope\n\
    \        if !has_even_digit(x: i) {\n            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824309
- exit_code: 0
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    for i in x {\n        if i.description.contains(\"2\") || i.description.contains(\"\
    4\") || i.description.contains(\"6\") || i.description.contains(\"8\") || i.description.contains(\"\
    0\") {\n            continue\n        } else {\n            result.append(i)\n\
    \        }\n    }\n    return result.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824310
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    return x.filter\
    \ { $0.digits.allSatisfy { $0.isOdd } }.sorted()\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmp142zorus.swift:11:26: error: value of type 'Int' has no member\
    \ 'digits'\n    return x.filter { $0.digits.allSatisfy { $0.isOdd } }.sorted()\n\
    \                      ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824309
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result: [Int]\
    \ = []\n    for i in x {\n        if !has_even_digit(x: i) {\n            result.append(i)\n\
    \        }\n    }\n    return result.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpkhl2zgww.swift:13:13: error: cannot find 'has_even_digit' in scope\n\
    \        if !has_even_digit(x: i) {\n            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824309
- exit_code: 0
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result: [Int]\
    \ = []\n    for i in x {\n        var is_even = false\n        var number = i\n\
    \        while number > 0 {\n            if number % 10 % 2 == 0 {\n         \
    \       is_even = true\n                break\n            }\n            number\
    \ /= 10\n        }\n        if !is_even {\n            result.append(i)\n    \
    \    }\n    }\n    return result.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824310
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    for i in x {\n        if !has_even_digit(x: i) {\n            result.append(i)\n\
    \        }\n    }\n    return result.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpwhzlqgex.swift:13:13: error: cannot find 'has_even_digit' in scope\n\
    \        if !has_even_digit(x: i) {\n            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824309
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    for num in x {\n        if !has_even_digit(num: num) {\n            result.append(num)\n\
    \        }\n    }\n    return result.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpubkvvsmr.swift:13:13: error: cannot find 'has_even_digit' in scope\n\
    \        if !has_even_digit(num: num) {\n            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824309
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result: [Int]\
    \ = []\n    for i in x {\n        if !has_even_digit(x: i) {\n            result.append(i)\n\
    \        }\n    }\n    return result.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpkhl2zgww.swift:13:13: error: cannot find 'has_even_digit' in scope\n\
    \        if !has_even_digit(x: i) {\n            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824309
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    for number in x {\n        if !has_even_digit(number: number) {\n       \
    \     result.append(number)\n        }\n    }\n    return result.sorted()\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpzj8h5jfk.swift:13:13: error: cannot find 'has_even_digit' in scope\n\
    \        if !has_even_digit(number: number) {\n            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824309
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    for i in x {\n        if !i.hasEvenDigit() {\n            result.append(i)\n\
    \        }\n    }\n    return result.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmp6hgmtrd5.swift:13:15: error: value of type 'Int' has no member\
    \ 'hasEvenDigit'\n        if !i.hasEvenDigit() {\n            ~ ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824309
- exit_code: -4
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    return x.filter\
    \ {\n        var num = $0\n        while num > 0 {\n            if num % 2 ==\
    \ 0 {\n                return false\n            }\n            num /= 10\n  \
    \      }\n        return true\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpfps3cfgl/tmpfps3cfgl.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6b9c723c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6b9c41ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6b9c41a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6b9c4197b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfps3cfgl                        0x0000557a3ae0d52c <unavailable> + 5420

    5    libc.so.6                          0x00002b6b9c90f460 __libc_start_main +
    245

    6    tmpfps3cfgl                        0x0000557a3ae0d129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659824310
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    return x.filter\
    \ { $0.digits.allSatisfy { $0.isOdd } }.sorted()\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmp142zorus.swift:11:26: error: value of type 'Int' has no member\
    \ 'digits'\n    return x.filter { $0.digits.allSatisfy { $0.isOdd } }.sorted()\n\
    \                      ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824309
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result: [Int]\
    \ = []\n    for i in x {\n        if i.digits.filter({ $0 % 2 == 0 }).count ==\
    \ 0 {\n            result.append(i)\n        }\n    }\n    return result.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmppyyd95oh.swift:13:14: error: value of type 'Int' has no member\
    \ 'digits'\n        if i.digits.filter({ $0 % 2 == 0 }).count == 0 {\n       \
    \    ~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824310
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    for i in x {\n        if !i.hasEvenDigit() {\n            result.append(i)\n\
    \        }\n    }\n    return result.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmp6hgmtrd5.swift:13:15: error: value of type 'Int' has no member\
    \ 'hasEvenDigit'\n        if !i.hasEvenDigit() {\n            ~ ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824309
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    for i in x {\n        if i.description.filter({$0.isEven}).count == 0 {\n\
    \            result.append(i)\n        }\n    }\n    return result.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpf7y7fxbr.swift:13:37: error: value of type 'String.Element' (aka\
    \ 'Character') has no member 'isEven'\n        if i.description.filter({$0.isEven}).count\
    \ == 0 {\n                                 ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824309
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    for i in x {\n        if !has_even_digit(x: i) {\n            result.append(i)\n\
    \        }\n    }\n    return result.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpwhzlqgex.swift:13:13: error: cannot find 'has_even_digit' in scope\n\
    \        if !has_even_digit(x: i) {\n            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824309
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    for number in x {\n        if !has_even_digit(number: number) {\n       \
    \     result.append(number)\n        }\n    }\n    return result.sorted()\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpzj8h5jfk.swift:13:13: error: cannot find 'has_even_digit' in scope\n\
    \        if !has_even_digit(number: number) {\n            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824309
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    for i in x {\n        if !has_even_digit(i) {\n            result.append(i)\n\
    \        }\n    }\n    return result.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpue_qssmj.swift:13:13: error: cannot find 'has_even_digit' in scope\n\
    \        if !has_even_digit(i) {\n            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824309
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    for i in x {\n        if !i.hasEvenDigit() {\n            result.append(i)\n\
    \        }\n    }\n    return result.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmp6hgmtrd5.swift:13:15: error: value of type 'Int' has no member\
    \ 'hasEvenDigit'\n        if !i.hasEvenDigit() {\n            ~ ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824309
- exit_code: -4
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    for i in x {\n        if !i.description.contains(\"2\") && !i.description.contains(\"\
    4\") && !i.description.contains(\"6\") && !i.description.contains(\"8\") {\n \
    \           result.append(i)\n        }\n    }\n    return result.sorted()\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: Exception
  stderr: 'tmppxqnkkl4/tmppxqnkkl4.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8e7779bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8e77492b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8e77492988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8e774917b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppxqnkkl4                        0x000055a17df5a9e4 <unavailable> + 6628

    5    libc.so.6                          0x00002b8e77987460 __libc_start_main +
    245

    6    tmppxqnkkl4                        0x000055a17df5a4d9 <unavailable> + 5337

    '
  stdout: ''
  timestamp: 1659824310
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    return x.filter\
    \ { $0.digits.allSatisfy { $0.isOdd } }.sorted()\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmp142zorus.swift:11:26: error: value of type 'Int' has no member\
    \ 'digits'\n    return x.filter { $0.digits.allSatisfy { $0.isOdd } }.sorted()\n\
    \                      ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824309
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    for i in x {\n        if !has_even_digit(x: i) {\n            result.append(i)\n\
    \        }\n    }\n    return result.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpwhzlqgex.swift:13:13: error: cannot find 'has_even_digit' in scope\n\
    \        if !has_even_digit(x: i) {\n            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824309
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    return x.filter\
    \ { $0.digits.allSatisfy { $0.isOdd } }.sorted()\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmp142zorus.swift:11:26: error: value of type 'Int' has no member\
    \ 'digits'\n    return x.filter { $0.digits.allSatisfy { $0.isOdd } }.sorted()\n\
    \                      ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824309
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    return x.filter\
    \ { $0.digits.allSatisfy { $0.isOdd } }.sorted()\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmp142zorus.swift:11:26: error: value of type 'Int' has no member\
    \ 'digits'\n    return x.filter { $0.digits.allSatisfy { $0.isOdd } }.sorted()\n\
    \                      ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824309
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result: [Int]\
    \ = []\n    for i in x {\n        if !i.hasEvenDigit() {\n            result.append(i)\n\
    \        }\n    }\n    return result.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpojo6qx09.swift:13:15: error: value of type 'Int' has no member\
    \ 'hasEvenDigit'\n        if !i.hasEvenDigit() {\n            ~ ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824309
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    return x.filter\
    \ { $0.digits.allSatisfy { $0.isOdd } }.sorted()\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmp142zorus.swift:11:26: error: value of type 'Int' has no member\
    \ 'digits'\n    return x.filter { $0.digits.allSatisfy { $0.isOdd } }.sorted()\n\
    \                      ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824309
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    for i in x {\n        if !i.hasEvenDigit() {\n            result.append(i)\n\
    \        }\n    }\n    return result.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmp6hgmtrd5.swift:13:15: error: value of type 'Int' has no member\
    \ 'hasEvenDigit'\n        if !i.hasEvenDigit() {\n            ~ ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824309
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    for i in x {\n        if !has_even_digit(x: i) {\n            result.append(i)\n\
    \        }\n    }\n    return result.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpwhzlqgex.swift:13:13: error: cannot find 'has_even_digit' in scope\n\
    \        if !has_even_digit(x: i) {\n            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824309
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    for i in x {\n        if !i.hasEvenDigit() {\n            result.append(i)\n\
    \        }\n    }\n    return result.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmp6hgmtrd5.swift:13:15: error: value of type 'Int' has no member\
    \ 'hasEvenDigit'\n        if !i.hasEvenDigit() {\n            ~ ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824309
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result: [Int]\
    \ = []\n    for i in x {\n        if !i.has_even_digit() {\n            result.append(i)\n\
    \        }\n    }\n    return result.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpf3d2umgo.swift:13:15: error: value of type 'Int' has no member\
    \ 'has_even_digit'\n        if !i.has_even_digit() {\n            ~ ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824309
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    for i in x {\n        if !i.hasEvenDigit() {\n            result.append(i)\n\
    \        }\n    }\n    return result.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmp6hgmtrd5.swift:13:15: error: value of type 'Int' has no member\
    \ 'hasEvenDigit'\n        if !i.hasEvenDigit() {\n            ~ ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824309
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    for i in x {\n        if !has_even_digit(x: i) {\n            result.append(i)\n\
    \        }\n    }\n    return result.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpwhzlqgex.swift:13:13: error: cannot find 'has_even_digit' in scope\n\
    \        if !has_even_digit(x: i) {\n            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824309
- exit_code: 0
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result: [Int]\
    \ = []\n    for i in x {\n        if i.description.contains(\"2\") || i.description.contains(\"\
    4\") || i.description.contains(\"6\") || i.description.contains(\"8\") || i.description.contains(\"\
    0\") {\n            continue\n        } else {\n            result.append(i)\n\
    \        }\n    }\n    return result.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824310
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    for i in x {\n        if i.description.filter({$0.isEven}).count == 0 {\n\
    \            result.append(i)\n        }\n    }\n    return result.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpf7y7fxbr.swift:13:37: error: value of type 'String.Element' (aka\
    \ 'Character') has no member 'isEven'\n        if i.description.filter({$0.isEven}).count\
    \ == 0 {\n                                 ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824309
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result: [Int]\
    \ = []\n    for i in x {\n        if !has_even_digit(x: i) {\n            result.append(i)\n\
    \        }\n    }\n    return result.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpkhl2zgww.swift:13:13: error: cannot find 'has_even_digit' in scope\n\
    \        if !has_even_digit(x: i) {\n            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824309
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    for i in x {\n        if !has_even_digit(x: i) {\n            result.append(i)\n\
    \        }\n    }\n    return result.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpwhzlqgex.swift:13:13: error: cannot find 'has_even_digit' in scope\n\
    \        if !has_even_digit(x: i) {\n            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824309
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    return x.filter\
    \ { $0.digits.allSatisfy { $0.isOdd } }.sorted()\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmp142zorus.swift:11:26: error: value of type 'Int' has no member\
    \ 'digits'\n    return x.filter { $0.digits.allSatisfy { $0.isOdd } }.sorted()\n\
    \                      ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824309
- exit_code: -4
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result: [Int]\
    \ = []\n    for i in x {\n        if i.description.contains(\"2\") || i.description.contains(\"\
    4\") || i.description.contains(\"6\") || i.description.contains(\"8\") {\n   \
    \         continue\n        } else {\n            result.append(i)\n        }\n\
    \    }\n    return result.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpp9tuurlt/tmpp9tuurlt.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af3615cac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af3612c1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af3612c1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af3612c07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp9tuurlt                        0x00005646005c0984 <unavailable> + 6532

    5    libc.so.6                          0x00002af3617b6460 __libc_start_main +
    245

    6    tmpp9tuurlt                        0x00005646005c0479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1659824310
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    return x.filter\
    \ { $0.digits.allSatisfy { $0.isOdd } }.sorted()\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmp142zorus.swift:11:26: error: value of type 'Int' has no member\
    \ 'digits'\n    return x.filter { $0.digits.allSatisfy { $0.isOdd } }.sorted()\n\
    \                      ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824309
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    return x.filter\
    \ { $0.digits.allSatisfy { $0.isOdd } }.sorted()\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmp142zorus.swift:11:26: error: value of type 'Int' has no member\
    \ 'digits'\n    return x.filter { $0.digits.allSatisfy { $0.isOdd } }.sorted()\n\
    \                      ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824309
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    for num in x {\n        if !has_even_digit(num: num) {\n            result.append(num)\n\
    \        }\n    }\n    return result.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpubkvvsmr.swift:13:13: error: cannot find 'has_even_digit' in scope\n\
    \        if !has_even_digit(num: num) {\n            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824309
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    for i in x {\n        if i.digits.filter({$0 % 2 == 0}).count == 0 {\n  \
    \          result.append(i)\n        }\n    }\n    return result.sorted()\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmp0xgh6re1.swift:13:14: error: value of type 'Int' has no member\
    \ 'digits'\n        if i.digits.filter({$0 % 2 == 0}).count == 0 {\n         \
    \  ~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824310
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    for num in x {\n        if !has_even_digit(num: num) {\n            result.append(num)\n\
    \        }\n    }\n    return result.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpubkvvsmr.swift:13:13: error: cannot find 'has_even_digit' in scope\n\
    \        if !has_even_digit(num: num) {\n            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824309
- exit_code: 0
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var uniqueDigitsArray:\
    \ [Int] = []\n    for i in x {\n        if i.description.contains(\"2\") || i.description.contains(\"\
    4\") || i.description.contains(\"6\") || i.description.contains(\"8\") || i.description.contains(\"\
    0\") {\n            continue\n        } else {\n            uniqueDigitsArray.append(i)\n\
    \        }\n    }\n    return uniqueDigitsArray.sorted()\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\n\
    assert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824310
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result: [Int]\
    \ = []\n    for i in x {\n        if !i.hasEvenDigit() {\n            result.append(i)\n\
    \        }\n    }\n    return result.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpojo6qx09.swift:13:15: error: value of type 'Int' has no member\
    \ 'hasEvenDigit'\n        if !i.hasEvenDigit() {\n            ~ ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824309
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    return x.filter\
    \ { $0.digits.allSatisfy { $0.isOdd } }.sorted()\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmp142zorus.swift:11:26: error: value of type 'Int' has no member\
    \ 'digits'\n    return x.filter { $0.digits.allSatisfy { $0.isOdd } }.sorted()\n\
    \                      ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824309
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    for num in x {\n        if !has_even_digit(num: num) {\n            result.append(num)\n\
    \        }\n    }\n    return result.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpubkvvsmr.swift:13:13: error: cannot find 'has_even_digit' in scope\n\
    \        if !has_even_digit(num: num) {\n            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824309
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    return x.filter\
    \ { $0.digits.allSatisfy { $0.isOdd } }.sorted()\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmp142zorus.swift:11:26: error: value of type 'Int' has no member\
    \ 'digits'\n    return x.filter { $0.digits.allSatisfy { $0.isOdd } }.sorted()\n\
    \                      ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824309
- exit_code: -4
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    for i in x {\n        if !i.description.contains(\"2\") && !i.description.contains(\"\
    4\") && !i.description.contains(\"6\") && !i.description.contains(\"8\") {\n \
    \           result.append(i)\n        }\n    }\n    return result.sorted()\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: Exception
  stderr: 'tmppxqnkkl4/tmppxqnkkl4.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8e7779bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8e77492b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8e77492988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8e774917b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppxqnkkl4                        0x000055a17df5a9e4 <unavailable> + 6628

    5    libc.so.6                          0x00002b8e77987460 __libc_start_main +
    245

    6    tmppxqnkkl4                        0x000055a17df5a4d9 <unavailable> + 5337

    '
  stdout: ''
  timestamp: 1659824310
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    for i in x {\n        if !has_even_digit(x: i) {\n            result.append(i)\n\
    \        }\n    }\n    return result.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpwhzlqgex.swift:13:13: error: cannot find 'has_even_digit' in scope\n\
    \        if !has_even_digit(x: i) {\n            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824309
- exit_code: 0
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    for i in x {\n        var hasEven = false\n        var num = i\n        while\
    \ num > 0 {\n            if num % 2 == 0 {\n                hasEven = true\n \
    \               break\n            }\n            num /= 10\n        }\n     \
    \   if !hasEven {\n            result.append(i)\n        }\n    }\n    return\
    \ result.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(unique_digits(x: [15,\
    \ 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422, 10])\
    \ == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111, 151])\n\
    assert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824310
- exit_code: -4
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result: [Int]\
    \ = []\n    for i in x {\n        if !i.description.contains(\"2\") && !i.description.contains(\"\
    4\") && !i.description.contains(\"6\") && !i.description.contains(\"8\") {\n \
    \           result.append(i)\n        }\n    }\n    return result.sorted()\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpl2_l_zql/tmpl2_l_zql.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba89a62ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba89a321b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba89a321988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba89a3207b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpl2_l_zql                        0x000055831f287984 <unavailable> + 6532

    5    libc.so.6                          0x00002ba89a816460 __libc_start_main +
    245

    6    tmpl2_l_zql                        0x000055831f287479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1659824310
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    return x.filter\
    \ { $0.digits.allSatisfy { $0.isOdd } }.sorted()\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmp142zorus.swift:11:26: error: value of type 'Int' has no member\
    \ 'digits'\n    return x.filter { $0.digits.allSatisfy { $0.isOdd } }.sorted()\n\
    \                      ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824309
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result: [Int]\
    \ = []\n    for i in x {\n        if !has_even_digit(x: i) {\n            result.append(i)\n\
    \        }\n    }\n    return result.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpkhl2zgww.swift:13:13: error: cannot find 'has_even_digit' in scope\n\
    \        if !has_even_digit(x: i) {\n            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824309
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    for i in x {\n        if !i.hasEvenDigit() {\n            result.append(i)\n\
    \        }\n    }\n    return result.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmp6hgmtrd5.swift:13:15: error: value of type 'Int' has no member\
    \ 'hasEvenDigit'\n        if !i.hasEvenDigit() {\n            ~ ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824309
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    return x.filter\
    \ { $0.hasUniqueDigits() }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(unique_digits(x:\
    \ [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422,\
    \ 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111,\
    \ 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmp9x3axer_.swift:11:26: error: value of type 'Int' has no member\
    \ 'hasUniqueDigits'\n    return x.filter { $0.hasUniqueDigits() }\n          \
    \            ~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824310
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    for num in x {\n        if !has_even_digit(num: num) {\n            result.append(num)\n\
    \        }\n    }\n    return result.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpubkvvsmr.swift:13:13: error: cannot find 'has_even_digit' in scope\n\
    \        if !has_even_digit(num: num) {\n            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824309
- exit_code: -4
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    for i in x {\n        if i.description.contains(\"2\") || i.description.contains(\"\
    4\") || i.description.contains(\"6\") || i.description.contains(\"8\") {\n   \
    \         continue\n        } else {\n            result.append(i)\n        }\n\
    \    }\n    return result.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpglmoy71h/tmpglmoy71h.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aebbab60c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aebba857b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aebba857988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aebba8567b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpglmoy71h                        0x0000557dabe8d9e4 <unavailable> + 6628

    5    libc.so.6                          0x00002aebbad4c460 __libc_start_main +
    245

    6    tmpglmoy71h                        0x0000557dabe8d4d9 <unavailable> + 5337

    '
  stdout: ''
  timestamp: 1659824310
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    for i in x {\n        if i.description.filter({$0.isEven}).count == 0 {\n\
    \            result.append(i)\n        }\n    }\n    return result.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpf7y7fxbr.swift:13:37: error: value of type 'String.Element' (aka\
    \ 'Character') has no member 'isEven'\n        if i.description.filter({$0.isEven}).count\
    \ == 0 {\n                                 ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824309
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    return x.filter\
    \ { $0.digits.allSatisfy { $0.isOdd } }.sorted()\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmp142zorus.swift:11:26: error: value of type 'Int' has no member\
    \ 'digits'\n    return x.filter { $0.digits.allSatisfy { $0.isOdd } }.sorted()\n\
    \                      ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824309
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    for num in x {\n        if !has_even_digit(num: num) {\n            result.append(num)\n\
    \        }\n    }\n    return result.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpubkvvsmr.swift:13:13: error: cannot find 'has_even_digit' in scope\n\
    \        if !has_even_digit(num: num) {\n            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824309
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    return x.filter\
    \ { $0.digits.allSatisfy { $0.isOdd } }.sorted()\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmp142zorus.swift:11:26: error: value of type 'Int' has no member\
    \ 'digits'\n    return x.filter { $0.digits.allSatisfy { $0.isOdd } }.sorted()\n\
    \                      ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824309
- exit_code: 0
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result: [Int]\
    \ = []\n    for i in x {\n        var hasEvenDigit = false\n        var num =\
    \ i\n        while num > 0 {\n            if num % 2 == 0 {\n                hasEvenDigit\
    \ = true\n                break\n            }\n            num /= 10\n      \
    \  }\n        if !hasEvenDigit {\n            result.append(i)\n        }\n  \
    \  }\n    return result.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(unique_digits(x:\
    \ [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422,\
    \ 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111,\
    \ 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824310
- exit_code: 0
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result: [Int]\
    \ = []\n    for i in x {\n        var isEven = false\n        var temp = i\n \
    \       while temp > 0 {\n            if temp % 10 % 2 == 0 {\n              \
    \  isEven = true\n                break\n            }\n            temp /= 10\n\
    \        }\n        if !isEven {\n            result.append(i)\n        }\n  \
    \  }\n    return result.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(unique_digits(x:\
    \ [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422,\
    \ 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111,\
    \ 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824310
- exit_code: -4
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    for i in x {\n        if !i.description.contains(\"2\") && !i.description.contains(\"\
    4\") && !i.description.contains(\"6\") && !i.description.contains(\"8\") {\n \
    \           result.append(i)\n        }\n    }\n    return result.sorted()\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: Exception
  stderr: 'tmppxqnkkl4/tmppxqnkkl4.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8e7779bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8e77492b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8e77492988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8e774917b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppxqnkkl4                        0x000055a17df5a9e4 <unavailable> + 6628

    5    libc.so.6                          0x00002b8e77987460 __libc_start_main +
    245

    6    tmppxqnkkl4                        0x000055a17df5a4d9 <unavailable> + 5337

    '
  stdout: ''
  timestamp: 1659824310
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    return x.filter\
    \ { $0.digits.allSatisfy { $0.isOdd } }.sorted()\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmp142zorus.swift:11:26: error: value of type 'Int' has no member\
    \ 'digits'\n    return x.filter { $0.digits.allSatisfy { $0.isOdd } }.sorted()\n\
    \                      ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824309
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    return x.filter\
    \ { $0.digits.allSatisfy { $0.isOdd } }.sorted()\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmp142zorus.swift:11:26: error: value of type 'Int' has no member\
    \ 'digits'\n    return x.filter { $0.digits.allSatisfy { $0.isOdd } }.sorted()\n\
    \                      ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824309
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result: [Int]\
    \ = []\n    for i in x {\n        if !has_even_digit(x: i) {\n            result.append(i)\n\
    \        }\n    }\n    return result.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpkhl2zgww.swift:13:13: error: cannot find 'has_even_digit' in scope\n\
    \        if !has_even_digit(x: i) {\n            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824309
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    for i in x {\n        if i.digits.filter({$0 % 2 == 0}).count == 0 {\n  \
    \          result.append(i)\n        }\n    }\n    return result.sorted()\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmp0xgh6re1.swift:13:14: error: value of type 'Int' has no member\
    \ 'digits'\n        if i.digits.filter({$0 % 2 == 0}).count == 0 {\n         \
    \  ~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824310
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result: [Int]\
    \ = []\n    for i in x {\n        if !contains_even_digit(x: i) {\n          \
    \  result.append(i)\n        }\n    }\n    return result.sorted()\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmp7h5bkdy9.swift:13:13: error: cannot find 'contains_even_digit'\
    \ in scope\n        if !contains_even_digit(x: i) {\n            ^~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824310
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    for i in x {\n        if !i.hasEvenDigit() {\n            result.append(i)\n\
    \        }\n    }\n    return result.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmp6hgmtrd5.swift:13:15: error: value of type 'Int' has no member\
    \ 'hasEvenDigit'\n        if !i.hasEvenDigit() {\n            ~ ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824309
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    for i in x {\n        if !has_even_digit(x: i) {\n            result.append(i)\n\
    \        }\n    }\n    return result.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpwhzlqgex.swift:13:13: error: cannot find 'has_even_digit' in scope\n\
    \        if !has_even_digit(x: i) {\n            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824309
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    return x.filter\
    \ { $0.digits.filter { $0.isEven }.isEmpty }.sorted()\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmp5cgfpq_3.swift:11:26: error: value of type 'Int' has no member\
    \ 'digits'\n    return x.filter { $0.digits.filter { $0.isEven }.isEmpty }.sorted()\n\
    \                      ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824310
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    for i in x {\n        if !has_even_digit(x: i) {\n            result.append(i)\n\
    \        }\n    }\n    return result.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpwhzlqgex.swift:13:13: error: cannot find 'has_even_digit' in scope\n\
    \        if !has_even_digit(x: i) {\n            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824309
- exit_code: -4
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result: [Int]\
    \ = []\n    for i in x {\n        if !i.description.contains(\"2\") && !i.description.contains(\"\
    4\") && !i.description.contains(\"6\") && !i.description.contains(\"8\") {\n \
    \           result.append(i)\n        }\n    }\n    return result.sorted()\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpl2_l_zql/tmpl2_l_zql.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba89a62ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba89a321b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba89a321988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba89a3207b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpl2_l_zql                        0x000055831f287984 <unavailable> + 6532

    5    libc.so.6                          0x00002ba89a816460 __libc_start_main +
    245

    6    tmpl2_l_zql                        0x000055831f287479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1659824310
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    return x.filter\
    \ { $0.hasUniqueDigits() }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(unique_digits(x:\
    \ [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422,\
    \ 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111,\
    \ 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmp9x3axer_.swift:11:26: error: value of type 'Int' has no member\
    \ 'hasUniqueDigits'\n    return x.filter { $0.hasUniqueDigits() }\n          \
    \            ~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824310
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    for num in x {\n        if num.digits.filter({ $0 % 2 == 0 }).count == 0\
    \ {\n            result.append(num)\n        }\n    }\n    return result.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpcauda1db.swift:13:16: error: value of type 'Int' has no member\
    \ 'digits'\n        if num.digits.filter({ $0 % 2 == 0 }).count == 0 {\n     \
    \      ~~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824310
- exit_code: 0
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    for i in x {\n        var isEven = false\n        var num = i\n        while\
    \ num > 0 {\n            if num % 10 % 2 == 0 {\n                isEven = true\n\
    \                break\n            }\n            num /= 10\n        }\n    \
    \    if !isEven {\n            result.append(i)\n        }\n    }\n    return\
    \ result.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(unique_digits(x: [15,\
    \ 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422, 10])\
    \ == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111, 151])\n\
    assert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824310
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    for i in x {\n        if !has_even_digit(x: i) {\n            result.append(i)\n\
    \        }\n    }\n    return result.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpwhzlqgex.swift:13:13: error: cannot find 'has_even_digit' in scope\n\
    \        if !has_even_digit(x: i) {\n            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824309
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    return x.filter\
    \ { $0.hasUniqueDigits() }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(unique_digits(x:\
    \ [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422,\
    \ 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111,\
    \ 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmp9x3axer_.swift:11:26: error: value of type 'Int' has no member\
    \ 'hasUniqueDigits'\n    return x.filter { $0.hasUniqueDigits() }\n          \
    \            ~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824310
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    return x.filter\
    \ { $0.isUniqueDigits }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(unique_digits(x:\
    \ [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422,\
    \ 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111,\
    \ 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpxkeyspw2.swift:11:26: error: value of type 'Int' has no member\
    \ 'isUniqueDigits'\n    return x.filter { $0.isUniqueDigits }\n              \
    \        ~~ ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824310
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    for num in x {\n        if !has_even_digit(x: num) {\n            result.append(num)\n\
    \        }\n    }\n    return result.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpdve81in_.swift:13:13: error: cannot find 'has_even_digit' in scope\n\
    \        if !has_even_digit(x: num) {\n            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824310
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    for i in x {\n        if !i.hasEvenDigit() {\n            result.append(i)\n\
    \        }\n    }\n    return result.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmp6hgmtrd5.swift:13:15: error: value of type 'Int' has no member\
    \ 'hasEvenDigit'\n        if !i.hasEvenDigit() {\n            ~ ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824309
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    for num in x {\n        if !has_even_digit(num: num) {\n            result.append(num)\n\
    \        }\n    }\n    return result.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpubkvvsmr.swift:13:13: error: cannot find 'has_even_digit' in scope\n\
    \        if !has_even_digit(num: num) {\n            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824309
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    for i in x {\n        if i.description.filter({$0.isEven()}).count == 0 {\n\
    \            result.append(i)\n        }\n    }\n    return result.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmp0u7ej2t6.swift:13:37: error: value of type 'String.Element' (aka\
    \ 'Character') has no member 'isEven'\n        if i.description.filter({$0.isEven()}).count\
    \ == 0 {\n                                 ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824310
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result: [Int]\
    \ = []\n    for num in x {\n        if !has_even_digit(num: num) {\n         \
    \   result.append(num)\n        }\n    }\n    return result.sorted()\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpqxa7gw6_.swift:13:13: error: cannot find 'has_even_digit' in scope\n\
    \        if !has_even_digit(num: num) {\n            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824310
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    for number in x {\n        if !has_even_digit(number: number) {\n       \
    \     result.append(number)\n        }\n    }\n    return result.sorted()\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpzj8h5jfk.swift:13:13: error: cannot find 'has_even_digit' in scope\n\
    \        if !has_even_digit(number: number) {\n            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824309
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    for i in x {\n        if i.description.filter({$0.isEven}).count == 0 {\n\
    \            result.append(i)\n        }\n    }\n    return result.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpf7y7fxbr.swift:13:37: error: value of type 'String.Element' (aka\
    \ 'Character') has no member 'isEven'\n        if i.description.filter({$0.isEven}).count\
    \ == 0 {\n                                 ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824309
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    return x.filter\
    \ { $0.hasUniqueDigits() }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(unique_digits(x:\
    \ [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422,\
    \ 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111,\
    \ 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmp9x3axer_.swift:11:26: error: value of type 'Int' has no member\
    \ 'hasUniqueDigits'\n    return x.filter { $0.hasUniqueDigits() }\n          \
    \            ~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824310
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    return x.filter\
    \ { $0.digits.filter { $0.isEven }.isEmpty }.sorted()\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmp5cgfpq_3.swift:11:26: error: value of type 'Int' has no member\
    \ 'digits'\n    return x.filter { $0.digits.filter { $0.isEven }.isEmpty }.sorted()\n\
    \                      ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824310
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result: [Int]\
    \ = []\n    for number in x {\n        if !number.hasEvenDigit() {\n         \
    \   result.append(number)\n        }\n    }\n    return result.sorted()\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpu_smzflm.swift:13:20: error: value of type 'Int' has no member\
    \ 'hasEvenDigit'\n        if !number.hasEvenDigit() {\n            ~~~~~~ ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824310
- exit_code: -4
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    for i in x {\n        if !i.description.contains(\"2\") && !i.description.contains(\"\
    4\") && !i.description.contains(\"6\") && !i.description.contains(\"8\") {\n \
    \           result.append(i)\n        }\n    }\n    return result.sorted()\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: Exception
  stderr: 'tmppxqnkkl4/tmppxqnkkl4.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8e7779bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8e77492b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8e77492988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8e774917b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppxqnkkl4                        0x000055a17df5a9e4 <unavailable> + 6628

    5    libc.so.6                          0x00002b8e77987460 __libc_start_main +
    245

    6    tmppxqnkkl4                        0x000055a17df5a4d9 <unavailable> + 5337

    '
  stdout: ''
  timestamp: 1659824310
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    for num in x {\n        if !has_even_digit(num: num) {\n            result.append(num)\n\
    \        }\n    }\n    return result.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpubkvvsmr.swift:13:13: error: cannot find 'has_even_digit' in scope\n\
    \        if !has_even_digit(num: num) {\n            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824309
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result: [Int]\
    \ = []\n    for i in x {\n        if !has_even_digit(x: i) {\n            result.append(i)\n\
    \        }\n    }\n    return result.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpkhl2zgww.swift:13:13: error: cannot find 'has_even_digit' in scope\n\
    \        if !has_even_digit(x: i) {\n            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824309
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result: [Int]\
    \ = []\n    for i in x {\n        if !has_even_digit(x: i) {\n            result.append(i)\n\
    \        }\n    }\n    return result.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpkhl2zgww.swift:13:13: error: cannot find 'has_even_digit' in scope\n\
    \        if !has_even_digit(x: i) {\n            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824309
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    for number in x {\n        if !has_even_digit(number: number) {\n       \
    \     result.append(number)\n        }\n    }\n    return result.sorted()\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpzj8h5jfk.swift:13:13: error: cannot find 'has_even_digit' in scope\n\
    \        if !has_even_digit(number: number) {\n            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824309
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    for i in x {\n        if !contains_even_digit(x: i) {\n            result.append(i)\n\
    \        }\n    }\n    return result.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpxky3_qaq.swift:13:13: error: cannot find 'contains_even_digit'\
    \ in scope\n        if !contains_even_digit(x: i) {\n            ^~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824310
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    for i in x {\n        if !is_even_digit(x: i) {\n            result.append(i)\n\
    \        }\n    }\n    return result.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmph6x8x5u_.swift:13:13: error: cannot find 'is_even_digit' in scope\n\
    \        if !is_even_digit(x: i) {\n            ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824310
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result: [Int]\
    \ = []\n    for i in x {\n        if !has_even_digit(i) {\n            result.append(i)\n\
    \        }\n    }\n    return result.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmp6jlu6vz9.swift:13:13: error: cannot find 'has_even_digit' in scope\n\
    \        if !has_even_digit(i) {\n            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824310
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    for i in x {\n        if !has_even_digit(x: i) {\n            result.append(i)\n\
    \        }\n    }\n    return result.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpwhzlqgex.swift:13:13: error: cannot find 'has_even_digit' in scope\n\
    \        if !has_even_digit(x: i) {\n            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824309
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    for i in x {\n        if !i.hasEvenDigit() {\n            result.append(i)\n\
    \        }\n    }\n    return result.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmp6hgmtrd5.swift:13:15: error: value of type 'Int' has no member\
    \ 'hasEvenDigit'\n        if !i.hasEvenDigit() {\n            ~ ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824309
- exit_code: -4
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    for i in x {\n        if String(i).contains(\"2\") || String(i).contains(\"\
    4\") || String(i).contains(\"6\") || String(i).contains(\"8\") || String(i).contains(\"\
    0\") {\n            continue\n        } else {\n            result.append(i)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmp8w8mwo8n/tmp8w8mwo8n.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b080c004c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b080bcfbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b080bcfb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b080bcfa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8w8mwo8n                        0x0000560368bd485c <unavailable> + 6236

    5    libc.so.6                          0x00002b080c1f0460 __libc_start_main +
    245

    6    tmp8w8mwo8n                        0x0000560368bd4459 <unavailable> + 5209

    '
  stdout: ''
  timestamp: 1659824310
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    for i in x {\n        if String(i).filter({ $0.isEven() }).count == 0 {\n\
    \            result.append(i)\n        }\n    }\n    return result.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpksizyxxm.swift:13:34: error: value of type 'String.Element' (aka\
    \ 'Character') has no member 'isEven'\n        if String(i).filter({ $0.isEven()\
    \ }).count == 0 {\n                              ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824310
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result: [Int]\
    \ = []\n    for num in x {\n        if !has_even_digit(num: num) {\n         \
    \   result.append(num)\n        }\n    }\n    return result.sorted()\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpqxa7gw6_.swift:13:13: error: cannot find 'has_even_digit' in scope\n\
    \        if !has_even_digit(num: num) {\n            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824310
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    return x.filter\
    \ {\n        $0.description.filter { $0.isEven }.isEmpty\n    }.sorted()\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmphkeh552h.swift:12:36: error: value of type 'String.Element' (aka\
    \ 'Character') has no member 'isEven'\n        $0.description.filter { $0.isEven\
    \ }.isEmpty\n                                ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824310
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    for num in x {\n        if !has_even_digit(num: num) {\n            result.append(num)\n\
    \        }\n    }\n    return result.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpubkvvsmr.swift:13:13: error: cannot find 'has_even_digit' in scope\n\
    \        if !has_even_digit(num: num) {\n            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824309
- exit_code: -4
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result: [Int]\
    \ = []\n    for i in x {\n        if !i.description.contains(\"2\") && !i.description.contains(\"\
    4\") && !i.description.contains(\"6\") && !i.description.contains(\"8\") {\n \
    \           result.append(i)\n        }\n    }\n    return result.sorted()\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpl2_l_zql/tmpl2_l_zql.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba89a62ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba89a321b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba89a321988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba89a3207b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpl2_l_zql                        0x000055831f287984 <unavailable> + 6532

    5    libc.so.6                          0x00002ba89a816460 __libc_start_main +
    245

    6    tmpl2_l_zql                        0x000055831f287479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1659824310
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    for i in x {\n        if !has_even_digit(x: i) {\n            result.append(i)\n\
    \        }\n    }\n    return result.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpwhzlqgex.swift:13:13: error: cannot find 'has_even_digit' in scope\n\
    \        if !has_even_digit(x: i) {\n            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824309
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    for i in x {\n        if !has_even_digit(i) {\n            result.append(i)\n\
    \        }\n    }\n    return result.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpue_qssmj.swift:13:13: error: cannot find 'has_even_digit' in scope\n\
    \        if !has_even_digit(i) {\n            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824309
- exit_code: -4
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result: [Int]\
    \ = []\n    for i in x {\n        if !i.description.contains(\"2\") && !i.description.contains(\"\
    4\") && !i.description.contains(\"6\") && !i.description.contains(\"8\") {\n \
    \           result.append(i)\n        }\n    }\n    return result.sorted()\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpl2_l_zql/tmpl2_l_zql.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba89a62ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba89a321b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba89a321988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba89a3207b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpl2_l_zql                        0x000055831f287984 <unavailable> + 6532

    5    libc.so.6                          0x00002ba89a816460 __libc_start_main +
    245

    6    tmpl2_l_zql                        0x000055831f287479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1659824310
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    for number in x {\n        if !has_even_digit(number: number) {\n       \
    \     result.append(number)\n        }\n    }\n    return result.sorted()\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpzj8h5jfk.swift:13:13: error: cannot find 'has_even_digit' in scope\n\
    \        if !has_even_digit(number: number) {\n            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824309
- exit_code: -4
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    for i in x {\n        if !i.description.contains(\"2\") && !i.description.contains(\"\
    4\") && !i.description.contains(\"6\") && !i.description.contains(\"8\") {\n \
    \           result.append(i)\n        }\n    }\n    return result.sorted()\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: Exception
  stderr: 'tmppxqnkkl4/tmppxqnkkl4.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8e7779bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8e77492b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8e77492988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8e774917b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppxqnkkl4                        0x000055a17df5a9e4 <unavailable> + 6628

    5    libc.so.6                          0x00002b8e77987460 __libc_start_main +
    245

    6    tmppxqnkkl4                        0x000055a17df5a4d9 <unavailable> + 5337

    '
  stdout: ''
  timestamp: 1659824310
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    for num in x {\n        if !has_even_digit(num: num) {\n            result.append(num)\n\
    \        }\n    }\n    return result.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpubkvvsmr.swift:13:13: error: cannot find 'has_even_digit' in scope\n\
    \        if !has_even_digit(num: num) {\n            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824309
- exit_code: 0
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    return x.filter\
    \ {\n        $0.description.filter {\n            Int(String($0))! % 2 == 0\n\
    \        }.isEmpty\n    }.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824310
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    for num in x {\n        if !has_even_digit(num: num) {\n            result.append(num)\n\
    \        }\n    }\n    return result.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpubkvvsmr.swift:13:13: error: cannot find 'has_even_digit' in scope\n\
    \        if !has_even_digit(num: num) {\n            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824309
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    for i in x {\n        if i.description.filter({$0.isEven()}).count == 0 {\n\
    \            result.append(i)\n        }\n    }\n    return result.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmp0u7ej2t6.swift:13:37: error: value of type 'String.Element' (aka\
    \ 'Character') has no member 'isEven'\n        if i.description.filter({$0.isEven()}).count\
    \ == 0 {\n                                 ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824310
- exit_code: 0
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result: [Int]\
    \ = []\n    for i in x {\n        if i.description.contains(\"2\") || i.description.contains(\"\
    4\") || i.description.contains(\"6\") || i.description.contains(\"8\") || i.description.contains(\"\
    0\") {\n            continue\n        } else {\n            result.append(i)\n\
    \        }\n    }\n    return result.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824310
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    for num in x {\n        if !has_even_digit(num: num) {\n            result.append(num)\n\
    \        }\n    }\n    return result.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpubkvvsmr.swift:13:13: error: cannot find 'has_even_digit' in scope\n\
    \        if !has_even_digit(num: num) {\n            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824309
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result: [Int]\
    \ = []\n    for num in x {\n        if !has_even_digit(num: num) {\n         \
    \   result.append(num)\n        }\n    }\n    return result.sorted()\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpqxa7gw6_.swift:13:13: error: cannot find 'has_even_digit' in scope\n\
    \        if !has_even_digit(num: num) {\n            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824310
- exit_code: -4
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    for i in x {\n        if !i.description.contains(\"2\") && !i.description.contains(\"\
    4\") && !i.description.contains(\"6\") && !i.description.contains(\"8\") {\n \
    \           result.append(i)\n        }\n    }\n    return result.sorted()\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: Exception
  stderr: 'tmppxqnkkl4/tmppxqnkkl4.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8e7779bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8e77492b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8e77492988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8e774917b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppxqnkkl4                        0x000055a17df5a9e4 <unavailable> + 6628

    5    libc.so.6                          0x00002b8e77987460 __libc_start_main +
    245

    6    tmppxqnkkl4                        0x000055a17df5a4d9 <unavailable> + 5337

    '
  stdout: ''
  timestamp: 1659824310
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result: [Int]\
    \ = []\n    for i in x {\n        if !has_even_digit(x: i) {\n            result.append(i)\n\
    \        }\n    }\n    return result.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpkhl2zgww.swift:13:13: error: cannot find 'has_even_digit' in scope\n\
    \        if !has_even_digit(x: i) {\n            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824309
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result: [Int]\
    \ = []\n    for num in x {\n        if !has_even_digit(num: num) {\n         \
    \   result.append(num)\n        }\n    }\n    return result.sorted()\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpqxa7gw6_.swift:13:13: error: cannot find 'has_even_digit' in scope\n\
    \        if !has_even_digit(num: num) {\n            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824310
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    return x.filter\
    \ {\n        $0.description.filter { $0.isEven }.isEmpty\n    }.sorted()\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmphkeh552h.swift:12:36: error: value of type 'String.Element' (aka\
    \ 'Character') has no member 'isEven'\n        $0.description.filter { $0.isEven\
    \ }.isEmpty\n                                ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824310
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result: [Int]\
    \ = []\n    for num in x {\n        if !has_even_digit(x: num) {\n           \
    \ result.append(num)\n        }\n    }\n    return result.sorted()\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpnb710pq6.swift:13:13: error: cannot find 'has_even_digit' in scope\n\
    \        if !has_even_digit(x: num) {\n            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824310
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result: [Int]\
    \ = []\n    for i in x {\n        if !is_even_digit(x: i) {\n            result.append(i)\n\
    \        }\n    }\n    return result.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmp25xszndo.swift:13:13: error: cannot find 'is_even_digit' in scope\n\
    \        if !is_even_digit(x: i) {\n            ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824310
- exit_code: 0
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result: [Int]\
    \ = []\n    for i in x {\n        if i.description.contains(\"2\") || i.description.contains(\"\
    4\") || i.description.contains(\"6\") || i.description.contains(\"8\") || i.description.contains(\"\
    0\") {\n            continue\n        } else {\n            result.append(i)\n\
    \        }\n    }\n    return result.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824310
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    return x.filter\
    \ { $0.digits.allSatisfy { $0.isOdd } }.sorted()\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmp142zorus.swift:11:26: error: value of type 'Int' has no member\
    \ 'digits'\n    return x.filter { $0.digits.allSatisfy { $0.isOdd } }.sorted()\n\
    \                      ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824309
- exit_code: -4
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    for i in x {\n        if i.description.contains(\"2\") || i.description.contains(\"\
    4\") || i.description.contains(\"6\") || i.description.contains(\"8\") {\n   \
    \         continue\n        } else {\n            result.append(i)\n        }\n\
    \    }\n    return result.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpglmoy71h/tmpglmoy71h.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aebbab60c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aebba857b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aebba857988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aebba8567b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpglmoy71h                        0x0000557dabe8d9e4 <unavailable> + 6628

    5    libc.so.6                          0x00002aebbad4c460 __libc_start_main +
    245

    6    tmpglmoy71h                        0x0000557dabe8d4d9 <unavailable> + 5337

    '
  stdout: ''
  timestamp: 1659824310
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    for i in x {\n        if !has_even_digit(x: i) {\n            result.append(i)\n\
    \        }\n    }\n    return result.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpwhzlqgex.swift:13:13: error: cannot find 'has_even_digit' in scope\n\
    \        if !has_even_digit(x: i) {\n            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824309
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result: [Int]\
    \ = []\n    for number in x {\n        if !has_even_digit(x: number) {\n     \
    \       result.append(number)\n        }\n    }\n    return result.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpd4jwfbh1.swift:13:13: error: cannot find 'has_even_digit' in scope\n\
    \        if !has_even_digit(x: number) {\n            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824310
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    return x.filter\
    \ { $0.digits.filter { $0.isEven }.isEmpty }.sorted()\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmp5cgfpq_3.swift:11:26: error: value of type 'Int' has no member\
    \ 'digits'\n    return x.filter { $0.digits.filter { $0.isEven }.isEmpty }.sorted()\n\
    \                      ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824310
- exit_code: -4
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result: [Int]\
    \ = []\n    for i in x {\n        if i.description.contains(\"2\") || i.description.contains(\"\
    4\") || i.description.contains(\"6\") || i.description.contains(\"8\") {\n   \
    \         continue\n        } else {\n            result.append(i)\n        }\n\
    \    }\n    return result.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpp9tuurlt/tmpp9tuurlt.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af3615cac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af3612c1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af3612c1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af3612c07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp9tuurlt                        0x00005646005c0984 <unavailable> + 6532

    5    libc.so.6                          0x00002af3617b6460 __libc_start_main +
    245

    6    tmpp9tuurlt                        0x00005646005c0479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1659824310
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    for i in x {\n        if i.description.filter({$0.isEven()}).count == 0 {\n\
    \            result.append(i)\n        }\n    }\n    return result.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmp0u7ej2t6.swift:13:37: error: value of type 'String.Element' (aka\
    \ 'Character') has no member 'isEven'\n        if i.description.filter({$0.isEven()}).count\
    \ == 0 {\n                                 ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824310
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    return x.filter\
    \ { $0.digits.filter { $0.isEven }.isEmpty }.sorted()\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmp5cgfpq_3.swift:11:26: error: value of type 'Int' has no member\
    \ 'digits'\n    return x.filter { $0.digits.filter { $0.isEven }.isEmpty }.sorted()\n\
    \                      ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824310
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result: [Int]\
    \ = []\n    for number in x {\n        if !has_even_digit(number: number) {\n\
    \            result.append(number)\n        }\n    }\n    return result.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpffejwf1l.swift:13:13: error: cannot find 'has_even_digit' in scope\n\
    \        if !has_even_digit(number: number) {\n            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824310
- exit_code: -4
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    for i in x {\n        if !i.description.contains(\"2\") && !i.description.contains(\"\
    4\") && !i.description.contains(\"6\") && !i.description.contains(\"8\") {\n \
    \           result.append(i)\n        }\n    }\n    return result.sorted()\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: Exception
  stderr: 'tmppxqnkkl4/tmppxqnkkl4.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8e7779bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8e77492b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8e77492988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8e774917b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppxqnkkl4                        0x000055a17df5a9e4 <unavailable> + 6628

    5    libc.so.6                          0x00002b8e77987460 __libc_start_main +
    245

    6    tmppxqnkkl4                        0x000055a17df5a4d9 <unavailable> + 5337

    '
  stdout: ''
  timestamp: 1659824310
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result: [Int]\
    \ = []\n    for num in x {\n        if !has_even_digit(num: num) {\n         \
    \   result.append(num)\n        }\n    }\n    return result.sorted()\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpqxa7gw6_.swift:13:13: error: cannot find 'has_even_digit' in scope\n\
    \        if !has_even_digit(num: num) {\n            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824310
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    for number in x {\n        if !has_even_digit(number: number) {\n       \
    \     result.append(number)\n        }\n    }\n    return result.sorted()\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpzj8h5jfk.swift:13:13: error: cannot find 'has_even_digit' in scope\n\
    \        if !has_even_digit(number: number) {\n            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824309
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    for i in x {\n        if !has_even_digit(x: i) {\n            result.append(i)\n\
    \        }\n    }\n    return result.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpwhzlqgex.swift:13:13: error: cannot find 'has_even_digit' in scope\n\
    \        if !has_even_digit(x: i) {\n            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824309
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result: [Int]\
    \ = []\n    for number in x {\n        if !has_even_digit(x: number) {\n     \
    \       result.append(number)\n        }\n    }\n    return result.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpd4jwfbh1.swift:13:13: error: cannot find 'has_even_digit' in scope\n\
    \        if !has_even_digit(x: number) {\n            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824310
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    for num in x {\n        if !has_even_digit(num: num) {\n            result.append(num)\n\
    \        }\n    }\n    return result.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpubkvvsmr.swift:13:13: error: cannot find 'has_even_digit' in scope\n\
    \        if !has_even_digit(num: num) {\n            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824309
- exit_code: 0
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result: [Int]\
    \ = []\n    for i in x {\n        var temp = i\n        var flag = true\n    \
    \    while temp > 0 {\n            if temp % 10 % 2 == 0 {\n                flag\
    \ = false\n                break\n            }\n            temp /= 10\n    \
    \    }\n        if flag {\n            result.append(i)\n        }\n    }\n  \
    \  return result.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(unique_digits(x:\
    \ [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422,\
    \ 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111,\
    \ 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824310
- exit_code: -4
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result: [Int]\
    \ = []\n    for i in x {\n        if !i.description.contains(\"2\") && !i.description.contains(\"\
    4\") && !i.description.contains(\"6\") && !i.description.contains(\"8\") {\n \
    \           result.append(i)\n        }\n    }\n    return result.sorted()\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpl2_l_zql/tmpl2_l_zql.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba89a62ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba89a321b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba89a321988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba89a3207b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpl2_l_zql                        0x000055831f287984 <unavailable> + 6532

    5    libc.so.6                          0x00002ba89a816460 __libc_start_main +
    245

    6    tmpl2_l_zql                        0x000055831f287479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1659824310
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    for i in x {\n        if !has_even_digit(x: i) {\n            result.append(i)\n\
    \        }\n    }\n    return result.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpwhzlqgex.swift:13:13: error: cannot find 'has_even_digit' in scope\n\
    \        if !has_even_digit(x: i) {\n            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824309
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    for i in x {\n        if !has_even_digit(i) {\n            result.append(i)\n\
    \        }\n    }\n    return result.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpue_qssmj.swift:13:13: error: cannot find 'has_even_digit' in scope\n\
    \        if !has_even_digit(i) {\n            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824309
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result: [Int]\
    \ = []\n    for num in x {\n        if !has_even_digit(num: num) {\n         \
    \   result.append(num)\n        }\n    }\n    return result.sorted()\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpqxa7gw6_.swift:13:13: error: cannot find 'has_even_digit' in scope\n\
    \        if !has_even_digit(num: num) {\n            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824310
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    for i in x {\n        if i.digits.contains(where: { $0 % 2 == 0 }) {\n  \
    \          continue\n        }\n        result.append(i)\n    }\n    return result.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpgkj1bnzv.swift:13:14: error: value of type 'Int' has no member\
    \ 'digits'\n        if i.digits.contains(where: { $0 % 2 == 0 }) {\n         \
    \  ~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824310
- exit_code: 0
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    for i in x {\n        var hasEvenDigit = false\n        var num = i\n   \
    \     while num > 0 {\n            if num % 2 == 0 {\n                hasEvenDigit\
    \ = true\n                break\n            }\n            num /= 10\n      \
    \  }\n        if !hasEvenDigit {\n            result.append(i)\n        }\n  \
    \  }\n    return result.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(unique_digits(x:\
    \ [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422,\
    \ 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111,\
    \ 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824310
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    for i in x {\n        if !has_even_digit(x: i) {\n            result.append(i)\n\
    \        }\n    }\n    return result.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpwhzlqgex.swift:13:13: error: cannot find 'has_even_digit' in scope\n\
    \        if !has_even_digit(x: i) {\n            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824309
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    for i in x {\n        if !has_even_digit(x: i) {\n            result.append(i)\n\
    \        }\n    }\n    return result.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpwhzlqgex.swift:13:13: error: cannot find 'has_even_digit' in scope\n\
    \        if !has_even_digit(x: i) {\n            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824309
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    for i in x {\n        if !i.hasEvenDigit() {\n            result.append(i)\n\
    \        }\n    }\n    return result.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmp6hgmtrd5.swift:13:15: error: value of type 'Int' has no member\
    \ 'hasEvenDigit'\n        if !i.hasEvenDigit() {\n            ~ ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824309
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    return x.filter\
    \ { $0.digits.allSatisfy { $0.isOdd } }.sorted()\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmp142zorus.swift:11:26: error: value of type 'Int' has no member\
    \ 'digits'\n    return x.filter { $0.digits.allSatisfy { $0.isOdd } }.sorted()\n\
    \                      ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824309
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    for i in x {\n        if String(i).filter({$0.isEven()}).count == 0 {\n \
    \           result.append(i)\n        }\n    }\n    return result.sorted()\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpd9fv44qo.swift:13:33: error: value of type 'String.Element' (aka\
    \ 'Character') has no member 'isEven'\n        if String(i).filter({$0.isEven()}).count\
    \ == 0 {\n                             ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824310
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result: [Int]\
    \ = []\n    for i in x {\n        if !has_even_digit(x: i) {\n            result.append(i)\n\
    \        }\n    }\n    return result.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpkhl2zgww.swift:13:13: error: cannot find 'has_even_digit' in scope\n\
    \        if !has_even_digit(x: i) {\n            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824309
- exit_code: 0
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    for i in x {\n        var flag = true\n        for j in String(i) {\n   \
    \         if j.wholeNumberValue! % 2 == 0 {\n                flag = false\n  \
    \              break\n            }\n        }\n        if flag {\n          \
    \  result.append(i)\n        }\n    }\n    return result.sorted()\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824310
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    for i in x {\n        if !has_even_digit(i) {\n            result.append(i)\n\
    \        }\n    }\n    return result.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpue_qssmj.swift:13:13: error: cannot find 'has_even_digit' in scope\n\
    \        if !has_even_digit(i) {\n            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824309
- exit_code: 0
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    for i in x {\n        var hasEven = false\n        var num = i\n        while\
    \ num > 0 {\n            if num % 2 == 0 {\n                hasEven = true\n \
    \               break\n            }\n            num /= 10\n        }\n     \
    \   if !hasEven {\n            result.append(i)\n        }\n    }\n    return\
    \ result.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(unique_digits(x: [15,\
    \ 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422, 10])\
    \ == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111, 151])\n\
    assert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824310
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    for number in x {\n        if !has_even_digit(number: number) {\n       \
    \     result.append(number)\n        }\n    }\n    return result.sorted()\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpzj8h5jfk.swift:13:13: error: cannot find 'has_even_digit' in scope\n\
    \        if !has_even_digit(number: number) {\n            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824309
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    for i in x {\n        if i.description.filter({ $0.isEven }).count == 0 {\n\
    \            result.append(i)\n        }\n    }\n    return result.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmph4r0dsi6.swift:13:38: error: value of type 'String.Element' (aka\
    \ 'Character') has no member 'isEven'\n        if i.description.filter({ $0.isEven\
    \ }).count == 0 {\n                                  ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824310
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    return x.filter\
    \ { $0.digits.allSatisfy { $0.isOdd } }.sorted()\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmp142zorus.swift:11:26: error: value of type 'Int' has no member\
    \ 'digits'\n    return x.filter { $0.digits.allSatisfy { $0.isOdd } }.sorted()\n\
    \                      ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824309
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    for number in x {\n        if !has_even_digit(number: number) {\n       \
    \     result.append(number)\n        }\n    }\n    return result.sorted()\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpzj8h5jfk.swift:13:13: error: cannot find 'has_even_digit' in scope\n\
    \        if !has_even_digit(number: number) {\n            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824309
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    for num in x {\n        if !has_even_digit(num: num) {\n            result.append(num)\n\
    \        }\n    }\n    return result.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpubkvvsmr.swift:13:13: error: cannot find 'has_even_digit' in scope\n\
    \        if !has_even_digit(num: num) {\n            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824309
- exit_code: 0
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    return x.filter\
    \ {\n        $0.description.filter {\n            Int(String($0))! % 2 == 0\n\
    \        }.isEmpty\n    }.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824310
- exit_code: -4
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result: [Int]\
    \ = []\n    for i in x {\n        if String(i).contains(\"2\") || String(i).contains(\"\
    4\") || String(i).contains(\"6\") || String(i).contains(\"8\") {\n           \
    \ continue\n        } else {\n            result.append(i)\n        }\n    }\n\
    \    return result.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(unique_digits(x:\
    \ [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422,\
    \ 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111,\
    \ 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmp7t607u07/tmp7t607u07.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9f63c32c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9f63929b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9f63929988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9f639287b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7t607u07                        0x000055eb09b0e9b4 <unavailable> + 6580

    5    libc.so.6                          0x00002b9f63e1e460 __libc_start_main +
    245

    6    tmp7t607u07                        0x000055eb09b0e4a9 <unavailable> + 5289

    '
  stdout: ''
  timestamp: 1659824310
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    for number in x {\n        if !has_even_digit(number: number) {\n       \
    \     result.append(number)\n        }\n    }\n    return result.sorted()\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpzj8h5jfk.swift:13:13: error: cannot find 'has_even_digit' in scope\n\
    \        if !has_even_digit(number: number) {\n            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824309
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    for i in x {\n        if i.digits.contains(where: { $0 % 2 == 0 }) {\n  \
    \          continue\n        }\n        result.append(i)\n    }\n    return result.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpgkj1bnzv.swift:13:14: error: value of type 'Int' has no member\
    \ 'digits'\n        if i.digits.contains(where: { $0 % 2 == 0 }) {\n         \
    \  ~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824310
- exit_code: 0
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    for i in x {\n        if !i.description.contains(\"2\") && !i.description.contains(\"\
    4\") && !i.description.contains(\"6\") && !i.description.contains(\"8\") && !i.description.contains(\"\
    0\") {\n            result.append(i)\n        }\n    }\n    return result.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824310
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    for i in x {\n        if i.digits.contains(where: { $0 % 2 == 0 }) {\n  \
    \          continue\n        }\n        result.append(i)\n    }\n    return result.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpgkj1bnzv.swift:13:14: error: value of type 'Int' has no member\
    \ 'digits'\n        if i.digits.contains(where: { $0 % 2 == 0 }) {\n         \
    \  ~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824310
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    for i in x {\n        if !has_even_digit(x: i) {\n            result.append(i)\n\
    \        }\n    }\n    return result.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpwhzlqgex.swift:13:13: error: cannot find 'has_even_digit' in scope\n\
    \        if !has_even_digit(x: i) {\n            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824309
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    return x.filter{$0.hasUniqueDigits()}.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmplf4pbuot.swift:11:24: error: value of type 'Int' has no member\
    \ 'hasUniqueDigits'\n    return x.filter{$0.hasUniqueDigits()}.sorted()\n    \
    \                ~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824310
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result: [Int]\
    \ = []\n    for i in x {\n        if !has_even_digit(x: i) {\n            result.append(i)\n\
    \        }\n    }\n    return result.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpkhl2zgww.swift:13:13: error: cannot find 'has_even_digit' in scope\n\
    \        if !has_even_digit(x: i) {\n            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824309
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    return x.filter\
    \ { $0.digits.allSatisfy { $0.isOdd } }.sorted()\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmp142zorus.swift:11:26: error: value of type 'Int' has no member\
    \ 'digits'\n    return x.filter { $0.digits.allSatisfy { $0.isOdd } }.sorted()\n\
    \                      ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824309
- exit_code: -4
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    return x.filter\
    \ { (num) -> Bool in\n        var num = num\n        while num > 0 {\n       \
    \     if num % 2 == 0 {\n                return false\n            }\n       \
    \     num /= 10\n        }\n        return true\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpsper_fn2/tmpsper_fn2.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6adc684c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6adc37bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6adc37b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6adc37a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsper_fn2                        0x000056409ef4152c <unavailable> + 5420

    5    libc.so.6                          0x00002b6adc870460 __libc_start_main +
    245

    6    tmpsper_fn2                        0x000056409ef41129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659824310
- exit_code: -4
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    return x.filter\
    \ {\n        var num = $0\n        while num > 0 {\n            if num % 2 ==\
    \ 0 {\n                return false\n            }\n            num /= 10\n  \
    \      }\n        return true\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpfps3cfgl/tmpfps3cfgl.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6b9c723c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6b9c41ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6b9c41a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6b9c4197b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfps3cfgl                        0x0000557a3ae0d52c <unavailable> + 5420

    5    libc.so.6                          0x00002b6b9c90f460 __libc_start_main +
    245

    6    tmpfps3cfgl                        0x0000557a3ae0d129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659824310
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    return x.filter\
    \ { $0.hasUniqueDigits() }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(unique_digits(x:\
    \ [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422,\
    \ 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111,\
    \ 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmp9x3axer_.swift:11:26: error: value of type 'Int' has no member\
    \ 'hasUniqueDigits'\n    return x.filter { $0.hasUniqueDigits() }\n          \
    \            ~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824310
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    for num in x {\n        if !has_even_digit(num: num) {\n            result.append(num)\n\
    \        }\n    }\n    return result.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpubkvvsmr.swift:13:13: error: cannot find 'has_even_digit' in scope\n\
    \        if !has_even_digit(num: num) {\n            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824309
- exit_code: -4
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    for i in x {\n        if !i.description.contains(\"2\") && !i.description.contains(\"\
    4\") && !i.description.contains(\"6\") && !i.description.contains(\"8\") {\n \
    \           result.append(i)\n        }\n    }\n    return result.sorted()\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: Exception
  stderr: 'tmppxqnkkl4/tmppxqnkkl4.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8e7779bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8e77492b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8e77492988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8e774917b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppxqnkkl4                        0x000055a17df5a9e4 <unavailable> + 6628

    5    libc.so.6                          0x00002b8e77987460 __libc_start_main +
    245

    6    tmppxqnkkl4                        0x000055a17df5a4d9 <unavailable> + 5337

    '
  stdout: ''
  timestamp: 1659824310
- exit_code: 0
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    for i in x {\n        var hasEven = false\n        var num = i\n        while\
    \ num > 0 {\n            if num % 2 == 0 {\n                hasEven = true\n \
    \               break\n            }\n            num /= 10\n        }\n     \
    \   if !hasEven {\n            result.append(i)\n        }\n    }\n    return\
    \ result.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(unique_digits(x: [15,\
    \ 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422, 10])\
    \ == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111, 151])\n\
    assert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824310
- exit_code: -4
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    for i in x {\n        if !String(i).contains(\"2\") && !String(i).contains(\"\
    4\") && !String(i).contains(\"6\") && !String(i).contains(\"8\") && !String(i).contains(\"\
    0\") {\n            result.append(i)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: Exception
  stderr: 'tmp9088u9m1/tmp9088u9m1.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acf05a09c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acf05700b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acf05700988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acf056ff7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9088u9m1                        0x00005649cacc885c <unavailable> + 6236

    5    libc.so.6                          0x00002acf05bf5460 __libc_start_main +
    245

    6    tmp9088u9m1                        0x00005649cacc8459 <unavailable> + 5209

    '
  stdout: ''
  timestamp: 1659824310
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    for num in x {\n        if !has_even_digit(num: num) {\n            result.append(num)\n\
    \        }\n    }\n    return result.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpubkvvsmr.swift:13:13: error: cannot find 'has_even_digit' in scope\n\
    \        if !has_even_digit(num: num) {\n            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824309
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    return x.filter\
    \ { $0.digits.allSatisfy { $0.isOdd } }.sorted()\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmp142zorus.swift:11:26: error: value of type 'Int' has no member\
    \ 'digits'\n    return x.filter { $0.digits.allSatisfy { $0.isOdd } }.sorted()\n\
    \                      ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824309
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    return x.filter\
    \ { $0.digits.allSatisfy { $0.isOdd } }.sorted()\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmp142zorus.swift:11:26: error: value of type 'Int' has no member\
    \ 'digits'\n    return x.filter { $0.digits.allSatisfy { $0.isOdd } }.sorted()\n\
    \                      ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824309
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    return x.filter({$0.hasUniqueDigits()}).sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmp6c3w5vi1.swift:11:25: error: value of type 'Int' has no member\
    \ 'hasUniqueDigits'\n    return x.filter({$0.hasUniqueDigits()}).sorted()\n  \
    \                   ~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824310
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    for i in x {\n        if !i.hasEvenDigit() {\n            result.append(i)\n\
    \        }\n    }\n    return result.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmp6hgmtrd5.swift:13:15: error: value of type 'Int' has no member\
    \ 'hasEvenDigit'\n        if !i.hasEvenDigit() {\n            ~ ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824309
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    for i in x {\n        if !has_even_digit(x: i) {\n            result.append(i)\n\
    \        }\n    }\n    return result.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpwhzlqgex.swift:13:13: error: cannot find 'has_even_digit' in scope\n\
    \        if !has_even_digit(x: i) {\n            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824309
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result: [Int]\
    \ = []\n    for i in x {\n        if !has_even_digit(x: i) {\n            result.append(i)\n\
    \        }\n    }\n    return result.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpkhl2zgww.swift:13:13: error: cannot find 'has_even_digit' in scope\n\
    \        if !has_even_digit(x: i) {\n            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824309
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    for i in x {\n        if !has_even_digit(x: i) {\n            result.append(i)\n\
    \        }\n    }\n    return result.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpwhzlqgex.swift:13:13: error: cannot find 'has_even_digit' in scope\n\
    \        if !has_even_digit(x: i) {\n            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824309
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    for i in x {\n        if !has_even_digit(x: i) {\n            result.append(i)\n\
    \        }\n    }\n    return result.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpwhzlqgex.swift:13:13: error: cannot find 'has_even_digit' in scope\n\
    \        if !has_even_digit(x: i) {\n            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824309
- exit_code: -4
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    for i in x {\n        if !String(i).contains(\"2\") && !String(i).contains(\"\
    4\") && !String(i).contains(\"6\") && !String(i).contains(\"8\") && !String(i).contains(\"\
    0\") {\n            result.append(i)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: Exception
  stderr: 'tmp9088u9m1/tmp9088u9m1.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acf05a09c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acf05700b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acf05700988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acf056ff7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9088u9m1                        0x00005649cacc885c <unavailable> + 6236

    5    libc.so.6                          0x00002acf05bf5460 __libc_start_main +
    245

    6    tmp9088u9m1                        0x00005649cacc8459 <unavailable> + 5209

    '
  stdout: ''
  timestamp: 1659824310
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result: [Int]\
    \ = []\n    for num in x {\n        if !contains_even_digit(num: num) {\n    \
    \        result.append(num)\n        }\n    }\n    return result.sorted()\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpsk8bgmmb.swift:13:13: error: cannot find 'contains_even_digit'\
    \ in scope\n        if !contains_even_digit(num: num) {\n            ^~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824310
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    for i in x {\n        if !i.hasEvenDigit() {\n            result.append(i)\n\
    \        }\n    }\n    return result.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmp6hgmtrd5.swift:13:15: error: value of type 'Int' has no member\
    \ 'hasEvenDigit'\n        if !i.hasEvenDigit() {\n            ~ ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824309
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    for i in x {\n        if !has_even_digit(x: i) {\n            result.append(i)\n\
    \        }\n    }\n    return result.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpwhzlqgex.swift:13:13: error: cannot find 'has_even_digit' in scope\n\
    \        if !has_even_digit(x: i) {\n            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824309
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    return x.filter\
    \ { $0.digits.allSatisfy { $0.isOdd } }.sorted()\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmp142zorus.swift:11:26: error: value of type 'Int' has no member\
    \ 'digits'\n    return x.filter { $0.digits.allSatisfy { $0.isOdd } }.sorted()\n\
    \                      ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824309
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result: [Int]\
    \ = []\n    for i in x {\n        if !has_even_digit(x: i) {\n            result.append(i)\n\
    \        }\n    }\n    return result.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpkhl2zgww.swift:13:13: error: cannot find 'has_even_digit' in scope\n\
    \        if !has_even_digit(x: i) {\n            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824309
