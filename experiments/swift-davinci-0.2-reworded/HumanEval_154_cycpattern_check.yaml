name: HumanEval_154_cycpattern_check
language: swift
prompt: "\n/// You are given 2 words. You need to return true if the second word or\
  \ any of its rotations is a substring in the first word\n/// >>> cycpattern_check(a:\
  \ \"abcd\", b: \"abd\")\n/// false\n/// >>> cycpattern_check(a: \"hello\", b: \"\
  ell\")\n/// true\n/// >>> cycpattern_check(a: \"whassup\", b: \"psus\")\n/// false\n\
  /// >>> cycpattern_check(a: \"abab\", b: \"baa\")\n/// true\n/// >>> cycpattern_check(a:\
  \ \"efef\", b: \"eeff\")\n/// false\n/// >>> cycpattern_check(a: \"himenss\", b:\
  \ \"simen\")\n/// true\nfunc cycpattern_check(a: String, b: String) -> Bool {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(cycpattern_check(a: \"xyzw\", b: \"xyw\"\
  ) == false)\nassert(cycpattern_check(a: \"yello\", b: \"ell\") == true)\nassert(cycpattern_check(a:\
  \ \"whattup\", b: \"ptut\") == false)\nassert(cycpattern_check(a: \"efef\", b: \"\
  fee\") == true)\nassert(cycpattern_check(a: \"abab\", b: \"aabb\") == false)\nassert(cycpattern_check(a:\
  \ \"winemtt\", b: \"tinem\") == true)"
completions: ["    var b = b\n    for _ in 0..<b.count {\n        if a.contains(b)\
    \ {\n            return true\n        }\n        b.append(b.removeFirst())\n \
    \   }\n    return false", "    let a = a.lowercased()\n    let b = b.lowercased()\n\
    \    let b_len = b.count\n    let a_len = a.count\n    if b_len > a_len {\n  \
    \      return false\n    }\n    let b_first_char = b.first!\n    let b_last_char\
    \ = b.last!\n    for i in 0..<a_len {\n        if a[i] == b_first_char {\n   \
    \         var j = i\n            var k = 0\n            while j < a_len && k <\
    \ b_len && a[j] == b[k] {\n                j += 1\n                k += 1\n  \
    \          }\n            if k == b_len {\n                return true\n     \
    \       }\n            if a[j] == b_last_char {\n                var j = i - 1\n\
    \                var k = b_len - 1\n                while j >= 0 && k >= 0 &&\
    \ a[j] == b[k] {\n                    j -= 1\n                    k -= 1\n   \
    \             }\n                if k == -1 {\n                    return true\n\
    \                }\n            }\n        }\n    }\n    return false", "    var\
    \ a = a\n    var b = b\n    for _ in 0..<a.count {\n        if a.contains(b) {\n\
    \            return true\n        }\n        a.append(a.removeFirst())\n    }\n\
    \    return false", "    var b = b\n    if a.contains(b) {\n        return true\n\
    \    }\n    for _ in 0..<b.count {\n        b.append(b.removeFirst())\n      \
    \  if a.contains(b) {\n            return true\n        }\n    }\n    return false",
  "    let a = a.lowercased()\n    let b = b.lowercased()\n    let a_len = a.count\n\
    \    let b_len = b.count\n    if a_len < b_len {\n        return false\n    }\n\
    \    let a_arr = Array(a)\n    let b_arr = Array(b)\n    var i = 0\n    while\
    \ i < a_len {\n        var j = 0\n        while j < b_len {\n            if a_arr[i]\
    \ == b_arr[j] {\n                var k = 0\n                while k < b_len {\n\
    \                    if i + k >= a_len {\n                        return false\n\
    \                    }\n                    if a_arr[i + k] != b_arr[(j + k) %\
    \ b_len] {\n                        break\n                    }\n           \
    \         k += 1\n                }\n                if k == b_len {\n       \
    \             return true\n                }\n            }\n            j +=\
    \ 1\n        }\n        i += 1\n    }\n    return false", "    guard a.count >=\
    \ b.count else { return false }\n    let b = Array(b)\n    for i in 0..<b.count\
    \ {\n        let newB = b[i..<b.count] + b[0..<i]\n        if a.contains(String(newB))\
    \ {\n            return true\n        }\n    }\n    return false", "    let a\
    \ = Array(a)\n    let b = Array(b)\n    let a_len = a.count\n    let b_len = b.count\n\
    \    if a_len < b_len {\n        return false\n    }\n    for i in 0..<a_len {\n\
    \        var j = 0\n        while j < b_len && a[(i + j) % a_len] == b[j] {\n\
    \            j += 1\n        }\n        if j == b_len {\n            return true\n\
    \        }\n    }\n    return false", "    if a.count < b.count {\n        return\
    \ false\n    }\n    let a = Array(a)\n    let b = Array(b)\n    var i = 0\n  \
    \  while i < a.count {\n        let j = 0\n        while j < b.count {\n     \
    \       if a[i] == b[j] {\n                let k = 0\n                while k\
    \ < b.count {\n                    if a[(i + k) % a.count] != b[(j + k) % b.count]\
    \ {\n                        break\n                    }\n                  \
    \  if k == b.count - 1 {\n                        return true\n              \
    \      }\n                }\n            }\n        }\n        i += 1\n    }\n\
    \    return false", "    let a = Array(a)\n    let b = Array(b)\n    let n = a.count\n\
    \    let m = b.count\n    if m > n {\n        return false\n    }\n    var i =\
    \ 0\n    while i < n {\n        var j = 0\n        while j < m {\n           \
    \ if a[(i + j) % n] != b[j] {\n                break\n            }\n        \
    \    j += 1\n        }\n        if j == m {\n            return true\n       \
    \ }\n        i += 1\n    }\n    return false", "    var a = a\n    var b = b\n\
    \    if a.count < b.count {\n        return false\n    }\n    if a.count == b.count\
    \ {\n        return a == b\n    }\n    for _ in 0..<a.count {\n        if a.contains(b)\
    \ {\n            return true\n        }\n        a.append(a.removeFirst())\n \
    \   }\n    return false", "    let a = Array(a)\n    let b = Array(b)\n    let\
    \ b_len = b.count\n    var i = 0\n    while i < a.count {\n        if a[i] ==\
    \ b[0] {\n            var j = 0\n            while j < b_len {\n             \
    \   if a[(i + j) % a.count] != b[j] {\n                    break\n           \
    \     }\n                j += 1\n            }\n            if j == b_len {\n\
    \                return true\n            }\n        }\n        i += 1\n    }\n\
    \    return false", "    var b = b\n    for _ in 0..<b.count {\n        if a.contains(b)\
    \ {\n            return true\n        }\n        b.append(b.removeFirst())\n \
    \   }\n    return false", "    var b = b\n    for _ in 0..<b.count {\n       \
    \ if a.contains(b) {\n            return true\n        }\n        b.append(b.removeFirst())\n\
    \    }\n    return false", "    if a.count < b.count {\n        return false\n\
    \    }\n    var a_arr = Array(a)\n    var b_arr = Array(b)\n    var i = 0\n  \
    \  while i < a_arr.count {\n        if a_arr[i] == b_arr[0] {\n            var\
    \ j = 1\n            while j < b_arr.count {\n                if a_arr[(i + j)\
    \ % a_arr.count] != b_arr[j] {\n                    break\n                }\n\
    \                j += 1\n            }\n            if j == b_arr.count {\n  \
    \              return true\n            }\n        }\n        i += 1\n    }\n\
    \    return false", "    if a.count < b.count {\n        return false\n    }\n\
    \    let a = Array(a)\n    let b = Array(b)\n    var i = 0\n    while i < a.count\
    \ {\n        if a[i] == b[0] {\n            var j = 1\n            while j < b.count\
    \ {\n                if a[(i + j) % a.count] != b[j] {\n                    break\n\
    \                }\n                j += 1\n            }\n            if j ==\
    \ b.count {\n                return true\n            }\n        }\n        i\
    \ += 1\n    }\n    return false", "    if a.count != b.count {\n        return\
    \ false\n    }\n    let a = Array(a)\n    let b = Array(b)\n    for i in 0..<a.count\
    \ {\n        if a[i] == b[0] {\n            var j = i\n            var k = 0\n\
    \            while j < a.count {\n                if a[j] != b[k] {\n        \
    \            break\n                }\n                j += 1\n              \
    \  k += 1\n            }\n            if j == a.count {\n                j = 0\n\
    \            }\n            while j < i {\n                if a[j] != b[k] {\n\
    \                    break\n                }\n                j += 1\n      \
    \          k += 1\n            }\n            if j == i && k == b.count {\n  \
    \              return true\n            }\n        }\n    }\n    return false",
  "    let a = Array(a)\n    let b = Array(b)\n    var b_rot = b\n    for _ in 0..<b.count\
    \ {\n        if a.contains(where: { $0 == b_rot[0] }) {\n            var a_idx\
    \ = a.firstIndex(of: b_rot[0])!\n            for b_idx in 0..<b.count {\n    \
    \            if a_idx >= a.count {\n                    a_idx = 0\n          \
    \      }\n                if a[a_idx] != b_rot[b_idx] {\n                    break\n\
    \                }\n                if b_idx == b.count - 1 {\n              \
    \      return true\n                }\n                a_idx += 1\n          \
    \  }\n        }\n        b_rot.rotate(by: 1)\n    }\n    return false", "    if\
    \ a.count != b.count {\n        return false\n    }\n    let a = Array(a)\n  \
    \  let b = Array(b)\n    var b_rot = b\n    for _ in 0..<b.count {\n        if\
    \ a.contains(where: { $0 == b_rot[0] }) {\n            let index = a.firstIndex(of:\
    \ b_rot[0])!\n            let a_sub = a[index..<a.count] + a[0..<index]\n    \
    \        if a_sub == b_rot {\n                return true\n            }\n   \
    \     }\n        b_rot.append(b_rot.removeFirst())\n    }\n    return false",
  "    let a = Array(a)\n    let b = Array(b)\n    let n = a.count\n    let m = b.count\n\
    \    var i = 0\n    var j = 0\n    while i < n {\n        if a[i] == b[j] {\n\
    \            j += 1\n        } else {\n            j = 0\n        }\n        if\
    \ j == m {\n            return true\n        }\n        i += 1\n    }\n    return\
    \ false", "    let a = Array(a)\n    let b = Array(b)\n    let a_len = a.count\n\
    \    let b_len = b.count\n    if a_len < b_len {\n        return false\n    }\n\
    \    for i in 0..<a_len {\n        var j = 0\n        while j < b_len && a[(i\
    \ + j) % a_len] == b[j] {\n            j += 1\n        }\n        if j == b_len\
    \ {\n            return true\n        }\n    }\n    return false"]
stop_tokens:
- "\n}"
