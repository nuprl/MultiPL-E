language: swift
name: HumanEval_85_add
results:
- exit_code: 0
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for (index, value) in lst.enumerated()\
    \ {\n        if index % 2 != 0 && value % 2 == 0 {\n            sum += value\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add(lst:\
    \ [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013618
- exit_code: 0
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for (index, value) in lst.enumerated()\
    \ {\n        if index % 2 != 0 && value % 2 == 0 {\n            sum += value\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add(lst:\
    \ [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013618
- exit_code: 0
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for (index, element) in lst.enumerated()\
    \ {\n        if index % 2 != 0 && element % 2 == 0 {\n            sum += element\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add(lst:\
    \ [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013618
- exit_code: 0
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for (index, value) in lst.enumerated()\
    \ {\n        if index % 2 != 0 && value % 2 == 0 {\n            sum += value\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add(lst:\
    \ [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013618
- exit_code: 0
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for (index, element) in lst.enumerated()\
    \ {\n        if index % 2 != 0 && element % 2 == 0 {\n            sum += element\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add(lst:\
    \ [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013618
- exit_code: 0
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for (index, value) in lst.enumerated()\
    \ {\n        if index % 2 != 0 && value % 2 == 0 {\n            sum += value\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add(lst:\
    \ [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013618
- exit_code: 0
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for (index, value) in lst.enumerated()\
    \ {\n        if index % 2 != 0 && value % 2 == 0 {\n            sum += value\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add(lst:\
    \ [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013618
- exit_code: 0
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for (index, value) in lst.enumerated()\
    \ {\n        if index % 2 != 0 && value % 2 == 0 {\n            sum += value\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add(lst:\
    \ [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013618
- exit_code: 0
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for (index, element) in lst.enumerated()\
    \ {\n        if index % 2 != 0 && element % 2 == 0 {\n            sum += element\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add(lst:\
    \ [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013618
- exit_code: -4
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    return lst.enumerated().reduce(0) { $0 + ($1.offset\
    \ % 2 == 0 ? $1.element : 0) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add(lst:\
    \ [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: Exception
  stderr: 'tmpfknkipq6/tmpfknkipq6.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b621135dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6211054b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6211054988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b62110537b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfknkipq6                        0x000055ff6862651a <unavailable> + 5402

    5    libc.so.6                          0x00002b6211549460 __libc_start_main +
    245

    6    tmpfknkipq6                        0x000055ff68626189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1660013618
- exit_code: 0
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for (index, element) in lst.enumerated()\
    \ {\n        if index % 2 != 0 && element % 2 == 0 {\n            sum += element\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add(lst:\
    \ [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013618
- exit_code: 0
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for (index, value) in lst.enumerated()\
    \ {\n        if index % 2 != 0 && value % 2 == 0 {\n            sum += value\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add(lst:\
    \ [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013618
- exit_code: 0
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    return lst.enumerated().reduce(0) { (result,\
    \ element) in\n        return element.offset % 2 == 1 && element.element % 2 ==\
    \ 0 ? result + element.element : result\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122])\
    \ == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8])\
    \ == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013618
- exit_code: 0
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    return lst.enumerated().reduce(0) { (result,\
    \ element) in\n        return element.offset % 2 == 1 && element.element % 2 ==\
    \ 0 ? result + element.element : result\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122])\
    \ == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8])\
    \ == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013618
- exit_code: 0
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for (i, num) in lst.enumerated()\
    \ {\n        if i % 2 == 1 && num % 2 == 0 {\n            sum += num\n       \
    \ }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(add(lst: [4,\
    \ 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013618
- exit_code: 0
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for (index, value) in lst.enumerated()\
    \ {\n        if index % 2 != 0 && value % 2 == 0 {\n            sum += value\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add(lst:\
    \ [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013618
- exit_code: 0
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for (index, value) in lst.enumerated()\
    \ {\n        if index % 2 != 0 && value % 2 == 0 {\n            sum += value\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add(lst:\
    \ [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013618
- exit_code: 0
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for (index, value) in lst.enumerated()\
    \ {\n        if index % 2 != 0 && value % 2 == 0 {\n            sum += value\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add(lst:\
    \ [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013618
- exit_code: 0
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for (index, value) in lst.enumerated()\
    \ {\n        if index % 2 != 0 && value % 2 == 0 {\n            sum += value\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add(lst:\
    \ [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013618
- exit_code: 0
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for (index, value) in lst.enumerated()\
    \ {\n        if index % 2 != 0 && value % 2 == 0 {\n            sum += value\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add(lst:\
    \ [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013618
- exit_code: 0
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for (index, value) in lst.enumerated()\
    \ {\n        if index % 2 != 0 && value % 2 == 0 {\n            sum += value\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add(lst:\
    \ [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013618
- exit_code: -4
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for i in 0..<lst.count {\n\
    \        if i % 2 == 1 {\n            sum += lst[i]\n        }\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add(lst: [4, 88]) == 88)\n\
    assert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) ==\
    \ 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: Exception
  stderr: 'tmpgrwr54ts/tmpgrwr54ts.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0bb0536c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0bb022db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0bb022d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0bb022c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgrwr54ts                        0x00005621d1892617 <unavailable> + 5655

    5    libc.so.6                          0x00002b0bb0722460 __libc_start_main +
    245

    6    tmpgrwr54ts                        0x00005621d18921a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013618
- exit_code: 0
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for (index, value) in lst.enumerated()\
    \ {\n        if index % 2 != 0 && value % 2 == 0 {\n            sum += value\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add(lst:\
    \ [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013618
- exit_code: 0
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for (index, element) in lst.enumerated()\
    \ {\n        if index % 2 != 0 && element % 2 == 0 {\n            sum += element\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add(lst:\
    \ [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013618
- exit_code: 0
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for (index, value) in lst.enumerated()\
    \ {\n        if index % 2 != 0 && value % 2 == 0 {\n            sum += value\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add(lst:\
    \ [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013618
- exit_code: 0
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for (i, n) in lst.enumerated()\
    \ {\n        if i % 2 == 1 && n % 2 == 0 {\n            sum += n\n        }\n\
    \    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(add(lst: [4,\
    \ 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013618
- exit_code: 0
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for (index, value) in lst.enumerated()\
    \ {\n        if index % 2 != 0 && value % 2 == 0 {\n            sum += value\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add(lst:\
    \ [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013618
- exit_code: 0
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for (index, value) in lst.enumerated()\
    \ {\n        if index % 2 != 0 && value % 2 == 0 {\n            sum += value\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add(lst:\
    \ [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013618
- exit_code: 0
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for (index, value) in lst.enumerated()\
    \ {\n        if index % 2 != 0 && value % 2 == 0 {\n            sum += value\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add(lst:\
    \ [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013618
- exit_code: 0
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for (index, value) in lst.enumerated()\
    \ {\n        if index % 2 != 0 && value % 2 == 0 {\n            sum += value\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add(lst:\
    \ [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013618
- exit_code: 0
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for (index, element) in lst.enumerated()\
    \ {\n        if index % 2 != 0 && element % 2 == 0 {\n            sum += element\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add(lst:\
    \ [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013618
- exit_code: 0
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for (index, value) in lst.enumerated()\
    \ {\n        if index % 2 != 0 && value % 2 == 0 {\n            sum += value\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add(lst:\
    \ [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013618
- exit_code: 0
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for (index, value) in lst.enumerated()\
    \ {\n        if index % 2 != 0 && value % 2 == 0 {\n            sum += value\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add(lst:\
    \ [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013618
- exit_code: 0
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for (index, value) in lst.enumerated()\
    \ {\n        if index % 2 != 0 && value % 2 == 0 {\n            sum += value\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add(lst:\
    \ [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013618
- exit_code: -4
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    return lst.enumerated().filter { $0.offset\
    \ % 2 == 1 }.map { $0.element }.reduce(0, +)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122])\
    \ == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8])\
    \ == 12)"
  status: Exception
  stderr: 'tmpt9m17ye1/tmpt9m17ye1.swift:24: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adc7b733c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adc7b42ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adc7b42a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adc7b4297b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpt9m17ye1                        0x0000563b70462707 <unavailable> + 5895

    5    libc.so.6                          0x00002adc7b91f460 __libc_start_main +
    245

    6    tmpt9m17ye1                        0x0000563b70462299 <unavailable> + 4761

    '
  stdout: ''
  timestamp: 1660013618
- exit_code: 0
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for (index, value) in lst.enumerated()\
    \ {\n        if index % 2 != 0 && value % 2 == 0 {\n            sum += value\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add(lst:\
    \ [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013618
- exit_code: 0
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for (index, element) in lst.enumerated()\
    \ {\n        if index % 2 != 0 && element % 2 == 0 {\n            sum += element\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add(lst:\
    \ [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013618
- exit_code: 0
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for (index, value) in lst.enumerated()\
    \ {\n        if index % 2 != 0 && value % 2 == 0 {\n            sum += value\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add(lst:\
    \ [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013618
- exit_code: 0
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for (index, value) in lst.enumerated()\
    \ {\n        if index % 2 != 0 && value % 2 == 0 {\n            sum += value\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add(lst:\
    \ [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013618
- exit_code: 0
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    return lst.enumerated().reduce(0) { (result,\
    \ indexAndValue) in\n        if indexAndValue.offset % 2 == 1 && indexAndValue.element\
    \ % 2 == 0 {\n            return result + indexAndValue.element\n        }\n \
    \       return result\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add(lst:\
    \ [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013618
- exit_code: 0
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for (index, element) in lst.enumerated()\
    \ {\n        if index % 2 != 0 && element % 2 == 0 {\n            sum += element\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add(lst:\
    \ [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013618
- exit_code: 0
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for (index, value) in lst.enumerated()\
    \ {\n        if index % 2 != 0 && value % 2 == 0 {\n            sum += value\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add(lst:\
    \ [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013618
- exit_code: 0
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for (index, element) in lst.enumerated()\
    \ {\n        if index % 2 != 0 && element % 2 == 0 {\n            sum += element\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add(lst:\
    \ [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013618
- exit_code: 0
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for (index, value) in lst.enumerated()\
    \ {\n        if index % 2 != 0 && value % 2 == 0 {\n            sum += value\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add(lst:\
    \ [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013618
- exit_code: 0
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for (index, value) in lst.enumerated()\
    \ {\n        if index % 2 != 0 && value % 2 == 0 {\n            sum += value\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add(lst:\
    \ [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013618
- exit_code: 0
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for (index, element) in lst.enumerated()\
    \ {\n        if index % 2 != 0 && element % 2 == 0 {\n            sum += element\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add(lst:\
    \ [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013618
- exit_code: 0
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for (index, value) in lst.enumerated()\
    \ {\n        if index % 2 != 0 && value % 2 == 0 {\n            sum += value\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add(lst:\
    \ [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013618
- exit_code: 0
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for (index, element) in lst.enumerated()\
    \ {\n        if index % 2 != 0 && element % 2 == 0 {\n            sum += element\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add(lst:\
    \ [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013618
- exit_code: -4
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    return lst.enumerated().filter { $0.offset\
    \ % 2 == 1 }.reduce(0) { $0 + $1.element }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122])\
    \ == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8])\
    \ == 12)"
  status: Exception
  stderr: 'tmpqk0i33ob/tmpqk0i33ob.swift:24: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b17c21a3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b17c1e9ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b17c1e9a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17c1e997b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqk0i33ob                        0x0000560ffaf86657 <unavailable> + 5719

    5    libc.so.6                          0x00002b17c238f460 __libc_start_main +
    245

    6    tmpqk0i33ob                        0x0000560ffaf861e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1660013618
- exit_code: 0
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for (index, element) in lst.enumerated()\
    \ {\n        if index % 2 != 0 && element % 2 == 0 {\n            sum += element\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add(lst:\
    \ [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013618
- exit_code: 0
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for (index, value) in lst.enumerated()\
    \ {\n        if index % 2 != 0 && value % 2 == 0 {\n            sum += value\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add(lst:\
    \ [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013618
- exit_code: 0
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for (index, value) in lst.enumerated()\
    \ {\n        if index % 2 != 0 && value % 2 == 0 {\n            sum += value\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add(lst:\
    \ [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013618
- exit_code: 0
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for (i, n) in lst.enumerated()\
    \ {\n        if i % 2 == 1 && n % 2 == 0 {\n            sum += n\n        }\n\
    \    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(add(lst: [4,\
    \ 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013618
- exit_code: 0
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for (index, value) in lst.enumerated()\
    \ {\n        if index % 2 != 0 && value % 2 == 0 {\n            sum += value\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add(lst:\
    \ [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013618
- exit_code: 0
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for (index, value) in lst.enumerated()\
    \ {\n        if index % 2 != 0 && value % 2 == 0 {\n            sum += value\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add(lst:\
    \ [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013618
- exit_code: -4
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    return lst.enumerated().reduce(0) {\n     \
    \   $0 + ($1.offset % 2 == 0 ? $1.element : 0)\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2,\
    \ 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6,\
    \ 8]) == 12)"
  status: Exception
  stderr: 'tmp7hy52piu/tmp7hy52piu.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aacb00f2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aacafde9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aacafde9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aacafde87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7hy52piu                        0x0000556a4aa8b51a <unavailable> + 5402

    5    libc.so.6                          0x00002aacb02de460 __libc_start_main +
    245

    6    tmp7hy52piu                        0x0000556a4aa8b189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1660013618
- exit_code: 0
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for (index, value) in lst.enumerated()\
    \ {\n        if index % 2 != 0 && value % 2 == 0 {\n            sum += value\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add(lst:\
    \ [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013618
- exit_code: -4
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for i in 0..<lst.count {\n\
    \        if i % 2 == 1 {\n            sum += lst[i]\n        }\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add(lst: [4, 88]) == 88)\n\
    assert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) ==\
    \ 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: Exception
  stderr: 'tmpgrwr54ts/tmpgrwr54ts.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0bb0536c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0bb022db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0bb022d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0bb022c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgrwr54ts                        0x00005621d1892617 <unavailable> + 5655

    5    libc.so.6                          0x00002b0bb0722460 __libc_start_main +
    245

    6    tmpgrwr54ts                        0x00005621d18921a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013618
- exit_code: 0
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for (index, element) in lst.enumerated()\
    \ {\n        if index % 2 != 0 && element % 2 == 0 {\n            sum += element\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add(lst:\
    \ [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013618
- exit_code: 0
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for (index, value) in lst.enumerated()\
    \ {\n        if index % 2 != 0 && value % 2 == 0 {\n            sum += value\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add(lst:\
    \ [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013618
- exit_code: 0
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for (index, element) in lst.enumerated()\
    \ {\n        if index % 2 != 0 && element % 2 == 0 {\n            sum += element\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add(lst:\
    \ [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013618
- exit_code: -4
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    return lst.enumerated().reduce(0) {\n     \
    \   $0 + ($1.offset % 2 == 0 ? $1.element : 0)\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2,\
    \ 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6,\
    \ 8]) == 12)"
  status: Exception
  stderr: 'tmp7hy52piu/tmp7hy52piu.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aacb00f2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aacafde9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aacafde9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aacafde87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7hy52piu                        0x0000556a4aa8b51a <unavailable> + 5402

    5    libc.so.6                          0x00002aacb02de460 __libc_start_main +
    245

    6    tmp7hy52piu                        0x0000556a4aa8b189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1660013618
- exit_code: 0
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for (index, value) in lst.enumerated()\
    \ {\n        if index % 2 != 0 && value % 2 == 0 {\n            sum += value\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add(lst:\
    \ [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013618
- exit_code: -4
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    return lst.enumerated().reduce(0) { $0 + ($1.offset\
    \ % 2 == 0 ? $1.element : 0) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add(lst:\
    \ [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: Exception
  stderr: 'tmpfknkipq6/tmpfknkipq6.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b621135dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6211054b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6211054988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b62110537b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfknkipq6                        0x000055ff6862651a <unavailable> + 5402

    5    libc.so.6                          0x00002b6211549460 __libc_start_main +
    245

    6    tmpfknkipq6                        0x000055ff68626189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1660013618
- exit_code: 0
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for (index, value) in lst.enumerated()\
    \ {\n        if index % 2 != 0 && value % 2 == 0 {\n            sum += value\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add(lst:\
    \ [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013618
- exit_code: 0
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for (index, value) in lst.enumerated()\
    \ {\n        if index % 2 != 0 && value % 2 == 0 {\n            sum += value\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add(lst:\
    \ [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013618
- exit_code: 0
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for (index, element) in lst.enumerated()\
    \ {\n        if index % 2 != 0 && element % 2 == 0 {\n            sum += element\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add(lst:\
    \ [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013618
- exit_code: 0
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for (index, value) in lst.enumerated()\
    \ {\n        if index % 2 != 0 && value % 2 == 0 {\n            sum += value\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add(lst:\
    \ [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013618
- exit_code: 0
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for (index, value) in lst.enumerated()\
    \ {\n        if index % 2 != 0 && value % 2 == 0 {\n            sum += value\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add(lst:\
    \ [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013618
- exit_code: 0
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for (index, value) in lst.enumerated()\
    \ {\n        if index % 2 != 0 && value % 2 == 0 {\n            sum += value\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add(lst:\
    \ [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013618
- exit_code: 0
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for (index, value) in lst.enumerated()\
    \ {\n        if index % 2 != 0 && value % 2 == 0 {\n            sum += value\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add(lst:\
    \ [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013618
- exit_code: 0
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for (index, value) in lst.enumerated()\
    \ {\n        if index % 2 != 0 && value % 2 == 0 {\n            sum += value\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add(lst:\
    \ [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013618
- exit_code: 0
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for (index, element) in lst.enumerated()\
    \ {\n        if index % 2 != 0 && element % 2 == 0 {\n            sum += element\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add(lst:\
    \ [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013618
- exit_code: 0
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for (index, value) in lst.enumerated()\
    \ {\n        if index % 2 != 0 && value % 2 == 0 {\n            sum += value\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add(lst:\
    \ [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013618
- exit_code: 0
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for (index, value) in lst.enumerated()\
    \ {\n        if index % 2 != 0 && value % 2 == 0 {\n            sum += value\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add(lst:\
    \ [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013618
- exit_code: 0
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for (index, value) in lst.enumerated()\
    \ {\n        if index % 2 != 0 && value % 2 == 0 {\n            sum += value\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add(lst:\
    \ [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013618
- exit_code: 0
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for (index, value) in lst.enumerated()\
    \ {\n        if index % 2 != 0 && value % 2 == 0 {\n            sum += value\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add(lst:\
    \ [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013618
- exit_code: 0
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for (index, value) in lst.enumerated()\
    \ {\n        if index % 2 != 0 && value % 2 == 0 {\n            sum += value\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add(lst:\
    \ [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013618
- exit_code: 0
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for (i, n) in lst.enumerated()\
    \ {\n        if i % 2 == 1 && n % 2 == 0 {\n            sum += n\n        }\n\
    \    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(add(lst: [4,\
    \ 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013618
- exit_code: 0
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for (index, value) in lst.enumerated()\
    \ {\n        if index % 2 != 0 && value % 2 == 0 {\n            sum += value\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add(lst:\
    \ [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013618
- exit_code: 0
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for (index, value) in lst.enumerated()\
    \ {\n        if index % 2 != 0 && value % 2 == 0 {\n            sum += value\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add(lst:\
    \ [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013618
- exit_code: -4
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    return lst.enumerated().reduce(0) { $0 + ($1.offset\
    \ % 2 == 0 ? $1.element : 0) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add(lst:\
    \ [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: Exception
  stderr: 'tmpfknkipq6/tmpfknkipq6.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b621135dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6211054b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6211054988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b62110537b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfknkipq6                        0x000055ff6862651a <unavailable> + 5402

    5    libc.so.6                          0x00002b6211549460 __libc_start_main +
    245

    6    tmpfknkipq6                        0x000055ff68626189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1660013618
- exit_code: 0
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for (index, element) in lst.enumerated()\
    \ {\n        if index % 2 != 0 && element % 2 == 0 {\n            sum += element\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add(lst:\
    \ [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013618
- exit_code: -4
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122])\
    \ == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8])\
    \ == 12)"
  status: Exception
  stderr: 'tmp_we_ndlh/tmp_we_ndlh.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5bc087ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5bc0575b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5bc0575988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5bc05747b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_we_ndlh                        0x0000560b943862fa <unavailable> + 4858

    5    libc.so.6                          0x00002b5bc0a6a460 __libc_start_main +
    245

    6    tmp_we_ndlh                        0x0000560b94385f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1660013618
- exit_code: 0
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for (index, value) in lst.enumerated()\
    \ {\n        if index % 2 != 0 && value % 2 == 0 {\n            sum += value\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add(lst:\
    \ [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013618
- exit_code: 0
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for (index, element) in lst.enumerated()\
    \ {\n        if index % 2 != 0 && element % 2 == 0 {\n            sum += element\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add(lst:\
    \ [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013618
- exit_code: 0
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    return lst.enumerated().reduce(0) { (result,\
    \ element) in\n        return element.offset % 2 == 1 && element.element % 2 ==\
    \ 0 ? result + element.element : result\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122])\
    \ == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8])\
    \ == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013618
- exit_code: 0
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for (index, value) in lst.enumerated()\
    \ {\n        if index % 2 != 0 && value % 2 == 0 {\n            sum += value\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add(lst:\
    \ [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013618
- exit_code: 0
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for (index, value) in lst.enumerated()\
    \ {\n        if index % 2 != 0 && value % 2 == 0 {\n            sum += value\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add(lst:\
    \ [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013618
- exit_code: 0
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for (index, value) in lst.enumerated()\
    \ {\n        if index % 2 != 0 && value % 2 == 0 {\n            sum += value\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add(lst:\
    \ [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013618
- exit_code: -4
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for i in 0..<lst.count {\n\
    \        if i % 2 == 1 {\n            sum += lst[i]\n        }\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add(lst: [4, 88]) == 88)\n\
    assert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) ==\
    \ 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: Exception
  stderr: 'tmpgrwr54ts/tmpgrwr54ts.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0bb0536c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0bb022db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0bb022d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0bb022c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgrwr54ts                        0x00005621d1892617 <unavailable> + 5655

    5    libc.so.6                          0x00002b0bb0722460 __libc_start_main +
    245

    6    tmpgrwr54ts                        0x00005621d18921a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013618
- exit_code: 0
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for (index, value) in lst.enumerated()\
    \ {\n        if index % 2 != 0 && value % 2 == 0 {\n            sum += value\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add(lst:\
    \ [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013618
- exit_code: 0
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for (index, value) in lst.enumerated()\
    \ {\n        if index % 2 != 0 && value % 2 == 0 {\n            sum += value\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add(lst:\
    \ [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013618
- exit_code: 0
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for (index, value) in lst.enumerated()\
    \ {\n        if index % 2 != 0 && value % 2 == 0 {\n            sum += value\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add(lst:\
    \ [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013618
- exit_code: 0
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for (index, value) in lst.enumerated()\
    \ {\n        if index % 2 != 0 && value % 2 == 0 {\n            sum += value\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add(lst:\
    \ [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013618
- exit_code: 0
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for (index, value) in lst.enumerated()\
    \ {\n        if index % 2 != 0 && value % 2 == 0 {\n            sum += value\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add(lst:\
    \ [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013618
- exit_code: 0
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for (index, value) in lst.enumerated()\
    \ {\n        if index % 2 != 0 && value % 2 == 0 {\n            sum += value\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add(lst:\
    \ [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013618
- exit_code: 0
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for (index, element) in lst.enumerated()\
    \ {\n        if index % 2 != 0 && element % 2 == 0 {\n            sum += element\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add(lst:\
    \ [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013618
- exit_code: 0
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for (i, num) in lst.enumerated()\
    \ {\n        if i % 2 == 1 && num % 2 == 0 {\n            sum += num\n       \
    \ }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(add(lst: [4,\
    \ 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013618
- exit_code: 0
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for (index, value) in lst.enumerated()\
    \ {\n        if index % 2 != 0 && value % 2 == 0 {\n            sum += value\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add(lst:\
    \ [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013618
- exit_code: 0
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for (index, value) in lst.enumerated()\
    \ {\n        if index % 2 != 0 && value % 2 == 0 {\n            sum += value\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add(lst:\
    \ [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013618
- exit_code: 0
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for (index, value) in lst.enumerated()\
    \ {\n        if index % 2 != 0 && value % 2 == 0 {\n            sum += value\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add(lst:\
    \ [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013618
- exit_code: 0
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for (index, value) in lst.enumerated()\
    \ {\n        if index % 2 != 0 && value % 2 == 0 {\n            sum += value\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add(lst:\
    \ [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013618
- exit_code: 0
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for (index, value) in lst.enumerated()\
    \ {\n        if index % 2 != 0 && value % 2 == 0 {\n            sum += value\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add(lst:\
    \ [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013618
- exit_code: 0
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for (index, value) in lst.enumerated()\
    \ {\n        if index % 2 != 0 && value % 2 == 0 {\n            sum += value\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add(lst:\
    \ [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013618
- exit_code: 0
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for (index, value) in lst.enumerated()\
    \ {\n        if index % 2 != 0 && value % 2 == 0 {\n            sum += value\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add(lst:\
    \ [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013618
- exit_code: 0
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for (index, value) in lst.enumerated()\
    \ {\n        if index % 2 != 0 && value % 2 == 0 {\n            sum += value\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add(lst:\
    \ [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013618
- exit_code: 0
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for (index, value) in lst.enumerated()\
    \ {\n        if index % 2 != 0 && value % 2 == 0 {\n            sum += value\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add(lst:\
    \ [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013618
- exit_code: 0
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for (index, value) in lst.enumerated()\
    \ {\n        if index % 2 != 0 && value % 2 == 0 {\n            sum += value\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add(lst:\
    \ [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013618
- exit_code: 0
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for (index, value) in lst.enumerated()\
    \ {\n        if index % 2 != 0 && value % 2 == 0 {\n            sum += value\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add(lst:\
    \ [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013618
- exit_code: 0
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var result = 0\n    for (index, element) in\
    \ lst.enumerated() {\n        if index % 2 != 0 && element % 2 == 0 {\n      \
    \      result += element\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7,\
    \ 2, 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4,\
    \ 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013618
- exit_code: 0
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for (index, value) in lst.enumerated()\
    \ {\n        if index % 2 != 0 && value % 2 == 0 {\n            sum += value\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add(lst:\
    \ [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013618
- exit_code: 0
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for (index, value) in lst.enumerated()\
    \ {\n        if index % 2 != 0 && value % 2 == 0 {\n            sum += value\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add(lst:\
    \ [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013618
- exit_code: 0
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for (index, value) in lst.enumerated()\
    \ {\n        if index % 2 != 0 && value % 2 == 0 {\n            sum += value\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add(lst:\
    \ [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013618
- exit_code: 0
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for (index, value) in lst.enumerated()\
    \ {\n        if index % 2 != 0 && value % 2 == 0 {\n            sum += value\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add(lst:\
    \ [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013618
- exit_code: 0
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for (index, value) in lst.enumerated()\
    \ {\n        if index % 2 != 0 && value % 2 == 0 {\n            sum += value\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add(lst:\
    \ [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013618
- exit_code: 0
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for (index, value) in lst.enumerated()\
    \ {\n        if index % 2 != 0 && value % 2 == 0 {\n            sum += value\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add(lst:\
    \ [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013618
- exit_code: 0
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for (index, value) in lst.enumerated()\
    \ {\n        if index % 2 != 0 && value % 2 == 0 {\n            sum += value\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add(lst:\
    \ [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013618
- exit_code: 0
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for (index, element) in lst.enumerated()\
    \ {\n        if index % 2 != 0 && element % 2 == 0 {\n            sum += element\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add(lst:\
    \ [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013618
- exit_code: 0
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for (index, value) in lst.enumerated()\
    \ {\n        if index % 2 != 0 && value % 2 == 0 {\n            sum += value\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add(lst:\
    \ [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013618
- exit_code: 0
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for (index, value) in lst.enumerated()\
    \ {\n        if index % 2 != 0 && value % 2 == 0 {\n            sum += value\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add(lst:\
    \ [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013618
- exit_code: 0
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for (index, element) in lst.enumerated()\
    \ {\n        if index % 2 != 0 && element % 2 == 0 {\n            sum += element\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add(lst:\
    \ [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013618
- exit_code: 0
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for (index, element) in lst.enumerated()\
    \ {\n        if index % 2 != 0 && element % 2 == 0 {\n            sum += element\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add(lst:\
    \ [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013618
- exit_code: 0
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for (index, value) in lst.enumerated()\
    \ {\n        if index % 2 != 0 && value % 2 == 0 {\n            sum += value\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add(lst:\
    \ [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013618
- exit_code: 0
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for (index, value) in lst.enumerated()\
    \ {\n        if index % 2 != 0 && value % 2 == 0 {\n            sum += value\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add(lst:\
    \ [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013618
- exit_code: 0
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for (index, value) in lst.enumerated()\
    \ {\n        if index % 2 != 0 && value % 2 == 0 {\n            sum += value\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add(lst:\
    \ [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013618
- exit_code: 0
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for (index, value) in lst.enumerated()\
    \ {\n        if index % 2 != 0 && value % 2 == 0 {\n            sum += value\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add(lst:\
    \ [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013618
- exit_code: 0
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    return lst.enumerated().reduce(0) { (result,\
    \ element) in\n        element.offset % 2 == 1 && element.element % 2 == 0 ? result\
    \ + element.element : result\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\n\
    assert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013618
- exit_code: 0
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for (index, value) in lst.enumerated()\
    \ {\n        if index % 2 != 0 && value % 2 == 0 {\n            sum += value\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add(lst:\
    \ [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013618
- exit_code: 0
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for (index, value) in lst.enumerated()\
    \ {\n        if index % 2 != 0 && value % 2 == 0 {\n            sum += value\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add(lst:\
    \ [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013618
- exit_code: 0
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for (i, num) in lst.enumerated()\
    \ {\n        if i % 2 == 1 && num % 2 == 0 {\n            sum += num\n       \
    \ }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(add(lst: [4,\
    \ 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013618
- exit_code: -4
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for i in 0..<lst.count {\n\
    \        if i % 2 == 1 {\n            sum += lst[i]\n        }\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add(lst: [4, 88]) == 88)\n\
    assert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) ==\
    \ 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: Exception
  stderr: 'tmpgrwr54ts/tmpgrwr54ts.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0bb0536c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0bb022db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0bb022d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0bb022c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgrwr54ts                        0x00005621d1892617 <unavailable> + 5655

    5    libc.so.6                          0x00002b0bb0722460 __libc_start_main +
    245

    6    tmpgrwr54ts                        0x00005621d18921a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013618
- exit_code: 0
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for (index, element) in lst.enumerated()\
    \ {\n        if index % 2 != 0 && element % 2 == 0 {\n            sum += element\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add(lst:\
    \ [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013618
- exit_code: 0
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for (i, v) in lst.enumerated()\
    \ {\n        if i % 2 == 1 && v % 2 == 0 {\n            sum += v\n        }\n\
    \    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(add(lst: [4,\
    \ 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013618
- exit_code: 0
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for (index, value) in lst.enumerated()\
    \ {\n        if index % 2 != 0 && value % 2 == 0 {\n            sum += value\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add(lst:\
    \ [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013618
- exit_code: 0
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for (index, value) in lst.enumerated()\
    \ {\n        if index % 2 != 0 && value % 2 == 0 {\n            sum += value\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add(lst:\
    \ [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013618
- exit_code: 0
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for (index, element) in lst.enumerated()\
    \ {\n        if index % 2 != 0 && element % 2 == 0 {\n            sum += element\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add(lst:\
    \ [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013618
- exit_code: 0
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for (index, value) in lst.enumerated()\
    \ {\n        if index % 2 != 0 && value % 2 == 0 {\n            sum += value\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add(lst:\
    \ [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013618
- exit_code: 0
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for (index, value) in lst.enumerated()\
    \ {\n        if index % 2 != 0 && value % 2 == 0 {\n            sum += value\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add(lst:\
    \ [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013618
- exit_code: 0
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for (index, value) in lst.enumerated()\
    \ {\n        if index % 2 != 0 && value % 2 == 0 {\n            sum += value\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add(lst:\
    \ [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013618
- exit_code: 0
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for (index, value) in lst.enumerated()\
    \ {\n        if index % 2 != 0 && value % 2 == 0 {\n            sum += value\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add(lst:\
    \ [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013618
- exit_code: 0
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for (index, value) in lst.enumerated()\
    \ {\n        if index % 2 != 0 && value % 2 == 0 {\n            sum += value\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add(lst:\
    \ [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013618
- exit_code: 0
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for (index, value) in lst.enumerated()\
    \ {\n        if index % 2 != 0 && value % 2 == 0 {\n            sum += value\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add(lst:\
    \ [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013618
- exit_code: 0
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for (index, value) in lst.enumerated()\
    \ {\n        if index % 2 != 0 && value % 2 == 0 {\n            sum += value\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add(lst:\
    \ [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013618
- exit_code: 0
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for (index, value) in lst.enumerated()\
    \ {\n        if index % 2 != 0 && value % 2 == 0 {\n            sum += value\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add(lst:\
    \ [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013618
- exit_code: -4
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    return lst.enumerated().reduce(0) { $0 + ($1.offset\
    \ % 2 == 0 ? $1.element : 0) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add(lst:\
    \ [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: Exception
  stderr: 'tmpfknkipq6/tmpfknkipq6.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b621135dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6211054b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6211054988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b62110537b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfknkipq6                        0x000055ff6862651a <unavailable> + 5402

    5    libc.so.6                          0x00002b6211549460 __libc_start_main +
    245

    6    tmpfknkipq6                        0x000055ff68626189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1660013618
- exit_code: 0
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for (i, num) in lst.enumerated()\
    \ {\n        if i % 2 == 1 && num % 2 == 0 {\n            sum += num\n       \
    \ }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(add(lst: [4,\
    \ 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013618
- exit_code: 0
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for (index, value) in lst.enumerated()\
    \ {\n        if index % 2 != 0 && value % 2 == 0 {\n            sum += value\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add(lst:\
    \ [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013618
- exit_code: 0
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for (index, value) in lst.enumerated()\
    \ {\n        if index % 2 != 0 && value % 2 == 0 {\n            sum += value\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add(lst:\
    \ [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013618
- exit_code: 0
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for (index, value) in lst.enumerated()\
    \ {\n        if index % 2 != 0 && value % 2 == 0 {\n            sum += value\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add(lst:\
    \ [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013618
- exit_code: 0
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for (index, value) in lst.enumerated()\
    \ {\n        if index % 2 != 0 && value % 2 == 0 {\n            sum += value\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add(lst:\
    \ [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013618
- exit_code: 0
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for (index, value) in lst.enumerated()\
    \ {\n        if index % 2 != 0 && value % 2 == 0 {\n            sum += value\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add(lst:\
    \ [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013618
- exit_code: -4
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    return lst.enumerated().reduce(0) {\n     \
    \   $0 + ($1.offset % 2 == 0 ? $1.element : 0)\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2,\
    \ 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6,\
    \ 8]) == 12)"
  status: Exception
  stderr: 'tmp7hy52piu/tmp7hy52piu.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aacb00f2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aacafde9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aacafde9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aacafde87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7hy52piu                        0x0000556a4aa8b51a <unavailable> + 5402

    5    libc.so.6                          0x00002aacb02de460 __libc_start_main +
    245

    6    tmp7hy52piu                        0x0000556a4aa8b189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1660013618
- exit_code: 0
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for (index, value) in lst.enumerated()\
    \ {\n        if index % 2 != 0 && value % 2 == 0 {\n            sum += value\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add(lst:\
    \ [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013618
- exit_code: 0
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for (index, value) in lst.enumerated()\
    \ {\n        if index % 2 != 0 && value % 2 == 0 {\n            sum += value\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add(lst:\
    \ [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013618
- exit_code: 0
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for (index, value) in lst.enumerated()\
    \ {\n        if index % 2 != 0 && value % 2 == 0 {\n            sum += value\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add(lst:\
    \ [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013618
- exit_code: 0
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for (index, value) in lst.enumerated()\
    \ {\n        if index % 2 != 0 && value % 2 == 0 {\n            sum += value\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add(lst:\
    \ [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013618
- exit_code: 0
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    return lst.enumerated().reduce(0) { (result,\
    \ element) in\n        return element.offset % 2 == 1 && element.element % 2 ==\
    \ 0 ? result + element.element : result\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122])\
    \ == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8])\
    \ == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013618
- exit_code: 0
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for (index, num) in lst.enumerated()\
    \ {\n        if index % 2 != 0 && num % 2 == 0 {\n            sum += num\n   \
    \     }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add(lst:\
    \ [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013618
- exit_code: 0
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for (index, value) in lst.enumerated()\
    \ {\n        if index % 2 != 0 && value % 2 == 0 {\n            sum += value\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add(lst:\
    \ [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013618
- exit_code: 0
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for (index, value) in lst.enumerated()\
    \ {\n        if index % 2 != 0 && value % 2 == 0 {\n            sum += value\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add(lst:\
    \ [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013618
- exit_code: 0
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for (index, value) in lst.enumerated()\
    \ {\n        if index % 2 != 0 && value % 2 == 0 {\n            sum += value\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add(lst:\
    \ [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013618
- exit_code: 0
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for (index, value) in lst.enumerated()\
    \ {\n        if index % 2 != 0 && value % 2 == 0 {\n            sum += value\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add(lst:\
    \ [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013618
- exit_code: 0
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for (index, value) in lst.enumerated()\
    \ {\n        if index % 2 != 0 && value % 2 == 0 {\n            sum += value\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add(lst:\
    \ [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013618
- exit_code: 0
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for (index, value) in lst.enumerated()\
    \ {\n        if index % 2 != 0 && value % 2 == 0 {\n            sum += value\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add(lst:\
    \ [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013618
- exit_code: -4
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    return lst.enumerated().filter { $0.offset\
    \ % 2 == 1 }.reduce(0) { $0 + $1.element }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122])\
    \ == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8])\
    \ == 12)"
  status: Exception
  stderr: 'tmpqk0i33ob/tmpqk0i33ob.swift:24: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b17c21a3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b17c1e9ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b17c1e9a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17c1e997b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqk0i33ob                        0x0000560ffaf86657 <unavailable> + 5719

    5    libc.so.6                          0x00002b17c238f460 __libc_start_main +
    245

    6    tmpqk0i33ob                        0x0000560ffaf861e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1660013618
- exit_code: -4
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    return lst.enumerated().reduce(0) { $0 + ($1.offset\
    \ % 2 == 0 ? $1.element : 0) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add(lst:\
    \ [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: Exception
  stderr: 'tmpfknkipq6/tmpfknkipq6.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b621135dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6211054b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6211054988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b62110537b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfknkipq6                        0x000055ff6862651a <unavailable> + 5402

    5    libc.so.6                          0x00002b6211549460 __libc_start_main +
    245

    6    tmpfknkipq6                        0x000055ff68626189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1660013618
- exit_code: 0
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for (index, value) in lst.enumerated()\
    \ {\n        if index % 2 != 0 && value % 2 == 0 {\n            sum += value\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add(lst:\
    \ [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013618
- exit_code: 0
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for (index, element) in lst.enumerated()\
    \ {\n        if index % 2 != 0 && element % 2 == 0 {\n            sum += element\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add(lst:\
    \ [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013618
- exit_code: 0
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for (index, value) in lst.enumerated()\
    \ {\n        if index % 2 != 0 && value % 2 == 0 {\n            sum += value\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add(lst:\
    \ [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013618
- exit_code: 0
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for (index, value) in lst.enumerated()\
    \ {\n        if index % 2 != 0 && value % 2 == 0 {\n            sum += value\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add(lst:\
    \ [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013618
- exit_code: 0
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for (index, value) in lst.enumerated()\
    \ {\n        if index % 2 != 0 && value % 2 == 0 {\n            sum += value\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add(lst:\
    \ [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013618
- exit_code: 0
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for (i, num) in lst.enumerated()\
    \ {\n        if i % 2 == 1 && num % 2 == 0 {\n            sum += num\n       \
    \ }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(add(lst: [4,\
    \ 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013618
- exit_code: 0
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for (index, element) in lst.enumerated()\
    \ {\n        if index % 2 != 0 && element % 2 == 0 {\n            sum += element\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add(lst:\
    \ [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013618
- exit_code: 0
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for (index, element) in lst.enumerated()\
    \ {\n        if index % 2 != 0 && element % 2 == 0 {\n            sum += element\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add(lst:\
    \ [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013618
- exit_code: 0
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for (index, value) in lst.enumerated()\
    \ {\n        if index % 2 != 0 && value % 2 == 0 {\n            sum += value\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add(lst:\
    \ [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013618
- exit_code: 0
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for (index, element) in lst.enumerated()\
    \ {\n        if index % 2 != 0 && element % 2 == 0 {\n            sum += element\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add(lst:\
    \ [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013618
- exit_code: 0
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for (index, value) in lst.enumerated()\
    \ {\n        if index % 2 != 0 && value % 2 == 0 {\n            sum += value\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add(lst:\
    \ [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013618
- exit_code: 0
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for (index, value) in lst.enumerated()\
    \ {\n        if index % 2 != 0 && value % 2 == 0 {\n            sum += value\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add(lst:\
    \ [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013618
- exit_code: 0
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for (index, element) in lst.enumerated()\
    \ {\n        if index % 2 != 0 && element % 2 == 0 {\n            sum += element\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add(lst:\
    \ [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013618
- exit_code: 0
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for (index, element) in lst.enumerated()\
    \ {\n        if index % 2 != 0 && element % 2 == 0 {\n            sum += element\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add(lst:\
    \ [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013618
- exit_code: 0
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for (index, element) in lst.enumerated()\
    \ {\n        if index % 2 != 0 && element % 2 == 0 {\n            sum += element\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add(lst:\
    \ [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013618
- exit_code: -4
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    return lst.enumerated().filter { $0.offset\
    \ % 2 == 1 }.map { $0.element }.reduce(0, +)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122])\
    \ == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8])\
    \ == 12)"
  status: Exception
  stderr: 'tmpt9m17ye1/tmpt9m17ye1.swift:24: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adc7b733c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adc7b42ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adc7b42a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adc7b4297b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpt9m17ye1                        0x0000563b70462707 <unavailable> + 5895

    5    libc.so.6                          0x00002adc7b91f460 __libc_start_main +
    245

    6    tmpt9m17ye1                        0x0000563b70462299 <unavailable> + 4761

    '
  stdout: ''
  timestamp: 1660013618
- exit_code: 0
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for (index, element) in lst.enumerated()\
    \ {\n        if index % 2 != 0 && element % 2 == 0 {\n            sum += element\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add(lst:\
    \ [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013618
- exit_code: 0
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for (index, value) in lst.enumerated()\
    \ {\n        if index % 2 != 0 && value % 2 == 0 {\n            sum += value\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add(lst:\
    \ [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013618
- exit_code: -4
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for i in stride(from: 0, to:\
    \ lst.count, by: 2) {\n        if lst[i] % 2 == 0 {\n            sum += lst[i]\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add(lst:\
    \ [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: Exception
  stderr: 'tmp9i3ddf7k/tmp9i3ddf7k.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9542105c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9541dfcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9541dfc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9541dfb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9i3ddf7k                        0x000055bb0a19664a <unavailable> + 5706

    5    libc.so.6                          0x00002b95422f1460 __libc_start_main +
    245

    6    tmp9i3ddf7k                        0x000055bb0a1962b9 <unavailable> + 4793

    '
  stdout: ''
  timestamp: 1660013618
- exit_code: 0
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for (index, value) in lst.enumerated()\
    \ {\n        if index % 2 != 0 && value % 2 == 0 {\n            sum += value\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add(lst:\
    \ [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013618
- exit_code: 0
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for (i, v) in lst.enumerated()\
    \ {\n        if i % 2 == 1 && v % 2 == 0 {\n            sum += v\n        }\n\
    \    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(add(lst: [4,\
    \ 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013618
- exit_code: 0
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for (index, value) in lst.enumerated()\
    \ {\n        if index % 2 != 0 && value % 2 == 0 {\n            sum += value\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add(lst:\
    \ [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013618
- exit_code: -4
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    return lst.enumerated().reduce(0) { $0 + ($1.offset\
    \ % 2 == 0 ? $1.element : 0) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add(lst:\
    \ [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: Exception
  stderr: 'tmpfknkipq6/tmpfknkipq6.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b621135dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6211054b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6211054988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b62110537b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfknkipq6                        0x000055ff6862651a <unavailable> + 5402

    5    libc.so.6                          0x00002b6211549460 __libc_start_main +
    245

    6    tmpfknkipq6                        0x000055ff68626189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1660013618
- exit_code: 0
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for (index, element) in lst.enumerated()\
    \ {\n        if index % 2 != 0 && element % 2 == 0 {\n            sum += element\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add(lst:\
    \ [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013618
- exit_code: 0
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for (index, value) in lst.enumerated()\
    \ {\n        if index % 2 != 0 && value % 2 == 0 {\n            sum += value\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add(lst:\
    \ [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013618
- exit_code: -4
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    return lst.enumerated().reduce(0) { $0 + ($1.offset\
    \ % 2 == 0 ? $1.element : 0) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add(lst:\
    \ [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: Exception
  stderr: 'tmpfknkipq6/tmpfknkipq6.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b621135dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6211054b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6211054988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b62110537b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfknkipq6                        0x000055ff6862651a <unavailable> + 5402

    5    libc.so.6                          0x00002b6211549460 __libc_start_main +
    245

    6    tmpfknkipq6                        0x000055ff68626189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1660013618
- exit_code: 0
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for (index, num) in lst.enumerated()\
    \ {\n        if index % 2 != 0 && num % 2 == 0 {\n            sum += num\n   \
    \     }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add(lst:\
    \ [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013618
- exit_code: 0
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for (index, element) in lst.enumerated()\
    \ {\n        if index % 2 != 0 && element % 2 == 0 {\n            sum += element\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add(lst:\
    \ [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013618
- exit_code: 0
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for (index, value) in lst.enumerated()\
    \ {\n        if index % 2 != 0 && value % 2 == 0 {\n            sum += value\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add(lst:\
    \ [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013618
- exit_code: 0
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for (index, element) in lst.enumerated()\
    \ {\n        if index % 2 != 0 && element % 2 == 0 {\n            sum += element\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add(lst:\
    \ [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013618
- exit_code: 0
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for (index, value) in lst.enumerated()\
    \ {\n        if index % 2 != 0 && value % 2 == 0 {\n            sum += value\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add(lst:\
    \ [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013618
- exit_code: 0
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for (index, value) in lst.enumerated()\
    \ {\n        if index % 2 != 0 && value % 2 == 0 {\n            sum += value\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add(lst:\
    \ [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013618
- exit_code: 0
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for (index, value) in lst.enumerated()\
    \ {\n        if index % 2 != 0 && value % 2 == 0 {\n            sum += value\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add(lst:\
    \ [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013618
