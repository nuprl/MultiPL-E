language: swift
name: HumanEval_19_sort_numbers
results:
- exit_code: -4
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let numbers = numbers.split(separator:\
    \ \" \")\n    let sortedNumbers = numbers.sorted { (first, second) -> Bool in\n\
    \        return first < second\n    }\n    return sortedNumbers.joined(separator:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: Exception
  stderr: 'tmpahja2gmd/tmpahja2gmd.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9d6dd8bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9d6da82b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9d6da82988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9d6da817b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpahja2gmd                        0x000055835fb128b2 <unavailable> + 6322

    5    libc.so.6                          0x00002b9d6df77460 __libc_start_main +
    245

    6    tmpahja2gmd                        0x000055835fb122e9 <unavailable> + 4841

    '
  stdout: ''
  timestamp: 1660013248
- exit_code: 0
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let numberals =\
    \ [\"zero\", \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\"\
    , \"eight\", \"nine\"]\n    let sorted = numbers.split(separator: \" \").sorted\
    \ {\n        numberals.firstIndex(of: String($0))! < numberals.firstIndex(of:\
    \ String($1))!\n    }\n    return sorted.joined(separator: \" \")\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013248
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let nums = numbers.components(separatedBy:\
    \ \" \")\n    let sorted = nums.sorted { (a, b) -> Bool in\n        return number_to_int(number:\
    \ a) < number_to_int(number: b)\n    }\n    return sorted.joined(separator: \"\
    \ \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers: \"\
    \") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpwbtwbarw.swift:8:24: error: value of type 'String' has no member\
    \ 'components'\n    let nums = numbers.components(separatedBy: \" \")\n      \
    \         ~~~~~~~ ^~~~~~~~~~\n/tmp/tmpwbtwbarw.swift:10:16: error: cannot find\
    \ 'number_to_int' in scope\n        return number_to_int(number: a) < number_to_int(number:\
    \ b)\n               ^~~~~~~~~~~~~\n/tmp/tmpwbtwbarw.swift:10:43: error: cannot\
    \ find 'number_to_int' in scope\n        return number_to_int(number: a) < number_to_int(number:\
    \ b)\n                                          ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013248
- exit_code: -4
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let nums = numbers.split(separator:\
    \ \" \")\n    let nums_sorted = nums.sorted { (a, b) -> Bool in\n        return\
    \ Int(a)! < Int(b)!\n    }\n    return nums_sorted.joined(separator: \" \")\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: Exception
  stderr: 'tmpw5amscrz/tmpw5amscrz.swift:10: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002b9c717d8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9c714cf561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b9c714cf286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b9c714cf13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b9c714cebb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpw5amscrz                        0x000055853a0b303c <unavailable> + 8252

    6    libswiftCore.so                    0x00002b9c715f0c90 MutableCollection<>._insertionSort(within:sortedEnd:by:)
    + 770

    7    libswiftCore.so                    0x00002b9c715f1110 MutableCollection<>._insertionSort(within:by:)
    + 356

    8    libswiftCore.so                    0x00002b9c715efd30 UnsafeMutableBufferPointer._stableSortImpl(by:)
    + 319

    9    libswiftCore.so                    0x00002b9c715efd15 <unavailable> + 2616597

    10   libswiftCore.so                    0x00002b9c7171565a <unavailable> + 3819098

    11   libswiftCore.so                    0x00002b9c71504720 ContiguousArray.withContiguousMutableStorageIfAvailable<A>(_:)
    + 130

    12   libswiftCore.so                    0x00002b9c7150470f <unavailable> + 1652495

    13   libswiftCore.so                    0x00002b9c715ef460 MutableCollection<>.sort(by:)
    + 771

    14   libswiftCore.so                    0x00002b9c715ef370 Sequence.sorted(by:)
    + 193

    15   tmpw5amscrz                        0x000055853a0b2d6e <unavailable> + 7534

    16   tmpw5amscrz                        0x000055853a0b28c1 <unavailable> + 6337

    17   libc.so.6                          0x00002b9c719c4460 __libc_start_main +
    245

    18   tmpw5amscrz                        0x000055853a0b23e9 <unavailable> + 5097

    '
  stdout: ''
  timestamp: 1660013248
- exit_code: -4
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let numbers = numbers.split(separator:\
    \ \" \")\n    let sortedNumbers = numbers.sorted { (lhs, rhs) -> Bool in\n   \
    \     return Int(lhs)! < Int(rhs)!\n    }\n    return sortedNumbers.joined(separator:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: Exception
  stderr: 'tmpnveobtux/tmpnveobtux.swift:10: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002aae6540fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aae65106561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002aae65106286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002aae6510613c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002aae65105bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpnveobtux                        0x000055ce1ceb503c <unavailable> + 8252

    6    libswiftCore.so                    0x00002aae65227c90 MutableCollection<>._insertionSort(within:sortedEnd:by:)
    + 770

    7    libswiftCore.so                    0x00002aae65228110 MutableCollection<>._insertionSort(within:by:)
    + 356

    8    libswiftCore.so                    0x00002aae65226d30 UnsafeMutableBufferPointer._stableSortImpl(by:)
    + 319

    9    libswiftCore.so                    0x00002aae65226d15 <unavailable> + 2616597

    10   libswiftCore.so                    0x00002aae6534c65a <unavailable> + 3819098

    11   libswiftCore.so                    0x00002aae6513b720 ContiguousArray.withContiguousMutableStorageIfAvailable<A>(_:)
    + 130

    12   libswiftCore.so                    0x00002aae6513b70f <unavailable> + 1652495

    13   libswiftCore.so                    0x00002aae65226460 MutableCollection<>.sort(by:)
    + 771

    14   libswiftCore.so                    0x00002aae65226370 Sequence.sorted(by:)
    + 193

    15   tmpnveobtux                        0x000055ce1ceb4d6e <unavailable> + 7534

    16   tmpnveobtux                        0x000055ce1ceb48c1 <unavailable> + 6337

    17   libc.so.6                          0x00002aae655fb460 __libc_start_main +
    245

    18   tmpnveobtux                        0x000055ce1ceb43e9 <unavailable> + 5097

    '
  stdout: ''
  timestamp: 1660013248
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let numbers = numbers.components(separatedBy:\
    \ \" \")\n    let sortedNumbers = numbers.sorted { (a, b) -> Bool in\n       \
    \ return number_to_int(number: a) < number_to_int(number: b)\n    }\n    return\
    \ sortedNumbers.joined(separator: \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers: \"three\"\
    ) == \"three\")\nassert(sort_numbers(numbers: \"three five nine\") == \"three\
    \ five nine\")\nassert(sort_numbers(numbers: \"five zero four seven nine eight\"\
    ) == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers: \"six\
    \ five four three two one zero\") == \"zero one two three four five six\")"
  status: SyntaxError
  stderr: "/tmp/tmpxt_pm919.swift:8:27: error: value of type 'String' has no member\
    \ 'components'\n    let numbers = numbers.components(separatedBy: \" \")\n   \
    \               ~~~~~~~ ^~~~~~~~~~\n/tmp/tmpxt_pm919.swift:10:16: error: cannot\
    \ find 'number_to_int' in scope\n        return number_to_int(number: a) < number_to_int(number:\
    \ b)\n               ^~~~~~~~~~~~~\n/tmp/tmpxt_pm919.swift:10:43: error: cannot\
    \ find 'number_to_int' in scope\n        return number_to_int(number: a) < number_to_int(number:\
    \ b)\n                                          ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013248
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let number_map =\
    \ [\"zero\": 0, \"one\": 1, \"two\": 2, \"three\": 3, \"four\": 4, \"five\": 5,\
    \ \"six\": 6, \"seven\": 7, \"eight\": 8, \"nine\": 9]\n    let numbers_array\
    \ = numbers.components(separatedBy: \" \")\n    let sorted_numbers = numbers_array.sorted\
    \ { (a, b) -> Bool in\n        return number_map[a]! < number_map[b]!\n    }\n\
    \    return sorted_numbers.joined(separator: \" \")\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp_zofnyg4.swift:9:33: error: value of type 'String' has no member\
    \ 'components'\n    let numbers_array = numbers.components(separatedBy: \" \"\
    )\n                        ~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013248
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let nums = numbers.components(separatedBy:\
    \ \" \")\n    let sorted = nums.sorted { (a, b) -> Bool in\n        return numeral_to_int(numeral:\
    \ a) < numeral_to_int(numeral: b)\n    }\n    return sorted.joined(separator:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmphscahzad.swift:8:24: error: value of type 'String' has no member\
    \ 'components'\n    let nums = numbers.components(separatedBy: \" \")\n      \
    \         ~~~~~~~ ^~~~~~~~~~\n/tmp/tmphscahzad.swift:10:16: error: cannot find\
    \ 'numeral_to_int' in scope\n        return numeral_to_int(numeral: a) < numeral_to_int(numeral:\
    \ b)\n               ^~~~~~~~~~~~~~\n/tmp/tmphscahzad.swift:10:45: error: cannot\
    \ find 'numeral_to_int' in scope\n        return numeral_to_int(numeral: a) <\
    \ numeral_to_int(numeral: b)\n                                            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013248
- exit_code: -4
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let nums = numbers.split(separator:\
    \ \" \")\n    let sorted = nums.sorted { (a, b) -> Bool in\n        return Int(a)!\
    \ < Int(b)!\n    }\n    return sorted.joined(separator: \" \")\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: Exception
  stderr: 'tmpynqhc_m4/tmpynqhc_m4.swift:10: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002b7a73162c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7a72e59561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b7a72e59286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b7a72e5913c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b7a72e58bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpynqhc_m4                        0x000055936b50a03c <unavailable> + 8252

    6    libswiftCore.so                    0x00002b7a72f7ac90 MutableCollection<>._insertionSort(within:sortedEnd:by:)
    + 770

    7    libswiftCore.so                    0x00002b7a72f7b110 MutableCollection<>._insertionSort(within:by:)
    + 356

    8    libswiftCore.so                    0x00002b7a72f79d30 UnsafeMutableBufferPointer._stableSortImpl(by:)
    + 319

    9    libswiftCore.so                    0x00002b7a72f79d15 <unavailable> + 2616597

    10   libswiftCore.so                    0x00002b7a7309f65a <unavailable> + 3819098

    11   libswiftCore.so                    0x00002b7a72e8e720 ContiguousArray.withContiguousMutableStorageIfAvailable<A>(_:)
    + 130

    12   libswiftCore.so                    0x00002b7a72e8e70f <unavailable> + 1652495

    13   libswiftCore.so                    0x00002b7a72f79460 MutableCollection<>.sort(by:)
    + 771

    14   libswiftCore.so                    0x00002b7a72f79370 Sequence.sorted(by:)
    + 193

    15   tmpynqhc_m4                        0x000055936b509d6e <unavailable> + 7534

    16   tmpynqhc_m4                        0x000055936b5098c1 <unavailable> + 6337

    17   libc.so.6                          0x00002b7a7334e460 __libc_start_main +
    245

    18   tmpynqhc_m4                        0x000055936b5093e9 <unavailable> + 5097

    '
  stdout: ''
  timestamp: 1660013248
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let nums = numbers.split(separator:\
    \ \" \")\n    let sorted = nums.sorted { (a, b) -> Bool in\n        return numeral_to_int(numeral:\
    \ String(a)) < numeral_to_int(numeral: String(b))\n    }\n    return sorted.joined(separator:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpn3cxro_7.swift:10:16: error: cannot find 'numeral_to_int' in scope\n\
    \        return numeral_to_int(numeral: String(a)) < numeral_to_int(numeral: String(b))\n\
    \               ^~~~~~~~~~~~~~\n/tmp/tmpn3cxro_7.swift:10:53: error: cannot find\
    \ 'numeral_to_int' in scope\n        return numeral_to_int(numeral: String(a))\
    \ < numeral_to_int(numeral: String(b))\n                                     \
    \               ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013248
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let nums = numbers.components(separatedBy:\
    \ \" \")\n    let sorted = nums.sorted { (a, b) -> Bool in\n        return number_to_int(number:\
    \ a) < number_to_int(number: b)\n    }\n    return sorted.joined(separator: \"\
    \ \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers: \"\
    \") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpwbtwbarw.swift:8:24: error: value of type 'String' has no member\
    \ 'components'\n    let nums = numbers.components(separatedBy: \" \")\n      \
    \         ~~~~~~~ ^~~~~~~~~~\n/tmp/tmpwbtwbarw.swift:10:16: error: cannot find\
    \ 'number_to_int' in scope\n        return number_to_int(number: a) < number_to_int(number:\
    \ b)\n               ^~~~~~~~~~~~~\n/tmp/tmpwbtwbarw.swift:10:43: error: cannot\
    \ find 'number_to_int' in scope\n        return number_to_int(number: a) < number_to_int(number:\
    \ b)\n                                          ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013248
- exit_code: 0
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let numbers = numbers.split(separator:\
    \ \" \")\n    let sortedNumbers = numbers.sorted {\n        switch ($0, $1) {\n\
    \        case (\"zero\", \"zero\"): return false\n        case (\"zero\", _):\
    \ return true\n        case (_, \"zero\"): return false\n        case (\"one\"\
    , \"one\"): return false\n        case (\"one\", _): return true\n        case\
    \ (_, \"one\"): return false\n        case (\"two\", \"two\"): return false\n\
    \        case (\"two\", _): return true\n        case (_, \"two\"): return false\n\
    \        case (\"three\", \"three\"): return false\n        case (\"three\", _):\
    \ return true\n        case (_, \"three\"): return false\n        case (\"four\"\
    , \"four\"): return false\n        case (\"four\", _): return true\n        case\
    \ (_, \"four\"): return false\n        case (\"five\", \"five\"): return false\n\
    \        case (\"five\", _): return true\n        case (_, \"five\"): return false\n\
    \        case (\"six\", \"six\"): return false\n        case (\"six\", _): return\
    \ true\n        case (_, \"six\"): return false\n        case (\"seven\", \"seven\"\
    ): return false\n        case (\"seven\", _): return true\n        case (_, \"\
    seven\"): return false\n        case (\"eight\", \"eight\"): return false\n  \
    \      case (\"eight\", _): return true\n        case (_, \"eight\"): return false\n\
    \        case (\"nine\", \"nine\"): return false\n        case (\"nine\", _):\
    \ return true\n        case (_, \"nine\"): return false\n        default: return\
    \ false\n        }\n    }\n    return sortedNumbers.joined(separator: \" \")\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013248
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let nums = numbers.components(separatedBy:\
    \ \" \")\n    let sorted = nums.sorted { (num1, num2) -> Bool in\n        return\
    \ num_to_int(num: num1) < num_to_int(num: num2)\n    }\n    return sorted.joined(separator:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp9938b65w.swift:8:24: error: value of type 'String' has no member\
    \ 'components'\n    let nums = numbers.components(separatedBy: \" \")\n      \
    \         ~~~~~~~ ^~~~~~~~~~\n/tmp/tmp9938b65w.swift:10:16: error: cannot find\
    \ 'num_to_int' in scope\n        return num_to_int(num: num1) < num_to_int(num:\
    \ num2)\n               ^~~~~~~~~~\n/tmp/tmp9938b65w.swift:10:40: error: cannot\
    \ find 'num_to_int' in scope\n        return num_to_int(num: num1) < num_to_int(num:\
    \ num2)\n                                       ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013248
- exit_code: -4
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let numbers = numbers.split(separator:\
    \ \" \")\n    let sortedNumbers = numbers.sorted { (lhs, rhs) -> Bool in\n   \
    \     return lhs < rhs\n    }\n    return sortedNumbers.joined(separator: \" \"\
    )\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: Exception
  stderr: 'tmpq27vhno_/tmpq27vhno_.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afd71583c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afd7127ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afd7127a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afd712797b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpq27vhno_                        0x000055b5d46a78b2 <unavailable> + 6322

    5    libc.so.6                          0x00002afd7176f460 __libc_start_main +
    245

    6    tmpq27vhno_                        0x000055b5d46a72e9 <unavailable> + 4841

    '
  stdout: ''
  timestamp: 1660013248
- exit_code: -4
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let nums = numbers.split(separator:\
    \ \" \")\n    let sorted = nums.sorted { (a, b) -> Bool in\n        return Int(a)!\
    \ < Int(b)!\n    }\n    return sorted.joined(separator: \" \")\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: Exception
  stderr: 'tmpynqhc_m4/tmpynqhc_m4.swift:10: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002b7a73162c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7a72e59561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b7a72e59286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b7a72e5913c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b7a72e58bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpynqhc_m4                        0x000055936b50a03c <unavailable> + 8252

    6    libswiftCore.so                    0x00002b7a72f7ac90 MutableCollection<>._insertionSort(within:sortedEnd:by:)
    + 770

    7    libswiftCore.so                    0x00002b7a72f7b110 MutableCollection<>._insertionSort(within:by:)
    + 356

    8    libswiftCore.so                    0x00002b7a72f79d30 UnsafeMutableBufferPointer._stableSortImpl(by:)
    + 319

    9    libswiftCore.so                    0x00002b7a72f79d15 <unavailable> + 2616597

    10   libswiftCore.so                    0x00002b7a7309f65a <unavailable> + 3819098

    11   libswiftCore.so                    0x00002b7a72e8e720 ContiguousArray.withContiguousMutableStorageIfAvailable<A>(_:)
    + 130

    12   libswiftCore.so                    0x00002b7a72e8e70f <unavailable> + 1652495

    13   libswiftCore.so                    0x00002b7a72f79460 MutableCollection<>.sort(by:)
    + 771

    14   libswiftCore.so                    0x00002b7a72f79370 Sequence.sorted(by:)
    + 193

    15   tmpynqhc_m4                        0x000055936b509d6e <unavailable> + 7534

    16   tmpynqhc_m4                        0x000055936b5098c1 <unavailable> + 6337

    17   libc.so.6                          0x00002b7a7334e460 __libc_start_main +
    245

    18   tmpynqhc_m4                        0x000055936b5093e9 <unavailable> + 5097

    '
  stdout: ''
  timestamp: 1660013248
- exit_code: -4
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let nums = numbers.split(separator:\
    \ \" \")\n    let sorted = nums.sorted { (lhs, rhs) -> Bool in\n        return\
    \ lhs < rhs\n    }\n    return sorted.joined(separator: \" \")\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: Exception
  stderr: 'tmp9je61adz/tmp9je61adz.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b35289f7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b35286eeb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b35286ee988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b35286ed7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9je61adz                        0x000055fb868548b2 <unavailable> + 6322

    5    libc.so.6                          0x00002b3528be3460 __libc_start_main +
    245

    6    tmp9je61adz                        0x000055fb868542e9 <unavailable> + 4841

    '
  stdout: ''
  timestamp: 1660013248
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let numbers = numbers.components(separatedBy:\
    \ \" \")\n    let sorted = numbers.sorted { (a, b) -> Bool in\n        return\
    \ number_to_int(number: a) < number_to_int(number: b)\n    }\n    return sorted.joined(separator:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpfj9tff4z.swift:8:27: error: value of type 'String' has no member\
    \ 'components'\n    let numbers = numbers.components(separatedBy: \" \")\n   \
    \               ~~~~~~~ ^~~~~~~~~~\n/tmp/tmpfj9tff4z.swift:10:16: error: cannot\
    \ find 'number_to_int' in scope\n        return number_to_int(number: a) < number_to_int(number:\
    \ b)\n               ^~~~~~~~~~~~~\n/tmp/tmpfj9tff4z.swift:10:43: error: cannot\
    \ find 'number_to_int' in scope\n        return number_to_int(number: a) < number_to_int(number:\
    \ b)\n                                          ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013248
- exit_code: -4
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let numberals =\
    \ numbers.split(separator: \" \")\n    let sorted = numberals.sorted { (lhs, rhs)\
    \ -> Bool in\n        return lhs < rhs\n    }\n    return sorted.joined(separator:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: Exception
  stderr: 'tmp3do_i0dx/tmp3do_i0dx.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac9cddc7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac9cdabeb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac9cdabe988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac9cdabd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3do_i0dx                        0x00005632b0b848b2 <unavailable> + 6322

    5    libc.so.6                          0x00002ac9cdfb3460 __libc_start_main +
    245

    6    tmp3do_i0dx                        0x00005632b0b842e9 <unavailable> + 4841

    '
  stdout: ''
  timestamp: 1660013248
- exit_code: 0
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let nums = numbers.split(separator:\
    \ \" \")\n    let sorted = nums.sorted {\n        switch $0 {\n        case \"\
    zero\":\n            return true\n        case \"one\":\n            return $1\
    \ != \"zero\"\n        case \"two\":\n            return $1 != \"zero\" && $1\
    \ != \"one\"\n        case \"three\":\n            return $1 != \"zero\" && $1\
    \ != \"one\" && $1 != \"two\"\n        case \"four\":\n            return $1 !=\
    \ \"zero\" && $1 != \"one\" && $1 != \"two\" && $1 != \"three\"\n        case\
    \ \"five\":\n            return $1 != \"zero\" && $1 != \"one\" && $1 != \"two\"\
    \ && $1 != \"three\" && $1 != \"four\"\n        case \"six\":\n            return\
    \ $1 != \"zero\" && $1 != \"one\" && $1 != \"two\" && $1 != \"three\" && $1 !=\
    \ \"four\" && $1 != \"five\"\n        case \"seven\":\n            return $1 !=\
    \ \"zero\" && $1 != \"one\" && $1 != \"two\" && $1 != \"three\" && $1 != \"four\"\
    \ && $1 != \"five\" && $1 != \"six\"\n        case \"eight\":\n            return\
    \ $1 != \"zero\" && $1 != \"one\" && $1 != \"two\" && $1 != \"three\" && $1 !=\
    \ \"four\" && $1 != \"five\" && $1 != \"six\" && $1 != \"seven\"\n        case\
    \ \"nine\":\n            return $1 != \"zero\" && $1 != \"one\" && $1 != \"two\"\
    \ && $1 != \"three\" && $1 != \"four\" && $1 != \"five\" && $1 != \"six\" && $1\
    \ != \"seven\" && $1 != \"eight\"\n        default:\n            return false\n\
    \        }\n    }\n    return sorted.joined(separator: \" \")\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013248
- exit_code: 0
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let numberals =\
    \ [\"zero\", \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\"\
    , \"eight\", \"nine\"]\n    let sorted = numbers.split(separator: \" \").sorted\
    \ {\n        numberals.firstIndex(of: String($0))! < numberals.firstIndex(of:\
    \ String($1))!\n    }\n    return sorted.joined(separator: \" \")\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013248
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let nums = numbers.components(separatedBy:\
    \ \" \")\n    let numsInt = nums.map { numberToInt(number: $0) }\n    let sorted\
    \ = numsInt.sorted()\n    let sortedNums = sorted.map { intToNumber(int: $0) }\n\
    \    return sortedNums.joined(separator: \" \")\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpfq7etlrn.swift:8:24: error: value of type 'String' has no member\
    \ 'components'\n    let nums = numbers.components(separatedBy: \" \")\n      \
    \         ~~~~~~~ ^~~~~~~~~~\n/tmp/tmpfq7etlrn.swift:9:30: error: cannot find\
    \ 'numberToInt' in scope\n    let numsInt = nums.map { numberToInt(number: $0)\
    \ }\n                             ^~~~~~~~~~~\n/tmp/tmpfq7etlrn.swift:11:35: error:\
    \ cannot find 'intToNumber' in scope\n    let sortedNums = sorted.map { intToNumber(int:\
    \ $0) }\n                                  ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013248
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let numberals =\
    \ [\"zero\", \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\"\
    , \"eight\", \"nine\"]\n    let input = numbers.components(separatedBy: \" \"\
    )\n    let sorted = input.sorted { (a, b) -> Bool in\n        return numberals.firstIndex(of:\
    \ a)! < numberals.firstIndex(of: b)!\n    }\n    return sorted.joined(separator:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmph_dbe68_.swift:9:25: error: value of type 'String' has no member\
    \ 'components'\n    let input = numbers.components(separatedBy: \" \")\n     \
    \           ~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013248
- exit_code: -4
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let nums = numbers.split(separator:\
    \ \" \")\n    let sorted = nums.sorted { (s1, s2) -> Bool in\n        let n1 =\
    \ Int(s1)!\n        let n2 = Int(s2)!\n        return n1 < n2\n    }\n    return\
    \ sorted.joined(separator: \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: Exception
  stderr: 'tmp34qrg8s1/tmp34qrg8s1.swift:10: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002b1e56b23c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1e5681a561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b1e5681a286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b1e5681a13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b1e56819bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmp34qrg8s1                        0x000056299ea2705f <unavailable> + 8287

    6    libswiftCore.so                    0x00002b1e5693bc90 MutableCollection<>._insertionSort(within:sortedEnd:by:)
    + 770

    7    libswiftCore.so                    0x00002b1e5693c110 MutableCollection<>._insertionSort(within:by:)
    + 356

    8    libswiftCore.so                    0x00002b1e5693ad30 UnsafeMutableBufferPointer._stableSortImpl(by:)
    + 319

    9    libswiftCore.so                    0x00002b1e5693ad15 <unavailable> + 2616597

    10   libswiftCore.so                    0x00002b1e56a6065a <unavailable> + 3819098

    11   libswiftCore.so                    0x00002b1e5684f720 ContiguousArray.withContiguousMutableStorageIfAvailable<A>(_:)
    + 130

    12   libswiftCore.so                    0x00002b1e5684f70f <unavailable> + 1652495

    13   libswiftCore.so                    0x00002b1e5693a460 MutableCollection<>.sort(by:)
    + 771

    14   libswiftCore.so                    0x00002b1e5693a370 Sequence.sorted(by:)
    + 193

    15   tmp34qrg8s1                        0x000056299ea26d6e <unavailable> + 7534

    16   tmp34qrg8s1                        0x000056299ea268c1 <unavailable> + 6337

    17   libc.so.6                          0x00002b1e56d0f460 __libc_start_main +
    245

    18   tmp34qrg8s1                        0x000056299ea263e9 <unavailable> + 5097

    '
  stdout: ''
  timestamp: 1660013248
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let numbers = numbers.components(separatedBy:\
    \ \" \")\n    let sorted = numbers.sorted { (first, second) -> Bool in\n     \
    \   return first < second\n    }\n    return sorted.joined(separator: \" \")\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmphh2hp5qm.swift:8:27: error: value of type 'String' has no member\
    \ 'components'\n    let numbers = numbers.components(separatedBy: \" \")\n   \
    \               ~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013248
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let numbers = numbers.components(separatedBy:\
    \ \" \")\n    let sortedNumbers = numbers.sorted { (a, b) -> Bool in\n       \
    \ return number_to_int(number: a) < number_to_int(number: b)\n    }\n    return\
    \ sortedNumbers.joined(separator: \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers: \"three\"\
    ) == \"three\")\nassert(sort_numbers(numbers: \"three five nine\") == \"three\
    \ five nine\")\nassert(sort_numbers(numbers: \"five zero four seven nine eight\"\
    ) == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers: \"six\
    \ five four three two one zero\") == \"zero one two three four five six\")"
  status: SyntaxError
  stderr: "/tmp/tmpxt_pm919.swift:8:27: error: value of type 'String' has no member\
    \ 'components'\n    let numbers = numbers.components(separatedBy: \" \")\n   \
    \               ~~~~~~~ ^~~~~~~~~~\n/tmp/tmpxt_pm919.swift:10:16: error: cannot\
    \ find 'number_to_int' in scope\n        return number_to_int(number: a) < number_to_int(number:\
    \ b)\n               ^~~~~~~~~~~~~\n/tmp/tmpxt_pm919.swift:10:43: error: cannot\
    \ find 'number_to_int' in scope\n        return number_to_int(number: a) < number_to_int(number:\
    \ b)\n                                          ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013248
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let numberals =\
    \ numbers.components(separatedBy: \" \")\n    let sorted = numberals.sorted {\
    \ (a, b) -> Bool in\n        return number_to_int(number: a) < number_to_int(number:\
    \ b)\n    }\n    return sorted.joined(separator: \" \")\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpvt0yo0yf.swift:8:29: error: value of type 'String' has no member\
    \ 'components'\n    let numberals = numbers.components(separatedBy: \" \")\n \
    \                   ~~~~~~~ ^~~~~~~~~~\n/tmp/tmpvt0yo0yf.swift:10:16: error: cannot\
    \ find 'number_to_int' in scope\n        return number_to_int(number: a) < number_to_int(number:\
    \ b)\n               ^~~~~~~~~~~~~\n/tmp/tmpvt0yo0yf.swift:10:43: error: cannot\
    \ find 'number_to_int' in scope\n        return number_to_int(number: a) < number_to_int(number:\
    \ b)\n                                          ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013248
- exit_code: -4
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let numbers = numbers.split(separator:\
    \ \" \")\n    let sortedNumbers = numbers.sorted { (lhs, rhs) -> Bool in\n   \
    \     return lhs < rhs\n    }\n    return sortedNumbers.joined(separator: \" \"\
    )\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: Exception
  stderr: 'tmpq27vhno_/tmpq27vhno_.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afd71583c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afd7127ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afd7127a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afd712797b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpq27vhno_                        0x000055b5d46a78b2 <unavailable> + 6322

    5    libc.so.6                          0x00002afd7176f460 __libc_start_main +
    245

    6    tmpq27vhno_                        0x000055b5d46a72e9 <unavailable> + 4841

    '
  stdout: ''
  timestamp: 1660013248
- exit_code: 0
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let numberals =\
    \ [\"zero\", \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\"\
    , \"eight\", \"nine\"]\n    let sorted = numbers.split(separator: \" \").sorted\
    \ { numberals.firstIndex(of: String($0))! < numberals.firstIndex(of: String($1))!\
    \ }\n    return sorted.joined(separator: \" \")\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013248
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let nums = numbers.components(separatedBy:\
    \ \" \")\n    let sorted = nums.sorted { (a, b) -> Bool in\n        return number_to_int(number:\
    \ a) < number_to_int(number: b)\n    }\n    return sorted.joined(separator: \"\
    \ \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers: \"\
    \") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpwbtwbarw.swift:8:24: error: value of type 'String' has no member\
    \ 'components'\n    let nums = numbers.components(separatedBy: \" \")\n      \
    \         ~~~~~~~ ^~~~~~~~~~\n/tmp/tmpwbtwbarw.swift:10:16: error: cannot find\
    \ 'number_to_int' in scope\n        return number_to_int(number: a) < number_to_int(number:\
    \ b)\n               ^~~~~~~~~~~~~\n/tmp/tmpwbtwbarw.swift:10:43: error: cannot\
    \ find 'number_to_int' in scope\n        return number_to_int(number: a) < number_to_int(number:\
    \ b)\n                                          ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013248
- exit_code: 0
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let numberals =\
    \ [\"zero\", \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\"\
    , \"eight\", \"nine\"]\n    let sorted = numbers.split(separator: \" \").sorted\
    \ { numberals.firstIndex(of: String($0))! < numberals.firstIndex(of: String($1))!\
    \ }\n    return sorted.joined(separator: \" \")\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013248
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let words = numbers.split(separator:\
    \ \" \")\n    let sorted = words.sorted { (a, b) -> Bool in\n        return number_to_int(number:\
    \ String(a)) < number_to_int(number: String(b))\n    }\n    return sorted.joined(separator:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpys73657x.swift:10:16: error: cannot find 'number_to_int' in scope\n\
    \        return number_to_int(number: String(a)) < number_to_int(number: String(b))\n\
    \               ^~~~~~~~~~~~~\n/tmp/tmpys73657x.swift:10:51: error: cannot find\
    \ 'number_to_int' in scope\n        return number_to_int(number: String(a)) <\
    \ number_to_int(number: String(b))\n                                         \
    \         ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013249
- exit_code: -4
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let nums = numbers.split(separator:\
    \ \" \")\n    let sorted = nums.sorted { (lhs, rhs) -> Bool in\n        return\
    \ Int(lhs)! < Int(rhs)!\n    }\n    return sorted.joined(separator: \" \")\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: Exception
  stderr: 'tmpb_vkuxt6/tmpb_vkuxt6.swift:10: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002b7961dacc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7961aa3561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b7961aa3286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b7961aa313c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b7961aa2bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpb_vkuxt6                        0x000056122102803c <unavailable> + 8252

    6    libswiftCore.so                    0x00002b7961bc4c90 MutableCollection<>._insertionSort(within:sortedEnd:by:)
    + 770

    7    libswiftCore.so                    0x00002b7961bc5110 MutableCollection<>._insertionSort(within:by:)
    + 356

    8    libswiftCore.so                    0x00002b7961bc3d30 UnsafeMutableBufferPointer._stableSortImpl(by:)
    + 319

    9    libswiftCore.so                    0x00002b7961bc3d15 <unavailable> + 2616597

    10   libswiftCore.so                    0x00002b7961ce965a <unavailable> + 3819098

    11   libswiftCore.so                    0x00002b7961ad8720 ContiguousArray.withContiguousMutableStorageIfAvailable<A>(_:)
    + 130

    12   libswiftCore.so                    0x00002b7961ad870f <unavailable> + 1652495

    13   libswiftCore.so                    0x00002b7961bc3460 MutableCollection<>.sort(by:)
    + 771

    14   libswiftCore.so                    0x00002b7961bc3370 Sequence.sorted(by:)
    + 193

    15   tmpb_vkuxt6                        0x0000561221027d6e <unavailable> + 7534

    16   tmpb_vkuxt6                        0x00005612210278c1 <unavailable> + 6337

    17   libc.so.6                          0x00002b7961f98460 __libc_start_main +
    245

    18   tmpb_vkuxt6                        0x00005612210273e9 <unavailable> + 5097

    '
  stdout: ''
  timestamp: 1660013249
- exit_code: -4
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let nums = numbers.split(separator:\
    \ \" \")\n    let sorted = nums.sorted { (lhs, rhs) -> Bool in\n        return\
    \ lhs < rhs\n    }\n    return sorted.joined(separator: \" \")\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: Exception
  stderr: 'tmp9je61adz/tmp9je61adz.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b35289f7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b35286eeb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b35286ee988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b35286ed7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9je61adz                        0x000055fb868548b2 <unavailable> + 6322

    5    libc.so.6                          0x00002b3528be3460 __libc_start_main +
    245

    6    tmp9je61adz                        0x000055fb868542e9 <unavailable> + 4841

    '
  stdout: ''
  timestamp: 1660013248
- exit_code: 0
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let numberals =\
    \ [\"zero\", \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\"\
    , \"eight\", \"nine\"]\n    let sortedNumbers = numbers.split(separator: \" \"\
    ).sorted { (lhs, rhs) -> Bool in\n        return numberals.firstIndex(of: String(lhs))!\
    \ < numberals.firstIndex(of: String(rhs))!\n    }\n    return sortedNumbers.joined(separator:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013249
- exit_code: 0
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let numberals =\
    \ [\"zero\", \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\"\
    , \"eight\", \"nine\"]\n    let sortedNumbers = numbers.split(separator: \" \"\
    ).sorted { numberals.firstIndex(of: String($0))! < numberals.firstIndex(of: String($1))!\
    \ }\n    return sortedNumbers.joined(separator: \" \")\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013249
- exit_code: 0
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let numberals =\
    \ [\"zero\", \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\"\
    , \"eight\", \"nine\"]\n    let sorted = numbers.split(separator: \" \").sorted\
    \ { numberals.firstIndex(of: String($0))! < numberals.firstIndex(of: String($1))!\
    \ }\n    return sorted.joined(separator: \" \")\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013248
- exit_code: -4
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let nums = numbers.split(separator:\
    \ \" \")\n    let sorted = nums.sorted { (a, b) -> Bool in\n        return Int(a)!\
    \ < Int(b)!\n    }\n    return sorted.joined(separator: \" \")\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: Exception
  stderr: 'tmpynqhc_m4/tmpynqhc_m4.swift:10: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002b7a73162c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7a72e59561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b7a72e59286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b7a72e5913c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b7a72e58bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpynqhc_m4                        0x000055936b50a03c <unavailable> + 8252

    6    libswiftCore.so                    0x00002b7a72f7ac90 MutableCollection<>._insertionSort(within:sortedEnd:by:)
    + 770

    7    libswiftCore.so                    0x00002b7a72f7b110 MutableCollection<>._insertionSort(within:by:)
    + 356

    8    libswiftCore.so                    0x00002b7a72f79d30 UnsafeMutableBufferPointer._stableSortImpl(by:)
    + 319

    9    libswiftCore.so                    0x00002b7a72f79d15 <unavailable> + 2616597

    10   libswiftCore.so                    0x00002b7a7309f65a <unavailable> + 3819098

    11   libswiftCore.so                    0x00002b7a72e8e720 ContiguousArray.withContiguousMutableStorageIfAvailable<A>(_:)
    + 130

    12   libswiftCore.so                    0x00002b7a72e8e70f <unavailable> + 1652495

    13   libswiftCore.so                    0x00002b7a72f79460 MutableCollection<>.sort(by:)
    + 771

    14   libswiftCore.so                    0x00002b7a72f79370 Sequence.sorted(by:)
    + 193

    15   tmpynqhc_m4                        0x000055936b509d6e <unavailable> + 7534

    16   tmpynqhc_m4                        0x000055936b5098c1 <unavailable> + 6337

    17   libc.so.6                          0x00002b7a7334e460 __libc_start_main +
    245

    18   tmpynqhc_m4                        0x000055936b5093e9 <unavailable> + 5097

    '
  stdout: ''
  timestamp: 1660013248
- exit_code: -4
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let nums = numbers.split(separator:\
    \ \" \")\n    let sorted = nums.sorted { (a, b) -> Bool in\n        return Int(a)!\
    \ < Int(b)!\n    }\n    return sorted.joined(separator: \" \")\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: Exception
  stderr: 'tmpynqhc_m4/tmpynqhc_m4.swift:10: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002b7a73162c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7a72e59561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b7a72e59286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b7a72e5913c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b7a72e58bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpynqhc_m4                        0x000055936b50a03c <unavailable> + 8252

    6    libswiftCore.so                    0x00002b7a72f7ac90 MutableCollection<>._insertionSort(within:sortedEnd:by:)
    + 770

    7    libswiftCore.so                    0x00002b7a72f7b110 MutableCollection<>._insertionSort(within:by:)
    + 356

    8    libswiftCore.so                    0x00002b7a72f79d30 UnsafeMutableBufferPointer._stableSortImpl(by:)
    + 319

    9    libswiftCore.so                    0x00002b7a72f79d15 <unavailable> + 2616597

    10   libswiftCore.so                    0x00002b7a7309f65a <unavailable> + 3819098

    11   libswiftCore.so                    0x00002b7a72e8e720 ContiguousArray.withContiguousMutableStorageIfAvailable<A>(_:)
    + 130

    12   libswiftCore.so                    0x00002b7a72e8e70f <unavailable> + 1652495

    13   libswiftCore.so                    0x00002b7a72f79460 MutableCollection<>.sort(by:)
    + 771

    14   libswiftCore.so                    0x00002b7a72f79370 Sequence.sorted(by:)
    + 193

    15   tmpynqhc_m4                        0x000055936b509d6e <unavailable> + 7534

    16   tmpynqhc_m4                        0x000055936b5098c1 <unavailable> + 6337

    17   libc.so.6                          0x00002b7a7334e460 __libc_start_main +
    245

    18   tmpynqhc_m4                        0x000055936b5093e9 <unavailable> + 5097

    '
  stdout: ''
  timestamp: 1660013248
- exit_code: 0
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let numberals =\
    \ [\"zero\", \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\"\
    , \"eight\", \"nine\"]\n    let nums = numbers.split(separator: \" \")\n    var\
    \ nums_int = [Int]()\n    for num in nums {\n        nums_int.append(numberals.firstIndex(of:\
    \ String(num))!)\n    }\n    nums_int.sort()\n    var result = \"\"\n    for num\
    \ in nums_int {\n        result += numberals[num] + \" \"\n    }\n    return String(result.dropLast())\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013249
- exit_code: 0
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let nums = numbers.split(separator:\
    \ \" \")\n    var nums_int = [Int]()\n    for num in nums {\n        switch num\
    \ {\n        case \"zero\":\n            nums_int.append(0)\n        case \"one\"\
    :\n            nums_int.append(1)\n        case \"two\":\n            nums_int.append(2)\n\
    \        case \"three\":\n            nums_int.append(3)\n        case \"four\"\
    :\n            nums_int.append(4)\n        case \"five\":\n            nums_int.append(5)\n\
    \        case \"six\":\n            nums_int.append(6)\n        case \"seven\"\
    :\n            nums_int.append(7)\n        case \"eight\":\n            nums_int.append(8)\n\
    \        case \"nine\":\n            nums_int.append(9)\n        default:\n  \
    \          print(\"Invalid input\")\n        }\n    }\n    nums_int.sort()\n \
    \   var nums_str = [String]()\n    for num in nums_int {\n        switch num {\n\
    \        case 0:\n            nums_str.append(\"zero\")\n        case 1:\n   \
    \         nums_str.append(\"one\")\n        case 2:\n            nums_str.append(\"\
    two\")\n        case 3:\n            nums_str.append(\"three\")\n        case\
    \ 4:\n            nums_str.append(\"four\")\n        case 5:\n            nums_str.append(\"\
    five\")\n        case 6:\n            nums_str.append(\"six\")\n        case 7:\n\
    \            nums_str.append(\"seven\")\n        case 8:\n            nums_str.append(\"\
    eight\")\n        case 9:\n            nums_str.append(\"nine\")\n        default:\n\
    \            print(\"Invalid input\")\n        }\n    }\n    return nums_str.joined(separator:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013249
- exit_code: -4
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let nums = numbers.split(separator:\
    \ \" \")\n    let sorted = nums.sorted(by: {\n        return Int(String($0))!\
    \ < Int(String($1))!\n    })\n    return sorted.joined(separator: \" \")\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: Exception
  stderr: 'tmppmnnnf58/tmppmnnnf58.swift:10: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002b49f0c4ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b49f0945561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b49f0945286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b49f094513c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b49f0944bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmppmnnnf58                        0x0000559e9e31000d <unavailable> + 8205

    6    libswiftCore.so                    0x00002b49f0a66c90 MutableCollection<>._insertionSort(within:sortedEnd:by:)
    + 770

    7    libswiftCore.so                    0x00002b49f0a67110 MutableCollection<>._insertionSort(within:by:)
    + 356

    8    libswiftCore.so                    0x00002b49f0a65d30 UnsafeMutableBufferPointer._stableSortImpl(by:)
    + 319

    9    libswiftCore.so                    0x00002b49f0a65d15 <unavailable> + 2616597

    10   libswiftCore.so                    0x00002b49f0b8b65a <unavailable> + 3819098

    11   libswiftCore.so                    0x00002b49f097a720 ContiguousArray.withContiguousMutableStorageIfAvailable<A>(_:)
    + 130

    12   libswiftCore.so                    0x00002b49f097a70f <unavailable> + 1652495

    13   libswiftCore.so                    0x00002b49f0a65460 MutableCollection<>.sort(by:)
    + 771

    14   libswiftCore.so                    0x00002b49f0a65370 Sequence.sorted(by:)
    + 193

    15   tmppmnnnf58                        0x0000559e9e30fdae <unavailable> + 7598

    16   tmppmnnnf58                        0x0000559e9e30f901 <unavailable> + 6401

    17   libc.so.6                          0x00002b49f0e3a460 __libc_start_main +
    245

    18   tmppmnnnf58                        0x0000559e9e30f429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1660013249
- exit_code: -4
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let nums = numbers.split(separator:\
    \ \" \")\n    let sorted = nums.sorted { (a, b) -> Bool in\n        return Int(a)!\
    \ < Int(b)!\n    }\n    return sorted.joined(separator: \" \")\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: Exception
  stderr: 'tmpynqhc_m4/tmpynqhc_m4.swift:10: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002b7a73162c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7a72e59561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b7a72e59286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b7a72e5913c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b7a72e58bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpynqhc_m4                        0x000055936b50a03c <unavailable> + 8252

    6    libswiftCore.so                    0x00002b7a72f7ac90 MutableCollection<>._insertionSort(within:sortedEnd:by:)
    + 770

    7    libswiftCore.so                    0x00002b7a72f7b110 MutableCollection<>._insertionSort(within:by:)
    + 356

    8    libswiftCore.so                    0x00002b7a72f79d30 UnsafeMutableBufferPointer._stableSortImpl(by:)
    + 319

    9    libswiftCore.so                    0x00002b7a72f79d15 <unavailable> + 2616597

    10   libswiftCore.so                    0x00002b7a7309f65a <unavailable> + 3819098

    11   libswiftCore.so                    0x00002b7a72e8e720 ContiguousArray.withContiguousMutableStorageIfAvailable<A>(_:)
    + 130

    12   libswiftCore.so                    0x00002b7a72e8e70f <unavailable> + 1652495

    13   libswiftCore.so                    0x00002b7a72f79460 MutableCollection<>.sort(by:)
    + 771

    14   libswiftCore.so                    0x00002b7a72f79370 Sequence.sorted(by:)
    + 193

    15   tmpynqhc_m4                        0x000055936b509d6e <unavailable> + 7534

    16   tmpynqhc_m4                        0x000055936b5098c1 <unavailable> + 6337

    17   libc.so.6                          0x00002b7a7334e460 __libc_start_main +
    245

    18   tmpynqhc_m4                        0x000055936b5093e9 <unavailable> + 5097

    '
  stdout: ''
  timestamp: 1660013248
- exit_code: 0
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let numberals =\
    \ [\"zero\", \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\"\
    , \"eight\", \"nine\"]\n    let sorted = numbers.split(separator: \" \").map {\
    \ String($0) }.sorted { numberals.firstIndex(of: $0)! < numberals.firstIndex(of:\
    \ $1)! }\n    return sorted.joined(separator: \" \")\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013249
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let nums = numbers.components(separatedBy:\
    \ \" \")\n    let sorted = nums.sorted { (a, b) -> Bool in\n        return Int(a)!\
    \ < Int(b)!\n    }\n    return sorted.joined(separator: \" \")\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp0ithea0v.swift:8:24: error: value of type 'String' has no member\
    \ 'components'\n    let nums = numbers.components(separatedBy: \" \")\n      \
    \         ~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013249
- exit_code: -4
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let nums = numbers.split(separator:\
    \ \" \")\n    let sorted = nums.sorted { (s1, s2) -> Bool in\n        return s1\
    \ < s2\n    }\n    return sorted.joined(separator: \" \")\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: Exception
  stderr: 'tmp1_baq3it/tmp1_baq3it.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adad45a5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adad429cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adad429c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adad429b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1_baq3it                        0x0000563f31c9b8b2 <unavailable> + 6322

    5    libc.so.6                          0x00002adad4791460 __libc_start_main +
    245

    6    tmp1_baq3it                        0x0000563f31c9b2e9 <unavailable> + 4841

    '
  stdout: ''
  timestamp: 1660013249
- exit_code: -4
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let nums = numbers.split(separator:\
    \ \" \")\n    let sorted = nums.sorted { (lhs, rhs) -> Bool in\n        return\
    \ lhs < rhs\n    }\n    return sorted.joined(separator: \" \")\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: Exception
  stderr: 'tmp9je61adz/tmp9je61adz.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b35289f7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b35286eeb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b35286ee988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b35286ed7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9je61adz                        0x000055fb868548b2 <unavailable> + 6322

    5    libc.so.6                          0x00002b3528be3460 __libc_start_main +
    245

    6    tmp9je61adz                        0x000055fb868542e9 <unavailable> + 4841

    '
  stdout: ''
  timestamp: 1660013248
- exit_code: 0
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let numberals =\
    \ [\"zero\", \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\"\
    , \"eight\", \"nine\"]\n    let nums = numbers.split(separator: \" \")\n    let\
    \ sorted = nums.sorted { (a, b) -> Bool in\n        return numberals.firstIndex(of:\
    \ String(a))! < numberals.firstIndex(of: String(b))!\n    }\n    return sorted.joined(separator:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013249
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let nums = numbers.split(separator:\
    \ \" \")\n    let sorted = nums.sorted { (a, b) -> Bool in\n        return number_to_int(number:\
    \ String(a)) < number_to_int(number: String(b))\n    }\n    return sorted.joined(separator:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp53yhqnlo.swift:10:16: error: cannot find 'number_to_int' in scope\n\
    \        return number_to_int(number: String(a)) < number_to_int(number: String(b))\n\
    \               ^~~~~~~~~~~~~\n/tmp/tmp53yhqnlo.swift:10:51: error: cannot find\
    \ 'number_to_int' in scope\n        return number_to_int(number: String(a)) <\
    \ number_to_int(number: String(b))\n                                         \
    \         ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013249
- exit_code: -4
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let nums = numbers.split(separator:\
    \ \" \")\n    let sorted = nums.sorted { (a, b) -> Bool in\n        return Int(a)!\
    \ < Int(b)!\n    }\n    return sorted.joined(separator: \" \")\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: Exception
  stderr: 'tmpynqhc_m4/tmpynqhc_m4.swift:10: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002b7a73162c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7a72e59561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b7a72e59286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b7a72e5913c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b7a72e58bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpynqhc_m4                        0x000055936b50a03c <unavailable> + 8252

    6    libswiftCore.so                    0x00002b7a72f7ac90 MutableCollection<>._insertionSort(within:sortedEnd:by:)
    + 770

    7    libswiftCore.so                    0x00002b7a72f7b110 MutableCollection<>._insertionSort(within:by:)
    + 356

    8    libswiftCore.so                    0x00002b7a72f79d30 UnsafeMutableBufferPointer._stableSortImpl(by:)
    + 319

    9    libswiftCore.so                    0x00002b7a72f79d15 <unavailable> + 2616597

    10   libswiftCore.so                    0x00002b7a7309f65a <unavailable> + 3819098

    11   libswiftCore.so                    0x00002b7a72e8e720 ContiguousArray.withContiguousMutableStorageIfAvailable<A>(_:)
    + 130

    12   libswiftCore.so                    0x00002b7a72e8e70f <unavailable> + 1652495

    13   libswiftCore.so                    0x00002b7a72f79460 MutableCollection<>.sort(by:)
    + 771

    14   libswiftCore.so                    0x00002b7a72f79370 Sequence.sorted(by:)
    + 193

    15   tmpynqhc_m4                        0x000055936b509d6e <unavailable> + 7534

    16   tmpynqhc_m4                        0x000055936b5098c1 <unavailable> + 6337

    17   libc.so.6                          0x00002b7a7334e460 __libc_start_main +
    245

    18   tmpynqhc_m4                        0x000055936b5093e9 <unavailable> + 5097

    '
  stdout: ''
  timestamp: 1660013248
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let nums = numbers.components(separatedBy:\
    \ \" \")\n    let sorted = nums.sorted { (a, b) -> Bool in\n        return number_to_int(number:\
    \ a) < number_to_int(number: b)\n    }\n    return sorted.joined(separator: \"\
    \ \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers: \"\
    \") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpwbtwbarw.swift:8:24: error: value of type 'String' has no member\
    \ 'components'\n    let nums = numbers.components(separatedBy: \" \")\n      \
    \         ~~~~~~~ ^~~~~~~~~~\n/tmp/tmpwbtwbarw.swift:10:16: error: cannot find\
    \ 'number_to_int' in scope\n        return number_to_int(number: a) < number_to_int(number:\
    \ b)\n               ^~~~~~~~~~~~~\n/tmp/tmpwbtwbarw.swift:10:43: error: cannot\
    \ find 'number_to_int' in scope\n        return number_to_int(number: a) < number_to_int(number:\
    \ b)\n                                          ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013248
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let nums = numbers.split(separator:\
    \ \" \")\n    let sorted = nums.sorted { (a, b) -> Bool in\n        return number_to_int(number:\
    \ String(a)) < number_to_int(number: String(b))\n    }\n    return sorted.joined(separator:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp53yhqnlo.swift:10:16: error: cannot find 'number_to_int' in scope\n\
    \        return number_to_int(number: String(a)) < number_to_int(number: String(b))\n\
    \               ^~~~~~~~~~~~~\n/tmp/tmp53yhqnlo.swift:10:51: error: cannot find\
    \ 'number_to_int' in scope\n        return number_to_int(number: String(a)) <\
    \ number_to_int(number: String(b))\n                                         \
    \         ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013249
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let nums = numbers.components(separatedBy:\
    \ \" \")\n    let sorted = nums.sorted { (a, b) -> Bool in\n        return number_to_int(number:\
    \ a) < number_to_int(number: b)\n    }\n    return sorted.joined(separator: \"\
    \ \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers: \"\
    \") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpwbtwbarw.swift:8:24: error: value of type 'String' has no member\
    \ 'components'\n    let nums = numbers.components(separatedBy: \" \")\n      \
    \         ~~~~~~~ ^~~~~~~~~~\n/tmp/tmpwbtwbarw.swift:10:16: error: cannot find\
    \ 'number_to_int' in scope\n        return number_to_int(number: a) < number_to_int(number:\
    \ b)\n               ^~~~~~~~~~~~~\n/tmp/tmpwbtwbarw.swift:10:43: error: cannot\
    \ find 'number_to_int' in scope\n        return number_to_int(number: a) < number_to_int(number:\
    \ b)\n                                          ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013248
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let nums = numbers.components(separatedBy:\
    \ \" \")\n    let sorted = nums.sorted { (a, b) -> Bool in\n        return numeral_to_int(numeral:\
    \ a) < numeral_to_int(numeral: b)\n    }\n    return sorted.joined(separator:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmphscahzad.swift:8:24: error: value of type 'String' has no member\
    \ 'components'\n    let nums = numbers.components(separatedBy: \" \")\n      \
    \         ~~~~~~~ ^~~~~~~~~~\n/tmp/tmphscahzad.swift:10:16: error: cannot find\
    \ 'numeral_to_int' in scope\n        return numeral_to_int(numeral: a) < numeral_to_int(numeral:\
    \ b)\n               ^~~~~~~~~~~~~~\n/tmp/tmphscahzad.swift:10:45: error: cannot\
    \ find 'numeral_to_int' in scope\n        return numeral_to_int(numeral: a) <\
    \ numeral_to_int(numeral: b)\n                                            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013248
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let nums = numbers.components(separatedBy:\
    \ \" \")\n    let sorted = nums.sorted { (a, b) -> Bool in\n        return numeral_to_int(numeral:\
    \ a) < numeral_to_int(numeral: b)\n    }\n    return sorted.joined(separator:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmphscahzad.swift:8:24: error: value of type 'String' has no member\
    \ 'components'\n    let nums = numbers.components(separatedBy: \" \")\n      \
    \         ~~~~~~~ ^~~~~~~~~~\n/tmp/tmphscahzad.swift:10:16: error: cannot find\
    \ 'numeral_to_int' in scope\n        return numeral_to_int(numeral: a) < numeral_to_int(numeral:\
    \ b)\n               ^~~~~~~~~~~~~~\n/tmp/tmphscahzad.swift:10:45: error: cannot\
    \ find 'numeral_to_int' in scope\n        return numeral_to_int(numeral: a) <\
    \ numeral_to_int(numeral: b)\n                                            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013248
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let numbers = numbers.split(separator:\
    \ \" \")\n    let sortedNumbers = numbers.sorted { (a, b) -> Bool in\n       \
    \ return number_to_int(number: String(a)) < number_to_int(number: String(b))\n\
    \    }\n    return sortedNumbers.joined(separator: \" \")\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpn780nhdo.swift:10:16: error: cannot find 'number_to_int' in scope\n\
    \        return number_to_int(number: String(a)) < number_to_int(number: String(b))\n\
    \               ^~~~~~~~~~~~~\n/tmp/tmpn780nhdo.swift:10:51: error: cannot find\
    \ 'number_to_int' in scope\n        return number_to_int(number: String(a)) <\
    \ number_to_int(number: String(b))\n                                         \
    \         ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013249
- exit_code: -4
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let nums = numbers.split(separator:\
    \ \" \")\n    let sorted = nums.sorted { (a, b) -> Bool in\n        return a <\
    \ b\n    }\n    return sorted.joined(separator: \" \")\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: Exception
  stderr: 'tmp_hc9gjie/tmp_hc9gjie.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab0e95bec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab0e92b5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab0e92b5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab0e92b47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_hc9gjie                        0x0000560ce17cf8b2 <unavailable> + 6322

    5    libc.so.6                          0x00002ab0e97aa460 __libc_start_main +
    245

    6    tmp_hc9gjie                        0x0000560ce17cf2e9 <unavailable> + 4841

    '
  stdout: ''
  timestamp: 1660013249
- exit_code: 0
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let numberals =\
    \ [\"zero\", \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\"\
    , \"eight\", \"nine\"]\n    let sorted = numbers.split(separator: \" \").sorted\
    \ { numberals.firstIndex(of: String($0))! < numberals.firstIndex(of: String($1))!\
    \ }\n    return sorted.joined(separator: \" \")\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013248
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let nums = numbers.components(separatedBy:\
    \ \" \")\n    let sorted = nums.sorted { (a, b) -> Bool in\n        return number_to_int(number:\
    \ a) < number_to_int(number: b)\n    }\n    return sorted.joined(separator: \"\
    \ \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers: \"\
    \") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpwbtwbarw.swift:8:24: error: value of type 'String' has no member\
    \ 'components'\n    let nums = numbers.components(separatedBy: \" \")\n      \
    \         ~~~~~~~ ^~~~~~~~~~\n/tmp/tmpwbtwbarw.swift:10:16: error: cannot find\
    \ 'number_to_int' in scope\n        return number_to_int(number: a) < number_to_int(number:\
    \ b)\n               ^~~~~~~~~~~~~\n/tmp/tmpwbtwbarw.swift:10:43: error: cannot\
    \ find 'number_to_int' in scope\n        return number_to_int(number: a) < number_to_int(number:\
    \ b)\n                                          ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013248
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let numbers = numbers.split(separator:\
    \ \" \")\n    let sorted = numbers.sorted { (a, b) -> Bool in\n        return\
    \ number_to_int(number: String(a)) < number_to_int(number: String(b))\n    }\n\
    \    return sorted.joined(separator: \" \")\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpmrnzbegd.swift:10:16: error: cannot find 'number_to_int' in scope\n\
    \        return number_to_int(number: String(a)) < number_to_int(number: String(b))\n\
    \               ^~~~~~~~~~~~~\n/tmp/tmpmrnzbegd.swift:10:51: error: cannot find\
    \ 'number_to_int' in scope\n        return number_to_int(number: String(a)) <\
    \ number_to_int(number: String(b))\n                                         \
    \         ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013249
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let nums = numbers.components(separatedBy:\
    \ \" \")\n    let sorted = nums.sorted { (a, b) -> Bool in\n        return numeral_to_int(numeral:\
    \ a) < numeral_to_int(numeral: b)\n    }\n    return sorted.joined(separator:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmphscahzad.swift:8:24: error: value of type 'String' has no member\
    \ 'components'\n    let nums = numbers.components(separatedBy: \" \")\n      \
    \         ~~~~~~~ ^~~~~~~~~~\n/tmp/tmphscahzad.swift:10:16: error: cannot find\
    \ 'numeral_to_int' in scope\n        return numeral_to_int(numeral: a) < numeral_to_int(numeral:\
    \ b)\n               ^~~~~~~~~~~~~~\n/tmp/tmphscahzad.swift:10:45: error: cannot\
    \ find 'numeral_to_int' in scope\n        return numeral_to_int(numeral: a) <\
    \ numeral_to_int(numeral: b)\n                                            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013248
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let numberals =\
    \ numbers.components(separatedBy: \" \")\n    let sortedNumberals = numberals.sorted\
    \ { (n1, n2) -> Bool in\n        return numberToInt(number: n1) < numberToInt(number:\
    \ n2)\n    }\n    return sortedNumberals.joined(separator: \" \")\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp8i7rfo1o.swift:8:29: error: value of type 'String' has no member\
    \ 'components'\n    let numberals = numbers.components(separatedBy: \" \")\n \
    \                   ~~~~~~~ ^~~~~~~~~~\n/tmp/tmp8i7rfo1o.swift:10:16: error: cannot\
    \ find 'numberToInt' in scope\n        return numberToInt(number: n1) < numberToInt(number:\
    \ n2)\n               ^~~~~~~~~~~\n/tmp/tmp8i7rfo1o.swift:10:42: error: cannot\
    \ find 'numberToInt' in scope\n        return numberToInt(number: n1) < numberToInt(number:\
    \ n2)\n                                         ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013249
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let nums = numbers.components(separatedBy:\
    \ \" \")\n    let sorted = nums.sorted { (a, b) -> Bool in\n        return numeral_to_int(numeral:\
    \ a) < numeral_to_int(numeral: b)\n    }\n    return sorted.joined(separator:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmphscahzad.swift:8:24: error: value of type 'String' has no member\
    \ 'components'\n    let nums = numbers.components(separatedBy: \" \")\n      \
    \         ~~~~~~~ ^~~~~~~~~~\n/tmp/tmphscahzad.swift:10:16: error: cannot find\
    \ 'numeral_to_int' in scope\n        return numeral_to_int(numeral: a) < numeral_to_int(numeral:\
    \ b)\n               ^~~~~~~~~~~~~~\n/tmp/tmphscahzad.swift:10:45: error: cannot\
    \ find 'numeral_to_int' in scope\n        return numeral_to_int(numeral: a) <\
    \ numeral_to_int(numeral: b)\n                                            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013248
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let nums = numbers.components(separatedBy:\
    \ \" \")\n    let sorted = nums.sorted { (a, b) -> Bool in\n        return number_to_int(number:\
    \ a) < number_to_int(number: b)\n    }\n    return sorted.joined(separator: \"\
    \ \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers: \"\
    \") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpwbtwbarw.swift:8:24: error: value of type 'String' has no member\
    \ 'components'\n    let nums = numbers.components(separatedBy: \" \")\n      \
    \         ~~~~~~~ ^~~~~~~~~~\n/tmp/tmpwbtwbarw.swift:10:16: error: cannot find\
    \ 'number_to_int' in scope\n        return number_to_int(number: a) < number_to_int(number:\
    \ b)\n               ^~~~~~~~~~~~~\n/tmp/tmpwbtwbarw.swift:10:43: error: cannot\
    \ find 'number_to_int' in scope\n        return number_to_int(number: a) < number_to_int(number:\
    \ b)\n                                          ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013248
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let nums = numbers.components(separatedBy:\
    \ \" \")\n    let sorted = nums.sorted { (a, b) -> Bool in\n        return numeral_to_int(numeral:\
    \ a) < numeral_to_int(numeral: b)\n    }\n    return sorted.joined(separator:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmphscahzad.swift:8:24: error: value of type 'String' has no member\
    \ 'components'\n    let nums = numbers.components(separatedBy: \" \")\n      \
    \         ~~~~~~~ ^~~~~~~~~~\n/tmp/tmphscahzad.swift:10:16: error: cannot find\
    \ 'numeral_to_int' in scope\n        return numeral_to_int(numeral: a) < numeral_to_int(numeral:\
    \ b)\n               ^~~~~~~~~~~~~~\n/tmp/tmphscahzad.swift:10:45: error: cannot\
    \ find 'numeral_to_int' in scope\n        return numeral_to_int(numeral: a) <\
    \ numeral_to_int(numeral: b)\n                                            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013248
- exit_code: -4
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let numbers = numbers.split(separator:\
    \ \" \")\n    let sortedNumbers = numbers.sorted { (s1, s2) -> Bool in\n     \
    \   return s1 < s2\n    }\n    return sortedNumbers.joined(separator: \" \")\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: Exception
  stderr: 'tmp8dnivsyh/tmp8dnivsyh.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab544576c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab54426db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab54426d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab54426c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8dnivsyh                        0x00005622815ae8b2 <unavailable> + 6322

    5    libc.so.6                          0x00002ab544762460 __libc_start_main +
    245

    6    tmp8dnivsyh                        0x00005622815ae2e9 <unavailable> + 4841

    '
  stdout: ''
  timestamp: 1660013249
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let nums = numbers.components(separatedBy:\
    \ \" \")\n    let numsInt = nums.map { Int(wordToNumeral[$0]!) }\n    let sortedNums\
    \ = numsInt.sorted()\n    let sortedNumsStr = sortedNums.map { numeralToWord[String($0)]!\
    \ }\n    return sortedNumsStr.joined(separator: \" \")\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpdeeelhy6.swift:8:24: error: value of type 'String' has no member\
    \ 'components'\n    let nums = numbers.components(separatedBy: \" \")\n      \
    \         ~~~~~~~ ^~~~~~~~~~\n/tmp/tmpdeeelhy6.swift:9:34: error: cannot find\
    \ 'wordToNumeral' in scope\n    let numsInt = nums.map { Int(wordToNumeral[$0]!)\
    \ }\n                                 ^~~~~~~~~~~~~\n/tmp/tmpdeeelhy6.swift:11:42:\
    \ error: cannot find 'numeralToWord' in scope\n    let sortedNumsStr = sortedNums.map\
    \ { numeralToWord[String($0)]! }\n                                         ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013249
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let nums = numbers.components(separatedBy:\
    \ \" \")\n    let sorted = nums.sorted { (a, b) -> Bool in\n        return number_to_int(number:\
    \ a) < number_to_int(number: b)\n    }\n    return sorted.joined(separator: \"\
    \ \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers: \"\
    \") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpwbtwbarw.swift:8:24: error: value of type 'String' has no member\
    \ 'components'\n    let nums = numbers.components(separatedBy: \" \")\n      \
    \         ~~~~~~~ ^~~~~~~~~~\n/tmp/tmpwbtwbarw.swift:10:16: error: cannot find\
    \ 'number_to_int' in scope\n        return number_to_int(number: a) < number_to_int(number:\
    \ b)\n               ^~~~~~~~~~~~~\n/tmp/tmpwbtwbarw.swift:10:43: error: cannot\
    \ find 'number_to_int' in scope\n        return number_to_int(number: a) < number_to_int(number:\
    \ b)\n                                          ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013248
- exit_code: -4
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let nums = numbers.split(separator:\
    \ \" \")\n    let sorted = nums.sorted { (lhs, rhs) -> Bool in\n        return\
    \ Int(lhs)! < Int(rhs)!\n    }\n    return sorted.joined(separator: \" \")\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: Exception
  stderr: 'tmpb_vkuxt6/tmpb_vkuxt6.swift:10: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002b7961dacc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7961aa3561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b7961aa3286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b7961aa313c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b7961aa2bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpb_vkuxt6                        0x000056122102803c <unavailable> + 8252

    6    libswiftCore.so                    0x00002b7961bc4c90 MutableCollection<>._insertionSort(within:sortedEnd:by:)
    + 770

    7    libswiftCore.so                    0x00002b7961bc5110 MutableCollection<>._insertionSort(within:by:)
    + 356

    8    libswiftCore.so                    0x00002b7961bc3d30 UnsafeMutableBufferPointer._stableSortImpl(by:)
    + 319

    9    libswiftCore.so                    0x00002b7961bc3d15 <unavailable> + 2616597

    10   libswiftCore.so                    0x00002b7961ce965a <unavailable> + 3819098

    11   libswiftCore.so                    0x00002b7961ad8720 ContiguousArray.withContiguousMutableStorageIfAvailable<A>(_:)
    + 130

    12   libswiftCore.so                    0x00002b7961ad870f <unavailable> + 1652495

    13   libswiftCore.so                    0x00002b7961bc3460 MutableCollection<>.sort(by:)
    + 771

    14   libswiftCore.so                    0x00002b7961bc3370 Sequence.sorted(by:)
    + 193

    15   tmpb_vkuxt6                        0x0000561221027d6e <unavailable> + 7534

    16   tmpb_vkuxt6                        0x00005612210278c1 <unavailable> + 6337

    17   libc.so.6                          0x00002b7961f98460 __libc_start_main +
    245

    18   tmpb_vkuxt6                        0x00005612210273e9 <unavailable> + 5097

    '
  stdout: ''
  timestamp: 1660013249
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let numberals =\
    \ [\"zero\", \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\"\
    , \"eight\", \"nine\"]\n    let numbers = numbers.components(separatedBy: \" \"\
    )\n    let sorted = numbers.sorted { (s1, s2) -> Bool in\n        return numberals.index(of:\
    \ s1)! < numberals.index(of: s2)!\n    }\n    return sorted.joined(separator:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpx6wp82vp.swift:9:27: error: value of type 'String' has no member\
    \ 'components'\n    let numbers = numbers.components(separatedBy: \" \")\n   \
    \               ~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013249
- exit_code: -4
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let numbers = numbers.split(separator:\
    \ \" \")\n    let sortedNumbers = numbers.sorted { (first, second) -> Bool in\n\
    \        return first < second\n    }\n    return sortedNumbers.joined(separator:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: Exception
  stderr: 'tmpahja2gmd/tmpahja2gmd.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9d6dd8bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9d6da82b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9d6da82988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9d6da817b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpahja2gmd                        0x000055835fb128b2 <unavailable> + 6322

    5    libc.so.6                          0x00002b9d6df77460 __libc_start_main +
    245

    6    tmpahja2gmd                        0x000055835fb122e9 <unavailable> + 4841

    '
  stdout: ''
  timestamp: 1660013248
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    return numbers.split(separator:\
    \ \" \").sorted(by: { number_to_int(number: String($0)) < number_to_int(number:\
    \ String($1)) }).joined(separator: \" \")\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpzh35_z2h.swift:8:55: error: cannot find 'number_to_int' in scope\n\
    \    return numbers.split(separator: \" \").sorted(by: { number_to_int(number:\
    \ String($0)) < number_to_int(number: String($1)) }).joined(separator: \" \")\n\
    \                                                      ^~~~~~~~~~~~~\n/tmp/tmpzh35_z2h.swift:8:91:\
    \ error: cannot find 'number_to_int' in scope\n    return numbers.split(separator:\
    \ \" \").sorted(by: { number_to_int(number: String($0)) < number_to_int(number:\
    \ String($1)) }).joined(separator: \" \")\n                                  \
    \                                                        ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013249
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let nums = numbers.components(separatedBy:\
    \ \" \")\n    let sorted = nums.sorted { (a, b) -> Bool in\n        return numeral_to_int(numeral:\
    \ a) < numeral_to_int(numeral: b)\n    }\n    return sorted.joined(separator:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmphscahzad.swift:8:24: error: value of type 'String' has no member\
    \ 'components'\n    let nums = numbers.components(separatedBy: \" \")\n      \
    \         ~~~~~~~ ^~~~~~~~~~\n/tmp/tmphscahzad.swift:10:16: error: cannot find\
    \ 'numeral_to_int' in scope\n        return numeral_to_int(numeral: a) < numeral_to_int(numeral:\
    \ b)\n               ^~~~~~~~~~~~~~\n/tmp/tmphscahzad.swift:10:45: error: cannot\
    \ find 'numeral_to_int' in scope\n        return numeral_to_int(numeral: a) <\
    \ numeral_to_int(numeral: b)\n                                            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013248
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let numbers = numbers.split(separator:\
    \ \" \")\n    let sorted = numbers.sorted { (a, b) -> Bool in\n        return\
    \ number_to_int(number: String(a)) < number_to_int(number: String(b))\n    }\n\
    \    return sorted.joined(separator: \" \")\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpmrnzbegd.swift:10:16: error: cannot find 'number_to_int' in scope\n\
    \        return number_to_int(number: String(a)) < number_to_int(number: String(b))\n\
    \               ^~~~~~~~~~~~~\n/tmp/tmpmrnzbegd.swift:10:51: error: cannot find\
    \ 'number_to_int' in scope\n        return number_to_int(number: String(a)) <\
    \ number_to_int(number: String(b))\n                                         \
    \         ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013249
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let nums = numbers.split(separator:\
    \ \" \")\n    let sorted = nums.sorted { (a, b) -> Bool in\n        return number_to_int(number:\
    \ String(a)) < number_to_int(number: String(b))\n    }\n    return sorted.joined(separator:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp53yhqnlo.swift:10:16: error: cannot find 'number_to_int' in scope\n\
    \        return number_to_int(number: String(a)) < number_to_int(number: String(b))\n\
    \               ^~~~~~~~~~~~~\n/tmp/tmp53yhqnlo.swift:10:51: error: cannot find\
    \ 'number_to_int' in scope\n        return number_to_int(number: String(a)) <\
    \ number_to_int(number: String(b))\n                                         \
    \         ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013249
- exit_code: -4
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let nums = numbers.split(separator:\
    \ \" \")\n    let sorted = nums.sorted { (a, b) -> Bool in\n        return Int(a)!\
    \ < Int(b)!\n    }\n    return sorted.joined(separator: \" \")\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: Exception
  stderr: 'tmpynqhc_m4/tmpynqhc_m4.swift:10: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002b7a73162c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7a72e59561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b7a72e59286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b7a72e5913c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b7a72e58bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpynqhc_m4                        0x000055936b50a03c <unavailable> + 8252

    6    libswiftCore.so                    0x00002b7a72f7ac90 MutableCollection<>._insertionSort(within:sortedEnd:by:)
    + 770

    7    libswiftCore.so                    0x00002b7a72f7b110 MutableCollection<>._insertionSort(within:by:)
    + 356

    8    libswiftCore.so                    0x00002b7a72f79d30 UnsafeMutableBufferPointer._stableSortImpl(by:)
    + 319

    9    libswiftCore.so                    0x00002b7a72f79d15 <unavailable> + 2616597

    10   libswiftCore.so                    0x00002b7a7309f65a <unavailable> + 3819098

    11   libswiftCore.so                    0x00002b7a72e8e720 ContiguousArray.withContiguousMutableStorageIfAvailable<A>(_:)
    + 130

    12   libswiftCore.so                    0x00002b7a72e8e70f <unavailable> + 1652495

    13   libswiftCore.so                    0x00002b7a72f79460 MutableCollection<>.sort(by:)
    + 771

    14   libswiftCore.so                    0x00002b7a72f79370 Sequence.sorted(by:)
    + 193

    15   tmpynqhc_m4                        0x000055936b509d6e <unavailable> + 7534

    16   tmpynqhc_m4                        0x000055936b5098c1 <unavailable> + 6337

    17   libc.so.6                          0x00002b7a7334e460 __libc_start_main +
    245

    18   tmpynqhc_m4                        0x000055936b5093e9 <unavailable> + 5097

    '
  stdout: ''
  timestamp: 1660013248
- exit_code: -4
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let nums = numbers.split(separator:\
    \ \" \")\n    let sorted = nums.sorted { (a, b) -> Bool in\n        return Int(a)!\
    \ < Int(b)!\n    }\n    return sorted.joined(separator: \" \")\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: Exception
  stderr: 'tmpynqhc_m4/tmpynqhc_m4.swift:10: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002b7a73162c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7a72e59561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b7a72e59286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b7a72e5913c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b7a72e58bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpynqhc_m4                        0x000055936b50a03c <unavailable> + 8252

    6    libswiftCore.so                    0x00002b7a72f7ac90 MutableCollection<>._insertionSort(within:sortedEnd:by:)
    + 770

    7    libswiftCore.so                    0x00002b7a72f7b110 MutableCollection<>._insertionSort(within:by:)
    + 356

    8    libswiftCore.so                    0x00002b7a72f79d30 UnsafeMutableBufferPointer._stableSortImpl(by:)
    + 319

    9    libswiftCore.so                    0x00002b7a72f79d15 <unavailable> + 2616597

    10   libswiftCore.so                    0x00002b7a7309f65a <unavailable> + 3819098

    11   libswiftCore.so                    0x00002b7a72e8e720 ContiguousArray.withContiguousMutableStorageIfAvailable<A>(_:)
    + 130

    12   libswiftCore.so                    0x00002b7a72e8e70f <unavailable> + 1652495

    13   libswiftCore.so                    0x00002b7a72f79460 MutableCollection<>.sort(by:)
    + 771

    14   libswiftCore.so                    0x00002b7a72f79370 Sequence.sorted(by:)
    + 193

    15   tmpynqhc_m4                        0x000055936b509d6e <unavailable> + 7534

    16   tmpynqhc_m4                        0x000055936b5098c1 <unavailable> + 6337

    17   libc.so.6                          0x00002b7a7334e460 __libc_start_main +
    245

    18   tmpynqhc_m4                        0x000055936b5093e9 <unavailable> + 5097

    '
  stdout: ''
  timestamp: 1660013248
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let nums = numbers.components(separatedBy:\
    \ \" \")\n    let sorted = nums.sorted { (a, b) -> Bool in\n        return numeral_to_int(numeral:\
    \ a) < numeral_to_int(numeral: b)\n    }\n    return sorted.joined(separator:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmphscahzad.swift:8:24: error: value of type 'String' has no member\
    \ 'components'\n    let nums = numbers.components(separatedBy: \" \")\n      \
    \         ~~~~~~~ ^~~~~~~~~~\n/tmp/tmphscahzad.swift:10:16: error: cannot find\
    \ 'numeral_to_int' in scope\n        return numeral_to_int(numeral: a) < numeral_to_int(numeral:\
    \ b)\n               ^~~~~~~~~~~~~~\n/tmp/tmphscahzad.swift:10:45: error: cannot\
    \ find 'numeral_to_int' in scope\n        return numeral_to_int(numeral: a) <\
    \ numeral_to_int(numeral: b)\n                                            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013248
- exit_code: -4
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let nums = numbers.split(separator:\
    \ \" \")\n    let sorted = nums.sorted { (s1, s2) -> Bool in\n        return s1\
    \ < s2\n    }\n    return sorted.joined(separator: \" \")\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: Exception
  stderr: 'tmp1_baq3it/tmp1_baq3it.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adad45a5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adad429cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adad429c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adad429b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1_baq3it                        0x0000563f31c9b8b2 <unavailable> + 6322

    5    libc.so.6                          0x00002adad4791460 __libc_start_main +
    245

    6    tmp1_baq3it                        0x0000563f31c9b2e9 <unavailable> + 4841

    '
  stdout: ''
  timestamp: 1660013249
- exit_code: 0
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let numberals =\
    \ [\"zero\", \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\"\
    , \"eight\", \"nine\"]\n    let numbers = numbers.split(separator: \" \")\n  \
    \  let sortedNumbers = numbers.sorted { (lhs, rhs) -> Bool in\n        return\
    \ numberals.firstIndex(of: String(lhs))! < numberals.firstIndex(of: String(rhs))!\n\
    \    }\n    return sortedNumbers.joined(separator: \" \")\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013249
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let nums = numbers.components(separatedBy:\
    \ \" \")\n    let sorted = nums.sorted { (a, b) -> Bool in\n        return number_to_int(number:\
    \ a) < number_to_int(number: b)\n    }\n    return sorted.joined(separator: \"\
    \ \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers: \"\
    \") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpwbtwbarw.swift:8:24: error: value of type 'String' has no member\
    \ 'components'\n    let nums = numbers.components(separatedBy: \" \")\n      \
    \         ~~~~~~~ ^~~~~~~~~~\n/tmp/tmpwbtwbarw.swift:10:16: error: cannot find\
    \ 'number_to_int' in scope\n        return number_to_int(number: a) < number_to_int(number:\
    \ b)\n               ^~~~~~~~~~~~~\n/tmp/tmpwbtwbarw.swift:10:43: error: cannot\
    \ find 'number_to_int' in scope\n        return number_to_int(number: a) < number_to_int(number:\
    \ b)\n                                          ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013248
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let numberals =\
    \ [\"zero\", \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\"\
    , \"eight\", \"nine\"]\n    let input = numbers.components(separatedBy: \" \"\
    )\n    let sorted = input.sorted { numberals.index(of: $0)! < numberals.index(of:\
    \ $1)! }\n    return sorted.joined(separator: \" \")\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp4z5357s7.swift:9:25: error: value of type 'String' has no member\
    \ 'components'\n    let input = numbers.components(separatedBy: \" \")\n     \
    \           ~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013249
- exit_code: -4
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let nums = numbers.split(separator:\
    \ \" \")\n    let sorted = nums.sorted { (a, b) -> Bool in\n        return a <\
    \ b\n    }\n    return sorted.joined(separator: \" \")\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: Exception
  stderr: 'tmp_hc9gjie/tmp_hc9gjie.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab0e95bec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab0e92b5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab0e92b5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab0e92b47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_hc9gjie                        0x0000560ce17cf8b2 <unavailable> + 6322

    5    libc.so.6                          0x00002ab0e97aa460 __libc_start_main +
    245

    6    tmp_hc9gjie                        0x0000560ce17cf2e9 <unavailable> + 4841

    '
  stdout: ''
  timestamp: 1660013249
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let nums = numbers.components(separatedBy:\
    \ \" \")\n    let sorted = nums.sorted { (a, b) -> Bool in\n        return numeral_to_int(numeral:\
    \ a) < numeral_to_int(numeral: b)\n    }\n    return sorted.joined(separator:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmphscahzad.swift:8:24: error: value of type 'String' has no member\
    \ 'components'\n    let nums = numbers.components(separatedBy: \" \")\n      \
    \         ~~~~~~~ ^~~~~~~~~~\n/tmp/tmphscahzad.swift:10:16: error: cannot find\
    \ 'numeral_to_int' in scope\n        return numeral_to_int(numeral: a) < numeral_to_int(numeral:\
    \ b)\n               ^~~~~~~~~~~~~~\n/tmp/tmphscahzad.swift:10:45: error: cannot\
    \ find 'numeral_to_int' in scope\n        return numeral_to_int(numeral: a) <\
    \ numeral_to_int(numeral: b)\n                                            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013248
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let nums = numbers.split(separator:\
    \ \" \")\n    let sorted = nums.sorted { (a, b) -> Bool in\n        return number_to_int(number:\
    \ String(a)) < number_to_int(number: String(b))\n    }\n    return sorted.joined(separator:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp53yhqnlo.swift:10:16: error: cannot find 'number_to_int' in scope\n\
    \        return number_to_int(number: String(a)) < number_to_int(number: String(b))\n\
    \               ^~~~~~~~~~~~~\n/tmp/tmp53yhqnlo.swift:10:51: error: cannot find\
    \ 'number_to_int' in scope\n        return number_to_int(number: String(a)) <\
    \ number_to_int(number: String(b))\n                                         \
    \         ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013249
- exit_code: -4
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let numberals =\
    \ numbers.split(separator: \" \")\n    let sortedNumberals = numberals.sorted\
    \ { (lhs, rhs) -> Bool in\n        return lhs < rhs\n    }\n    return sortedNumberals.joined(separator:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: Exception
  stderr: 'tmpp8mghs_f/tmpp8mghs_f.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aed36e0fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aed36b06b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aed36b06988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aed36b057b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp8mghs_f                        0x0000560e73f198b2 <unavailable> + 6322

    5    libc.so.6                          0x00002aed36ffb460 __libc_start_main +
    245

    6    tmpp8mghs_f                        0x0000560e73f192e9 <unavailable> + 4841

    '
  stdout: ''
  timestamp: 1660013249
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let nums = numbers.split(separator:\
    \ \" \")\n    let sorted = nums.sorted { (a, b) -> Bool in\n        return number_to_int(number:\
    \ String(a)) < number_to_int(number: String(b))\n    }\n    return sorted.joined(separator:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp53yhqnlo.swift:10:16: error: cannot find 'number_to_int' in scope\n\
    \        return number_to_int(number: String(a)) < number_to_int(number: String(b))\n\
    \               ^~~~~~~~~~~~~\n/tmp/tmp53yhqnlo.swift:10:51: error: cannot find\
    \ 'number_to_int' in scope\n        return number_to_int(number: String(a)) <\
    \ number_to_int(number: String(b))\n                                         \
    \         ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013249
- exit_code: -4
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let numbers = numbers.split(separator:\
    \ \" \")\n    let sortedNumbers = numbers.sorted { (lhs, rhs) -> Bool in\n   \
    \     return lhs.count < rhs.count\n    }\n    return sortedNumbers.joined(separator:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: Exception
  stderr: 'tmpsu80tvc_/tmpsu80tvc_.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8d9ca94c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8d9c78bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8d9c78b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8d9c78a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsu80tvc_                        0x0000557a238078e2 <unavailable> + 6370

    5    libc.so.6                          0x00002b8d9cc80460 __libc_start_main +
    245

    6    tmpsu80tvc_                        0x0000557a23807319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1660013249
- exit_code: 0
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let number_map:\
    \ [String: Int] = [\n        \"zero\": 0,\n        \"one\": 1,\n        \"two\"\
    : 2,\n        \"three\": 3,\n        \"four\": 4,\n        \"five\": 5,\n    \
    \    \"six\": 6,\n        \"seven\": 7,\n        \"eight\": 8,\n        \"nine\"\
    : 9\n    ]\n    let numbers_array = numbers.split(separator: \" \")\n    let sorted_numbers\
    \ = numbers_array.sorted { (a, b) -> Bool in\n        return number_map[String(a)]!\
    \ < number_map[String(b)]!\n    }\n    return sorted_numbers.joined(separator:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013249
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let number_map =\
    \ [\"zero\": 0, \"one\": 1, \"two\": 2, \"three\": 3, \"four\": 4, \"five\": 5,\
    \ \"six\": 6, \"seven\": 7, \"eight\": 8, \"nine\": 9]\n    let numbers_array\
    \ = numbers.components(separatedBy: \" \")\n    let sorted_numbers = numbers_array.sorted\
    \ { (a, b) -> Bool in\n        return number_map[a]! < number_map[b]!\n    }\n\
    \    return sorted_numbers.joined(separator: \" \")\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp_zofnyg4.swift:9:33: error: value of type 'String' has no member\
    \ 'components'\n    let numbers_array = numbers.components(separatedBy: \" \"\
    )\n                        ~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013248
- exit_code: 0
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let nums = numbers.split(separator:\
    \ \" \")\n    var nums_int: [Int] = []\n    for num in nums {\n        switch\
    \ num {\n        case \"zero\":\n            nums_int.append(0)\n        case\
    \ \"one\":\n            nums_int.append(1)\n        case \"two\":\n          \
    \  nums_int.append(2)\n        case \"three\":\n            nums_int.append(3)\n\
    \        case \"four\":\n            nums_int.append(4)\n        case \"five\"\
    :\n            nums_int.append(5)\n        case \"six\":\n            nums_int.append(6)\n\
    \        case \"seven\":\n            nums_int.append(7)\n        case \"eight\"\
    :\n            nums_int.append(8)\n        case \"nine\":\n            nums_int.append(9)\n\
    \        default:\n            print(\"Invalid input\")\n        }\n    }\n  \
    \  let sorted_nums = nums_int.sorted()\n    var sorted_nums_str: [String] = []\n\
    \    for num in sorted_nums {\n        switch num {\n        case 0:\n       \
    \     sorted_nums_str.append(\"zero\")\n        case 1:\n            sorted_nums_str.append(\"\
    one\")\n        case 2:\n            sorted_nums_str.append(\"two\")\n       \
    \ case 3:\n            sorted_nums_str.append(\"three\")\n        case 4:\n  \
    \          sorted_nums_str.append(\"four\")\n        case 5:\n            sorted_nums_str.append(\"\
    five\")\n        case 6:\n            sorted_nums_str.append(\"six\")\n      \
    \  case 7:\n            sorted_nums_str.append(\"seven\")\n        case 8:\n \
    \           sorted_nums_str.append(\"eight\")\n        case 9:\n            sorted_nums_str.append(\"\
    nine\")\n        default:\n            print(\"Invalid input\")\n        }\n \
    \   }\n    return sorted_nums_str.joined(separator: \" \")\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013249
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let number_map =\
    \ [\"zero\": 0, \"one\": 1, \"two\": 2, \"three\": 3, \"four\": 4, \"five\": 5,\
    \ \"six\": 6, \"seven\": 7, \"eight\": 8, \"nine\": 9]\n    let numbers_array\
    \ = numbers.components(separatedBy: \" \")\n    let sorted_numbers = numbers_array.sorted\
    \ { (a, b) -> Bool in\n        return number_map[a]! < number_map[b]!\n    }\n\
    \    return sorted_numbers.joined(separator: \" \")\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp_zofnyg4.swift:9:33: error: value of type 'String' has no member\
    \ 'components'\n    let numbers_array = numbers.components(separatedBy: \" \"\
    )\n                        ~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013248
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let nums = numbers.components(separatedBy:\
    \ \" \")\n    let sorted = nums.sorted { (a, b) -> Bool in\n        return number_to_int(number:\
    \ a) < number_to_int(number: b)\n    }\n    return sorted.joined(separator: \"\
    \ \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers: \"\
    \") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpwbtwbarw.swift:8:24: error: value of type 'String' has no member\
    \ 'components'\n    let nums = numbers.components(separatedBy: \" \")\n      \
    \         ~~~~~~~ ^~~~~~~~~~\n/tmp/tmpwbtwbarw.swift:10:16: error: cannot find\
    \ 'number_to_int' in scope\n        return number_to_int(number: a) < number_to_int(number:\
    \ b)\n               ^~~~~~~~~~~~~\n/tmp/tmpwbtwbarw.swift:10:43: error: cannot\
    \ find 'number_to_int' in scope\n        return number_to_int(number: a) < number_to_int(number:\
    \ b)\n                                          ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013248
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let nums = numbers.split(separator:\
    \ \" \")\n    let sorted = nums.sorted { (a, b) -> Bool in\n        return numeral_to_int(numeral:\
    \ String(a)) < numeral_to_int(numeral: String(b))\n    }\n    return sorted.joined(separator:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpn3cxro_7.swift:10:16: error: cannot find 'numeral_to_int' in scope\n\
    \        return numeral_to_int(numeral: String(a)) < numeral_to_int(numeral: String(b))\n\
    \               ^~~~~~~~~~~~~~\n/tmp/tmpn3cxro_7.swift:10:53: error: cannot find\
    \ 'numeral_to_int' in scope\n        return numeral_to_int(numeral: String(a))\
    \ < numeral_to_int(numeral: String(b))\n                                     \
    \               ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013248
- exit_code: -4
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let nums = numbers.split(separator:\
    \ \" \")\n    let sorted = nums.sorted { (a, b) -> Bool in\n        return Int(a)!\
    \ < Int(b)!\n    }\n    return sorted.joined(separator: \" \")\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: Exception
  stderr: 'tmpynqhc_m4/tmpynqhc_m4.swift:10: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002b7a73162c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7a72e59561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b7a72e59286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b7a72e5913c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b7a72e58bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpynqhc_m4                        0x000055936b50a03c <unavailable> + 8252

    6    libswiftCore.so                    0x00002b7a72f7ac90 MutableCollection<>._insertionSort(within:sortedEnd:by:)
    + 770

    7    libswiftCore.so                    0x00002b7a72f7b110 MutableCollection<>._insertionSort(within:by:)
    + 356

    8    libswiftCore.so                    0x00002b7a72f79d30 UnsafeMutableBufferPointer._stableSortImpl(by:)
    + 319

    9    libswiftCore.so                    0x00002b7a72f79d15 <unavailable> + 2616597

    10   libswiftCore.so                    0x00002b7a7309f65a <unavailable> + 3819098

    11   libswiftCore.so                    0x00002b7a72e8e720 ContiguousArray.withContiguousMutableStorageIfAvailable<A>(_:)
    + 130

    12   libswiftCore.so                    0x00002b7a72e8e70f <unavailable> + 1652495

    13   libswiftCore.so                    0x00002b7a72f79460 MutableCollection<>.sort(by:)
    + 771

    14   libswiftCore.so                    0x00002b7a72f79370 Sequence.sorted(by:)
    + 193

    15   tmpynqhc_m4                        0x000055936b509d6e <unavailable> + 7534

    16   tmpynqhc_m4                        0x000055936b5098c1 <unavailable> + 6337

    17   libc.so.6                          0x00002b7a7334e460 __libc_start_main +
    245

    18   tmpynqhc_m4                        0x000055936b5093e9 <unavailable> + 5097

    '
  stdout: ''
  timestamp: 1660013248
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let nums = numbers.split(separator:\
    \ \" \")\n    let sorted = nums.sorted { (a, b) -> Bool in\n        return number_to_int(number:\
    \ String(a)) < number_to_int(number: String(b))\n    }\n    return sorted.joined(separator:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp53yhqnlo.swift:10:16: error: cannot find 'number_to_int' in scope\n\
    \        return number_to_int(number: String(a)) < number_to_int(number: String(b))\n\
    \               ^~~~~~~~~~~~~\n/tmp/tmp53yhqnlo.swift:10:51: error: cannot find\
    \ 'number_to_int' in scope\n        return number_to_int(number: String(a)) <\
    \ number_to_int(number: String(b))\n                                         \
    \         ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013249
- exit_code: -4
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let nums = numbers.split(separator:\
    \ \" \")\n    let sorted = nums.sorted { (a, b) -> Bool in\n        return a.count\
    \ < b.count\n    }\n    return sorted.joined(separator: \" \")\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: Exception
  stderr: 'tmpimtn9rgn/tmpimtn9rgn.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b46e076cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b46e0463b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b46e0463988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b46e04627b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpimtn9rgn                        0x000055ce566828e2 <unavailable> + 6370

    5    libc.so.6                          0x00002b46e0958460 __libc_start_main +
    245

    6    tmpimtn9rgn                        0x000055ce56682319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1660013249
- exit_code: 0
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let nums = numbers.split(separator:\
    \ \" \")\n    let sorted = nums.sorted(by: {\n        switch $0 {\n        case\
    \ \"zero\":\n            return true\n        case \"one\":\n            return\
    \ $1 != \"zero\"\n        case \"two\":\n            return $1 != \"zero\" &&\
    \ $1 != \"one\"\n        case \"three\":\n            return $1 != \"zero\" &&\
    \ $1 != \"one\" && $1 != \"two\"\n        case \"four\":\n            return $1\
    \ != \"zero\" && $1 != \"one\" && $1 != \"two\" && $1 != \"three\"\n        case\
    \ \"five\":\n            return $1 != \"zero\" && $1 != \"one\" && $1 != \"two\"\
    \ && $1 != \"three\" && $1 != \"four\"\n        case \"six\":\n            return\
    \ $1 != \"zero\" && $1 != \"one\" && $1 != \"two\" && $1 != \"three\" && $1 !=\
    \ \"four\" && $1 != \"five\"\n        case \"seven\":\n            return $1 !=\
    \ \"zero\" && $1 != \"one\" && $1 != \"two\" && $1 != \"three\" && $1 != \"four\"\
    \ && $1 != \"five\" && $1 != \"six\"\n        case \"eight\":\n            return\
    \ $1 != \"zero\" && $1 != \"one\" && $1 != \"two\" && $1 != \"three\" && $1 !=\
    \ \"four\" && $1 != \"five\" && $1 != \"six\" && $1 != \"seven\"\n        case\
    \ \"nine\":\n            return $1 != \"zero\" && $1 != \"one\" && $1 != \"two\"\
    \ && $1 != \"three\" && $1 != \"four\" && $1 != \"five\" && $1 != \"six\" && $1\
    \ != \"seven\" && $1 != \"eight\"\n        default:\n            return false\n\
    \        }\n    })\n    return sorted.joined(separator: \" \")\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013249
- exit_code: 0
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let number_map =\
    \ [\"zero\": 0, \"one\": 1, \"two\": 2, \"three\": 3, \"four\": 4, \"five\": 5,\
    \ \"six\": 6, \"seven\": 7, \"eight\": 8, \"nine\": 9]\n    let number_array =\
    \ numbers.split(separator: \" \")\n    let sorted_array = number_array.sorted\
    \ { (a, b) -> Bool in\n        return number_map[String(a)]! < number_map[String(b)]!\n\
    \    }\n    return sorted_array.joined(separator: \" \")\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013249
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let numeral_dict\
    \ = [\"zero\": 0, \"one\": 1, \"two\": 2, \"three\": 3, \"four\": 4, \"five\"\
    : 5, \"six\": 6, \"seven\": 7, \"eight\": 8, \"nine\": 9]\n    let numeral_array\
    \ = numbers.components(separatedBy: \" \")\n    let sorted_array = numeral_array.sorted\
    \ { (numeral1, numeral2) -> Bool in\n        return numeral_dict[numeral1]! <\
    \ numeral_dict[numeral2]!\n    }\n    return sorted_array.joined(separator: \"\
    \ \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers: \"\
    \") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp30ic32sh.swift:9:33: error: value of type 'String' has no member\
    \ 'components'\n    let numeral_array = numbers.components(separatedBy: \" \"\
    )\n                        ~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013249
- exit_code: -4
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let nums = numbers.split(separator:\
    \ \" \")\n    let sorted = nums.sorted { (a, b) -> Bool in\n        return Int(a)!\
    \ < Int(b)!\n    }\n    return sorted.joined(separator: \" \")\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: Exception
  stderr: 'tmpynqhc_m4/tmpynqhc_m4.swift:10: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002b7a73162c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7a72e59561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b7a72e59286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b7a72e5913c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b7a72e58bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpynqhc_m4                        0x000055936b50a03c <unavailable> + 8252

    6    libswiftCore.so                    0x00002b7a72f7ac90 MutableCollection<>._insertionSort(within:sortedEnd:by:)
    + 770

    7    libswiftCore.so                    0x00002b7a72f7b110 MutableCollection<>._insertionSort(within:by:)
    + 356

    8    libswiftCore.so                    0x00002b7a72f79d30 UnsafeMutableBufferPointer._stableSortImpl(by:)
    + 319

    9    libswiftCore.so                    0x00002b7a72f79d15 <unavailable> + 2616597

    10   libswiftCore.so                    0x00002b7a7309f65a <unavailable> + 3819098

    11   libswiftCore.so                    0x00002b7a72e8e720 ContiguousArray.withContiguousMutableStorageIfAvailable<A>(_:)
    + 130

    12   libswiftCore.so                    0x00002b7a72e8e70f <unavailable> + 1652495

    13   libswiftCore.so                    0x00002b7a72f79460 MutableCollection<>.sort(by:)
    + 771

    14   libswiftCore.so                    0x00002b7a72f79370 Sequence.sorted(by:)
    + 193

    15   tmpynqhc_m4                        0x000055936b509d6e <unavailable> + 7534

    16   tmpynqhc_m4                        0x000055936b5098c1 <unavailable> + 6337

    17   libc.so.6                          0x00002b7a7334e460 __libc_start_main +
    245

    18   tmpynqhc_m4                        0x000055936b5093e9 <unavailable> + 5097

    '
  stdout: ''
  timestamp: 1660013248
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let number_map =\
    \ [\"zero\": 0, \"one\": 1, \"two\": 2, \"three\": 3, \"four\": 4, \"five\": 5,\
    \ \"six\": 6, \"seven\": 7, \"eight\": 8, \"nine\": 9]\n    let numbers_array\
    \ = numbers.components(separatedBy: \" \")\n    let sorted_numbers = numbers_array.sorted\
    \ { (a, b) -> Bool in\n        return number_map[a]! < number_map[b]!\n    }\n\
    \    return sorted_numbers.joined(separator: \" \")\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp_zofnyg4.swift:9:33: error: value of type 'String' has no member\
    \ 'components'\n    let numbers_array = numbers.components(separatedBy: \" \"\
    )\n                        ~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013248
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let nums = numbers.components(separatedBy:\
    \ \" \")\n    let sorted = nums.sorted { (a, b) -> Bool in\n        return numeral_to_int(numeral:\
    \ a) < numeral_to_int(numeral: b)\n    }\n    return sorted.joined(separator:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmphscahzad.swift:8:24: error: value of type 'String' has no member\
    \ 'components'\n    let nums = numbers.components(separatedBy: \" \")\n      \
    \         ~~~~~~~ ^~~~~~~~~~\n/tmp/tmphscahzad.swift:10:16: error: cannot find\
    \ 'numeral_to_int' in scope\n        return numeral_to_int(numeral: a) < numeral_to_int(numeral:\
    \ b)\n               ^~~~~~~~~~~~~~\n/tmp/tmphscahzad.swift:10:45: error: cannot\
    \ find 'numeral_to_int' in scope\n        return numeral_to_int(numeral: a) <\
    \ numeral_to_int(numeral: b)\n                                            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013248
- exit_code: -4
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let nums = numbers.split(separator:\
    \ \" \")\n    let sorted = nums.sorted { (a, b) -> Bool in\n        let numA =\
    \ Int(a)!\n        let numB = Int(b)!\n        return numA < numB\n    }\n   \
    \ return sorted.joined(separator: \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers: \"three\"\
    ) == \"three\")\nassert(sort_numbers(numbers: \"three five nine\") == \"three\
    \ five nine\")\nassert(sort_numbers(numbers: \"five zero four seven nine eight\"\
    ) == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers: \"six\
    \ five four three two one zero\") == \"zero one two three four five six\")"
  status: Exception
  stderr: 'tmp_xhxbywt/tmp_xhxbywt.swift:10: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002b4f79f76c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4f79c6d561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b4f79c6d286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b4f79c6d13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b4f79c6cbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmp_xhxbywt                        0x000055781d37f05f <unavailable> + 8287

    6    libswiftCore.so                    0x00002b4f79d8ec90 MutableCollection<>._insertionSort(within:sortedEnd:by:)
    + 770

    7    libswiftCore.so                    0x00002b4f79d8f110 MutableCollection<>._insertionSort(within:by:)
    + 356

    8    libswiftCore.so                    0x00002b4f79d8dd30 UnsafeMutableBufferPointer._stableSortImpl(by:)
    + 319

    9    libswiftCore.so                    0x00002b4f79d8dd15 <unavailable> + 2616597

    10   libswiftCore.so                    0x00002b4f79eb365a <unavailable> + 3819098

    11   libswiftCore.so                    0x00002b4f79ca2720 ContiguousArray.withContiguousMutableStorageIfAvailable<A>(_:)
    + 130

    12   libswiftCore.so                    0x00002b4f79ca270f <unavailable> + 1652495

    13   libswiftCore.so                    0x00002b4f79d8d460 MutableCollection<>.sort(by:)
    + 771

    14   libswiftCore.so                    0x00002b4f79d8d370 Sequence.sorted(by:)
    + 193

    15   tmp_xhxbywt                        0x000055781d37ed6e <unavailable> + 7534

    16   tmp_xhxbywt                        0x000055781d37e8c1 <unavailable> + 6337

    17   libc.so.6                          0x00002b4f7a162460 __libc_start_main +
    245

    18   tmp_xhxbywt                        0x000055781d37e3e9 <unavailable> + 5097

    '
  stdout: ''
  timestamp: 1660013249
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let number_strings\
    \ = numbers.split(separator: \" \")\n    let number_ints = number_strings.map\
    \ { Int(number_to_int($0)) }\n    let sorted_ints = number_ints.sorted()\n   \
    \ let sorted_strings = sorted_ints.map { int_to_number($0) }\n    return sorted_strings.joined(separator:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpvxn8zehp.swift:9:48: error: cannot find 'number_to_int' in scope\n\
    \    let number_ints = number_strings.map { Int(number_to_int($0)) }\n       \
    \                                        ^~~~~~~~~~~~~\n/tmp/tmpvxn8zehp.swift:11:44:\
    \ error: cannot find 'int_to_number' in scope\n    let sorted_strings = sorted_ints.map\
    \ { int_to_number($0) }\n                                           ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013249
- exit_code: -4
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let nums = numbers.split(separator:\
    \ \" \")\n    let sorted = nums.sorted { (s1, s2) -> Bool in\n        return s1\
    \ < s2\n    }\n    return sorted.joined(separator: \" \")\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: Exception
  stderr: 'tmp1_baq3it/tmp1_baq3it.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adad45a5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adad429cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adad429c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adad429b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1_baq3it                        0x0000563f31c9b8b2 <unavailable> + 6322

    5    libc.so.6                          0x00002adad4791460 __libc_start_main +
    245

    6    tmp1_baq3it                        0x0000563f31c9b2e9 <unavailable> + 4841

    '
  stdout: ''
  timestamp: 1660013249
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let number_map =\
    \ [\"zero\": 0, \"one\": 1, \"two\": 2, \"three\": 3, \"four\": 4, \"five\": 5,\
    \ \"six\": 6, \"seven\": 7, \"eight\": 8, \"nine\": 9]\n    let numbers_array\
    \ = numbers.components(separatedBy: \" \")\n    let sorted_numbers = numbers_array.sorted\
    \ { (a, b) -> Bool in\n        return number_map[a]! < number_map[b]!\n    }\n\
    \    return sorted_numbers.joined(separator: \" \")\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp_zofnyg4.swift:9:33: error: value of type 'String' has no member\
    \ 'components'\n    let numbers_array = numbers.components(separatedBy: \" \"\
    )\n                        ~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013248
- exit_code: 0
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let numberals =\
    \ [\"zero\", \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\"\
    , \"eight\", \"nine\"]\n    let sorted = numbers.split(separator: \" \").sorted\
    \ { numberals.firstIndex(of: String($0))! < numberals.firstIndex(of: String($1))!\
    \ }\n    return sorted.joined(separator: \" \")\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013248
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let numeralDict\
    \ = [\"zero\": 0, \"one\": 1, \"two\": 2, \"three\": 3, \"four\": 4, \"five\"\
    : 5, \"six\": 6, \"seven\": 7, \"eight\": 8, \"nine\": 9]\n    let numeralArray\
    \ = numbers.components(separatedBy: \" \")\n    let sortedArray = numeralArray.sorted\
    \ { (numeral1, numeral2) -> Bool in\n        return numeralDict[numeral1]! < numeralDict[numeral2]!\n\
    \    }\n    return sortedArray.joined(separator: \" \")\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp45q9wbzm.swift:9:32: error: value of type 'String' has no member\
    \ 'components'\n    let numeralArray = numbers.components(separatedBy: \" \")\n\
    \                       ~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013249
- exit_code: 0
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let nums = numbers.split(separator:\
    \ \" \")\n    let sorted = nums.sorted {\n        switch $0 {\n        case \"\
    zero\":\n            return true\n        case \"one\":\n            return $1\
    \ != \"zero\"\n        case \"two\":\n            return $1 != \"zero\" && $1\
    \ != \"one\"\n        case \"three\":\n            return $1 != \"zero\" && $1\
    \ != \"one\" && $1 != \"two\"\n        case \"four\":\n            return $1 !=\
    \ \"zero\" && $1 != \"one\" && $1 != \"two\" && $1 != \"three\"\n        case\
    \ \"five\":\n            return $1 != \"zero\" && $1 != \"one\" && $1 != \"two\"\
    \ && $1 != \"three\" && $1 != \"four\"\n        case \"six\":\n            return\
    \ $1 != \"zero\" && $1 != \"one\" && $1 != \"two\" && $1 != \"three\" && $1 !=\
    \ \"four\" && $1 != \"five\"\n        case \"seven\":\n            return $1 !=\
    \ \"zero\" && $1 != \"one\" && $1 != \"two\" && $1 != \"three\" && $1 != \"four\"\
    \ && $1 != \"five\" && $1 != \"six\"\n        case \"eight\":\n            return\
    \ $1 != \"zero\" && $1 != \"one\" && $1 != \"two\" && $1 != \"three\" && $1 !=\
    \ \"four\" && $1 != \"five\" && $1 != \"six\" && $1 != \"seven\"\n        case\
    \ \"nine\":\n            return $1 != \"zero\" && $1 != \"one\" && $1 != \"two\"\
    \ && $1 != \"three\" && $1 != \"four\" && $1 != \"five\" && $1 != \"six\" && $1\
    \ != \"seven\" && $1 != \"eight\"\n        default:\n            return false\n\
    \        }\n    }\n    return sorted.joined(separator: \" \")\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013248
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let nums = numbers.components(separatedBy:\
    \ \" \")\n    let numsInt = nums.map { numberToInt(number: $0) }\n    let sorted\
    \ = numsInt.sorted()\n    let sortedStr = sorted.map { intToNumber(int: $0) }\n\
    \    return sortedStr.joined(separator: \" \")\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpm7snyc58.swift:8:24: error: value of type 'String' has no member\
    \ 'components'\n    let nums = numbers.components(separatedBy: \" \")\n      \
    \         ~~~~~~~ ^~~~~~~~~~\n/tmp/tmpm7snyc58.swift:9:30: error: cannot find\
    \ 'numberToInt' in scope\n    let numsInt = nums.map { numberToInt(number: $0)\
    \ }\n                             ^~~~~~~~~~~\n/tmp/tmpm7snyc58.swift:11:34: error:\
    \ cannot find 'intToNumber' in scope\n    let sortedStr = sorted.map { intToNumber(int:\
    \ $0) }\n                                 ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013249
- exit_code: 0
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let numberals =\
    \ [\"zero\", \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\"\
    , \"eight\", \"nine\"]\n    let sortedNumbers = numbers.split(separator: \" \"\
    ).sorted { numberals.firstIndex(of: String($0))! < numberals.firstIndex(of: String($1))!\
    \ }\n    return sortedNumbers.joined(separator: \" \")\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013249
- exit_code: 0
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let words = numbers.split(separator:\
    \ \" \")\n    let nums = words.map { word -> Int in\n        switch word {\n \
    \       case \"zero\":\n            return 0\n        case \"one\":\n        \
    \    return 1\n        case \"two\":\n            return 2\n        case \"three\"\
    :\n            return 3\n        case \"four\":\n            return 4\n      \
    \  case \"five\":\n            return 5\n        case \"six\":\n            return\
    \ 6\n        case \"seven\":\n            return 7\n        case \"eight\":\n\
    \            return 8\n        case \"nine\":\n            return 9\n        default:\n\
    \            return 0\n        }\n    }\n    let sorted = nums.sorted()\n    let\
    \ result = sorted.map { num -> String in\n        switch num {\n        case 0:\n\
    \            return \"zero\"\n        case 1:\n            return \"one\"\n  \
    \      case 2:\n            return \"two\"\n        case 3:\n            return\
    \ \"three\"\n        case 4:\n            return \"four\"\n        case 5:\n \
    \           return \"five\"\n        case 6:\n            return \"six\"\n   \
    \     case 7:\n            return \"seven\"\n        case 8:\n            return\
    \ \"eight\"\n        case 9:\n            return \"nine\"\n        default:\n\
    \            return \"zero\"\n        }\n    }\n    return result.joined(separator:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013249
- exit_code: -4
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let numberals =\
    \ numbers.split(separator: \" \")\n    let sorted = numberals.sorted { (lhs, rhs)\
    \ -> Bool in\n        return lhs < rhs\n    }\n    return sorted.joined(separator:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: Exception
  stderr: 'tmp3do_i0dx/tmp3do_i0dx.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac9cddc7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac9cdabeb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac9cdabe988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac9cdabd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3do_i0dx                        0x00005632b0b848b2 <unavailable> + 6322

    5    libc.so.6                          0x00002ac9cdfb3460 __libc_start_main +
    245

    6    tmp3do_i0dx                        0x00005632b0b842e9 <unavailable> + 4841

    '
  stdout: ''
  timestamp: 1660013248
- exit_code: 0
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let numeral_map\
    \ = [\"zero\": 0, \"one\": 1, \"two\": 2, \"three\": 3, \"four\": 4, \"five\"\
    : 5, \"six\": 6, \"seven\": 7, \"eight\": 8, \"nine\": 9]\n    let numeral_array\
    \ = numbers.split(separator: \" \")\n    var numeral_int_array = [Int]()\n   \
    \ for numeral in numeral_array {\n        numeral_int_array.append(numeral_map[String(numeral)]!)\n\
    \    }\n    numeral_int_array.sort()\n    var sorted_numeral_array = [String]()\n\
    \    for numeral in numeral_int_array {\n        for (key, value) in numeral_map\
    \ {\n            if value == numeral {\n                sorted_numeral_array.append(key)\n\
    \            }\n        }\n    }\n    return sorted_numeral_array.joined(separator:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013249
- exit_code: -4
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let numbers = numbers.split(separator:\
    \ \" \")\n    let sortedNumbers = numbers.sorted { (lhs, rhs) -> Bool in\n   \
    \     return lhs < rhs\n    }\n    return sortedNumbers.joined(separator: \" \"\
    )\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: Exception
  stderr: 'tmpq27vhno_/tmpq27vhno_.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afd71583c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afd7127ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afd7127a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afd712797b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpq27vhno_                        0x000055b5d46a78b2 <unavailable> + 6322

    5    libc.so.6                          0x00002afd7176f460 __libc_start_main +
    245

    6    tmpq27vhno_                        0x000055b5d46a72e9 <unavailable> + 4841

    '
  stdout: ''
  timestamp: 1660013248
- exit_code: -4
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let nums = numbers.split(separator:\
    \ \" \")\n    let sorted = nums.sorted { (a, b) -> Bool in\n        return Int(a)!\
    \ < Int(b)!\n    }\n    return sorted.joined(separator: \" \")\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: Exception
  stderr: 'tmpynqhc_m4/tmpynqhc_m4.swift:10: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002b7a73162c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7a72e59561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b7a72e59286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b7a72e5913c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b7a72e58bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpynqhc_m4                        0x000055936b50a03c <unavailable> + 8252

    6    libswiftCore.so                    0x00002b7a72f7ac90 MutableCollection<>._insertionSort(within:sortedEnd:by:)
    + 770

    7    libswiftCore.so                    0x00002b7a72f7b110 MutableCollection<>._insertionSort(within:by:)
    + 356

    8    libswiftCore.so                    0x00002b7a72f79d30 UnsafeMutableBufferPointer._stableSortImpl(by:)
    + 319

    9    libswiftCore.so                    0x00002b7a72f79d15 <unavailable> + 2616597

    10   libswiftCore.so                    0x00002b7a7309f65a <unavailable> + 3819098

    11   libswiftCore.so                    0x00002b7a72e8e720 ContiguousArray.withContiguousMutableStorageIfAvailable<A>(_:)
    + 130

    12   libswiftCore.so                    0x00002b7a72e8e70f <unavailable> + 1652495

    13   libswiftCore.so                    0x00002b7a72f79460 MutableCollection<>.sort(by:)
    + 771

    14   libswiftCore.so                    0x00002b7a72f79370 Sequence.sorted(by:)
    + 193

    15   tmpynqhc_m4                        0x000055936b509d6e <unavailable> + 7534

    16   tmpynqhc_m4                        0x000055936b5098c1 <unavailable> + 6337

    17   libc.so.6                          0x00002b7a7334e460 __libc_start_main +
    245

    18   tmpynqhc_m4                        0x000055936b5093e9 <unavailable> + 5097

    '
  stdout: ''
  timestamp: 1660013248
- exit_code: 0
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let numberals =\
    \ [\"zero\", \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\"\
    , \"eight\", \"nine\"]\n    let nums = numbers.split(separator: \" \")\n    let\
    \ sorted = nums.sorted { (a, b) -> Bool in\n        return numberals.firstIndex(of:\
    \ String(a))! < numberals.firstIndex(of: String(b))!\n    }\n    return sorted.joined(separator:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013249
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let numbers = numbers.split(separator:\
    \ \" \")\n    let sortedNumbers = numbers.sorted(by: {\n        return Int(numberToInt[String($0)]!)\
    \ < Int(numberToInt[String($1)]!)\n    })\n    return sortedNumbers.joined(separator:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmps214lvax.swift:10:20: error: cannot find 'numberToInt' in scope\n\
    \        return Int(numberToInt[String($0)]!) < Int(numberToInt[String($1)]!)\n\
    \                   ^~~~~~~~~~~\n/tmp/tmps214lvax.swift:10:52: error: cannot find\
    \ 'numberToInt' in scope\n        return Int(numberToInt[String($0)]!) < Int(numberToInt[String($1)]!)\n\
    \                                                   ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013249
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let numbers = numbers.split(separator:\
    \ \" \")\n    let sorted = numbers.sorted { (a, b) -> Bool in\n        return\
    \ number_to_int(number: String(a)) < number_to_int(number: String(b))\n    }\n\
    \    return sorted.joined(separator: \" \")\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpmrnzbegd.swift:10:16: error: cannot find 'number_to_int' in scope\n\
    \        return number_to_int(number: String(a)) < number_to_int(number: String(b))\n\
    \               ^~~~~~~~~~~~~\n/tmp/tmpmrnzbegd.swift:10:51: error: cannot find\
    \ 'number_to_int' in scope\n        return number_to_int(number: String(a)) <\
    \ number_to_int(number: String(b))\n                                         \
    \         ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013249
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let nums = numbers.components(separatedBy:\
    \ \" \")\n    let numsInt = nums.map { Int(wordToNumeral[$0]!) }\n    let sorted\
    \ = numsInt.sorted()\n    let sortedWords = sorted.map { numeralToWord[String($0)]!\
    \ }\n    return sortedWords.joined(separator: \" \")\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp3twjdx5u.swift:8:24: error: value of type 'String' has no member\
    \ 'components'\n    let nums = numbers.components(separatedBy: \" \")\n      \
    \         ~~~~~~~ ^~~~~~~~~~\n/tmp/tmp3twjdx5u.swift:9:34: error: cannot find\
    \ 'wordToNumeral' in scope\n    let numsInt = nums.map { Int(wordToNumeral[$0]!)\
    \ }\n                                 ^~~~~~~~~~~~~\n/tmp/tmp3twjdx5u.swift:11:36:\
    \ error: cannot find 'numeralToWord' in scope\n    let sortedWords = sorted.map\
    \ { numeralToWord[String($0)]! }\n                                   ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013249
- exit_code: -4
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let nums = numbers.split(separator:\
    \ \" \")\n    let sorted = nums.sorted { (s1, s2) -> Bool in\n        return s1\
    \ < s2\n    }\n    return sorted.joined(separator: \" \")\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: Exception
  stderr: 'tmp1_baq3it/tmp1_baq3it.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adad45a5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adad429cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adad429c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adad429b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1_baq3it                        0x0000563f31c9b8b2 <unavailable> + 6322

    5    libc.so.6                          0x00002adad4791460 __libc_start_main +
    245

    6    tmp1_baq3it                        0x0000563f31c9b2e9 <unavailable> + 4841

    '
  stdout: ''
  timestamp: 1660013249
- exit_code: 0
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let number_map:\
    \ [String: Int] = [\n        \"zero\": 0,\n        \"one\": 1,\n        \"two\"\
    : 2,\n        \"three\": 3,\n        \"four\": 4,\n        \"five\": 5,\n    \
    \    \"six\": 6,\n        \"seven\": 7,\n        \"eight\": 8,\n        \"nine\"\
    : 9\n    ]\n    let nums = numbers.split(separator: \" \").map { String($0) }\n\
    \    let sorted = nums.sorted { number_map[$0]! < number_map[$1]! }\n    return\
    \ sorted.joined(separator: \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013249
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let nums = numbers.components(separatedBy:\
    \ \" \")\n    let sorted = nums.sorted { (a, b) -> Bool in\n        return number_to_int(number:\
    \ a) < number_to_int(number: b)\n    }\n    return sorted.joined(separator: \"\
    \ \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers: \"\
    \") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpwbtwbarw.swift:8:24: error: value of type 'String' has no member\
    \ 'components'\n    let nums = numbers.components(separatedBy: \" \")\n      \
    \         ~~~~~~~ ^~~~~~~~~~\n/tmp/tmpwbtwbarw.swift:10:16: error: cannot find\
    \ 'number_to_int' in scope\n        return number_to_int(number: a) < number_to_int(number:\
    \ b)\n               ^~~~~~~~~~~~~\n/tmp/tmpwbtwbarw.swift:10:43: error: cannot\
    \ find 'number_to_int' in scope\n        return number_to_int(number: a) < number_to_int(number:\
    \ b)\n                                          ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013248
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let nums = numbers.split(separator:\
    \ \" \")\n    let sorted = nums.sorted { (a, b) -> Bool in\n        return numeral_to_int(numeral:\
    \ String(a)) < numeral_to_int(numeral: String(b))\n    }\n    return sorted.joined(separator:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpn3cxro_7.swift:10:16: error: cannot find 'numeral_to_int' in scope\n\
    \        return numeral_to_int(numeral: String(a)) < numeral_to_int(numeral: String(b))\n\
    \               ^~~~~~~~~~~~~~\n/tmp/tmpn3cxro_7.swift:10:53: error: cannot find\
    \ 'numeral_to_int' in scope\n        return numeral_to_int(numeral: String(a))\
    \ < numeral_to_int(numeral: String(b))\n                                     \
    \               ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013248
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let nums = numbers.split(separator:\
    \ \" \")\n    let sorted = nums.sorted(by: {\n        let a = Int(word_to_number(word:\
    \ String($0)))\n        let b = Int(word_to_number(word: String($1)))\n      \
    \  return a! < b!\n    })\n    return sorted.joined(separator: \" \")\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpv3kwoanv.swift:10:21: error: cannot find 'word_to_number' in scope\n\
    \        let a = Int(word_to_number(word: String($0)))\n                    ^~~~~~~~~~~~~~\n\
    /tmp/tmpv3kwoanv.swift:11:21: error: cannot find 'word_to_number' in scope\n \
    \       let b = Int(word_to_number(word: String($1)))\n                    ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013249
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let nums = numbers.split(separator:\
    \ \" \")\n    let numsInt = nums.map { Int(number_to_int(number: String($0))!)\
    \ }\n    let sortedNums = numsInt.sorted()\n    let sortedNumsStr = sortedNums.map\
    \ { int_to_number(int: $0) }\n    return sortedNumsStr.joined(separator: \" \"\
    )\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpcf_fo2_6.swift:9:34: error: cannot find 'number_to_int' in scope\n\
    \    let numsInt = nums.map { Int(number_to_int(number: String($0))!) }\n    \
    \                             ^~~~~~~~~~~~~\n/tmp/tmpcf_fo2_6.swift:11:42: error:\
    \ cannot find 'int_to_number' in scope\n    let sortedNumsStr = sortedNums.map\
    \ { int_to_number(int: $0) }\n                                         ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013249
- exit_code: -4
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let nums = numbers.split(separator:\
    \ \" \")\n    let sorted = nums.sorted { (a, b) -> Bool in\n        return Int(a)!\
    \ < Int(b)!\n    }\n    return sorted.joined(separator: \" \")\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: Exception
  stderr: 'tmpynqhc_m4/tmpynqhc_m4.swift:10: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002b7a73162c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7a72e59561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b7a72e59286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b7a72e5913c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b7a72e58bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpynqhc_m4                        0x000055936b50a03c <unavailable> + 8252

    6    libswiftCore.so                    0x00002b7a72f7ac90 MutableCollection<>._insertionSort(within:sortedEnd:by:)
    + 770

    7    libswiftCore.so                    0x00002b7a72f7b110 MutableCollection<>._insertionSort(within:by:)
    + 356

    8    libswiftCore.so                    0x00002b7a72f79d30 UnsafeMutableBufferPointer._stableSortImpl(by:)
    + 319

    9    libswiftCore.so                    0x00002b7a72f79d15 <unavailable> + 2616597

    10   libswiftCore.so                    0x00002b7a7309f65a <unavailable> + 3819098

    11   libswiftCore.so                    0x00002b7a72e8e720 ContiguousArray.withContiguousMutableStorageIfAvailable<A>(_:)
    + 130

    12   libswiftCore.so                    0x00002b7a72e8e70f <unavailable> + 1652495

    13   libswiftCore.so                    0x00002b7a72f79460 MutableCollection<>.sort(by:)
    + 771

    14   libswiftCore.so                    0x00002b7a72f79370 Sequence.sorted(by:)
    + 193

    15   tmpynqhc_m4                        0x000055936b509d6e <unavailable> + 7534

    16   tmpynqhc_m4                        0x000055936b5098c1 <unavailable> + 6337

    17   libc.so.6                          0x00002b7a7334e460 __libc_start_main +
    245

    18   tmpynqhc_m4                        0x000055936b5093e9 <unavailable> + 5097

    '
  stdout: ''
  timestamp: 1660013248
- exit_code: -4
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let nums = numbers.split(separator:\
    \ \" \")\n    let sorted = nums.sorted { (lhs, rhs) -> Bool in\n        return\
    \ Int(lhs)! < Int(rhs)!\n    }\n    return sorted.joined(separator: \" \")\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: Exception
  stderr: 'tmpb_vkuxt6/tmpb_vkuxt6.swift:10: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002b7961dacc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7961aa3561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b7961aa3286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b7961aa313c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b7961aa2bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpb_vkuxt6                        0x000056122102803c <unavailable> + 8252

    6    libswiftCore.so                    0x00002b7961bc4c90 MutableCollection<>._insertionSort(within:sortedEnd:by:)
    + 770

    7    libswiftCore.so                    0x00002b7961bc5110 MutableCollection<>._insertionSort(within:by:)
    + 356

    8    libswiftCore.so                    0x00002b7961bc3d30 UnsafeMutableBufferPointer._stableSortImpl(by:)
    + 319

    9    libswiftCore.so                    0x00002b7961bc3d15 <unavailable> + 2616597

    10   libswiftCore.so                    0x00002b7961ce965a <unavailable> + 3819098

    11   libswiftCore.so                    0x00002b7961ad8720 ContiguousArray.withContiguousMutableStorageIfAvailable<A>(_:)
    + 130

    12   libswiftCore.so                    0x00002b7961ad870f <unavailable> + 1652495

    13   libswiftCore.so                    0x00002b7961bc3460 MutableCollection<>.sort(by:)
    + 771

    14   libswiftCore.so                    0x00002b7961bc3370 Sequence.sorted(by:)
    + 193

    15   tmpb_vkuxt6                        0x0000561221027d6e <unavailable> + 7534

    16   tmpb_vkuxt6                        0x00005612210278c1 <unavailable> + 6337

    17   libc.so.6                          0x00002b7961f98460 __libc_start_main +
    245

    18   tmpb_vkuxt6                        0x00005612210273e9 <unavailable> + 5097

    '
  stdout: ''
  timestamp: 1660013249
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let nums = numbers.components(separatedBy:\
    \ \" \")\n    let sorted = nums.sorted { (a, b) -> Bool in\n        return number_to_int(number:\
    \ a) < number_to_int(number: b)\n    }\n    return sorted.joined(separator: \"\
    \ \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers: \"\
    \") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpwbtwbarw.swift:8:24: error: value of type 'String' has no member\
    \ 'components'\n    let nums = numbers.components(separatedBy: \" \")\n      \
    \         ~~~~~~~ ^~~~~~~~~~\n/tmp/tmpwbtwbarw.swift:10:16: error: cannot find\
    \ 'number_to_int' in scope\n        return number_to_int(number: a) < number_to_int(number:\
    \ b)\n               ^~~~~~~~~~~~~\n/tmp/tmpwbtwbarw.swift:10:43: error: cannot\
    \ find 'number_to_int' in scope\n        return number_to_int(number: a) < number_to_int(number:\
    \ b)\n                                          ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013248
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let nums = numbers.split(separator:\
    \ \" \")\n    let sorted = nums.sorted {\n        return number_to_int(number:\
    \ String($0)) < number_to_int(number: String($1))\n    }\n    return sorted.joined(separator:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmprxi9owci.swift:10:16: error: cannot find 'number_to_int' in scope\n\
    \        return number_to_int(number: String($0)) < number_to_int(number: String($1))\n\
    \               ^~~~~~~~~~~~~\n/tmp/tmprxi9owci.swift:10:52: error: cannot find\
    \ 'number_to_int' in scope\n        return number_to_int(number: String($0)) <\
    \ number_to_int(number: String($1))\n                                        \
    \           ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013249
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let number_map =\
    \ [\"zero\": 0, \"one\": 1, \"two\": 2, \"three\": 3, \"four\": 4, \"five\": 5,\
    \ \"six\": 6, \"seven\": 7, \"eight\": 8, \"nine\": 9]\n    let number_list =\
    \ numbers.split(separator: \" \")\n    var sorted_numbers = [Int]()\n    for number\
    \ in number_list {\n        if let number_int = number_map[String(number)] {\n\
    \            sorted_numbers.append(number_int)\n        }\n    }\n    sorted_numbers.sort()\n\
    \    var sorted_string = \"\"\n    for number in sorted_numbers {\n        for\
    \ (key, value) in number_map {\n            if value == number {\n           \
    \     sorted_string += key + \" \"\n            }\n        }\n    }\n    return\
    \ sorted_string.trimmingCharacters(in: .whitespaces)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpb33m6jcu.swift:25:26: error: value of type 'String' has no member\
    \ 'trimmingCharacters'\n    return sorted_string.trimmingCharacters(in: .whitespaces)\n\
    \           ~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~\n/tmp/tmpb33m6jcu.swift:25:50: error:\
    \ cannot infer contextual base in reference to member 'whitespaces'\n    return\
    \ sorted_string.trimmingCharacters(in: .whitespaces)\n                       \
    \                         ~^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013249
- exit_code: -4
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let nums = numbers.split(separator:\
    \ \" \")\n    let sortedNums = nums.sorted { (a, b) -> Bool in\n        return\
    \ Int(a)! < Int(b)!\n    }\n    return sortedNums.joined(separator: \" \")\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: Exception
  stderr: 'tmp_iioyz9q/tmp_iioyz9q.swift:10: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002aecf54a5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aecf519c561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002aecf519c286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002aecf519c13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002aecf519bbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmp_iioyz9q                        0x000055915b61303c <unavailable> + 8252

    6    libswiftCore.so                    0x00002aecf52bdc90 MutableCollection<>._insertionSort(within:sortedEnd:by:)
    + 770

    7    libswiftCore.so                    0x00002aecf52be110 MutableCollection<>._insertionSort(within:by:)
    + 356

    8    libswiftCore.so                    0x00002aecf52bcd30 UnsafeMutableBufferPointer._stableSortImpl(by:)
    + 319

    9    libswiftCore.so                    0x00002aecf52bcd15 <unavailable> + 2616597

    10   libswiftCore.so                    0x00002aecf53e265a <unavailable> + 3819098

    11   libswiftCore.so                    0x00002aecf51d1720 ContiguousArray.withContiguousMutableStorageIfAvailable<A>(_:)
    + 130

    12   libswiftCore.so                    0x00002aecf51d170f <unavailable> + 1652495

    13   libswiftCore.so                    0x00002aecf52bc460 MutableCollection<>.sort(by:)
    + 771

    14   libswiftCore.so                    0x00002aecf52bc370 Sequence.sorted(by:)
    + 193

    15   tmp_iioyz9q                        0x000055915b612d6e <unavailable> + 7534

    16   tmp_iioyz9q                        0x000055915b6128c1 <unavailable> + 6337

    17   libc.so.6                          0x00002aecf5691460 __libc_start_main +
    245

    18   tmp_iioyz9q                        0x000055915b6123e9 <unavailable> + 5097

    '
  stdout: ''
  timestamp: 1660013249
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let numbers = numbers.components(separatedBy:\
    \ \" \")\n    let sortedNumbers = numbers.sorted { (first, second) -> Bool in\n\
    \        return first < second\n    }\n    return sortedNumbers.joined(separator:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp3hc82zgm.swift:8:27: error: value of type 'String' has no member\
    \ 'components'\n    let numbers = numbers.components(separatedBy: \" \")\n   \
    \               ~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013249
- exit_code: -4
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let nums = numbers.split(separator:\
    \ \" \")\n    let sorted = nums.sorted { (a, b) -> Bool in\n        return Int(a)!\
    \ < Int(b)!\n    }\n    return sorted.joined(separator: \" \")\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: Exception
  stderr: 'tmpynqhc_m4/tmpynqhc_m4.swift:10: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002b7a73162c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7a72e59561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b7a72e59286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b7a72e5913c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b7a72e58bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpynqhc_m4                        0x000055936b50a03c <unavailable> + 8252

    6    libswiftCore.so                    0x00002b7a72f7ac90 MutableCollection<>._insertionSort(within:sortedEnd:by:)
    + 770

    7    libswiftCore.so                    0x00002b7a72f7b110 MutableCollection<>._insertionSort(within:by:)
    + 356

    8    libswiftCore.so                    0x00002b7a72f79d30 UnsafeMutableBufferPointer._stableSortImpl(by:)
    + 319

    9    libswiftCore.so                    0x00002b7a72f79d15 <unavailable> + 2616597

    10   libswiftCore.so                    0x00002b7a7309f65a <unavailable> + 3819098

    11   libswiftCore.so                    0x00002b7a72e8e720 ContiguousArray.withContiguousMutableStorageIfAvailable<A>(_:)
    + 130

    12   libswiftCore.so                    0x00002b7a72e8e70f <unavailable> + 1652495

    13   libswiftCore.so                    0x00002b7a72f79460 MutableCollection<>.sort(by:)
    + 771

    14   libswiftCore.so                    0x00002b7a72f79370 Sequence.sorted(by:)
    + 193

    15   tmpynqhc_m4                        0x000055936b509d6e <unavailable> + 7534

    16   tmpynqhc_m4                        0x000055936b5098c1 <unavailable> + 6337

    17   libc.so.6                          0x00002b7a7334e460 __libc_start_main +
    245

    18   tmpynqhc_m4                        0x000055936b5093e9 <unavailable> + 5097

    '
  stdout: ''
  timestamp: 1660013248
- exit_code: -4
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let nums = numbers.split(separator:\
    \ \" \")\n    let sorted = nums.sorted { (lhs, rhs) -> Bool in\n        return\
    \ lhs < rhs\n    }\n    return sorted.joined(separator: \" \")\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: Exception
  stderr: 'tmp9je61adz/tmp9je61adz.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b35289f7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b35286eeb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b35286ee988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b35286ed7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9je61adz                        0x000055fb868548b2 <unavailable> + 6322

    5    libc.so.6                          0x00002b3528be3460 __libc_start_main +
    245

    6    tmp9je61adz                        0x000055fb868542e9 <unavailable> + 4841

    '
  stdout: ''
  timestamp: 1660013248
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let nums = numbers.components(separatedBy:\
    \ \" \")\n    let sorted = nums.sorted { (a, b) -> Bool in\n        return number_to_int(number:\
    \ a) < number_to_int(number: b)\n    }\n    return sorted.joined(separator: \"\
    \ \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers: \"\
    \") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpwbtwbarw.swift:8:24: error: value of type 'String' has no member\
    \ 'components'\n    let nums = numbers.components(separatedBy: \" \")\n      \
    \         ~~~~~~~ ^~~~~~~~~~\n/tmp/tmpwbtwbarw.swift:10:16: error: cannot find\
    \ 'number_to_int' in scope\n        return number_to_int(number: a) < number_to_int(number:\
    \ b)\n               ^~~~~~~~~~~~~\n/tmp/tmpwbtwbarw.swift:10:43: error: cannot\
    \ find 'number_to_int' in scope\n        return number_to_int(number: a) < number_to_int(number:\
    \ b)\n                                          ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013248
- exit_code: -4
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let nums = numbers.split(separator:\
    \ \" \")\n    let sorted = nums.sorted(by: {\n        let num1 = Int(String($0))!\n\
    \        let num2 = Int(String($1))!\n        return num1 < num2\n    })\n   \
    \ return sorted.joined(separator: \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers: \"three\"\
    ) == \"three\")\nassert(sort_numbers(numbers: \"three five nine\") == \"three\
    \ five nine\")\nassert(sort_numbers(numbers: \"five zero four seven nine eight\"\
    ) == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers: \"six\
    \ five four three two one zero\") == \"zero one two three four five six\")"
  status: Exception
  stderr: 'tmpa0in6i85/tmpa0in6i85.swift:10: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002ac904c74c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac90496b561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ac90496b286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ac90496b13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ac90496abb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpa0in6i85                        0x000056067d362036 <unavailable> + 8246

    6    libswiftCore.so                    0x00002ac904a8cc90 MutableCollection<>._insertionSort(within:sortedEnd:by:)
    + 770

    7    libswiftCore.so                    0x00002ac904a8d110 MutableCollection<>._insertionSort(within:by:)
    + 356

    8    libswiftCore.so                    0x00002ac904a8bd30 UnsafeMutableBufferPointer._stableSortImpl(by:)
    + 319

    9    libswiftCore.so                    0x00002ac904a8bd15 <unavailable> + 2616597

    10   libswiftCore.so                    0x00002ac904bb165a <unavailable> + 3819098

    11   libswiftCore.so                    0x00002ac9049a0720 ContiguousArray.withContiguousMutableStorageIfAvailable<A>(_:)
    + 130

    12   libswiftCore.so                    0x00002ac9049a070f <unavailable> + 1652495

    13   libswiftCore.so                    0x00002ac904a8b460 MutableCollection<>.sort(by:)
    + 771

    14   libswiftCore.so                    0x00002ac904a8b370 Sequence.sorted(by:)
    + 193

    15   tmpa0in6i85                        0x000056067d361dae <unavailable> + 7598

    16   tmpa0in6i85                        0x000056067d361901 <unavailable> + 6401

    17   libc.so.6                          0x00002ac904e60460 __libc_start_main +
    245

    18   tmpa0in6i85                        0x000056067d361429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1660013249
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let nums = numbers.components(separatedBy:\
    \ \" \")\n    let sorted = nums.sorted { (a, b) -> Bool in\n        return number_to_int(number:\
    \ a) < number_to_int(number: b)\n    }\n    return sorted.joined(separator: \"\
    \ \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers: \"\
    \") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpwbtwbarw.swift:8:24: error: value of type 'String' has no member\
    \ 'components'\n    let nums = numbers.components(separatedBy: \" \")\n      \
    \         ~~~~~~~ ^~~~~~~~~~\n/tmp/tmpwbtwbarw.swift:10:16: error: cannot find\
    \ 'number_to_int' in scope\n        return number_to_int(number: a) < number_to_int(number:\
    \ b)\n               ^~~~~~~~~~~~~\n/tmp/tmpwbtwbarw.swift:10:43: error: cannot\
    \ find 'number_to_int' in scope\n        return number_to_int(number: a) < number_to_int(number:\
    \ b)\n                                          ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013248
- exit_code: -4
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let nums = numbers.split(separator:\
    \ \" \")\n    let sorted = nums.sorted { (a, b) -> Bool in\n        return Int(a)!\
    \ < Int(b)!\n    }\n    return sorted.joined(separator: \" \")\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: Exception
  stderr: 'tmpynqhc_m4/tmpynqhc_m4.swift:10: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002b7a73162c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7a72e59561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b7a72e59286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b7a72e5913c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b7a72e58bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpynqhc_m4                        0x000055936b50a03c <unavailable> + 8252

    6    libswiftCore.so                    0x00002b7a72f7ac90 MutableCollection<>._insertionSort(within:sortedEnd:by:)
    + 770

    7    libswiftCore.so                    0x00002b7a72f7b110 MutableCollection<>._insertionSort(within:by:)
    + 356

    8    libswiftCore.so                    0x00002b7a72f79d30 UnsafeMutableBufferPointer._stableSortImpl(by:)
    + 319

    9    libswiftCore.so                    0x00002b7a72f79d15 <unavailable> + 2616597

    10   libswiftCore.so                    0x00002b7a7309f65a <unavailable> + 3819098

    11   libswiftCore.so                    0x00002b7a72e8e720 ContiguousArray.withContiguousMutableStorageIfAvailable<A>(_:)
    + 130

    12   libswiftCore.so                    0x00002b7a72e8e70f <unavailable> + 1652495

    13   libswiftCore.so                    0x00002b7a72f79460 MutableCollection<>.sort(by:)
    + 771

    14   libswiftCore.so                    0x00002b7a72f79370 Sequence.sorted(by:)
    + 193

    15   tmpynqhc_m4                        0x000055936b509d6e <unavailable> + 7534

    16   tmpynqhc_m4                        0x000055936b5098c1 <unavailable> + 6337

    17   libc.so.6                          0x00002b7a7334e460 __libc_start_main +
    245

    18   tmpynqhc_m4                        0x000055936b5093e9 <unavailable> + 5097

    '
  stdout: ''
  timestamp: 1660013248
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let nums = numbers.components(separatedBy:\
    \ \" \")\n    let sorted = nums.sorted { (a, b) -> Bool in\n        return numeral_to_int(numeral:\
    \ a) < numeral_to_int(numeral: b)\n    }\n    return sorted.joined(separator:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmphscahzad.swift:8:24: error: value of type 'String' has no member\
    \ 'components'\n    let nums = numbers.components(separatedBy: \" \")\n      \
    \         ~~~~~~~ ^~~~~~~~~~\n/tmp/tmphscahzad.swift:10:16: error: cannot find\
    \ 'numeral_to_int' in scope\n        return numeral_to_int(numeral: a) < numeral_to_int(numeral:\
    \ b)\n               ^~~~~~~~~~~~~~\n/tmp/tmphscahzad.swift:10:45: error: cannot\
    \ find 'numeral_to_int' in scope\n        return numeral_to_int(numeral: a) <\
    \ numeral_to_int(numeral: b)\n                                            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013248
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let nums = numbers.components(separatedBy:\
    \ \" \")\n    let sorted = nums.sorted { (a, b) -> Bool in\n        return number_to_int(number:\
    \ a) < number_to_int(number: b)\n    }\n    return sorted.joined(separator: \"\
    \ \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers: \"\
    \") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpwbtwbarw.swift:8:24: error: value of type 'String' has no member\
    \ 'components'\n    let nums = numbers.components(separatedBy: \" \")\n      \
    \         ~~~~~~~ ^~~~~~~~~~\n/tmp/tmpwbtwbarw.swift:10:16: error: cannot find\
    \ 'number_to_int' in scope\n        return number_to_int(number: a) < number_to_int(number:\
    \ b)\n               ^~~~~~~~~~~~~\n/tmp/tmpwbtwbarw.swift:10:43: error: cannot\
    \ find 'number_to_int' in scope\n        return number_to_int(number: a) < number_to_int(number:\
    \ b)\n                                          ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013248
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let nums = numbers.components(separatedBy:\
    \ \" \")\n    let sorted = nums.sorted { (a, b) -> Bool in\n        return a.count\
    \ < b.count\n    }\n    return sorted.joined(separator: \" \")\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpmgcokxdk.swift:8:24: error: value of type 'String' has no member\
    \ 'components'\n    let nums = numbers.components(separatedBy: \" \")\n      \
    \         ~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013249
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let numbers = numbers.split(separator:\
    \ \" \")\n    let sorted = numbers.sorted { (a, b) -> Bool in\n        return\
    \ number_to_int(number: String(a)) < number_to_int(number: String(b))\n    }\n\
    \    return sorted.joined(separator: \" \")\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpmrnzbegd.swift:10:16: error: cannot find 'number_to_int' in scope\n\
    \        return number_to_int(number: String(a)) < number_to_int(number: String(b))\n\
    \               ^~~~~~~~~~~~~\n/tmp/tmpmrnzbegd.swift:10:51: error: cannot find\
    \ 'number_to_int' in scope\n        return number_to_int(number: String(a)) <\
    \ number_to_int(number: String(b))\n                                         \
    \         ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013249
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let numbers = numbers.components(separatedBy:\
    \ \" \")\n    let sortedNumbers = numbers.sorted { (s1, s2) -> Bool in\n     \
    \   return s1 < s2\n    }\n    return sortedNumbers.joined(separator: \" \")\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp98o9d792.swift:8:27: error: value of type 'String' has no member\
    \ 'components'\n    let numbers = numbers.components(separatedBy: \" \")\n   \
    \               ~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013249
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let nums = numbers.split(separator:\
    \ \" \")\n    let nums_sorted = nums.sorted { (a, b) -> Bool in\n        let a_num\
    \ = num_to_int(num: String(a))\n        let b_num = num_to_int(num: String(b))\n\
    \        return a_num < b_num\n    }\n    return nums_sorted.joined(separator:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpgwo75cxe.swift:10:21: error: cannot find 'num_to_int' in scope\n\
    \        let a_num = num_to_int(num: String(a))\n                    ^~~~~~~~~~\n\
    /tmp/tmpgwo75cxe.swift:11:21: error: cannot find 'num_to_int' in scope\n     \
    \   let b_num = num_to_int(num: String(b))\n                    ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013249
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let nums = numbers.components(separatedBy:\
    \ \" \")\n    let sorted = nums.sorted { (a, b) -> Bool in\n        return numeral_to_int(numeral:\
    \ a) < numeral_to_int(numeral: b)\n    }\n    return sorted.joined(separator:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmphscahzad.swift:8:24: error: value of type 'String' has no member\
    \ 'components'\n    let nums = numbers.components(separatedBy: \" \")\n      \
    \         ~~~~~~~ ^~~~~~~~~~\n/tmp/tmphscahzad.swift:10:16: error: cannot find\
    \ 'numeral_to_int' in scope\n        return numeral_to_int(numeral: a) < numeral_to_int(numeral:\
    \ b)\n               ^~~~~~~~~~~~~~\n/tmp/tmphscahzad.swift:10:45: error: cannot\
    \ find 'numeral_to_int' in scope\n        return numeral_to_int(numeral: a) <\
    \ numeral_to_int(numeral: b)\n                                            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013248
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let numbers = numbers.split(separator:\
    \ \" \")\n    let sorted = numbers.sorted { (lhs, rhs) -> Bool in\n        return\
    \ number_to_int(number: String(lhs)) < number_to_int(number: String(rhs))\n  \
    \  }\n    return sorted.joined(separator: \" \")\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpf_tir1h_.swift:10:16: error: cannot find 'number_to_int' in scope\n\
    \        return number_to_int(number: String(lhs)) < number_to_int(number: String(rhs))\n\
    \               ^~~~~~~~~~~~~\n/tmp/tmpf_tir1h_.swift:10:53: error: cannot find\
    \ 'number_to_int' in scope\n        return number_to_int(number: String(lhs))\
    \ < number_to_int(number: String(rhs))\n                                     \
    \               ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013249
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let numberMap =\
    \ [\"zero\": 0, \"one\": 1, \"two\": 2, \"three\": 3, \"four\": 4, \"five\": 5,\
    \ \"six\": 6, \"seven\": 7, \"eight\": 8, \"nine\": 9]\n    let numbers = numbers.components(separatedBy:\
    \ \" \")\n    let sortedNumbers = numbers.sorted { (a, b) -> Bool in\n       \
    \ return numberMap[a]! < numberMap[b]!\n    }\n    return sortedNumbers.joined(separator:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmptgp47lu1.swift:9:27: error: value of type 'String' has no member\
    \ 'components'\n    let numbers = numbers.components(separatedBy: \" \")\n   \
    \               ~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013249
- exit_code: 0
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let numberals =\
    \ [\"zero\", \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\"\
    , \"eight\", \"nine\"]\n    let nums = numbers.split(separator: \" \")\n    let\
    \ sorted = nums.sorted { (lhs, rhs) -> Bool in\n        return numberals.firstIndex(of:\
    \ String(lhs))! < numberals.firstIndex(of: String(rhs))!\n    }\n    return sorted.joined(separator:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013249
- exit_code: -4
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let nums = numbers.split(separator:\
    \ \" \")\n    let sorted = nums.sorted { (a, b) -> Bool in\n        return Int(a)!\
    \ < Int(b)!\n    }\n    return sorted.joined(separator: \" \")\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: Exception
  stderr: 'tmpynqhc_m4/tmpynqhc_m4.swift:10: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002b7a73162c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7a72e59561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b7a72e59286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b7a72e5913c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b7a72e58bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpynqhc_m4                        0x000055936b50a03c <unavailable> + 8252

    6    libswiftCore.so                    0x00002b7a72f7ac90 MutableCollection<>._insertionSort(within:sortedEnd:by:)
    + 770

    7    libswiftCore.so                    0x00002b7a72f7b110 MutableCollection<>._insertionSort(within:by:)
    + 356

    8    libswiftCore.so                    0x00002b7a72f79d30 UnsafeMutableBufferPointer._stableSortImpl(by:)
    + 319

    9    libswiftCore.so                    0x00002b7a72f79d15 <unavailable> + 2616597

    10   libswiftCore.so                    0x00002b7a7309f65a <unavailable> + 3819098

    11   libswiftCore.so                    0x00002b7a72e8e720 ContiguousArray.withContiguousMutableStorageIfAvailable<A>(_:)
    + 130

    12   libswiftCore.so                    0x00002b7a72e8e70f <unavailable> + 1652495

    13   libswiftCore.so                    0x00002b7a72f79460 MutableCollection<>.sort(by:)
    + 771

    14   libswiftCore.so                    0x00002b7a72f79370 Sequence.sorted(by:)
    + 193

    15   tmpynqhc_m4                        0x000055936b509d6e <unavailable> + 7534

    16   tmpynqhc_m4                        0x000055936b5098c1 <unavailable> + 6337

    17   libc.so.6                          0x00002b7a7334e460 __libc_start_main +
    245

    18   tmpynqhc_m4                        0x000055936b5093e9 <unavailable> + 5097

    '
  stdout: ''
  timestamp: 1660013248
- exit_code: 0
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let numeral_map\
    \ = [\"zero\": 0, \"one\": 1, \"two\": 2, \"three\": 3, \"four\": 4, \"five\"\
    : 5, \"six\": 6, \"seven\": 7, \"eight\": 8, \"nine\": 9]\n    let numeral_array\
    \ = numbers.split(separator: \" \")\n    let sorted_numbers = numeral_array.sorted\
    \ {\n        numeral_map[String($0)]! < numeral_map[String($1)]!\n    }\n    return\
    \ sorted_numbers.joined(separator: \" \")\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013249
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let nums = numbers.split(separator:\
    \ \" \")\n    var nums_int = [Int]()\n    for num in nums {\n        nums_int.append(number_to_int(number:\
    \ String(num)))\n    }\n    nums_int.sort()\n    var result = \"\"\n    for num\
    \ in nums_int {\n        result += int_to_number(number: num) + \" \"\n    }\n\
    \    return String(result.dropLast())\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers: \"three\"\
    ) == \"three\")\nassert(sort_numbers(numbers: \"three five nine\") == \"three\
    \ five nine\")\nassert(sort_numbers(numbers: \"five zero four seven nine eight\"\
    ) == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers: \"six\
    \ five four three two one zero\") == \"zero one two three four five six\")"
  status: SyntaxError
  stderr: "/tmp/tmpaufbt_2v.swift:11:25: error: cannot find 'number_to_int' in scope\n\
    \        nums_int.append(number_to_int(number: String(num)))\n               \
    \         ^~~~~~~~~~~~~\n/tmp/tmpaufbt_2v.swift:16:19: error: cannot find 'int_to_number'\
    \ in scope\n        result += int_to_number(number: num) + \" \"\n           \
    \       ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013249
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let numbers = numbers.components(separatedBy:\
    \ \" \")\n    let sortedNumbers = numbers.sorted { (n1, n2) -> Bool in\n     \
    \   return number_to_int(number: n1) < number_to_int(number: n2)\n    }\n    return\
    \ sortedNumbers.joined(separator: \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers: \"three\"\
    ) == \"three\")\nassert(sort_numbers(numbers: \"three five nine\") == \"three\
    \ five nine\")\nassert(sort_numbers(numbers: \"five zero four seven nine eight\"\
    ) == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers: \"six\
    \ five four three two one zero\") == \"zero one two three four five six\")"
  status: SyntaxError
  stderr: "/tmp/tmpgtfwio2v.swift:8:27: error: value of type 'String' has no member\
    \ 'components'\n    let numbers = numbers.components(separatedBy: \" \")\n   \
    \               ~~~~~~~ ^~~~~~~~~~\n/tmp/tmpgtfwio2v.swift:10:16: error: cannot\
    \ find 'number_to_int' in scope\n        return number_to_int(number: n1) < number_to_int(number:\
    \ n2)\n               ^~~~~~~~~~~~~\n/tmp/tmpgtfwio2v.swift:10:44: error: cannot\
    \ find 'number_to_int' in scope\n        return number_to_int(number: n1) < number_to_int(number:\
    \ n2)\n                                           ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013249
- exit_code: -4
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let nums = numbers.split(separator:\
    \ \" \")\n    let sorted = nums.sorted { (a, b) -> Bool in\n        return a.count\
    \ < b.count\n    }\n    return sorted.joined(separator: \" \")\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: Exception
  stderr: 'tmpimtn9rgn/tmpimtn9rgn.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b46e076cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b46e0463b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b46e0463988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b46e04627b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpimtn9rgn                        0x000055ce566828e2 <unavailable> + 6370

    5    libc.so.6                          0x00002b46e0958460 __libc_start_main +
    245

    6    tmpimtn9rgn                        0x000055ce56682319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1660013249
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let numbers = numbers.components(separatedBy:\
    \ \" \")\n    let sortedNumbers = numbers.sorted { (a, b) -> Bool in\n       \
    \ return numberToInt(number: a) < numberToInt(number: b)\n    }\n    return sortedNumbers.joined(separator:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmptxirb7p3.swift:8:27: error: value of type 'String' has no member\
    \ 'components'\n    let numbers = numbers.components(separatedBy: \" \")\n   \
    \               ~~~~~~~ ^~~~~~~~~~\n/tmp/tmptxirb7p3.swift:10:16: error: cannot\
    \ find 'numberToInt' in scope\n        return numberToInt(number: a) < numberToInt(number:\
    \ b)\n               ^~~~~~~~~~~\n/tmp/tmptxirb7p3.swift:10:41: error: cannot\
    \ find 'numberToInt' in scope\n        return numberToInt(number: a) < numberToInt(number:\
    \ b)\n                                        ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013249
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let numbers = numbers.components(separatedBy:\
    \ \" \")\n    let sortedNumbers = numbers.sorted { (a, b) -> Bool in\n       \
    \ return number_to_int(number: a) < number_to_int(number: b)\n    }\n    return\
    \ sortedNumbers.joined(separator: \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers: \"three\"\
    ) == \"three\")\nassert(sort_numbers(numbers: \"three five nine\") == \"three\
    \ five nine\")\nassert(sort_numbers(numbers: \"five zero four seven nine eight\"\
    ) == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers: \"six\
    \ five four three two one zero\") == \"zero one two three four five six\")"
  status: SyntaxError
  stderr: "/tmp/tmpxt_pm919.swift:8:27: error: value of type 'String' has no member\
    \ 'components'\n    let numbers = numbers.components(separatedBy: \" \")\n   \
    \               ~~~~~~~ ^~~~~~~~~~\n/tmp/tmpxt_pm919.swift:10:16: error: cannot\
    \ find 'number_to_int' in scope\n        return number_to_int(number: a) < number_to_int(number:\
    \ b)\n               ^~~~~~~~~~~~~\n/tmp/tmpxt_pm919.swift:10:43: error: cannot\
    \ find 'number_to_int' in scope\n        return number_to_int(number: a) < number_to_int(number:\
    \ b)\n                                          ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013248
- exit_code: -4
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let nums = numbers.split(separator:\
    \ \" \")\n    let sorted = nums.sorted { (lhs, rhs) -> Bool in\n        return\
    \ Int(lhs)! < Int(rhs)!\n    }\n    return sorted.joined(separator: \" \")\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: Exception
  stderr: 'tmpb_vkuxt6/tmpb_vkuxt6.swift:10: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002b7961dacc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7961aa3561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b7961aa3286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b7961aa313c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b7961aa2bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpb_vkuxt6                        0x000056122102803c <unavailable> + 8252

    6    libswiftCore.so                    0x00002b7961bc4c90 MutableCollection<>._insertionSort(within:sortedEnd:by:)
    + 770

    7    libswiftCore.so                    0x00002b7961bc5110 MutableCollection<>._insertionSort(within:by:)
    + 356

    8    libswiftCore.so                    0x00002b7961bc3d30 UnsafeMutableBufferPointer._stableSortImpl(by:)
    + 319

    9    libswiftCore.so                    0x00002b7961bc3d15 <unavailable> + 2616597

    10   libswiftCore.so                    0x00002b7961ce965a <unavailable> + 3819098

    11   libswiftCore.so                    0x00002b7961ad8720 ContiguousArray.withContiguousMutableStorageIfAvailable<A>(_:)
    + 130

    12   libswiftCore.so                    0x00002b7961ad870f <unavailable> + 1652495

    13   libswiftCore.so                    0x00002b7961bc3460 MutableCollection<>.sort(by:)
    + 771

    14   libswiftCore.so                    0x00002b7961bc3370 Sequence.sorted(by:)
    + 193

    15   tmpb_vkuxt6                        0x0000561221027d6e <unavailable> + 7534

    16   tmpb_vkuxt6                        0x00005612210278c1 <unavailable> + 6337

    17   libc.so.6                          0x00002b7961f98460 __libc_start_main +
    245

    18   tmpb_vkuxt6                        0x00005612210273e9 <unavailable> + 5097

    '
  stdout: ''
  timestamp: 1660013249
- exit_code: 0
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let numberals =\
    \ [\"zero\", \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\"\
    , \"eight\", \"nine\"]\n    let nums = numbers.split(separator: \" \")\n    let\
    \ sorted = nums.sorted { (lhs, rhs) -> Bool in\n        return numberals.firstIndex(of:\
    \ String(lhs))! < numberals.firstIndex(of: String(rhs))!\n    }\n    return sorted.joined(separator:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013249
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let nums = numbers.split(separator:\
    \ \" \")\n    let numsInt = nums.map { Int(numberToInt[String($0)]!) }\n    let\
    \ sortedNums = numsInt.sorted()\n    let sortedNumsStr = sortedNums.map { intToNumber[String($0)]!\
    \ }\n    return sortedNumsStr.joined(separator: \" \")\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp4pk38uoa.swift:9:34: error: cannot find 'numberToInt' in scope\n\
    \    let numsInt = nums.map { Int(numberToInt[String($0)]!) }\n              \
    \                   ^~~~~~~~~~~\n/tmp/tmp4pk38uoa.swift:11:42: error: cannot find\
    \ 'intToNumber' in scope\n    let sortedNumsStr = sortedNums.map { intToNumber[String($0)]!\
    \ }\n                                         ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013249
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let nums = numbers.split(separator:\
    \ \" \")\n    let sorted = nums.sorted(by: {\n        let num1 = Int(numbers_to_digits[String($0)])!\n\
    \        let num2 = Int(numbers_to_digits[String($1)])!\n        return num1 <\
    \ num2\n    })\n    return sorted.joined(separator: \" \")\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp8q5bvgkn.swift:10:24: error: cannot find 'numbers_to_digits' in\
    \ scope\n        let num1 = Int(numbers_to_digits[String($0)])!\n            \
    \           ^~~~~~~~~~~~~~~~~\n/tmp/tmp8q5bvgkn.swift:11:24: error: cannot find\
    \ 'numbers_to_digits' in scope\n        let num2 = Int(numbers_to_digits[String($1)])!\n\
    \                       ^~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013249
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let nums = numbers.components(separatedBy:\
    \ \" \")\n    let sorted = nums.sorted { (a, b) -> Bool in\n        return number_to_int(number:\
    \ a) < number_to_int(number: b)\n    }\n    return sorted.joined(separator: \"\
    \ \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers: \"\
    \") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpwbtwbarw.swift:8:24: error: value of type 'String' has no member\
    \ 'components'\n    let nums = numbers.components(separatedBy: \" \")\n      \
    \         ~~~~~~~ ^~~~~~~~~~\n/tmp/tmpwbtwbarw.swift:10:16: error: cannot find\
    \ 'number_to_int' in scope\n        return number_to_int(number: a) < number_to_int(number:\
    \ b)\n               ^~~~~~~~~~~~~\n/tmp/tmpwbtwbarw.swift:10:43: error: cannot\
    \ find 'number_to_int' in scope\n        return number_to_int(number: a) < number_to_int(number:\
    \ b)\n                                          ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013248
- exit_code: -4
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let numeral_map\
    \ = [\"zero\": 0, \"one\": 1, \"two\": 2, \"three\": 3, \"four\": 4, \"five\"\
    : 5, \"six\": 6, \"seven\": 7, \"eight\": 8, \"nine\": 9]\n    let numeral_array\
    \ = numbers.split(separator: \" \")\n    var numeral_int_array = [Int]()\n   \
    \ for numeral in numeral_array {\n        numeral_int_array.append(numeral_map[String(numeral)]!)\n\
    \    }\n    numeral_int_array.sort()\n    var numeral_string_array = [String]()\n\
    \    for numeral in numeral_int_array {\n        numeral_string_array.append(String(numeral))\n\
    \    }\n    return numeral_string_array.joined(separator: \" \")\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: Exception
  stderr: 'tmp6sgm7uu2/tmp6sgm7uu2.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b25d8233c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b25d7f2ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b25d7f2a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b25d7f297b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6sgm7uu2                        0x0000558cee2aee25 <unavailable> + 7717

    5    libc.so.6                          0x00002b25d841f460 __libc_start_main +
    245

    6    tmp6sgm7uu2                        0x0000558cee2ae979 <unavailable> + 6521

    '
  stdout: ''
  timestamp: 1660013250
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let nums = numbers.components(separatedBy:\
    \ \" \")\n    let sorted = nums.sorted { (a, b) -> Bool in\n        return numeral_to_int(numeral:\
    \ a) < numeral_to_int(numeral: b)\n    }\n    return sorted.joined(separator:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmphscahzad.swift:8:24: error: value of type 'String' has no member\
    \ 'components'\n    let nums = numbers.components(separatedBy: \" \")\n      \
    \         ~~~~~~~ ^~~~~~~~~~\n/tmp/tmphscahzad.swift:10:16: error: cannot find\
    \ 'numeral_to_int' in scope\n        return numeral_to_int(numeral: a) < numeral_to_int(numeral:\
    \ b)\n               ^~~~~~~~~~~~~~\n/tmp/tmphscahzad.swift:10:45: error: cannot\
    \ find 'numeral_to_int' in scope\n        return numeral_to_int(numeral: a) <\
    \ numeral_to_int(numeral: b)\n                                            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013248
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let nums = numbers.split(separator:\
    \ \" \")\n    var nums_int = [Int]()\n    for num in nums {\n        nums_int.append(number_to_int(number:\
    \ String(num)))\n    }\n    nums_int.sort()\n    var sorted_nums = [String]()\n\
    \    for num in nums_int {\n        sorted_nums.append(int_to_number(num: num))\n\
    \    }\n    return sorted_nums.joined(separator: \" \")\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpgnlwisww.swift:11:25: error: cannot find 'number_to_int' in scope\n\
    \        nums_int.append(number_to_int(number: String(num)))\n               \
    \         ^~~~~~~~~~~~~\n/tmp/tmpgnlwisww.swift:16:28: error: cannot find 'int_to_number'\
    \ in scope\n        sorted_nums.append(int_to_number(num: num))\n            \
    \               ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013249
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let numbers = numbers.components(separatedBy:\
    \ \" \")\n    let sortedNumbers = numbers.sorted { (number1, number2) -> Bool\
    \ in\n        let number1 = number1.toInt()\n        let number2 = number2.toInt()\n\
    \        return number1 < number2\n    }\n    return sortedNumbers.joined(separator:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpvxn4fs8m.swift:8:27: error: value of type 'String' has no member\
    \ 'components'\n    let numbers = numbers.components(separatedBy: \" \")\n   \
    \               ~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013249
- exit_code: -4
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let nums = numbers.split(separator:\
    \ \" \")\n    let sorted = nums.sorted(by: {\n        let a = Int(String($0))!\n\
    \        let b = Int(String($1))!\n        return a < b\n    })\n    return sorted.joined(separator:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: Exception
  stderr: 'tmpc4ahxh59/tmpc4ahxh59.swift:10: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002af90aa87c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af90a77e561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002af90a77e286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002af90a77e13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002af90a77dbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpc4ahxh59                        0x00005631ba303036 <unavailable> + 8246

    6    libswiftCore.so                    0x00002af90a89fc90 MutableCollection<>._insertionSort(within:sortedEnd:by:)
    + 770

    7    libswiftCore.so                    0x00002af90a8a0110 MutableCollection<>._insertionSort(within:by:)
    + 356

    8    libswiftCore.so                    0x00002af90a89ed30 UnsafeMutableBufferPointer._stableSortImpl(by:)
    + 319

    9    libswiftCore.so                    0x00002af90a89ed15 <unavailable> + 2616597

    10   libswiftCore.so                    0x00002af90a9c465a <unavailable> + 3819098

    11   libswiftCore.so                    0x00002af90a7b3720 ContiguousArray.withContiguousMutableStorageIfAvailable<A>(_:)
    + 130

    12   libswiftCore.so                    0x00002af90a7b370f <unavailable> + 1652495

    13   libswiftCore.so                    0x00002af90a89e460 MutableCollection<>.sort(by:)
    + 771

    14   libswiftCore.so                    0x00002af90a89e370 Sequence.sorted(by:)
    + 193

    15   tmpc4ahxh59                        0x00005631ba302dae <unavailable> + 7598

    16   tmpc4ahxh59                        0x00005631ba302901 <unavailable> + 6401

    17   libc.so.6                          0x00002af90ac73460 __libc_start_main +
    245

    18   tmpc4ahxh59                        0x00005631ba302429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1660013250
- exit_code: 0
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let numberals =\
    \ [\"zero\", \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\"\
    , \"eight\", \"nine\"]\n    let sorted = numbers.split(separator: \" \").map {\
    \ String($0) }.sorted { numberals.firstIndex(of: $0)! < numberals.firstIndex(of:\
    \ $1)! }\n    return sorted.joined(separator: \" \")\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013249
- exit_code: -4
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let nums = numbers.split(separator:\
    \ \" \")\n    let sorted = nums.sorted { (a, b) -> Bool in\n        return a <\
    \ b\n    }\n    return sorted.joined(separator: \" \")\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: Exception
  stderr: 'tmp_hc9gjie/tmp_hc9gjie.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab0e95bec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab0e92b5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab0e92b5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab0e92b47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_hc9gjie                        0x0000560ce17cf8b2 <unavailable> + 6322

    5    libc.so.6                          0x00002ab0e97aa460 __libc_start_main +
    245

    6    tmp_hc9gjie                        0x0000560ce17cf2e9 <unavailable> + 4841

    '
  stdout: ''
  timestamp: 1660013249
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let nums = numbers.split(separator:\
    \ \" \")\n    let sorted = nums.sorted { (a, b) -> Bool in\n        return number_to_int(number:\
    \ String(a)) < number_to_int(number: String(b))\n    }\n    return sorted.joined(separator:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp53yhqnlo.swift:10:16: error: cannot find 'number_to_int' in scope\n\
    \        return number_to_int(number: String(a)) < number_to_int(number: String(b))\n\
    \               ^~~~~~~~~~~~~\n/tmp/tmp53yhqnlo.swift:10:51: error: cannot find\
    \ 'number_to_int' in scope\n        return number_to_int(number: String(a)) <\
    \ number_to_int(number: String(b))\n                                         \
    \         ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013249
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let nums = numbers.components(separatedBy:\
    \ \" \")\n    let sorted = nums.sorted { (a, b) -> Bool in\n        return number_to_int(number:\
    \ a) < number_to_int(number: b)\n    }\n    return sorted.joined(separator: \"\
    \ \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers: \"\
    \") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpwbtwbarw.swift:8:24: error: value of type 'String' has no member\
    \ 'components'\n    let nums = numbers.components(separatedBy: \" \")\n      \
    \         ~~~~~~~ ^~~~~~~~~~\n/tmp/tmpwbtwbarw.swift:10:16: error: cannot find\
    \ 'number_to_int' in scope\n        return number_to_int(number: a) < number_to_int(number:\
    \ b)\n               ^~~~~~~~~~~~~\n/tmp/tmpwbtwbarw.swift:10:43: error: cannot\
    \ find 'number_to_int' in scope\n        return number_to_int(number: a) < number_to_int(number:\
    \ b)\n                                          ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013248
- exit_code: -4
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let nums = numbers.split(separator:\
    \ \" \")\n    let sorted = nums.sorted { (a, b) -> Bool in\n        return a <\
    \ b\n    }\n    return sorted.joined(separator: \" \")\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: Exception
  stderr: 'tmp_hc9gjie/tmp_hc9gjie.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab0e95bec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab0e92b5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab0e92b5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab0e92b47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_hc9gjie                        0x0000560ce17cf8b2 <unavailable> + 6322

    5    libc.so.6                          0x00002ab0e97aa460 __libc_start_main +
    245

    6    tmp_hc9gjie                        0x0000560ce17cf2e9 <unavailable> + 4841

    '
  stdout: ''
  timestamp: 1660013249
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let nums = numbers.components(separatedBy:\
    \ \" \")\n    let sorted = nums.sorted { (a, b) -> Bool in\n        return number_to_int(number:\
    \ a) < number_to_int(number: b)\n    }\n    return sorted.joined(separator: \"\
    \ \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers: \"\
    \") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpwbtwbarw.swift:8:24: error: value of type 'String' has no member\
    \ 'components'\n    let nums = numbers.components(separatedBy: \" \")\n      \
    \         ~~~~~~~ ^~~~~~~~~~\n/tmp/tmpwbtwbarw.swift:10:16: error: cannot find\
    \ 'number_to_int' in scope\n        return number_to_int(number: a) < number_to_int(number:\
    \ b)\n               ^~~~~~~~~~~~~\n/tmp/tmpwbtwbarw.swift:10:43: error: cannot\
    \ find 'number_to_int' in scope\n        return number_to_int(number: a) < number_to_int(number:\
    \ b)\n                                          ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013248
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let nums = numbers.components(separatedBy:\
    \ \" \")\n    let sorted = nums.sorted { (a, b) -> Bool in\n        return Int(a)!\
    \ < Int(b)!\n    }\n    return sorted.joined(separator: \" \")\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp0ithea0v.swift:8:24: error: value of type 'String' has no member\
    \ 'components'\n    let nums = numbers.components(separatedBy: \" \")\n      \
    \         ~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013249
- exit_code: -4
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let nums = numbers.split(separator:\
    \ \" \")\n    let sorted = nums.sorted { (a, b) -> Bool in\n        return Int(a)!\
    \ < Int(b)!\n    }\n    return sorted.joined(separator: \" \")\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: Exception
  stderr: 'tmpynqhc_m4/tmpynqhc_m4.swift:10: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002b7a73162c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7a72e59561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b7a72e59286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b7a72e5913c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b7a72e58bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpynqhc_m4                        0x000055936b50a03c <unavailable> + 8252

    6    libswiftCore.so                    0x00002b7a72f7ac90 MutableCollection<>._insertionSort(within:sortedEnd:by:)
    + 770

    7    libswiftCore.so                    0x00002b7a72f7b110 MutableCollection<>._insertionSort(within:by:)
    + 356

    8    libswiftCore.so                    0x00002b7a72f79d30 UnsafeMutableBufferPointer._stableSortImpl(by:)
    + 319

    9    libswiftCore.so                    0x00002b7a72f79d15 <unavailable> + 2616597

    10   libswiftCore.so                    0x00002b7a7309f65a <unavailable> + 3819098

    11   libswiftCore.so                    0x00002b7a72e8e720 ContiguousArray.withContiguousMutableStorageIfAvailable<A>(_:)
    + 130

    12   libswiftCore.so                    0x00002b7a72e8e70f <unavailable> + 1652495

    13   libswiftCore.so                    0x00002b7a72f79460 MutableCollection<>.sort(by:)
    + 771

    14   libswiftCore.so                    0x00002b7a72f79370 Sequence.sorted(by:)
    + 193

    15   tmpynqhc_m4                        0x000055936b509d6e <unavailable> + 7534

    16   tmpynqhc_m4                        0x000055936b5098c1 <unavailable> + 6337

    17   libc.so.6                          0x00002b7a7334e460 __libc_start_main +
    245

    18   tmpynqhc_m4                        0x000055936b5093e9 <unavailable> + 5097

    '
  stdout: ''
  timestamp: 1660013248
- exit_code: 0
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let numberals =\
    \ [\"zero\", \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\"\
    , \"eight\", \"nine\"]\n    let input = numbers.split(separator: \" \")\n    var\
    \ output = [String]()\n    for numeral in input {\n        output.append(String(numeral))\n\
    \    }\n    output.sort { (a, b) -> Bool in\n        return numberals.firstIndex(of:\
    \ a)! < numberals.firstIndex(of: b)!\n    }\n    return output.joined(separator:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013250
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let nums = numbers.components(separatedBy:\
    \ \" \")\n    let sorted = nums.sorted { (a, b) -> Bool in\n        return numeral_to_int(numeral:\
    \ a) < numeral_to_int(numeral: b)\n    }\n    return sorted.joined(separator:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmphscahzad.swift:8:24: error: value of type 'String' has no member\
    \ 'components'\n    let nums = numbers.components(separatedBy: \" \")\n      \
    \         ~~~~~~~ ^~~~~~~~~~\n/tmp/tmphscahzad.swift:10:16: error: cannot find\
    \ 'numeral_to_int' in scope\n        return numeral_to_int(numeral: a) < numeral_to_int(numeral:\
    \ b)\n               ^~~~~~~~~~~~~~\n/tmp/tmphscahzad.swift:10:45: error: cannot\
    \ find 'numeral_to_int' in scope\n        return numeral_to_int(numeral: a) <\
    \ numeral_to_int(numeral: b)\n                                            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013248
- exit_code: -4
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let numbers = numbers.split(separator:\
    \ \" \")\n    let sortedNumbers = numbers.sorted { (lhs, rhs) -> Bool in\n   \
    \     return Int(lhs)! < Int(rhs)!\n    }\n    return sortedNumbers.joined(separator:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: Exception
  stderr: 'tmpnveobtux/tmpnveobtux.swift:10: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002aae6540fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aae65106561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002aae65106286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002aae6510613c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002aae65105bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpnveobtux                        0x000055ce1ceb503c <unavailable> + 8252

    6    libswiftCore.so                    0x00002aae65227c90 MutableCollection<>._insertionSort(within:sortedEnd:by:)
    + 770

    7    libswiftCore.so                    0x00002aae65228110 MutableCollection<>._insertionSort(within:by:)
    + 356

    8    libswiftCore.so                    0x00002aae65226d30 UnsafeMutableBufferPointer._stableSortImpl(by:)
    + 319

    9    libswiftCore.so                    0x00002aae65226d15 <unavailable> + 2616597

    10   libswiftCore.so                    0x00002aae6534c65a <unavailable> + 3819098

    11   libswiftCore.so                    0x00002aae6513b720 ContiguousArray.withContiguousMutableStorageIfAvailable<A>(_:)
    + 130

    12   libswiftCore.so                    0x00002aae6513b70f <unavailable> + 1652495

    13   libswiftCore.so                    0x00002aae65226460 MutableCollection<>.sort(by:)
    + 771

    14   libswiftCore.so                    0x00002aae65226370 Sequence.sorted(by:)
    + 193

    15   tmpnveobtux                        0x000055ce1ceb4d6e <unavailable> + 7534

    16   tmpnveobtux                        0x000055ce1ceb48c1 <unavailable> + 6337

    17   libc.so.6                          0x00002aae655fb460 __libc_start_main +
    245

    18   tmpnveobtux                        0x000055ce1ceb43e9 <unavailable> + 5097

    '
  stdout: ''
  timestamp: 1660013248
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let nums = numbers.components(separatedBy:\
    \ \" \")\n    let sorted = nums.sorted { (s1, s2) -> Bool in\n        return s1\
    \ < s2\n    }\n    return sorted.joined(separator: \" \")\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpdgto7xyt.swift:8:24: error: value of type 'String' has no member\
    \ 'components'\n    let nums = numbers.components(separatedBy: \" \")\n      \
    \         ~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013249
- exit_code: -4
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let numbers = numbers.split(separator:\
    \ \" \")\n    let sorted = numbers.sorted { (lhs, rhs) -> Bool in\n        return\
    \ Int(lhs)! < Int(rhs)!\n    }\n    return sorted.joined(separator: \" \")\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: Exception
  stderr: 'tmp45z5vcrr/tmp45z5vcrr.swift:10: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002afff7496c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afff718d561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002afff718d286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002afff718d13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002afff718cbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmp45z5vcrr                        0x0000562fa55d403c <unavailable> + 8252

    6    libswiftCore.so                    0x00002afff72aec90 MutableCollection<>._insertionSort(within:sortedEnd:by:)
    + 770

    7    libswiftCore.so                    0x00002afff72af110 MutableCollection<>._insertionSort(within:by:)
    + 356

    8    libswiftCore.so                    0x00002afff72add30 UnsafeMutableBufferPointer._stableSortImpl(by:)
    + 319

    9    libswiftCore.so                    0x00002afff72add15 <unavailable> + 2616597

    10   libswiftCore.so                    0x00002afff73d365a <unavailable> + 3819098

    11   libswiftCore.so                    0x00002afff71c2720 ContiguousArray.withContiguousMutableStorageIfAvailable<A>(_:)
    + 130

    12   libswiftCore.so                    0x00002afff71c270f <unavailable> + 1652495

    13   libswiftCore.so                    0x00002afff72ad460 MutableCollection<>.sort(by:)
    + 771

    14   libswiftCore.so                    0x00002afff72ad370 Sequence.sorted(by:)
    + 193

    15   tmp45z5vcrr                        0x0000562fa55d3d6e <unavailable> + 7534

    16   tmp45z5vcrr                        0x0000562fa55d38c1 <unavailable> + 6337

    17   libc.so.6                          0x00002afff7682460 __libc_start_main +
    245

    18   tmp45z5vcrr                        0x0000562fa55d33e9 <unavailable> + 5097

    '
  stdout: ''
  timestamp: 1660013250
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let number_map =\
    \ [\"zero\": 0, \"one\": 1, \"two\": 2, \"three\": 3, \"four\": 4, \"five\": 5,\
    \ \"six\": 6, \"seven\": 7, \"eight\": 8, \"nine\": 9]\n    let numbers_array\
    \ = numbers.components(separatedBy: \" \")\n    let sorted_numbers = numbers_array.sorted\
    \ { (a, b) -> Bool in\n        return number_map[a]! < number_map[b]!\n    }\n\
    \    return sorted_numbers.joined(separator: \" \")\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp_zofnyg4.swift:9:33: error: value of type 'String' has no member\
    \ 'components'\n    let numbers_array = numbers.components(separatedBy: \" \"\
    )\n                        ~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013248
- exit_code: 0
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let numberals =\
    \ [\"zero\", \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\"\
    , \"eight\", \"nine\"]\n    let nums = numbers.split(separator: \" \")\n    let\
    \ sorted = nums.sorted { numberals.firstIndex(of: String($0))! < numberals.firstIndex(of:\
    \ String($1))! }\n    return sorted.joined(separator: \" \")\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013250
- exit_code: 0
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let numberals =\
    \ [\"zero\", \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\"\
    , \"eight\", \"nine\"]\n    let sorted = numbers.split(separator: \" \").sorted\
    \ { numberals.firstIndex(of: String($0))! < numberals.firstIndex(of: String($1))!\
    \ }\n    return sorted.joined(separator: \" \")\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013248
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let nums = numbers.components(separatedBy:\
    \ \" \")\n    let sorted = nums.sorted { (a, b) -> Bool in\n        return number_to_int(number:\
    \ a) < number_to_int(number: b)\n    }\n    return sorted.joined(separator: \"\
    \ \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers: \"\
    \") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpwbtwbarw.swift:8:24: error: value of type 'String' has no member\
    \ 'components'\n    let nums = numbers.components(separatedBy: \" \")\n      \
    \         ~~~~~~~ ^~~~~~~~~~\n/tmp/tmpwbtwbarw.swift:10:16: error: cannot find\
    \ 'number_to_int' in scope\n        return number_to_int(number: a) < number_to_int(number:\
    \ b)\n               ^~~~~~~~~~~~~\n/tmp/tmpwbtwbarw.swift:10:43: error: cannot\
    \ find 'number_to_int' in scope\n        return number_to_int(number: a) < number_to_int(number:\
    \ b)\n                                          ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013248
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let nums = numbers.components(separatedBy:\
    \ \" \")\n    let sorted = nums.sorted { (a, b) -> Bool in\n        return number_to_int(number:\
    \ a) < number_to_int(number: b)\n    }\n    return sorted.joined(separator: \"\
    \ \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers: \"\
    \") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpwbtwbarw.swift:8:24: error: value of type 'String' has no member\
    \ 'components'\n    let nums = numbers.components(separatedBy: \" \")\n      \
    \         ~~~~~~~ ^~~~~~~~~~\n/tmp/tmpwbtwbarw.swift:10:16: error: cannot find\
    \ 'number_to_int' in scope\n        return number_to_int(number: a) < number_to_int(number:\
    \ b)\n               ^~~~~~~~~~~~~\n/tmp/tmpwbtwbarw.swift:10:43: error: cannot\
    \ find 'number_to_int' in scope\n        return number_to_int(number: a) < number_to_int(number:\
    \ b)\n                                          ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013248
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let numbers = numbers.components(separatedBy:\
    \ \" \")\n    let sortedNumbers = numbers.sorted { (s1, s2) -> Bool in\n     \
    \   return s1 < s2\n    }\n    return sortedNumbers.joined(separator: \" \")\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp98o9d792.swift:8:27: error: value of type 'String' has no member\
    \ 'components'\n    let numbers = numbers.components(separatedBy: \" \")\n   \
    \               ~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013249
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let numbersArray\
    \ = numbers.components(separatedBy: \" \")\n    let sortedNumbers = numbersArray.sorted\
    \ { (first, second) -> Bool in\n        return first < second\n    }\n    return\
    \ sortedNumbers.joined(separator: \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers: \"three\"\
    ) == \"three\")\nassert(sort_numbers(numbers: \"three five nine\") == \"three\
    \ five nine\")\nassert(sort_numbers(numbers: \"five zero four seven nine eight\"\
    ) == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers: \"six\
    \ five four three two one zero\") == \"zero one two three four five six\")"
  status: SyntaxError
  stderr: "/tmp/tmpi_pxl88f.swift:8:32: error: value of type 'String' has no member\
    \ 'components'\n    let numbersArray = numbers.components(separatedBy: \" \")\n\
    \                       ~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013249
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let nums = numbers.split(separator:\
    \ \" \")\n    let sorted = nums.sorted {\n        let a = Int(word_to_number(word:\
    \ String($0))!)\n        let b = Int(word_to_number(word: String($1))!)\n    \
    \    return a < b\n    }\n    return sorted.joined(separator: \" \")\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmprkgh4uh8.swift:10:21: error: cannot find 'word_to_number' in scope\n\
    \        let a = Int(word_to_number(word: String($0))!)\n                    ^~~~~~~~~~~~~~\n\
    /tmp/tmprkgh4uh8.swift:11:21: error: cannot find 'word_to_number' in scope\n \
    \       let b = Int(word_to_number(word: String($1))!)\n                    ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013249
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let nums = numbers.components(separatedBy:\
    \ \" \")\n    let sorted = nums.sorted { (a, b) -> Bool in\n        return number_to_int(number:\
    \ a) < number_to_int(number: b)\n    }\n    return sorted.joined(separator: \"\
    \ \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers: \"\
    \") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpwbtwbarw.swift:8:24: error: value of type 'String' has no member\
    \ 'components'\n    let nums = numbers.components(separatedBy: \" \")\n      \
    \         ~~~~~~~ ^~~~~~~~~~\n/tmp/tmpwbtwbarw.swift:10:16: error: cannot find\
    \ 'number_to_int' in scope\n        return number_to_int(number: a) < number_to_int(number:\
    \ b)\n               ^~~~~~~~~~~~~\n/tmp/tmpwbtwbarw.swift:10:43: error: cannot\
    \ find 'number_to_int' in scope\n        return number_to_int(number: a) < number_to_int(number:\
    \ b)\n                                          ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013248
- exit_code: 0
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let nums = numbers.split(separator:\
    \ \" \")\n    let sorted = nums.sorted(by: {\n        switch $0 {\n        case\
    \ \"zero\":\n            return true\n        case \"one\":\n            return\
    \ $1 != \"zero\"\n        case \"two\":\n            return $1 != \"zero\" &&\
    \ $1 != \"one\"\n        case \"three\":\n            return $1 != \"zero\" &&\
    \ $1 != \"one\" && $1 != \"two\"\n        case \"four\":\n            return $1\
    \ != \"zero\" && $1 != \"one\" && $1 != \"two\" && $1 != \"three\"\n        case\
    \ \"five\":\n            return $1 != \"zero\" && $1 != \"one\" && $1 != \"two\"\
    \ && $1 != \"three\" && $1 != \"four\"\n        case \"six\":\n            return\
    \ $1 != \"zero\" && $1 != \"one\" && $1 != \"two\" && $1 != \"three\" && $1 !=\
    \ \"four\" && $1 != \"five\"\n        case \"seven\":\n            return $1 !=\
    \ \"zero\" && $1 != \"one\" && $1 != \"two\" && $1 != \"three\" && $1 != \"four\"\
    \ && $1 != \"five\" && $1 != \"six\"\n        case \"eight\":\n            return\
    \ $1 != \"zero\" && $1 != \"one\" && $1 != \"two\" && $1 != \"three\" && $1 !=\
    \ \"four\" && $1 != \"five\" && $1 != \"six\" && $1 != \"seven\"\n        case\
    \ \"nine\":\n            return $1 != \"zero\" && $1 != \"one\" && $1 != \"two\"\
    \ && $1 != \"three\" && $1 != \"four\" && $1 != \"five\" && $1 != \"six\" && $1\
    \ != \"seven\" && $1 != \"eight\"\n        default:\n            return false\n\
    \        }\n    })\n    return sorted.joined(separator: \" \")\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013249
- exit_code: -4
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let nums = numbers.split(separator:\
    \ \" \")\n    let sorted = nums.sorted { (a, b) -> Bool in\n        return Int(a)!\
    \ < Int(b)!\n    }\n    return sorted.joined(separator: \" \")\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: Exception
  stderr: 'tmpynqhc_m4/tmpynqhc_m4.swift:10: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002b7a73162c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7a72e59561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b7a72e59286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b7a72e5913c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b7a72e58bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpynqhc_m4                        0x000055936b50a03c <unavailable> + 8252

    6    libswiftCore.so                    0x00002b7a72f7ac90 MutableCollection<>._insertionSort(within:sortedEnd:by:)
    + 770

    7    libswiftCore.so                    0x00002b7a72f7b110 MutableCollection<>._insertionSort(within:by:)
    + 356

    8    libswiftCore.so                    0x00002b7a72f79d30 UnsafeMutableBufferPointer._stableSortImpl(by:)
    + 319

    9    libswiftCore.so                    0x00002b7a72f79d15 <unavailable> + 2616597

    10   libswiftCore.so                    0x00002b7a7309f65a <unavailable> + 3819098

    11   libswiftCore.so                    0x00002b7a72e8e720 ContiguousArray.withContiguousMutableStorageIfAvailable<A>(_:)
    + 130

    12   libswiftCore.so                    0x00002b7a72e8e70f <unavailable> + 1652495

    13   libswiftCore.so                    0x00002b7a72f79460 MutableCollection<>.sort(by:)
    + 771

    14   libswiftCore.so                    0x00002b7a72f79370 Sequence.sorted(by:)
    + 193

    15   tmpynqhc_m4                        0x000055936b509d6e <unavailable> + 7534

    16   tmpynqhc_m4                        0x000055936b5098c1 <unavailable> + 6337

    17   libc.so.6                          0x00002b7a7334e460 __libc_start_main +
    245

    18   tmpynqhc_m4                        0x000055936b5093e9 <unavailable> + 5097

    '
  stdout: ''
  timestamp: 1660013248
- exit_code: -4
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let nums = numbers.split(separator:\
    \ \" \")\n    let sorted = nums.sorted { (a, b) -> Bool in\n        return Int(a)!\
    \ < Int(b)!\n    }\n    return sorted.joined(separator: \" \")\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: Exception
  stderr: 'tmpynqhc_m4/tmpynqhc_m4.swift:10: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002b7a73162c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7a72e59561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b7a72e59286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b7a72e5913c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b7a72e58bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpynqhc_m4                        0x000055936b50a03c <unavailable> + 8252

    6    libswiftCore.so                    0x00002b7a72f7ac90 MutableCollection<>._insertionSort(within:sortedEnd:by:)
    + 770

    7    libswiftCore.so                    0x00002b7a72f7b110 MutableCollection<>._insertionSort(within:by:)
    + 356

    8    libswiftCore.so                    0x00002b7a72f79d30 UnsafeMutableBufferPointer._stableSortImpl(by:)
    + 319

    9    libswiftCore.so                    0x00002b7a72f79d15 <unavailable> + 2616597

    10   libswiftCore.so                    0x00002b7a7309f65a <unavailable> + 3819098

    11   libswiftCore.so                    0x00002b7a72e8e720 ContiguousArray.withContiguousMutableStorageIfAvailable<A>(_:)
    + 130

    12   libswiftCore.so                    0x00002b7a72e8e70f <unavailable> + 1652495

    13   libswiftCore.so                    0x00002b7a72f79460 MutableCollection<>.sort(by:)
    + 771

    14   libswiftCore.so                    0x00002b7a72f79370 Sequence.sorted(by:)
    + 193

    15   tmpynqhc_m4                        0x000055936b509d6e <unavailable> + 7534

    16   tmpynqhc_m4                        0x000055936b5098c1 <unavailable> + 6337

    17   libc.so.6                          0x00002b7a7334e460 __libc_start_main +
    245

    18   tmpynqhc_m4                        0x000055936b5093e9 <unavailable> + 5097

    '
  stdout: ''
  timestamp: 1660013248
- exit_code: -4
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let numbers = numbers.split(separator:\
    \ \" \")\n    let sortedNumbers = numbers.sorted { (first, second) -> Bool in\n\
    \        return first < second\n    }\n    return sortedNumbers.joined(separator:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: Exception
  stderr: 'tmpahja2gmd/tmpahja2gmd.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9d6dd8bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9d6da82b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9d6da82988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9d6da817b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpahja2gmd                        0x000055835fb128b2 <unavailable> + 6322

    5    libc.so.6                          0x00002b9d6df77460 __libc_start_main +
    245

    6    tmpahja2gmd                        0x000055835fb122e9 <unavailable> + 4841

    '
  stdout: ''
  timestamp: 1660013248
- exit_code: -4
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let nums = numbers.split(separator:\
    \ \" \")\n    let sorted = nums.sorted { (a, b) -> Bool in\n        return Int(a)!\
    \ < Int(b)!\n    }\n    return sorted.joined(separator: \" \")\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: Exception
  stderr: 'tmpynqhc_m4/tmpynqhc_m4.swift:10: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002b7a73162c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7a72e59561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b7a72e59286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b7a72e5913c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b7a72e58bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpynqhc_m4                        0x000055936b50a03c <unavailable> + 8252

    6    libswiftCore.so                    0x00002b7a72f7ac90 MutableCollection<>._insertionSort(within:sortedEnd:by:)
    + 770

    7    libswiftCore.so                    0x00002b7a72f7b110 MutableCollection<>._insertionSort(within:by:)
    + 356

    8    libswiftCore.so                    0x00002b7a72f79d30 UnsafeMutableBufferPointer._stableSortImpl(by:)
    + 319

    9    libswiftCore.so                    0x00002b7a72f79d15 <unavailable> + 2616597

    10   libswiftCore.so                    0x00002b7a7309f65a <unavailable> + 3819098

    11   libswiftCore.so                    0x00002b7a72e8e720 ContiguousArray.withContiguousMutableStorageIfAvailable<A>(_:)
    + 130

    12   libswiftCore.so                    0x00002b7a72e8e70f <unavailable> + 1652495

    13   libswiftCore.so                    0x00002b7a72f79460 MutableCollection<>.sort(by:)
    + 771

    14   libswiftCore.so                    0x00002b7a72f79370 Sequence.sorted(by:)
    + 193

    15   tmpynqhc_m4                        0x000055936b509d6e <unavailable> + 7534

    16   tmpynqhc_m4                        0x000055936b5098c1 <unavailable> + 6337

    17   libc.so.6                          0x00002b7a7334e460 __libc_start_main +
    245

    18   tmpynqhc_m4                        0x000055936b5093e9 <unavailable> + 5097

    '
  stdout: ''
  timestamp: 1660013248
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let nums = numbers.components(separatedBy:\
    \ \" \")\n    let sorted = nums.sorted { (a, b) -> Bool in\n        return number_to_int(number:\
    \ a) < number_to_int(number: b)\n    }\n    return sorted.joined(separator: \"\
    \ \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers: \"\
    \") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpwbtwbarw.swift:8:24: error: value of type 'String' has no member\
    \ 'components'\n    let nums = numbers.components(separatedBy: \" \")\n      \
    \         ~~~~~~~ ^~~~~~~~~~\n/tmp/tmpwbtwbarw.swift:10:16: error: cannot find\
    \ 'number_to_int' in scope\n        return number_to_int(number: a) < number_to_int(number:\
    \ b)\n               ^~~~~~~~~~~~~\n/tmp/tmpwbtwbarw.swift:10:43: error: cannot\
    \ find 'number_to_int' in scope\n        return number_to_int(number: a) < number_to_int(number:\
    \ b)\n                                          ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013248
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let numberals =\
    \ numbers.components(separatedBy: \" \")\n    let sortedNumberals = numberals.sorted\
    \ { (numeral1, numeral2) -> Bool in\n        return numeral1 < numeral2\n    }\n\
    \    return sortedNumberals.joined(separator: \" \")\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpcxt7h9xr.swift:8:29: error: value of type 'String' has no member\
    \ 'components'\n    let numberals = numbers.components(separatedBy: \" \")\n \
    \                   ~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013249
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let nums = numbers.split(separator:\
    \ \" \")\n    let sorted = nums.sorted { (a, b) -> Bool in\n        return number_to_int(number:\
    \ String(a)) < number_to_int(number: String(b))\n    }\n    return sorted.joined(separator:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp53yhqnlo.swift:10:16: error: cannot find 'number_to_int' in scope\n\
    \        return number_to_int(number: String(a)) < number_to_int(number: String(b))\n\
    \               ^~~~~~~~~~~~~\n/tmp/tmp53yhqnlo.swift:10:51: error: cannot find\
    \ 'number_to_int' in scope\n        return number_to_int(number: String(a)) <\
    \ number_to_int(number: String(b))\n                                         \
    \         ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013249
- exit_code: 0
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let number_map =\
    \ [\"zero\": 0, \"one\": 1, \"two\": 2, \"three\": 3, \"four\": 4, \"five\": 5,\
    \ \"six\": 6, \"seven\": 7, \"eight\": 8, \"nine\": 9]\n    let nums = numbers.split(separator:\
    \ \" \")\n    var num_array = [Int]()\n    for num in nums {\n        num_array.append(number_map[String(num)]!)\n\
    \    }\n    num_array.sort()\n    var result = \"\"\n    for num in num_array\
    \ {\n        for (key, value) in number_map {\n            if value == num {\n\
    \                result += key + \" \"\n            }\n        }\n    }\n    return\
    \ String(result.dropLast())\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013250
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let nums = numbers.components(separatedBy:\
    \ \" \")\n    let sorted = nums.sorted { (a, b) -> Bool in\n        return Int(a)\
    \ ?? 0 < Int(b) ?? 0\n    }\n    return sorted.joined(separator: \" \")\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmph9sjmt8x.swift:8:24: error: value of type 'String' has no member\
    \ 'components'\n    let nums = numbers.components(separatedBy: \" \")\n      \
    \         ~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013250
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let numbers = numbers.components(separatedBy:\
    \ \" \")\n    let sorted = numbers.sorted { (s1, s2) -> Bool in\n        return\
    \ s1 < s2\n    }\n    return sorted.joined(separator: \" \")\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmplhij86og.swift:8:27: error: value of type 'String' has no member\
    \ 'components'\n    let numbers = numbers.components(separatedBy: \" \")\n   \
    \               ~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013249
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let nums = numbers.components(separatedBy:\
    \ \" \")\n    let sorted = nums.sorted { (a, b) -> Bool in\n        return numeral_to_int(numeral:\
    \ a) < numeral_to_int(numeral: b)\n    }\n    return sorted.joined(separator:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmphscahzad.swift:8:24: error: value of type 'String' has no member\
    \ 'components'\n    let nums = numbers.components(separatedBy: \" \")\n      \
    \         ~~~~~~~ ^~~~~~~~~~\n/tmp/tmphscahzad.swift:10:16: error: cannot find\
    \ 'numeral_to_int' in scope\n        return numeral_to_int(numeral: a) < numeral_to_int(numeral:\
    \ b)\n               ^~~~~~~~~~~~~~\n/tmp/tmphscahzad.swift:10:45: error: cannot\
    \ find 'numeral_to_int' in scope\n        return numeral_to_int(numeral: a) <\
    \ numeral_to_int(numeral: b)\n                                            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013248
