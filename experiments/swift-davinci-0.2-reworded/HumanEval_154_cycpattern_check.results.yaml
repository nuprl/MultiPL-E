language: swift
name: HumanEval_154_cycpattern_check
results:
- exit_code: -4
  program: "\n/// You are given 2 words. You need to return true if the second word\
    \ or any of its rotations is a substring in the first word\n/// >>> cycpattern_check(a:\
    \ \"abcd\", b: \"abd\")\n/// false\n/// >>> cycpattern_check(a: \"hello\", b:\
    \ \"ell\")\n/// true\n/// >>> cycpattern_check(a: \"whassup\", b: \"psus\")\n\
    /// false\n/// >>> cycpattern_check(a: \"abab\", b: \"baa\")\n/// true\n/// >>>\
    \ cycpattern_check(a: \"efef\", b: \"eeff\")\n/// false\n/// >>> cycpattern_check(a:\
    \ \"himenss\", b: \"simen\")\n/// true\nfunc cycpattern_check(a: String, b: String)\
    \ -> Bool {\n    var b = b\n    for _ in 0..<b.count {\n        if a.contains(b)\
    \ {\n            return true\n        }\n        b.append(b.removeFirst())\n \
    \   }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(cycpattern_check(a:\
    \ \"xyzw\", b: \"xyw\") == false)\nassert(cycpattern_check(a: \"yello\", b: \"\
    ell\") == true)\nassert(cycpattern_check(a: \"whattup\", b: \"ptut\") == false)\n\
    assert(cycpattern_check(a: \"efef\", b: \"fee\") == true)\nassert(cycpattern_check(a:\
    \ \"abab\", b: \"aabb\") == false)\nassert(cycpattern_check(a: \"winemtt\", b:\
    \ \"tinem\") == true)"
  status: Exception
  stderr: 'Swift/Substring.swift:316: Fatal error: String index is out of bounds

    Current stack trace:

    0    libswiftCore.so                    0x00002ba9518f5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba9515ec561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ba9515ec286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ba9515ec13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ba9515ebbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftCore.so                    0x00002ba951746e40 Substring.index(_:offsetBy:)
    + 880

    6    libswiftCore.so                    0x00002ba95174b85c <unavailable> + 2873436

    7    libswiftCore.so                    0x00002ba951618920 Collection.formIndex(_:offsetBy:)
    + 116

    8    libswift_StringProcessing.so       0x00002ba9512d3b82 <unavailable> + 285570

    9    libswift_StringProcessing.so       0x00002ba9512d2b2f <unavailable> + 281391

    10   libswift_StringProcessing.so       0x00002ba9512d3ced <unavailable> + 285933

    11   libswift_StringProcessing.so       0x00002ba9512b942d <unavailable> + 177197

    12   libswift_StringProcessing.so       0x00002ba9512b7840 BidirectionalCollection<>.firstRange<A>(of:)
    + 1517

    13   libswift_StringProcessing.so       0x00002ba9512b7e70 StringProtocol.contains(_:)
    + 64

    14   tmpxxc0g7sv                        0x000055fb90321d4d <unavailable> + 7501

    15   tmpxxc0g7sv                        0x000055fb903215c5 <unavailable> + 5573

    16   libc.so.6                          0x00002ba951ae1460 __libc_start_main +
    245

    17   tmpxxc0g7sv                        0x000055fb90321299 <unavailable> + 4761

    '
  stdout: ''
  timestamp: 1659824845
- exit_code: 1
  program: "\n/// You are given 2 words. You need to return true if the second word\
    \ or any of its rotations is a substring in the first word\n/// >>> cycpattern_check(a:\
    \ \"abcd\", b: \"abd\")\n/// false\n/// >>> cycpattern_check(a: \"hello\", b:\
    \ \"ell\")\n/// true\n/// >>> cycpattern_check(a: \"whassup\", b: \"psus\")\n\
    /// false\n/// >>> cycpattern_check(a: \"abab\", b: \"baa\")\n/// true\n/// >>>\
    \ cycpattern_check(a: \"efef\", b: \"eeff\")\n/// false\n/// >>> cycpattern_check(a:\
    \ \"himenss\", b: \"simen\")\n/// true\nfunc cycpattern_check(a: String, b: String)\
    \ -> Bool {\n    let a = a.lowercased()\n    let b = b.lowercased()\n    let b_len\
    \ = b.count\n    let a_len = a.count\n    if b_len > a_len {\n        return false\n\
    \    }\n    let b_first_char = b.first!\n    let b_last_char = b.last!\n    for\
    \ i in 0..<a_len {\n        if a[i] == b_first_char {\n            var j = i\n\
    \            var k = 0\n            while j < a_len && k < b_len && a[j] == b[k]\
    \ {\n                j += 1\n                k += 1\n            }\n         \
    \   if k == b_len {\n                return true\n            }\n            if\
    \ a[j] == b_last_char {\n                var j = i - 1\n                var k\
    \ = b_len - 1\n                while j >= 0 && k >= 0 && a[j] == b[k] {\n    \
    \                j -= 1\n                    k -= 1\n                }\n     \
    \           if k == -1 {\n                    return true\n                }\n\
    \            }\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(cycpattern_check(a: \"xyzw\", b: \"xyw\") == false)\nassert(cycpattern_check(a:\
    \ \"yello\", b: \"ell\") == true)\nassert(cycpattern_check(a: \"whattup\", b:\
    \ \"ptut\") == false)\nassert(cycpattern_check(a: \"efef\", b: \"fee\") == true)\n\
    assert(cycpattern_check(a: \"abab\", b: \"aabb\") == false)\nassert(cycpattern_check(a:\
    \ \"winemtt\", b: \"tinem\") == true)"
  status: SyntaxError
  stderr: "/tmp/tmpzfvpv5b7.swift:26:12: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an Int, use a String.Index instead.\n        if a[i] ==\
    \ b_first_char {\n           ^~~~\nSwift.String:3:12: note: 'subscript(_:)' has\
    \ been explicitly marked unavailable here\n    public subscript(i: Int) -> Character\
    \ { get }\n           ^\n/tmp/tmpzfvpv5b7.swift:29:45: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \            while j < a_len && k < b_len && a[j] == b[k] {\n                \
    \                            ^~~~\nSwift.String:3:12: note: 'subscript(_:)' has\
    \ been explicitly marked unavailable here\n    public subscript(i: Int) -> Character\
    \ { get }\n           ^\n/tmp/tmpzfvpv5b7.swift:29:53: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \            while j < a_len && k < b_len && a[j] == b[k] {\n                \
    \                                    ^~~~\nSwift.String:3:12: note: 'subscript(_:)'\
    \ has been explicitly marked unavailable here\n    public subscript(i: Int) ->\
    \ Character { get }\n           ^\n/tmp/tmpzfvpv5b7.swift:36:16: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \            if a[j] == b_last_char {\n               ^~~~\nSwift.String:3:12:\
    \ note: 'subscript(_:)' has been explicitly marked unavailable here\n    public\
    \ subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpzfvpv5b7.swift:39:43:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n                while j >= 0 && k >= 0 && a[j]\
    \ == b[k] {\n                                          ^~~~\nSwift.String:3:12:\
    \ note: 'subscript(_:)' has been explicitly marked unavailable here\n    public\
    \ subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpzfvpv5b7.swift:39:51:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n                while j >= 0 && k >= 0 && a[j]\
    \ == b[k] {\n            "
  stdout: ''
  timestamp: 1659824844
- exit_code: -4
  program: "\n/// You are given 2 words. You need to return true if the second word\
    \ or any of its rotations is a substring in the first word\n/// >>> cycpattern_check(a:\
    \ \"abcd\", b: \"abd\")\n/// false\n/// >>> cycpattern_check(a: \"hello\", b:\
    \ \"ell\")\n/// true\n/// >>> cycpattern_check(a: \"whassup\", b: \"psus\")\n\
    /// false\n/// >>> cycpattern_check(a: \"abab\", b: \"baa\")\n/// true\n/// >>>\
    \ cycpattern_check(a: \"efef\", b: \"eeff\")\n/// false\n/// >>> cycpattern_check(a:\
    \ \"himenss\", b: \"simen\")\n/// true\nfunc cycpattern_check(a: String, b: String)\
    \ -> Bool {\n    var a = a\n    var b = b\n    for _ in 0..<a.count {\n      \
    \  if a.contains(b) {\n            return true\n        }\n        a.append(a.removeFirst())\n\
    \    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(cycpattern_check(a:\
    \ \"xyzw\", b: \"xyw\") == false)\nassert(cycpattern_check(a: \"yello\", b: \"\
    ell\") == true)\nassert(cycpattern_check(a: \"whattup\", b: \"ptut\") == false)\n\
    assert(cycpattern_check(a: \"efef\", b: \"fee\") == true)\nassert(cycpattern_check(a:\
    \ \"abab\", b: \"aabb\") == false)\nassert(cycpattern_check(a: \"winemtt\", b:\
    \ \"tinem\") == true)"
  status: Exception
  stderr: 'Swift/Substring.swift:316: Fatal error: String index is out of bounds

    Current stack trace:

    0    libswiftCore.so                    0x00002b3dee23fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3dedf36561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b3dedf36286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b3dedf3613c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b3dedf35bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftCore.so                    0x00002b3dee090e40 Substring.index(_:offsetBy:)
    + 880

    6    libswiftCore.so                    0x00002b3dee09585c <unavailable> + 2873436

    7    libswiftCore.so                    0x00002b3dedf62920 Collection.formIndex(_:offsetBy:)
    + 116

    8    libswift_StringProcessing.so       0x00002b3dedc1db82 <unavailable> + 285570

    9    libswift_StringProcessing.so       0x00002b3dedc1cb2f <unavailable> + 281391

    10   libswift_StringProcessing.so       0x00002b3dedc1dced <unavailable> + 285933

    11   libswift_StringProcessing.so       0x00002b3dedc0342d <unavailable> + 177197

    12   libswift_StringProcessing.so       0x00002b3dedc01840 BidirectionalCollection<>.firstRange<A>(of:)
    + 1517

    13   libswift_StringProcessing.so       0x00002b3dedc01e70 StringProtocol.contains(_:)
    + 64

    14   tmpwbdhphom                        0x0000562086657dae <unavailable> + 7598

    15   tmpwbdhphom                        0x00005620866575c5 <unavailable> + 5573

    16   libc.so.6                          0x00002b3dee42b460 __libc_start_main +
    245

    17   tmpwbdhphom                        0x0000562086657299 <unavailable> + 4761

    '
  stdout: ''
  timestamp: 1659824845
- exit_code: -4
  program: "\n/// You are given 2 words. You need to return true if the second word\
    \ or any of its rotations is a substring in the first word\n/// >>> cycpattern_check(a:\
    \ \"abcd\", b: \"abd\")\n/// false\n/// >>> cycpattern_check(a: \"hello\", b:\
    \ \"ell\")\n/// true\n/// >>> cycpattern_check(a: \"whassup\", b: \"psus\")\n\
    /// false\n/// >>> cycpattern_check(a: \"abab\", b: \"baa\")\n/// true\n/// >>>\
    \ cycpattern_check(a: \"efef\", b: \"eeff\")\n/// false\n/// >>> cycpattern_check(a:\
    \ \"himenss\", b: \"simen\")\n/// true\nfunc cycpattern_check(a: String, b: String)\
    \ -> Bool {\n    var b = b\n    if a.contains(b) {\n        return true\n    }\n\
    \    for _ in 0..<b.count {\n        b.append(b.removeFirst())\n        if a.contains(b)\
    \ {\n            return true\n        }\n    }\n    return false\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(cycpattern_check(a: \"xyzw\", b: \"xyw\") == false)\n\
    assert(cycpattern_check(a: \"yello\", b: \"ell\") == true)\nassert(cycpattern_check(a:\
    \ \"whattup\", b: \"ptut\") == false)\nassert(cycpattern_check(a: \"efef\", b:\
    \ \"fee\") == true)\nassert(cycpattern_check(a: \"abab\", b: \"aabb\") == false)\n\
    assert(cycpattern_check(a: \"winemtt\", b: \"tinem\") == true)"
  status: Exception
  stderr: 'Swift/Substring.swift:316: Fatal error: String index is out of bounds

    Current stack trace:

    0    libswiftCore.so                    0x00002b4b13b17c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4b1380e561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b4b1380e286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b4b1380e13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b4b1380dbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftCore.so                    0x00002b4b13968e40 Substring.index(_:offsetBy:)
    + 880

    6    libswiftCore.so                    0x00002b4b1396d85c <unavailable> + 2873436

    7    libswiftCore.so                    0x00002b4b1383a920 Collection.formIndex(_:offsetBy:)
    + 116

    8    libswift_StringProcessing.so       0x00002b4b134f5b82 <unavailable> + 285570

    9    libswift_StringProcessing.so       0x00002b4b134f4b2f <unavailable> + 281391

    10   libswift_StringProcessing.so       0x00002b4b134f5ced <unavailable> + 285933

    11   libswift_StringProcessing.so       0x00002b4b134db42d <unavailable> + 177197

    12   libswift_StringProcessing.so       0x00002b4b134d9840 BidirectionalCollection<>.firstRange<A>(of:)
    + 1517

    13   libswift_StringProcessing.so       0x00002b4b134d9e70 StringProtocol.contains(_:)
    + 64

    14   tmpa3zzl_f1                        0x0000558f4ea9bc6b <unavailable> + 7275

    15   tmpa3zzl_f1                        0x0000558f4ea9b5c5 <unavailable> + 5573

    16   libc.so.6                          0x00002b4b13d03460 __libc_start_main +
    245

    17   tmpa3zzl_f1                        0x0000558f4ea9b299 <unavailable> + 4761

    '
  stdout: ''
  timestamp: 1659824845
- exit_code: 0
  program: "\n/// You are given 2 words. You need to return true if the second word\
    \ or any of its rotations is a substring in the first word\n/// >>> cycpattern_check(a:\
    \ \"abcd\", b: \"abd\")\n/// false\n/// >>> cycpattern_check(a: \"hello\", b:\
    \ \"ell\")\n/// true\n/// >>> cycpattern_check(a: \"whassup\", b: \"psus\")\n\
    /// false\n/// >>> cycpattern_check(a: \"abab\", b: \"baa\")\n/// true\n/// >>>\
    \ cycpattern_check(a: \"efef\", b: \"eeff\")\n/// false\n/// >>> cycpattern_check(a:\
    \ \"himenss\", b: \"simen\")\n/// true\nfunc cycpattern_check(a: String, b: String)\
    \ -> Bool {\n    let a = a.lowercased()\n    let b = b.lowercased()\n    let a_len\
    \ = a.count\n    let b_len = b.count\n    if a_len < b_len {\n        return false\n\
    \    }\n    let a_arr = Array(a)\n    let b_arr = Array(b)\n    var i = 0\n  \
    \  while i < a_len {\n        var j = 0\n        while j < b_len {\n         \
    \   if a_arr[i] == b_arr[j] {\n                var k = 0\n                while\
    \ k < b_len {\n                    if i + k >= a_len {\n                     \
    \   return false\n                    }\n                    if a_arr[i + k] !=\
    \ b_arr[(j + k) % b_len] {\n                        break\n                  \
    \  }\n                    k += 1\n                }\n                if k == b_len\
    \ {\n                    return true\n                }\n            }\n     \
    \       j += 1\n        }\n        i += 1\n    }\n    return false\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(cycpattern_check(a: \"xyzw\", b: \"xyw\") == false)\n\
    assert(cycpattern_check(a: \"yello\", b: \"ell\") == true)\nassert(cycpattern_check(a:\
    \ \"whattup\", b: \"ptut\") == false)\nassert(cycpattern_check(a: \"efef\", b:\
    \ \"fee\") == true)\nassert(cycpattern_check(a: \"abab\", b: \"aabb\") == false)\n\
    assert(cycpattern_check(a: \"winemtt\", b: \"tinem\") == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824845
- exit_code: -4
  program: "\n/// You are given 2 words. You need to return true if the second word\
    \ or any of its rotations is a substring in the first word\n/// >>> cycpattern_check(a:\
    \ \"abcd\", b: \"abd\")\n/// false\n/// >>> cycpattern_check(a: \"hello\", b:\
    \ \"ell\")\n/// true\n/// >>> cycpattern_check(a: \"whassup\", b: \"psus\")\n\
    /// false\n/// >>> cycpattern_check(a: \"abab\", b: \"baa\")\n/// true\n/// >>>\
    \ cycpattern_check(a: \"efef\", b: \"eeff\")\n/// false\n/// >>> cycpattern_check(a:\
    \ \"himenss\", b: \"simen\")\n/// true\nfunc cycpattern_check(a: String, b: String)\
    \ -> Bool {\n    guard a.count >= b.count else { return false }\n    let b = Array(b)\n\
    \    for i in 0..<b.count {\n        let newB = b[i..<b.count] + b[0..<i]\n  \
    \      if a.contains(String(newB)) {\n            return true\n        }\n   \
    \ }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(cycpattern_check(a:\
    \ \"xyzw\", b: \"xyw\") == false)\nassert(cycpattern_check(a: \"yello\", b: \"\
    ell\") == true)\nassert(cycpattern_check(a: \"whattup\", b: \"ptut\") == false)\n\
    assert(cycpattern_check(a: \"efef\", b: \"fee\") == true)\nassert(cycpattern_check(a:\
    \ \"abab\", b: \"aabb\") == false)\nassert(cycpattern_check(a: \"winemtt\", b:\
    \ \"tinem\") == true)"
  status: Exception
  stderr: 'Swift/Substring.swift:316: Fatal error: String index is out of bounds

    Current stack trace:

    0    libswiftCore.so                    0x00002b0b921bec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0b91eb5561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b0b91eb5286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b0b91eb513c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b0b91eb4bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftCore.so                    0x00002b0b9200fe40 Substring.index(_:offsetBy:)
    + 880

    6    libswiftCore.so                    0x00002b0b9201485c <unavailable> + 2873436

    7    libswiftCore.so                    0x00002b0b91ee1920 Collection.formIndex(_:offsetBy:)
    + 116

    8    libswift_StringProcessing.so       0x00002b0b91b9cb82 <unavailable> + 285570

    9    libswift_StringProcessing.so       0x00002b0b91b9bb2f <unavailable> + 281391

    10   libswift_StringProcessing.so       0x00002b0b91b9cced <unavailable> + 285933

    11   libswift_StringProcessing.so       0x00002b0b91b8242d <unavailable> + 177197

    12   libswift_StringProcessing.so       0x00002b0b91b80840 BidirectionalCollection<>.firstRange<A>(of:)
    + 1517

    13   libswift_StringProcessing.so       0x00002b0b91b80e70 StringProtocol.contains(_:)
    + 64

    14   tmpcq_ycdst                        0x00005595c8e682e8 <unavailable> + 8936

    15   tmpcq_ycdst                        0x00005595c8e67865 <unavailable> + 6245

    16   libc.so.6                          0x00002b0b923aa460 __libc_start_main +
    245

    17   tmpcq_ycdst                        0x00005595c8e67539 <unavailable> + 5433

    '
  stdout: ''
  timestamp: 1659824845
- exit_code: -4
  program: "\n/// You are given 2 words. You need to return true if the second word\
    \ or any of its rotations is a substring in the first word\n/// >>> cycpattern_check(a:\
    \ \"abcd\", b: \"abd\")\n/// false\n/// >>> cycpattern_check(a: \"hello\", b:\
    \ \"ell\")\n/// true\n/// >>> cycpattern_check(a: \"whassup\", b: \"psus\")\n\
    /// false\n/// >>> cycpattern_check(a: \"abab\", b: \"baa\")\n/// true\n/// >>>\
    \ cycpattern_check(a: \"efef\", b: \"eeff\")\n/// false\n/// >>> cycpattern_check(a:\
    \ \"himenss\", b: \"simen\")\n/// true\nfunc cycpattern_check(a: String, b: String)\
    \ -> Bool {\n    let a = Array(a)\n    let b = Array(b)\n    let a_len = a.count\n\
    \    let b_len = b.count\n    if a_len < b_len {\n        return false\n    }\n\
    \    for i in 0..<a_len {\n        var j = 0\n        while j < b_len && a[(i\
    \ + j) % a_len] == b[j] {\n            j += 1\n        }\n        if j == b_len\
    \ {\n            return true\n        }\n    }\n    return false\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(cycpattern_check(a: \"xyzw\", b: \"xyw\") == false)\n\
    assert(cycpattern_check(a: \"yello\", b: \"ell\") == true)\nassert(cycpattern_check(a:\
    \ \"whattup\", b: \"ptut\") == false)\nassert(cycpattern_check(a: \"efef\", b:\
    \ \"fee\") == true)\nassert(cycpattern_check(a: \"abab\", b: \"aabb\") == false)\n\
    assert(cycpattern_check(a: \"winemtt\", b: \"tinem\") == true)"
  status: Exception
  stderr: 'tmpciv7jdt2/tmpciv7jdt2.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aaae91dbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aaae8ed2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aaae8ed2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aaae8ed17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpciv7jdt2                        0x0000561df3e31975 <unavailable> + 6517

    5    libc.so.6                          0x00002aaae93c7460 __libc_start_main +
    245

    6    tmpciv7jdt2                        0x0000561df3e312d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1659824844
- exit_code: -1
  program: "\n/// You are given 2 words. You need to return true if the second word\
    \ or any of its rotations is a substring in the first word\n/// >>> cycpattern_check(a:\
    \ \"abcd\", b: \"abd\")\n/// false\n/// >>> cycpattern_check(a: \"hello\", b:\
    \ \"ell\")\n/// true\n/// >>> cycpattern_check(a: \"whassup\", b: \"psus\")\n\
    /// false\n/// >>> cycpattern_check(a: \"abab\", b: \"baa\")\n/// true\n/// >>>\
    \ cycpattern_check(a: \"efef\", b: \"eeff\")\n/// false\n/// >>> cycpattern_check(a:\
    \ \"himenss\", b: \"simen\")\n/// true\nfunc cycpattern_check(a: String, b: String)\
    \ -> Bool {\n    if a.count < b.count {\n        return false\n    }\n    let\
    \ a = Array(a)\n    let b = Array(b)\n    var i = 0\n    while i < a.count {\n\
    \        let j = 0\n        while j < b.count {\n            if a[i] == b[j] {\n\
    \                let k = 0\n                while k < b.count {\n            \
    \        if a[(i + k) % a.count] != b[(j + k) % b.count] {\n                 \
    \       break\n                    }\n                    if k == b.count - 1\
    \ {\n                        return true\n                    }\n            \
    \    }\n            }\n        }\n        i += 1\n    }\n    return false\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(cycpattern_check(a: \"xyzw\", b: \"xyw\") == false)\n\
    assert(cycpattern_check(a: \"yello\", b: \"ell\") == true)\nassert(cycpattern_check(a:\
    \ \"whattup\", b: \"ptut\") == false)\nassert(cycpattern_check(a: \"efef\", b:\
    \ \"fee\") == true)\nassert(cycpattern_check(a: \"abab\", b: \"aabb\") == false)\n\
    assert(cycpattern_check(a: \"winemtt\", b: \"tinem\") == true)"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659824850
- exit_code: -4
  program: "\n/// You are given 2 words. You need to return true if the second word\
    \ or any of its rotations is a substring in the first word\n/// >>> cycpattern_check(a:\
    \ \"abcd\", b: \"abd\")\n/// false\n/// >>> cycpattern_check(a: \"hello\", b:\
    \ \"ell\")\n/// true\n/// >>> cycpattern_check(a: \"whassup\", b: \"psus\")\n\
    /// false\n/// >>> cycpattern_check(a: \"abab\", b: \"baa\")\n/// true\n/// >>>\
    \ cycpattern_check(a: \"efef\", b: \"eeff\")\n/// false\n/// >>> cycpattern_check(a:\
    \ \"himenss\", b: \"simen\")\n/// true\nfunc cycpattern_check(a: String, b: String)\
    \ -> Bool {\n    let a = Array(a)\n    let b = Array(b)\n    let n = a.count\n\
    \    let m = b.count\n    if m > n {\n        return false\n    }\n    var i =\
    \ 0\n    while i < n {\n        var j = 0\n        while j < m {\n           \
    \ if a[(i + j) % n] != b[j] {\n                break\n            }\n        \
    \    j += 1\n        }\n        if j == m {\n            return true\n       \
    \ }\n        i += 1\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(cycpattern_check(a: \"xyzw\", b: \"xyw\") == false)\nassert(cycpattern_check(a:\
    \ \"yello\", b: \"ell\") == true)\nassert(cycpattern_check(a: \"whattup\", b:\
    \ \"ptut\") == false)\nassert(cycpattern_check(a: \"efef\", b: \"fee\") == true)\n\
    assert(cycpattern_check(a: \"abab\", b: \"aabb\") == false)\nassert(cycpattern_check(a:\
    \ \"winemtt\", b: \"tinem\") == true)"
  status: Exception
  stderr: 'tmpaj7l8521/tmpaj7l8521.swift:56: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adbbd849c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adbbd540b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adbbd540988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adbbd53f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpaj7l8521                        0x000055743c06c835 <unavailable> + 6197

    5    libc.so.6                          0x00002adbbda35460 __libc_start_main +
    245

    6    tmpaj7l8521                        0x000055743c06c199 <unavailable> + 4505

    '
  stdout: ''
  timestamp: 1659824845
- exit_code: -4
  program: "\n/// You are given 2 words. You need to return true if the second word\
    \ or any of its rotations is a substring in the first word\n/// >>> cycpattern_check(a:\
    \ \"abcd\", b: \"abd\")\n/// false\n/// >>> cycpattern_check(a: \"hello\", b:\
    \ \"ell\")\n/// true\n/// >>> cycpattern_check(a: \"whassup\", b: \"psus\")\n\
    /// false\n/// >>> cycpattern_check(a: \"abab\", b: \"baa\")\n/// true\n/// >>>\
    \ cycpattern_check(a: \"efef\", b: \"eeff\")\n/// false\n/// >>> cycpattern_check(a:\
    \ \"himenss\", b: \"simen\")\n/// true\nfunc cycpattern_check(a: String, b: String)\
    \ -> Bool {\n    var a = a\n    var b = b\n    if a.count < b.count {\n      \
    \  return false\n    }\n    if a.count == b.count {\n        return a == b\n \
    \   }\n    for _ in 0..<a.count {\n        if a.contains(b) {\n            return\
    \ true\n        }\n        a.append(a.removeFirst())\n    }\n    return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(cycpattern_check(a: \"xyzw\", b: \"xyw\") == false)\n\
    assert(cycpattern_check(a: \"yello\", b: \"ell\") == true)\nassert(cycpattern_check(a:\
    \ \"whattup\", b: \"ptut\") == false)\nassert(cycpattern_check(a: \"efef\", b:\
    \ \"fee\") == true)\nassert(cycpattern_check(a: \"abab\", b: \"aabb\") == false)\n\
    assert(cycpattern_check(a: \"winemtt\", b: \"tinem\") == true)"
  status: Exception
  stderr: 'Swift/Substring.swift:316: Fatal error: String index is out of bounds

    Current stack trace:

    0    libswiftCore.so                    0x00002b658cf8ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b658cc81561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b658cc81286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b658cc8113c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b658cc80bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftCore.so                    0x00002b658cddbe40 Substring.index(_:offsetBy:)
    + 880

    6    libswiftCore.so                    0x00002b658cde085c <unavailable> + 2873436

    7    libswiftCore.so                    0x00002b658ccad920 Collection.formIndex(_:offsetBy:)
    + 116

    8    libswift_StringProcessing.so       0x00002b658c968b82 <unavailable> + 285570

    9    libswift_StringProcessing.so       0x00002b658c967b2f <unavailable> + 281391

    10   libswift_StringProcessing.so       0x00002b658c968ced <unavailable> + 285933

    11   libswift_StringProcessing.so       0x00002b658c94e42d <unavailable> + 177197

    12   libswift_StringProcessing.so       0x00002b658c94c840 BidirectionalCollection<>.firstRange<A>(of:)
    + 1517

    13   libswift_StringProcessing.so       0x00002b658c94ce70 StringProtocol.contains(_:)
    + 64

    14   tmpofjkngik                        0x000055d69e2f3ffd <unavailable> + 8189

    15   tmpofjkngik                        0x000055d69e2f3615 <unavailable> + 5653

    16   libc.so.6                          0x00002b658d176460 __libc_start_main +
    245

    17   tmpofjkngik                        0x000055d69e2f32e9 <unavailable> + 4841

    '
  stdout: ''
  timestamp: 1659824845
- exit_code: -4
  program: "\n/// You are given 2 words. You need to return true if the second word\
    \ or any of its rotations is a substring in the first word\n/// >>> cycpattern_check(a:\
    \ \"abcd\", b: \"abd\")\n/// false\n/// >>> cycpattern_check(a: \"hello\", b:\
    \ \"ell\")\n/// true\n/// >>> cycpattern_check(a: \"whassup\", b: \"psus\")\n\
    /// false\n/// >>> cycpattern_check(a: \"abab\", b: \"baa\")\n/// true\n/// >>>\
    \ cycpattern_check(a: \"efef\", b: \"eeff\")\n/// false\n/// >>> cycpattern_check(a:\
    \ \"himenss\", b: \"simen\")\n/// true\nfunc cycpattern_check(a: String, b: String)\
    \ -> Bool {\n    let a = Array(a)\n    let b = Array(b)\n    let b_len = b.count\n\
    \    var i = 0\n    while i < a.count {\n        if a[i] == b[0] {\n         \
    \   var j = 0\n            while j < b_len {\n                if a[(i + j) % a.count]\
    \ != b[j] {\n                    break\n                }\n                j +=\
    \ 1\n            }\n            if j == b_len {\n                return true\n\
    \            }\n        }\n        i += 1\n    }\n    return false\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(cycpattern_check(a: \"xyzw\", b: \"xyw\") == false)\n\
    assert(cycpattern_check(a: \"yello\", b: \"ell\") == true)\nassert(cycpattern_check(a:\
    \ \"whattup\", b: \"ptut\") == false)\nassert(cycpattern_check(a: \"efef\", b:\
    \ \"fee\") == true)\nassert(cycpattern_check(a: \"abab\", b: \"aabb\") == false)\n\
    assert(cycpattern_check(a: \"winemtt\", b: \"tinem\") == true)"
  status: Exception
  stderr: 'tmp2hqxpqs7/tmp2hqxpqs7.swift:54: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aecbd563c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aecbd25ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aecbd25a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aecbd2597b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2hqxpqs7                        0x000055e835c28835 <unavailable> + 6197

    5    libc.so.6                          0x00002aecbd74f460 __libc_start_main +
    245

    6    tmp2hqxpqs7                        0x000055e835c28199 <unavailable> + 4505

    '
  stdout: ''
  timestamp: 1659824845
- exit_code: -4
  program: "\n/// You are given 2 words. You need to return true if the second word\
    \ or any of its rotations is a substring in the first word\n/// >>> cycpattern_check(a:\
    \ \"abcd\", b: \"abd\")\n/// false\n/// >>> cycpattern_check(a: \"hello\", b:\
    \ \"ell\")\n/// true\n/// >>> cycpattern_check(a: \"whassup\", b: \"psus\")\n\
    /// false\n/// >>> cycpattern_check(a: \"abab\", b: \"baa\")\n/// true\n/// >>>\
    \ cycpattern_check(a: \"efef\", b: \"eeff\")\n/// false\n/// >>> cycpattern_check(a:\
    \ \"himenss\", b: \"simen\")\n/// true\nfunc cycpattern_check(a: String, b: String)\
    \ -> Bool {\n    var b = b\n    for _ in 0..<b.count {\n        if a.contains(b)\
    \ {\n            return true\n        }\n        b.append(b.removeFirst())\n \
    \   }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(cycpattern_check(a:\
    \ \"xyzw\", b: \"xyw\") == false)\nassert(cycpattern_check(a: \"yello\", b: \"\
    ell\") == true)\nassert(cycpattern_check(a: \"whattup\", b: \"ptut\") == false)\n\
    assert(cycpattern_check(a: \"efef\", b: \"fee\") == true)\nassert(cycpattern_check(a:\
    \ \"abab\", b: \"aabb\") == false)\nassert(cycpattern_check(a: \"winemtt\", b:\
    \ \"tinem\") == true)"
  status: Exception
  stderr: 'Swift/Substring.swift:316: Fatal error: String index is out of bounds

    Current stack trace:

    0    libswiftCore.so                    0x00002ba9518f5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba9515ec561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ba9515ec286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ba9515ec13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ba9515ebbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftCore.so                    0x00002ba951746e40 Substring.index(_:offsetBy:)
    + 880

    6    libswiftCore.so                    0x00002ba95174b85c <unavailable> + 2873436

    7    libswiftCore.so                    0x00002ba951618920 Collection.formIndex(_:offsetBy:)
    + 116

    8    libswift_StringProcessing.so       0x00002ba9512d3b82 <unavailable> + 285570

    9    libswift_StringProcessing.so       0x00002ba9512d2b2f <unavailable> + 281391

    10   libswift_StringProcessing.so       0x00002ba9512d3ced <unavailable> + 285933

    11   libswift_StringProcessing.so       0x00002ba9512b942d <unavailable> + 177197

    12   libswift_StringProcessing.so       0x00002ba9512b7840 BidirectionalCollection<>.firstRange<A>(of:)
    + 1517

    13   libswift_StringProcessing.so       0x00002ba9512b7e70 StringProtocol.contains(_:)
    + 64

    14   tmpxxc0g7sv                        0x000055fb90321d4d <unavailable> + 7501

    15   tmpxxc0g7sv                        0x000055fb903215c5 <unavailable> + 5573

    16   libc.so.6                          0x00002ba951ae1460 __libc_start_main +
    245

    17   tmpxxc0g7sv                        0x000055fb90321299 <unavailable> + 4761

    '
  stdout: ''
  timestamp: 1659824845
- exit_code: -4
  program: "\n/// You are given 2 words. You need to return true if the second word\
    \ or any of its rotations is a substring in the first word\n/// >>> cycpattern_check(a:\
    \ \"abcd\", b: \"abd\")\n/// false\n/// >>> cycpattern_check(a: \"hello\", b:\
    \ \"ell\")\n/// true\n/// >>> cycpattern_check(a: \"whassup\", b: \"psus\")\n\
    /// false\n/// >>> cycpattern_check(a: \"abab\", b: \"baa\")\n/// true\n/// >>>\
    \ cycpattern_check(a: \"efef\", b: \"eeff\")\n/// false\n/// >>> cycpattern_check(a:\
    \ \"himenss\", b: \"simen\")\n/// true\nfunc cycpattern_check(a: String, b: String)\
    \ -> Bool {\n    var b = b\n    for _ in 0..<b.count {\n        if a.contains(b)\
    \ {\n            return true\n        }\n        b.append(b.removeFirst())\n \
    \   }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(cycpattern_check(a:\
    \ \"xyzw\", b: \"xyw\") == false)\nassert(cycpattern_check(a: \"yello\", b: \"\
    ell\") == true)\nassert(cycpattern_check(a: \"whattup\", b: \"ptut\") == false)\n\
    assert(cycpattern_check(a: \"efef\", b: \"fee\") == true)\nassert(cycpattern_check(a:\
    \ \"abab\", b: \"aabb\") == false)\nassert(cycpattern_check(a: \"winemtt\", b:\
    \ \"tinem\") == true)"
  status: Exception
  stderr: 'Swift/Substring.swift:316: Fatal error: String index is out of bounds

    Current stack trace:

    0    libswiftCore.so                    0x00002ba9518f5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba9515ec561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ba9515ec286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ba9515ec13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ba9515ebbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftCore.so                    0x00002ba951746e40 Substring.index(_:offsetBy:)
    + 880

    6    libswiftCore.so                    0x00002ba95174b85c <unavailable> + 2873436

    7    libswiftCore.so                    0x00002ba951618920 Collection.formIndex(_:offsetBy:)
    + 116

    8    libswift_StringProcessing.so       0x00002ba9512d3b82 <unavailable> + 285570

    9    libswift_StringProcessing.so       0x00002ba9512d2b2f <unavailable> + 281391

    10   libswift_StringProcessing.so       0x00002ba9512d3ced <unavailable> + 285933

    11   libswift_StringProcessing.so       0x00002ba9512b942d <unavailable> + 177197

    12   libswift_StringProcessing.so       0x00002ba9512b7840 BidirectionalCollection<>.firstRange<A>(of:)
    + 1517

    13   libswift_StringProcessing.so       0x00002ba9512b7e70 StringProtocol.contains(_:)
    + 64

    14   tmpxxc0g7sv                        0x000055fb90321d4d <unavailable> + 7501

    15   tmpxxc0g7sv                        0x000055fb903215c5 <unavailable> + 5573

    16   libc.so.6                          0x00002ba951ae1460 __libc_start_main +
    245

    17   tmpxxc0g7sv                        0x000055fb90321299 <unavailable> + 4761

    '
  stdout: ''
  timestamp: 1659824845
- exit_code: -4
  program: "\n/// You are given 2 words. You need to return true if the second word\
    \ or any of its rotations is a substring in the first word\n/// >>> cycpattern_check(a:\
    \ \"abcd\", b: \"abd\")\n/// false\n/// >>> cycpattern_check(a: \"hello\", b:\
    \ \"ell\")\n/// true\n/// >>> cycpattern_check(a: \"whassup\", b: \"psus\")\n\
    /// false\n/// >>> cycpattern_check(a: \"abab\", b: \"baa\")\n/// true\n/// >>>\
    \ cycpattern_check(a: \"efef\", b: \"eeff\")\n/// false\n/// >>> cycpattern_check(a:\
    \ \"himenss\", b: \"simen\")\n/// true\nfunc cycpattern_check(a: String, b: String)\
    \ -> Bool {\n    if a.count < b.count {\n        return false\n    }\n    var\
    \ a_arr = Array(a)\n    var b_arr = Array(b)\n    var i = 0\n    while i < a_arr.count\
    \ {\n        if a_arr[i] == b_arr[0] {\n            var j = 1\n            while\
    \ j < b_arr.count {\n                if a_arr[(i + j) % a_arr.count] != b_arr[j]\
    \ {\n                    break\n                }\n                j += 1\n  \
    \          }\n            if j == b_arr.count {\n                return true\n\
    \            }\n        }\n        i += 1\n    }\n    return false\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(cycpattern_check(a: \"xyzw\", b: \"xyw\") == false)\n\
    assert(cycpattern_check(a: \"yello\", b: \"ell\") == true)\nassert(cycpattern_check(a:\
    \ \"whattup\", b: \"ptut\") == false)\nassert(cycpattern_check(a: \"efef\", b:\
    \ \"fee\") == true)\nassert(cycpattern_check(a: \"abab\", b: \"aabb\") == false)\n\
    assert(cycpattern_check(a: \"winemtt\", b: \"tinem\") == true)"
  status: Exception
  stderr: 'tmpee6xzl01/tmpee6xzl01.swift:56: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5e148ffc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5e145f6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5e145f6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5e145f57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpee6xzl01                        0x0000564a320fd8d5 <unavailable> + 6357

    5    libc.so.6                          0x00002b5e14aeb460 __libc_start_main +
    245

    6    tmpee6xzl01                        0x0000564a320fd239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659824845
- exit_code: -4
  program: "\n/// You are given 2 words. You need to return true if the second word\
    \ or any of its rotations is a substring in the first word\n/// >>> cycpattern_check(a:\
    \ \"abcd\", b: \"abd\")\n/// false\n/// >>> cycpattern_check(a: \"hello\", b:\
    \ \"ell\")\n/// true\n/// >>> cycpattern_check(a: \"whassup\", b: \"psus\")\n\
    /// false\n/// >>> cycpattern_check(a: \"abab\", b: \"baa\")\n/// true\n/// >>>\
    \ cycpattern_check(a: \"efef\", b: \"eeff\")\n/// false\n/// >>> cycpattern_check(a:\
    \ \"himenss\", b: \"simen\")\n/// true\nfunc cycpattern_check(a: String, b: String)\
    \ -> Bool {\n    if a.count < b.count {\n        return false\n    }\n    let\
    \ a = Array(a)\n    let b = Array(b)\n    var i = 0\n    while i < a.count {\n\
    \        if a[i] == b[0] {\n            var j = 1\n            while j < b.count\
    \ {\n                if a[(i + j) % a.count] != b[j] {\n                    break\n\
    \                }\n                j += 1\n            }\n            if j ==\
    \ b.count {\n                return true\n            }\n        }\n        i\
    \ += 1\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(cycpattern_check(a:\
    \ \"xyzw\", b: \"xyw\") == false)\nassert(cycpattern_check(a: \"yello\", b: \"\
    ell\") == true)\nassert(cycpattern_check(a: \"whattup\", b: \"ptut\") == false)\n\
    assert(cycpattern_check(a: \"efef\", b: \"fee\") == true)\nassert(cycpattern_check(a:\
    \ \"abab\", b: \"aabb\") == false)\nassert(cycpattern_check(a: \"winemtt\", b:\
    \ \"tinem\") == true)"
  status: Exception
  stderr: 'tmprbfcmg0l/tmprbfcmg0l.swift:56: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7001807c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b70014feb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b70014fe988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b70014fd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprbfcmg0l                        0x0000565073e8e885 <unavailable> + 6277

    5    libc.so.6                          0x00002b70019f3460 __libc_start_main +
    245

    6    tmprbfcmg0l                        0x0000565073e8e1e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659824845
- exit_code: -4
  program: "\n/// You are given 2 words. You need to return true if the second word\
    \ or any of its rotations is a substring in the first word\n/// >>> cycpattern_check(a:\
    \ \"abcd\", b: \"abd\")\n/// false\n/// >>> cycpattern_check(a: \"hello\", b:\
    \ \"ell\")\n/// true\n/// >>> cycpattern_check(a: \"whassup\", b: \"psus\")\n\
    /// false\n/// >>> cycpattern_check(a: \"abab\", b: \"baa\")\n/// true\n/// >>>\
    \ cycpattern_check(a: \"efef\", b: \"eeff\")\n/// false\n/// >>> cycpattern_check(a:\
    \ \"himenss\", b: \"simen\")\n/// true\nfunc cycpattern_check(a: String, b: String)\
    \ -> Bool {\n    if a.count != b.count {\n        return false\n    }\n    let\
    \ a = Array(a)\n    let b = Array(b)\n    for i in 0..<a.count {\n        if a[i]\
    \ == b[0] {\n            var j = i\n            var k = 0\n            while j\
    \ < a.count {\n                if a[j] != b[k] {\n                    break\n\
    \                }\n                j += 1\n                k += 1\n         \
    \   }\n            if j == a.count {\n                j = 0\n            }\n \
    \           while j < i {\n                if a[j] != b[k] {\n               \
    \     break\n                }\n                j += 1\n                k += 1\n\
    \            }\n            if j == i && k == b.count {\n                return\
    \ true\n            }\n        }\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(cycpattern_check(a: \"xyzw\", b: \"xyw\") == false)\n\
    assert(cycpattern_check(a: \"yello\", b: \"ell\") == true)\nassert(cycpattern_check(a:\
    \ \"whattup\", b: \"ptut\") == false)\nassert(cycpattern_check(a: \"efef\", b:\
    \ \"fee\") == true)\nassert(cycpattern_check(a: \"abab\", b: \"aabb\") == false)\n\
    assert(cycpattern_check(a: \"winemtt\", b: \"tinem\") == true)"
  status: Exception
  stderr: 'tmpf9pr0cru/tmpf9pr0cru.swift:64: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab955ba8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab95589fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab95589f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab95589e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpf9pr0cru                        0x00005632576767b1 <unavailable> + 6065

    5    libc.so.6                          0x00002ab955d94460 __libc_start_main +
    245

    6    tmpf9pr0cru                        0x0000563257676329 <unavailable> + 4905

    '
  stdout: ''
  timestamp: 1659824845
- exit_code: 1
  program: "\n/// You are given 2 words. You need to return true if the second word\
    \ or any of its rotations is a substring in the first word\n/// >>> cycpattern_check(a:\
    \ \"abcd\", b: \"abd\")\n/// false\n/// >>> cycpattern_check(a: \"hello\", b:\
    \ \"ell\")\n/// true\n/// >>> cycpattern_check(a: \"whassup\", b: \"psus\")\n\
    /// false\n/// >>> cycpattern_check(a: \"abab\", b: \"baa\")\n/// true\n/// >>>\
    \ cycpattern_check(a: \"efef\", b: \"eeff\")\n/// false\n/// >>> cycpattern_check(a:\
    \ \"himenss\", b: \"simen\")\n/// true\nfunc cycpattern_check(a: String, b: String)\
    \ -> Bool {\n    let a = Array(a)\n    let b = Array(b)\n    var b_rot = b\n \
    \   for _ in 0..<b.count {\n        if a.contains(where: { $0 == b_rot[0] }) {\n\
    \            var a_idx = a.firstIndex(of: b_rot[0])!\n            for b_idx in\
    \ 0..<b.count {\n                if a_idx >= a.count {\n                    a_idx\
    \ = 0\n                }\n                if a[a_idx] != b_rot[b_idx] {\n    \
    \                break\n                }\n                if b_idx == b.count\
    \ - 1 {\n                    return true\n                }\n                a_idx\
    \ += 1\n            }\n        }\n        b_rot.rotate(by: 1)\n    }\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(cycpattern_check(a: \"\
    xyzw\", b: \"xyw\") == false)\nassert(cycpattern_check(a: \"yello\", b: \"ell\"\
    ) == true)\nassert(cycpattern_check(a: \"whattup\", b: \"ptut\") == false)\nassert(cycpattern_check(a:\
    \ \"efef\", b: \"fee\") == true)\nassert(cycpattern_check(a: \"abab\", b: \"aabb\"\
    ) == false)\nassert(cycpattern_check(a: \"winemtt\", b: \"tinem\") == true)"
  status: SyntaxError
  stderr: "/tmp/tmpqh0lps06.swift:35:15: error: value of type '[String.Element]' (aka\
    \ 'Array<Character>') has no member 'rotate'\n        b_rot.rotate(by: 1)\n  \
    \      ~~~~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824844
- exit_code: 1
  program: "\n/// You are given 2 words. You need to return true if the second word\
    \ or any of its rotations is a substring in the first word\n/// >>> cycpattern_check(a:\
    \ \"abcd\", b: \"abd\")\n/// false\n/// >>> cycpattern_check(a: \"hello\", b:\
    \ \"ell\")\n/// true\n/// >>> cycpattern_check(a: \"whassup\", b: \"psus\")\n\
    /// false\n/// >>> cycpattern_check(a: \"abab\", b: \"baa\")\n/// true\n/// >>>\
    \ cycpattern_check(a: \"efef\", b: \"eeff\")\n/// false\n/// >>> cycpattern_check(a:\
    \ \"himenss\", b: \"simen\")\n/// true\nfunc cycpattern_check(a: String, b: String)\
    \ -> Bool {\n    if a.count != b.count {\n        return false\n    }\n    let\
    \ a = Array(a)\n    let b = Array(b)\n    var b_rot = b\n    for _ in 0..<b.count\
    \ {\n        if a.contains(where: { $0 == b_rot[0] }) {\n            let index\
    \ = a.firstIndex(of: b_rot[0])!\n            let a_sub = a[index..<a.count] +\
    \ a[0..<index]\n            if a_sub == b_rot {\n                return true\n\
    \            }\n        }\n        b_rot.append(b_rot.removeFirst())\n    }\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(cycpattern_check(a:\
    \ \"xyzw\", b: \"xyw\") == false)\nassert(cycpattern_check(a: \"yello\", b: \"\
    ell\") == true)\nassert(cycpattern_check(a: \"whattup\", b: \"ptut\") == false)\n\
    assert(cycpattern_check(a: \"efef\", b: \"fee\") == true)\nassert(cycpattern_check(a:\
    \ \"abab\", b: \"aabb\") == false)\nassert(cycpattern_check(a: \"winemtt\", b:\
    \ \"tinem\") == true)"
  status: SyntaxError
  stderr: "/tmp/tmp6fmg8rxd.swift:26:22: error: binary operator '==' cannot be applied\
    \ to operands of type 'ArraySlice<String.Element>' (aka 'ArraySlice<Character>')\
    \ and '[String.Element]' (aka 'Array<Character>')\n            if a_sub == b_rot\
    \ {\n               ~~~~~ ^  ~~~~~\n"
  stdout: ''
  timestamp: 1659824844
- exit_code: -4
  program: "\n/// You are given 2 words. You need to return true if the second word\
    \ or any of its rotations is a substring in the first word\n/// >>> cycpattern_check(a:\
    \ \"abcd\", b: \"abd\")\n/// false\n/// >>> cycpattern_check(a: \"hello\", b:\
    \ \"ell\")\n/// true\n/// >>> cycpattern_check(a: \"whassup\", b: \"psus\")\n\
    /// false\n/// >>> cycpattern_check(a: \"abab\", b: \"baa\")\n/// true\n/// >>>\
    \ cycpattern_check(a: \"efef\", b: \"eeff\")\n/// false\n/// >>> cycpattern_check(a:\
    \ \"himenss\", b: \"simen\")\n/// true\nfunc cycpattern_check(a: String, b: String)\
    \ -> Bool {\n    let a = Array(a)\n    let b = Array(b)\n    let n = a.count\n\
    \    let m = b.count\n    var i = 0\n    var j = 0\n    while i < n {\n      \
    \  if a[i] == b[j] {\n            j += 1\n        } else {\n            j = 0\n\
    \        }\n        if j == m {\n            return true\n        }\n        i\
    \ += 1\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(cycpattern_check(a:\
    \ \"xyzw\", b: \"xyw\") == false)\nassert(cycpattern_check(a: \"yello\", b: \"\
    ell\") == true)\nassert(cycpattern_check(a: \"whattup\", b: \"ptut\") == false)\n\
    assert(cycpattern_check(a: \"efef\", b: \"fee\") == true)\nassert(cycpattern_check(a:\
    \ \"abab\", b: \"aabb\") == false)\nassert(cycpattern_check(a: \"winemtt\", b:\
    \ \"tinem\") == true)"
  status: Exception
  stderr: 'tmp0b06jrfg/tmp0b06jrfg.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b32272c3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3226fbab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3226fba988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3226fb97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0b06jrfg                        0x00005604c84627a5 <unavailable> + 6053

    5    libc.so.6                          0x00002b32274af460 __libc_start_main +
    245

    6    tmp0b06jrfg                        0x00005604c8462109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1659824845
- exit_code: -4
  program: "\n/// You are given 2 words. You need to return true if the second word\
    \ or any of its rotations is a substring in the first word\n/// >>> cycpattern_check(a:\
    \ \"abcd\", b: \"abd\")\n/// false\n/// >>> cycpattern_check(a: \"hello\", b:\
    \ \"ell\")\n/// true\n/// >>> cycpattern_check(a: \"whassup\", b: \"psus\")\n\
    /// false\n/// >>> cycpattern_check(a: \"abab\", b: \"baa\")\n/// true\n/// >>>\
    \ cycpattern_check(a: \"efef\", b: \"eeff\")\n/// false\n/// >>> cycpattern_check(a:\
    \ \"himenss\", b: \"simen\")\n/// true\nfunc cycpattern_check(a: String, b: String)\
    \ -> Bool {\n    let a = Array(a)\n    let b = Array(b)\n    let a_len = a.count\n\
    \    let b_len = b.count\n    if a_len < b_len {\n        return false\n    }\n\
    \    for i in 0..<a_len {\n        var j = 0\n        while j < b_len && a[(i\
    \ + j) % a_len] == b[j] {\n            j += 1\n        }\n        if j == b_len\
    \ {\n            return true\n        }\n    }\n    return false\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(cycpattern_check(a: \"xyzw\", b: \"xyw\") == false)\n\
    assert(cycpattern_check(a: \"yello\", b: \"ell\") == true)\nassert(cycpattern_check(a:\
    \ \"whattup\", b: \"ptut\") == false)\nassert(cycpattern_check(a: \"efef\", b:\
    \ \"fee\") == true)\nassert(cycpattern_check(a: \"abab\", b: \"aabb\") == false)\n\
    assert(cycpattern_check(a: \"winemtt\", b: \"tinem\") == true)"
  status: Exception
  stderr: 'tmpciv7jdt2/tmpciv7jdt2.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aaae91dbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aaae8ed2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aaae8ed2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aaae8ed17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpciv7jdt2                        0x0000561df3e31975 <unavailable> + 6517

    5    libc.so.6                          0x00002aaae93c7460 __libc_start_main +
    245

    6    tmpciv7jdt2                        0x0000561df3e312d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1659824844
- exit_code: -4
  program: "\n/// You are given 2 words. You need to return true if the second word\
    \ or any of its rotations is a substring in the first word\n/// >>> cycpattern_check(a:\
    \ \"abcd\", b: \"abd\")\n/// false\n/// >>> cycpattern_check(a: \"hello\", b:\
    \ \"ell\")\n/// true\n/// >>> cycpattern_check(a: \"whassup\", b: \"psus\")\n\
    /// false\n/// >>> cycpattern_check(a: \"abab\", b: \"baa\")\n/// true\n/// >>>\
    \ cycpattern_check(a: \"efef\", b: \"eeff\")\n/// false\n/// >>> cycpattern_check(a:\
    \ \"himenss\", b: \"simen\")\n/// true\nfunc cycpattern_check(a: String, b: String)\
    \ -> Bool {\n    guard a.count >= b.count else { return false }\n    var b = b\n\
    \    for _ in 0..<a.count {\n        if a.contains(b) { return true }\n      \
    \  b.append(b.removeFirst())\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(cycpattern_check(a: \"xyzw\", b: \"xyw\") == false)\nassert(cycpattern_check(a:\
    \ \"yello\", b: \"ell\") == true)\nassert(cycpattern_check(a: \"whattup\", b:\
    \ \"ptut\") == false)\nassert(cycpattern_check(a: \"efef\", b: \"fee\") == true)\n\
    assert(cycpattern_check(a: \"abab\", b: \"aabb\") == false)\nassert(cycpattern_check(a:\
    \ \"winemtt\", b: \"tinem\") == true)"
  status: Exception
  stderr: 'Swift/Substring.swift:316: Fatal error: String index is out of bounds

    Current stack trace:

    0    libswiftCore.so                    0x00002b6330e6bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6330b62561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b6330b62286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b6330b6213c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b6330b61bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftCore.so                    0x00002b6330cbce40 Substring.index(_:offsetBy:)
    + 880

    6    libswiftCore.so                    0x00002b6330cc185c <unavailable> + 2873436

    7    libswiftCore.so                    0x00002b6330b8e920 Collection.formIndex(_:offsetBy:)
    + 116

    8    libswift_StringProcessing.so       0x00002b6330849b82 <unavailable> + 285570

    9    libswift_StringProcessing.so       0x00002b6330848b2f <unavailable> + 281391

    10   libswift_StringProcessing.so       0x00002b6330849ced <unavailable> + 285933

    11   libswift_StringProcessing.so       0x00002b633082f42d <unavailable> + 177197

    12   libswift_StringProcessing.so       0x00002b633082d840 BidirectionalCollection<>.firstRange<A>(of:)
    + 1517

    13   libswift_StringProcessing.so       0x00002b633082de70 StringProtocol.contains(_:)
    + 64

    14   tmpwofilwfj                        0x0000555cf9347d84 <unavailable> + 7556

    15   tmpwofilwfj                        0x0000555cf93475c5 <unavailable> + 5573

    16   libc.so.6                          0x00002b6331057460 __libc_start_main +
    245

    17   tmpwofilwfj                        0x0000555cf9347299 <unavailable> + 4761

    '
  stdout: ''
  timestamp: 1659824845
- exit_code: -4
  program: "\n/// You are given 2 words. You need to return true if the second word\
    \ or any of its rotations is a substring in the first word\n/// >>> cycpattern_check(a:\
    \ \"abcd\", b: \"abd\")\n/// false\n/// >>> cycpattern_check(a: \"hello\", b:\
    \ \"ell\")\n/// true\n/// >>> cycpattern_check(a: \"whassup\", b: \"psus\")\n\
    /// false\n/// >>> cycpattern_check(a: \"abab\", b: \"baa\")\n/// true\n/// >>>\
    \ cycpattern_check(a: \"efef\", b: \"eeff\")\n/// false\n/// >>> cycpattern_check(a:\
    \ \"himenss\", b: \"simen\")\n/// true\nfunc cycpattern_check(a: String, b: String)\
    \ -> Bool {\n    let a = Array(a)\n    let b = Array(b)\n    let b_len = b.count\n\
    \    let a_len = a.count\n    if a_len < b_len {\n        return false\n    }\n\
    \    var i = 0\n    while i < a_len {\n        var j = 0\n        while j < b_len\
    \ {\n            if a[(i + j) % a_len] != b[j] {\n                break\n    \
    \        }\n            j += 1\n        }\n        if j == b_len {\n         \
    \   return true\n        }\n        i += 1\n    }\n    return false\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(cycpattern_check(a: \"xyzw\", b: \"xyw\") == false)\n\
    assert(cycpattern_check(a: \"yello\", b: \"ell\") == true)\nassert(cycpattern_check(a:\
    \ \"whattup\", b: \"ptut\") == false)\nassert(cycpattern_check(a: \"efef\", b:\
    \ \"fee\") == true)\nassert(cycpattern_check(a: \"abab\", b: \"aabb\") == false)\n\
    assert(cycpattern_check(a: \"winemtt\", b: \"tinem\") == true)"
  status: Exception
  stderr: 'tmph7_ubse1/tmph7_ubse1.swift:56: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5c141f1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5c13ee8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5c13ee8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5c13ee77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmph7_ubse1                        0x0000560cc07f1835 <unavailable> + 6197

    5    libc.so.6                          0x00002b5c143dd460 __libc_start_main +
    245

    6    tmph7_ubse1                        0x0000560cc07f1199 <unavailable> + 4505

    '
  stdout: ''
  timestamp: 1659824845
- exit_code: -4
  program: "\n/// You are given 2 words. You need to return true if the second word\
    \ or any of its rotations is a substring in the first word\n/// >>> cycpattern_check(a:\
    \ \"abcd\", b: \"abd\")\n/// false\n/// >>> cycpattern_check(a: \"hello\", b:\
    \ \"ell\")\n/// true\n/// >>> cycpattern_check(a: \"whassup\", b: \"psus\")\n\
    /// false\n/// >>> cycpattern_check(a: \"abab\", b: \"baa\")\n/// true\n/// >>>\
    \ cycpattern_check(a: \"efef\", b: \"eeff\")\n/// false\n/// >>> cycpattern_check(a:\
    \ \"himenss\", b: \"simen\")\n/// true\nfunc cycpattern_check(a: String, b: String)\
    \ -> Bool {\n    var b = b\n    for _ in 0..<b.count {\n        if a.contains(b)\
    \ {\n            return true\n        }\n        b.append(b.removeFirst())\n \
    \   }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(cycpattern_check(a:\
    \ \"xyzw\", b: \"xyw\") == false)\nassert(cycpattern_check(a: \"yello\", b: \"\
    ell\") == true)\nassert(cycpattern_check(a: \"whattup\", b: \"ptut\") == false)\n\
    assert(cycpattern_check(a: \"efef\", b: \"fee\") == true)\nassert(cycpattern_check(a:\
    \ \"abab\", b: \"aabb\") == false)\nassert(cycpattern_check(a: \"winemtt\", b:\
    \ \"tinem\") == true)"
  status: Exception
  stderr: 'Swift/Substring.swift:316: Fatal error: String index is out of bounds

    Current stack trace:

    0    libswiftCore.so                    0x00002ba9518f5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba9515ec561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ba9515ec286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ba9515ec13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ba9515ebbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftCore.so                    0x00002ba951746e40 Substring.index(_:offsetBy:)
    + 880

    6    libswiftCore.so                    0x00002ba95174b85c <unavailable> + 2873436

    7    libswiftCore.so                    0x00002ba951618920 Collection.formIndex(_:offsetBy:)
    + 116

    8    libswift_StringProcessing.so       0x00002ba9512d3b82 <unavailable> + 285570

    9    libswift_StringProcessing.so       0x00002ba9512d2b2f <unavailable> + 281391

    10   libswift_StringProcessing.so       0x00002ba9512d3ced <unavailable> + 285933

    11   libswift_StringProcessing.so       0x00002ba9512b942d <unavailable> + 177197

    12   libswift_StringProcessing.so       0x00002ba9512b7840 BidirectionalCollection<>.firstRange<A>(of:)
    + 1517

    13   libswift_StringProcessing.so       0x00002ba9512b7e70 StringProtocol.contains(_:)
    + 64

    14   tmpxxc0g7sv                        0x000055fb90321d4d <unavailable> + 7501

    15   tmpxxc0g7sv                        0x000055fb903215c5 <unavailable> + 5573

    16   libc.so.6                          0x00002ba951ae1460 __libc_start_main +
    245

    17   tmpxxc0g7sv                        0x000055fb90321299 <unavailable> + 4761

    '
  stdout: ''
  timestamp: 1659824845
- exit_code: -4
  program: "\n/// You are given 2 words. You need to return true if the second word\
    \ or any of its rotations is a substring in the first word\n/// >>> cycpattern_check(a:\
    \ \"abcd\", b: \"abd\")\n/// false\n/// >>> cycpattern_check(a: \"hello\", b:\
    \ \"ell\")\n/// true\n/// >>> cycpattern_check(a: \"whassup\", b: \"psus\")\n\
    /// false\n/// >>> cycpattern_check(a: \"abab\", b: \"baa\")\n/// true\n/// >>>\
    \ cycpattern_check(a: \"efef\", b: \"eeff\")\n/// false\n/// >>> cycpattern_check(a:\
    \ \"himenss\", b: \"simen\")\n/// true\nfunc cycpattern_check(a: String, b: String)\
    \ -> Bool {\n    if a.count != b.count {\n        return false\n    }\n    let\
    \ a = Array(a)\n    let b = Array(b)\n    for i in 0..<a.count {\n        if a[i]\
    \ == b[0] {\n            var j = 1\n            while j < b.count && a[(i + j)\
    \ % a.count] == b[j] {\n                j += 1\n            }\n            if\
    \ j == b.count {\n                return true\n            }\n        }\n    }\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(cycpattern_check(a:\
    \ \"xyzw\", b: \"xyw\") == false)\nassert(cycpattern_check(a: \"yello\", b: \"\
    ell\") == true)\nassert(cycpattern_check(a: \"whattup\", b: \"ptut\") == false)\n\
    assert(cycpattern_check(a: \"efef\", b: \"fee\") == true)\nassert(cycpattern_check(a:\
    \ \"abab\", b: \"aabb\") == false)\nassert(cycpattern_check(a: \"winemtt\", b:\
    \ \"tinem\") == true)"
  status: Exception
  stderr: 'tmptzs2wczs/tmptzs2wczs.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b73036b4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b73033abb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b73033ab988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b73033aa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptzs2wczs                        0x000055bd588887b1 <unavailable> + 6065

    5    libc.so.6                          0x00002b73038a0460 __libc_start_main +
    245

    6    tmptzs2wczs                        0x000055bd58888329 <unavailable> + 4905

    '
  stdout: ''
  timestamp: 1659824845
- exit_code: -4
  program: "\n/// You are given 2 words. You need to return true if the second word\
    \ or any of its rotations is a substring in the first word\n/// >>> cycpattern_check(a:\
    \ \"abcd\", b: \"abd\")\n/// false\n/// >>> cycpattern_check(a: \"hello\", b:\
    \ \"ell\")\n/// true\n/// >>> cycpattern_check(a: \"whassup\", b: \"psus\")\n\
    /// false\n/// >>> cycpattern_check(a: \"abab\", b: \"baa\")\n/// true\n/// >>>\
    \ cycpattern_check(a: \"efef\", b: \"eeff\")\n/// false\n/// >>> cycpattern_check(a:\
    \ \"himenss\", b: \"simen\")\n/// true\nfunc cycpattern_check(a: String, b: String)\
    \ -> Bool {\n    var b = b\n    for _ in 0..<b.count {\n        if a.contains(b)\
    \ {\n            return true\n        }\n        b.append(b.removeFirst())\n \
    \   }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(cycpattern_check(a:\
    \ \"xyzw\", b: \"xyw\") == false)\nassert(cycpattern_check(a: \"yello\", b: \"\
    ell\") == true)\nassert(cycpattern_check(a: \"whattup\", b: \"ptut\") == false)\n\
    assert(cycpattern_check(a: \"efef\", b: \"fee\") == true)\nassert(cycpattern_check(a:\
    \ \"abab\", b: \"aabb\") == false)\nassert(cycpattern_check(a: \"winemtt\", b:\
    \ \"tinem\") == true)"
  status: Exception
  stderr: 'Swift/Substring.swift:316: Fatal error: String index is out of bounds

    Current stack trace:

    0    libswiftCore.so                    0x00002ba9518f5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba9515ec561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ba9515ec286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ba9515ec13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ba9515ebbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftCore.so                    0x00002ba951746e40 Substring.index(_:offsetBy:)
    + 880

    6    libswiftCore.so                    0x00002ba95174b85c <unavailable> + 2873436

    7    libswiftCore.so                    0x00002ba951618920 Collection.formIndex(_:offsetBy:)
    + 116

    8    libswift_StringProcessing.so       0x00002ba9512d3b82 <unavailable> + 285570

    9    libswift_StringProcessing.so       0x00002ba9512d2b2f <unavailable> + 281391

    10   libswift_StringProcessing.so       0x00002ba9512d3ced <unavailable> + 285933

    11   libswift_StringProcessing.so       0x00002ba9512b942d <unavailable> + 177197

    12   libswift_StringProcessing.so       0x00002ba9512b7840 BidirectionalCollection<>.firstRange<A>(of:)
    + 1517

    13   libswift_StringProcessing.so       0x00002ba9512b7e70 StringProtocol.contains(_:)
    + 64

    14   tmpxxc0g7sv                        0x000055fb90321d4d <unavailable> + 7501

    15   tmpxxc0g7sv                        0x000055fb903215c5 <unavailable> + 5573

    16   libc.so.6                          0x00002ba951ae1460 __libc_start_main +
    245

    17   tmpxxc0g7sv                        0x000055fb90321299 <unavailable> + 4761

    '
  stdout: ''
  timestamp: 1659824845
- exit_code: -4
  program: "\n/// You are given 2 words. You need to return true if the second word\
    \ or any of its rotations is a substring in the first word\n/// >>> cycpattern_check(a:\
    \ \"abcd\", b: \"abd\")\n/// false\n/// >>> cycpattern_check(a: \"hello\", b:\
    \ \"ell\")\n/// true\n/// >>> cycpattern_check(a: \"whassup\", b: \"psus\")\n\
    /// false\n/// >>> cycpattern_check(a: \"abab\", b: \"baa\")\n/// true\n/// >>>\
    \ cycpattern_check(a: \"efef\", b: \"eeff\")\n/// false\n/// >>> cycpattern_check(a:\
    \ \"himenss\", b: \"simen\")\n/// true\nfunc cycpattern_check(a: String, b: String)\
    \ -> Bool {\n    var a = a\n    var b = b\n    if a.count < b.count {\n      \
    \  return false\n    }\n    if a.count == b.count {\n        return a == b\n \
    \   }\n    for _ in 0..<a.count {\n        if a.contains(b) {\n            return\
    \ true\n        }\n        a.append(a.removeFirst())\n    }\n    return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(cycpattern_check(a: \"xyzw\", b: \"xyw\") == false)\n\
    assert(cycpattern_check(a: \"yello\", b: \"ell\") == true)\nassert(cycpattern_check(a:\
    \ \"whattup\", b: \"ptut\") == false)\nassert(cycpattern_check(a: \"efef\", b:\
    \ \"fee\") == true)\nassert(cycpattern_check(a: \"abab\", b: \"aabb\") == false)\n\
    assert(cycpattern_check(a: \"winemtt\", b: \"tinem\") == true)"
  status: Exception
  stderr: 'Swift/Substring.swift:316: Fatal error: String index is out of bounds

    Current stack trace:

    0    libswiftCore.so                    0x00002b658cf8ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b658cc81561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b658cc81286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b658cc8113c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b658cc80bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftCore.so                    0x00002b658cddbe40 Substring.index(_:offsetBy:)
    + 880

    6    libswiftCore.so                    0x00002b658cde085c <unavailable> + 2873436

    7    libswiftCore.so                    0x00002b658ccad920 Collection.formIndex(_:offsetBy:)
    + 116

    8    libswift_StringProcessing.so       0x00002b658c968b82 <unavailable> + 285570

    9    libswift_StringProcessing.so       0x00002b658c967b2f <unavailable> + 281391

    10   libswift_StringProcessing.so       0x00002b658c968ced <unavailable> + 285933

    11   libswift_StringProcessing.so       0x00002b658c94e42d <unavailable> + 177197

    12   libswift_StringProcessing.so       0x00002b658c94c840 BidirectionalCollection<>.firstRange<A>(of:)
    + 1517

    13   libswift_StringProcessing.so       0x00002b658c94ce70 StringProtocol.contains(_:)
    + 64

    14   tmpofjkngik                        0x000055d69e2f3ffd <unavailable> + 8189

    15   tmpofjkngik                        0x000055d69e2f3615 <unavailable> + 5653

    16   libc.so.6                          0x00002b658d176460 __libc_start_main +
    245

    17   tmpofjkngik                        0x000055d69e2f32e9 <unavailable> + 4841

    '
  stdout: ''
  timestamp: 1659824845
- exit_code: -4
  program: "\n/// You are given 2 words. You need to return true if the second word\
    \ or any of its rotations is a substring in the first word\n/// >>> cycpattern_check(a:\
    \ \"abcd\", b: \"abd\")\n/// false\n/// >>> cycpattern_check(a: \"hello\", b:\
    \ \"ell\")\n/// true\n/// >>> cycpattern_check(a: \"whassup\", b: \"psus\")\n\
    /// false\n/// >>> cycpattern_check(a: \"abab\", b: \"baa\")\n/// true\n/// >>>\
    \ cycpattern_check(a: \"efef\", b: \"eeff\")\n/// false\n/// >>> cycpattern_check(a:\
    \ \"himenss\", b: \"simen\")\n/// true\nfunc cycpattern_check(a: String, b: String)\
    \ -> Bool {\n    var b = b\n    for _ in 0..<b.count {\n        if a.contains(b)\
    \ {\n            return true\n        }\n        b.append(b.removeFirst())\n \
    \   }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(cycpattern_check(a:\
    \ \"xyzw\", b: \"xyw\") == false)\nassert(cycpattern_check(a: \"yello\", b: \"\
    ell\") == true)\nassert(cycpattern_check(a: \"whattup\", b: \"ptut\") == false)\n\
    assert(cycpattern_check(a: \"efef\", b: \"fee\") == true)\nassert(cycpattern_check(a:\
    \ \"abab\", b: \"aabb\") == false)\nassert(cycpattern_check(a: \"winemtt\", b:\
    \ \"tinem\") == true)"
  status: Exception
  stderr: 'Swift/Substring.swift:316: Fatal error: String index is out of bounds

    Current stack trace:

    0    libswiftCore.so                    0x00002ba9518f5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba9515ec561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ba9515ec286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ba9515ec13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ba9515ebbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftCore.so                    0x00002ba951746e40 Substring.index(_:offsetBy:)
    + 880

    6    libswiftCore.so                    0x00002ba95174b85c <unavailable> + 2873436

    7    libswiftCore.so                    0x00002ba951618920 Collection.formIndex(_:offsetBy:)
    + 116

    8    libswift_StringProcessing.so       0x00002ba9512d3b82 <unavailable> + 285570

    9    libswift_StringProcessing.so       0x00002ba9512d2b2f <unavailable> + 281391

    10   libswift_StringProcessing.so       0x00002ba9512d3ced <unavailable> + 285933

    11   libswift_StringProcessing.so       0x00002ba9512b942d <unavailable> + 177197

    12   libswift_StringProcessing.so       0x00002ba9512b7840 BidirectionalCollection<>.firstRange<A>(of:)
    + 1517

    13   libswift_StringProcessing.so       0x00002ba9512b7e70 StringProtocol.contains(_:)
    + 64

    14   tmpxxc0g7sv                        0x000055fb90321d4d <unavailable> + 7501

    15   tmpxxc0g7sv                        0x000055fb903215c5 <unavailable> + 5573

    16   libc.so.6                          0x00002ba951ae1460 __libc_start_main +
    245

    17   tmpxxc0g7sv                        0x000055fb90321299 <unavailable> + 4761

    '
  stdout: ''
  timestamp: 1659824845
- exit_code: -4
  program: "\n/// You are given 2 words. You need to return true if the second word\
    \ or any of its rotations is a substring in the first word\n/// >>> cycpattern_check(a:\
    \ \"abcd\", b: \"abd\")\n/// false\n/// >>> cycpattern_check(a: \"hello\", b:\
    \ \"ell\")\n/// true\n/// >>> cycpattern_check(a: \"whassup\", b: \"psus\")\n\
    /// false\n/// >>> cycpattern_check(a: \"abab\", b: \"baa\")\n/// true\n/// >>>\
    \ cycpattern_check(a: \"efef\", b: \"eeff\")\n/// false\n/// >>> cycpattern_check(a:\
    \ \"himenss\", b: \"simen\")\n/// true\nfunc cycpattern_check(a: String, b: String)\
    \ -> Bool {\n    var a = a\n    var b = b\n    if a.count < b.count {\n      \
    \  return false\n    }\n    for _ in 0..<a.count {\n        if a.contains(b) {\n\
    \            return true\n        }\n        a.append(a.removeFirst())\n    }\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(cycpattern_check(a:\
    \ \"xyzw\", b: \"xyw\") == false)\nassert(cycpattern_check(a: \"yello\", b: \"\
    ell\") == true)\nassert(cycpattern_check(a: \"whattup\", b: \"ptut\") == false)\n\
    assert(cycpattern_check(a: \"efef\", b: \"fee\") == true)\nassert(cycpattern_check(a:\
    \ \"abab\", b: \"aabb\") == false)\nassert(cycpattern_check(a: \"winemtt\", b:\
    \ \"tinem\") == true)"
  status: Exception
  stderr: 'Swift/Substring.swift:316: Fatal error: String index is out of bounds

    Current stack trace:

    0    libswiftCore.so                    0x00002ab3d3ee4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab3d3bdb561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ab3d3bdb286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ab3d3bdb13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ab3d3bdabb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftCore.so                    0x00002ab3d3d35e40 Substring.index(_:offsetBy:)
    + 880

    6    libswiftCore.so                    0x00002ab3d3d3a85c <unavailable> + 2873436

    7    libswiftCore.so                    0x00002ab3d3c07920 Collection.formIndex(_:offsetBy:)
    + 116

    8    libswift_StringProcessing.so       0x00002ab3d38c2b82 <unavailable> + 285570

    9    libswift_StringProcessing.so       0x00002ab3d38c1b2f <unavailable> + 281391

    10   libswift_StringProcessing.so       0x00002ab3d38c2ced <unavailable> + 285933

    11   libswift_StringProcessing.so       0x00002ab3d38a842d <unavailable> + 177197

    12   libswift_StringProcessing.so       0x00002ab3d38a6840 BidirectionalCollection<>.firstRange<A>(of:)
    + 1517

    13   libswift_StringProcessing.so       0x00002ab3d38a6e70 StringProtocol.contains(_:)
    + 64

    14   tmpst2ie6pm                        0x00005647168e3e5c <unavailable> + 7772

    15   tmpst2ie6pm                        0x00005647168e35c5 <unavailable> + 5573

    16   libc.so.6                          0x00002ab3d40d0460 __libc_start_main +
    245

    17   tmpst2ie6pm                        0x00005647168e3299 <unavailable> + 4761

    '
  stdout: ''
  timestamp: 1659824845
- exit_code: 1
  program: "\n/// You are given 2 words. You need to return true if the second word\
    \ or any of its rotations is a substring in the first word\n/// >>> cycpattern_check(a:\
    \ \"abcd\", b: \"abd\")\n/// false\n/// >>> cycpattern_check(a: \"hello\", b:\
    \ \"ell\")\n/// true\n/// >>> cycpattern_check(a: \"whassup\", b: \"psus\")\n\
    /// false\n/// >>> cycpattern_check(a: \"abab\", b: \"baa\")\n/// true\n/// >>>\
    \ cycpattern_check(a: \"efef\", b: \"eeff\")\n/// false\n/// >>> cycpattern_check(a:\
    \ \"himenss\", b: \"simen\")\n/// true\nfunc cycpattern_check(a: String, b: String)\
    \ -> Bool {\n    let a = a.characters.map { String($0) }\n    let b = b.characters.map\
    \ { String($0) }\n    let b_len = b.count\n    let a_len = a.count\n    var b_rot\
    \ = b\n    for _ in 0..<b_len {\n        if a.contains(where: { $0 == b_rot[0]\
    \ }) {\n            var i = a.index(of: b_rot[0])!\n            var j = 0\n  \
    \          while j < b_len {\n                if a[i] != b_rot[j] {\n        \
    \            break\n                }\n                i = (i + 1) % a_len\n \
    \               j += 1\n            }\n            if j == b_len {\n         \
    \       return true\n            }\n        }\n        b_rot.append(b_rot.removeFirst())\n\
    \    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(cycpattern_check(a:\
    \ \"xyzw\", b: \"xyw\") == false)\nassert(cycpattern_check(a: \"yello\", b: \"\
    ell\") == true)\nassert(cycpattern_check(a: \"whattup\", b: \"ptut\") == false)\n\
    assert(cycpattern_check(a: \"efef\", b: \"fee\") == true)\nassert(cycpattern_check(a:\
    \ \"abab\", b: \"aabb\") == false)\nassert(cycpattern_check(a: \"winemtt\", b:\
    \ \"tinem\") == true)"
  status: SyntaxError
  stderr: "/tmp/tmpu45irfyq.swift:16:15: error: 'characters' is unavailable: Please\
    \ use String directly\n    let a = a.characters.map { String($0) }\n         \
    \     ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpu45irfyq.swift:17:15:\
    \ error: 'characters' is unavailable: Please use String directly\n    let b =\
    \ b.characters.map { String($0) }\n              ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmpu45irfyq.swift:23:23: warning: 'index(of:)'\
    \ is deprecated: renamed to 'firstIndex(of:)'\n            var i = a.index(of:\
    \ b_rot[0])!\n                      ^\n/tmp/tmpu45irfyq.swift:23:23: note: use\
    \ 'firstIndex(of:)' instead\n            var i = a.index(of: b_rot[0])!\n    \
    \                  ^~~~~\n                      firstIndex\n"
  stdout: ''
  timestamp: 1659824844
- exit_code: -4
  program: "\n/// You are given 2 words. You need to return true if the second word\
    \ or any of its rotations is a substring in the first word\n/// >>> cycpattern_check(a:\
    \ \"abcd\", b: \"abd\")\n/// false\n/// >>> cycpattern_check(a: \"hello\", b:\
    \ \"ell\")\n/// true\n/// >>> cycpattern_check(a: \"whassup\", b: \"psus\")\n\
    /// false\n/// >>> cycpattern_check(a: \"abab\", b: \"baa\")\n/// true\n/// >>>\
    \ cycpattern_check(a: \"efef\", b: \"eeff\")\n/// false\n/// >>> cycpattern_check(a:\
    \ \"himenss\", b: \"simen\")\n/// true\nfunc cycpattern_check(a: String, b: String)\
    \ -> Bool {\n    var a = a\n    var b = b\n    var i = 0\n    while i < a.count\
    \ {\n        if a.contains(b) {\n            return true\n        }\n        a.append(a.removeFirst())\n\
    \        i += 1\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(cycpattern_check(a: \"xyzw\", b: \"xyw\") == false)\nassert(cycpattern_check(a:\
    \ \"yello\", b: \"ell\") == true)\nassert(cycpattern_check(a: \"whattup\", b:\
    \ \"ptut\") == false)\nassert(cycpattern_check(a: \"efef\", b: \"fee\") == true)\n\
    assert(cycpattern_check(a: \"abab\", b: \"aabb\") == false)\nassert(cycpattern_check(a:\
    \ \"winemtt\", b: \"tinem\") == true)"
  status: Exception
  stderr: 'Swift/Substring.swift:316: Fatal error: String index is out of bounds

    Current stack trace:

    0    libswiftCore.so                    0x00002b0485b3ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0485835561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b0485835286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b048583513c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b0485834bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftCore.so                    0x00002b048598fe40 Substring.index(_:offsetBy:)
    + 880

    6    libswiftCore.so                    0x00002b048599485c <unavailable> + 2873436

    7    libswiftCore.so                    0x00002b0485861920 Collection.formIndex(_:offsetBy:)
    + 116

    8    libswift_StringProcessing.so       0x00002b048551cb82 <unavailable> + 285570

    9    libswift_StringProcessing.so       0x00002b048551bb2f <unavailable> + 281391

    10   libswift_StringProcessing.so       0x00002b048551cced <unavailable> + 285933

    11   libswift_StringProcessing.so       0x00002b048550242d <unavailable> + 177197

    12   libswift_StringProcessing.so       0x00002b0485500840 BidirectionalCollection<>.firstRange<A>(of:)
    + 1517

    13   libswift_StringProcessing.so       0x00002b0485500e70 StringProtocol.contains(_:)
    + 64

    14   tmp35aasvy2                        0x000055c4951e0b6b <unavailable> + 7019

    15   tmp35aasvy2                        0x000055c4951e0435 <unavailable> + 5173

    16   libc.so.6                          0x00002b0485d2a460 __libc_start_main +
    245

    17   tmp35aasvy2                        0x000055c4951e0109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1659824845
- exit_code: -4
  program: "\n/// You are given 2 words. You need to return true if the second word\
    \ or any of its rotations is a substring in the first word\n/// >>> cycpattern_check(a:\
    \ \"abcd\", b: \"abd\")\n/// false\n/// >>> cycpattern_check(a: \"hello\", b:\
    \ \"ell\")\n/// true\n/// >>> cycpattern_check(a: \"whassup\", b: \"psus\")\n\
    /// false\n/// >>> cycpattern_check(a: \"abab\", b: \"baa\")\n/// true\n/// >>>\
    \ cycpattern_check(a: \"efef\", b: \"eeff\")\n/// false\n/// >>> cycpattern_check(a:\
    \ \"himenss\", b: \"simen\")\n/// true\nfunc cycpattern_check(a: String, b: String)\
    \ -> Bool {\n    if a.count < b.count {\n        return false\n    }\n    var\
    \ b = b\n    for _ in 0..<a.count {\n        if a.contains(b) {\n            return\
    \ true\n        }\n        b = String(b.dropFirst()) + String(b.first!)\n    }\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(cycpattern_check(a:\
    \ \"xyzw\", b: \"xyw\") == false)\nassert(cycpattern_check(a: \"yello\", b: \"\
    ell\") == true)\nassert(cycpattern_check(a: \"whattup\", b: \"ptut\") == false)\n\
    assert(cycpattern_check(a: \"efef\", b: \"fee\") == true)\nassert(cycpattern_check(a:\
    \ \"abab\", b: \"aabb\") == false)\nassert(cycpattern_check(a: \"winemtt\", b:\
    \ \"tinem\") == true)"
  status: Exception
  stderr: 'Swift/Substring.swift:316: Fatal error: String index is out of bounds

    Current stack trace:

    0    libswiftCore.so                    0x00002ae71fbd4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae71f8cb561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ae71f8cb286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ae71f8cb13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ae71f8cabb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftCore.so                    0x00002ae71fa25e40 Substring.index(_:offsetBy:)
    + 880

    6    libswiftCore.so                    0x00002ae71fa2a85c <unavailable> + 2873436

    7    libswiftCore.so                    0x00002ae71f8f7920 Collection.formIndex(_:offsetBy:)
    + 116

    8    libswift_StringProcessing.so       0x00002ae71f5b2b82 <unavailable> + 285570

    9    libswift_StringProcessing.so       0x00002ae71f5b1b2f <unavailable> + 281391

    10   libswift_StringProcessing.so       0x00002ae71f5b2ced <unavailable> + 285933

    11   libswift_StringProcessing.so       0x00002ae71f59842d <unavailable> + 177197

    12   libswift_StringProcessing.so       0x00002ae71f596840 BidirectionalCollection<>.firstRange<A>(of:)
    + 1517

    13   libswift_StringProcessing.so       0x00002ae71f596e70 StringProtocol.contains(_:)
    + 64

    14   tmpfou3milz                        0x000055f1f7e3fe85 <unavailable> + 7813

    15   tmpfou3milz                        0x000055f1f7e3f6c5 <unavailable> + 5829

    16   libc.so.6                          0x00002ae71fdc0460 __libc_start_main +
    245

    17   tmpfou3milz                        0x000055f1f7e3f399 <unavailable> + 5017

    '
  stdout: ''
  timestamp: 1659824845
- exit_code: -4
  program: "\n/// You are given 2 words. You need to return true if the second word\
    \ or any of its rotations is a substring in the first word\n/// >>> cycpattern_check(a:\
    \ \"abcd\", b: \"abd\")\n/// false\n/// >>> cycpattern_check(a: \"hello\", b:\
    \ \"ell\")\n/// true\n/// >>> cycpattern_check(a: \"whassup\", b: \"psus\")\n\
    /// false\n/// >>> cycpattern_check(a: \"abab\", b: \"baa\")\n/// true\n/// >>>\
    \ cycpattern_check(a: \"efef\", b: \"eeff\")\n/// false\n/// >>> cycpattern_check(a:\
    \ \"himenss\", b: \"simen\")\n/// true\nfunc cycpattern_check(a: String, b: String)\
    \ -> Bool {\n    let a = Array(a)\n    let b = Array(b)\n    if a.count < b.count\
    \ {\n        return false\n    }\n    for i in 0..<a.count {\n        var is_substring\
    \ = true\n        for j in 0..<b.count {\n            if a[(i + j) % a.count]\
    \ != b[j] {\n                is_substring = false\n                break\n   \
    \         }\n        }\n        if is_substring {\n            return true\n \
    \       }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(cycpattern_check(a: \"xyzw\", b: \"xyw\") == false)\nassert(cycpattern_check(a:\
    \ \"yello\", b: \"ell\") == true)\nassert(cycpattern_check(a: \"whattup\", b:\
    \ \"ptut\") == false)\nassert(cycpattern_check(a: \"efef\", b: \"fee\") == true)\n\
    assert(cycpattern_check(a: \"abab\", b: \"aabb\") == false)\nassert(cycpattern_check(a:\
    \ \"winemtt\", b: \"tinem\") == true)"
  status: Exception
  stderr: 'tmpdros114j/tmpdros114j.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6d098cdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6d095c4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6d095c4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6d095c37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdros114j                        0x00005590e8d5a935 <unavailable> + 6453

    5    libc.so.6                          0x00002b6d09ab9460 __libc_start_main +
    245

    6    tmpdros114j                        0x00005590e8d5a299 <unavailable> + 4761

    '
  stdout: ''
  timestamp: 1659824845
- exit_code: -4
  program: "\n/// You are given 2 words. You need to return true if the second word\
    \ or any of its rotations is a substring in the first word\n/// >>> cycpattern_check(a:\
    \ \"abcd\", b: \"abd\")\n/// false\n/// >>> cycpattern_check(a: \"hello\", b:\
    \ \"ell\")\n/// true\n/// >>> cycpattern_check(a: \"whassup\", b: \"psus\")\n\
    /// false\n/// >>> cycpattern_check(a: \"abab\", b: \"baa\")\n/// true\n/// >>>\
    \ cycpattern_check(a: \"efef\", b: \"eeff\")\n/// false\n/// >>> cycpattern_check(a:\
    \ \"himenss\", b: \"simen\")\n/// true\nfunc cycpattern_check(a: String, b: String)\
    \ -> Bool {\n    if a.count < b.count {\n        return false\n    }\n    var\
    \ b = b\n    for _ in 0..<a.count {\n        if a.contains(b) {\n            return\
    \ true\n        }\n        b = String(b.last!) + String(b.dropLast())\n    }\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(cycpattern_check(a:\
    \ \"xyzw\", b: \"xyw\") == false)\nassert(cycpattern_check(a: \"yello\", b: \"\
    ell\") == true)\nassert(cycpattern_check(a: \"whattup\", b: \"ptut\") == false)\n\
    assert(cycpattern_check(a: \"efef\", b: \"fee\") == true)\nassert(cycpattern_check(a:\
    \ \"abab\", b: \"aabb\") == false)\nassert(cycpattern_check(a: \"winemtt\", b:\
    \ \"tinem\") == true)"
  status: Exception
  stderr: 'Swift/Substring.swift:316: Fatal error: String index is out of bounds

    Current stack trace:

    0    libswiftCore.so                    0x00002b0feb331c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0feb028561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b0feb028286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b0feb02813c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b0feb027bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftCore.so                    0x00002b0feb182e40 Substring.index(_:offsetBy:)
    + 880

    6    libswiftCore.so                    0x00002b0feb18785c <unavailable> + 2873436

    7    libswiftCore.so                    0x00002b0feb054920 Collection.formIndex(_:offsetBy:)
    + 116

    8    libswift_StringProcessing.so       0x00002b0fead0fb82 <unavailable> + 285570

    9    libswift_StringProcessing.so       0x00002b0fead0eb2f <unavailable> + 281391

    10   libswift_StringProcessing.so       0x00002b0fead0fced <unavailable> + 285933

    11   libswift_StringProcessing.so       0x00002b0feacf542d <unavailable> + 177197

    12   libswift_StringProcessing.so       0x00002b0feacf3840 BidirectionalCollection<>.firstRange<A>(of:)
    + 1517

    13   libswift_StringProcessing.so       0x00002b0feacf3e70 StringProtocol.contains(_:)
    + 64

    14   tmp4_encevl                        0x0000562bffb7bec5 <unavailable> + 7877

    15   tmp4_encevl                        0x0000562bffb7b705 <unavailable> + 5893

    16   libc.so.6                          0x00002b0feb51d460 __libc_start_main +
    245

    17   tmp4_encevl                        0x0000562bffb7b3d9 <unavailable> + 5081

    '
  stdout: ''
  timestamp: 1659824845
- exit_code: -4
  program: "\n/// You are given 2 words. You need to return true if the second word\
    \ or any of its rotations is a substring in the first word\n/// >>> cycpattern_check(a:\
    \ \"abcd\", b: \"abd\")\n/// false\n/// >>> cycpattern_check(a: \"hello\", b:\
    \ \"ell\")\n/// true\n/// >>> cycpattern_check(a: \"whassup\", b: \"psus\")\n\
    /// false\n/// >>> cycpattern_check(a: \"abab\", b: \"baa\")\n/// true\n/// >>>\
    \ cycpattern_check(a: \"efef\", b: \"eeff\")\n/// false\n/// >>> cycpattern_check(a:\
    \ \"himenss\", b: \"simen\")\n/// true\nfunc cycpattern_check(a: String, b: String)\
    \ -> Bool {\n    var a = a\n    var b = b\n    if a.count < b.count {\n      \
    \  return false\n    }\n    if a.count == b.count {\n        return a == b\n \
    \   }\n    for _ in 0..<a.count {\n        if a.contains(b) {\n            return\
    \ true\n        }\n        a.append(a.removeFirst())\n    }\n    return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(cycpattern_check(a: \"xyzw\", b: \"xyw\") == false)\n\
    assert(cycpattern_check(a: \"yello\", b: \"ell\") == true)\nassert(cycpattern_check(a:\
    \ \"whattup\", b: \"ptut\") == false)\nassert(cycpattern_check(a: \"efef\", b:\
    \ \"fee\") == true)\nassert(cycpattern_check(a: \"abab\", b: \"aabb\") == false)\n\
    assert(cycpattern_check(a: \"winemtt\", b: \"tinem\") == true)"
  status: Exception
  stderr: 'Swift/Substring.swift:316: Fatal error: String index is out of bounds

    Current stack trace:

    0    libswiftCore.so                    0x00002b658cf8ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b658cc81561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b658cc81286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b658cc8113c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b658cc80bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftCore.so                    0x00002b658cddbe40 Substring.index(_:offsetBy:)
    + 880

    6    libswiftCore.so                    0x00002b658cde085c <unavailable> + 2873436

    7    libswiftCore.so                    0x00002b658ccad920 Collection.formIndex(_:offsetBy:)
    + 116

    8    libswift_StringProcessing.so       0x00002b658c968b82 <unavailable> + 285570

    9    libswift_StringProcessing.so       0x00002b658c967b2f <unavailable> + 281391

    10   libswift_StringProcessing.so       0x00002b658c968ced <unavailable> + 285933

    11   libswift_StringProcessing.so       0x00002b658c94e42d <unavailable> + 177197

    12   libswift_StringProcessing.so       0x00002b658c94c840 BidirectionalCollection<>.firstRange<A>(of:)
    + 1517

    13   libswift_StringProcessing.so       0x00002b658c94ce70 StringProtocol.contains(_:)
    + 64

    14   tmpofjkngik                        0x000055d69e2f3ffd <unavailable> + 8189

    15   tmpofjkngik                        0x000055d69e2f3615 <unavailable> + 5653

    16   libc.so.6                          0x00002b658d176460 __libc_start_main +
    245

    17   tmpofjkngik                        0x000055d69e2f32e9 <unavailable> + 4841

    '
  stdout: ''
  timestamp: 1659824845
- exit_code: -4
  program: "\n/// You are given 2 words. You need to return true if the second word\
    \ or any of its rotations is a substring in the first word\n/// >>> cycpattern_check(a:\
    \ \"abcd\", b: \"abd\")\n/// false\n/// >>> cycpattern_check(a: \"hello\", b:\
    \ \"ell\")\n/// true\n/// >>> cycpattern_check(a: \"whassup\", b: \"psus\")\n\
    /// false\n/// >>> cycpattern_check(a: \"abab\", b: \"baa\")\n/// true\n/// >>>\
    \ cycpattern_check(a: \"efef\", b: \"eeff\")\n/// false\n/// >>> cycpattern_check(a:\
    \ \"himenss\", b: \"simen\")\n/// true\nfunc cycpattern_check(a: String, b: String)\
    \ -> Bool {\n    let a = Array(a)\n    let b = Array(b)\n    let n = a.count\n\
    \    let m = b.count\n    var i = 0\n    var j = 0\n    while i < n {\n      \
    \  if a[i] == b[j] {\n            i += 1\n            j += 1\n            if j\
    \ == m {\n                return true\n            }\n        } else {\n     \
    \       i = i - j + 1\n            j = 0\n        }\n    }\n    return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(cycpattern_check(a: \"xyzw\", b: \"xyw\") == false)\n\
    assert(cycpattern_check(a: \"yello\", b: \"ell\") == true)\nassert(cycpattern_check(a:\
    \ \"whattup\", b: \"ptut\") == false)\nassert(cycpattern_check(a: \"efef\", b:\
    \ \"fee\") == true)\nassert(cycpattern_check(a: \"abab\", b: \"aabb\") == false)\n\
    assert(cycpattern_check(a: \"winemtt\", b: \"tinem\") == true)"
  status: Exception
  stderr: 'tmpqss69acj/tmpqss69acj.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba188107c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba187dfeb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba187dfe988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba187dfd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqss69acj                        0x00005570446fa7a5 <unavailable> + 6053

    5    libc.so.6                          0x00002ba1882f3460 __libc_start_main +
    245

    6    tmpqss69acj                        0x00005570446fa109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1659824845
- exit_code: -4
  program: "\n/// You are given 2 words. You need to return true if the second word\
    \ or any of its rotations is a substring in the first word\n/// >>> cycpattern_check(a:\
    \ \"abcd\", b: \"abd\")\n/// false\n/// >>> cycpattern_check(a: \"hello\", b:\
    \ \"ell\")\n/// true\n/// >>> cycpattern_check(a: \"whassup\", b: \"psus\")\n\
    /// false\n/// >>> cycpattern_check(a: \"abab\", b: \"baa\")\n/// true\n/// >>>\
    \ cycpattern_check(a: \"efef\", b: \"eeff\")\n/// false\n/// >>> cycpattern_check(a:\
    \ \"himenss\", b: \"simen\")\n/// true\nfunc cycpattern_check(a: String, b: String)\
    \ -> Bool {\n    var a = a\n    var b = b\n    if a.count < b.count {\n      \
    \  return false\n    }\n    if a.count == b.count {\n        return a == b\n \
    \   }\n    var i = 0\n    while i < a.count {\n        if a.contains(b) {\n  \
    \          return true\n        }\n        a.append(a.removeFirst())\n       \
    \ i += 1\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(cycpattern_check(a:\
    \ \"xyzw\", b: \"xyw\") == false)\nassert(cycpattern_check(a: \"yello\", b: \"\
    ell\") == true)\nassert(cycpattern_check(a: \"whattup\", b: \"ptut\") == false)\n\
    assert(cycpattern_check(a: \"efef\", b: \"fee\") == true)\nassert(cycpattern_check(a:\
    \ \"abab\", b: \"aabb\") == false)\nassert(cycpattern_check(a: \"winemtt\", b:\
    \ \"tinem\") == true)"
  status: Exception
  stderr: 'Swift/Substring.swift:316: Fatal error: String index is out of bounds

    Current stack trace:

    0    libswiftCore.so                    0x00002baa0f7e8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002baa0f4df561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002baa0f4df286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002baa0f4df13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002baa0f4debb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftCore.so                    0x00002baa0f639e40 Substring.index(_:offsetBy:)
    + 880

    6    libswiftCore.so                    0x00002baa0f63e85c <unavailable> + 2873436

    7    libswiftCore.so                    0x00002baa0f50b920 Collection.formIndex(_:offsetBy:)
    + 116

    8    libswift_StringProcessing.so       0x00002baa0f1c6b82 <unavailable> + 285570

    9    libswift_StringProcessing.so       0x00002baa0f1c5b2f <unavailable> + 281391

    10   libswift_StringProcessing.so       0x00002baa0f1c6ced <unavailable> + 285933

    11   libswift_StringProcessing.so       0x00002baa0f1ac42d <unavailable> + 177197

    12   libswift_StringProcessing.so       0x00002baa0f1aa840 BidirectionalCollection<>.firstRange<A>(of:)
    + 1517

    13   libswift_StringProcessing.so       0x00002baa0f1aae70 StringProtocol.contains(_:)
    + 64

    14   tmpe7qgxjys                        0x0000555923146dc7 <unavailable> + 7623

    15   tmpe7qgxjys                        0x0000555923146495 <unavailable> + 5269

    16   libc.so.6                          0x00002baa0f9d4460 __libc_start_main +
    245

    17   tmpe7qgxjys                        0x0000555923146169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659824845
- exit_code: -4
  program: "\n/// You are given 2 words. You need to return true if the second word\
    \ or any of its rotations is a substring in the first word\n/// >>> cycpattern_check(a:\
    \ \"abcd\", b: \"abd\")\n/// false\n/// >>> cycpattern_check(a: \"hello\", b:\
    \ \"ell\")\n/// true\n/// >>> cycpattern_check(a: \"whassup\", b: \"psus\")\n\
    /// false\n/// >>> cycpattern_check(a: \"abab\", b: \"baa\")\n/// true\n/// >>>\
    \ cycpattern_check(a: \"efef\", b: \"eeff\")\n/// false\n/// >>> cycpattern_check(a:\
    \ \"himenss\", b: \"simen\")\n/// true\nfunc cycpattern_check(a: String, b: String)\
    \ -> Bool {\n    let a = Array(a)\n    let b = Array(b)\n    let a_len = a.count\n\
    \    let b_len = b.count\n    if a_len < b_len {\n        return false\n    }\n\
    \    var i = 0\n    while i < a_len {\n        var j = 0\n        while j < b_len\
    \ {\n            if a[(i + j) % a_len] != b[j] {\n                break\n    \
    \        }\n            j += 1\n        }\n        if j == b_len {\n         \
    \   return true\n        }\n        i += 1\n    }\n    return false\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(cycpattern_check(a: \"xyzw\", b: \"xyw\") == false)\n\
    assert(cycpattern_check(a: \"yello\", b: \"ell\") == true)\nassert(cycpattern_check(a:\
    \ \"whattup\", b: \"ptut\") == false)\nassert(cycpattern_check(a: \"efef\", b:\
    \ \"fee\") == true)\nassert(cycpattern_check(a: \"abab\", b: \"aabb\") == false)\n\
    assert(cycpattern_check(a: \"winemtt\", b: \"tinem\") == true)"
  status: Exception
  stderr: 'tmp1jtp0_ke/tmp1jtp0_ke.swift:56: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b824eaf4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b824e7ebb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b824e7eb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b824e7ea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1jtp0_ke                        0x0000557e52193835 <unavailable> + 6197

    5    libc.so.6                          0x00002b824ece0460 __libc_start_main +
    245

    6    tmp1jtp0_ke                        0x0000557e52193199 <unavailable> + 4505

    '
  stdout: ''
  timestamp: 1659824845
- exit_code: -4
  program: "\n/// You are given 2 words. You need to return true if the second word\
    \ or any of its rotations is a substring in the first word\n/// >>> cycpattern_check(a:\
    \ \"abcd\", b: \"abd\")\n/// false\n/// >>> cycpattern_check(a: \"hello\", b:\
    \ \"ell\")\n/// true\n/// >>> cycpattern_check(a: \"whassup\", b: \"psus\")\n\
    /// false\n/// >>> cycpattern_check(a: \"abab\", b: \"baa\")\n/// true\n/// >>>\
    \ cycpattern_check(a: \"efef\", b: \"eeff\")\n/// false\n/// >>> cycpattern_check(a:\
    \ \"himenss\", b: \"simen\")\n/// true\nfunc cycpattern_check(a: String, b: String)\
    \ -> Bool {\n    var a = a\n    var b = b\n    if a.count < b.count {\n      \
    \  return false\n    }\n    for _ in 0..<a.count {\n        if a.contains(b) {\n\
    \            return true\n        }\n        a.append(a.removeFirst())\n    }\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(cycpattern_check(a:\
    \ \"xyzw\", b: \"xyw\") == false)\nassert(cycpattern_check(a: \"yello\", b: \"\
    ell\") == true)\nassert(cycpattern_check(a: \"whattup\", b: \"ptut\") == false)\n\
    assert(cycpattern_check(a: \"efef\", b: \"fee\") == true)\nassert(cycpattern_check(a:\
    \ \"abab\", b: \"aabb\") == false)\nassert(cycpattern_check(a: \"winemtt\", b:\
    \ \"tinem\") == true)"
  status: Exception
  stderr: 'Swift/Substring.swift:316: Fatal error: String index is out of bounds

    Current stack trace:

    0    libswiftCore.so                    0x00002ab3d3ee4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab3d3bdb561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ab3d3bdb286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ab3d3bdb13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ab3d3bdabb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftCore.so                    0x00002ab3d3d35e40 Substring.index(_:offsetBy:)
    + 880

    6    libswiftCore.so                    0x00002ab3d3d3a85c <unavailable> + 2873436

    7    libswiftCore.so                    0x00002ab3d3c07920 Collection.formIndex(_:offsetBy:)
    + 116

    8    libswift_StringProcessing.so       0x00002ab3d38c2b82 <unavailable> + 285570

    9    libswift_StringProcessing.so       0x00002ab3d38c1b2f <unavailable> + 281391

    10   libswift_StringProcessing.so       0x00002ab3d38c2ced <unavailable> + 285933

    11   libswift_StringProcessing.so       0x00002ab3d38a842d <unavailable> + 177197

    12   libswift_StringProcessing.so       0x00002ab3d38a6840 BidirectionalCollection<>.firstRange<A>(of:)
    + 1517

    13   libswift_StringProcessing.so       0x00002ab3d38a6e70 StringProtocol.contains(_:)
    + 64

    14   tmpst2ie6pm                        0x00005647168e3e5c <unavailable> + 7772

    15   tmpst2ie6pm                        0x00005647168e35c5 <unavailable> + 5573

    16   libc.so.6                          0x00002ab3d40d0460 __libc_start_main +
    245

    17   tmpst2ie6pm                        0x00005647168e3299 <unavailable> + 4761

    '
  stdout: ''
  timestamp: 1659824845
- exit_code: -4
  program: "\n/// You are given 2 words. You need to return true if the second word\
    \ or any of its rotations is a substring in the first word\n/// >>> cycpattern_check(a:\
    \ \"abcd\", b: \"abd\")\n/// false\n/// >>> cycpattern_check(a: \"hello\", b:\
    \ \"ell\")\n/// true\n/// >>> cycpattern_check(a: \"whassup\", b: \"psus\")\n\
    /// false\n/// >>> cycpattern_check(a: \"abab\", b: \"baa\")\n/// true\n/// >>>\
    \ cycpattern_check(a: \"efef\", b: \"eeff\")\n/// false\n/// >>> cycpattern_check(a:\
    \ \"himenss\", b: \"simen\")\n/// true\nfunc cycpattern_check(a: String, b: String)\
    \ -> Bool {\n    let a = Array(a)\n    let b = Array(b)\n    let n = a.count\n\
    \    let m = b.count\n    if n < m {\n        return false\n    }\n    for i in\
    \ 0..<n {\n        var j = 0\n        while j < m && a[(i + j) % n] == b[j] {\n\
    \            j += 1\n        }\n        if j == m {\n            return true\n\
    \        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(cycpattern_check(a: \"xyzw\", b: \"xyw\") == false)\nassert(cycpattern_check(a:\
    \ \"yello\", b: \"ell\") == true)\nassert(cycpattern_check(a: \"whattup\", b:\
    \ \"ptut\") == false)\nassert(cycpattern_check(a: \"efef\", b: \"fee\") == true)\n\
    assert(cycpattern_check(a: \"abab\", b: \"aabb\") == false)\nassert(cycpattern_check(a:\
    \ \"winemtt\", b: \"tinem\") == true)"
  status: Exception
  stderr: 'tmpstm09cdd/tmpstm09cdd.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae6f6c52c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae6f6949b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae6f6949988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae6f69487b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpstm09cdd                        0x0000556bd312a975 <unavailable> + 6517

    5    libc.so.6                          0x00002ae6f6e3e460 __libc_start_main +
    245

    6    tmpstm09cdd                        0x0000556bd312a2d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1659824845
- exit_code: -4
  program: "\n/// You are given 2 words. You need to return true if the second word\
    \ or any of its rotations is a substring in the first word\n/// >>> cycpattern_check(a:\
    \ \"abcd\", b: \"abd\")\n/// false\n/// >>> cycpattern_check(a: \"hello\", b:\
    \ \"ell\")\n/// true\n/// >>> cycpattern_check(a: \"whassup\", b: \"psus\")\n\
    /// false\n/// >>> cycpattern_check(a: \"abab\", b: \"baa\")\n/// true\n/// >>>\
    \ cycpattern_check(a: \"efef\", b: \"eeff\")\n/// false\n/// >>> cycpattern_check(a:\
    \ \"himenss\", b: \"simen\")\n/// true\nfunc cycpattern_check(a: String, b: String)\
    \ -> Bool {\n    var a = a\n    var b = b\n    if a.count != b.count {\n     \
    \   return false\n    }\n    for _ in 0..<a.count {\n        if a.contains(b)\
    \ {\n            return true\n        }\n        a.insert(a.removeFirst(), at:\
    \ a.endIndex)\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(cycpattern_check(a: \"xyzw\", b: \"xyw\") == false)\nassert(cycpattern_check(a:\
    \ \"yello\", b: \"ell\") == true)\nassert(cycpattern_check(a: \"whattup\", b:\
    \ \"ptut\") == false)\nassert(cycpattern_check(a: \"efef\", b: \"fee\") == true)\n\
    assert(cycpattern_check(a: \"abab\", b: \"aabb\") == false)\nassert(cycpattern_check(a:\
    \ \"winemtt\", b: \"tinem\") == true)"
  status: Exception
  stderr: 'tmppj0o2rub/tmppj0o2rub.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b37f67b1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b37f64a8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b37f64a8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b37f64a77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppj0o2rub                        0x00005602c86ae781 <unavailable> + 6017

    5    libc.so.6                          0x00002b37f699d460 __libc_start_main +
    245

    6    tmppj0o2rub                        0x00005602c86ae2f9 <unavailable> + 4857

    '
  stdout: ''
  timestamp: 1659824845
- exit_code: -4
  program: "\n/// You are given 2 words. You need to return true if the second word\
    \ or any of its rotations is a substring in the first word\n/// >>> cycpattern_check(a:\
    \ \"abcd\", b: \"abd\")\n/// false\n/// >>> cycpattern_check(a: \"hello\", b:\
    \ \"ell\")\n/// true\n/// >>> cycpattern_check(a: \"whassup\", b: \"psus\")\n\
    /// false\n/// >>> cycpattern_check(a: \"abab\", b: \"baa\")\n/// true\n/// >>>\
    \ cycpattern_check(a: \"efef\", b: \"eeff\")\n/// false\n/// >>> cycpattern_check(a:\
    \ \"himenss\", b: \"simen\")\n/// true\nfunc cycpattern_check(a: String, b: String)\
    \ -> Bool {\n    if a.count != b.count {\n        return false\n    }\n    var\
    \ b = b\n    for _ in 0..<b.count {\n        if a.contains(b) {\n            return\
    \ true\n        }\n        b.append(b.removeFirst())\n    }\n    return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(cycpattern_check(a: \"xyzw\", b: \"xyw\") == false)\n\
    assert(cycpattern_check(a: \"yello\", b: \"ell\") == true)\nassert(cycpattern_check(a:\
    \ \"whattup\", b: \"ptut\") == false)\nassert(cycpattern_check(a: \"efef\", b:\
    \ \"fee\") == true)\nassert(cycpattern_check(a: \"abab\", b: \"aabb\") == false)\n\
    assert(cycpattern_check(a: \"winemtt\", b: \"tinem\") == true)"
  status: Exception
  stderr: 'tmpwwfg9u7b/tmpwwfg9u7b.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b79e31f3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b79e2eeab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b79e2eea988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b79e2ee97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwwfg9u7b                        0x0000556870fc0721 <unavailable> + 5921

    5    libc.so.6                          0x00002b79e33df460 __libc_start_main +
    245

    6    tmpwwfg9u7b                        0x0000556870fc0299 <unavailable> + 4761

    '
  stdout: ''
  timestamp: 1659824845
- exit_code: -4
  program: "\n/// You are given 2 words. You need to return true if the second word\
    \ or any of its rotations is a substring in the first word\n/// >>> cycpattern_check(a:\
    \ \"abcd\", b: \"abd\")\n/// false\n/// >>> cycpattern_check(a: \"hello\", b:\
    \ \"ell\")\n/// true\n/// >>> cycpattern_check(a: \"whassup\", b: \"psus\")\n\
    /// false\n/// >>> cycpattern_check(a: \"abab\", b: \"baa\")\n/// true\n/// >>>\
    \ cycpattern_check(a: \"efef\", b: \"eeff\")\n/// false\n/// >>> cycpattern_check(a:\
    \ \"himenss\", b: \"simen\")\n/// true\nfunc cycpattern_check(a: String, b: String)\
    \ -> Bool {\n    guard a.count >= b.count else { return false }\n    let b = Array(b)\n\
    \    for i in 0..<a.count {\n        let index = a.index(a.startIndex, offsetBy:\
    \ i)\n        let prefix = String(a[..<index])\n        let suffix = String(a[index...])\n\
    \        if (prefix + suffix).contains(b) {\n            return true\n       \
    \ }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(cycpattern_check(a:\
    \ \"xyzw\", b: \"xyw\") == false)\nassert(cycpattern_check(a: \"yello\", b: \"\
    ell\") == true)\nassert(cycpattern_check(a: \"whattup\", b: \"ptut\") == false)\n\
    assert(cycpattern_check(a: \"efef\", b: \"fee\") == true)\nassert(cycpattern_check(a:\
    \ \"abab\", b: \"aabb\") == false)\nassert(cycpattern_check(a: \"winemtt\", b:\
    \ \"tinem\") == true)"
  status: Exception
  stderr: 'tmpuojqoerm/tmpuojqoerm.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af356b5dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af356854b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af356854988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af3568537b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuojqoerm                        0x00005613ff0c3d15 <unavailable> + 7445

    5    libc.so.6                          0x00002af356d49460 __libc_start_main +
    245

    6    tmpuojqoerm                        0x00005613ff0c3679 <unavailable> + 5753

    '
  stdout: ''
  timestamp: 1659824845
- exit_code: -4
  program: "\n/// You are given 2 words. You need to return true if the second word\
    \ or any of its rotations is a substring in the first word\n/// >>> cycpattern_check(a:\
    \ \"abcd\", b: \"abd\")\n/// false\n/// >>> cycpattern_check(a: \"hello\", b:\
    \ \"ell\")\n/// true\n/// >>> cycpattern_check(a: \"whassup\", b: \"psus\")\n\
    /// false\n/// >>> cycpattern_check(a: \"abab\", b: \"baa\")\n/// true\n/// >>>\
    \ cycpattern_check(a: \"efef\", b: \"eeff\")\n/// false\n/// >>> cycpattern_check(a:\
    \ \"himenss\", b: \"simen\")\n/// true\nfunc cycpattern_check(a: String, b: String)\
    \ -> Bool {\n    guard a.count > b.count else { return false }\n    var b = b\n\
    \    for _ in 0..<b.count {\n        if a.contains(b) { return true }\n      \
    \  b.append(b.removeFirst())\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(cycpattern_check(a: \"xyzw\", b: \"xyw\") == false)\nassert(cycpattern_check(a:\
    \ \"yello\", b: \"ell\") == true)\nassert(cycpattern_check(a: \"whattup\", b:\
    \ \"ptut\") == false)\nassert(cycpattern_check(a: \"efef\", b: \"fee\") == true)\n\
    assert(cycpattern_check(a: \"abab\", b: \"aabb\") == false)\nassert(cycpattern_check(a:\
    \ \"winemtt\", b: \"tinem\") == true)"
  status: Exception
  stderr: 'Swift/Substring.swift:316: Fatal error: String index is out of bounds

    Current stack trace:

    0    libswiftCore.so                    0x00002ae97b52bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae97b222561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ae97b222286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ae97b22213c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ae97b221bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftCore.so                    0x00002ae97b37ce40 Substring.index(_:offsetBy:)
    + 880

    6    libswiftCore.so                    0x00002ae97b38185c <unavailable> + 2873436

    7    libswiftCore.so                    0x00002ae97b24e920 Collection.formIndex(_:offsetBy:)
    + 116

    8    libswift_StringProcessing.so       0x00002ae97af09b82 <unavailable> + 285570

    9    libswift_StringProcessing.so       0x00002ae97af08b2f <unavailable> + 281391

    10   libswift_StringProcessing.so       0x00002ae97af09ced <unavailable> + 285933

    11   libswift_StringProcessing.so       0x00002ae97aeef42d <unavailable> + 177197

    12   libswift_StringProcessing.so       0x00002ae97aeed840 BidirectionalCollection<>.firstRange<A>(of:)
    + 1517

    13   libswift_StringProcessing.so       0x00002ae97aeede70 StringProtocol.contains(_:)
    + 64

    14   tmp4cr5_zj4                        0x000055bd8ac8fd83 <unavailable> + 7555

    15   tmp4cr5_zj4                        0x000055bd8ac8f5c5 <unavailable> + 5573

    16   libc.so.6                          0x00002ae97b717460 __libc_start_main +
    245

    17   tmp4cr5_zj4                        0x000055bd8ac8f299 <unavailable> + 4761

    '
  stdout: ''
  timestamp: 1659824845
- exit_code: -4
  program: "\n/// You are given 2 words. You need to return true if the second word\
    \ or any of its rotations is a substring in the first word\n/// >>> cycpattern_check(a:\
    \ \"abcd\", b: \"abd\")\n/// false\n/// >>> cycpattern_check(a: \"hello\", b:\
    \ \"ell\")\n/// true\n/// >>> cycpattern_check(a: \"whassup\", b: \"psus\")\n\
    /// false\n/// >>> cycpattern_check(a: \"abab\", b: \"baa\")\n/// true\n/// >>>\
    \ cycpattern_check(a: \"efef\", b: \"eeff\")\n/// false\n/// >>> cycpattern_check(a:\
    \ \"himenss\", b: \"simen\")\n/// true\nfunc cycpattern_check(a: String, b: String)\
    \ -> Bool {\n    let a = Array(a)\n    let b = Array(b)\n    let b_len = b.count\n\
    \    var b_index = 0\n    for i in 0..<a.count {\n        if a[i] == b[b_index]\
    \ {\n            b_index += 1\n            if b_index == b_len {\n           \
    \     return true\n            }\n        } else {\n            b_index = 0\n\
    \        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(cycpattern_check(a: \"xyzw\", b: \"xyw\") == false)\nassert(cycpattern_check(a:\
    \ \"yello\", b: \"ell\") == true)\nassert(cycpattern_check(a: \"whattup\", b:\
    \ \"ptut\") == false)\nassert(cycpattern_check(a: \"efef\", b: \"fee\") == true)\n\
    assert(cycpattern_check(a: \"abab\", b: \"aabb\") == false)\nassert(cycpattern_check(a:\
    \ \"winemtt\", b: \"tinem\") == true)"
  status: Exception
  stderr: 'tmp7_m5fu2d/tmp7_m5fu2d.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afc5ef6ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afc5ec61b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afc5ec61988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afc5ec607b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7_m5fu2d                        0x000055c205b57935 <unavailable> + 6453

    5    libc.so.6                          0x00002afc5f156460 __libc_start_main +
    245

    6    tmp7_m5fu2d                        0x000055c205b57299 <unavailable> + 4761

    '
  stdout: ''
  timestamp: 1659824845
- exit_code: -4
  program: "\n/// You are given 2 words. You need to return true if the second word\
    \ or any of its rotations is a substring in the first word\n/// >>> cycpattern_check(a:\
    \ \"abcd\", b: \"abd\")\n/// false\n/// >>> cycpattern_check(a: \"hello\", b:\
    \ \"ell\")\n/// true\n/// >>> cycpattern_check(a: \"whassup\", b: \"psus\")\n\
    /// false\n/// >>> cycpattern_check(a: \"abab\", b: \"baa\")\n/// true\n/// >>>\
    \ cycpattern_check(a: \"efef\", b: \"eeff\")\n/// false\n/// >>> cycpattern_check(a:\
    \ \"himenss\", b: \"simen\")\n/// true\nfunc cycpattern_check(a: String, b: String)\
    \ -> Bool {\n    let a = Array(a)\n    let b = Array(b)\n    let b_len = b.count\n\
    \    let a_len = a.count\n    if b_len > a_len {\n        return false\n    }\n\
    \    var i = 0\n    while i < a_len {\n        var j = 0\n        while j < b_len\
    \ {\n            if a[i] == b[j] {\n                var k = 0\n              \
    \  while k < b_len {\n                    if a[(i + k) % a_len] != b[(j + k) %\
    \ b_len] {\n                        break\n                    }\n           \
    \         k += 1\n                }\n                if k == b_len {\n       \
    \             return true\n                }\n            }\n            j +=\
    \ 1\n        }\n        i += 1\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(cycpattern_check(a: \"xyzw\", b: \"xyw\") == false)\n\
    assert(cycpattern_check(a: \"yello\", b: \"ell\") == true)\nassert(cycpattern_check(a:\
    \ \"whattup\", b: \"ptut\") == false)\nassert(cycpattern_check(a: \"efef\", b:\
    \ \"fee\") == true)\nassert(cycpattern_check(a: \"abab\", b: \"aabb\") == false)\n\
    assert(cycpattern_check(a: \"winemtt\", b: \"tinem\") == true)"
  status: Exception
  stderr: 'tmp6iraggoi/tmp6iraggoi.swift:59: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aae29848c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aae2953fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aae2953f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aae2953e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6iraggoi                        0x00005560613ac545 <unavailable> + 5445

    5    libc.so.6                          0x00002aae29a34460 __libc_start_main +
    245

    6    tmp6iraggoi                        0x00005560613ac199 <unavailable> + 4505

    '
  stdout: ''
  timestamp: 1659824845
- exit_code: -4
  program: "\n/// You are given 2 words. You need to return true if the second word\
    \ or any of its rotations is a substring in the first word\n/// >>> cycpattern_check(a:\
    \ \"abcd\", b: \"abd\")\n/// false\n/// >>> cycpattern_check(a: \"hello\", b:\
    \ \"ell\")\n/// true\n/// >>> cycpattern_check(a: \"whassup\", b: \"psus\")\n\
    /// false\n/// >>> cycpattern_check(a: \"abab\", b: \"baa\")\n/// true\n/// >>>\
    \ cycpattern_check(a: \"efef\", b: \"eeff\")\n/// false\n/// >>> cycpattern_check(a:\
    \ \"himenss\", b: \"simen\")\n/// true\nfunc cycpattern_check(a: String, b: String)\
    \ -> Bool {\n    if a.count < b.count {\n        return false\n    }\n    let\
    \ a = Array(a)\n    let b = Array(b)\n    var i = 0\n    while i < a.count {\n\
    \        var j = 0\n        while j < b.count && a[(i + j) % a.count] == b[j]\
    \ {\n            j += 1\n        }\n        if j == b.count {\n            return\
    \ true\n        }\n        i += 1\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(cycpattern_check(a: \"xyzw\", b: \"xyw\") == false)\n\
    assert(cycpattern_check(a: \"yello\", b: \"ell\") == true)\nassert(cycpattern_check(a:\
    \ \"whattup\", b: \"ptut\") == false)\nassert(cycpattern_check(a: \"efef\", b:\
    \ \"fee\") == true)\nassert(cycpattern_check(a: \"abab\", b: \"aabb\") == false)\n\
    assert(cycpattern_check(a: \"winemtt\", b: \"tinem\") == true)"
  status: Exception
  stderr: 'tmp68ft3eqy/tmp68ft3eqy.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1752dcec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1752ac5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1752ac5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1752ac47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp68ft3eqy                        0x0000562f0e9888d5 <unavailable> + 6357

    5    libc.so.6                          0x00002b1752fba460 __libc_start_main +
    245

    6    tmp68ft3eqy                        0x0000562f0e988239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659824845
- exit_code: -4
  program: "\n/// You are given 2 words. You need to return true if the second word\
    \ or any of its rotations is a substring in the first word\n/// >>> cycpattern_check(a:\
    \ \"abcd\", b: \"abd\")\n/// false\n/// >>> cycpattern_check(a: \"hello\", b:\
    \ \"ell\")\n/// true\n/// >>> cycpattern_check(a: \"whassup\", b: \"psus\")\n\
    /// false\n/// >>> cycpattern_check(a: \"abab\", b: \"baa\")\n/// true\n/// >>>\
    \ cycpattern_check(a: \"efef\", b: \"eeff\")\n/// false\n/// >>> cycpattern_check(a:\
    \ \"himenss\", b: \"simen\")\n/// true\nfunc cycpattern_check(a: String, b: String)\
    \ -> Bool {\n    if a.count != b.count {\n        return false\n    }\n    var\
    \ b = b\n    for _ in 0..<b.count {\n        if a.contains(b) {\n            return\
    \ true\n        }\n        b.append(b.removeFirst())\n    }\n    return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(cycpattern_check(a: \"xyzw\", b: \"xyw\") == false)\n\
    assert(cycpattern_check(a: \"yello\", b: \"ell\") == true)\nassert(cycpattern_check(a:\
    \ \"whattup\", b: \"ptut\") == false)\nassert(cycpattern_check(a: \"efef\", b:\
    \ \"fee\") == true)\nassert(cycpattern_check(a: \"abab\", b: \"aabb\") == false)\n\
    assert(cycpattern_check(a: \"winemtt\", b: \"tinem\") == true)"
  status: Exception
  stderr: 'tmpwwfg9u7b/tmpwwfg9u7b.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b79e31f3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b79e2eeab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b79e2eea988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b79e2ee97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwwfg9u7b                        0x0000556870fc0721 <unavailable> + 5921

    5    libc.so.6                          0x00002b79e33df460 __libc_start_main +
    245

    6    tmpwwfg9u7b                        0x0000556870fc0299 <unavailable> + 4761

    '
  stdout: ''
  timestamp: 1659824845
- exit_code: -4
  program: "\n/// You are given 2 words. You need to return true if the second word\
    \ or any of its rotations is a substring in the first word\n/// >>> cycpattern_check(a:\
    \ \"abcd\", b: \"abd\")\n/// false\n/// >>> cycpattern_check(a: \"hello\", b:\
    \ \"ell\")\n/// true\n/// >>> cycpattern_check(a: \"whassup\", b: \"psus\")\n\
    /// false\n/// >>> cycpattern_check(a: \"abab\", b: \"baa\")\n/// true\n/// >>>\
    \ cycpattern_check(a: \"efef\", b: \"eeff\")\n/// false\n/// >>> cycpattern_check(a:\
    \ \"himenss\", b: \"simen\")\n/// true\nfunc cycpattern_check(a: String, b: String)\
    \ -> Bool {\n    var a = a\n    var b = b\n    if a.count < b.count {\n      \
    \  return false\n    }\n    for _ in 0..<a.count {\n        if a.contains(b) {\n\
    \            return true\n        }\n        a.append(a.removeFirst())\n    }\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(cycpattern_check(a:\
    \ \"xyzw\", b: \"xyw\") == false)\nassert(cycpattern_check(a: \"yello\", b: \"\
    ell\") == true)\nassert(cycpattern_check(a: \"whattup\", b: \"ptut\") == false)\n\
    assert(cycpattern_check(a: \"efef\", b: \"fee\") == true)\nassert(cycpattern_check(a:\
    \ \"abab\", b: \"aabb\") == false)\nassert(cycpattern_check(a: \"winemtt\", b:\
    \ \"tinem\") == true)"
  status: Exception
  stderr: 'Swift/Substring.swift:316: Fatal error: String index is out of bounds

    Current stack trace:

    0    libswiftCore.so                    0x00002ab3d3ee4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab3d3bdb561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ab3d3bdb286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ab3d3bdb13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ab3d3bdabb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftCore.so                    0x00002ab3d3d35e40 Substring.index(_:offsetBy:)
    + 880

    6    libswiftCore.so                    0x00002ab3d3d3a85c <unavailable> + 2873436

    7    libswiftCore.so                    0x00002ab3d3c07920 Collection.formIndex(_:offsetBy:)
    + 116

    8    libswift_StringProcessing.so       0x00002ab3d38c2b82 <unavailable> + 285570

    9    libswift_StringProcessing.so       0x00002ab3d38c1b2f <unavailable> + 281391

    10   libswift_StringProcessing.so       0x00002ab3d38c2ced <unavailable> + 285933

    11   libswift_StringProcessing.so       0x00002ab3d38a842d <unavailable> + 177197

    12   libswift_StringProcessing.so       0x00002ab3d38a6840 BidirectionalCollection<>.firstRange<A>(of:)
    + 1517

    13   libswift_StringProcessing.so       0x00002ab3d38a6e70 StringProtocol.contains(_:)
    + 64

    14   tmpst2ie6pm                        0x00005647168e3e5c <unavailable> + 7772

    15   tmpst2ie6pm                        0x00005647168e35c5 <unavailable> + 5573

    16   libc.so.6                          0x00002ab3d40d0460 __libc_start_main +
    245

    17   tmpst2ie6pm                        0x00005647168e3299 <unavailable> + 4761

    '
  stdout: ''
  timestamp: 1659824845
- exit_code: -4
  program: "\n/// You are given 2 words. You need to return true if the second word\
    \ or any of its rotations is a substring in the first word\n/// >>> cycpattern_check(a:\
    \ \"abcd\", b: \"abd\")\n/// false\n/// >>> cycpattern_check(a: \"hello\", b:\
    \ \"ell\")\n/// true\n/// >>> cycpattern_check(a: \"whassup\", b: \"psus\")\n\
    /// false\n/// >>> cycpattern_check(a: \"abab\", b: \"baa\")\n/// true\n/// >>>\
    \ cycpattern_check(a: \"efef\", b: \"eeff\")\n/// false\n/// >>> cycpattern_check(a:\
    \ \"himenss\", b: \"simen\")\n/// true\nfunc cycpattern_check(a: String, b: String)\
    \ -> Bool {\n    var a = a\n    var b = b\n    if a.count < b.count {\n      \
    \  return false\n    }\n    if a.count == b.count {\n        return a == b\n \
    \   }\n    for _ in 0..<a.count {\n        if a.hasPrefix(b) {\n            return\
    \ true\n        }\n        a.append(a.removeFirst())\n    }\n    return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(cycpattern_check(a: \"xyzw\", b: \"xyw\") == false)\n\
    assert(cycpattern_check(a: \"yello\", b: \"ell\") == true)\nassert(cycpattern_check(a:\
    \ \"whattup\", b: \"ptut\") == false)\nassert(cycpattern_check(a: \"efef\", b:\
    \ \"fee\") == true)\nassert(cycpattern_check(a: \"abab\", b: \"aabb\") == false)\n\
    assert(cycpattern_check(a: \"winemtt\", b: \"tinem\") == true)"
  status: Exception
  stderr: 'tmpp7u67kip/tmpp7u67kip.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4b066c4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4b063bbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4b063bb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4b063ba7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp7u67kip                        0x000055d87b126935 <unavailable> + 6453

    5    libc.so.6                          0x00002b4b068b0460 __libc_start_main +
    245

    6    tmpp7u67kip                        0x000055d87b126299 <unavailable> + 4761

    '
  stdout: ''
  timestamp: 1659824845
- exit_code: -4
  program: "\n/// You are given 2 words. You need to return true if the second word\
    \ or any of its rotations is a substring in the first word\n/// >>> cycpattern_check(a:\
    \ \"abcd\", b: \"abd\")\n/// false\n/// >>> cycpattern_check(a: \"hello\", b:\
    \ \"ell\")\n/// true\n/// >>> cycpattern_check(a: \"whassup\", b: \"psus\")\n\
    /// false\n/// >>> cycpattern_check(a: \"abab\", b: \"baa\")\n/// true\n/// >>>\
    \ cycpattern_check(a: \"efef\", b: \"eeff\")\n/// false\n/// >>> cycpattern_check(a:\
    \ \"himenss\", b: \"simen\")\n/// true\nfunc cycpattern_check(a: String, b: String)\
    \ -> Bool {\n    let a = a.lowercased()\n    let b = b.lowercased()\n    let a_len\
    \ = a.count\n    let b_len = b.count\n    if a_len < b_len {\n        return false\n\
    \    }\n    let a_arr = Array(a)\n    let b_arr = Array(b)\n    for i in 0..<a_len\
    \ {\n        var j = 0\n        while j < b_len && a_arr[(i + j) % a_len] == b_arr[j]\
    \ {\n            j += 1\n        }\n        if j == b_len {\n            return\
    \ true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(cycpattern_check(a: \"xyzw\", b: \"xyw\") == false)\nassert(cycpattern_check(a:\
    \ \"yello\", b: \"ell\") == true)\nassert(cycpattern_check(a: \"whattup\", b:\
    \ \"ptut\") == false)\nassert(cycpattern_check(a: \"efef\", b: \"fee\") == true)\n\
    assert(cycpattern_check(a: \"abab\", b: \"aabb\") == false)\nassert(cycpattern_check(a:\
    \ \"winemtt\", b: \"tinem\") == true)"
  status: Exception
  stderr: 'tmpi_pw48sn/tmpi_pw48sn.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b688bddbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b688bad2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b688bad2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b688bad17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpi_pw48sn                        0x000055da761d29c5 <unavailable> + 6597

    5    libc.so.6                          0x00002b688bfc7460 __libc_start_main +
    245

    6    tmpi_pw48sn                        0x000055da761d2329 <unavailable> + 4905

    '
  stdout: ''
  timestamp: 1659824845
- exit_code: -4
  program: "\n/// You are given 2 words. You need to return true if the second word\
    \ or any of its rotations is a substring in the first word\n/// >>> cycpattern_check(a:\
    \ \"abcd\", b: \"abd\")\n/// false\n/// >>> cycpattern_check(a: \"hello\", b:\
    \ \"ell\")\n/// true\n/// >>> cycpattern_check(a: \"whassup\", b: \"psus\")\n\
    /// false\n/// >>> cycpattern_check(a: \"abab\", b: \"baa\")\n/// true\n/// >>>\
    \ cycpattern_check(a: \"efef\", b: \"eeff\")\n/// false\n/// >>> cycpattern_check(a:\
    \ \"himenss\", b: \"simen\")\n/// true\nfunc cycpattern_check(a: String, b: String)\
    \ -> Bool {\n    let a_len = a.count\n    let b_len = b.count\n    if a_len ==\
    \ 0 || b_len == 0 {\n        return false\n    }\n    if a_len < b_len {\n   \
    \     return false\n    }\n    let a_arr = Array(a)\n    let b_arr = Array(b)\n\
    \    var i = 0\n    while i < a_len {\n        if a_arr[i] == b_arr[0] {\n   \
    \         var j = 0\n            var k = i\n            while j < b_len {\n  \
    \              if k >= a_len {\n                    k = 0\n                }\n\
    \                if a_arr[k] != b_arr[j] {\n                    break\n      \
    \          }\n                j += 1\n                k += 1\n            }\n\
    \            if j == b_len {\n                return true\n            }\n   \
    \     }\n        i += 1\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(cycpattern_check(a: \"xyzw\", b: \"xyw\") == false)\nassert(cycpattern_check(a:\
    \ \"yello\", b: \"ell\") == true)\nassert(cycpattern_check(a: \"whattup\", b:\
    \ \"ptut\") == false)\nassert(cycpattern_check(a: \"efef\", b: \"fee\") == true)\n\
    assert(cycpattern_check(a: \"abab\", b: \"aabb\") == false)\nassert(cycpattern_check(a:\
    \ \"winemtt\", b: \"tinem\") == true)"
  status: Exception
  stderr: 'tmplvrip89l/tmplvrip89l.swift:66: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba8cf1f0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba8ceee7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba8ceee7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba8ceee67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplvrip89l                        0x0000562d5a9a07a5 <unavailable> + 6053

    5    libc.so.6                          0x00002ba8cf3dc460 __libc_start_main +
    245

    6    tmplvrip89l                        0x0000562d5a9a0109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1659824845
- exit_code: -4
  program: "\n/// You are given 2 words. You need to return true if the second word\
    \ or any of its rotations is a substring in the first word\n/// >>> cycpattern_check(a:\
    \ \"abcd\", b: \"abd\")\n/// false\n/// >>> cycpattern_check(a: \"hello\", b:\
    \ \"ell\")\n/// true\n/// >>> cycpattern_check(a: \"whassup\", b: \"psus\")\n\
    /// false\n/// >>> cycpattern_check(a: \"abab\", b: \"baa\")\n/// true\n/// >>>\
    \ cycpattern_check(a: \"efef\", b: \"eeff\")\n/// false\n/// >>> cycpattern_check(a:\
    \ \"himenss\", b: \"simen\")\n/// true\nfunc cycpattern_check(a: String, b: String)\
    \ -> Bool {\n    var a = a\n    var b = b\n    if a.count != b.count {\n     \
    \   return false\n    }\n    if a.contains(b) {\n        return true\n    }\n\
    \    for _ in 0..<a.count {\n        a.append(a.removeFirst())\n        if a.contains(b)\
    \ {\n            return true\n        }\n    }\n    return false\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(cycpattern_check(a: \"xyzw\", b: \"xyw\") == false)\n\
    assert(cycpattern_check(a: \"yello\", b: \"ell\") == true)\nassert(cycpattern_check(a:\
    \ \"whattup\", b: \"ptut\") == false)\nassert(cycpattern_check(a: \"efef\", b:\
    \ \"fee\") == true)\nassert(cycpattern_check(a: \"abab\", b: \"aabb\") == false)\n\
    assert(cycpattern_check(a: \"winemtt\", b: \"tinem\") == true)"
  status: Exception
  stderr: 'tmpxw3o0tn0/tmpxw3o0tn0.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b422fd6cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b422fa63b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b422fa63988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b422fa627b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxw3o0tn0                        0x0000559bcb0bc721 <unavailable> + 5921

    5    libc.so.6                          0x00002b422ff58460 __libc_start_main +
    245

    6    tmpxw3o0tn0                        0x0000559bcb0bc299 <unavailable> + 4761

    '
  stdout: ''
  timestamp: 1659824845
- exit_code: -4
  program: "\n/// You are given 2 words. You need to return true if the second word\
    \ or any of its rotations is a substring in the first word\n/// >>> cycpattern_check(a:\
    \ \"abcd\", b: \"abd\")\n/// false\n/// >>> cycpattern_check(a: \"hello\", b:\
    \ \"ell\")\n/// true\n/// >>> cycpattern_check(a: \"whassup\", b: \"psus\")\n\
    /// false\n/// >>> cycpattern_check(a: \"abab\", b: \"baa\")\n/// true\n/// >>>\
    \ cycpattern_check(a: \"efef\", b: \"eeff\")\n/// false\n/// >>> cycpattern_check(a:\
    \ \"himenss\", b: \"simen\")\n/// true\nfunc cycpattern_check(a: String, b: String)\
    \ -> Bool {\n    let a = Array(a)\n    let b = Array(b)\n    let n = a.count\n\
    \    let m = b.count\n    var i = 0\n    var j = 0\n    while i < n {\n      \
    \  if a[i] == b[j] {\n            j += 1\n        } else {\n            j = 0\n\
    \        }\n        if j == m {\n            return true\n        }\n        i\
    \ += 1\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(cycpattern_check(a:\
    \ \"xyzw\", b: \"xyw\") == false)\nassert(cycpattern_check(a: \"yello\", b: \"\
    ell\") == true)\nassert(cycpattern_check(a: \"whattup\", b: \"ptut\") == false)\n\
    assert(cycpattern_check(a: \"efef\", b: \"fee\") == true)\nassert(cycpattern_check(a:\
    \ \"abab\", b: \"aabb\") == false)\nassert(cycpattern_check(a: \"winemtt\", b:\
    \ \"tinem\") == true)"
  status: Exception
  stderr: 'tmp0b06jrfg/tmp0b06jrfg.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b32272c3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3226fbab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3226fba988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3226fb97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0b06jrfg                        0x00005604c84627a5 <unavailable> + 6053

    5    libc.so.6                          0x00002b32274af460 __libc_start_main +
    245

    6    tmp0b06jrfg                        0x00005604c8462109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1659824845
- exit_code: -4
  program: "\n/// You are given 2 words. You need to return true if the second word\
    \ or any of its rotations is a substring in the first word\n/// >>> cycpattern_check(a:\
    \ \"abcd\", b: \"abd\")\n/// false\n/// >>> cycpattern_check(a: \"hello\", b:\
    \ \"ell\")\n/// true\n/// >>> cycpattern_check(a: \"whassup\", b: \"psus\")\n\
    /// false\n/// >>> cycpattern_check(a: \"abab\", b: \"baa\")\n/// true\n/// >>>\
    \ cycpattern_check(a: \"efef\", b: \"eeff\")\n/// false\n/// >>> cycpattern_check(a:\
    \ \"himenss\", b: \"simen\")\n/// true\nfunc cycpattern_check(a: String, b: String)\
    \ -> Bool {\n    if a.count < b.count {\n        return false\n    }\n    let\
    \ a = Array(a)\n    let b = Array(b)\n    for i in 0..<a.count {\n        if a[i]\
    \ == b[0] {\n            var j = 1\n            while j < b.count && a[(i + j)\
    \ % a.count] == b[j] {\n                j += 1\n            }\n            if\
    \ j == b.count {\n                return true\n            }\n        }\n    }\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(cycpattern_check(a:\
    \ \"xyzw\", b: \"xyw\") == false)\nassert(cycpattern_check(a: \"yello\", b: \"\
    ell\") == true)\nassert(cycpattern_check(a: \"whattup\", b: \"ptut\") == false)\n\
    assert(cycpattern_check(a: \"efef\", b: \"fee\") == true)\nassert(cycpattern_check(a:\
    \ \"abab\", b: \"aabb\") == false)\nassert(cycpattern_check(a: \"winemtt\", b:\
    \ \"tinem\") == true)"
  status: Exception
  stderr: 'tmpbzua32xv/tmpbzua32xv.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af4620a8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af461d9fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af461d9f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af461d9e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbzua32xv                        0x0000555ce00629c5 <unavailable> + 6597

    5    libc.so.6                          0x00002af462294460 __libc_start_main +
    245

    6    tmpbzua32xv                        0x0000555ce0062329 <unavailable> + 4905

    '
  stdout: ''
  timestamp: 1659824845
- exit_code: -4
  program: "\n/// You are given 2 words. You need to return true if the second word\
    \ or any of its rotations is a substring in the first word\n/// >>> cycpattern_check(a:\
    \ \"abcd\", b: \"abd\")\n/// false\n/// >>> cycpattern_check(a: \"hello\", b:\
    \ \"ell\")\n/// true\n/// >>> cycpattern_check(a: \"whassup\", b: \"psus\")\n\
    /// false\n/// >>> cycpattern_check(a: \"abab\", b: \"baa\")\n/// true\n/// >>>\
    \ cycpattern_check(a: \"efef\", b: \"eeff\")\n/// false\n/// >>> cycpattern_check(a:\
    \ \"himenss\", b: \"simen\")\n/// true\nfunc cycpattern_check(a: String, b: String)\
    \ -> Bool {\n    var a = a\n    var b = b\n    if a.count < b.count {\n      \
    \  return false\n    }\n    if a.contains(b) {\n        return true\n    }\n \
    \   for _ in 0..<a.count {\n        a.append(a.removeFirst())\n        if a.contains(b)\
    \ {\n            return true\n        }\n    }\n    return false\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(cycpattern_check(a: \"xyzw\", b: \"xyw\") == false)\n\
    assert(cycpattern_check(a: \"yello\", b: \"ell\") == true)\nassert(cycpattern_check(a:\
    \ \"whattup\", b: \"ptut\") == false)\nassert(cycpattern_check(a: \"efef\", b:\
    \ \"fee\") == true)\nassert(cycpattern_check(a: \"abab\", b: \"aabb\") == false)\n\
    assert(cycpattern_check(a: \"winemtt\", b: \"tinem\") == true)"
  status: Exception
  stderr: 'Swift/Substring.swift:316: Fatal error: String index is out of bounds

    Current stack trace:

    0    libswiftCore.so                    0x00002af752490c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af752187561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002af752187286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002af75218713c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002af752186bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftCore.so                    0x00002af7522e1e40 Substring.index(_:offsetBy:)
    + 880

    6    libswiftCore.so                    0x00002af7522e685c <unavailable> + 2873436

    7    libswiftCore.so                    0x00002af7521b3920 Collection.formIndex(_:offsetBy:)
    + 116

    8    libswift_StringProcessing.so       0x00002af751e6eb82 <unavailable> + 285570

    9    libswift_StringProcessing.so       0x00002af751e6db2f <unavailable> + 281391

    10   libswift_StringProcessing.so       0x00002af751e6eced <unavailable> + 285933

    11   libswift_StringProcessing.so       0x00002af751e5442d <unavailable> + 177197

    12   libswift_StringProcessing.so       0x00002af751e52840 BidirectionalCollection<>.firstRange<A>(of:)
    + 1517

    13   libswift_StringProcessing.so       0x00002af751e52e70 StringProtocol.contains(_:)
    + 64

    14   tmp376xalm5                        0x000055fb46dded7b <unavailable> + 7547

    15   tmp376xalm5                        0x000055fb46dde5c5 <unavailable> + 5573

    16   libc.so.6                          0x00002af75267c460 __libc_start_main +
    245

    17   tmp376xalm5                        0x000055fb46dde299 <unavailable> + 4761

    '
  stdout: ''
  timestamp: 1659824845
- exit_code: -4
  program: "\n/// You are given 2 words. You need to return true if the second word\
    \ or any of its rotations is a substring in the first word\n/// >>> cycpattern_check(a:\
    \ \"abcd\", b: \"abd\")\n/// false\n/// >>> cycpattern_check(a: \"hello\", b:\
    \ \"ell\")\n/// true\n/// >>> cycpattern_check(a: \"whassup\", b: \"psus\")\n\
    /// false\n/// >>> cycpattern_check(a: \"abab\", b: \"baa\")\n/// true\n/// >>>\
    \ cycpattern_check(a: \"efef\", b: \"eeff\")\n/// false\n/// >>> cycpattern_check(a:\
    \ \"himenss\", b: \"simen\")\n/// true\nfunc cycpattern_check(a: String, b: String)\
    \ -> Bool {\n    var b = b\n    for _ in 0..<b.count {\n        if a.contains(b)\
    \ {\n            return true\n        }\n        b.append(b.removeFirst())\n \
    \   }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(cycpattern_check(a:\
    \ \"xyzw\", b: \"xyw\") == false)\nassert(cycpattern_check(a: \"yello\", b: \"\
    ell\") == true)\nassert(cycpattern_check(a: \"whattup\", b: \"ptut\") == false)\n\
    assert(cycpattern_check(a: \"efef\", b: \"fee\") == true)\nassert(cycpattern_check(a:\
    \ \"abab\", b: \"aabb\") == false)\nassert(cycpattern_check(a: \"winemtt\", b:\
    \ \"tinem\") == true)"
  status: Exception
  stderr: 'Swift/Substring.swift:316: Fatal error: String index is out of bounds

    Current stack trace:

    0    libswiftCore.so                    0x00002ba9518f5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba9515ec561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ba9515ec286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ba9515ec13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ba9515ebbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftCore.so                    0x00002ba951746e40 Substring.index(_:offsetBy:)
    + 880

    6    libswiftCore.so                    0x00002ba95174b85c <unavailable> + 2873436

    7    libswiftCore.so                    0x00002ba951618920 Collection.formIndex(_:offsetBy:)
    + 116

    8    libswift_StringProcessing.so       0x00002ba9512d3b82 <unavailable> + 285570

    9    libswift_StringProcessing.so       0x00002ba9512d2b2f <unavailable> + 281391

    10   libswift_StringProcessing.so       0x00002ba9512d3ced <unavailable> + 285933

    11   libswift_StringProcessing.so       0x00002ba9512b942d <unavailable> + 177197

    12   libswift_StringProcessing.so       0x00002ba9512b7840 BidirectionalCollection<>.firstRange<A>(of:)
    + 1517

    13   libswift_StringProcessing.so       0x00002ba9512b7e70 StringProtocol.contains(_:)
    + 64

    14   tmpxxc0g7sv                        0x000055fb90321d4d <unavailable> + 7501

    15   tmpxxc0g7sv                        0x000055fb903215c5 <unavailable> + 5573

    16   libc.so.6                          0x00002ba951ae1460 __libc_start_main +
    245

    17   tmpxxc0g7sv                        0x000055fb90321299 <unavailable> + 4761

    '
  stdout: ''
  timestamp: 1659824845
- exit_code: 1
  program: "\n/// You are given 2 words. You need to return true if the second word\
    \ or any of its rotations is a substring in the first word\n/// >>> cycpattern_check(a:\
    \ \"abcd\", b: \"abd\")\n/// false\n/// >>> cycpattern_check(a: \"hello\", b:\
    \ \"ell\")\n/// true\n/// >>> cycpattern_check(a: \"whassup\", b: \"psus\")\n\
    /// false\n/// >>> cycpattern_check(a: \"abab\", b: \"baa\")\n/// true\n/// >>>\
    \ cycpattern_check(a: \"efef\", b: \"eeff\")\n/// false\n/// >>> cycpattern_check(a:\
    \ \"himenss\", b: \"simen\")\n/// true\nfunc cycpattern_check(a: String, b: String)\
    \ -> Bool {\n    let a = a.characters.map { String($0) }\n    let b = b.characters.map\
    \ { String($0) }\n    let b_len = b.count\n    let a_len = a.count\n    if b_len\
    \ > a_len {\n        return false\n    }\n    var i = 0\n    while i < a_len {\n\
    \        var j = 0\n        while j < b_len {\n            if a[(i + j) % a_len]\
    \ != b[j] {\n                break\n            }\n            j += 1\n      \
    \  }\n        if j == b_len {\n            return true\n        }\n        i +=\
    \ 1\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(cycpattern_check(a:\
    \ \"xyzw\", b: \"xyw\") == false)\nassert(cycpattern_check(a: \"yello\", b: \"\
    ell\") == true)\nassert(cycpattern_check(a: \"whattup\", b: \"ptut\") == false)\n\
    assert(cycpattern_check(a: \"efef\", b: \"fee\") == true)\nassert(cycpattern_check(a:\
    \ \"abab\", b: \"aabb\") == false)\nassert(cycpattern_check(a: \"winemtt\", b:\
    \ \"tinem\") == true)"
  status: SyntaxError
  stderr: "/tmp/tmpq78nk1rb.swift:16:15: error: 'characters' is unavailable: Please\
    \ use String directly\n    let a = a.characters.map { String($0) }\n         \
    \     ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpq78nk1rb.swift:17:15:\
    \ error: 'characters' is unavailable: Please use String directly\n    let b =\
    \ b.characters.map { String($0) }\n              ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n"
  stdout: ''
  timestamp: 1659824845
- exit_code: 1
  program: "\n/// You are given 2 words. You need to return true if the second word\
    \ or any of its rotations is a substring in the first word\n/// >>> cycpattern_check(a:\
    \ \"abcd\", b: \"abd\")\n/// false\n/// >>> cycpattern_check(a: \"hello\", b:\
    \ \"ell\")\n/// true\n/// >>> cycpattern_check(a: \"whassup\", b: \"psus\")\n\
    /// false\n/// >>> cycpattern_check(a: \"abab\", b: \"baa\")\n/// true\n/// >>>\
    \ cycpattern_check(a: \"efef\", b: \"eeff\")\n/// false\n/// >>> cycpattern_check(a:\
    \ \"himenss\", b: \"simen\")\n/// true\nfunc cycpattern_check(a: String, b: String)\
    \ -> Bool {\n    let a = a.lowercased()\n    let b = b.lowercased()\n    if a.contains(b)\
    \ {\n        return true\n    }\n    var b = b\n    for _ in 0..<b.count {\n \
    \       b.append(b.removeFirst())\n        if a.contains(b) {\n            return\
    \ true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(cycpattern_check(a: \"xyzw\", b: \"xyw\") == false)\nassert(cycpattern_check(a:\
    \ \"yello\", b: \"ell\") == true)\nassert(cycpattern_check(a: \"whattup\", b:\
    \ \"ptut\") == false)\nassert(cycpattern_check(a: \"efef\", b: \"fee\") == true)\n\
    assert(cycpattern_check(a: \"abab\", b: \"aabb\") == false)\nassert(cycpattern_check(a:\
    \ \"winemtt\", b: \"tinem\") == true)"
  status: SyntaxError
  stderr: "/tmp/tmpwidmgiyw.swift:21:9: error: invalid redeclaration of 'b'\n    var\
    \ b = b\n        ^\n/tmp/tmpwidmgiyw.swift:17:9: note: 'b' previously declared\
    \ here\n    let b = b.lowercased()\n        ^\n"
  stdout: ''
  timestamp: 1659824845
- exit_code: -4
  program: "\n/// You are given 2 words. You need to return true if the second word\
    \ or any of its rotations is a substring in the first word\n/// >>> cycpattern_check(a:\
    \ \"abcd\", b: \"abd\")\n/// false\n/// >>> cycpattern_check(a: \"hello\", b:\
    \ \"ell\")\n/// true\n/// >>> cycpattern_check(a: \"whassup\", b: \"psus\")\n\
    /// false\n/// >>> cycpattern_check(a: \"abab\", b: \"baa\")\n/// true\n/// >>>\
    \ cycpattern_check(a: \"efef\", b: \"eeff\")\n/// false\n/// >>> cycpattern_check(a:\
    \ \"himenss\", b: \"simen\")\n/// true\nfunc cycpattern_check(a: String, b: String)\
    \ -> Bool {\n    let a = a.lowercased()\n    let b = b.lowercased()\n    if a.count\
    \ < b.count {\n        return false\n    }\n    for i in 0..<a.count {\n     \
    \   let start = a.index(a.startIndex, offsetBy: i)\n        let end = a.index(a.startIndex,\
    \ offsetBy: i + b.count)\n        let range = start..<end\n        let sub = a[range]\n\
    \        if sub == b {\n            return true\n        }\n    }\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(cycpattern_check(a: \"\
    xyzw\", b: \"xyw\") == false)\nassert(cycpattern_check(a: \"yello\", b: \"ell\"\
    ) == true)\nassert(cycpattern_check(a: \"whattup\", b: \"ptut\") == false)\nassert(cycpattern_check(a:\
    \ \"efef\", b: \"fee\") == true)\nassert(cycpattern_check(a: \"abab\", b: \"aabb\"\
    ) == false)\nassert(cycpattern_check(a: \"winemtt\", b: \"tinem\") == true)"
  status: Exception
  stderr: 'Swift/StringCharacterView.swift:153: Fatal error: String index is out of
    bounds

    Current stack trace:

    0    libswiftCore.so                    0x00002ba6f5ea2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba6f5b99561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ba6f5b99286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ba6f5b9913c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ba6f5b98bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftCore.so                    0x00002ba6f5cccb0d <unavailable> + 2693901

    6    tmphzxiq4kw                        0x0000564de00dffaa <unavailable> + 8106

    7    tmphzxiq4kw                        0x0000564de00df6b5 <unavailable> + 5813

    8    libc.so.6                          0x00002ba6f608e460 __libc_start_main +
    245

    9    tmphzxiq4kw                        0x0000564de00df389 <unavailable> + 5001

    '
  stdout: ''
  timestamp: 1659824845
- exit_code: -4
  program: "\n/// You are given 2 words. You need to return true if the second word\
    \ or any of its rotations is a substring in the first word\n/// >>> cycpattern_check(a:\
    \ \"abcd\", b: \"abd\")\n/// false\n/// >>> cycpattern_check(a: \"hello\", b:\
    \ \"ell\")\n/// true\n/// >>> cycpattern_check(a: \"whassup\", b: \"psus\")\n\
    /// false\n/// >>> cycpattern_check(a: \"abab\", b: \"baa\")\n/// true\n/// >>>\
    \ cycpattern_check(a: \"efef\", b: \"eeff\")\n/// false\n/// >>> cycpattern_check(a:\
    \ \"himenss\", b: \"simen\")\n/// true\nfunc cycpattern_check(a: String, b: String)\
    \ -> Bool {\n    var a = a\n    var b = b\n    if a.count != b.count {\n     \
    \   return false\n    }\n    for _ in 0..<a.count {\n        if a.contains(b)\
    \ {\n            return true\n        }\n        a.append(a.removeFirst())\n \
    \   }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(cycpattern_check(a:\
    \ \"xyzw\", b: \"xyw\") == false)\nassert(cycpattern_check(a: \"yello\", b: \"\
    ell\") == true)\nassert(cycpattern_check(a: \"whattup\", b: \"ptut\") == false)\n\
    assert(cycpattern_check(a: \"efef\", b: \"fee\") == true)\nassert(cycpattern_check(a:\
    \ \"abab\", b: \"aabb\") == false)\nassert(cycpattern_check(a: \"winemtt\", b:\
    \ \"tinem\") == true)"
  status: Exception
  stderr: 'tmp6vjt88wd/tmp6vjt88wd.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b05ca280c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b05c9f77b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b05c9f77988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b05c9f767b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6vjt88wd                        0x00005578f7567721 <unavailable> + 5921

    5    libc.so.6                          0x00002b05ca46c460 __libc_start_main +
    245

    6    tmp6vjt88wd                        0x00005578f7567299 <unavailable> + 4761

    '
  stdout: ''
  timestamp: 1659824845
- exit_code: -4
  program: "\n/// You are given 2 words. You need to return true if the second word\
    \ or any of its rotations is a substring in the first word\n/// >>> cycpattern_check(a:\
    \ \"abcd\", b: \"abd\")\n/// false\n/// >>> cycpattern_check(a: \"hello\", b:\
    \ \"ell\")\n/// true\n/// >>> cycpattern_check(a: \"whassup\", b: \"psus\")\n\
    /// false\n/// >>> cycpattern_check(a: \"abab\", b: \"baa\")\n/// true\n/// >>>\
    \ cycpattern_check(a: \"efef\", b: \"eeff\")\n/// false\n/// >>> cycpattern_check(a:\
    \ \"himenss\", b: \"simen\")\n/// true\nfunc cycpattern_check(a: String, b: String)\
    \ -> Bool {\n    if a.count != b.count {\n        return false\n    }\n    let\
    \ a = Array(a)\n    let b = Array(b)\n    var i = 0\n    while i < a.count {\n\
    \        var j = 0\n        while j < b.count {\n            if a[i] == b[j] {\n\
    \                var k = 0\n                while k < b.count {\n            \
    \        if a[(i + k) % a.count] != b[(j + k) % b.count] {\n                 \
    \       break\n                    }\n                    k += 1\n           \
    \     }\n                if k == b.count {\n                    return true\n\
    \                }\n            }\n            j += 1\n        }\n        i +=\
    \ 1\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(cycpattern_check(a:\
    \ \"xyzw\", b: \"xyw\") == false)\nassert(cycpattern_check(a: \"yello\", b: \"\
    ell\") == true)\nassert(cycpattern_check(a: \"whattup\", b: \"ptut\") == false)\n\
    assert(cycpattern_check(a: \"efef\", b: \"fee\") == true)\nassert(cycpattern_check(a:\
    \ \"abab\", b: \"aabb\") == false)\nassert(cycpattern_check(a: \"winemtt\", b:\
    \ \"tinem\") == true)"
  status: Exception
  stderr: 'tmp_zn24ap8/tmp_zn24ap8.swift:58: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b72c43dbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b72c40d2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b72c40d2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b72c40d17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_zn24ap8                        0x000055fa6fcca671 <unavailable> + 5745

    5    libc.so.6                          0x00002b72c45c7460 __libc_start_main +
    245

    6    tmp_zn24ap8                        0x000055fa6fcca1e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659824845
- exit_code: -4
  program: "\n/// You are given 2 words. You need to return true if the second word\
    \ or any of its rotations is a substring in the first word\n/// >>> cycpattern_check(a:\
    \ \"abcd\", b: \"abd\")\n/// false\n/// >>> cycpattern_check(a: \"hello\", b:\
    \ \"ell\")\n/// true\n/// >>> cycpattern_check(a: \"whassup\", b: \"psus\")\n\
    /// false\n/// >>> cycpattern_check(a: \"abab\", b: \"baa\")\n/// true\n/// >>>\
    \ cycpattern_check(a: \"efef\", b: \"eeff\")\n/// false\n/// >>> cycpattern_check(a:\
    \ \"himenss\", b: \"simen\")\n/// true\nfunc cycpattern_check(a: String, b: String)\
    \ -> Bool {\n    guard a.count > b.count else { return false }\n    let a = Array(a)\n\
    \    let b = Array(b)\n    for i in 0..<a.count {\n        if a[i] == b[0] {\n\
    \            var j = 1\n            while j < b.count && a[(i + j) % a.count]\
    \ == b[j] {\n                j += 1\n            }\n            if j == b.count\
    \ {\n                return true\n            }\n        }\n    }\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(cycpattern_check(a: \"\
    xyzw\", b: \"xyw\") == false)\nassert(cycpattern_check(a: \"yello\", b: \"ell\"\
    ) == true)\nassert(cycpattern_check(a: \"whattup\", b: \"ptut\") == false)\nassert(cycpattern_check(a:\
    \ \"efef\", b: \"fee\") == true)\nassert(cycpattern_check(a: \"abab\", b: \"aabb\"\
    ) == false)\nassert(cycpattern_check(a: \"winemtt\", b: \"tinem\") == true)"
  status: Exception
  stderr: 'tmpivmbigay/tmpivmbigay.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6e1a59dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6e1a294b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6e1a294988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6e1a2937b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpivmbigay                        0x000055c45b59c9c5 <unavailable> + 6597

    5    libc.so.6                          0x00002b6e1a789460 __libc_start_main +
    245

    6    tmpivmbigay                        0x000055c45b59c329 <unavailable> + 4905

    '
  stdout: ''
  timestamp: 1659824845
- exit_code: -4
  program: "\n/// You are given 2 words. You need to return true if the second word\
    \ or any of its rotations is a substring in the first word\n/// >>> cycpattern_check(a:\
    \ \"abcd\", b: \"abd\")\n/// false\n/// >>> cycpattern_check(a: \"hello\", b:\
    \ \"ell\")\n/// true\n/// >>> cycpattern_check(a: \"whassup\", b: \"psus\")\n\
    /// false\n/// >>> cycpattern_check(a: \"abab\", b: \"baa\")\n/// true\n/// >>>\
    \ cycpattern_check(a: \"efef\", b: \"eeff\")\n/// false\n/// >>> cycpattern_check(a:\
    \ \"himenss\", b: \"simen\")\n/// true\nfunc cycpattern_check(a: String, b: String)\
    \ -> Bool {\n    var a = a\n    var b = b\n    if a.count != b.count {\n     \
    \   return false\n    }\n    for _ in 0..<a.count {\n        if a.contains(b)\
    \ {\n            return true\n        }\n        let first = a.removeFirst()\n\
    \        a.append(first)\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(cycpattern_check(a: \"xyzw\", b: \"xyw\") == false)\nassert(cycpattern_check(a:\
    \ \"yello\", b: \"ell\") == true)\nassert(cycpattern_check(a: \"whattup\", b:\
    \ \"ptut\") == false)\nassert(cycpattern_check(a: \"efef\", b: \"fee\") == true)\n\
    assert(cycpattern_check(a: \"abab\", b: \"aabb\") == false)\nassert(cycpattern_check(a:\
    \ \"winemtt\", b: \"tinem\") == true)"
  status: Exception
  stderr: 'tmp2x9soic6/tmp2x9soic6.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b56e7acdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b56e77c4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b56e77c4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b56e77c37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2x9soic6                        0x000055bf4513f721 <unavailable> + 5921

    5    libc.so.6                          0x00002b56e7cb9460 __libc_start_main +
    245

    6    tmp2x9soic6                        0x000055bf4513f299 <unavailable> + 4761

    '
  stdout: ''
  timestamp: 1659824845
- exit_code: -4
  program: "\n/// You are given 2 words. You need to return true if the second word\
    \ or any of its rotations is a substring in the first word\n/// >>> cycpattern_check(a:\
    \ \"abcd\", b: \"abd\")\n/// false\n/// >>> cycpattern_check(a: \"hello\", b:\
    \ \"ell\")\n/// true\n/// >>> cycpattern_check(a: \"whassup\", b: \"psus\")\n\
    /// false\n/// >>> cycpattern_check(a: \"abab\", b: \"baa\")\n/// true\n/// >>>\
    \ cycpattern_check(a: \"efef\", b: \"eeff\")\n/// false\n/// >>> cycpattern_check(a:\
    \ \"himenss\", b: \"simen\")\n/// true\nfunc cycpattern_check(a: String, b: String)\
    \ -> Bool {\n    var a = a\n    var b = b\n    if a.count != b.count {\n     \
    \   return false\n    }\n    for _ in 0..<a.count {\n        if a.contains(b)\
    \ {\n            return true\n        }\n        a.append(a.removeFirst())\n \
    \   }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(cycpattern_check(a:\
    \ \"xyzw\", b: \"xyw\") == false)\nassert(cycpattern_check(a: \"yello\", b: \"\
    ell\") == true)\nassert(cycpattern_check(a: \"whattup\", b: \"ptut\") == false)\n\
    assert(cycpattern_check(a: \"efef\", b: \"fee\") == true)\nassert(cycpattern_check(a:\
    \ \"abab\", b: \"aabb\") == false)\nassert(cycpattern_check(a: \"winemtt\", b:\
    \ \"tinem\") == true)"
  status: Exception
  stderr: 'tmp6vjt88wd/tmp6vjt88wd.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b05ca280c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b05c9f77b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b05c9f77988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b05c9f767b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6vjt88wd                        0x00005578f7567721 <unavailable> + 5921

    5    libc.so.6                          0x00002b05ca46c460 __libc_start_main +
    245

    6    tmp6vjt88wd                        0x00005578f7567299 <unavailable> + 4761

    '
  stdout: ''
  timestamp: 1659824845
- exit_code: -4
  program: "\n/// You are given 2 words. You need to return true if the second word\
    \ or any of its rotations is a substring in the first word\n/// >>> cycpattern_check(a:\
    \ \"abcd\", b: \"abd\")\n/// false\n/// >>> cycpattern_check(a: \"hello\", b:\
    \ \"ell\")\n/// true\n/// >>> cycpattern_check(a: \"whassup\", b: \"psus\")\n\
    /// false\n/// >>> cycpattern_check(a: \"abab\", b: \"baa\")\n/// true\n/// >>>\
    \ cycpattern_check(a: \"efef\", b: \"eeff\")\n/// false\n/// >>> cycpattern_check(a:\
    \ \"himenss\", b: \"simen\")\n/// true\nfunc cycpattern_check(a: String, b: String)\
    \ -> Bool {\n    let a = a.lowercased()\n    let b = b.lowercased()\n    if a.count\
    \ < b.count {\n        return false\n    }\n    let bb = b + b\n    return bb.contains(a)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(cycpattern_check(a: \"xyzw\", b: \"xyw\") == false)\n\
    assert(cycpattern_check(a: \"yello\", b: \"ell\") == true)\nassert(cycpattern_check(a:\
    \ \"whattup\", b: \"ptut\") == false)\nassert(cycpattern_check(a: \"efef\", b:\
    \ \"fee\") == true)\nassert(cycpattern_check(a: \"abab\", b: \"aabb\") == false)\n\
    assert(cycpattern_check(a: \"winemtt\", b: \"tinem\") == true)"
  status: Exception
  stderr: 'Swift/Substring.swift:316: Fatal error: String index is out of bounds

    Current stack trace:

    0    libswiftCore.so                    0x00002b6511e6ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6511b65561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b6511b65286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b6511b6513c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b6511b64bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftCore.so                    0x00002b6511cbfe40 Substring.index(_:offsetBy:)
    + 880

    6    libswiftCore.so                    0x00002b6511cc485c <unavailable> + 2873436

    7    libswiftCore.so                    0x00002b6511b91920 Collection.formIndex(_:offsetBy:)
    + 116

    8    libswift_StringProcessing.so       0x00002b651184cb82 <unavailable> + 285570

    9    libswift_StringProcessing.so       0x00002b651184bb2f <unavailable> + 281391

    10   libswift_StringProcessing.so       0x00002b651184cced <unavailable> + 285933

    11   libswift_StringProcessing.so       0x00002b651183242d <unavailable> + 177197

    12   libswift_StringProcessing.so       0x00002b6511830840 BidirectionalCollection<>.firstRange<A>(of:)
    + 1517

    13   libswift_StringProcessing.so       0x00002b6511830e70 StringProtocol.contains(_:)
    + 64

    14   tmptlp2789l                        0x00005612aebf7b15 <unavailable> + 6933

    15   tmptlp2789l                        0x00005612aebf73f5 <unavailable> + 5109

    16   libc.so.6                          0x00002b651205a460 __libc_start_main +
    245

    17   tmptlp2789l                        0x00005612aebf70c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1659824845
- exit_code: -4
  program: "\n/// You are given 2 words. You need to return true if the second word\
    \ or any of its rotations is a substring in the first word\n/// >>> cycpattern_check(a:\
    \ \"abcd\", b: \"abd\")\n/// false\n/// >>> cycpattern_check(a: \"hello\", b:\
    \ \"ell\")\n/// true\n/// >>> cycpattern_check(a: \"whassup\", b: \"psus\")\n\
    /// false\n/// >>> cycpattern_check(a: \"abab\", b: \"baa\")\n/// true\n/// >>>\
    \ cycpattern_check(a: \"efef\", b: \"eeff\")\n/// false\n/// >>> cycpattern_check(a:\
    \ \"himenss\", b: \"simen\")\n/// true\nfunc cycpattern_check(a: String, b: String)\
    \ -> Bool {\n    let a = Array(a)\n    let b = Array(b)\n    let b_len = b.count\n\
    \    for i in 0..<a.count {\n        if a[i] == b[0] {\n            var j = 0\n\
    \            while j < b_len && a[(i + j) % a.count] == b[j] {\n             \
    \   j += 1\n            }\n            if j == b_len {\n                return\
    \ true\n            }\n        }\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(cycpattern_check(a: \"xyzw\", b: \"xyw\") == false)\n\
    assert(cycpattern_check(a: \"yello\", b: \"ell\") == true)\nassert(cycpattern_check(a:\
    \ \"whattup\", b: \"ptut\") == false)\nassert(cycpattern_check(a: \"efef\", b:\
    \ \"fee\") == true)\nassert(cycpattern_check(a: \"abab\", b: \"aabb\") == false)\n\
    assert(cycpattern_check(a: \"winemtt\", b: \"tinem\") == true)"
  status: Exception
  stderr: 'tmpwoi_2gya/tmpwoi_2gya.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b956947ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9569175b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9569175988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b95691747b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwoi_2gya                        0x000055c82a375975 <unavailable> + 6517

    5    libc.so.6                          0x00002b956966a460 __libc_start_main +
    245

    6    tmpwoi_2gya                        0x000055c82a3752d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1659824845
- exit_code: -4
  program: "\n/// You are given 2 words. You need to return true if the second word\
    \ or any of its rotations is a substring in the first word\n/// >>> cycpattern_check(a:\
    \ \"abcd\", b: \"abd\")\n/// false\n/// >>> cycpattern_check(a: \"hello\", b:\
    \ \"ell\")\n/// true\n/// >>> cycpattern_check(a: \"whassup\", b: \"psus\")\n\
    /// false\n/// >>> cycpattern_check(a: \"abab\", b: \"baa\")\n/// true\n/// >>>\
    \ cycpattern_check(a: \"efef\", b: \"eeff\")\n/// false\n/// >>> cycpattern_check(a:\
    \ \"himenss\", b: \"simen\")\n/// true\nfunc cycpattern_check(a: String, b: String)\
    \ -> Bool {\n    let a = Array(a)\n    let b = Array(b)\n    var i = 0\n    while\
    \ i < a.count {\n        if a[i] == b[0] {\n            var j = 0\n          \
    \  while j < b.count {\n                if a[(i + j) % a.count] != b[j] {\n  \
    \                  break\n                }\n                j += 1\n        \
    \    }\n            if j == b.count {\n                return true\n         \
    \   }\n        }\n        i += 1\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(cycpattern_check(a: \"xyzw\", b: \"xyw\") == false)\n\
    assert(cycpattern_check(a: \"yello\", b: \"ell\") == true)\nassert(cycpattern_check(a:\
    \ \"whattup\", b: \"ptut\") == false)\nassert(cycpattern_check(a: \"efef\", b:\
    \ \"fee\") == true)\nassert(cycpattern_check(a: \"abab\", b: \"aabb\") == false)\n\
    assert(cycpattern_check(a: \"winemtt\", b: \"tinem\") == true)"
  status: Exception
  stderr: 'tmp36vmyxhz/tmp36vmyxhz.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af5467f7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af5464eeb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af5464ee988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af5464ed7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp36vmyxhz                        0x000055596e81a835 <unavailable> + 6197

    5    libc.so.6                          0x00002af5469e3460 __libc_start_main +
    245

    6    tmp36vmyxhz                        0x000055596e81a199 <unavailable> + 4505

    '
  stdout: ''
  timestamp: 1659824845
- exit_code: 1
  program: "\n/// You are given 2 words. You need to return true if the second word\
    \ or any of its rotations is a substring in the first word\n/// >>> cycpattern_check(a:\
    \ \"abcd\", b: \"abd\")\n/// false\n/// >>> cycpattern_check(a: \"hello\", b:\
    \ \"ell\")\n/// true\n/// >>> cycpattern_check(a: \"whassup\", b: \"psus\")\n\
    /// false\n/// >>> cycpattern_check(a: \"abab\", b: \"baa\")\n/// true\n/// >>>\
    \ cycpattern_check(a: \"efef\", b: \"eeff\")\n/// false\n/// >>> cycpattern_check(a:\
    \ \"himenss\", b: \"simen\")\n/// true\nfunc cycpattern_check(a: String, b: String)\
    \ -> Bool {\n    if a.count < b.count {\n        return false\n    }\n    var\
    \ b = b\n    for _ in 0..<a.count {\n        if a.contains(b) {\n            return\
    \ true\n        }\n        b = b.substring(from: b.index(after: b.startIndex))\
    \ + b.substring(to: b.index(before: b.endIndex))\n    }\n    return false\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(cycpattern_check(a: \"xyzw\", b: \"xyw\") == false)\n\
    assert(cycpattern_check(a: \"yello\", b: \"ell\") == true)\nassert(cycpattern_check(a:\
    \ \"whattup\", b: \"ptut\") == false)\nassert(cycpattern_check(a: \"efef\", b:\
    \ \"fee\") == true)\nassert(cycpattern_check(a: \"abab\", b: \"aabb\") == false)\n\
    assert(cycpattern_check(a: \"winemtt\", b: \"tinem\") == true)"
  status: SyntaxError
  stderr: "/tmp/tmpbazcd_yy.swift:24:15: error: value of type 'String' has no member\
    \ 'substring'\n        b = b.substring(from: b.index(after: b.startIndex)) + b.substring(to:\
    \ b.index(before: b.endIndex))\n            ~ ^~~~~~~~~\n/tmp/tmpbazcd_yy.swift:24:65:\
    \ error: value of type 'String' has no member 'substring'\n        b = b.substring(from:\
    \ b.index(after: b.startIndex)) + b.substring(to: b.index(before: b.endIndex))\n\
    \                                                              ~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824845
- exit_code: -4
  program: "\n/// You are given 2 words. You need to return true if the second word\
    \ or any of its rotations is a substring in the first word\n/// >>> cycpattern_check(a:\
    \ \"abcd\", b: \"abd\")\n/// false\n/// >>> cycpattern_check(a: \"hello\", b:\
    \ \"ell\")\n/// true\n/// >>> cycpattern_check(a: \"whassup\", b: \"psus\")\n\
    /// false\n/// >>> cycpattern_check(a: \"abab\", b: \"baa\")\n/// true\n/// >>>\
    \ cycpattern_check(a: \"efef\", b: \"eeff\")\n/// false\n/// >>> cycpattern_check(a:\
    \ \"himenss\", b: \"simen\")\n/// true\nfunc cycpattern_check(a: String, b: String)\
    \ -> Bool {\n    var a = a\n    var b = b\n    if a.count != b.count {\n     \
    \   return false\n    }\n    for _ in 0..<a.count {\n        if a.contains(b)\
    \ {\n            return true\n        }\n        a.insert(a.removeFirst(), at:\
    \ a.endIndex)\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(cycpattern_check(a: \"xyzw\", b: \"xyw\") == false)\nassert(cycpattern_check(a:\
    \ \"yello\", b: \"ell\") == true)\nassert(cycpattern_check(a: \"whattup\", b:\
    \ \"ptut\") == false)\nassert(cycpattern_check(a: \"efef\", b: \"fee\") == true)\n\
    assert(cycpattern_check(a: \"abab\", b: \"aabb\") == false)\nassert(cycpattern_check(a:\
    \ \"winemtt\", b: \"tinem\") == true)"
  status: Exception
  stderr: 'tmppj0o2rub/tmppj0o2rub.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b37f67b1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b37f64a8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b37f64a8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b37f64a77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppj0o2rub                        0x00005602c86ae781 <unavailable> + 6017

    5    libc.so.6                          0x00002b37f699d460 __libc_start_main +
    245

    6    tmppj0o2rub                        0x00005602c86ae2f9 <unavailable> + 4857

    '
  stdout: ''
  timestamp: 1659824845
- exit_code: -4
  program: "\n/// You are given 2 words. You need to return true if the second word\
    \ or any of its rotations is a substring in the first word\n/// >>> cycpattern_check(a:\
    \ \"abcd\", b: \"abd\")\n/// false\n/// >>> cycpattern_check(a: \"hello\", b:\
    \ \"ell\")\n/// true\n/// >>> cycpattern_check(a: \"whassup\", b: \"psus\")\n\
    /// false\n/// >>> cycpattern_check(a: \"abab\", b: \"baa\")\n/// true\n/// >>>\
    \ cycpattern_check(a: \"efef\", b: \"eeff\")\n/// false\n/// >>> cycpattern_check(a:\
    \ \"himenss\", b: \"simen\")\n/// true\nfunc cycpattern_check(a: String, b: String)\
    \ -> Bool {\n    var a = a\n    var b = b\n    if a.count != b.count {\n     \
    \   return false\n    }\n    for _ in 0..<a.count {\n        if a.contains(b)\
    \ {\n            return true\n        }\n        a.append(a.removeFirst())\n \
    \   }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(cycpattern_check(a:\
    \ \"xyzw\", b: \"xyw\") == false)\nassert(cycpattern_check(a: \"yello\", b: \"\
    ell\") == true)\nassert(cycpattern_check(a: \"whattup\", b: \"ptut\") == false)\n\
    assert(cycpattern_check(a: \"efef\", b: \"fee\") == true)\nassert(cycpattern_check(a:\
    \ \"abab\", b: \"aabb\") == false)\nassert(cycpattern_check(a: \"winemtt\", b:\
    \ \"tinem\") == true)"
  status: Exception
  stderr: 'tmp6vjt88wd/tmp6vjt88wd.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b05ca280c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b05c9f77b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b05c9f77988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b05c9f767b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6vjt88wd                        0x00005578f7567721 <unavailable> + 5921

    5    libc.so.6                          0x00002b05ca46c460 __libc_start_main +
    245

    6    tmp6vjt88wd                        0x00005578f7567299 <unavailable> + 4761

    '
  stdout: ''
  timestamp: 1659824845
- exit_code: -4
  program: "\n/// You are given 2 words. You need to return true if the second word\
    \ or any of its rotations is a substring in the first word\n/// >>> cycpattern_check(a:\
    \ \"abcd\", b: \"abd\")\n/// false\n/// >>> cycpattern_check(a: \"hello\", b:\
    \ \"ell\")\n/// true\n/// >>> cycpattern_check(a: \"whassup\", b: \"psus\")\n\
    /// false\n/// >>> cycpattern_check(a: \"abab\", b: \"baa\")\n/// true\n/// >>>\
    \ cycpattern_check(a: \"efef\", b: \"eeff\")\n/// false\n/// >>> cycpattern_check(a:\
    \ \"himenss\", b: \"simen\")\n/// true\nfunc cycpattern_check(a: String, b: String)\
    \ -> Bool {\n    guard a.count >= b.count else { return false }\n    var b = b\n\
    \    for _ in 0..<a.count {\n        if a.contains(b) { return true }\n      \
    \  b.append(b.removeFirst())\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(cycpattern_check(a: \"xyzw\", b: \"xyw\") == false)\nassert(cycpattern_check(a:\
    \ \"yello\", b: \"ell\") == true)\nassert(cycpattern_check(a: \"whattup\", b:\
    \ \"ptut\") == false)\nassert(cycpattern_check(a: \"efef\", b: \"fee\") == true)\n\
    assert(cycpattern_check(a: \"abab\", b: \"aabb\") == false)\nassert(cycpattern_check(a:\
    \ \"winemtt\", b: \"tinem\") == true)"
  status: Exception
  stderr: 'Swift/Substring.swift:316: Fatal error: String index is out of bounds

    Current stack trace:

    0    libswiftCore.so                    0x00002b6330e6bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6330b62561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b6330b62286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b6330b6213c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b6330b61bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftCore.so                    0x00002b6330cbce40 Substring.index(_:offsetBy:)
    + 880

    6    libswiftCore.so                    0x00002b6330cc185c <unavailable> + 2873436

    7    libswiftCore.so                    0x00002b6330b8e920 Collection.formIndex(_:offsetBy:)
    + 116

    8    libswift_StringProcessing.so       0x00002b6330849b82 <unavailable> + 285570

    9    libswift_StringProcessing.so       0x00002b6330848b2f <unavailable> + 281391

    10   libswift_StringProcessing.so       0x00002b6330849ced <unavailable> + 285933

    11   libswift_StringProcessing.so       0x00002b633082f42d <unavailable> + 177197

    12   libswift_StringProcessing.so       0x00002b633082d840 BidirectionalCollection<>.firstRange<A>(of:)
    + 1517

    13   libswift_StringProcessing.so       0x00002b633082de70 StringProtocol.contains(_:)
    + 64

    14   tmpwofilwfj                        0x0000555cf9347d84 <unavailable> + 7556

    15   tmpwofilwfj                        0x0000555cf93475c5 <unavailable> + 5573

    16   libc.so.6                          0x00002b6331057460 __libc_start_main +
    245

    17   tmpwofilwfj                        0x0000555cf9347299 <unavailable> + 4761

    '
  stdout: ''
  timestamp: 1659824845
- exit_code: -4
  program: "\n/// You are given 2 words. You need to return true if the second word\
    \ or any of its rotations is a substring in the first word\n/// >>> cycpattern_check(a:\
    \ \"abcd\", b: \"abd\")\n/// false\n/// >>> cycpattern_check(a: \"hello\", b:\
    \ \"ell\")\n/// true\n/// >>> cycpattern_check(a: \"whassup\", b: \"psus\")\n\
    /// false\n/// >>> cycpattern_check(a: \"abab\", b: \"baa\")\n/// true\n/// >>>\
    \ cycpattern_check(a: \"efef\", b: \"eeff\")\n/// false\n/// >>> cycpattern_check(a:\
    \ \"himenss\", b: \"simen\")\n/// true\nfunc cycpattern_check(a: String, b: String)\
    \ -> Bool {\n    var a = a\n    var b = b\n    if a.count != b.count {\n     \
    \   return false\n    }\n    for _ in 0..<a.count {\n        if a.contains(b)\
    \ {\n            return true\n        }\n        a.append(a.removeFirst())\n \
    \   }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(cycpattern_check(a:\
    \ \"xyzw\", b: \"xyw\") == false)\nassert(cycpattern_check(a: \"yello\", b: \"\
    ell\") == true)\nassert(cycpattern_check(a: \"whattup\", b: \"ptut\") == false)\n\
    assert(cycpattern_check(a: \"efef\", b: \"fee\") == true)\nassert(cycpattern_check(a:\
    \ \"abab\", b: \"aabb\") == false)\nassert(cycpattern_check(a: \"winemtt\", b:\
    \ \"tinem\") == true)"
  status: Exception
  stderr: 'tmp6vjt88wd/tmp6vjt88wd.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b05ca280c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b05c9f77b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b05c9f77988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b05c9f767b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6vjt88wd                        0x00005578f7567721 <unavailable> + 5921

    5    libc.so.6                          0x00002b05ca46c460 __libc_start_main +
    245

    6    tmp6vjt88wd                        0x00005578f7567299 <unavailable> + 4761

    '
  stdout: ''
  timestamp: 1659824845
- exit_code: -4
  program: "\n/// You are given 2 words. You need to return true if the second word\
    \ or any of its rotations is a substring in the first word\n/// >>> cycpattern_check(a:\
    \ \"abcd\", b: \"abd\")\n/// false\n/// >>> cycpattern_check(a: \"hello\", b:\
    \ \"ell\")\n/// true\n/// >>> cycpattern_check(a: \"whassup\", b: \"psus\")\n\
    /// false\n/// >>> cycpattern_check(a: \"abab\", b: \"baa\")\n/// true\n/// >>>\
    \ cycpattern_check(a: \"efef\", b: \"eeff\")\n/// false\n/// >>> cycpattern_check(a:\
    \ \"himenss\", b: \"simen\")\n/// true\nfunc cycpattern_check(a: String, b: String)\
    \ -> Bool {\n    var b = b\n    for _ in 0..<b.count {\n        if a.contains(b)\
    \ {\n            return true\n        }\n        b.append(b.removeFirst())\n \
    \   }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(cycpattern_check(a:\
    \ \"xyzw\", b: \"xyw\") == false)\nassert(cycpattern_check(a: \"yello\", b: \"\
    ell\") == true)\nassert(cycpattern_check(a: \"whattup\", b: \"ptut\") == false)\n\
    assert(cycpattern_check(a: \"efef\", b: \"fee\") == true)\nassert(cycpattern_check(a:\
    \ \"abab\", b: \"aabb\") == false)\nassert(cycpattern_check(a: \"winemtt\", b:\
    \ \"tinem\") == true)"
  status: Exception
  stderr: 'Swift/Substring.swift:316: Fatal error: String index is out of bounds

    Current stack trace:

    0    libswiftCore.so                    0x00002ba9518f5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba9515ec561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ba9515ec286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ba9515ec13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ba9515ebbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftCore.so                    0x00002ba951746e40 Substring.index(_:offsetBy:)
    + 880

    6    libswiftCore.so                    0x00002ba95174b85c <unavailable> + 2873436

    7    libswiftCore.so                    0x00002ba951618920 Collection.formIndex(_:offsetBy:)
    + 116

    8    libswift_StringProcessing.so       0x00002ba9512d3b82 <unavailable> + 285570

    9    libswift_StringProcessing.so       0x00002ba9512d2b2f <unavailable> + 281391

    10   libswift_StringProcessing.so       0x00002ba9512d3ced <unavailable> + 285933

    11   libswift_StringProcessing.so       0x00002ba9512b942d <unavailable> + 177197

    12   libswift_StringProcessing.so       0x00002ba9512b7840 BidirectionalCollection<>.firstRange<A>(of:)
    + 1517

    13   libswift_StringProcessing.so       0x00002ba9512b7e70 StringProtocol.contains(_:)
    + 64

    14   tmpxxc0g7sv                        0x000055fb90321d4d <unavailable> + 7501

    15   tmpxxc0g7sv                        0x000055fb903215c5 <unavailable> + 5573

    16   libc.so.6                          0x00002ba951ae1460 __libc_start_main +
    245

    17   tmpxxc0g7sv                        0x000055fb90321299 <unavailable> + 4761

    '
  stdout: ''
  timestamp: 1659824845
- exit_code: -4
  program: "\n/// You are given 2 words. You need to return true if the second word\
    \ or any of its rotations is a substring in the first word\n/// >>> cycpattern_check(a:\
    \ \"abcd\", b: \"abd\")\n/// false\n/// >>> cycpattern_check(a: \"hello\", b:\
    \ \"ell\")\n/// true\n/// >>> cycpattern_check(a: \"whassup\", b: \"psus\")\n\
    /// false\n/// >>> cycpattern_check(a: \"abab\", b: \"baa\")\n/// true\n/// >>>\
    \ cycpattern_check(a: \"efef\", b: \"eeff\")\n/// false\n/// >>> cycpattern_check(a:\
    \ \"himenss\", b: \"simen\")\n/// true\nfunc cycpattern_check(a: String, b: String)\
    \ -> Bool {\n    var b = b\n    for _ in 0..<b.count {\n        if a.contains(b)\
    \ {\n            return true\n        }\n        b.append(b.removeFirst())\n \
    \   }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(cycpattern_check(a:\
    \ \"xyzw\", b: \"xyw\") == false)\nassert(cycpattern_check(a: \"yello\", b: \"\
    ell\") == true)\nassert(cycpattern_check(a: \"whattup\", b: \"ptut\") == false)\n\
    assert(cycpattern_check(a: \"efef\", b: \"fee\") == true)\nassert(cycpattern_check(a:\
    \ \"abab\", b: \"aabb\") == false)\nassert(cycpattern_check(a: \"winemtt\", b:\
    \ \"tinem\") == true)"
  status: Exception
  stderr: 'Swift/Substring.swift:316: Fatal error: String index is out of bounds

    Current stack trace:

    0    libswiftCore.so                    0x00002ba9518f5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba9515ec561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ba9515ec286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ba9515ec13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ba9515ebbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftCore.so                    0x00002ba951746e40 Substring.index(_:offsetBy:)
    + 880

    6    libswiftCore.so                    0x00002ba95174b85c <unavailable> + 2873436

    7    libswiftCore.so                    0x00002ba951618920 Collection.formIndex(_:offsetBy:)
    + 116

    8    libswift_StringProcessing.so       0x00002ba9512d3b82 <unavailable> + 285570

    9    libswift_StringProcessing.so       0x00002ba9512d2b2f <unavailable> + 281391

    10   libswift_StringProcessing.so       0x00002ba9512d3ced <unavailable> + 285933

    11   libswift_StringProcessing.so       0x00002ba9512b942d <unavailable> + 177197

    12   libswift_StringProcessing.so       0x00002ba9512b7840 BidirectionalCollection<>.firstRange<A>(of:)
    + 1517

    13   libswift_StringProcessing.so       0x00002ba9512b7e70 StringProtocol.contains(_:)
    + 64

    14   tmpxxc0g7sv                        0x000055fb90321d4d <unavailable> + 7501

    15   tmpxxc0g7sv                        0x000055fb903215c5 <unavailable> + 5573

    16   libc.so.6                          0x00002ba951ae1460 __libc_start_main +
    245

    17   tmpxxc0g7sv                        0x000055fb90321299 <unavailable> + 4761

    '
  stdout: ''
  timestamp: 1659824845
- exit_code: -4
  program: "\n/// You are given 2 words. You need to return true if the second word\
    \ or any of its rotations is a substring in the first word\n/// >>> cycpattern_check(a:\
    \ \"abcd\", b: \"abd\")\n/// false\n/// >>> cycpattern_check(a: \"hello\", b:\
    \ \"ell\")\n/// true\n/// >>> cycpattern_check(a: \"whassup\", b: \"psus\")\n\
    /// false\n/// >>> cycpattern_check(a: \"abab\", b: \"baa\")\n/// true\n/// >>>\
    \ cycpattern_check(a: \"efef\", b: \"eeff\")\n/// false\n/// >>> cycpattern_check(a:\
    \ \"himenss\", b: \"simen\")\n/// true\nfunc cycpattern_check(a: String, b: String)\
    \ -> Bool {\n    let a = Array(a)\n    let b = Array(b)\n    let b_len = b.count\n\
    \    let a_len = a.count\n    var i = 0\n    var j = 0\n    while i < a_len {\n\
    \        if a[i] == b[j] {\n            j += 1\n            if j == b_len {\n\
    \                return true\n            }\n        } else {\n            j =\
    \ 0\n        }\n        i += 1\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(cycpattern_check(a: \"xyzw\", b: \"xyw\") == false)\n\
    assert(cycpattern_check(a: \"yello\", b: \"ell\") == true)\nassert(cycpattern_check(a:\
    \ \"whattup\", b: \"ptut\") == false)\nassert(cycpattern_check(a: \"efef\", b:\
    \ \"fee\") == true)\nassert(cycpattern_check(a: \"abab\", b: \"aabb\") == false)\n\
    assert(cycpattern_check(a: \"winemtt\", b: \"tinem\") == true)"
  status: Exception
  stderr: 'tmpobp7fj2n/tmpobp7fj2n.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae15a51dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae15a214b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae15a214988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae15a2137b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpobp7fj2n                        0x000055e5d2ea37a5 <unavailable> + 6053

    5    libc.so.6                          0x00002ae15a709460 __libc_start_main +
    245

    6    tmpobp7fj2n                        0x000055e5d2ea3109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1659824845
- exit_code: -4
  program: "\n/// You are given 2 words. You need to return true if the second word\
    \ or any of its rotations is a substring in the first word\n/// >>> cycpattern_check(a:\
    \ \"abcd\", b: \"abd\")\n/// false\n/// >>> cycpattern_check(a: \"hello\", b:\
    \ \"ell\")\n/// true\n/// >>> cycpattern_check(a: \"whassup\", b: \"psus\")\n\
    /// false\n/// >>> cycpattern_check(a: \"abab\", b: \"baa\")\n/// true\n/// >>>\
    \ cycpattern_check(a: \"efef\", b: \"eeff\")\n/// false\n/// >>> cycpattern_check(a:\
    \ \"himenss\", b: \"simen\")\n/// true\nfunc cycpattern_check(a: String, b: String)\
    \ -> Bool {\n    let a = Array(a)\n    let b = Array(b)\n    let a_len = a.count\n\
    \    let b_len = b.count\n    if a_len < b_len {\n        return false\n    }\n\
    \    var i = 0\n    while i < a_len {\n        var j = 0\n        while j < b_len\
    \ {\n            if a[(i + j) % a_len] != b[j] {\n                break\n    \
    \        }\n            j += 1\n        }\n        if j == b_len {\n         \
    \   return true\n        }\n        i += 1\n    }\n    return false\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(cycpattern_check(a: \"xyzw\", b: \"xyw\") == false)\n\
    assert(cycpattern_check(a: \"yello\", b: \"ell\") == true)\nassert(cycpattern_check(a:\
    \ \"whattup\", b: \"ptut\") == false)\nassert(cycpattern_check(a: \"efef\", b:\
    \ \"fee\") == true)\nassert(cycpattern_check(a: \"abab\", b: \"aabb\") == false)\n\
    assert(cycpattern_check(a: \"winemtt\", b: \"tinem\") == true)"
  status: Exception
  stderr: 'tmp1jtp0_ke/tmp1jtp0_ke.swift:56: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b824eaf4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b824e7ebb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b824e7eb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b824e7ea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1jtp0_ke                        0x0000557e52193835 <unavailable> + 6197

    5    libc.so.6                          0x00002b824ece0460 __libc_start_main +
    245

    6    tmp1jtp0_ke                        0x0000557e52193199 <unavailable> + 4505

    '
  stdout: ''
  timestamp: 1659824845
- exit_code: -4
  program: "\n/// You are given 2 words. You need to return true if the second word\
    \ or any of its rotations is a substring in the first word\n/// >>> cycpattern_check(a:\
    \ \"abcd\", b: \"abd\")\n/// false\n/// >>> cycpattern_check(a: \"hello\", b:\
    \ \"ell\")\n/// true\n/// >>> cycpattern_check(a: \"whassup\", b: \"psus\")\n\
    /// false\n/// >>> cycpattern_check(a: \"abab\", b: \"baa\")\n/// true\n/// >>>\
    \ cycpattern_check(a: \"efef\", b: \"eeff\")\n/// false\n/// >>> cycpattern_check(a:\
    \ \"himenss\", b: \"simen\")\n/// true\nfunc cycpattern_check(a: String, b: String)\
    \ -> Bool {\n    var a = a\n    var b = b\n    if a.count < b.count {\n      \
    \  return false\n    }\n    for _ in 0..<a.count {\n        if a.contains(b) {\n\
    \            return true\n        }\n        let first = a.removeFirst()\n   \
    \     a.append(first)\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(cycpattern_check(a: \"xyzw\", b: \"xyw\") == false)\nassert(cycpattern_check(a:\
    \ \"yello\", b: \"ell\") == true)\nassert(cycpattern_check(a: \"whattup\", b:\
    \ \"ptut\") == false)\nassert(cycpattern_check(a: \"efef\", b: \"fee\") == true)\n\
    assert(cycpattern_check(a: \"abab\", b: \"aabb\") == false)\nassert(cycpattern_check(a:\
    \ \"winemtt\", b: \"tinem\") == true)"
  status: Exception
  stderr: 'Swift/Substring.swift:316: Fatal error: String index is out of bounds

    Current stack trace:

    0    libswiftCore.so                    0x00002b59480d2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5947dc9561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b5947dc9286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b5947dc913c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b5947dc8bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftCore.so                    0x00002b5947f23e40 Substring.index(_:offsetBy:)
    + 880

    6    libswiftCore.so                    0x00002b5947f2885c <unavailable> + 2873436

    7    libswiftCore.so                    0x00002b5947df5920 Collection.formIndex(_:offsetBy:)
    + 116

    8    libswift_StringProcessing.so       0x00002b5947ab0b82 <unavailable> + 285570

    9    libswift_StringProcessing.so       0x00002b5947aafb2f <unavailable> + 281391

    10   libswift_StringProcessing.so       0x00002b5947ab0ced <unavailable> + 285933

    11   libswift_StringProcessing.so       0x00002b5947a9642d <unavailable> + 177197

    12   libswift_StringProcessing.so       0x00002b5947a94840 BidirectionalCollection<>.firstRange<A>(of:)
    + 1517

    13   libswift_StringProcessing.so       0x00002b5947a94e70 StringProtocol.contains(_:)
    + 64

    14   tmp37wlh22f                        0x0000559bd9328e6f <unavailable> + 7791

    15   tmp37wlh22f                        0x0000559bd93285c5 <unavailable> + 5573

    16   libc.so.6                          0x00002b59482be460 __libc_start_main +
    245

    17   tmp37wlh22f                        0x0000559bd9328299 <unavailable> + 4761

    '
  stdout: ''
  timestamp: 1659824845
- exit_code: -4
  program: "\n/// You are given 2 words. You need to return true if the second word\
    \ or any of its rotations is a substring in the first word\n/// >>> cycpattern_check(a:\
    \ \"abcd\", b: \"abd\")\n/// false\n/// >>> cycpattern_check(a: \"hello\", b:\
    \ \"ell\")\n/// true\n/// >>> cycpattern_check(a: \"whassup\", b: \"psus\")\n\
    /// false\n/// >>> cycpattern_check(a: \"abab\", b: \"baa\")\n/// true\n/// >>>\
    \ cycpattern_check(a: \"efef\", b: \"eeff\")\n/// false\n/// >>> cycpattern_check(a:\
    \ \"himenss\", b: \"simen\")\n/// true\nfunc cycpattern_check(a: String, b: String)\
    \ -> Bool {\n    var b = b\n    for _ in 0..<b.count {\n        if a.contains(b)\
    \ {\n            return true\n        }\n        b.append(b.removeFirst())\n \
    \   }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(cycpattern_check(a:\
    \ \"xyzw\", b: \"xyw\") == false)\nassert(cycpattern_check(a: \"yello\", b: \"\
    ell\") == true)\nassert(cycpattern_check(a: \"whattup\", b: \"ptut\") == false)\n\
    assert(cycpattern_check(a: \"efef\", b: \"fee\") == true)\nassert(cycpattern_check(a:\
    \ \"abab\", b: \"aabb\") == false)\nassert(cycpattern_check(a: \"winemtt\", b:\
    \ \"tinem\") == true)"
  status: Exception
  stderr: 'Swift/Substring.swift:316: Fatal error: String index is out of bounds

    Current stack trace:

    0    libswiftCore.so                    0x00002ba9518f5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba9515ec561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ba9515ec286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ba9515ec13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ba9515ebbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftCore.so                    0x00002ba951746e40 Substring.index(_:offsetBy:)
    + 880

    6    libswiftCore.so                    0x00002ba95174b85c <unavailable> + 2873436

    7    libswiftCore.so                    0x00002ba951618920 Collection.formIndex(_:offsetBy:)
    + 116

    8    libswift_StringProcessing.so       0x00002ba9512d3b82 <unavailable> + 285570

    9    libswift_StringProcessing.so       0x00002ba9512d2b2f <unavailable> + 281391

    10   libswift_StringProcessing.so       0x00002ba9512d3ced <unavailable> + 285933

    11   libswift_StringProcessing.so       0x00002ba9512b942d <unavailable> + 177197

    12   libswift_StringProcessing.so       0x00002ba9512b7840 BidirectionalCollection<>.firstRange<A>(of:)
    + 1517

    13   libswift_StringProcessing.so       0x00002ba9512b7e70 StringProtocol.contains(_:)
    + 64

    14   tmpxxc0g7sv                        0x000055fb90321d4d <unavailable> + 7501

    15   tmpxxc0g7sv                        0x000055fb903215c5 <unavailable> + 5573

    16   libc.so.6                          0x00002ba951ae1460 __libc_start_main +
    245

    17   tmpxxc0g7sv                        0x000055fb90321299 <unavailable> + 4761

    '
  stdout: ''
  timestamp: 1659824845
- exit_code: -4
  program: "\n/// You are given 2 words. You need to return true if the second word\
    \ or any of its rotations is a substring in the first word\n/// >>> cycpattern_check(a:\
    \ \"abcd\", b: \"abd\")\n/// false\n/// >>> cycpattern_check(a: \"hello\", b:\
    \ \"ell\")\n/// true\n/// >>> cycpattern_check(a: \"whassup\", b: \"psus\")\n\
    /// false\n/// >>> cycpattern_check(a: \"abab\", b: \"baa\")\n/// true\n/// >>>\
    \ cycpattern_check(a: \"efef\", b: \"eeff\")\n/// false\n/// >>> cycpattern_check(a:\
    \ \"himenss\", b: \"simen\")\n/// true\nfunc cycpattern_check(a: String, b: String)\
    \ -> Bool {\n    let a = Array(a)\n    let b = Array(b)\n    let b_len = b.count\n\
    \    let a_len = a.count\n    var i = 0\n    while i < a_len {\n        if a[i]\
    \ == b[0] {\n            var j = 0\n            while j < b_len {\n          \
    \      if a[(i + j) % a_len] != b[j] {\n                    break\n          \
    \      }\n                j += 1\n            }\n            if j == b_len {\n\
    \                return true\n            }\n        }\n        i += 1\n    }\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(cycpattern_check(a:\
    \ \"xyzw\", b: \"xyw\") == false)\nassert(cycpattern_check(a: \"yello\", b: \"\
    ell\") == true)\nassert(cycpattern_check(a: \"whattup\", b: \"ptut\") == false)\n\
    assert(cycpattern_check(a: \"efef\", b: \"fee\") == true)\nassert(cycpattern_check(a:\
    \ \"abab\", b: \"aabb\") == false)\nassert(cycpattern_check(a: \"winemtt\", b:\
    \ \"tinem\") == true)"
  status: Exception
  stderr: 'tmpfsuohs15/tmpfsuohs15.swift:55: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abebcb36c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abebc82db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abebc82d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abebc82c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfsuohs15                        0x0000564c1ac2d835 <unavailable> + 6197

    5    libc.so.6                          0x00002abebcd22460 __libc_start_main +
    245

    6    tmpfsuohs15                        0x0000564c1ac2d199 <unavailable> + 4505

    '
  stdout: ''
  timestamp: 1659824845
- exit_code: -4
  program: "\n/// You are given 2 words. You need to return true if the second word\
    \ or any of its rotations is a substring in the first word\n/// >>> cycpattern_check(a:\
    \ \"abcd\", b: \"abd\")\n/// false\n/// >>> cycpattern_check(a: \"hello\", b:\
    \ \"ell\")\n/// true\n/// >>> cycpattern_check(a: \"whassup\", b: \"psus\")\n\
    /// false\n/// >>> cycpattern_check(a: \"abab\", b: \"baa\")\n/// true\n/// >>>\
    \ cycpattern_check(a: \"efef\", b: \"eeff\")\n/// false\n/// >>> cycpattern_check(a:\
    \ \"himenss\", b: \"simen\")\n/// true\nfunc cycpattern_check(a: String, b: String)\
    \ -> Bool {\n    var a = a\n    var b = b\n    if a.count < b.count {\n      \
    \  return false\n    }\n    for _ in 0..<a.count {\n        if a.contains(b) {\n\
    \            return true\n        }\n        a.append(a.removeFirst())\n    }\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(cycpattern_check(a:\
    \ \"xyzw\", b: \"xyw\") == false)\nassert(cycpattern_check(a: \"yello\", b: \"\
    ell\") == true)\nassert(cycpattern_check(a: \"whattup\", b: \"ptut\") == false)\n\
    assert(cycpattern_check(a: \"efef\", b: \"fee\") == true)\nassert(cycpattern_check(a:\
    \ \"abab\", b: \"aabb\") == false)\nassert(cycpattern_check(a: \"winemtt\", b:\
    \ \"tinem\") == true)"
  status: Exception
  stderr: 'Swift/Substring.swift:316: Fatal error: String index is out of bounds

    Current stack trace:

    0    libswiftCore.so                    0x00002ab3d3ee4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab3d3bdb561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ab3d3bdb286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ab3d3bdb13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ab3d3bdabb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftCore.so                    0x00002ab3d3d35e40 Substring.index(_:offsetBy:)
    + 880

    6    libswiftCore.so                    0x00002ab3d3d3a85c <unavailable> + 2873436

    7    libswiftCore.so                    0x00002ab3d3c07920 Collection.formIndex(_:offsetBy:)
    + 116

    8    libswift_StringProcessing.so       0x00002ab3d38c2b82 <unavailable> + 285570

    9    libswift_StringProcessing.so       0x00002ab3d38c1b2f <unavailable> + 281391

    10   libswift_StringProcessing.so       0x00002ab3d38c2ced <unavailable> + 285933

    11   libswift_StringProcessing.so       0x00002ab3d38a842d <unavailable> + 177197

    12   libswift_StringProcessing.so       0x00002ab3d38a6840 BidirectionalCollection<>.firstRange<A>(of:)
    + 1517

    13   libswift_StringProcessing.so       0x00002ab3d38a6e70 StringProtocol.contains(_:)
    + 64

    14   tmpst2ie6pm                        0x00005647168e3e5c <unavailable> + 7772

    15   tmpst2ie6pm                        0x00005647168e35c5 <unavailable> + 5573

    16   libc.so.6                          0x00002ab3d40d0460 __libc_start_main +
    245

    17   tmpst2ie6pm                        0x00005647168e3299 <unavailable> + 4761

    '
  stdout: ''
  timestamp: 1659824845
- exit_code: -4
  program: "\n/// You are given 2 words. You need to return true if the second word\
    \ or any of its rotations is a substring in the first word\n/// >>> cycpattern_check(a:\
    \ \"abcd\", b: \"abd\")\n/// false\n/// >>> cycpattern_check(a: \"hello\", b:\
    \ \"ell\")\n/// true\n/// >>> cycpattern_check(a: \"whassup\", b: \"psus\")\n\
    /// false\n/// >>> cycpattern_check(a: \"abab\", b: \"baa\")\n/// true\n/// >>>\
    \ cycpattern_check(a: \"efef\", b: \"eeff\")\n/// false\n/// >>> cycpattern_check(a:\
    \ \"himenss\", b: \"simen\")\n/// true\nfunc cycpattern_check(a: String, b: String)\
    \ -> Bool {\n    let a = Array(a)\n    let b = Array(b)\n    let n = a.count\n\
    \    let m = b.count\n    if n < m {\n        return false\n    }\n    var i =\
    \ 0\n    var j = 0\n    while i < n {\n        if a[i] == b[j] {\n           \
    \ j += 1\n            if j == m {\n                return true\n            }\n\
    \        } else {\n            j = 0\n        }\n        i += 1\n    }\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(cycpattern_check(a: \"\
    xyzw\", b: \"xyw\") == false)\nassert(cycpattern_check(a: \"yello\", b: \"ell\"\
    ) == true)\nassert(cycpattern_check(a: \"whattup\", b: \"ptut\") == false)\nassert(cycpattern_check(a:\
    \ \"efef\", b: \"fee\") == true)\nassert(cycpattern_check(a: \"abab\", b: \"aabb\"\
    ) == false)\nassert(cycpattern_check(a: \"winemtt\", b: \"tinem\") == true)"
  status: Exception
  stderr: 'tmp9ia2um0z/tmp9ia2um0z.swift:55: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b54c2047c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b54c1d3eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b54c1d3e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b54c1d3d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9ia2um0z                        0x000055e0b938f7a5 <unavailable> + 6053

    5    libc.so.6                          0x00002b54c2233460 __libc_start_main +
    245

    6    tmp9ia2um0z                        0x000055e0b938f109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1659824845
- exit_code: -4
  program: "\n/// You are given 2 words. You need to return true if the second word\
    \ or any of its rotations is a substring in the first word\n/// >>> cycpattern_check(a:\
    \ \"abcd\", b: \"abd\")\n/// false\n/// >>> cycpattern_check(a: \"hello\", b:\
    \ \"ell\")\n/// true\n/// >>> cycpattern_check(a: \"whassup\", b: \"psus\")\n\
    /// false\n/// >>> cycpattern_check(a: \"abab\", b: \"baa\")\n/// true\n/// >>>\
    \ cycpattern_check(a: \"efef\", b: \"eeff\")\n/// false\n/// >>> cycpattern_check(a:\
    \ \"himenss\", b: \"simen\")\n/// true\nfunc cycpattern_check(a: String, b: String)\
    \ -> Bool {\n    guard a.count > b.count else { return false }\n    let a = Array(a)\n\
    \    let b = Array(b)\n    var b_index = 0\n    for a_index in 0..<a.count {\n\
    \        if a[a_index] == b[b_index] {\n            b_index += 1\n           \
    \ if b_index == b.count {\n                return true\n            }\n      \
    \  } else {\n            b_index = 0\n        }\n    }\n    return false\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(cycpattern_check(a: \"xyzw\", b: \"xyw\") == false)\n\
    assert(cycpattern_check(a: \"yello\", b: \"ell\") == true)\nassert(cycpattern_check(a:\
    \ \"whattup\", b: \"ptut\") == false)\nassert(cycpattern_check(a: \"efef\", b:\
    \ \"fee\") == true)\nassert(cycpattern_check(a: \"abab\", b: \"aabb\") == false)\n\
    assert(cycpattern_check(a: \"winemtt\", b: \"tinem\") == true)"
  status: Exception
  stderr: 'tmpturj0jun/tmpturj0jun.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae4445b4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae4442abb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae4442ab988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae4442aa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpturj0jun                        0x0000556cbd2c0975 <unavailable> + 6517

    5    libc.so.6                          0x00002ae4447a0460 __libc_start_main +
    245

    6    tmpturj0jun                        0x0000556cbd2c02d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1659824845
- exit_code: -4
  program: "\n/// You are given 2 words. You need to return true if the second word\
    \ or any of its rotations is a substring in the first word\n/// >>> cycpattern_check(a:\
    \ \"abcd\", b: \"abd\")\n/// false\n/// >>> cycpattern_check(a: \"hello\", b:\
    \ \"ell\")\n/// true\n/// >>> cycpattern_check(a: \"whassup\", b: \"psus\")\n\
    /// false\n/// >>> cycpattern_check(a: \"abab\", b: \"baa\")\n/// true\n/// >>>\
    \ cycpattern_check(a: \"efef\", b: \"eeff\")\n/// false\n/// >>> cycpattern_check(a:\
    \ \"himenss\", b: \"simen\")\n/// true\nfunc cycpattern_check(a: String, b: String)\
    \ -> Bool {\n    var a = a\n    var b = b\n    if a.count != b.count {\n     \
    \   return false\n    }\n    for _ in 0..<a.count {\n        if a.contains(b)\
    \ {\n            return true\n        }\n        a.append(a.removeFirst())\n \
    \   }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(cycpattern_check(a:\
    \ \"xyzw\", b: \"xyw\") == false)\nassert(cycpattern_check(a: \"yello\", b: \"\
    ell\") == true)\nassert(cycpattern_check(a: \"whattup\", b: \"ptut\") == false)\n\
    assert(cycpattern_check(a: \"efef\", b: \"fee\") == true)\nassert(cycpattern_check(a:\
    \ \"abab\", b: \"aabb\") == false)\nassert(cycpattern_check(a: \"winemtt\", b:\
    \ \"tinem\") == true)"
  status: Exception
  stderr: 'tmp6vjt88wd/tmp6vjt88wd.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b05ca280c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b05c9f77b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b05c9f77988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b05c9f767b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6vjt88wd                        0x00005578f7567721 <unavailable> + 5921

    5    libc.so.6                          0x00002b05ca46c460 __libc_start_main +
    245

    6    tmp6vjt88wd                        0x00005578f7567299 <unavailable> + 4761

    '
  stdout: ''
  timestamp: 1659824845
- exit_code: 1
  program: "\n/// You are given 2 words. You need to return true if the second word\
    \ or any of its rotations is a substring in the first word\n/// >>> cycpattern_check(a:\
    \ \"abcd\", b: \"abd\")\n/// false\n/// >>> cycpattern_check(a: \"hello\", b:\
    \ \"ell\")\n/// true\n/// >>> cycpattern_check(a: \"whassup\", b: \"psus\")\n\
    /// false\n/// >>> cycpattern_check(a: \"abab\", b: \"baa\")\n/// true\n/// >>>\
    \ cycpattern_check(a: \"efef\", b: \"eeff\")\n/// false\n/// >>> cycpattern_check(a:\
    \ \"himenss\", b: \"simen\")\n/// true\nfunc cycpattern_check(a: String, b: String)\
    \ -> Bool {\n    if a.count != b.count {\n        return false\n    }\n    var\
    \ a = a\n    for _ in 0..<a.count {\n        if a.contains(b) {\n            return\
    \ true\n        }\n        a = a.rotate()\n    }\n    return false\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(cycpattern_check(a: \"xyzw\", b: \"xyw\") == false)\n\
    assert(cycpattern_check(a: \"yello\", b: \"ell\") == true)\nassert(cycpattern_check(a:\
    \ \"whattup\", b: \"ptut\") == false)\nassert(cycpattern_check(a: \"efef\", b:\
    \ \"fee\") == true)\nassert(cycpattern_check(a: \"abab\", b: \"aabb\") == false)\n\
    assert(cycpattern_check(a: \"winemtt\", b: \"tinem\") == true)"
  status: SyntaxError
  stderr: "/tmp/tmp_s7yytal.swift:24:15: error: value of type 'String' has no member\
    \ 'rotate'\n        a = a.rotate()\n            ~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824845
- exit_code: -4
  program: "\n/// You are given 2 words. You need to return true if the second word\
    \ or any of its rotations is a substring in the first word\n/// >>> cycpattern_check(a:\
    \ \"abcd\", b: \"abd\")\n/// false\n/// >>> cycpattern_check(a: \"hello\", b:\
    \ \"ell\")\n/// true\n/// >>> cycpattern_check(a: \"whassup\", b: \"psus\")\n\
    /// false\n/// >>> cycpattern_check(a: \"abab\", b: \"baa\")\n/// true\n/// >>>\
    \ cycpattern_check(a: \"efef\", b: \"eeff\")\n/// false\n/// >>> cycpattern_check(a:\
    \ \"himenss\", b: \"simen\")\n/// true\nfunc cycpattern_check(a: String, b: String)\
    \ -> Bool {\n    let a = Array(a)\n    let b = Array(b)\n    var i = 0\n    var\
    \ j = 0\n    while i < a.count {\n        if a[i] == b[j] {\n            j +=\
    \ 1\n            if j == b.count {\n                return true\n            }\n\
    \        } else {\n            j = 0\n        }\n        i += 1\n    }\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(cycpattern_check(a: \"\
    xyzw\", b: \"xyw\") == false)\nassert(cycpattern_check(a: \"yello\", b: \"ell\"\
    ) == true)\nassert(cycpattern_check(a: \"whattup\", b: \"ptut\") == false)\nassert(cycpattern_check(a:\
    \ \"efef\", b: \"fee\") == true)\nassert(cycpattern_check(a: \"abab\", b: \"aabb\"\
    ) == false)\nassert(cycpattern_check(a: \"winemtt\", b: \"tinem\") == true)"
  status: Exception
  stderr: 'tmpgp6hxsz9/tmpgp6hxsz9.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2f8f9b7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2f8f6aeb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2f8f6ae988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2f8f6ad7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgp6hxsz9                        0x000055cd698ca7a5 <unavailable> + 6053

    5    libc.so.6                          0x00002b2f8fba3460 __libc_start_main +
    245

    6    tmpgp6hxsz9                        0x000055cd698ca109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1659824845
- exit_code: -4
  program: "\n/// You are given 2 words. You need to return true if the second word\
    \ or any of its rotations is a substring in the first word\n/// >>> cycpattern_check(a:\
    \ \"abcd\", b: \"abd\")\n/// false\n/// >>> cycpattern_check(a: \"hello\", b:\
    \ \"ell\")\n/// true\n/// >>> cycpattern_check(a: \"whassup\", b: \"psus\")\n\
    /// false\n/// >>> cycpattern_check(a: \"abab\", b: \"baa\")\n/// true\n/// >>>\
    \ cycpattern_check(a: \"efef\", b: \"eeff\")\n/// false\n/// >>> cycpattern_check(a:\
    \ \"himenss\", b: \"simen\")\n/// true\nfunc cycpattern_check(a: String, b: String)\
    \ -> Bool {\n    let a = Array(a)\n    let b = Array(b)\n    let n = a.count\n\
    \    let m = b.count\n    var i = 0\n    var j = 0\n    while i < n {\n      \
    \  if a[i] == b[j] {\n            i += 1\n            j += 1\n            if j\
    \ == m {\n                return true\n            }\n        } else {\n     \
    \       i = i - j + 1\n            j = 0\n        }\n    }\n    return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(cycpattern_check(a: \"xyzw\", b: \"xyw\") == false)\n\
    assert(cycpattern_check(a: \"yello\", b: \"ell\") == true)\nassert(cycpattern_check(a:\
    \ \"whattup\", b: \"ptut\") == false)\nassert(cycpattern_check(a: \"efef\", b:\
    \ \"fee\") == true)\nassert(cycpattern_check(a: \"abab\", b: \"aabb\") == false)\n\
    assert(cycpattern_check(a: \"winemtt\", b: \"tinem\") == true)"
  status: Exception
  stderr: 'tmpqss69acj/tmpqss69acj.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba188107c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba187dfeb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba187dfe988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba187dfd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqss69acj                        0x00005570446fa7a5 <unavailable> + 6053

    5    libc.so.6                          0x00002ba1882f3460 __libc_start_main +
    245

    6    tmpqss69acj                        0x00005570446fa109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1659824845
- exit_code: -4
  program: "\n/// You are given 2 words. You need to return true if the second word\
    \ or any of its rotations is a substring in the first word\n/// >>> cycpattern_check(a:\
    \ \"abcd\", b: \"abd\")\n/// false\n/// >>> cycpattern_check(a: \"hello\", b:\
    \ \"ell\")\n/// true\n/// >>> cycpattern_check(a: \"whassup\", b: \"psus\")\n\
    /// false\n/// >>> cycpattern_check(a: \"abab\", b: \"baa\")\n/// true\n/// >>>\
    \ cycpattern_check(a: \"efef\", b: \"eeff\")\n/// false\n/// >>> cycpattern_check(a:\
    \ \"himenss\", b: \"simen\")\n/// true\nfunc cycpattern_check(a: String, b: String)\
    \ -> Bool {\n    var b = b\n    for _ in 0..<b.count {\n        if a.contains(b)\
    \ {\n            return true\n        }\n        b.append(b.removeFirst())\n \
    \   }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(cycpattern_check(a:\
    \ \"xyzw\", b: \"xyw\") == false)\nassert(cycpattern_check(a: \"yello\", b: \"\
    ell\") == true)\nassert(cycpattern_check(a: \"whattup\", b: \"ptut\") == false)\n\
    assert(cycpattern_check(a: \"efef\", b: \"fee\") == true)\nassert(cycpattern_check(a:\
    \ \"abab\", b: \"aabb\") == false)\nassert(cycpattern_check(a: \"winemtt\", b:\
    \ \"tinem\") == true)"
  status: Exception
  stderr: 'Swift/Substring.swift:316: Fatal error: String index is out of bounds

    Current stack trace:

    0    libswiftCore.so                    0x00002ba9518f5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba9515ec561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ba9515ec286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ba9515ec13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ba9515ebbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftCore.so                    0x00002ba951746e40 Substring.index(_:offsetBy:)
    + 880

    6    libswiftCore.so                    0x00002ba95174b85c <unavailable> + 2873436

    7    libswiftCore.so                    0x00002ba951618920 Collection.formIndex(_:offsetBy:)
    + 116

    8    libswift_StringProcessing.so       0x00002ba9512d3b82 <unavailable> + 285570

    9    libswift_StringProcessing.so       0x00002ba9512d2b2f <unavailable> + 281391

    10   libswift_StringProcessing.so       0x00002ba9512d3ced <unavailable> + 285933

    11   libswift_StringProcessing.so       0x00002ba9512b942d <unavailable> + 177197

    12   libswift_StringProcessing.so       0x00002ba9512b7840 BidirectionalCollection<>.firstRange<A>(of:)
    + 1517

    13   libswift_StringProcessing.so       0x00002ba9512b7e70 StringProtocol.contains(_:)
    + 64

    14   tmpxxc0g7sv                        0x000055fb90321d4d <unavailable> + 7501

    15   tmpxxc0g7sv                        0x000055fb903215c5 <unavailable> + 5573

    16   libc.so.6                          0x00002ba951ae1460 __libc_start_main +
    245

    17   tmpxxc0g7sv                        0x000055fb90321299 <unavailable> + 4761

    '
  stdout: ''
  timestamp: 1659824845
- exit_code: -4
  program: "\n/// You are given 2 words. You need to return true if the second word\
    \ or any of its rotations is a substring in the first word\n/// >>> cycpattern_check(a:\
    \ \"abcd\", b: \"abd\")\n/// false\n/// >>> cycpattern_check(a: \"hello\", b:\
    \ \"ell\")\n/// true\n/// >>> cycpattern_check(a: \"whassup\", b: \"psus\")\n\
    /// false\n/// >>> cycpattern_check(a: \"abab\", b: \"baa\")\n/// true\n/// >>>\
    \ cycpattern_check(a: \"efef\", b: \"eeff\")\n/// false\n/// >>> cycpattern_check(a:\
    \ \"himenss\", b: \"simen\")\n/// true\nfunc cycpattern_check(a: String, b: String)\
    \ -> Bool {\n    var a = a\n    var b = b\n    if a.count < b.count {\n      \
    \  return false\n    }\n    if a.contains(b) {\n        return true\n    }\n \
    \   for _ in 0..<a.count {\n        a.insert(a.removeFirst(), at: a.endIndex)\n\
    \        if a.contains(b) {\n            return true\n        }\n    }\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(cycpattern_check(a: \"\
    xyzw\", b: \"xyw\") == false)\nassert(cycpattern_check(a: \"yello\", b: \"ell\"\
    ) == true)\nassert(cycpattern_check(a: \"whattup\", b: \"ptut\") == false)\nassert(cycpattern_check(a:\
    \ \"efef\", b: \"fee\") == true)\nassert(cycpattern_check(a: \"abab\", b: \"aabb\"\
    ) == false)\nassert(cycpattern_check(a: \"winemtt\", b: \"tinem\") == true)"
  status: Exception
  stderr: 'Swift/Substring.swift:316: Fatal error: String index is out of bounds

    Current stack trace:

    0    libswiftCore.so                    0x00002aab914a7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aab9119e561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002aab9119e286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002aab9119e13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002aab9119dbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftCore.so                    0x00002aab912f8e40 Substring.index(_:offsetBy:)
    + 880

    6    libswiftCore.so                    0x00002aab912fd85c <unavailable> + 2873436

    7    libswiftCore.so                    0x00002aab911ca920 Collection.formIndex(_:offsetBy:)
    + 116

    8    libswift_StringProcessing.so       0x00002aab90e85b82 <unavailable> + 285570

    9    libswift_StringProcessing.so       0x00002aab90e84b2f <unavailable> + 281391

    10   libswift_StringProcessing.so       0x00002aab90e85ced <unavailable> + 285933

    11   libswift_StringProcessing.so       0x00002aab90e6b42d <unavailable> + 177197

    12   libswift_StringProcessing.so       0x00002aab90e69840 BidirectionalCollection<>.firstRange<A>(of:)
    + 1517

    13   libswift_StringProcessing.so       0x00002aab90e69e70 StringProtocol.contains(_:)
    + 64

    14   tmpdpy65qjp                        0x0000558dac99fddb <unavailable> + 7643

    15   tmpdpy65qjp                        0x0000558dac99f625 <unavailable> + 5669

    16   libc.so.6                          0x00002aab91693460 __libc_start_main +
    245

    17   tmpdpy65qjp                        0x0000558dac99f2f9 <unavailable> + 4857

    '
  stdout: ''
  timestamp: 1659824845
- exit_code: -4
  program: "\n/// You are given 2 words. You need to return true if the second word\
    \ or any of its rotations is a substring in the first word\n/// >>> cycpattern_check(a:\
    \ \"abcd\", b: \"abd\")\n/// false\n/// >>> cycpattern_check(a: \"hello\", b:\
    \ \"ell\")\n/// true\n/// >>> cycpattern_check(a: \"whassup\", b: \"psus\")\n\
    /// false\n/// >>> cycpattern_check(a: \"abab\", b: \"baa\")\n/// true\n/// >>>\
    \ cycpattern_check(a: \"efef\", b: \"eeff\")\n/// false\n/// >>> cycpattern_check(a:\
    \ \"himenss\", b: \"simen\")\n/// true\nfunc cycpattern_check(a: String, b: String)\
    \ -> Bool {\n    if a.count < b.count {\n        return false\n    }\n    let\
    \ a = Array(a)\n    let b = Array(b)\n    for i in 0..<a.count {\n        if a[i]\
    \ == b[0] {\n            var j = i\n            var k = 0\n            while j\
    \ < a.count && k < b.count && a[j] == b[k] {\n                j += 1\n       \
    \         k += 1\n            }\n            if k == b.count {\n             \
    \   return true\n            }\n            if j == a.count {\n              \
    \  j = 0\n            }\n            while j < i && k < b.count && a[j] == b[k]\
    \ {\n                j += 1\n                k += 1\n            }\n         \
    \   if k == b.count {\n                return true\n            }\n        }\n\
    \    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(cycpattern_check(a:\
    \ \"xyzw\", b: \"xyw\") == false)\nassert(cycpattern_check(a: \"yello\", b: \"\
    ell\") == true)\nassert(cycpattern_check(a: \"whattup\", b: \"ptut\") == false)\n\
    assert(cycpattern_check(a: \"efef\", b: \"fee\") == true)\nassert(cycpattern_check(a:\
    \ \"abab\", b: \"aabb\") == false)\nassert(cycpattern_check(a: \"winemtt\", b:\
    \ \"tinem\") == true)"
  status: Exception
  stderr: 'tmpl2yqxisn/tmpl2yqxisn.swift:63: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4f25cfec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4f259f5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4f259f5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4f259f47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpl2yqxisn                        0x000055e3790189c5 <unavailable> + 6597

    5    libc.so.6                          0x00002b4f25eea460 __libc_start_main +
    245

    6    tmpl2yqxisn                        0x000055e379018329 <unavailable> + 4905

    '
  stdout: ''
  timestamp: 1659824845
- exit_code: -4
  program: "\n/// You are given 2 words. You need to return true if the second word\
    \ or any of its rotations is a substring in the first word\n/// >>> cycpattern_check(a:\
    \ \"abcd\", b: \"abd\")\n/// false\n/// >>> cycpattern_check(a: \"hello\", b:\
    \ \"ell\")\n/// true\n/// >>> cycpattern_check(a: \"whassup\", b: \"psus\")\n\
    /// false\n/// >>> cycpattern_check(a: \"abab\", b: \"baa\")\n/// true\n/// >>>\
    \ cycpattern_check(a: \"efef\", b: \"eeff\")\n/// false\n/// >>> cycpattern_check(a:\
    \ \"himenss\", b: \"simen\")\n/// true\nfunc cycpattern_check(a: String, b: String)\
    \ -> Bool {\n    if a.count < b.count {\n        return false\n    }\n    let\
    \ a = Array(a)\n    let b = Array(b)\n    var i = 0\n    while i < a.count {\n\
    \        if a[i] == b[0] {\n            var j = 1\n            while j < b.count\
    \ {\n                if a[(i + j) % a.count] != b[j] {\n                    break\n\
    \                }\n                j += 1\n            }\n            if j ==\
    \ b.count {\n                return true\n            }\n        }\n        i\
    \ += 1\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(cycpattern_check(a:\
    \ \"xyzw\", b: \"xyw\") == false)\nassert(cycpattern_check(a: \"yello\", b: \"\
    ell\") == true)\nassert(cycpattern_check(a: \"whattup\", b: \"ptut\") == false)\n\
    assert(cycpattern_check(a: \"efef\", b: \"fee\") == true)\nassert(cycpattern_check(a:\
    \ \"abab\", b: \"aabb\") == false)\nassert(cycpattern_check(a: \"winemtt\", b:\
    \ \"tinem\") == true)"
  status: Exception
  stderr: 'tmprbfcmg0l/tmprbfcmg0l.swift:56: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7001807c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b70014feb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b70014fe988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b70014fd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprbfcmg0l                        0x0000565073e8e885 <unavailable> + 6277

    5    libc.so.6                          0x00002b70019f3460 __libc_start_main +
    245

    6    tmprbfcmg0l                        0x0000565073e8e1e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659824845
- exit_code: 1
  program: "\n/// You are given 2 words. You need to return true if the second word\
    \ or any of its rotations is a substring in the first word\n/// >>> cycpattern_check(a:\
    \ \"abcd\", b: \"abd\")\n/// false\n/// >>> cycpattern_check(a: \"hello\", b:\
    \ \"ell\")\n/// true\n/// >>> cycpattern_check(a: \"whassup\", b: \"psus\")\n\
    /// false\n/// >>> cycpattern_check(a: \"abab\", b: \"baa\")\n/// true\n/// >>>\
    \ cycpattern_check(a: \"efef\", b: \"eeff\")\n/// false\n/// >>> cycpattern_check(a:\
    \ \"himenss\", b: \"simen\")\n/// true\nfunc cycpattern_check(a: String, b: String)\
    \ -> Bool {\n    if a.count < b.count {\n        return false\n    }\n    var\
    \ b = b\n    for _ in 0..<a.count {\n        if a.contains(b) {\n            return\
    \ true\n        }\n        b = b.rotate()\n    }\n    return false\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(cycpattern_check(a: \"xyzw\", b: \"xyw\") == false)\n\
    assert(cycpattern_check(a: \"yello\", b: \"ell\") == true)\nassert(cycpattern_check(a:\
    \ \"whattup\", b: \"ptut\") == false)\nassert(cycpattern_check(a: \"efef\", b:\
    \ \"fee\") == true)\nassert(cycpattern_check(a: \"abab\", b: \"aabb\") == false)\n\
    assert(cycpattern_check(a: \"winemtt\", b: \"tinem\") == true)"
  status: SyntaxError
  stderr: "/tmp/tmp5byby_bo.swift:24:15: error: value of type 'String' has no member\
    \ 'rotate'\n        b = b.rotate()\n            ~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824845
- exit_code: -4
  program: "\n/// You are given 2 words. You need to return true if the second word\
    \ or any of its rotations is a substring in the first word\n/// >>> cycpattern_check(a:\
    \ \"abcd\", b: \"abd\")\n/// false\n/// >>> cycpattern_check(a: \"hello\", b:\
    \ \"ell\")\n/// true\n/// >>> cycpattern_check(a: \"whassup\", b: \"psus\")\n\
    /// false\n/// >>> cycpattern_check(a: \"abab\", b: \"baa\")\n/// true\n/// >>>\
    \ cycpattern_check(a: \"efef\", b: \"eeff\")\n/// false\n/// >>> cycpattern_check(a:\
    \ \"himenss\", b: \"simen\")\n/// true\nfunc cycpattern_check(a: String, b: String)\
    \ -> Bool {\n    if a.count != b.count {\n        return false\n    }\n    let\
    \ a = a.map { String($0) }\n    let b = b.map { String($0) }\n    var b_rot =\
    \ b\n    for _ in 0..<b.count {\n        if a.contains(b_rot) {\n            return\
    \ true\n        }\n        b_rot.append(b_rot.removeFirst())\n    }\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(cycpattern_check(a: \"\
    xyzw\", b: \"xyw\") == false)\nassert(cycpattern_check(a: \"yello\", b: \"ell\"\
    ) == true)\nassert(cycpattern_check(a: \"whattup\", b: \"ptut\") == false)\nassert(cycpattern_check(a:\
    \ \"efef\", b: \"fee\") == true)\nassert(cycpattern_check(a: \"abab\", b: \"aabb\"\
    ) == false)\nassert(cycpattern_check(a: \"winemtt\", b: \"tinem\") == true)"
  status: Exception
  stderr: 'tmpv8bkgr95/tmpv8bkgr95.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba78290fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba782606b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba782606988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba7826057b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpv8bkgr95                        0x000055d214e1a921 <unavailable> + 6433

    5    libc.so.6                          0x00002ba782afb460 __libc_start_main +
    245

    6    tmpv8bkgr95                        0x000055d214e1a499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1659824845
- exit_code: -4
  program: "\n/// You are given 2 words. You need to return true if the second word\
    \ or any of its rotations is a substring in the first word\n/// >>> cycpattern_check(a:\
    \ \"abcd\", b: \"abd\")\n/// false\n/// >>> cycpattern_check(a: \"hello\", b:\
    \ \"ell\")\n/// true\n/// >>> cycpattern_check(a: \"whassup\", b: \"psus\")\n\
    /// false\n/// >>> cycpattern_check(a: \"abab\", b: \"baa\")\n/// true\n/// >>>\
    \ cycpattern_check(a: \"efef\", b: \"eeff\")\n/// false\n/// >>> cycpattern_check(a:\
    \ \"himenss\", b: \"simen\")\n/// true\nfunc cycpattern_check(a: String, b: String)\
    \ -> Bool {\n    let a = a.lowercased()\n    let b = b.lowercased()\n    if a.count\
    \ < b.count { return false }\n    let b_first_char = b.first!\n    let b_last_char\
    \ = b.last!\n    let b_first_index = a.firstIndex(of: b_first_char)!\n    let\
    \ b_last_index = a.lastIndex(of: b_last_char)!\n    if b_first_index > b_last_index\
    \ {\n        let a_sub = a[b_first_index...] + a[..<b_last_index]\n        return\
    \ a_sub.contains(b)\n    } else {\n        let a_sub = a[b_first_index...b_last_index]\n\
    \        return a_sub.contains(b)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(cycpattern_check(a: \"xyzw\", b: \"xyw\") == false)\nassert(cycpattern_check(a:\
    \ \"yello\", b: \"ell\") == true)\nassert(cycpattern_check(a: \"whattup\", b:\
    \ \"ptut\") == false)\nassert(cycpattern_check(a: \"efef\", b: \"fee\") == true)\n\
    assert(cycpattern_check(a: \"abab\", b: \"aabb\") == false)\nassert(cycpattern_check(a:\
    \ \"winemtt\", b: \"tinem\") == true)"
  status: Exception
  stderr: 'Swift/Substring.swift:316: Fatal error: String index is out of bounds

    Current stack trace:

    0    libswiftCore.so                    0x00002b9f0a85cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9f0a553561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b9f0a553286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b9f0a55313c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b9f0a552bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftCore.so                    0x00002b9f0a6ade40 Substring.index(_:offsetBy:)
    + 880

    6    libswiftCore.so                    0x00002b9f0a6b285c <unavailable> + 2873436

    7    libswiftCore.so                    0x00002b9f0a57f920 Collection.formIndex(_:offsetBy:)
    + 116

    8    libswift_StringProcessing.so       0x00002b9f0a23ab82 <unavailable> + 285570

    9    libswift_StringProcessing.so       0x00002b9f0a239b2f <unavailable> + 281391

    10   libswift_StringProcessing.so       0x00002b9f0a23aced <unavailable> + 285933

    11   libswift_StringProcessing.so       0x00002b9f0a22042d <unavailable> + 177197

    12   libswift_StringProcessing.so       0x00002b9f0a21e840 BidirectionalCollection<>.firstRange<A>(of:)
    + 1517

    13   libswift_StringProcessing.so       0x00002b9f0a21ee70 StringProtocol.contains(_:)
    + 64

    14   tmppv325rmf                        0x00005605b0198bcb <unavailable> + 11211

    15   tmppv325rmf                        0x00005605b0197a75 <unavailable> + 6773

    16   libc.so.6                          0x00002b9f0aa48460 __libc_start_main +
    245

    17   tmppv325rmf                        0x00005605b0197749 <unavailable> + 5961

    '
  stdout: ''
  timestamp: 1659824845
- exit_code: -4
  program: "\n/// You are given 2 words. You need to return true if the second word\
    \ or any of its rotations is a substring in the first word\n/// >>> cycpattern_check(a:\
    \ \"abcd\", b: \"abd\")\n/// false\n/// >>> cycpattern_check(a: \"hello\", b:\
    \ \"ell\")\n/// true\n/// >>> cycpattern_check(a: \"whassup\", b: \"psus\")\n\
    /// false\n/// >>> cycpattern_check(a: \"abab\", b: \"baa\")\n/// true\n/// >>>\
    \ cycpattern_check(a: \"efef\", b: \"eeff\")\n/// false\n/// >>> cycpattern_check(a:\
    \ \"himenss\", b: \"simen\")\n/// true\nfunc cycpattern_check(a: String, b: String)\
    \ -> Bool {\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(cycpattern_check(a:\
    \ \"xyzw\", b: \"xyw\") == false)\nassert(cycpattern_check(a: \"yello\", b: \"\
    ell\") == true)\nassert(cycpattern_check(a: \"whattup\", b: \"ptut\") == false)\n\
    assert(cycpattern_check(a: \"efef\", b: \"fee\") == true)\nassert(cycpattern_check(a:\
    \ \"abab\", b: \"aabb\") == false)\nassert(cycpattern_check(a: \"winemtt\", b:\
    \ \"tinem\") == true)"
  status: Exception
  stderr: 'tmp5ngt0b9p/tmp5ngt0b9p.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5997ce8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b59979dfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b59979df988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b59979de7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5ngt0b9p                        0x00005609c2f0a371 <unavailable> + 4977

    5    libc.so.6                          0x00002b5997ed4460 __libc_start_main +
    245

    6    tmp5ngt0b9p                        0x00005609c2f09ee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1659824845
- exit_code: -4
  program: "\n/// You are given 2 words. You need to return true if the second word\
    \ or any of its rotations is a substring in the first word\n/// >>> cycpattern_check(a:\
    \ \"abcd\", b: \"abd\")\n/// false\n/// >>> cycpattern_check(a: \"hello\", b:\
    \ \"ell\")\n/// true\n/// >>> cycpattern_check(a: \"whassup\", b: \"psus\")\n\
    /// false\n/// >>> cycpattern_check(a: \"abab\", b: \"baa\")\n/// true\n/// >>>\
    \ cycpattern_check(a: \"efef\", b: \"eeff\")\n/// false\n/// >>> cycpattern_check(a:\
    \ \"himenss\", b: \"simen\")\n/// true\nfunc cycpattern_check(a: String, b: String)\
    \ -> Bool {\n    let a = Array(a)\n    let b = Array(b)\n    let b_length = b.count\n\
    \    for i in 0..<a.count {\n        if a[i] == b[0] {\n            var j = 1\n\
    \            while j < b_length && a[(i + j) % a.count] == b[j] {\n          \
    \      j += 1\n            }\n            if j == b_length {\n               \
    \ return true\n            }\n        }\n    }\n    return false\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(cycpattern_check(a: \"xyzw\", b: \"xyw\") == false)\n\
    assert(cycpattern_check(a: \"yello\", b: \"ell\") == true)\nassert(cycpattern_check(a:\
    \ \"whattup\", b: \"ptut\") == false)\nassert(cycpattern_check(a: \"efef\", b:\
    \ \"fee\") == true)\nassert(cycpattern_check(a: \"abab\", b: \"aabb\") == false)\n\
    assert(cycpattern_check(a: \"winemtt\", b: \"tinem\") == true)"
  status: Exception
  stderr: 'tmp7358llkt/tmp7358llkt.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b61988a5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b619859cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b619859c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b619859b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7358llkt                        0x000055f305c70975 <unavailable> + 6517

    5    libc.so.6                          0x00002b6198a91460 __libc_start_main +
    245

    6    tmp7358llkt                        0x000055f305c702d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1659824846
- exit_code: -4
  program: "\n/// You are given 2 words. You need to return true if the second word\
    \ or any of its rotations is a substring in the first word\n/// >>> cycpattern_check(a:\
    \ \"abcd\", b: \"abd\")\n/// false\n/// >>> cycpattern_check(a: \"hello\", b:\
    \ \"ell\")\n/// true\n/// >>> cycpattern_check(a: \"whassup\", b: \"psus\")\n\
    /// false\n/// >>> cycpattern_check(a: \"abab\", b: \"baa\")\n/// true\n/// >>>\
    \ cycpattern_check(a: \"efef\", b: \"eeff\")\n/// false\n/// >>> cycpattern_check(a:\
    \ \"himenss\", b: \"simen\")\n/// true\nfunc cycpattern_check(a: String, b: String)\
    \ -> Bool {\n    guard a.count >= b.count else { return false }\n    let b = b\
    \ + b\n    return b.contains(a)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(cycpattern_check(a:\
    \ \"xyzw\", b: \"xyw\") == false)\nassert(cycpattern_check(a: \"yello\", b: \"\
    ell\") == true)\nassert(cycpattern_check(a: \"whattup\", b: \"ptut\") == false)\n\
    assert(cycpattern_check(a: \"efef\", b: \"fee\") == true)\nassert(cycpattern_check(a:\
    \ \"abab\", b: \"aabb\") == false)\nassert(cycpattern_check(a: \"winemtt\", b:\
    \ \"tinem\") == true)"
  status: Exception
  stderr: 'Swift/Substring.swift:316: Fatal error: String index is out of bounds

    Current stack trace:

    0    libswiftCore.so                    0x00002b383fa00c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b383f6f7561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b383f6f7286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b383f6f713c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b383f6f6bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftCore.so                    0x00002b383f851e40 Substring.index(_:offsetBy:)
    + 880

    6    libswiftCore.so                    0x00002b383f85685c <unavailable> + 2873436

    7    libswiftCore.so                    0x00002b383f723920 Collection.formIndex(_:offsetBy:)
    + 116

    8    libswift_StringProcessing.so       0x00002b383f3deb82 <unavailable> + 285570

    9    libswift_StringProcessing.so       0x00002b383f3ddb2f <unavailable> + 281391

    10   libswift_StringProcessing.so       0x00002b383f3deced <unavailable> + 285933

    11   libswift_StringProcessing.so       0x00002b383f3c442d <unavailable> + 177197

    12   libswift_StringProcessing.so       0x00002b383f3c2840 BidirectionalCollection<>.firstRange<A>(of:)
    + 1517

    13   libswift_StringProcessing.so       0x00002b383f3c2e70 StringProtocol.contains(_:)
    + 64

    14   tmp64rhm_p_                        0x00005578c812aa1c <unavailable> + 6684

    15   tmp64rhm_p_                        0x00005578c812a3a5 <unavailable> + 5029

    16   libc.so.6                          0x00002b383fbec460 __libc_start_main +
    245

    17   tmp64rhm_p_                        0x00005578c812a079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1659824846
- exit_code: -4
  program: "\n/// You are given 2 words. You need to return true if the second word\
    \ or any of its rotations is a substring in the first word\n/// >>> cycpattern_check(a:\
    \ \"abcd\", b: \"abd\")\n/// false\n/// >>> cycpattern_check(a: \"hello\", b:\
    \ \"ell\")\n/// true\n/// >>> cycpattern_check(a: \"whassup\", b: \"psus\")\n\
    /// false\n/// >>> cycpattern_check(a: \"abab\", b: \"baa\")\n/// true\n/// >>>\
    \ cycpattern_check(a: \"efef\", b: \"eeff\")\n/// false\n/// >>> cycpattern_check(a:\
    \ \"himenss\", b: \"simen\")\n/// true\nfunc cycpattern_check(a: String, b: String)\
    \ -> Bool {\n    var b = b\n    for _ in 0..<b.count {\n        if a.contains(b)\
    \ {\n            return true\n        }\n        b.append(b.removeFirst())\n \
    \   }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(cycpattern_check(a:\
    \ \"xyzw\", b: \"xyw\") == false)\nassert(cycpattern_check(a: \"yello\", b: \"\
    ell\") == true)\nassert(cycpattern_check(a: \"whattup\", b: \"ptut\") == false)\n\
    assert(cycpattern_check(a: \"efef\", b: \"fee\") == true)\nassert(cycpattern_check(a:\
    \ \"abab\", b: \"aabb\") == false)\nassert(cycpattern_check(a: \"winemtt\", b:\
    \ \"tinem\") == true)"
  status: Exception
  stderr: 'Swift/Substring.swift:316: Fatal error: String index is out of bounds

    Current stack trace:

    0    libswiftCore.so                    0x00002ba9518f5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba9515ec561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ba9515ec286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ba9515ec13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ba9515ebbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftCore.so                    0x00002ba951746e40 Substring.index(_:offsetBy:)
    + 880

    6    libswiftCore.so                    0x00002ba95174b85c <unavailable> + 2873436

    7    libswiftCore.so                    0x00002ba951618920 Collection.formIndex(_:offsetBy:)
    + 116

    8    libswift_StringProcessing.so       0x00002ba9512d3b82 <unavailable> + 285570

    9    libswift_StringProcessing.so       0x00002ba9512d2b2f <unavailable> + 281391

    10   libswift_StringProcessing.so       0x00002ba9512d3ced <unavailable> + 285933

    11   libswift_StringProcessing.so       0x00002ba9512b942d <unavailable> + 177197

    12   libswift_StringProcessing.so       0x00002ba9512b7840 BidirectionalCollection<>.firstRange<A>(of:)
    + 1517

    13   libswift_StringProcessing.so       0x00002ba9512b7e70 StringProtocol.contains(_:)
    + 64

    14   tmpxxc0g7sv                        0x000055fb90321d4d <unavailable> + 7501

    15   tmpxxc0g7sv                        0x000055fb903215c5 <unavailable> + 5573

    16   libc.so.6                          0x00002ba951ae1460 __libc_start_main +
    245

    17   tmpxxc0g7sv                        0x000055fb90321299 <unavailable> + 4761

    '
  stdout: ''
  timestamp: 1659824845
- exit_code: -4
  program: "\n/// You are given 2 words. You need to return true if the second word\
    \ or any of its rotations is a substring in the first word\n/// >>> cycpattern_check(a:\
    \ \"abcd\", b: \"abd\")\n/// false\n/// >>> cycpattern_check(a: \"hello\", b:\
    \ \"ell\")\n/// true\n/// >>> cycpattern_check(a: \"whassup\", b: \"psus\")\n\
    /// false\n/// >>> cycpattern_check(a: \"abab\", b: \"baa\")\n/// true\n/// >>>\
    \ cycpattern_check(a: \"efef\", b: \"eeff\")\n/// false\n/// >>> cycpattern_check(a:\
    \ \"himenss\", b: \"simen\")\n/// true\nfunc cycpattern_check(a: String, b: String)\
    \ -> Bool {\n    var b = b\n    for _ in 0..<b.count {\n        if a.contains(b)\
    \ {\n            return true\n        }\n        b.append(b.removeFirst())\n \
    \   }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(cycpattern_check(a:\
    \ \"xyzw\", b: \"xyw\") == false)\nassert(cycpattern_check(a: \"yello\", b: \"\
    ell\") == true)\nassert(cycpattern_check(a: \"whattup\", b: \"ptut\") == false)\n\
    assert(cycpattern_check(a: \"efef\", b: \"fee\") == true)\nassert(cycpattern_check(a:\
    \ \"abab\", b: \"aabb\") == false)\nassert(cycpattern_check(a: \"winemtt\", b:\
    \ \"tinem\") == true)"
  status: Exception
  stderr: 'Swift/Substring.swift:316: Fatal error: String index is out of bounds

    Current stack trace:

    0    libswiftCore.so                    0x00002ba9518f5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba9515ec561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ba9515ec286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ba9515ec13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ba9515ebbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftCore.so                    0x00002ba951746e40 Substring.index(_:offsetBy:)
    + 880

    6    libswiftCore.so                    0x00002ba95174b85c <unavailable> + 2873436

    7    libswiftCore.so                    0x00002ba951618920 Collection.formIndex(_:offsetBy:)
    + 116

    8    libswift_StringProcessing.so       0x00002ba9512d3b82 <unavailable> + 285570

    9    libswift_StringProcessing.so       0x00002ba9512d2b2f <unavailable> + 281391

    10   libswift_StringProcessing.so       0x00002ba9512d3ced <unavailable> + 285933

    11   libswift_StringProcessing.so       0x00002ba9512b942d <unavailable> + 177197

    12   libswift_StringProcessing.so       0x00002ba9512b7840 BidirectionalCollection<>.firstRange<A>(of:)
    + 1517

    13   libswift_StringProcessing.so       0x00002ba9512b7e70 StringProtocol.contains(_:)
    + 64

    14   tmpxxc0g7sv                        0x000055fb90321d4d <unavailable> + 7501

    15   tmpxxc0g7sv                        0x000055fb903215c5 <unavailable> + 5573

    16   libc.so.6                          0x00002ba951ae1460 __libc_start_main +
    245

    17   tmpxxc0g7sv                        0x000055fb90321299 <unavailable> + 4761

    '
  stdout: ''
  timestamp: 1659824845
- exit_code: -4
  program: "\n/// You are given 2 words. You need to return true if the second word\
    \ or any of its rotations is a substring in the first word\n/// >>> cycpattern_check(a:\
    \ \"abcd\", b: \"abd\")\n/// false\n/// >>> cycpattern_check(a: \"hello\", b:\
    \ \"ell\")\n/// true\n/// >>> cycpattern_check(a: \"whassup\", b: \"psus\")\n\
    /// false\n/// >>> cycpattern_check(a: \"abab\", b: \"baa\")\n/// true\n/// >>>\
    \ cycpattern_check(a: \"efef\", b: \"eeff\")\n/// false\n/// >>> cycpattern_check(a:\
    \ \"himenss\", b: \"simen\")\n/// true\nfunc cycpattern_check(a: String, b: String)\
    \ -> Bool {\n    var b = b\n    for _ in 0..<b.count {\n        if a.contains(b)\
    \ {\n            return true\n        }\n        b.append(b.removeFirst())\n \
    \   }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(cycpattern_check(a:\
    \ \"xyzw\", b: \"xyw\") == false)\nassert(cycpattern_check(a: \"yello\", b: \"\
    ell\") == true)\nassert(cycpattern_check(a: \"whattup\", b: \"ptut\") == false)\n\
    assert(cycpattern_check(a: \"efef\", b: \"fee\") == true)\nassert(cycpattern_check(a:\
    \ \"abab\", b: \"aabb\") == false)\nassert(cycpattern_check(a: \"winemtt\", b:\
    \ \"tinem\") == true)"
  status: Exception
  stderr: 'Swift/Substring.swift:316: Fatal error: String index is out of bounds

    Current stack trace:

    0    libswiftCore.so                    0x00002ba9518f5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba9515ec561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ba9515ec286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ba9515ec13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ba9515ebbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftCore.so                    0x00002ba951746e40 Substring.index(_:offsetBy:)
    + 880

    6    libswiftCore.so                    0x00002ba95174b85c <unavailable> + 2873436

    7    libswiftCore.so                    0x00002ba951618920 Collection.formIndex(_:offsetBy:)
    + 116

    8    libswift_StringProcessing.so       0x00002ba9512d3b82 <unavailable> + 285570

    9    libswift_StringProcessing.so       0x00002ba9512d2b2f <unavailable> + 281391

    10   libswift_StringProcessing.so       0x00002ba9512d3ced <unavailable> + 285933

    11   libswift_StringProcessing.so       0x00002ba9512b942d <unavailable> + 177197

    12   libswift_StringProcessing.so       0x00002ba9512b7840 BidirectionalCollection<>.firstRange<A>(of:)
    + 1517

    13   libswift_StringProcessing.so       0x00002ba9512b7e70 StringProtocol.contains(_:)
    + 64

    14   tmpxxc0g7sv                        0x000055fb90321d4d <unavailable> + 7501

    15   tmpxxc0g7sv                        0x000055fb903215c5 <unavailable> + 5573

    16   libc.so.6                          0x00002ba951ae1460 __libc_start_main +
    245

    17   tmpxxc0g7sv                        0x000055fb90321299 <unavailable> + 4761

    '
  stdout: ''
  timestamp: 1659824845
- exit_code: 1
  program: "\n/// You are given 2 words. You need to return true if the second word\
    \ or any of its rotations is a substring in the first word\n/// >>> cycpattern_check(a:\
    \ \"abcd\", b: \"abd\")\n/// false\n/// >>> cycpattern_check(a: \"hello\", b:\
    \ \"ell\")\n/// true\n/// >>> cycpattern_check(a: \"whassup\", b: \"psus\")\n\
    /// false\n/// >>> cycpattern_check(a: \"abab\", b: \"baa\")\n/// true\n/// >>>\
    \ cycpattern_check(a: \"efef\", b: \"eeff\")\n/// false\n/// >>> cycpattern_check(a:\
    \ \"himenss\", b: \"simen\")\n/// true\nfunc cycpattern_check(a: String, b: String)\
    \ -> Bool {\n    if a.count < b.count {\n        return false\n    }\n    var\
    \ b = b\n    for _ in 0..<a.count {\n        if a.contains(b) {\n            return\
    \ true\n        }\n        b = b.substring(from: b.index(after: b.startIndex))\
    \ + b.substring(to: b.index(before: b.endIndex))\n    }\n    return false\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(cycpattern_check(a: \"xyzw\", b: \"xyw\") == false)\n\
    assert(cycpattern_check(a: \"yello\", b: \"ell\") == true)\nassert(cycpattern_check(a:\
    \ \"whattup\", b: \"ptut\") == false)\nassert(cycpattern_check(a: \"efef\", b:\
    \ \"fee\") == true)\nassert(cycpattern_check(a: \"abab\", b: \"aabb\") == false)\n\
    assert(cycpattern_check(a: \"winemtt\", b: \"tinem\") == true)"
  status: SyntaxError
  stderr: "/tmp/tmpbazcd_yy.swift:24:15: error: value of type 'String' has no member\
    \ 'substring'\n        b = b.substring(from: b.index(after: b.startIndex)) + b.substring(to:\
    \ b.index(before: b.endIndex))\n            ~ ^~~~~~~~~\n/tmp/tmpbazcd_yy.swift:24:65:\
    \ error: value of type 'String' has no member 'substring'\n        b = b.substring(from:\
    \ b.index(after: b.startIndex)) + b.substring(to: b.index(before: b.endIndex))\n\
    \                                                              ~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824845
- exit_code: -4
  program: "\n/// You are given 2 words. You need to return true if the second word\
    \ or any of its rotations is a substring in the first word\n/// >>> cycpattern_check(a:\
    \ \"abcd\", b: \"abd\")\n/// false\n/// >>> cycpattern_check(a: \"hello\", b:\
    \ \"ell\")\n/// true\n/// >>> cycpattern_check(a: \"whassup\", b: \"psus\")\n\
    /// false\n/// >>> cycpattern_check(a: \"abab\", b: \"baa\")\n/// true\n/// >>>\
    \ cycpattern_check(a: \"efef\", b: \"eeff\")\n/// false\n/// >>> cycpattern_check(a:\
    \ \"himenss\", b: \"simen\")\n/// true\nfunc cycpattern_check(a: String, b: String)\
    \ -> Bool {\n    let a = Array(a)\n    let b = Array(b)\n    let a_len = a.count\n\
    \    let b_len = b.count\n    if a_len < b_len {\n        return false\n    }\n\
    \    var i = 0\n    while i < a_len {\n        var j = 0\n        while j < b_len\
    \ {\n            if a[(i + j) % a_len] != b[j] {\n                break\n    \
    \        }\n            j += 1\n        }\n        if j == b_len {\n         \
    \   return true\n        }\n        i += 1\n    }\n    return false\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(cycpattern_check(a: \"xyzw\", b: \"xyw\") == false)\n\
    assert(cycpattern_check(a: \"yello\", b: \"ell\") == true)\nassert(cycpattern_check(a:\
    \ \"whattup\", b: \"ptut\") == false)\nassert(cycpattern_check(a: \"efef\", b:\
    \ \"fee\") == true)\nassert(cycpattern_check(a: \"abab\", b: \"aabb\") == false)\n\
    assert(cycpattern_check(a: \"winemtt\", b: \"tinem\") == true)"
  status: Exception
  stderr: 'tmp1jtp0_ke/tmp1jtp0_ke.swift:56: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b824eaf4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b824e7ebb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b824e7eb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b824e7ea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1jtp0_ke                        0x0000557e52193835 <unavailable> + 6197

    5    libc.so.6                          0x00002b824ece0460 __libc_start_main +
    245

    6    tmp1jtp0_ke                        0x0000557e52193199 <unavailable> + 4505

    '
  stdout: ''
  timestamp: 1659824845
- exit_code: -4
  program: "\n/// You are given 2 words. You need to return true if the second word\
    \ or any of its rotations is a substring in the first word\n/// >>> cycpattern_check(a:\
    \ \"abcd\", b: \"abd\")\n/// false\n/// >>> cycpattern_check(a: \"hello\", b:\
    \ \"ell\")\n/// true\n/// >>> cycpattern_check(a: \"whassup\", b: \"psus\")\n\
    /// false\n/// >>> cycpattern_check(a: \"abab\", b: \"baa\")\n/// true\n/// >>>\
    \ cycpattern_check(a: \"efef\", b: \"eeff\")\n/// false\n/// >>> cycpattern_check(a:\
    \ \"himenss\", b: \"simen\")\n/// true\nfunc cycpattern_check(a: String, b: String)\
    \ -> Bool {\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(cycpattern_check(a:\
    \ \"xyzw\", b: \"xyw\") == false)\nassert(cycpattern_check(a: \"yello\", b: \"\
    ell\") == true)\nassert(cycpattern_check(a: \"whattup\", b: \"ptut\") == false)\n\
    assert(cycpattern_check(a: \"efef\", b: \"fee\") == true)\nassert(cycpattern_check(a:\
    \ \"abab\", b: \"aabb\") == false)\nassert(cycpattern_check(a: \"winemtt\", b:\
    \ \"tinem\") == true)"
  status: Exception
  stderr: 'tmp5ngt0b9p/tmp5ngt0b9p.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5997ce8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b59979dfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b59979df988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b59979de7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5ngt0b9p                        0x00005609c2f0a371 <unavailable> + 4977

    5    libc.so.6                          0x00002b5997ed4460 __libc_start_main +
    245

    6    tmp5ngt0b9p                        0x00005609c2f09ee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1659824845
- exit_code: 1
  program: "\n/// You are given 2 words. You need to return true if the second word\
    \ or any of its rotations is a substring in the first word\n/// >>> cycpattern_check(a:\
    \ \"abcd\", b: \"abd\")\n/// false\n/// >>> cycpattern_check(a: \"hello\", b:\
    \ \"ell\")\n/// true\n/// >>> cycpattern_check(a: \"whassup\", b: \"psus\")\n\
    /// false\n/// >>> cycpattern_check(a: \"abab\", b: \"baa\")\n/// true\n/// >>>\
    \ cycpattern_check(a: \"efef\", b: \"eeff\")\n/// false\n/// >>> cycpattern_check(a:\
    \ \"himenss\", b: \"simen\")\n/// true\nfunc cycpattern_check(a: String, b: String)\
    \ -> Bool {\n    var str = a\n    for _ in 0..<a.count {\n        if str.contains(b)\
    \ {\n            return true\n        }\n        str = str.rotate()\n    }\n \
    \   return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(cycpattern_check(a:\
    \ \"xyzw\", b: \"xyw\") == false)\nassert(cycpattern_check(a: \"yello\", b: \"\
    ell\") == true)\nassert(cycpattern_check(a: \"whattup\", b: \"ptut\") == false)\n\
    assert(cycpattern_check(a: \"efef\", b: \"fee\") == true)\nassert(cycpattern_check(a:\
    \ \"abab\", b: \"aabb\") == false)\nassert(cycpattern_check(a: \"winemtt\", b:\
    \ \"tinem\") == true)"
  status: SyntaxError
  stderr: "/tmp/tmp09rb96h8.swift:21:19: error: value of type 'String' has no member\
    \ 'rotate'\n        str = str.rotate()\n              ~~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824845
- exit_code: -4
  program: "\n/// You are given 2 words. You need to return true if the second word\
    \ or any of its rotations is a substring in the first word\n/// >>> cycpattern_check(a:\
    \ \"abcd\", b: \"abd\")\n/// false\n/// >>> cycpattern_check(a: \"hello\", b:\
    \ \"ell\")\n/// true\n/// >>> cycpattern_check(a: \"whassup\", b: \"psus\")\n\
    /// false\n/// >>> cycpattern_check(a: \"abab\", b: \"baa\")\n/// true\n/// >>>\
    \ cycpattern_check(a: \"efef\", b: \"eeff\")\n/// false\n/// >>> cycpattern_check(a:\
    \ \"himenss\", b: \"simen\")\n/// true\nfunc cycpattern_check(a: String, b: String)\
    \ -> Bool {\n    var a = a\n    var b = b\n    if a.count < b.count {\n      \
    \  return false\n    }\n    if a.count == b.count {\n        return a == b\n \
    \   }\n    var b_rotation = b\n    for _ in 0..<b.count {\n        if a.contains(b_rotation)\
    \ {\n            return true\n        }\n        b_rotation.append(b_rotation.removeFirst())\n\
    \    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(cycpattern_check(a:\
    \ \"xyzw\", b: \"xyw\") == false)\nassert(cycpattern_check(a: \"yello\", b: \"\
    ell\") == true)\nassert(cycpattern_check(a: \"whattup\", b: \"ptut\") == false)\n\
    assert(cycpattern_check(a: \"efef\", b: \"fee\") == true)\nassert(cycpattern_check(a:\
    \ \"abab\", b: \"aabb\") == false)\nassert(cycpattern_check(a: \"winemtt\", b:\
    \ \"tinem\") == true)"
  status: Exception
  stderr: 'Swift/Substring.swift:316: Fatal error: String index is out of bounds

    Current stack trace:

    0    libswiftCore.so                    0x00002b7231516c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b723120d561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b723120d286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b723120d13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b723120cbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftCore.so                    0x00002b7231367e40 Substring.index(_:offsetBy:)
    + 880

    6    libswiftCore.so                    0x00002b723136c85c <unavailable> + 2873436

    7    libswiftCore.so                    0x00002b7231239920 Collection.formIndex(_:offsetBy:)
    + 116

    8    libswift_StringProcessing.so       0x00002b7230ef4b82 <unavailable> + 285570

    9    libswift_StringProcessing.so       0x00002b7230ef3b2f <unavailable> + 281391

    10   libswift_StringProcessing.so       0x00002b7230ef4ced <unavailable> + 285933

    11   libswift_StringProcessing.so       0x00002b7230eda42d <unavailable> + 177197

    12   libswift_StringProcessing.so       0x00002b7230ed8840 BidirectionalCollection<>.firstRange<A>(of:)
    + 1517

    13   libswift_StringProcessing.so       0x00002b7230ed8e70 StringProtocol.contains(_:)
    + 64

    14   tmpv8cq9k54                        0x000055f07e7f9049 <unavailable> + 8265

    15   tmpv8cq9k54                        0x000055f07e7f8615 <unavailable> + 5653

    16   libc.so.6                          0x00002b7231702460 __libc_start_main +
    245

    17   tmpv8cq9k54                        0x000055f07e7f82e9 <unavailable> + 4841

    '
  stdout: ''
  timestamp: 1659824846
- exit_code: -4
  program: "\n/// You are given 2 words. You need to return true if the second word\
    \ or any of its rotations is a substring in the first word\n/// >>> cycpattern_check(a:\
    \ \"abcd\", b: \"abd\")\n/// false\n/// >>> cycpattern_check(a: \"hello\", b:\
    \ \"ell\")\n/// true\n/// >>> cycpattern_check(a: \"whassup\", b: \"psus\")\n\
    /// false\n/// >>> cycpattern_check(a: \"abab\", b: \"baa\")\n/// true\n/// >>>\
    \ cycpattern_check(a: \"efef\", b: \"eeff\")\n/// false\n/// >>> cycpattern_check(a:\
    \ \"himenss\", b: \"simen\")\n/// true\nfunc cycpattern_check(a: String, b: String)\
    \ -> Bool {\n    let a = Array(a)\n    let b = Array(b)\n    var b_index = 0\n\
    \    for i in 0..<a.count {\n        if a[i] == b[b_index] {\n            b_index\
    \ += 1\n            if b_index == b.count {\n                return true\n   \
    \         }\n        } else {\n            b_index = 0\n        }\n    }\n   \
    \ return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(cycpattern_check(a:\
    \ \"xyzw\", b: \"xyw\") == false)\nassert(cycpattern_check(a: \"yello\", b: \"\
    ell\") == true)\nassert(cycpattern_check(a: \"whattup\", b: \"ptut\") == false)\n\
    assert(cycpattern_check(a: \"efef\", b: \"fee\") == true)\nassert(cycpattern_check(a:\
    \ \"abab\", b: \"aabb\") == false)\nassert(cycpattern_check(a: \"winemtt\", b:\
    \ \"tinem\") == true)"
  status: Exception
  stderr: 'tmpkvjuz_mk/tmpkvjuz_mk.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af18bee5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af18bbdcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af18bbdc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af18bbdb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkvjuz_mk                        0x000055e07e85c935 <unavailable> + 6453

    5    libc.so.6                          0x00002af18c0d1460 __libc_start_main +
    245

    6    tmpkvjuz_mk                        0x000055e07e85c299 <unavailable> + 4761

    '
  stdout: ''
  timestamp: 1659824846
- exit_code: -4
  program: "\n/// You are given 2 words. You need to return true if the second word\
    \ or any of its rotations is a substring in the first word\n/// >>> cycpattern_check(a:\
    \ \"abcd\", b: \"abd\")\n/// false\n/// >>> cycpattern_check(a: \"hello\", b:\
    \ \"ell\")\n/// true\n/// >>> cycpattern_check(a: \"whassup\", b: \"psus\")\n\
    /// false\n/// >>> cycpattern_check(a: \"abab\", b: \"baa\")\n/// true\n/// >>>\
    \ cycpattern_check(a: \"efef\", b: \"eeff\")\n/// false\n/// >>> cycpattern_check(a:\
    \ \"himenss\", b: \"simen\")\n/// true\nfunc cycpattern_check(a: String, b: String)\
    \ -> Bool {\n    let a = Array(a)\n    let b = Array(b)\n    let n = a.count\n\
    \    let m = b.count\n    var i = 0\n    var j = 0\n    while i < n {\n      \
    \  if a[i] == b[j] {\n            i += 1\n            j += 1\n            if j\
    \ == m {\n                return true\n            }\n        } else {\n     \
    \       i = i - j + 1\n            j = 0\n        }\n    }\n    return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(cycpattern_check(a: \"xyzw\", b: \"xyw\") == false)\n\
    assert(cycpattern_check(a: \"yello\", b: \"ell\") == true)\nassert(cycpattern_check(a:\
    \ \"whattup\", b: \"ptut\") == false)\nassert(cycpattern_check(a: \"efef\", b:\
    \ \"fee\") == true)\nassert(cycpattern_check(a: \"abab\", b: \"aabb\") == false)\n\
    assert(cycpattern_check(a: \"winemtt\", b: \"tinem\") == true)"
  status: Exception
  stderr: 'tmpqss69acj/tmpqss69acj.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba188107c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba187dfeb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba187dfe988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba187dfd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqss69acj                        0x00005570446fa7a5 <unavailable> + 6053

    5    libc.so.6                          0x00002ba1882f3460 __libc_start_main +
    245

    6    tmpqss69acj                        0x00005570446fa109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1659824845
- exit_code: -4
  program: "\n/// You are given 2 words. You need to return true if the second word\
    \ or any of its rotations is a substring in the first word\n/// >>> cycpattern_check(a:\
    \ \"abcd\", b: \"abd\")\n/// false\n/// >>> cycpattern_check(a: \"hello\", b:\
    \ \"ell\")\n/// true\n/// >>> cycpattern_check(a: \"whassup\", b: \"psus\")\n\
    /// false\n/// >>> cycpattern_check(a: \"abab\", b: \"baa\")\n/// true\n/// >>>\
    \ cycpattern_check(a: \"efef\", b: \"eeff\")\n/// false\n/// >>> cycpattern_check(a:\
    \ \"himenss\", b: \"simen\")\n/// true\nfunc cycpattern_check(a: String, b: String)\
    \ -> Bool {\n    if a.count != b.count {\n        return false\n    }\n    var\
    \ b = b\n    for _ in 0..<b.count {\n        if a.contains(b) {\n            return\
    \ true\n        }\n        b.append(b.removeFirst())\n    }\n    return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(cycpattern_check(a: \"xyzw\", b: \"xyw\") == false)\n\
    assert(cycpattern_check(a: \"yello\", b: \"ell\") == true)\nassert(cycpattern_check(a:\
    \ \"whattup\", b: \"ptut\") == false)\nassert(cycpattern_check(a: \"efef\", b:\
    \ \"fee\") == true)\nassert(cycpattern_check(a: \"abab\", b: \"aabb\") == false)\n\
    assert(cycpattern_check(a: \"winemtt\", b: \"tinem\") == true)"
  status: Exception
  stderr: 'tmpwwfg9u7b/tmpwwfg9u7b.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b79e31f3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b79e2eeab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b79e2eea988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b79e2ee97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwwfg9u7b                        0x0000556870fc0721 <unavailable> + 5921

    5    libc.so.6                          0x00002b79e33df460 __libc_start_main +
    245

    6    tmpwwfg9u7b                        0x0000556870fc0299 <unavailable> + 4761

    '
  stdout: ''
  timestamp: 1659824845
- exit_code: -4
  program: "\n/// You are given 2 words. You need to return true if the second word\
    \ or any of its rotations is a substring in the first word\n/// >>> cycpattern_check(a:\
    \ \"abcd\", b: \"abd\")\n/// false\n/// >>> cycpattern_check(a: \"hello\", b:\
    \ \"ell\")\n/// true\n/// >>> cycpattern_check(a: \"whassup\", b: \"psus\")\n\
    /// false\n/// >>> cycpattern_check(a: \"abab\", b: \"baa\")\n/// true\n/// >>>\
    \ cycpattern_check(a: \"efef\", b: \"eeff\")\n/// false\n/// >>> cycpattern_check(a:\
    \ \"himenss\", b: \"simen\")\n/// true\nfunc cycpattern_check(a: String, b: String)\
    \ -> Bool {\n    guard a.count >= b.count else { return false }\n    let a = Array(a)\n\
    \    let b = Array(b)\n    var b_index = 0\n    for a_index in 0..<a.count {\n\
    \        if a[a_index] == b[b_index] {\n            b_index += 1\n           \
    \ if b_index == b.count {\n                return true\n            }\n      \
    \  } else {\n            b_index = 0\n        }\n    }\n    return false\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(cycpattern_check(a: \"xyzw\", b: \"xyw\") == false)\n\
    assert(cycpattern_check(a: \"yello\", b: \"ell\") == true)\nassert(cycpattern_check(a:\
    \ \"whattup\", b: \"ptut\") == false)\nassert(cycpattern_check(a: \"efef\", b:\
    \ \"fee\") == true)\nassert(cycpattern_check(a: \"abab\", b: \"aabb\") == false)\n\
    assert(cycpattern_check(a: \"winemtt\", b: \"tinem\") == true)"
  status: Exception
  stderr: 'tmptwvy3n4v/tmptwvy3n4v.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b99f24d8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b99f21cfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b99f21cf988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b99f21ce7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptwvy3n4v                        0x000055877fcba975 <unavailable> + 6517

    5    libc.so.6                          0x00002b99f26c4460 __libc_start_main +
    245

    6    tmptwvy3n4v                        0x000055877fcba2d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1659824846
- exit_code: -4
  program: "\n/// You are given 2 words. You need to return true if the second word\
    \ or any of its rotations is a substring in the first word\n/// >>> cycpattern_check(a:\
    \ \"abcd\", b: \"abd\")\n/// false\n/// >>> cycpattern_check(a: \"hello\", b:\
    \ \"ell\")\n/// true\n/// >>> cycpattern_check(a: \"whassup\", b: \"psus\")\n\
    /// false\n/// >>> cycpattern_check(a: \"abab\", b: \"baa\")\n/// true\n/// >>>\
    \ cycpattern_check(a: \"efef\", b: \"eeff\")\n/// false\n/// >>> cycpattern_check(a:\
    \ \"himenss\", b: \"simen\")\n/// true\nfunc cycpattern_check(a: String, b: String)\
    \ -> Bool {\n    let a = Array(a)\n    let b = Array(b)\n    let b_len = b.count\n\
    \    let a_len = a.count\n    if b_len > a_len {\n        return false\n    }\n\
    \    var i = 0\n    var j = 0\n    while i < a_len {\n        if a[i] == b[j]\
    \ {\n            j += 1\n            if j == b_len {\n                return true\n\
    \            }\n        } else {\n            j = 0\n        }\n        i += 1\n\
    \    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(cycpattern_check(a:\
    \ \"xyzw\", b: \"xyw\") == false)\nassert(cycpattern_check(a: \"yello\", b: \"\
    ell\") == true)\nassert(cycpattern_check(a: \"whattup\", b: \"ptut\") == false)\n\
    assert(cycpattern_check(a: \"efef\", b: \"fee\") == true)\nassert(cycpattern_check(a:\
    \ \"abab\", b: \"aabb\") == false)\nassert(cycpattern_check(a: \"winemtt\", b:\
    \ \"tinem\") == true)"
  status: Exception
  stderr: 'tmp0238z6oa/tmp0238z6oa.swift:55: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5eb224bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5eb1f42b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5eb1f42988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5eb1f417b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0238z6oa                        0x000055a39f4047a5 <unavailable> + 6053

    5    libc.so.6                          0x00002b5eb2437460 __libc_start_main +
    245

    6    tmp0238z6oa                        0x000055a39f404109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1659824846
- exit_code: 1
  program: "\n/// You are given 2 words. You need to return true if the second word\
    \ or any of its rotations is a substring in the first word\n/// >>> cycpattern_check(a:\
    \ \"abcd\", b: \"abd\")\n/// false\n/// >>> cycpattern_check(a: \"hello\", b:\
    \ \"ell\")\n/// true\n/// >>> cycpattern_check(a: \"whassup\", b: \"psus\")\n\
    /// false\n/// >>> cycpattern_check(a: \"abab\", b: \"baa\")\n/// true\n/// >>>\
    \ cycpattern_check(a: \"efef\", b: \"eeff\")\n/// false\n/// >>> cycpattern_check(a:\
    \ \"himenss\", b: \"simen\")\n/// true\nfunc cycpattern_check(a: String, b: String)\
    \ -> Bool {\n    guard a.count >= b.count else {\n        return false\n    }\n\
    \    let a = Array(a)\n    let b = Array(b)\n    for i in 0..<a.count {\n    \
    \    let j = i\n        var k = 0\n        while k < b.count && a[j % a.count]\
    \ == b[k] {\n            j += 1\n            k += 1\n        }\n        if k ==\
    \ b.count {\n            return true\n        }\n    }\n    return false\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(cycpattern_check(a: \"xyzw\", b: \"xyw\") == false)\n\
    assert(cycpattern_check(a: \"yello\", b: \"ell\") == true)\nassert(cycpattern_check(a:\
    \ \"whattup\", b: \"ptut\") == false)\nassert(cycpattern_check(a: \"efef\", b:\
    \ \"fee\") == true)\nassert(cycpattern_check(a: \"abab\", b: \"aabb\") == false)\n\
    assert(cycpattern_check(a: \"winemtt\", b: \"tinem\") == true)"
  status: SyntaxError
  stderr: "/tmp/tmpqnf_w44h.swift:25:15: error: left side of mutating operator isn't\
    \ mutable: 'j' is a 'let' constant\n            j += 1\n            ~ ^\n/tmp/tmpqnf_w44h.swift:22:9:\
    \ note: change 'let' to 'var' to make it mutable\n        let j = i\n        ^~~\n\
    \        var\n"
  stdout: ''
  timestamp: 1659824846
- exit_code: -4
  program: "\n/// You are given 2 words. You need to return true if the second word\
    \ or any of its rotations is a substring in the first word\n/// >>> cycpattern_check(a:\
    \ \"abcd\", b: \"abd\")\n/// false\n/// >>> cycpattern_check(a: \"hello\", b:\
    \ \"ell\")\n/// true\n/// >>> cycpattern_check(a: \"whassup\", b: \"psus\")\n\
    /// false\n/// >>> cycpattern_check(a: \"abab\", b: \"baa\")\n/// true\n/// >>>\
    \ cycpattern_check(a: \"efef\", b: \"eeff\")\n/// false\n/// >>> cycpattern_check(a:\
    \ \"himenss\", b: \"simen\")\n/// true\nfunc cycpattern_check(a: String, b: String)\
    \ -> Bool {\n    let a = Array(a)\n    let b = Array(b)\n    if a.count < b.count\
    \ {\n        return false\n    }\n    for i in 0..<a.count {\n        if a[i]\
    \ == b[0] {\n            var j = i\n            var k = 0\n            while j\
    \ < a.count && k < b.count && a[j] == b[k] {\n                j += 1\n       \
    \         k += 1\n            }\n            if k == b.count {\n             \
    \   return true\n            }\n            j = 0\n            while j < i &&\
    \ k < b.count && a[j] == b[k] {\n                j += 1\n                k +=\
    \ 1\n            }\n            if k == b.count {\n                return true\n\
    \            }\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(cycpattern_check(a: \"xyzw\", b: \"xyw\") == false)\nassert(cycpattern_check(a:\
    \ \"yello\", b: \"ell\") == true)\nassert(cycpattern_check(a: \"whattup\", b:\
    \ \"ptut\") == false)\nassert(cycpattern_check(a: \"efef\", b: \"fee\") == true)\n\
    assert(cycpattern_check(a: \"abab\", b: \"aabb\") == false)\nassert(cycpattern_check(a:\
    \ \"winemtt\", b: \"tinem\") == true)"
  status: Exception
  stderr: 'tmpuo8gtrnw/tmpuo8gtrnw.swift:63: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5eaa7a1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5eaa498b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5eaa498988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5eaa4977b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuo8gtrnw                        0x0000562951a3cb9d <unavailable> + 7069

    5    libc.so.6                          0x00002b5eaa98d460 __libc_start_main +
    245

    6    tmpuo8gtrnw                        0x0000562951a3c2d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1659824846
- exit_code: -4
  program: "\n/// You are given 2 words. You need to return true if the second word\
    \ or any of its rotations is a substring in the first word\n/// >>> cycpattern_check(a:\
    \ \"abcd\", b: \"abd\")\n/// false\n/// >>> cycpattern_check(a: \"hello\", b:\
    \ \"ell\")\n/// true\n/// >>> cycpattern_check(a: \"whassup\", b: \"psus\")\n\
    /// false\n/// >>> cycpattern_check(a: \"abab\", b: \"baa\")\n/// true\n/// >>>\
    \ cycpattern_check(a: \"efef\", b: \"eeff\")\n/// false\n/// >>> cycpattern_check(a:\
    \ \"himenss\", b: \"simen\")\n/// true\nfunc cycpattern_check(a: String, b: String)\
    \ -> Bool {\n    let a = Array(a)\n    let b = Array(b)\n    var b_rot = b\n \
    \   for _ in 0..<b.count {\n        if a.contains(where: { $0 == b_rot[0] }) {\n\
    \            var a_index = a.firstIndex(of: b_rot[0])!\n            for i in 0..<b.count\
    \ {\n                if a_index >= a.count {\n                    a_index = 0\n\
    \                }\n                if a[a_index] != b_rot[i] {\n            \
    \        break\n                }\n                if i == b.count - 1 {\n   \
    \                 return true\n                }\n                a_index += 1\n\
    \            }\n        }\n        b_rot.append(b_rot.removeFirst())\n    }\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(cycpattern_check(a:\
    \ \"xyzw\", b: \"xyw\") == false)\nassert(cycpattern_check(a: \"yello\", b: \"\
    ell\") == true)\nassert(cycpattern_check(a: \"whattup\", b: \"ptut\") == false)\n\
    assert(cycpattern_check(a: \"efef\", b: \"fee\") == true)\nassert(cycpattern_check(a:\
    \ \"abab\", b: \"aabb\") == false)\nassert(cycpattern_check(a: \"winemtt\", b:\
    \ \"tinem\") == true)"
  status: Exception
  stderr: 'tmpqnaprec1/tmpqnaprec1.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9787ae2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b97877d9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b97877d9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b97877d87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqnaprec1                        0x0000565413fde8e5 <unavailable> + 6373

    5    libc.so.6                          0x00002b9787cce460 __libc_start_main +
    245

    6    tmpqnaprec1                        0x0000565413fde539 <unavailable> + 5433

    '
  stdout: ''
  timestamp: 1659824846
- exit_code: -4
  program: "\n/// You are given 2 words. You need to return true if the second word\
    \ or any of its rotations is a substring in the first word\n/// >>> cycpattern_check(a:\
    \ \"abcd\", b: \"abd\")\n/// false\n/// >>> cycpattern_check(a: \"hello\", b:\
    \ \"ell\")\n/// true\n/// >>> cycpattern_check(a: \"whassup\", b: \"psus\")\n\
    /// false\n/// >>> cycpattern_check(a: \"abab\", b: \"baa\")\n/// true\n/// >>>\
    \ cycpattern_check(a: \"efef\", b: \"eeff\")\n/// false\n/// >>> cycpattern_check(a:\
    \ \"himenss\", b: \"simen\")\n/// true\nfunc cycpattern_check(a: String, b: String)\
    \ -> Bool {\n    var a = a\n    var b = b\n    if a.count == b.count {\n     \
    \   if a == b {\n            return true\n        }\n        a.append(a)\n   \
    \     if a.contains(b) {\n            return true\n        }\n    }\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(cycpattern_check(a: \"\
    xyzw\", b: \"xyw\") == false)\nassert(cycpattern_check(a: \"yello\", b: \"ell\"\
    ) == true)\nassert(cycpattern_check(a: \"whattup\", b: \"ptut\") == false)\nassert(cycpattern_check(a:\
    \ \"efef\", b: \"fee\") == true)\nassert(cycpattern_check(a: \"abab\", b: \"aabb\"\
    ) == false)\nassert(cycpattern_check(a: \"winemtt\", b: \"tinem\") == true)"
  status: Exception
  stderr: 'tmp2y9wfdsz/tmp2y9wfdsz.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7c9f8f6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7c9f5edb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7c9f5ed988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7c9f5ec7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2y9wfdsz                        0x00005575b0d3b551 <unavailable> + 5457

    5    libc.so.6                          0x00002b7c9fae2460 __libc_start_main +
    245

    6    tmp2y9wfdsz                        0x00005575b0d3b0c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1659824846
- exit_code: -4
  program: "\n/// You are given 2 words. You need to return true if the second word\
    \ or any of its rotations is a substring in the first word\n/// >>> cycpattern_check(a:\
    \ \"abcd\", b: \"abd\")\n/// false\n/// >>> cycpattern_check(a: \"hello\", b:\
    \ \"ell\")\n/// true\n/// >>> cycpattern_check(a: \"whassup\", b: \"psus\")\n\
    /// false\n/// >>> cycpattern_check(a: \"abab\", b: \"baa\")\n/// true\n/// >>>\
    \ cycpattern_check(a: \"efef\", b: \"eeff\")\n/// false\n/// >>> cycpattern_check(a:\
    \ \"himenss\", b: \"simen\")\n/// true\nfunc cycpattern_check(a: String, b: String)\
    \ -> Bool {\n    let a = Array(a)\n    let b = Array(b)\n    let n = a.count\n\
    \    let m = b.count\n    var i = 0\n    var j = 0\n    var k = 0\n    while i\
    \ < n {\n        if a[i] == b[j] {\n            i += 1\n            j += 1\n \
    \           if j == m {\n                return true\n            }\n        }\
    \ else {\n            j = 0\n            k += 1\n            i = k\n        }\n\
    \    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(cycpattern_check(a:\
    \ \"xyzw\", b: \"xyw\") == false)\nassert(cycpattern_check(a: \"yello\", b: \"\
    ell\") == true)\nassert(cycpattern_check(a: \"whattup\", b: \"ptut\") == false)\n\
    assert(cycpattern_check(a: \"efef\", b: \"fee\") == true)\nassert(cycpattern_check(a:\
    \ \"abab\", b: \"aabb\") == false)\nassert(cycpattern_check(a: \"winemtt\", b:\
    \ \"tinem\") == true)"
  status: Exception
  stderr: 'tmp9vzu19w6/tmp9vzu19w6.swift:55: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b59523bcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b59520b3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b59520b3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b59520b27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9vzu19w6                        0x0000557447c5b7a5 <unavailable> + 6053

    5    libc.so.6                          0x00002b59525a8460 __libc_start_main +
    245

    6    tmp9vzu19w6                        0x0000557447c5b109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1659824846
- exit_code: -4
  program: "\n/// You are given 2 words. You need to return true if the second word\
    \ or any of its rotations is a substring in the first word\n/// >>> cycpattern_check(a:\
    \ \"abcd\", b: \"abd\")\n/// false\n/// >>> cycpattern_check(a: \"hello\", b:\
    \ \"ell\")\n/// true\n/// >>> cycpattern_check(a: \"whassup\", b: \"psus\")\n\
    /// false\n/// >>> cycpattern_check(a: \"abab\", b: \"baa\")\n/// true\n/// >>>\
    \ cycpattern_check(a: \"efef\", b: \"eeff\")\n/// false\n/// >>> cycpattern_check(a:\
    \ \"himenss\", b: \"simen\")\n/// true\nfunc cycpattern_check(a: String, b: String)\
    \ -> Bool {\n    var a = a\n    var b = b\n    if a.count < b.count {\n      \
    \  return false\n    }\n    for _ in 0..<a.count {\n        if a.contains(b) {\n\
    \            return true\n        }\n        a.append(a.removeFirst())\n    }\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(cycpattern_check(a:\
    \ \"xyzw\", b: \"xyw\") == false)\nassert(cycpattern_check(a: \"yello\", b: \"\
    ell\") == true)\nassert(cycpattern_check(a: \"whattup\", b: \"ptut\") == false)\n\
    assert(cycpattern_check(a: \"efef\", b: \"fee\") == true)\nassert(cycpattern_check(a:\
    \ \"abab\", b: \"aabb\") == false)\nassert(cycpattern_check(a: \"winemtt\", b:\
    \ \"tinem\") == true)"
  status: Exception
  stderr: 'Swift/Substring.swift:316: Fatal error: String index is out of bounds

    Current stack trace:

    0    libswiftCore.so                    0x00002ab3d3ee4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab3d3bdb561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ab3d3bdb286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ab3d3bdb13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ab3d3bdabb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftCore.so                    0x00002ab3d3d35e40 Substring.index(_:offsetBy:)
    + 880

    6    libswiftCore.so                    0x00002ab3d3d3a85c <unavailable> + 2873436

    7    libswiftCore.so                    0x00002ab3d3c07920 Collection.formIndex(_:offsetBy:)
    + 116

    8    libswift_StringProcessing.so       0x00002ab3d38c2b82 <unavailable> + 285570

    9    libswift_StringProcessing.so       0x00002ab3d38c1b2f <unavailable> + 281391

    10   libswift_StringProcessing.so       0x00002ab3d38c2ced <unavailable> + 285933

    11   libswift_StringProcessing.so       0x00002ab3d38a842d <unavailable> + 177197

    12   libswift_StringProcessing.so       0x00002ab3d38a6840 BidirectionalCollection<>.firstRange<A>(of:)
    + 1517

    13   libswift_StringProcessing.so       0x00002ab3d38a6e70 StringProtocol.contains(_:)
    + 64

    14   tmpst2ie6pm                        0x00005647168e3e5c <unavailable> + 7772

    15   tmpst2ie6pm                        0x00005647168e35c5 <unavailable> + 5573

    16   libc.so.6                          0x00002ab3d40d0460 __libc_start_main +
    245

    17   tmpst2ie6pm                        0x00005647168e3299 <unavailable> + 4761

    '
  stdout: ''
  timestamp: 1659824845
- exit_code: -4
  program: "\n/// You are given 2 words. You need to return true if the second word\
    \ or any of its rotations is a substring in the first word\n/// >>> cycpattern_check(a:\
    \ \"abcd\", b: \"abd\")\n/// false\n/// >>> cycpattern_check(a: \"hello\", b:\
    \ \"ell\")\n/// true\n/// >>> cycpattern_check(a: \"whassup\", b: \"psus\")\n\
    /// false\n/// >>> cycpattern_check(a: \"abab\", b: \"baa\")\n/// true\n/// >>>\
    \ cycpattern_check(a: \"efef\", b: \"eeff\")\n/// false\n/// >>> cycpattern_check(a:\
    \ \"himenss\", b: \"simen\")\n/// true\nfunc cycpattern_check(a: String, b: String)\
    \ -> Bool {\n    let a = Array(a)\n    let b = Array(b)\n    var i = 0\n    while\
    \ i < a.count {\n        if a[i] == b[0] {\n            var j = 0\n          \
    \  while j < b.count {\n                if a[(i + j) % a.count] != b[j] {\n  \
    \                  break\n                }\n                j += 1\n        \
    \    }\n            if j == b.count {\n                return true\n         \
    \   }\n        }\n        i += 1\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(cycpattern_check(a: \"xyzw\", b: \"xyw\") == false)\n\
    assert(cycpattern_check(a: \"yello\", b: \"ell\") == true)\nassert(cycpattern_check(a:\
    \ \"whattup\", b: \"ptut\") == false)\nassert(cycpattern_check(a: \"efef\", b:\
    \ \"fee\") == true)\nassert(cycpattern_check(a: \"abab\", b: \"aabb\") == false)\n\
    assert(cycpattern_check(a: \"winemtt\", b: \"tinem\") == true)"
  status: Exception
  stderr: 'tmp36vmyxhz/tmp36vmyxhz.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af5467f7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af5464eeb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af5464ee988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af5464ed7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp36vmyxhz                        0x000055596e81a835 <unavailable> + 6197

    5    libc.so.6                          0x00002af5469e3460 __libc_start_main +
    245

    6    tmp36vmyxhz                        0x000055596e81a199 <unavailable> + 4505

    '
  stdout: ''
  timestamp: 1659824845
- exit_code: -4
  program: "\n/// You are given 2 words. You need to return true if the second word\
    \ or any of its rotations is a substring in the first word\n/// >>> cycpattern_check(a:\
    \ \"abcd\", b: \"abd\")\n/// false\n/// >>> cycpattern_check(a: \"hello\", b:\
    \ \"ell\")\n/// true\n/// >>> cycpattern_check(a: \"whassup\", b: \"psus\")\n\
    /// false\n/// >>> cycpattern_check(a: \"abab\", b: \"baa\")\n/// true\n/// >>>\
    \ cycpattern_check(a: \"efef\", b: \"eeff\")\n/// false\n/// >>> cycpattern_check(a:\
    \ \"himenss\", b: \"simen\")\n/// true\nfunc cycpattern_check(a: String, b: String)\
    \ -> Bool {\n    // TODO: Implement this function\n    return false\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(cycpattern_check(a: \"xyzw\", b: \"xyw\") == false)\n\
    assert(cycpattern_check(a: \"yello\", b: \"ell\") == true)\nassert(cycpattern_check(a:\
    \ \"whattup\", b: \"ptut\") == false)\nassert(cycpattern_check(a: \"efef\", b:\
    \ \"fee\") == true)\nassert(cycpattern_check(a: \"abab\", b: \"aabb\") == false)\n\
    assert(cycpattern_check(a: \"winemtt\", b: \"tinem\") == true)"
  status: Exception
  stderr: 'tmppuzu301w/tmppuzu301w.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adeb31e4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adeb2edbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adeb2edb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adeb2eda7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppuzu301w                        0x0000562df1ae6371 <unavailable> + 4977

    5    libc.so.6                          0x00002adeb33d0460 __libc_start_main +
    245

    6    tmppuzu301w                        0x0000562df1ae5ee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1659824846
- exit_code: -4
  program: "\n/// You are given 2 words. You need to return true if the second word\
    \ or any of its rotations is a substring in the first word\n/// >>> cycpattern_check(a:\
    \ \"abcd\", b: \"abd\")\n/// false\n/// >>> cycpattern_check(a: \"hello\", b:\
    \ \"ell\")\n/// true\n/// >>> cycpattern_check(a: \"whassup\", b: \"psus\")\n\
    /// false\n/// >>> cycpattern_check(a: \"abab\", b: \"baa\")\n/// true\n/// >>>\
    \ cycpattern_check(a: \"efef\", b: \"eeff\")\n/// false\n/// >>> cycpattern_check(a:\
    \ \"himenss\", b: \"simen\")\n/// true\nfunc cycpattern_check(a: String, b: String)\
    \ -> Bool {\n    var a = a\n    var b = b\n    if a.count == b.count {\n     \
    \   if a == b {\n            return true\n        }\n        var i = 0\n     \
    \   while i < a.count {\n            let index = a.index(a.startIndex, offsetBy:\
    \ i)\n            a.insert(a.remove(at: index), at: a.endIndex)\n            if\
    \ a == b {\n                return true\n            }\n            i += 1\n \
    \       }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(cycpattern_check(a: \"xyzw\", b: \"xyw\") == false)\nassert(cycpattern_check(a:\
    \ \"yello\", b: \"ell\") == true)\nassert(cycpattern_check(a: \"whattup\", b:\
    \ \"ptut\") == false)\nassert(cycpattern_check(a: \"efef\", b: \"fee\") == true)\n\
    assert(cycpattern_check(a: \"abab\", b: \"aabb\") == false)\nassert(cycpattern_check(a:\
    \ \"winemtt\", b: \"tinem\") == true)"
  status: Exception
  stderr: 'tmpklu7senp/tmpklu7senp.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2f0fb18c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2f0f80fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2f0f80f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2f0f80e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpklu7senp                        0x000055c923ac65f1 <unavailable> + 5617

    5    libc.so.6                          0x00002b2f0fd04460 __libc_start_main +
    245

    6    tmpklu7senp                        0x000055c923ac6169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659824846
- exit_code: 1
  program: "\n/// You are given 2 words. You need to return true if the second word\
    \ or any of its rotations is a substring in the first word\n/// >>> cycpattern_check(a:\
    \ \"abcd\", b: \"abd\")\n/// false\n/// >>> cycpattern_check(a: \"hello\", b:\
    \ \"ell\")\n/// true\n/// >>> cycpattern_check(a: \"whassup\", b: \"psus\")\n\
    /// false\n/// >>> cycpattern_check(a: \"abab\", b: \"baa\")\n/// true\n/// >>>\
    \ cycpattern_check(a: \"efef\", b: \"eeff\")\n/// false\n/// >>> cycpattern_check(a:\
    \ \"himenss\", b: \"simen\")\n/// true\nfunc cycpattern_check(a: String, b: String)\
    \ -> Bool {\n    var a = a\n    var b = b\n    if a.count < b.count {\n      \
    \  return false\n    }\n    if b.count == 0 {\n        return true\n    }\n  \
    \  if a.count == 0 {\n        return false\n    }\n    if a.count == b.count {\n\
    \        if a == b {\n            return true\n        }\n        return false\n\
    \    }\n    var i = 0\n    while i < a.count {\n        if a[i] == b[0] {\n  \
    \          var j = 0\n            while j < b.count {\n                if a[(i\
    \ + j) % a.count] != b[j] {\n                    break\n                }\n  \
    \              j += 1\n            }\n            if j == b.count {\n        \
    \        return true\n            }\n        }\n        i += 1\n    }\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(cycpattern_check(a: \"\
    xyzw\", b: \"xyw\") == false)\nassert(cycpattern_check(a: \"yello\", b: \"ell\"\
    ) == true)\nassert(cycpattern_check(a: \"whattup\", b: \"ptut\") == false)\nassert(cycpattern_check(a:\
    \ \"efef\", b: \"fee\") == true)\nassert(cycpattern_check(a: \"abab\", b: \"aabb\"\
    ) == false)\nassert(cycpattern_check(a: \"winemtt\", b: \"tinem\") == true)"
  status: SyntaxError
  stderr: "/tmp/tmp65x9foyg.swift:35:12: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an Int, use a String.Index instead.\n        if a[i] ==\
    \ b[0] {\n           ^~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly\
    \ marked unavailable here\n    public subscript(i: Int) -> Character { get }\n\
    \           ^\n/tmp/tmp65x9foyg.swift:35:20: error: 'subscript(_:)' is unavailable:\
    \ cannot subscript String with an Int, use a String.Index instead.\n        if\
    \ a[i] == b[0] {\n                   ^~~~\nSwift.String:3:12: note: 'subscript(_:)'\
    \ has been explicitly marked unavailable here\n    public subscript(i: Int) ->\
    \ Character { get }\n           ^\n/tmp/tmp65x9foyg.swift:38:20: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \                if a[(i + j) % a.count] != b[j] {\n                   ^~~~~~~~~~~~~~~~~~~~\n\
    Swift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp65x9foyg.swift:38:44:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n                if a[(i + j) % a.count] != b[j]\
    \ {\n                                           ^~~~\nSwift.String:3:12: note:\
    \ 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i:\
    \ Int) -> Character { get }\n           ^\n/tmp/tmp65x9foyg.swift:16:9: warning:\
    \ variable 'a' was never mutated; consider changing to 'let' constant\n    var\
    \ a = a\n    ~~~ ^\n    let\n/tmp/tmp65x9foyg.swift:17:9: warning: variable 'b'\
    \ was never mutated; consider changing to 'let' constant\n    var b = b\n    ~~~\
    \ ^\n    let\n"
  stdout: ''
  timestamp: 1659824846
- exit_code: -4
  program: "\n/// You are given 2 words. You need to return true if the second word\
    \ or any of its rotations is a substring in the first word\n/// >>> cycpattern_check(a:\
    \ \"abcd\", b: \"abd\")\n/// false\n/// >>> cycpattern_check(a: \"hello\", b:\
    \ \"ell\")\n/// true\n/// >>> cycpattern_check(a: \"whassup\", b: \"psus\")\n\
    /// false\n/// >>> cycpattern_check(a: \"abab\", b: \"baa\")\n/// true\n/// >>>\
    \ cycpattern_check(a: \"efef\", b: \"eeff\")\n/// false\n/// >>> cycpattern_check(a:\
    \ \"himenss\", b: \"simen\")\n/// true\nfunc cycpattern_check(a: String, b: String)\
    \ -> Bool {\n    let a = Array(a)\n    let b = Array(b)\n    let b_len = b.count\n\
    \    let a_len = a.count\n    var i = 0\n    while i < a_len {\n        var j\
    \ = 0\n        while j < b_len {\n            if a[i] == b[j] {\n            \
    \    var k = 0\n                while k < b_len {\n                    if a[(i\
    \ + k) % a_len] != b[(j + k) % b_len] {\n                        break\n     \
    \               }\n                    k += 1\n                }\n           \
    \     if k == b_len {\n                    return true\n                }\n  \
    \          }\n            j += 1\n        }\n        i += 1\n    }\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(cycpattern_check(a: \"\
    xyzw\", b: \"xyw\") == false)\nassert(cycpattern_check(a: \"yello\", b: \"ell\"\
    ) == true)\nassert(cycpattern_check(a: \"whattup\", b: \"ptut\") == false)\nassert(cycpattern_check(a:\
    \ \"efef\", b: \"fee\") == true)\nassert(cycpattern_check(a: \"abab\", b: \"aabb\"\
    ) == false)\nassert(cycpattern_check(a: \"winemtt\", b: \"tinem\") == true)"
  status: Exception
  stderr: 'tmpritpxpww/tmpritpxpww.swift:56: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002affb348bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002affb3182b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002affb3182988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002affb31817b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpritpxpww                        0x0000560a53930545 <unavailable> + 5445

    5    libc.so.6                          0x00002affb3677460 __libc_start_main +
    245

    6    tmpritpxpww                        0x0000560a53930199 <unavailable> + 4505

    '
  stdout: ''
  timestamp: 1659824846
- exit_code: -4
  program: "\n/// You are given 2 words. You need to return true if the second word\
    \ or any of its rotations is a substring in the first word\n/// >>> cycpattern_check(a:\
    \ \"abcd\", b: \"abd\")\n/// false\n/// >>> cycpattern_check(a: \"hello\", b:\
    \ \"ell\")\n/// true\n/// >>> cycpattern_check(a: \"whassup\", b: \"psus\")\n\
    /// false\n/// >>> cycpattern_check(a: \"abab\", b: \"baa\")\n/// true\n/// >>>\
    \ cycpattern_check(a: \"efef\", b: \"eeff\")\n/// false\n/// >>> cycpattern_check(a:\
    \ \"himenss\", b: \"simen\")\n/// true\nfunc cycpattern_check(a: String, b: String)\
    \ -> Bool {\n    let a = Array(a)\n    let b = Array(b)\n    let a_len = a.count\n\
    \    let b_len = b.count\n    if a_len < b_len {\n        return false\n    }\n\
    \    var i = 0\n    while i < a_len {\n        var j = 0\n        while j < b_len\
    \ {\n            if a[(i + j) % a_len] != b[j] {\n                break\n    \
    \        }\n            j += 1\n        }\n        if j == b_len {\n         \
    \   return true\n        }\n        i += 1\n    }\n    return false\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(cycpattern_check(a: \"xyzw\", b: \"xyw\") == false)\n\
    assert(cycpattern_check(a: \"yello\", b: \"ell\") == true)\nassert(cycpattern_check(a:\
    \ \"whattup\", b: \"ptut\") == false)\nassert(cycpattern_check(a: \"efef\", b:\
    \ \"fee\") == true)\nassert(cycpattern_check(a: \"abab\", b: \"aabb\") == false)\n\
    assert(cycpattern_check(a: \"winemtt\", b: \"tinem\") == true)"
  status: Exception
  stderr: 'tmp1jtp0_ke/tmp1jtp0_ke.swift:56: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b824eaf4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b824e7ebb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b824e7eb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b824e7ea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1jtp0_ke                        0x0000557e52193835 <unavailable> + 6197

    5    libc.so.6                          0x00002b824ece0460 __libc_start_main +
    245

    6    tmp1jtp0_ke                        0x0000557e52193199 <unavailable> + 4505

    '
  stdout: ''
  timestamp: 1659824845
- exit_code: 1
  program: "\n/// You are given 2 words. You need to return true if the second word\
    \ or any of its rotations is a substring in the first word\n/// >>> cycpattern_check(a:\
    \ \"abcd\", b: \"abd\")\n/// false\n/// >>> cycpattern_check(a: \"hello\", b:\
    \ \"ell\")\n/// true\n/// >>> cycpattern_check(a: \"whassup\", b: \"psus\")\n\
    /// false\n/// >>> cycpattern_check(a: \"abab\", b: \"baa\")\n/// true\n/// >>>\
    \ cycpattern_check(a: \"efef\", b: \"eeff\")\n/// false\n/// >>> cycpattern_check(a:\
    \ \"himenss\", b: \"simen\")\n/// true\nfunc cycpattern_check(a: String, b: String)\
    \ -> Bool {\n    let a = Array(a)\n    let b = Array(b)\n    var b_rotations =\
    \ [b]\n    for _ in 0..<b.count - 1 {\n        b_rotations.append(b_rotations.last!.rotate())\n\
    \    }\n    for b_rotation in b_rotations {\n        if a.contains(b_rotation)\
    \ {\n            return true\n        }\n    }\n    return false\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(cycpattern_check(a: \"xyzw\", b: \"xyw\") == false)\n\
    assert(cycpattern_check(a: \"yello\", b: \"ell\") == true)\nassert(cycpattern_check(a:\
    \ \"whattup\", b: \"ptut\") == false)\nassert(cycpattern_check(a: \"efef\", b:\
    \ \"fee\") == true)\nassert(cycpattern_check(a: \"abab\", b: \"aabb\") == false)\n\
    assert(cycpattern_check(a: \"winemtt\", b: \"tinem\") == true)"
  status: SyntaxError
  stderr: "/tmp/tmpg0vdpmvf.swift:20:46: error: value of type '[String.Element]' (aka\
    \ 'Array<Character>') has no member 'rotate'\n        b_rotations.append(b_rotations.last!.rotate())\n\
    \                           ~~~~~~~~~~~~~~~~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824846
- exit_code: -4
  program: "\n/// You are given 2 words. You need to return true if the second word\
    \ or any of its rotations is a substring in the first word\n/// >>> cycpattern_check(a:\
    \ \"abcd\", b: \"abd\")\n/// false\n/// >>> cycpattern_check(a: \"hello\", b:\
    \ \"ell\")\n/// true\n/// >>> cycpattern_check(a: \"whassup\", b: \"psus\")\n\
    /// false\n/// >>> cycpattern_check(a: \"abab\", b: \"baa\")\n/// true\n/// >>>\
    \ cycpattern_check(a: \"efef\", b: \"eeff\")\n/// false\n/// >>> cycpattern_check(a:\
    \ \"himenss\", b: \"simen\")\n/// true\nfunc cycpattern_check(a: String, b: String)\
    \ -> Bool {\n    var b = b\n    for _ in 0..<b.count {\n        if a.contains(b)\
    \ {\n            return true\n        }\n        b.append(b.removeFirst())\n \
    \   }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(cycpattern_check(a:\
    \ \"xyzw\", b: \"xyw\") == false)\nassert(cycpattern_check(a: \"yello\", b: \"\
    ell\") == true)\nassert(cycpattern_check(a: \"whattup\", b: \"ptut\") == false)\n\
    assert(cycpattern_check(a: \"efef\", b: \"fee\") == true)\nassert(cycpattern_check(a:\
    \ \"abab\", b: \"aabb\") == false)\nassert(cycpattern_check(a: \"winemtt\", b:\
    \ \"tinem\") == true)"
  status: Exception
  stderr: 'Swift/Substring.swift:316: Fatal error: String index is out of bounds

    Current stack trace:

    0    libswiftCore.so                    0x00002ba9518f5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba9515ec561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ba9515ec286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ba9515ec13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ba9515ebbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftCore.so                    0x00002ba951746e40 Substring.index(_:offsetBy:)
    + 880

    6    libswiftCore.so                    0x00002ba95174b85c <unavailable> + 2873436

    7    libswiftCore.so                    0x00002ba951618920 Collection.formIndex(_:offsetBy:)
    + 116

    8    libswift_StringProcessing.so       0x00002ba9512d3b82 <unavailable> + 285570

    9    libswift_StringProcessing.so       0x00002ba9512d2b2f <unavailable> + 281391

    10   libswift_StringProcessing.so       0x00002ba9512d3ced <unavailable> + 285933

    11   libswift_StringProcessing.so       0x00002ba9512b942d <unavailable> + 177197

    12   libswift_StringProcessing.so       0x00002ba9512b7840 BidirectionalCollection<>.firstRange<A>(of:)
    + 1517

    13   libswift_StringProcessing.so       0x00002ba9512b7e70 StringProtocol.contains(_:)
    + 64

    14   tmpxxc0g7sv                        0x000055fb90321d4d <unavailable> + 7501

    15   tmpxxc0g7sv                        0x000055fb903215c5 <unavailable> + 5573

    16   libc.so.6                          0x00002ba951ae1460 __libc_start_main +
    245

    17   tmpxxc0g7sv                        0x000055fb90321299 <unavailable> + 4761

    '
  stdout: ''
  timestamp: 1659824845
- exit_code: -4
  program: "\n/// You are given 2 words. You need to return true if the second word\
    \ or any of its rotations is a substring in the first word\n/// >>> cycpattern_check(a:\
    \ \"abcd\", b: \"abd\")\n/// false\n/// >>> cycpattern_check(a: \"hello\", b:\
    \ \"ell\")\n/// true\n/// >>> cycpattern_check(a: \"whassup\", b: \"psus\")\n\
    /// false\n/// >>> cycpattern_check(a: \"abab\", b: \"baa\")\n/// true\n/// >>>\
    \ cycpattern_check(a: \"efef\", b: \"eeff\")\n/// false\n/// >>> cycpattern_check(a:\
    \ \"himenss\", b: \"simen\")\n/// true\nfunc cycpattern_check(a: String, b: String)\
    \ -> Bool {\n    if a.count < b.count {\n        return false\n    }\n    let\
    \ a = Array(a)\n    let b = Array(b)\n    for i in 0..<a.count {\n        if a[i]\
    \ == b[0] {\n            var j = i\n            var k = 0\n            while j\
    \ < a.count && k < b.count && a[j] == b[k] {\n                j += 1\n       \
    \         k += 1\n            }\n            if k == b.count {\n             \
    \   return true\n            }\n            if j == a.count {\n              \
    \  j = 0\n            }\n            while j < i && k < b.count && a[j] == b[k]\
    \ {\n                j += 1\n                k += 1\n            }\n         \
    \   if k == b.count {\n                return true\n            }\n        }\n\
    \    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(cycpattern_check(a:\
    \ \"xyzw\", b: \"xyw\") == false)\nassert(cycpattern_check(a: \"yello\", b: \"\
    ell\") == true)\nassert(cycpattern_check(a: \"whattup\", b: \"ptut\") == false)\n\
    assert(cycpattern_check(a: \"efef\", b: \"fee\") == true)\nassert(cycpattern_check(a:\
    \ \"abab\", b: \"aabb\") == false)\nassert(cycpattern_check(a: \"winemtt\", b:\
    \ \"tinem\") == true)"
  status: Exception
  stderr: 'tmpl2yqxisn/tmpl2yqxisn.swift:63: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4f25cfec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4f259f5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4f259f5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4f259f47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpl2yqxisn                        0x000055e3790189c5 <unavailable> + 6597

    5    libc.so.6                          0x00002b4f25eea460 __libc_start_main +
    245

    6    tmpl2yqxisn                        0x000055e379018329 <unavailable> + 4905

    '
  stdout: ''
  timestamp: 1659824845
- exit_code: 1
  program: "\n/// You are given 2 words. You need to return true if the second word\
    \ or any of its rotations is a substring in the first word\n/// >>> cycpattern_check(a:\
    \ \"abcd\", b: \"abd\")\n/// false\n/// >>> cycpattern_check(a: \"hello\", b:\
    \ \"ell\")\n/// true\n/// >>> cycpattern_check(a: \"whassup\", b: \"psus\")\n\
    /// false\n/// >>> cycpattern_check(a: \"abab\", b: \"baa\")\n/// true\n/// >>>\
    \ cycpattern_check(a: \"efef\", b: \"eeff\")\n/// false\n/// >>> cycpattern_check(a:\
    \ \"himenss\", b: \"simen\")\n/// true\nfunc cycpattern_check(a: String, b: String)\
    \ -> Bool {\n    let a = a.lowercased()\n    let b = b.lowercased()\n    guard\
    \ a.count >= b.count else { return false }\n    let b_rotations = b.rotations()\n\
    \    for rotation in b_rotations {\n        if a.contains(rotation) {\n      \
    \      return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(cycpattern_check(a: \"xyzw\", b: \"xyw\") == false)\nassert(cycpattern_check(a:\
    \ \"yello\", b: \"ell\") == true)\nassert(cycpattern_check(a: \"whattup\", b:\
    \ \"ptut\") == false)\nassert(cycpattern_check(a: \"efef\", b: \"fee\") == true)\n\
    assert(cycpattern_check(a: \"abab\", b: \"aabb\") == false)\nassert(cycpattern_check(a:\
    \ \"winemtt\", b: \"tinem\") == true)"
  status: SyntaxError
  stderr: "/tmp/tmpafbiw4hh.swift:19:25: error: value of type 'String' has no member\
    \ 'rotations'\n    let b_rotations = b.rotations()\n                      ~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824846
- exit_code: -4
  program: "\n/// You are given 2 words. You need to return true if the second word\
    \ or any of its rotations is a substring in the first word\n/// >>> cycpattern_check(a:\
    \ \"abcd\", b: \"abd\")\n/// false\n/// >>> cycpattern_check(a: \"hello\", b:\
    \ \"ell\")\n/// true\n/// >>> cycpattern_check(a: \"whassup\", b: \"psus\")\n\
    /// false\n/// >>> cycpattern_check(a: \"abab\", b: \"baa\")\n/// true\n/// >>>\
    \ cycpattern_check(a: \"efef\", b: \"eeff\")\n/// false\n/// >>> cycpattern_check(a:\
    \ \"himenss\", b: \"simen\")\n/// true\nfunc cycpattern_check(a: String, b: String)\
    \ -> Bool {\n    var b = b\n    for _ in 0..<b.count {\n        if a.contains(b)\
    \ {\n            return true\n        }\n        b.insert(b.removeFirst(), at:\
    \ b.endIndex)\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(cycpattern_check(a: \"xyzw\", b: \"xyw\") == false)\nassert(cycpattern_check(a:\
    \ \"yello\", b: \"ell\") == true)\nassert(cycpattern_check(a: \"whattup\", b:\
    \ \"ptut\") == false)\nassert(cycpattern_check(a: \"efef\", b: \"fee\") == true)\n\
    assert(cycpattern_check(a: \"abab\", b: \"aabb\") == false)\nassert(cycpattern_check(a:\
    \ \"winemtt\", b: \"tinem\") == true)"
  status: Exception
  stderr: 'Swift/Substring.swift:316: Fatal error: String index is out of bounds

    Current stack trace:

    0    libswiftCore.so                    0x00002b292efdcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b292ecd3561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b292ecd3286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b292ecd313c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b292ecd2bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftCore.so                    0x00002b292ee2de40 Substring.index(_:offsetBy:)
    + 880

    6    libswiftCore.so                    0x00002b292ee3285c <unavailable> + 2873436

    7    libswiftCore.so                    0x00002b292ecff920 Collection.formIndex(_:offsetBy:)
    + 116

    8    libswift_StringProcessing.so       0x00002b292e9bab82 <unavailable> + 285570

    9    libswift_StringProcessing.so       0x00002b292e9b9b2f <unavailable> + 281391

    10   libswift_StringProcessing.so       0x00002b292e9baced <unavailable> + 285933

    11   libswift_StringProcessing.so       0x00002b292e9a042d <unavailable> + 177197

    12   libswift_StringProcessing.so       0x00002b292e99e840 BidirectionalCollection<>.firstRange<A>(of:)
    + 1517

    13   libswift_StringProcessing.so       0x00002b292e99ee70 StringProtocol.contains(_:)
    + 64

    14   tmp_1fjorjo                        0x0000555d5fec7dad <unavailable> + 7597

    15   tmp_1fjorjo                        0x0000555d5fec7625 <unavailable> + 5669

    16   libc.so.6                          0x00002b292f1c8460 __libc_start_main +
    245

    17   tmp_1fjorjo                        0x0000555d5fec72f9 <unavailable> + 4857

    '
  stdout: ''
  timestamp: 1659824846
- exit_code: 1
  program: "\n/// You are given 2 words. You need to return true if the second word\
    \ or any of its rotations is a substring in the first word\n/// >>> cycpattern_check(a:\
    \ \"abcd\", b: \"abd\")\n/// false\n/// >>> cycpattern_check(a: \"hello\", b:\
    \ \"ell\")\n/// true\n/// >>> cycpattern_check(a: \"whassup\", b: \"psus\")\n\
    /// false\n/// >>> cycpattern_check(a: \"abab\", b: \"baa\")\n/// true\n/// >>>\
    \ cycpattern_check(a: \"efef\", b: \"eeff\")\n/// false\n/// >>> cycpattern_check(a:\
    \ \"himenss\", b: \"simen\")\n/// true\nfunc cycpattern_check(a: String, b: String)\
    \ -> Bool {\n    let a = a.lowercased()\n    let b = b.lowercased()\n    if a.count\
    \ < b.count {\n        return false\n    }\n    var b = b\n    for _ in 0..<b.count\
    \ {\n        if a.contains(b) {\n            return true\n        }\n        b\
    \ = b.dropFirst() + b.prefix(1)\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(cycpattern_check(a: \"xyzw\", b: \"xyw\") == false)\n\
    assert(cycpattern_check(a: \"yello\", b: \"ell\") == true)\nassert(cycpattern_check(a:\
    \ \"whattup\", b: \"ptut\") == false)\nassert(cycpattern_check(a: \"efef\", b:\
    \ \"fee\") == true)\nassert(cycpattern_check(a: \"abab\", b: \"aabb\") == false)\n\
    assert(cycpattern_check(a: \"winemtt\", b: \"tinem\") == true)"
  status: SyntaxError
  stderr: "/tmp/tmpegg7wuwr.swift:21:9: error: invalid redeclaration of 'b'\n    var\
    \ b = b\n        ^\n/tmp/tmpegg7wuwr.swift:17:9: note: 'b' previously declared\
    \ here\n    let b = b.lowercased()\n        ^\n"
  stdout: ''
  timestamp: 1659824846
- exit_code: -4
  program: "\n/// You are given 2 words. You need to return true if the second word\
    \ or any of its rotations is a substring in the first word\n/// >>> cycpattern_check(a:\
    \ \"abcd\", b: \"abd\")\n/// false\n/// >>> cycpattern_check(a: \"hello\", b:\
    \ \"ell\")\n/// true\n/// >>> cycpattern_check(a: \"whassup\", b: \"psus\")\n\
    /// false\n/// >>> cycpattern_check(a: \"abab\", b: \"baa\")\n/// true\n/// >>>\
    \ cycpattern_check(a: \"efef\", b: \"eeff\")\n/// false\n/// >>> cycpattern_check(a:\
    \ \"himenss\", b: \"simen\")\n/// true\nfunc cycpattern_check(a: String, b: String)\
    \ -> Bool {\n    var b = b\n    for _ in 0..<b.count {\n        if a.contains(b)\
    \ {\n            return true\n        }\n        b.append(b.removeFirst())\n \
    \   }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(cycpattern_check(a:\
    \ \"xyzw\", b: \"xyw\") == false)\nassert(cycpattern_check(a: \"yello\", b: \"\
    ell\") == true)\nassert(cycpattern_check(a: \"whattup\", b: \"ptut\") == false)\n\
    assert(cycpattern_check(a: \"efef\", b: \"fee\") == true)\nassert(cycpattern_check(a:\
    \ \"abab\", b: \"aabb\") == false)\nassert(cycpattern_check(a: \"winemtt\", b:\
    \ \"tinem\") == true)"
  status: Exception
  stderr: 'Swift/Substring.swift:316: Fatal error: String index is out of bounds

    Current stack trace:

    0    libswiftCore.so                    0x00002ba9518f5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba9515ec561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ba9515ec286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ba9515ec13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ba9515ebbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftCore.so                    0x00002ba951746e40 Substring.index(_:offsetBy:)
    + 880

    6    libswiftCore.so                    0x00002ba95174b85c <unavailable> + 2873436

    7    libswiftCore.so                    0x00002ba951618920 Collection.formIndex(_:offsetBy:)
    + 116

    8    libswift_StringProcessing.so       0x00002ba9512d3b82 <unavailable> + 285570

    9    libswift_StringProcessing.so       0x00002ba9512d2b2f <unavailable> + 281391

    10   libswift_StringProcessing.so       0x00002ba9512d3ced <unavailable> + 285933

    11   libswift_StringProcessing.so       0x00002ba9512b942d <unavailable> + 177197

    12   libswift_StringProcessing.so       0x00002ba9512b7840 BidirectionalCollection<>.firstRange<A>(of:)
    + 1517

    13   libswift_StringProcessing.so       0x00002ba9512b7e70 StringProtocol.contains(_:)
    + 64

    14   tmpxxc0g7sv                        0x000055fb90321d4d <unavailable> + 7501

    15   tmpxxc0g7sv                        0x000055fb903215c5 <unavailable> + 5573

    16   libc.so.6                          0x00002ba951ae1460 __libc_start_main +
    245

    17   tmpxxc0g7sv                        0x000055fb90321299 <unavailable> + 4761

    '
  stdout: ''
  timestamp: 1659824845
- exit_code: -4
  program: "\n/// You are given 2 words. You need to return true if the second word\
    \ or any of its rotations is a substring in the first word\n/// >>> cycpattern_check(a:\
    \ \"abcd\", b: \"abd\")\n/// false\n/// >>> cycpattern_check(a: \"hello\", b:\
    \ \"ell\")\n/// true\n/// >>> cycpattern_check(a: \"whassup\", b: \"psus\")\n\
    /// false\n/// >>> cycpattern_check(a: \"abab\", b: \"baa\")\n/// true\n/// >>>\
    \ cycpattern_check(a: \"efef\", b: \"eeff\")\n/// false\n/// >>> cycpattern_check(a:\
    \ \"himenss\", b: \"simen\")\n/// true\nfunc cycpattern_check(a: String, b: String)\
    \ -> Bool {\n    var b = b\n    for _ in 0..<b.count {\n        if a.contains(b)\
    \ {\n            return true\n        }\n        let first = b.removeFirst()\n\
    \        b.append(first)\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(cycpattern_check(a: \"xyzw\", b: \"xyw\") == false)\nassert(cycpattern_check(a:\
    \ \"yello\", b: \"ell\") == true)\nassert(cycpattern_check(a: \"whattup\", b:\
    \ \"ptut\") == false)\nassert(cycpattern_check(a: \"efef\", b: \"fee\") == true)\n\
    assert(cycpattern_check(a: \"abab\", b: \"aabb\") == false)\nassert(cycpattern_check(a:\
    \ \"winemtt\", b: \"tinem\") == true)"
  status: Exception
  stderr: 'Swift/Substring.swift:316: Fatal error: String index is out of bounds

    Current stack trace:

    0    libswiftCore.so                    0x00002b6378cdbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b63789d2561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b63789d2286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b63789d213c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b63789d1bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftCore.so                    0x00002b6378b2ce40 Substring.index(_:offsetBy:)
    + 880

    6    libswiftCore.so                    0x00002b6378b3185c <unavailable> + 2873436

    7    libswiftCore.so                    0x00002b63789fe920 Collection.formIndex(_:offsetBy:)
    + 116

    8    libswift_StringProcessing.so       0x00002b63786b9b82 <unavailable> + 285570

    9    libswift_StringProcessing.so       0x00002b63786b8b2f <unavailable> + 281391

    10   libswift_StringProcessing.so       0x00002b63786b9ced <unavailable> + 285933

    11   libswift_StringProcessing.so       0x00002b637869f42d <unavailable> + 177197

    12   libswift_StringProcessing.so       0x00002b637869d840 BidirectionalCollection<>.firstRange<A>(of:)
    + 1517

    13   libswift_StringProcessing.so       0x00002b637869de70 StringProtocol.contains(_:)
    + 64

    14   tmpyz9urkyd                        0x00005629f4ae8d60 <unavailable> + 7520

    15   tmpyz9urkyd                        0x00005629f4ae85c5 <unavailable> + 5573

    16   libc.so.6                          0x00002b6378ec7460 __libc_start_main +
    245

    17   tmpyz9urkyd                        0x00005629f4ae8299 <unavailable> + 4761

    '
  stdout: ''
  timestamp: 1659824846
- exit_code: -4
  program: "\n/// You are given 2 words. You need to return true if the second word\
    \ or any of its rotations is a substring in the first word\n/// >>> cycpattern_check(a:\
    \ \"abcd\", b: \"abd\")\n/// false\n/// >>> cycpattern_check(a: \"hello\", b:\
    \ \"ell\")\n/// true\n/// >>> cycpattern_check(a: \"whassup\", b: \"psus\")\n\
    /// false\n/// >>> cycpattern_check(a: \"abab\", b: \"baa\")\n/// true\n/// >>>\
    \ cycpattern_check(a: \"efef\", b: \"eeff\")\n/// false\n/// >>> cycpattern_check(a:\
    \ \"himenss\", b: \"simen\")\n/// true\nfunc cycpattern_check(a: String, b: String)\
    \ -> Bool {\n    let a = a.lowercased()\n    let b = b.lowercased()\n    for i\
    \ in 0..<a.count {\n        let index = a.index(a.startIndex, offsetBy: i)\n \
    \       let first = String(a[..<index])\n        let second = String(a[index...])\n\
    \        let new = second + first\n        if new.contains(b) {\n            return\
    \ true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(cycpattern_check(a: \"xyzw\", b: \"xyw\") == false)\nassert(cycpattern_check(a:\
    \ \"yello\", b: \"ell\") == true)\nassert(cycpattern_check(a: \"whattup\", b:\
    \ \"ptut\") == false)\nassert(cycpattern_check(a: \"efef\", b: \"fee\") == true)\n\
    assert(cycpattern_check(a: \"abab\", b: \"aabb\") == false)\nassert(cycpattern_check(a:\
    \ \"winemtt\", b: \"tinem\") == true)"
  status: Exception
  stderr: 'Swift/Substring.swift:316: Fatal error: String index is out of bounds

    Current stack trace:

    0    libswiftCore.so                    0x00002b018e41cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b018e113561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b018e113286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b018e11313c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b018e112bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftCore.so                    0x00002b018e26de40 Substring.index(_:offsetBy:)
    + 880

    6    libswiftCore.so                    0x00002b018e27285c <unavailable> + 2873436

    7    libswiftCore.so                    0x00002b018e13f920 Collection.formIndex(_:offsetBy:)
    + 116

    8    libswift_StringProcessing.so       0x00002b018ddfab82 <unavailable> + 285570

    9    libswift_StringProcessing.so       0x00002b018ddf9b2f <unavailable> + 281391

    10   libswift_StringProcessing.so       0x00002b018ddfaced <unavailable> + 285933

    11   libswift_StringProcessing.so       0x00002b018dde042d <unavailable> + 177197

    12   libswift_StringProcessing.so       0x00002b018ddde840 BidirectionalCollection<>.firstRange<A>(of:)
    + 1517

    13   libswift_StringProcessing.so       0x00002b018dddee70 StringProtocol.contains(_:)
    + 64

    14   tmp3fabr04_                        0x00005564c25be40d <unavailable> + 9229

    15   tmp3fabr04_                        0x00005564c25bd8c5 <unavailable> + 6341

    16   libc.so.6                          0x00002b018e608460 __libc_start_main +
    245

    17   tmp3fabr04_                        0x00005564c25bd599 <unavailable> + 5529

    '
  stdout: ''
  timestamp: 1659824846
- exit_code: -4
  program: "\n/// You are given 2 words. You need to return true if the second word\
    \ or any of its rotations is a substring in the first word\n/// >>> cycpattern_check(a:\
    \ \"abcd\", b: \"abd\")\n/// false\n/// >>> cycpattern_check(a: \"hello\", b:\
    \ \"ell\")\n/// true\n/// >>> cycpattern_check(a: \"whassup\", b: \"psus\")\n\
    /// false\n/// >>> cycpattern_check(a: \"abab\", b: \"baa\")\n/// true\n/// >>>\
    \ cycpattern_check(a: \"efef\", b: \"eeff\")\n/// false\n/// >>> cycpattern_check(a:\
    \ \"himenss\", b: \"simen\")\n/// true\nfunc cycpattern_check(a: String, b: String)\
    \ -> Bool {\n    let a = Array(a)\n    let b = Array(b)\n    let n = a.count\n\
    \    let m = b.count\n    var i = 0\n    var j = 0\n    while i < n {\n      \
    \  if a[i] == b[j] {\n            j += 1\n        } else {\n            j = 0\n\
    \        }\n        if j == m {\n            return true\n        }\n        i\
    \ += 1\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(cycpattern_check(a:\
    \ \"xyzw\", b: \"xyw\") == false)\nassert(cycpattern_check(a: \"yello\", b: \"\
    ell\") == true)\nassert(cycpattern_check(a: \"whattup\", b: \"ptut\") == false)\n\
    assert(cycpattern_check(a: \"efef\", b: \"fee\") == true)\nassert(cycpattern_check(a:\
    \ \"abab\", b: \"aabb\") == false)\nassert(cycpattern_check(a: \"winemtt\", b:\
    \ \"tinem\") == true)"
  status: Exception
  stderr: 'tmp0b06jrfg/tmp0b06jrfg.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b32272c3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3226fbab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3226fba988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3226fb97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0b06jrfg                        0x00005604c84627a5 <unavailable> + 6053

    5    libc.so.6                          0x00002b32274af460 __libc_start_main +
    245

    6    tmp0b06jrfg                        0x00005604c8462109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1659824845
- exit_code: 1
  program: "\n/// You are given 2 words. You need to return true if the second word\
    \ or any of its rotations is a substring in the first word\n/// >>> cycpattern_check(a:\
    \ \"abcd\", b: \"abd\")\n/// false\n/// >>> cycpattern_check(a: \"hello\", b:\
    \ \"ell\")\n/// true\n/// >>> cycpattern_check(a: \"whassup\", b: \"psus\")\n\
    /// false\n/// >>> cycpattern_check(a: \"abab\", b: \"baa\")\n/// true\n/// >>>\
    \ cycpattern_check(a: \"efef\", b: \"eeff\")\n/// false\n/// >>> cycpattern_check(a:\
    \ \"himenss\", b: \"simen\")\n/// true\nfunc cycpattern_check(a: String, b: String)\
    \ -> Bool {\n    let a = a.characters.map { String($0) }\n    let b = b.characters.map\
    \ { String($0) }\n    let a_len = a.count\n    let b_len = b.count\n    if a_len\
    \ < b_len {\n        return false\n    }\n    for i in 0..<a_len {\n        var\
    \ j = 0\n        while j < b_len && a[(i + j) % a_len] == b[j] {\n           \
    \ j += 1\n        }\n        if j == b_len {\n            return true\n      \
    \  }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(cycpattern_check(a:\
    \ \"xyzw\", b: \"xyw\") == false)\nassert(cycpattern_check(a: \"yello\", b: \"\
    ell\") == true)\nassert(cycpattern_check(a: \"whattup\", b: \"ptut\") == false)\n\
    assert(cycpattern_check(a: \"efef\", b: \"fee\") == true)\nassert(cycpattern_check(a:\
    \ \"abab\", b: \"aabb\") == false)\nassert(cycpattern_check(a: \"winemtt\", b:\
    \ \"tinem\") == true)"
  status: SyntaxError
  stderr: "/tmp/tmplkf75sa_.swift:16:15: error: 'characters' is unavailable: Please\
    \ use String directly\n    let a = a.characters.map { String($0) }\n         \
    \     ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmplkf75sa_.swift:17:15:\
    \ error: 'characters' is unavailable: Please use String directly\n    let b =\
    \ b.characters.map { String($0) }\n              ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n"
  stdout: ''
  timestamp: 1659824846
- exit_code: -4
  program: "\n/// You are given 2 words. You need to return true if the second word\
    \ or any of its rotations is a substring in the first word\n/// >>> cycpattern_check(a:\
    \ \"abcd\", b: \"abd\")\n/// false\n/// >>> cycpattern_check(a: \"hello\", b:\
    \ \"ell\")\n/// true\n/// >>> cycpattern_check(a: \"whassup\", b: \"psus\")\n\
    /// false\n/// >>> cycpattern_check(a: \"abab\", b: \"baa\")\n/// true\n/// >>>\
    \ cycpattern_check(a: \"efef\", b: \"eeff\")\n/// false\n/// >>> cycpattern_check(a:\
    \ \"himenss\", b: \"simen\")\n/// true\nfunc cycpattern_check(a: String, b: String)\
    \ -> Bool {\n    let a = Array(a)\n    let b = Array(b)\n    let n = a.count\n\
    \    let m = b.count\n    var i = 0\n    var j = 0\n    while i < n {\n      \
    \  if a[i] == b[j] {\n            i += 1\n            j += 1\n            if j\
    \ == m {\n                return true\n            }\n        } else {\n     \
    \       i = i - j + 1\n            j = 0\n        }\n    }\n    return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(cycpattern_check(a: \"xyzw\", b: \"xyw\") == false)\n\
    assert(cycpattern_check(a: \"yello\", b: \"ell\") == true)\nassert(cycpattern_check(a:\
    \ \"whattup\", b: \"ptut\") == false)\nassert(cycpattern_check(a: \"efef\", b:\
    \ \"fee\") == true)\nassert(cycpattern_check(a: \"abab\", b: \"aabb\") == false)\n\
    assert(cycpattern_check(a: \"winemtt\", b: \"tinem\") == true)"
  status: Exception
  stderr: 'tmpqss69acj/tmpqss69acj.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba188107c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba187dfeb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba187dfe988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba187dfd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqss69acj                        0x00005570446fa7a5 <unavailable> + 6053

    5    libc.so.6                          0x00002ba1882f3460 __libc_start_main +
    245

    6    tmpqss69acj                        0x00005570446fa109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1659824845
- exit_code: -4
  program: "\n/// You are given 2 words. You need to return true if the second word\
    \ or any of its rotations is a substring in the first word\n/// >>> cycpattern_check(a:\
    \ \"abcd\", b: \"abd\")\n/// false\n/// >>> cycpattern_check(a: \"hello\", b:\
    \ \"ell\")\n/// true\n/// >>> cycpattern_check(a: \"whassup\", b: \"psus\")\n\
    /// false\n/// >>> cycpattern_check(a: \"abab\", b: \"baa\")\n/// true\n/// >>>\
    \ cycpattern_check(a: \"efef\", b: \"eeff\")\n/// false\n/// >>> cycpattern_check(a:\
    \ \"himenss\", b: \"simen\")\n/// true\nfunc cycpattern_check(a: String, b: String)\
    \ -> Bool {\n    guard a.count >= b.count else { return false }\n    let a = Array(a)\n\
    \    let b = Array(b)\n    for i in 0..<a.count {\n        if a[i] == b[0] {\n\
    \            var j = 1\n            while j < b.count && a[(i + j) % a.count]\
    \ == b[j] {\n                j += 1\n            }\n            if j == b.count\
    \ {\n                return true\n            }\n        }\n    }\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(cycpattern_check(a: \"\
    xyzw\", b: \"xyw\") == false)\nassert(cycpattern_check(a: \"yello\", b: \"ell\"\
    ) == true)\nassert(cycpattern_check(a: \"whattup\", b: \"ptut\") == false)\nassert(cycpattern_check(a:\
    \ \"efef\", b: \"fee\") == true)\nassert(cycpattern_check(a: \"abab\", b: \"aabb\"\
    ) == false)\nassert(cycpattern_check(a: \"winemtt\", b: \"tinem\") == true)"
  status: Exception
  stderr: 'tmpzr91ryab/tmpzr91ryab.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8fc0956c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8fc064db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8fc064d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8fc064c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzr91ryab                        0x0000559206f1c9c5 <unavailable> + 6597

    5    libc.so.6                          0x00002b8fc0b42460 __libc_start_main +
    245

    6    tmpzr91ryab                        0x0000559206f1c329 <unavailable> + 4905

    '
  stdout: ''
  timestamp: 1659824846
- exit_code: -4
  program: "\n/// You are given 2 words. You need to return true if the second word\
    \ or any of its rotations is a substring in the first word\n/// >>> cycpattern_check(a:\
    \ \"abcd\", b: \"abd\")\n/// false\n/// >>> cycpattern_check(a: \"hello\", b:\
    \ \"ell\")\n/// true\n/// >>> cycpattern_check(a: \"whassup\", b: \"psus\")\n\
    /// false\n/// >>> cycpattern_check(a: \"abab\", b: \"baa\")\n/// true\n/// >>>\
    \ cycpattern_check(a: \"efef\", b: \"eeff\")\n/// false\n/// >>> cycpattern_check(a:\
    \ \"himenss\", b: \"simen\")\n/// true\nfunc cycpattern_check(a: String, b: String)\
    \ -> Bool {\n    var b = b\n    for _ in 0..<b.count {\n        if a.contains(b)\
    \ {\n            return true\n        }\n        b.append(b.removeFirst())\n \
    \   }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(cycpattern_check(a:\
    \ \"xyzw\", b: \"xyw\") == false)\nassert(cycpattern_check(a: \"yello\", b: \"\
    ell\") == true)\nassert(cycpattern_check(a: \"whattup\", b: \"ptut\") == false)\n\
    assert(cycpattern_check(a: \"efef\", b: \"fee\") == true)\nassert(cycpattern_check(a:\
    \ \"abab\", b: \"aabb\") == false)\nassert(cycpattern_check(a: \"winemtt\", b:\
    \ \"tinem\") == true)"
  status: Exception
  stderr: 'Swift/Substring.swift:316: Fatal error: String index is out of bounds

    Current stack trace:

    0    libswiftCore.so                    0x00002ba9518f5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba9515ec561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ba9515ec286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ba9515ec13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ba9515ebbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftCore.so                    0x00002ba951746e40 Substring.index(_:offsetBy:)
    + 880

    6    libswiftCore.so                    0x00002ba95174b85c <unavailable> + 2873436

    7    libswiftCore.so                    0x00002ba951618920 Collection.formIndex(_:offsetBy:)
    + 116

    8    libswift_StringProcessing.so       0x00002ba9512d3b82 <unavailable> + 285570

    9    libswift_StringProcessing.so       0x00002ba9512d2b2f <unavailable> + 281391

    10   libswift_StringProcessing.so       0x00002ba9512d3ced <unavailable> + 285933

    11   libswift_StringProcessing.so       0x00002ba9512b942d <unavailable> + 177197

    12   libswift_StringProcessing.so       0x00002ba9512b7840 BidirectionalCollection<>.firstRange<A>(of:)
    + 1517

    13   libswift_StringProcessing.so       0x00002ba9512b7e70 StringProtocol.contains(_:)
    + 64

    14   tmpxxc0g7sv                        0x000055fb90321d4d <unavailable> + 7501

    15   tmpxxc0g7sv                        0x000055fb903215c5 <unavailable> + 5573

    16   libc.so.6                          0x00002ba951ae1460 __libc_start_main +
    245

    17   tmpxxc0g7sv                        0x000055fb90321299 <unavailable> + 4761

    '
  stdout: ''
  timestamp: 1659824845
- exit_code: -4
  program: "\n/// You are given 2 words. You need to return true if the second word\
    \ or any of its rotations is a substring in the first word\n/// >>> cycpattern_check(a:\
    \ \"abcd\", b: \"abd\")\n/// false\n/// >>> cycpattern_check(a: \"hello\", b:\
    \ \"ell\")\n/// true\n/// >>> cycpattern_check(a: \"whassup\", b: \"psus\")\n\
    /// false\n/// >>> cycpattern_check(a: \"abab\", b: \"baa\")\n/// true\n/// >>>\
    \ cycpattern_check(a: \"efef\", b: \"eeff\")\n/// false\n/// >>> cycpattern_check(a:\
    \ \"himenss\", b: \"simen\")\n/// true\nfunc cycpattern_check(a: String, b: String)\
    \ -> Bool {\n    let a = Array(a)\n    let b = Array(b)\n    let b_len = b.count\n\
    \    let a_len = a.count\n    if b_len > a_len {\n        return false\n    }\n\
    \    for i in 0..<a_len {\n        var j = 0\n        while j < b_len && a[(i\
    \ + j) % a_len] == b[j] {\n            j += 1\n        }\n        if j == b_len\
    \ {\n            return true\n        }\n    }\n    return false\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(cycpattern_check(a: \"xyzw\", b: \"xyw\") == false)\n\
    assert(cycpattern_check(a: \"yello\", b: \"ell\") == true)\nassert(cycpattern_check(a:\
    \ \"whattup\", b: \"ptut\") == false)\nassert(cycpattern_check(a: \"efef\", b:\
    \ \"fee\") == true)\nassert(cycpattern_check(a: \"abab\", b: \"aabb\") == false)\n\
    assert(cycpattern_check(a: \"winemtt\", b: \"tinem\") == true)"
  status: Exception
  stderr: 'tmpwqspn3u5/tmpwqspn3u5.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad3eccadc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad3ec9a4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad3ec9a4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad3ec9a37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwqspn3u5                        0x0000563674d6a975 <unavailable> + 6517

    5    libc.so.6                          0x00002ad3ece99460 __libc_start_main +
    245

    6    tmpwqspn3u5                        0x0000563674d6a2d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1659824846
- exit_code: -4
  program: "\n/// You are given 2 words. You need to return true if the second word\
    \ or any of its rotations is a substring in the first word\n/// >>> cycpattern_check(a:\
    \ \"abcd\", b: \"abd\")\n/// false\n/// >>> cycpattern_check(a: \"hello\", b:\
    \ \"ell\")\n/// true\n/// >>> cycpattern_check(a: \"whassup\", b: \"psus\")\n\
    /// false\n/// >>> cycpattern_check(a: \"abab\", b: \"baa\")\n/// true\n/// >>>\
    \ cycpattern_check(a: \"efef\", b: \"eeff\")\n/// false\n/// >>> cycpattern_check(a:\
    \ \"himenss\", b: \"simen\")\n/// true\nfunc cycpattern_check(a: String, b: String)\
    \ -> Bool {\n    var b = b\n    for _ in 0..<b.count {\n        if a.contains(b)\
    \ {\n            return true\n        }\n        b.append(b.removeFirst())\n \
    \   }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(cycpattern_check(a:\
    \ \"xyzw\", b: \"xyw\") == false)\nassert(cycpattern_check(a: \"yello\", b: \"\
    ell\") == true)\nassert(cycpattern_check(a: \"whattup\", b: \"ptut\") == false)\n\
    assert(cycpattern_check(a: \"efef\", b: \"fee\") == true)\nassert(cycpattern_check(a:\
    \ \"abab\", b: \"aabb\") == false)\nassert(cycpattern_check(a: \"winemtt\", b:\
    \ \"tinem\") == true)"
  status: Exception
  stderr: 'Swift/Substring.swift:316: Fatal error: String index is out of bounds

    Current stack trace:

    0    libswiftCore.so                    0x00002ba9518f5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba9515ec561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ba9515ec286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ba9515ec13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ba9515ebbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftCore.so                    0x00002ba951746e40 Substring.index(_:offsetBy:)
    + 880

    6    libswiftCore.so                    0x00002ba95174b85c <unavailable> + 2873436

    7    libswiftCore.so                    0x00002ba951618920 Collection.formIndex(_:offsetBy:)
    + 116

    8    libswift_StringProcessing.so       0x00002ba9512d3b82 <unavailable> + 285570

    9    libswift_StringProcessing.so       0x00002ba9512d2b2f <unavailable> + 281391

    10   libswift_StringProcessing.so       0x00002ba9512d3ced <unavailable> + 285933

    11   libswift_StringProcessing.so       0x00002ba9512b942d <unavailable> + 177197

    12   libswift_StringProcessing.so       0x00002ba9512b7840 BidirectionalCollection<>.firstRange<A>(of:)
    + 1517

    13   libswift_StringProcessing.so       0x00002ba9512b7e70 StringProtocol.contains(_:)
    + 64

    14   tmpxxc0g7sv                        0x000055fb90321d4d <unavailable> + 7501

    15   tmpxxc0g7sv                        0x000055fb903215c5 <unavailable> + 5573

    16   libc.so.6                          0x00002ba951ae1460 __libc_start_main +
    245

    17   tmpxxc0g7sv                        0x000055fb90321299 <unavailable> + 4761

    '
  stdout: ''
  timestamp: 1659824845
- exit_code: -4
  program: "\n/// You are given 2 words. You need to return true if the second word\
    \ or any of its rotations is a substring in the first word\n/// >>> cycpattern_check(a:\
    \ \"abcd\", b: \"abd\")\n/// false\n/// >>> cycpattern_check(a: \"hello\", b:\
    \ \"ell\")\n/// true\n/// >>> cycpattern_check(a: \"whassup\", b: \"psus\")\n\
    /// false\n/// >>> cycpattern_check(a: \"abab\", b: \"baa\")\n/// true\n/// >>>\
    \ cycpattern_check(a: \"efef\", b: \"eeff\")\n/// false\n/// >>> cycpattern_check(a:\
    \ \"himenss\", b: \"simen\")\n/// true\nfunc cycpattern_check(a: String, b: String)\
    \ -> Bool {\n    guard a.count > b.count else { return false }\n    let b = b\
    \ + b\n    return b.contains(a)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(cycpattern_check(a:\
    \ \"xyzw\", b: \"xyw\") == false)\nassert(cycpattern_check(a: \"yello\", b: \"\
    ell\") == true)\nassert(cycpattern_check(a: \"whattup\", b: \"ptut\") == false)\n\
    assert(cycpattern_check(a: \"efef\", b: \"fee\") == true)\nassert(cycpattern_check(a:\
    \ \"abab\", b: \"aabb\") == false)\nassert(cycpattern_check(a: \"winemtt\", b:\
    \ \"tinem\") == true)"
  status: Exception
  stderr: 'Swift/Substring.swift:316: Fatal error: String index is out of bounds

    Current stack trace:

    0    libswiftCore.so                    0x00002aece9e59c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aece9b50561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002aece9b50286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002aece9b5013c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002aece9b4fbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftCore.so                    0x00002aece9caae40 Substring.index(_:offsetBy:)
    + 880

    6    libswiftCore.so                    0x00002aece9caf85c <unavailable> + 2873436

    7    libswiftCore.so                    0x00002aece9b7c920 Collection.formIndex(_:offsetBy:)
    + 116

    8    libswift_StringProcessing.so       0x00002aece9837b82 <unavailable> + 285570

    9    libswift_StringProcessing.so       0x00002aece9836b2f <unavailable> + 281391

    10   libswift_StringProcessing.so       0x00002aece9837ced <unavailable> + 285933

    11   libswift_StringProcessing.so       0x00002aece981d42d <unavailable> + 177197

    12   libswift_StringProcessing.so       0x00002aece981b840 BidirectionalCollection<>.firstRange<A>(of:)
    + 1517

    13   libswift_StringProcessing.so       0x00002aece981be70 StringProtocol.contains(_:)
    + 64

    14   tmpjr729454                        0x00005644b1397a10 <unavailable> + 6672

    15   tmpjr729454                        0x00005644b13973a5 <unavailable> + 5029

    16   libc.so.6                          0x00002aecea045460 __libc_start_main +
    245

    17   tmpjr729454                        0x00005644b1397079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1659824846
- exit_code: -4
  program: "\n/// You are given 2 words. You need to return true if the second word\
    \ or any of its rotations is a substring in the first word\n/// >>> cycpattern_check(a:\
    \ \"abcd\", b: \"abd\")\n/// false\n/// >>> cycpattern_check(a: \"hello\", b:\
    \ \"ell\")\n/// true\n/// >>> cycpattern_check(a: \"whassup\", b: \"psus\")\n\
    /// false\n/// >>> cycpattern_check(a: \"abab\", b: \"baa\")\n/// true\n/// >>>\
    \ cycpattern_check(a: \"efef\", b: \"eeff\")\n/// false\n/// >>> cycpattern_check(a:\
    \ \"himenss\", b: \"simen\")\n/// true\nfunc cycpattern_check(a: String, b: String)\
    \ -> Bool {\n    var b = b\n    for _ in 0..<b.count {\n        if a.contains(b)\
    \ {\n            return true\n        }\n        b.append(b.removeFirst())\n \
    \   }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(cycpattern_check(a:\
    \ \"xyzw\", b: \"xyw\") == false)\nassert(cycpattern_check(a: \"yello\", b: \"\
    ell\") == true)\nassert(cycpattern_check(a: \"whattup\", b: \"ptut\") == false)\n\
    assert(cycpattern_check(a: \"efef\", b: \"fee\") == true)\nassert(cycpattern_check(a:\
    \ \"abab\", b: \"aabb\") == false)\nassert(cycpattern_check(a: \"winemtt\", b:\
    \ \"tinem\") == true)"
  status: Exception
  stderr: 'Swift/Substring.swift:316: Fatal error: String index is out of bounds

    Current stack trace:

    0    libswiftCore.so                    0x00002ba9518f5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba9515ec561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ba9515ec286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ba9515ec13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ba9515ebbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftCore.so                    0x00002ba951746e40 Substring.index(_:offsetBy:)
    + 880

    6    libswiftCore.so                    0x00002ba95174b85c <unavailable> + 2873436

    7    libswiftCore.so                    0x00002ba951618920 Collection.formIndex(_:offsetBy:)
    + 116

    8    libswift_StringProcessing.so       0x00002ba9512d3b82 <unavailable> + 285570

    9    libswift_StringProcessing.so       0x00002ba9512d2b2f <unavailable> + 281391

    10   libswift_StringProcessing.so       0x00002ba9512d3ced <unavailable> + 285933

    11   libswift_StringProcessing.so       0x00002ba9512b942d <unavailable> + 177197

    12   libswift_StringProcessing.so       0x00002ba9512b7840 BidirectionalCollection<>.firstRange<A>(of:)
    + 1517

    13   libswift_StringProcessing.so       0x00002ba9512b7e70 StringProtocol.contains(_:)
    + 64

    14   tmpxxc0g7sv                        0x000055fb90321d4d <unavailable> + 7501

    15   tmpxxc0g7sv                        0x000055fb903215c5 <unavailable> + 5573

    16   libc.so.6                          0x00002ba951ae1460 __libc_start_main +
    245

    17   tmpxxc0g7sv                        0x000055fb90321299 <unavailable> + 4761

    '
  stdout: ''
  timestamp: 1659824845
- exit_code: -4
  program: "\n/// You are given 2 words. You need to return true if the second word\
    \ or any of its rotations is a substring in the first word\n/// >>> cycpattern_check(a:\
    \ \"abcd\", b: \"abd\")\n/// false\n/// >>> cycpattern_check(a: \"hello\", b:\
    \ \"ell\")\n/// true\n/// >>> cycpattern_check(a: \"whassup\", b: \"psus\")\n\
    /// false\n/// >>> cycpattern_check(a: \"abab\", b: \"baa\")\n/// true\n/// >>>\
    \ cycpattern_check(a: \"efef\", b: \"eeff\")\n/// false\n/// >>> cycpattern_check(a:\
    \ \"himenss\", b: \"simen\")\n/// true\nfunc cycpattern_check(a: String, b: String)\
    \ -> Bool {\n    var b = b\n    for _ in 0..<b.count {\n        if a.contains(b)\
    \ {\n            return true\n        }\n        b.append(b.removeFirst())\n \
    \   }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(cycpattern_check(a:\
    \ \"xyzw\", b: \"xyw\") == false)\nassert(cycpattern_check(a: \"yello\", b: \"\
    ell\") == true)\nassert(cycpattern_check(a: \"whattup\", b: \"ptut\") == false)\n\
    assert(cycpattern_check(a: \"efef\", b: \"fee\") == true)\nassert(cycpattern_check(a:\
    \ \"abab\", b: \"aabb\") == false)\nassert(cycpattern_check(a: \"winemtt\", b:\
    \ \"tinem\") == true)"
  status: Exception
  stderr: 'Swift/Substring.swift:316: Fatal error: String index is out of bounds

    Current stack trace:

    0    libswiftCore.so                    0x00002ba9518f5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba9515ec561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ba9515ec286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ba9515ec13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ba9515ebbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftCore.so                    0x00002ba951746e40 Substring.index(_:offsetBy:)
    + 880

    6    libswiftCore.so                    0x00002ba95174b85c <unavailable> + 2873436

    7    libswiftCore.so                    0x00002ba951618920 Collection.formIndex(_:offsetBy:)
    + 116

    8    libswift_StringProcessing.so       0x00002ba9512d3b82 <unavailable> + 285570

    9    libswift_StringProcessing.so       0x00002ba9512d2b2f <unavailable> + 281391

    10   libswift_StringProcessing.so       0x00002ba9512d3ced <unavailable> + 285933

    11   libswift_StringProcessing.so       0x00002ba9512b942d <unavailable> + 177197

    12   libswift_StringProcessing.so       0x00002ba9512b7840 BidirectionalCollection<>.firstRange<A>(of:)
    + 1517

    13   libswift_StringProcessing.so       0x00002ba9512b7e70 StringProtocol.contains(_:)
    + 64

    14   tmpxxc0g7sv                        0x000055fb90321d4d <unavailable> + 7501

    15   tmpxxc0g7sv                        0x000055fb903215c5 <unavailable> + 5573

    16   libc.so.6                          0x00002ba951ae1460 __libc_start_main +
    245

    17   tmpxxc0g7sv                        0x000055fb90321299 <unavailable> + 4761

    '
  stdout: ''
  timestamp: 1659824845
- exit_code: -4
  program: "\n/// You are given 2 words. You need to return true if the second word\
    \ or any of its rotations is a substring in the first word\n/// >>> cycpattern_check(a:\
    \ \"abcd\", b: \"abd\")\n/// false\n/// >>> cycpattern_check(a: \"hello\", b:\
    \ \"ell\")\n/// true\n/// >>> cycpattern_check(a: \"whassup\", b: \"psus\")\n\
    /// false\n/// >>> cycpattern_check(a: \"abab\", b: \"baa\")\n/// true\n/// >>>\
    \ cycpattern_check(a: \"efef\", b: \"eeff\")\n/// false\n/// >>> cycpattern_check(a:\
    \ \"himenss\", b: \"simen\")\n/// true\nfunc cycpattern_check(a: String, b: String)\
    \ -> Bool {\n    var a = a\n    var b = b\n    if a.count < b.count {\n      \
    \  return false\n    }\n    for _ in 0..<a.count {\n        if a.contains(b) {\n\
    \            return true\n        }\n        a.append(a.removeFirst())\n    }\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(cycpattern_check(a:\
    \ \"xyzw\", b: \"xyw\") == false)\nassert(cycpattern_check(a: \"yello\", b: \"\
    ell\") == true)\nassert(cycpattern_check(a: \"whattup\", b: \"ptut\") == false)\n\
    assert(cycpattern_check(a: \"efef\", b: \"fee\") == true)\nassert(cycpattern_check(a:\
    \ \"abab\", b: \"aabb\") == false)\nassert(cycpattern_check(a: \"winemtt\", b:\
    \ \"tinem\") == true)"
  status: Exception
  stderr: 'Swift/Substring.swift:316: Fatal error: String index is out of bounds

    Current stack trace:

    0    libswiftCore.so                    0x00002ab3d3ee4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab3d3bdb561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ab3d3bdb286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ab3d3bdb13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ab3d3bdabb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftCore.so                    0x00002ab3d3d35e40 Substring.index(_:offsetBy:)
    + 880

    6    libswiftCore.so                    0x00002ab3d3d3a85c <unavailable> + 2873436

    7    libswiftCore.so                    0x00002ab3d3c07920 Collection.formIndex(_:offsetBy:)
    + 116

    8    libswift_StringProcessing.so       0x00002ab3d38c2b82 <unavailable> + 285570

    9    libswift_StringProcessing.so       0x00002ab3d38c1b2f <unavailable> + 281391

    10   libswift_StringProcessing.so       0x00002ab3d38c2ced <unavailable> + 285933

    11   libswift_StringProcessing.so       0x00002ab3d38a842d <unavailable> + 177197

    12   libswift_StringProcessing.so       0x00002ab3d38a6840 BidirectionalCollection<>.firstRange<A>(of:)
    + 1517

    13   libswift_StringProcessing.so       0x00002ab3d38a6e70 StringProtocol.contains(_:)
    + 64

    14   tmpst2ie6pm                        0x00005647168e3e5c <unavailable> + 7772

    15   tmpst2ie6pm                        0x00005647168e35c5 <unavailable> + 5573

    16   libc.so.6                          0x00002ab3d40d0460 __libc_start_main +
    245

    17   tmpst2ie6pm                        0x00005647168e3299 <unavailable> + 4761

    '
  stdout: ''
  timestamp: 1659824845
- exit_code: -4
  program: "\n/// You are given 2 words. You need to return true if the second word\
    \ or any of its rotations is a substring in the first word\n/// >>> cycpattern_check(a:\
    \ \"abcd\", b: \"abd\")\n/// false\n/// >>> cycpattern_check(a: \"hello\", b:\
    \ \"ell\")\n/// true\n/// >>> cycpattern_check(a: \"whassup\", b: \"psus\")\n\
    /// false\n/// >>> cycpattern_check(a: \"abab\", b: \"baa\")\n/// true\n/// >>>\
    \ cycpattern_check(a: \"efef\", b: \"eeff\")\n/// false\n/// >>> cycpattern_check(a:\
    \ \"himenss\", b: \"simen\")\n/// true\nfunc cycpattern_check(a: String, b: String)\
    \ -> Bool {\n    var a = a\n    var b = b\n    if a.count < b.count {\n      \
    \  return false\n    }\n    for _ in 0..<a.count {\n        if a.contains(b) {\n\
    \            return true\n        }\n        a.append(a.removeFirst())\n    }\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(cycpattern_check(a:\
    \ \"xyzw\", b: \"xyw\") == false)\nassert(cycpattern_check(a: \"yello\", b: \"\
    ell\") == true)\nassert(cycpattern_check(a: \"whattup\", b: \"ptut\") == false)\n\
    assert(cycpattern_check(a: \"efef\", b: \"fee\") == true)\nassert(cycpattern_check(a:\
    \ \"abab\", b: \"aabb\") == false)\nassert(cycpattern_check(a: \"winemtt\", b:\
    \ \"tinem\") == true)"
  status: Exception
  stderr: 'Swift/Substring.swift:316: Fatal error: String index is out of bounds

    Current stack trace:

    0    libswiftCore.so                    0x00002ab3d3ee4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab3d3bdb561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ab3d3bdb286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ab3d3bdb13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ab3d3bdabb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftCore.so                    0x00002ab3d3d35e40 Substring.index(_:offsetBy:)
    + 880

    6    libswiftCore.so                    0x00002ab3d3d3a85c <unavailable> + 2873436

    7    libswiftCore.so                    0x00002ab3d3c07920 Collection.formIndex(_:offsetBy:)
    + 116

    8    libswift_StringProcessing.so       0x00002ab3d38c2b82 <unavailable> + 285570

    9    libswift_StringProcessing.so       0x00002ab3d38c1b2f <unavailable> + 281391

    10   libswift_StringProcessing.so       0x00002ab3d38c2ced <unavailable> + 285933

    11   libswift_StringProcessing.so       0x00002ab3d38a842d <unavailable> + 177197

    12   libswift_StringProcessing.so       0x00002ab3d38a6840 BidirectionalCollection<>.firstRange<A>(of:)
    + 1517

    13   libswift_StringProcessing.so       0x00002ab3d38a6e70 StringProtocol.contains(_:)
    + 64

    14   tmpst2ie6pm                        0x00005647168e3e5c <unavailable> + 7772

    15   tmpst2ie6pm                        0x00005647168e35c5 <unavailable> + 5573

    16   libc.so.6                          0x00002ab3d40d0460 __libc_start_main +
    245

    17   tmpst2ie6pm                        0x00005647168e3299 <unavailable> + 4761

    '
  stdout: ''
  timestamp: 1659824845
- exit_code: -4
  program: "\n/// You are given 2 words. You need to return true if the second word\
    \ or any of its rotations is a substring in the first word\n/// >>> cycpattern_check(a:\
    \ \"abcd\", b: \"abd\")\n/// false\n/// >>> cycpattern_check(a: \"hello\", b:\
    \ \"ell\")\n/// true\n/// >>> cycpattern_check(a: \"whassup\", b: \"psus\")\n\
    /// false\n/// >>> cycpattern_check(a: \"abab\", b: \"baa\")\n/// true\n/// >>>\
    \ cycpattern_check(a: \"efef\", b: \"eeff\")\n/// false\n/// >>> cycpattern_check(a:\
    \ \"himenss\", b: \"simen\")\n/// true\nfunc cycpattern_check(a: String, b: String)\
    \ -> Bool {\n    let a = Array(a)\n    let b = Array(b)\n    let a_len = a.count\n\
    \    let b_len = b.count\n    if a_len < b_len {\n        return false\n    }\n\
    \    var i = 0\n    while i < a_len {\n        var j = 0\n        while j < b_len\
    \ {\n            if a[(i + j) % a_len] != b[j] {\n                break\n    \
    \        }\n            j += 1\n        }\n        if j == b_len {\n         \
    \   return true\n        }\n        i += 1\n    }\n    return false\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(cycpattern_check(a: \"xyzw\", b: \"xyw\") == false)\n\
    assert(cycpattern_check(a: \"yello\", b: \"ell\") == true)\nassert(cycpattern_check(a:\
    \ \"whattup\", b: \"ptut\") == false)\nassert(cycpattern_check(a: \"efef\", b:\
    \ \"fee\") == true)\nassert(cycpattern_check(a: \"abab\", b: \"aabb\") == false)\n\
    assert(cycpattern_check(a: \"winemtt\", b: \"tinem\") == true)"
  status: Exception
  stderr: 'tmp1jtp0_ke/tmp1jtp0_ke.swift:56: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b824eaf4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b824e7ebb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b824e7eb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b824e7ea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1jtp0_ke                        0x0000557e52193835 <unavailable> + 6197

    5    libc.so.6                          0x00002b824ece0460 __libc_start_main +
    245

    6    tmp1jtp0_ke                        0x0000557e52193199 <unavailable> + 4505

    '
  stdout: ''
  timestamp: 1659824845
- exit_code: 1
  program: "\n/// You are given 2 words. You need to return true if the second word\
    \ or any of its rotations is a substring in the first word\n/// >>> cycpattern_check(a:\
    \ \"abcd\", b: \"abd\")\n/// false\n/// >>> cycpattern_check(a: \"hello\", b:\
    \ \"ell\")\n/// true\n/// >>> cycpattern_check(a: \"whassup\", b: \"psus\")\n\
    /// false\n/// >>> cycpattern_check(a: \"abab\", b: \"baa\")\n/// true\n/// >>>\
    \ cycpattern_check(a: \"efef\", b: \"eeff\")\n/// false\n/// >>> cycpattern_check(a:\
    \ \"himenss\", b: \"simen\")\n/// true\nfunc cycpattern_check(a: String, b: String)\
    \ -> Bool {\n    if a.count != b.count {\n        return false\n    }\n    let\
    \ b_rotations = b.rotations()\n    for b_rotation in b_rotations {\n        if\
    \ a.contains(b_rotation) {\n            return true\n        }\n    }\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(cycpattern_check(a: \"\
    xyzw\", b: \"xyw\") == false)\nassert(cycpattern_check(a: \"yello\", b: \"ell\"\
    ) == true)\nassert(cycpattern_check(a: \"whattup\", b: \"ptut\") == false)\nassert(cycpattern_check(a:\
    \ \"efef\", b: \"fee\") == true)\nassert(cycpattern_check(a: \"abab\", b: \"aabb\"\
    ) == false)\nassert(cycpattern_check(a: \"winemtt\", b: \"tinem\") == true)"
  status: SyntaxError
  stderr: "/tmp/tmpr7e7ayek.swift:19:25: error: value of type 'String' has no member\
    \ 'rotations'\n    let b_rotations = b.rotations()\n                      ~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824846
- exit_code: -4
  program: "\n/// You are given 2 words. You need to return true if the second word\
    \ or any of its rotations is a substring in the first word\n/// >>> cycpattern_check(a:\
    \ \"abcd\", b: \"abd\")\n/// false\n/// >>> cycpattern_check(a: \"hello\", b:\
    \ \"ell\")\n/// true\n/// >>> cycpattern_check(a: \"whassup\", b: \"psus\")\n\
    /// false\n/// >>> cycpattern_check(a: \"abab\", b: \"baa\")\n/// true\n/// >>>\
    \ cycpattern_check(a: \"efef\", b: \"eeff\")\n/// false\n/// >>> cycpattern_check(a:\
    \ \"himenss\", b: \"simen\")\n/// true\nfunc cycpattern_check(a: String, b: String)\
    \ -> Bool {\n    if a.count < b.count {\n        return false\n    }\n    let\
    \ a = Array(a)\n    let b = Array(b)\n    for i in 0..<a.count {\n        if a[i]\
    \ == b[0] {\n            var j = 1\n            while j < b.count && a[(i + j)\
    \ % a.count] == b[j] {\n                j += 1\n            }\n            if\
    \ j == b.count {\n                return true\n            }\n        }\n    }\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(cycpattern_check(a:\
    \ \"xyzw\", b: \"xyw\") == false)\nassert(cycpattern_check(a: \"yello\", b: \"\
    ell\") == true)\nassert(cycpattern_check(a: \"whattup\", b: \"ptut\") == false)\n\
    assert(cycpattern_check(a: \"efef\", b: \"fee\") == true)\nassert(cycpattern_check(a:\
    \ \"abab\", b: \"aabb\") == false)\nassert(cycpattern_check(a: \"winemtt\", b:\
    \ \"tinem\") == true)"
  status: Exception
  stderr: 'tmpbzua32xv/tmpbzua32xv.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af4620a8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af461d9fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af461d9f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af461d9e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbzua32xv                        0x0000555ce00629c5 <unavailable> + 6597

    5    libc.so.6                          0x00002af462294460 __libc_start_main +
    245

    6    tmpbzua32xv                        0x0000555ce0062329 <unavailable> + 4905

    '
  stdout: ''
  timestamp: 1659824845
- exit_code: -4
  program: "\n/// You are given 2 words. You need to return true if the second word\
    \ or any of its rotations is a substring in the first word\n/// >>> cycpattern_check(a:\
    \ \"abcd\", b: \"abd\")\n/// false\n/// >>> cycpattern_check(a: \"hello\", b:\
    \ \"ell\")\n/// true\n/// >>> cycpattern_check(a: \"whassup\", b: \"psus\")\n\
    /// false\n/// >>> cycpattern_check(a: \"abab\", b: \"baa\")\n/// true\n/// >>>\
    \ cycpattern_check(a: \"efef\", b: \"eeff\")\n/// false\n/// >>> cycpattern_check(a:\
    \ \"himenss\", b: \"simen\")\n/// true\nfunc cycpattern_check(a: String, b: String)\
    \ -> Bool {\n    guard a.count >= b.count else { return false }\n    let b = b\
    \ + b\n    return b.contains(a)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(cycpattern_check(a:\
    \ \"xyzw\", b: \"xyw\") == false)\nassert(cycpattern_check(a: \"yello\", b: \"\
    ell\") == true)\nassert(cycpattern_check(a: \"whattup\", b: \"ptut\") == false)\n\
    assert(cycpattern_check(a: \"efef\", b: \"fee\") == true)\nassert(cycpattern_check(a:\
    \ \"abab\", b: \"aabb\") == false)\nassert(cycpattern_check(a: \"winemtt\", b:\
    \ \"tinem\") == true)"
  status: Exception
  stderr: 'Swift/Substring.swift:316: Fatal error: String index is out of bounds

    Current stack trace:

    0    libswiftCore.so                    0x00002b383fa00c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b383f6f7561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b383f6f7286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b383f6f713c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b383f6f6bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftCore.so                    0x00002b383f851e40 Substring.index(_:offsetBy:)
    + 880

    6    libswiftCore.so                    0x00002b383f85685c <unavailable> + 2873436

    7    libswiftCore.so                    0x00002b383f723920 Collection.formIndex(_:offsetBy:)
    + 116

    8    libswift_StringProcessing.so       0x00002b383f3deb82 <unavailable> + 285570

    9    libswift_StringProcessing.so       0x00002b383f3ddb2f <unavailable> + 281391

    10   libswift_StringProcessing.so       0x00002b383f3deced <unavailable> + 285933

    11   libswift_StringProcessing.so       0x00002b383f3c442d <unavailable> + 177197

    12   libswift_StringProcessing.so       0x00002b383f3c2840 BidirectionalCollection<>.firstRange<A>(of:)
    + 1517

    13   libswift_StringProcessing.so       0x00002b383f3c2e70 StringProtocol.contains(_:)
    + 64

    14   tmp64rhm_p_                        0x00005578c812aa1c <unavailable> + 6684

    15   tmp64rhm_p_                        0x00005578c812a3a5 <unavailable> + 5029

    16   libc.so.6                          0x00002b383fbec460 __libc_start_main +
    245

    17   tmp64rhm_p_                        0x00005578c812a079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1659824846
- exit_code: -4
  program: "\n/// You are given 2 words. You need to return true if the second word\
    \ or any of its rotations is a substring in the first word\n/// >>> cycpattern_check(a:\
    \ \"abcd\", b: \"abd\")\n/// false\n/// >>> cycpattern_check(a: \"hello\", b:\
    \ \"ell\")\n/// true\n/// >>> cycpattern_check(a: \"whassup\", b: \"psus\")\n\
    /// false\n/// >>> cycpattern_check(a: \"abab\", b: \"baa\")\n/// true\n/// >>>\
    \ cycpattern_check(a: \"efef\", b: \"eeff\")\n/// false\n/// >>> cycpattern_check(a:\
    \ \"himenss\", b: \"simen\")\n/// true\nfunc cycpattern_check(a: String, b: String)\
    \ -> Bool {\n    var a = a\n    var b = b\n    if a.count != b.count {\n     \
    \   return false\n    }\n    if a.contains(b) {\n        return true\n    }\n\
    \    for _ in 0..<a.count {\n        a.insert(a.removeFirst(), at: a.endIndex)\n\
    \        if a.contains(b) {\n            return true\n        }\n    }\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(cycpattern_check(a: \"\
    xyzw\", b: \"xyw\") == false)\nassert(cycpattern_check(a: \"yello\", b: \"ell\"\
    ) == true)\nassert(cycpattern_check(a: \"whattup\", b: \"ptut\") == false)\nassert(cycpattern_check(a:\
    \ \"efef\", b: \"fee\") == true)\nassert(cycpattern_check(a: \"abab\", b: \"aabb\"\
    ) == false)\nassert(cycpattern_check(a: \"winemtt\", b: \"tinem\") == true)"
  status: Exception
  stderr: 'tmp_ehn0rsy/tmp_ehn0rsy.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac39879ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac398491b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac398491988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac3984907b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_ehn0rsy                        0x000055e8b315a781 <unavailable> + 6017

    5    libc.so.6                          0x00002ac398986460 __libc_start_main +
    245

    6    tmp_ehn0rsy                        0x000055e8b315a2f9 <unavailable> + 4857

    '
  stdout: ''
  timestamp: 1659824846
- exit_code: -4
  program: "\n/// You are given 2 words. You need to return true if the second word\
    \ or any of its rotations is a substring in the first word\n/// >>> cycpattern_check(a:\
    \ \"abcd\", b: \"abd\")\n/// false\n/// >>> cycpattern_check(a: \"hello\", b:\
    \ \"ell\")\n/// true\n/// >>> cycpattern_check(a: \"whassup\", b: \"psus\")\n\
    /// false\n/// >>> cycpattern_check(a: \"abab\", b: \"baa\")\n/// true\n/// >>>\
    \ cycpattern_check(a: \"efef\", b: \"eeff\")\n/// false\n/// >>> cycpattern_check(a:\
    \ \"himenss\", b: \"simen\")\n/// true\nfunc cycpattern_check(a: String, b: String)\
    \ -> Bool {\n    var a = a\n    var b = b\n    if b.count > a.count {\n      \
    \  return false\n    }\n    for _ in 0..<a.count {\n        if a.contains(b) {\n\
    \            return true\n        }\n        a.insert(a.removeFirst(), at: a.endIndex)\n\
    \    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(cycpattern_check(a:\
    \ \"xyzw\", b: \"xyw\") == false)\nassert(cycpattern_check(a: \"yello\", b: \"\
    ell\") == true)\nassert(cycpattern_check(a: \"whattup\", b: \"ptut\") == false)\n\
    assert(cycpattern_check(a: \"efef\", b: \"fee\") == true)\nassert(cycpattern_check(a:\
    \ \"abab\", b: \"aabb\") == false)\nassert(cycpattern_check(a: \"winemtt\", b:\
    \ \"tinem\") == true)"
  status: Exception
  stderr: 'Swift/Substring.swift:316: Fatal error: String index is out of bounds

    Current stack trace:

    0    libswiftCore.so                    0x00002acde654ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acde6245561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002acde6245286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002acde624513c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002acde6244bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftCore.so                    0x00002acde639fe40 Substring.index(_:offsetBy:)
    + 880

    6    libswiftCore.so                    0x00002acde63a485c <unavailable> + 2873436

    7    libswiftCore.so                    0x00002acde6271920 Collection.formIndex(_:offsetBy:)
    + 116

    8    libswift_StringProcessing.so       0x00002acde5f2cb82 <unavailable> + 285570

    9    libswift_StringProcessing.so       0x00002acde5f2bb2f <unavailable> + 281391

    10   libswift_StringProcessing.so       0x00002acde5f2cced <unavailable> + 285933

    11   libswift_StringProcessing.so       0x00002acde5f1242d <unavailable> + 177197

    12   libswift_StringProcessing.so       0x00002acde5f10840 BidirectionalCollection<>.firstRange<A>(of:)
    + 1517

    13   libswift_StringProcessing.so       0x00002acde5f10e70 StringProtocol.contains(_:)
    + 64

    14   tmpdnc67xoh                        0x0000560afc695eae <unavailable> + 7854

    15   tmpdnc67xoh                        0x0000560afc695625 <unavailable> + 5669

    16   libc.so.6                          0x00002acde673a460 __libc_start_main +
    245

    17   tmpdnc67xoh                        0x0000560afc6952f9 <unavailable> + 4857

    '
  stdout: ''
  timestamp: 1659824846
- exit_code: -4
  program: "\n/// You are given 2 words. You need to return true if the second word\
    \ or any of its rotations is a substring in the first word\n/// >>> cycpattern_check(a:\
    \ \"abcd\", b: \"abd\")\n/// false\n/// >>> cycpattern_check(a: \"hello\", b:\
    \ \"ell\")\n/// true\n/// >>> cycpattern_check(a: \"whassup\", b: \"psus\")\n\
    /// false\n/// >>> cycpattern_check(a: \"abab\", b: \"baa\")\n/// true\n/// >>>\
    \ cycpattern_check(a: \"efef\", b: \"eeff\")\n/// false\n/// >>> cycpattern_check(a:\
    \ \"himenss\", b: \"simen\")\n/// true\nfunc cycpattern_check(a: String, b: String)\
    \ -> Bool {\n    var a = a\n    var b = b\n    if a.count != b.count {\n     \
    \   return false\n    }\n    for _ in 0..<a.count {\n        if a.contains(b)\
    \ {\n            return true\n        }\n        a.append(a.removeFirst())\n \
    \   }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(cycpattern_check(a:\
    \ \"xyzw\", b: \"xyw\") == false)\nassert(cycpattern_check(a: \"yello\", b: \"\
    ell\") == true)\nassert(cycpattern_check(a: \"whattup\", b: \"ptut\") == false)\n\
    assert(cycpattern_check(a: \"efef\", b: \"fee\") == true)\nassert(cycpattern_check(a:\
    \ \"abab\", b: \"aabb\") == false)\nassert(cycpattern_check(a: \"winemtt\", b:\
    \ \"tinem\") == true)"
  status: Exception
  stderr: 'tmp6vjt88wd/tmp6vjt88wd.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b05ca280c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b05c9f77b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b05c9f77988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b05c9f767b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6vjt88wd                        0x00005578f7567721 <unavailable> + 5921

    5    libc.so.6                          0x00002b05ca46c460 __libc_start_main +
    245

    6    tmp6vjt88wd                        0x00005578f7567299 <unavailable> + 4761

    '
  stdout: ''
  timestamp: 1659824845
- exit_code: 1
  program: "\n/// You are given 2 words. You need to return true if the second word\
    \ or any of its rotations is a substring in the first word\n/// >>> cycpattern_check(a:\
    \ \"abcd\", b: \"abd\")\n/// false\n/// >>> cycpattern_check(a: \"hello\", b:\
    \ \"ell\")\n/// true\n/// >>> cycpattern_check(a: \"whassup\", b: \"psus\")\n\
    /// false\n/// >>> cycpattern_check(a: \"abab\", b: \"baa\")\n/// true\n/// >>>\
    \ cycpattern_check(a: \"efef\", b: \"eeff\")\n/// false\n/// >>> cycpattern_check(a:\
    \ \"himenss\", b: \"simen\")\n/// true\nfunc cycpattern_check(a: String, b: String)\
    \ -> Bool {\n    let a = a.characters.map { String($0) }\n    let b = b.characters.map\
    \ { String($0) }\n    let b_len = b.count\n    let a_len = a.count\n    var i\
    \ = 0\n    while i < a_len {\n        if a[i] == b[0] {\n            var j = 0\n\
    \            while j < b_len {\n                if a[(i + j) % a_len] != b[j]\
    \ {\n                    break\n                }\n                j += 1\n  \
    \          }\n            if j == b_len {\n                return true\n     \
    \       }\n        }\n        i += 1\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(cycpattern_check(a: \"xyzw\", b: \"xyw\") == false)\n\
    assert(cycpattern_check(a: \"yello\", b: \"ell\") == true)\nassert(cycpattern_check(a:\
    \ \"whattup\", b: \"ptut\") == false)\nassert(cycpattern_check(a: \"efef\", b:\
    \ \"fee\") == true)\nassert(cycpattern_check(a: \"abab\", b: \"aabb\") == false)\n\
    assert(cycpattern_check(a: \"winemtt\", b: \"tinem\") == true)"
  status: SyntaxError
  stderr: "/tmp/tmpy554urx4.swift:16:15: error: 'characters' is unavailable: Please\
    \ use String directly\n    let a = a.characters.map { String($0) }\n         \
    \     ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpy554urx4.swift:17:15:\
    \ error: 'characters' is unavailable: Please use String directly\n    let b =\
    \ b.characters.map { String($0) }\n              ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n"
  stdout: ''
  timestamp: 1659824846
- exit_code: -4
  program: "\n/// You are given 2 words. You need to return true if the second word\
    \ or any of its rotations is a substring in the first word\n/// >>> cycpattern_check(a:\
    \ \"abcd\", b: \"abd\")\n/// false\n/// >>> cycpattern_check(a: \"hello\", b:\
    \ \"ell\")\n/// true\n/// >>> cycpattern_check(a: \"whassup\", b: \"psus\")\n\
    /// false\n/// >>> cycpattern_check(a: \"abab\", b: \"baa\")\n/// true\n/// >>>\
    \ cycpattern_check(a: \"efef\", b: \"eeff\")\n/// false\n/// >>> cycpattern_check(a:\
    \ \"himenss\", b: \"simen\")\n/// true\nfunc cycpattern_check(a: String, b: String)\
    \ -> Bool {\n    let a = a.lowercased()\n    let b = b.lowercased()\n    let b_len\
    \ = b.count\n    let a_len = a.count\n    if b_len > a_len {\n        return false\n\
    \    }\n    var b_arr = Array(b)\n    for _ in 0..<a_len {\n        let first\
    \ = b_arr.removeFirst()\n        b_arr.append(first)\n        if String(b_arr)\
    \ == b {\n            return true\n        }\n    }\n    return false\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(cycpattern_check(a: \"xyzw\", b: \"xyw\") == false)\n\
    assert(cycpattern_check(a: \"yello\", b: \"ell\") == true)\nassert(cycpattern_check(a:\
    \ \"whattup\", b: \"ptut\") == false)\nassert(cycpattern_check(a: \"efef\", b:\
    \ \"fee\") == true)\nassert(cycpattern_check(a: \"abab\", b: \"aabb\") == false)\n\
    assert(cycpattern_check(a: \"winemtt\", b: \"tinem\") == true)"
  status: Exception
  stderr: 'tmp97djxs25/tmp97djxs25.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1e3282cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1e32523b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1e32523988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1e325227b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp97djxs25                        0x000055d006fdb7e5 <unavailable> + 6117

    5    libc.so.6                          0x00002b1e32a18460 __libc_start_main +
    245

    6    tmp97djxs25                        0x000055d006fdb439 <unavailable> + 5177

    '
  stdout: ''
  timestamp: 1659824846
- exit_code: -4
  program: "\n/// You are given 2 words. You need to return true if the second word\
    \ or any of its rotations is a substring in the first word\n/// >>> cycpattern_check(a:\
    \ \"abcd\", b: \"abd\")\n/// false\n/// >>> cycpattern_check(a: \"hello\", b:\
    \ \"ell\")\n/// true\n/// >>> cycpattern_check(a: \"whassup\", b: \"psus\")\n\
    /// false\n/// >>> cycpattern_check(a: \"abab\", b: \"baa\")\n/// true\n/// >>>\
    \ cycpattern_check(a: \"efef\", b: \"eeff\")\n/// false\n/// >>> cycpattern_check(a:\
    \ \"himenss\", b: \"simen\")\n/// true\nfunc cycpattern_check(a: String, b: String)\
    \ -> Bool {\n    let a = Array(a)\n    let b = Array(b)\n    let len = a.count\n\
    \    var i = 0\n    while i < len {\n        if a[i] == b[0] {\n            var\
    \ j = 0\n            while j < b.count {\n                if a[(i + j) % len]\
    \ != b[j] {\n                    break\n                }\n                j +=\
    \ 1\n            }\n            if j == b.count {\n                return true\n\
    \            }\n        }\n        i += 1\n    }\n    return false\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(cycpattern_check(a: \"xyzw\", b: \"xyw\") == false)\n\
    assert(cycpattern_check(a: \"yello\", b: \"ell\") == true)\nassert(cycpattern_check(a:\
    \ \"whattup\", b: \"ptut\") == false)\nassert(cycpattern_check(a: \"efef\", b:\
    \ \"fee\") == true)\nassert(cycpattern_check(a: \"abab\", b: \"aabb\") == false)\n\
    assert(cycpattern_check(a: \"winemtt\", b: \"tinem\") == true)"
  status: Exception
  stderr: 'tmpvzztkjup/tmpvzztkjup.swift:54: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5a8ee52c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5a8eb49b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5a8eb49988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5a8eb487b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvzztkjup                        0x0000561fb99d2835 <unavailable> + 6197

    5    libc.so.6                          0x00002b5a8f03e460 __libc_start_main +
    245

    6    tmpvzztkjup                        0x0000561fb99d2199 <unavailable> + 4505

    '
  stdout: ''
  timestamp: 1659824846
- exit_code: -4
  program: "\n/// You are given 2 words. You need to return true if the second word\
    \ or any of its rotations is a substring in the first word\n/// >>> cycpattern_check(a:\
    \ \"abcd\", b: \"abd\")\n/// false\n/// >>> cycpattern_check(a: \"hello\", b:\
    \ \"ell\")\n/// true\n/// >>> cycpattern_check(a: \"whassup\", b: \"psus\")\n\
    /// false\n/// >>> cycpattern_check(a: \"abab\", b: \"baa\")\n/// true\n/// >>>\
    \ cycpattern_check(a: \"efef\", b: \"eeff\")\n/// false\n/// >>> cycpattern_check(a:\
    \ \"himenss\", b: \"simen\")\n/// true\nfunc cycpattern_check(a: String, b: String)\
    \ -> Bool {\n    var b = b\n    for _ in 0..<b.count {\n        if a.contains(b)\
    \ {\n            return true\n        }\n        b.append(b.removeFirst())\n \
    \   }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(cycpattern_check(a:\
    \ \"xyzw\", b: \"xyw\") == false)\nassert(cycpattern_check(a: \"yello\", b: \"\
    ell\") == true)\nassert(cycpattern_check(a: \"whattup\", b: \"ptut\") == false)\n\
    assert(cycpattern_check(a: \"efef\", b: \"fee\") == true)\nassert(cycpattern_check(a:\
    \ \"abab\", b: \"aabb\") == false)\nassert(cycpattern_check(a: \"winemtt\", b:\
    \ \"tinem\") == true)"
  status: Exception
  stderr: 'Swift/Substring.swift:316: Fatal error: String index is out of bounds

    Current stack trace:

    0    libswiftCore.so                    0x00002ba9518f5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba9515ec561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ba9515ec286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ba9515ec13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ba9515ebbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftCore.so                    0x00002ba951746e40 Substring.index(_:offsetBy:)
    + 880

    6    libswiftCore.so                    0x00002ba95174b85c <unavailable> + 2873436

    7    libswiftCore.so                    0x00002ba951618920 Collection.formIndex(_:offsetBy:)
    + 116

    8    libswift_StringProcessing.so       0x00002ba9512d3b82 <unavailable> + 285570

    9    libswift_StringProcessing.so       0x00002ba9512d2b2f <unavailable> + 281391

    10   libswift_StringProcessing.so       0x00002ba9512d3ced <unavailable> + 285933

    11   libswift_StringProcessing.so       0x00002ba9512b942d <unavailable> + 177197

    12   libswift_StringProcessing.so       0x00002ba9512b7840 BidirectionalCollection<>.firstRange<A>(of:)
    + 1517

    13   libswift_StringProcessing.so       0x00002ba9512b7e70 StringProtocol.contains(_:)
    + 64

    14   tmpxxc0g7sv                        0x000055fb90321d4d <unavailable> + 7501

    15   tmpxxc0g7sv                        0x000055fb903215c5 <unavailable> + 5573

    16   libc.so.6                          0x00002ba951ae1460 __libc_start_main +
    245

    17   tmpxxc0g7sv                        0x000055fb90321299 <unavailable> + 4761

    '
  stdout: ''
  timestamp: 1659824845
- exit_code: -4
  program: "\n/// You are given 2 words. You need to return true if the second word\
    \ or any of its rotations is a substring in the first word\n/// >>> cycpattern_check(a:\
    \ \"abcd\", b: \"abd\")\n/// false\n/// >>> cycpattern_check(a: \"hello\", b:\
    \ \"ell\")\n/// true\n/// >>> cycpattern_check(a: \"whassup\", b: \"psus\")\n\
    /// false\n/// >>> cycpattern_check(a: \"abab\", b: \"baa\")\n/// true\n/// >>>\
    \ cycpattern_check(a: \"efef\", b: \"eeff\")\n/// false\n/// >>> cycpattern_check(a:\
    \ \"himenss\", b: \"simen\")\n/// true\nfunc cycpattern_check(a: String, b: String)\
    \ -> Bool {\n    let a = Array(a)\n    let b = Array(b)\n    let b_len = b.count\n\
    \    let a_len = a.count\n    var i = 0\n    while i < a_len {\n        var j\
    \ = 0\n        while j < b_len {\n            if a[(i + j) % a_len] != b[j] {\n\
    \                break\n            }\n            j += 1\n        }\n       \
    \ if j == b_len {\n            return true\n        }\n        i += 1\n    }\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(cycpattern_check(a:\
    \ \"xyzw\", b: \"xyw\") == false)\nassert(cycpattern_check(a: \"yello\", b: \"\
    ell\") == true)\nassert(cycpattern_check(a: \"whattup\", b: \"ptut\") == false)\n\
    assert(cycpattern_check(a: \"efef\", b: \"fee\") == true)\nassert(cycpattern_check(a:\
    \ \"abab\", b: \"aabb\") == false)\nassert(cycpattern_check(a: \"winemtt\", b:\
    \ \"tinem\") == true)"
  status: Exception
  stderr: 'tmps0_hqlif/tmps0_hqlif.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0bc8758c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0bc844fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0bc844f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0bc844e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmps0_hqlif                        0x000055a8431bf835 <unavailable> + 6197

    5    libc.so.6                          0x00002b0bc8944460 __libc_start_main +
    245

    6    tmps0_hqlif                        0x000055a8431bf199 <unavailable> + 4505

    '
  stdout: ''
  timestamp: 1659824846
- exit_code: 1
  program: "\n/// You are given 2 words. You need to return true if the second word\
    \ or any of its rotations is a substring in the first word\n/// >>> cycpattern_check(a:\
    \ \"abcd\", b: \"abd\")\n/// false\n/// >>> cycpattern_check(a: \"hello\", b:\
    \ \"ell\")\n/// true\n/// >>> cycpattern_check(a: \"whassup\", b: \"psus\")\n\
    /// false\n/// >>> cycpattern_check(a: \"abab\", b: \"baa\")\n/// true\n/// >>>\
    \ cycpattern_check(a: \"efef\", b: \"eeff\")\n/// false\n/// >>> cycpattern_check(a:\
    \ \"himenss\", b: \"simen\")\n/// true\nfunc cycpattern_check(a: String, b: String)\
    \ -> Bool {\n    let a = Array(a)\n    let b = Array(b)\n    var b_rot = b\n \
    \   for _ in 0..<b.count {\n        if a.contains(where: { $0 == b_rot[0] }) {\n\
    \            if a.indices.contains(where: { a[$0] == b_rot[0] }) {\n         \
    \       let start = a.indices.first(where: { a[$0] == b_rot[0] })!\n         \
    \       let end = a.indices.first(where: { a[$0] == b_rot[b.count - 1] })!\n \
    \               if start <= end {\n                    let a_sub = a[start...end]\n\
    \                    if a_sub == b_rot {\n                        return true\n\
    \                    }\n                } else {\n                    let a_sub\
    \ = a[start...] + a[..<end]\n                    if a_sub == b_rot {\n       \
    \                 return true\n                    }\n                }\n    \
    \        }\n        }\n        b_rot.rotate(by: 1)\n    }\n    return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(cycpattern_check(a: \"xyzw\", b: \"xyw\") == false)\n\
    assert(cycpattern_check(a: \"yello\", b: \"ell\") == true)\nassert(cycpattern_check(a:\
    \ \"whattup\", b: \"ptut\") == false)\nassert(cycpattern_check(a: \"efef\", b:\
    \ \"fee\") == true)\nassert(cycpattern_check(a: \"abab\", b: \"aabb\") == false)\n\
    assert(cycpattern_check(a: \"winemtt\", b: \"tinem\") == true)"
  status: SyntaxError
  stderr: "/tmp/tmp49hcjxxg.swift:26:30: error: binary operator '==' cannot be applied\
    \ to operands of type 'ArraySlice<String.Element>' (aka 'ArraySlice<Character>')\
    \ and '[String.Element]' (aka 'Array<Character>')\n                    if a_sub\
    \ == b_rot {\n                       ~~~~~ ^  ~~~~~\n/tmp/tmp49hcjxxg.swift:31:30:\
    \ error: binary operator '==' cannot be applied to operands of type 'ArraySlice<String.Element>'\
    \ (aka 'ArraySlice<Character>') and '[String.Element]' (aka 'Array<Character>')\n\
    \                    if a_sub == b_rot {\n                       ~~~~~ ^  ~~~~~\n\
    /tmp/tmp49hcjxxg.swift:37:15: error: value of type '[String.Element]' (aka 'Array<Character>')\
    \ has no member 'rotate'\n        b_rot.rotate(by: 1)\n        ~~~~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824846
- exit_code: -4
  program: "\n/// You are given 2 words. You need to return true if the second word\
    \ or any of its rotations is a substring in the first word\n/// >>> cycpattern_check(a:\
    \ \"abcd\", b: \"abd\")\n/// false\n/// >>> cycpattern_check(a: \"hello\", b:\
    \ \"ell\")\n/// true\n/// >>> cycpattern_check(a: \"whassup\", b: \"psus\")\n\
    /// false\n/// >>> cycpattern_check(a: \"abab\", b: \"baa\")\n/// true\n/// >>>\
    \ cycpattern_check(a: \"efef\", b: \"eeff\")\n/// false\n/// >>> cycpattern_check(a:\
    \ \"himenss\", b: \"simen\")\n/// true\nfunc cycpattern_check(a: String, b: String)\
    \ -> Bool {\n    if a.count < b.count {\n        return false\n    }\n    let\
    \ a = Array(a)\n    let b = Array(b)\n    var i = 0\n    while i < a.count {\n\
    \        var j = 0\n        while j < b.count && a[(i + j) % a.count] == b[j]\
    \ {\n            j += 1\n        }\n        if j == b.count {\n            return\
    \ true\n        }\n        i += 1\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(cycpattern_check(a: \"xyzw\", b: \"xyw\") == false)\n\
    assert(cycpattern_check(a: \"yello\", b: \"ell\") == true)\nassert(cycpattern_check(a:\
    \ \"whattup\", b: \"ptut\") == false)\nassert(cycpattern_check(a: \"efef\", b:\
    \ \"fee\") == true)\nassert(cycpattern_check(a: \"abab\", b: \"aabb\") == false)\n\
    assert(cycpattern_check(a: \"winemtt\", b: \"tinem\") == true)"
  status: Exception
  stderr: 'tmp68ft3eqy/tmp68ft3eqy.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1752dcec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1752ac5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1752ac5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1752ac47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp68ft3eqy                        0x0000562f0e9888d5 <unavailable> + 6357

    5    libc.so.6                          0x00002b1752fba460 __libc_start_main +
    245

    6    tmp68ft3eqy                        0x0000562f0e988239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659824845
- exit_code: -4
  program: "\n/// You are given 2 words. You need to return true if the second word\
    \ or any of its rotations is a substring in the first word\n/// >>> cycpattern_check(a:\
    \ \"abcd\", b: \"abd\")\n/// false\n/// >>> cycpattern_check(a: \"hello\", b:\
    \ \"ell\")\n/// true\n/// >>> cycpattern_check(a: \"whassup\", b: \"psus\")\n\
    /// false\n/// >>> cycpattern_check(a: \"abab\", b: \"baa\")\n/// true\n/// >>>\
    \ cycpattern_check(a: \"efef\", b: \"eeff\")\n/// false\n/// >>> cycpattern_check(a:\
    \ \"himenss\", b: \"simen\")\n/// true\nfunc cycpattern_check(a: String, b: String)\
    \ -> Bool {\n    var b = b\n    for _ in 0..<b.count {\n        if a.contains(b)\
    \ {\n            return true\n        }\n        b.append(b.removeFirst())\n \
    \   }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(cycpattern_check(a:\
    \ \"xyzw\", b: \"xyw\") == false)\nassert(cycpattern_check(a: \"yello\", b: \"\
    ell\") == true)\nassert(cycpattern_check(a: \"whattup\", b: \"ptut\") == false)\n\
    assert(cycpattern_check(a: \"efef\", b: \"fee\") == true)\nassert(cycpattern_check(a:\
    \ \"abab\", b: \"aabb\") == false)\nassert(cycpattern_check(a: \"winemtt\", b:\
    \ \"tinem\") == true)"
  status: Exception
  stderr: 'Swift/Substring.swift:316: Fatal error: String index is out of bounds

    Current stack trace:

    0    libswiftCore.so                    0x00002ba9518f5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba9515ec561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ba9515ec286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ba9515ec13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ba9515ebbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftCore.so                    0x00002ba951746e40 Substring.index(_:offsetBy:)
    + 880

    6    libswiftCore.so                    0x00002ba95174b85c <unavailable> + 2873436

    7    libswiftCore.so                    0x00002ba951618920 Collection.formIndex(_:offsetBy:)
    + 116

    8    libswift_StringProcessing.so       0x00002ba9512d3b82 <unavailable> + 285570

    9    libswift_StringProcessing.so       0x00002ba9512d2b2f <unavailable> + 281391

    10   libswift_StringProcessing.so       0x00002ba9512d3ced <unavailable> + 285933

    11   libswift_StringProcessing.so       0x00002ba9512b942d <unavailable> + 177197

    12   libswift_StringProcessing.so       0x00002ba9512b7840 BidirectionalCollection<>.firstRange<A>(of:)
    + 1517

    13   libswift_StringProcessing.so       0x00002ba9512b7e70 StringProtocol.contains(_:)
    + 64

    14   tmpxxc0g7sv                        0x000055fb90321d4d <unavailable> + 7501

    15   tmpxxc0g7sv                        0x000055fb903215c5 <unavailable> + 5573

    16   libc.so.6                          0x00002ba951ae1460 __libc_start_main +
    245

    17   tmpxxc0g7sv                        0x000055fb90321299 <unavailable> + 4761

    '
  stdout: ''
  timestamp: 1659824845
- exit_code: -4
  program: "\n/// You are given 2 words. You need to return true if the second word\
    \ or any of its rotations is a substring in the first word\n/// >>> cycpattern_check(a:\
    \ \"abcd\", b: \"abd\")\n/// false\n/// >>> cycpattern_check(a: \"hello\", b:\
    \ \"ell\")\n/// true\n/// >>> cycpattern_check(a: \"whassup\", b: \"psus\")\n\
    /// false\n/// >>> cycpattern_check(a: \"abab\", b: \"baa\")\n/// true\n/// >>>\
    \ cycpattern_check(a: \"efef\", b: \"eeff\")\n/// false\n/// >>> cycpattern_check(a:\
    \ \"himenss\", b: \"simen\")\n/// true\nfunc cycpattern_check(a: String, b: String)\
    \ -> Bool {\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(cycpattern_check(a:\
    \ \"xyzw\", b: \"xyw\") == false)\nassert(cycpattern_check(a: \"yello\", b: \"\
    ell\") == true)\nassert(cycpattern_check(a: \"whattup\", b: \"ptut\") == false)\n\
    assert(cycpattern_check(a: \"efef\", b: \"fee\") == true)\nassert(cycpattern_check(a:\
    \ \"abab\", b: \"aabb\") == false)\nassert(cycpattern_check(a: \"winemtt\", b:\
    \ \"tinem\") == true)"
  status: Exception
  stderr: 'tmp5ngt0b9p/tmp5ngt0b9p.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5997ce8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b59979dfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b59979df988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b59979de7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5ngt0b9p                        0x00005609c2f0a371 <unavailable> + 4977

    5    libc.so.6                          0x00002b5997ed4460 __libc_start_main +
    245

    6    tmp5ngt0b9p                        0x00005609c2f09ee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1659824845
- exit_code: -4
  program: "\n/// You are given 2 words. You need to return true if the second word\
    \ or any of its rotations is a substring in the first word\n/// >>> cycpattern_check(a:\
    \ \"abcd\", b: \"abd\")\n/// false\n/// >>> cycpattern_check(a: \"hello\", b:\
    \ \"ell\")\n/// true\n/// >>> cycpattern_check(a: \"whassup\", b: \"psus\")\n\
    /// false\n/// >>> cycpattern_check(a: \"abab\", b: \"baa\")\n/// true\n/// >>>\
    \ cycpattern_check(a: \"efef\", b: \"eeff\")\n/// false\n/// >>> cycpattern_check(a:\
    \ \"himenss\", b: \"simen\")\n/// true\nfunc cycpattern_check(a: String, b: String)\
    \ -> Bool {\n    let a = Array(a)\n    let b = Array(b)\n    let b_len = b.count\n\
    \    let a_len = a.count\n    for i in 0..<a_len {\n        var j = 0\n      \
    \  while j < b_len && a[(i + j) % a_len] == b[j] {\n            j += 1\n     \
    \   }\n        if j == b_len {\n            return true\n        }\n    }\n  \
    \  return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(cycpattern_check(a:\
    \ \"xyzw\", b: \"xyw\") == false)\nassert(cycpattern_check(a: \"yello\", b: \"\
    ell\") == true)\nassert(cycpattern_check(a: \"whattup\", b: \"ptut\") == false)\n\
    assert(cycpattern_check(a: \"efef\", b: \"fee\") == true)\nassert(cycpattern_check(a:\
    \ \"abab\", b: \"aabb\") == false)\nassert(cycpattern_check(a: \"winemtt\", b:\
    \ \"tinem\") == true)"
  status: Exception
  stderr: 'tmpwsnc894j/tmpwsnc894j.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab4892bac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab488fb1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab488fb1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab488fb07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwsnc894j                        0x00005606854ad975 <unavailable> + 6517

    5    libc.so.6                          0x00002ab4894a6460 __libc_start_main +
    245

    6    tmpwsnc894j                        0x00005606854ad2d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1659824846
- exit_code: 1
  program: "\n/// You are given 2 words. You need to return true if the second word\
    \ or any of its rotations is a substring in the first word\n/// >>> cycpattern_check(a:\
    \ \"abcd\", b: \"abd\")\n/// false\n/// >>> cycpattern_check(a: \"hello\", b:\
    \ \"ell\")\n/// true\n/// >>> cycpattern_check(a: \"whassup\", b: \"psus\")\n\
    /// false\n/// >>> cycpattern_check(a: \"abab\", b: \"baa\")\n/// true\n/// >>>\
    \ cycpattern_check(a: \"efef\", b: \"eeff\")\n/// false\n/// >>> cycpattern_check(a:\
    \ \"himenss\", b: \"simen\")\n/// true\nfunc cycpattern_check(a: String, b: String)\
    \ -> Bool {\n    let a = a.characters\n    let b = b.characters\n    var b_rotated\
    \ = b\n    for _ in 0..<b.count {\n        b_rotated.append(b_rotated.removeFirst())\n\
    \        if a.contains(b_rotated) {\n            return true\n        }\n    }\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(cycpattern_check(a:\
    \ \"xyzw\", b: \"xyw\") == false)\nassert(cycpattern_check(a: \"yello\", b: \"\
    ell\") == true)\nassert(cycpattern_check(a: \"whattup\", b: \"ptut\") == false)\n\
    assert(cycpattern_check(a: \"efef\", b: \"fee\") == true)\nassert(cycpattern_check(a:\
    \ \"abab\", b: \"aabb\") == false)\nassert(cycpattern_check(a: \"winemtt\", b:\
    \ \"tinem\") == true)"
  status: SyntaxError
  stderr: "/tmp/tmpnsnpbg39.swift:16:15: error: 'characters' is unavailable: Please\
    \ use String directly\n    let a = a.characters\n              ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmpnsnpbg39.swift:17:15: error: 'characters'\
    \ is unavailable: Please use String directly\n    let b = b.characters\n     \
    \         ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1659824846
- exit_code: -4
  program: "\n/// You are given 2 words. You need to return true if the second word\
    \ or any of its rotations is a substring in the first word\n/// >>> cycpattern_check(a:\
    \ \"abcd\", b: \"abd\")\n/// false\n/// >>> cycpattern_check(a: \"hello\", b:\
    \ \"ell\")\n/// true\n/// >>> cycpattern_check(a: \"whassup\", b: \"psus\")\n\
    /// false\n/// >>> cycpattern_check(a: \"abab\", b: \"baa\")\n/// true\n/// >>>\
    \ cycpattern_check(a: \"efef\", b: \"eeff\")\n/// false\n/// >>> cycpattern_check(a:\
    \ \"himenss\", b: \"simen\")\n/// true\nfunc cycpattern_check(a: String, b: String)\
    \ -> Bool {\n    guard a.count >= b.count else { return false }\n    var a = a\n\
    \    for _ in 0..<a.count {\n        if a.contains(b) { return true }\n      \
    \  a.append(a.removeFirst())\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(cycpattern_check(a: \"xyzw\", b: \"xyw\") == false)\nassert(cycpattern_check(a:\
    \ \"yello\", b: \"ell\") == true)\nassert(cycpattern_check(a: \"whattup\", b:\
    \ \"ptut\") == false)\nassert(cycpattern_check(a: \"efef\", b: \"fee\") == true)\n\
    assert(cycpattern_check(a: \"abab\", b: \"aabb\") == false)\nassert(cycpattern_check(a:\
    \ \"winemtt\", b: \"tinem\") == true)"
  status: Exception
  stderr: 'Swift/Substring.swift:316: Fatal error: String index is out of bounds

    Current stack trace:

    0    libswiftCore.so                    0x00002b23ef995c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b23ef68c561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b23ef68c286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b23ef68c13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b23ef68bbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftCore.so                    0x00002b23ef7e6e40 Substring.index(_:offsetBy:)
    + 880

    6    libswiftCore.so                    0x00002b23ef7eb85c <unavailable> + 2873436

    7    libswiftCore.so                    0x00002b23ef6b8920 Collection.formIndex(_:offsetBy:)
    + 116

    8    libswift_StringProcessing.so       0x00002b23ef375b82 <unavailable> + 285570

    9    libswift_StringProcessing.so       0x00002b23ef374b2f <unavailable> + 281391

    10   libswift_StringProcessing.so       0x00002b23ef375ced <unavailable> + 285933

    11   libswift_StringProcessing.so       0x00002b23ef35b42d <unavailable> + 177197

    12   libswift_StringProcessing.so       0x00002b23ef359840 BidirectionalCollection<>.firstRange<A>(of:)
    + 1517

    13   libswift_StringProcessing.so       0x00002b23ef359e70 StringProtocol.contains(_:)
    + 64

    14   tmpr2v2np58                        0x0000562f67144d8e <unavailable> + 7566

    15   tmpr2v2np58                        0x0000562f671445c5 <unavailable> + 5573

    16   libc.so.6                          0x00002b23efb81460 __libc_start_main +
    245

    17   tmpr2v2np58                        0x0000562f67144299 <unavailable> + 4761

    '
  stdout: ''
  timestamp: 1659824846
- exit_code: -4
  program: "\n/// You are given 2 words. You need to return true if the second word\
    \ or any of its rotations is a substring in the first word\n/// >>> cycpattern_check(a:\
    \ \"abcd\", b: \"abd\")\n/// false\n/// >>> cycpattern_check(a: \"hello\", b:\
    \ \"ell\")\n/// true\n/// >>> cycpattern_check(a: \"whassup\", b: \"psus\")\n\
    /// false\n/// >>> cycpattern_check(a: \"abab\", b: \"baa\")\n/// true\n/// >>>\
    \ cycpattern_check(a: \"efef\", b: \"eeff\")\n/// false\n/// >>> cycpattern_check(a:\
    \ \"himenss\", b: \"simen\")\n/// true\nfunc cycpattern_check(a: String, b: String)\
    \ -> Bool {\n    let a = Array(a)\n    let b = Array(b)\n    let a_len = a.count\n\
    \    let b_len = b.count\n    if a_len < b_len {\n        return false\n    }\n\
    \    for i in 0..<a_len {\n        var j = 0\n        while j < b_len && a[(i\
    \ + j) % a_len] == b[j] {\n            j += 1\n        }\n        if j == b_len\
    \ {\n            return true\n        }\n    }\n    return false\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(cycpattern_check(a: \"xyzw\", b: \"xyw\") == false)\n\
    assert(cycpattern_check(a: \"yello\", b: \"ell\") == true)\nassert(cycpattern_check(a:\
    \ \"whattup\", b: \"ptut\") == false)\nassert(cycpattern_check(a: \"efef\", b:\
    \ \"fee\") == true)\nassert(cycpattern_check(a: \"abab\", b: \"aabb\") == false)\n\
    assert(cycpattern_check(a: \"winemtt\", b: \"tinem\") == true)"
  status: Exception
  stderr: 'tmpciv7jdt2/tmpciv7jdt2.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aaae91dbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aaae8ed2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aaae8ed2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aaae8ed17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpciv7jdt2                        0x0000561df3e31975 <unavailable> + 6517

    5    libc.so.6                          0x00002aaae93c7460 __libc_start_main +
    245

    6    tmpciv7jdt2                        0x0000561df3e312d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1659824844
- exit_code: -4
  program: "\n/// You are given 2 words. You need to return true if the second word\
    \ or any of its rotations is a substring in the first word\n/// >>> cycpattern_check(a:\
    \ \"abcd\", b: \"abd\")\n/// false\n/// >>> cycpattern_check(a: \"hello\", b:\
    \ \"ell\")\n/// true\n/// >>> cycpattern_check(a: \"whassup\", b: \"psus\")\n\
    /// false\n/// >>> cycpattern_check(a: \"abab\", b: \"baa\")\n/// true\n/// >>>\
    \ cycpattern_check(a: \"efef\", b: \"eeff\")\n/// false\n/// >>> cycpattern_check(a:\
    \ \"himenss\", b: \"simen\")\n/// true\nfunc cycpattern_check(a: String, b: String)\
    \ -> Bool {\n    let a = Array(a)\n    let b = Array(b)\n    let b_len = b.count\n\
    \    let a_len = a.count\n    if b_len > a_len {\n        return false\n    }\n\
    \    var i = 0\n    while i < a_len {\n        var j = 0\n        while j < b_len\
    \ {\n            if a[(i + j) % a_len] != b[j] {\n                break\n    \
    \        }\n            j += 1\n        }\n        if j == b_len {\n         \
    \   return true\n        }\n        i += 1\n    }\n    return false\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(cycpattern_check(a: \"xyzw\", b: \"xyw\") == false)\n\
    assert(cycpattern_check(a: \"yello\", b: \"ell\") == true)\nassert(cycpattern_check(a:\
    \ \"whattup\", b: \"ptut\") == false)\nassert(cycpattern_check(a: \"efef\", b:\
    \ \"fee\") == true)\nassert(cycpattern_check(a: \"abab\", b: \"aabb\") == false)\n\
    assert(cycpattern_check(a: \"winemtt\", b: \"tinem\") == true)"
  status: Exception
  stderr: 'tmptlhlvqq3/tmptlhlvqq3.swift:56: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2d6b19fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2d6ae96b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2d6ae96988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2d6ae957b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptlhlvqq3                        0x000055ef383f2835 <unavailable> + 6197

    5    libc.so.6                          0x00002b2d6b38b460 __libc_start_main +
    245

    6    tmptlhlvqq3                        0x000055ef383f2199 <unavailable> + 4505

    '
  stdout: ''
  timestamp: 1659824846
- exit_code: -4
  program: "\n/// You are given 2 words. You need to return true if the second word\
    \ or any of its rotations is a substring in the first word\n/// >>> cycpattern_check(a:\
    \ \"abcd\", b: \"abd\")\n/// false\n/// >>> cycpattern_check(a: \"hello\", b:\
    \ \"ell\")\n/// true\n/// >>> cycpattern_check(a: \"whassup\", b: \"psus\")\n\
    /// false\n/// >>> cycpattern_check(a: \"abab\", b: \"baa\")\n/// true\n/// >>>\
    \ cycpattern_check(a: \"efef\", b: \"eeff\")\n/// false\n/// >>> cycpattern_check(a:\
    \ \"himenss\", b: \"simen\")\n/// true\nfunc cycpattern_check(a: String, b: String)\
    \ -> Bool {\n    let a = Array(a)\n    let b = Array(b)\n    let a_len = a.count\n\
    \    let b_len = b.count\n    if a_len < b_len {\n        return false\n    }\n\
    \    var i = 0\n    while i < a_len {\n        var j = 0\n        while j < b_len\
    \ {\n            if a[(i + j) % a_len] != b[j] {\n                break\n    \
    \        }\n            j += 1\n        }\n        if j == b_len {\n         \
    \   return true\n        }\n        i += 1\n    }\n    return false\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(cycpattern_check(a: \"xyzw\", b: \"xyw\") == false)\n\
    assert(cycpattern_check(a: \"yello\", b: \"ell\") == true)\nassert(cycpattern_check(a:\
    \ \"whattup\", b: \"ptut\") == false)\nassert(cycpattern_check(a: \"efef\", b:\
    \ \"fee\") == true)\nassert(cycpattern_check(a: \"abab\", b: \"aabb\") == false)\n\
    assert(cycpattern_check(a: \"winemtt\", b: \"tinem\") == true)"
  status: Exception
  stderr: 'tmp1jtp0_ke/tmp1jtp0_ke.swift:56: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b824eaf4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b824e7ebb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b824e7eb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b824e7ea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1jtp0_ke                        0x0000557e52193835 <unavailable> + 6197

    5    libc.so.6                          0x00002b824ece0460 __libc_start_main +
    245

    6    tmp1jtp0_ke                        0x0000557e52193199 <unavailable> + 4505

    '
  stdout: ''
  timestamp: 1659824845
- exit_code: 1
  program: "\n/// You are given 2 words. You need to return true if the second word\
    \ or any of its rotations is a substring in the first word\n/// >>> cycpattern_check(a:\
    \ \"abcd\", b: \"abd\")\n/// false\n/// >>> cycpattern_check(a: \"hello\", b:\
    \ \"ell\")\n/// true\n/// >>> cycpattern_check(a: \"whassup\", b: \"psus\")\n\
    /// false\n/// >>> cycpattern_check(a: \"abab\", b: \"baa\")\n/// true\n/// >>>\
    \ cycpattern_check(a: \"efef\", b: \"eeff\")\n/// false\n/// >>> cycpattern_check(a:\
    \ \"himenss\", b: \"simen\")\n/// true\nfunc cycpattern_check(a: String, b: String)\
    \ -> Bool {\n    if a.count < b.count {\n        return false\n    }\n    var\
    \ b = b\n    for _ in 0..<a.count {\n        if a.contains(b) {\n            return\
    \ true\n        }\n        b = b.substring(from: b.index(after: b.startIndex))\
    \ + b.substring(to: b.index(before: b.endIndex))\n    }\n    return false\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(cycpattern_check(a: \"xyzw\", b: \"xyw\") == false)\n\
    assert(cycpattern_check(a: \"yello\", b: \"ell\") == true)\nassert(cycpattern_check(a:\
    \ \"whattup\", b: \"ptut\") == false)\nassert(cycpattern_check(a: \"efef\", b:\
    \ \"fee\") == true)\nassert(cycpattern_check(a: \"abab\", b: \"aabb\") == false)\n\
    assert(cycpattern_check(a: \"winemtt\", b: \"tinem\") == true)"
  status: SyntaxError
  stderr: "/tmp/tmpbazcd_yy.swift:24:15: error: value of type 'String' has no member\
    \ 'substring'\n        b = b.substring(from: b.index(after: b.startIndex)) + b.substring(to:\
    \ b.index(before: b.endIndex))\n            ~ ^~~~~~~~~\n/tmp/tmpbazcd_yy.swift:24:65:\
    \ error: value of type 'String' has no member 'substring'\n        b = b.substring(from:\
    \ b.index(after: b.startIndex)) + b.substring(to: b.index(before: b.endIndex))\n\
    \                                                              ~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824845
- exit_code: 1
  program: "\n/// You are given 2 words. You need to return true if the second word\
    \ or any of its rotations is a substring in the first word\n/// >>> cycpattern_check(a:\
    \ \"abcd\", b: \"abd\")\n/// false\n/// >>> cycpattern_check(a: \"hello\", b:\
    \ \"ell\")\n/// true\n/// >>> cycpattern_check(a: \"whassup\", b: \"psus\")\n\
    /// false\n/// >>> cycpattern_check(a: \"abab\", b: \"baa\")\n/// true\n/// >>>\
    \ cycpattern_check(a: \"efef\", b: \"eeff\")\n/// false\n/// >>> cycpattern_check(a:\
    \ \"himenss\", b: \"simen\")\n/// true\nfunc cycpattern_check(a: String, b: String)\
    \ -> Bool {\n    let a = Array(a)\n    let b = Array(b)\n    var b_rotations =\
    \ [b]\n    for _ in 0..<b.count-1 {\n        b_rotations.append(rotate(b_rotations.last!))\n\
    \    }\n    for b_rotation in b_rotations {\n        if is_subarray(a, b_rotation)\
    \ {\n            return true\n        }\n    }\n    return false\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(cycpattern_check(a: \"xyzw\", b: \"xyw\") == false)\n\
    assert(cycpattern_check(a: \"yello\", b: \"ell\") == true)\nassert(cycpattern_check(a:\
    \ \"whattup\", b: \"ptut\") == false)\nassert(cycpattern_check(a: \"efef\", b:\
    \ \"fee\") == true)\nassert(cycpattern_check(a: \"abab\", b: \"aabb\") == false)\n\
    assert(cycpattern_check(a: \"winemtt\", b: \"tinem\") == true)"
  status: SyntaxError
  stderr: "/tmp/tmp9y7roqk0.swift:20:28: error: cannot find 'rotate' in scope\n  \
    \      b_rotations.append(rotate(b_rotations.last!))\n                       \
    \    ^~~~~~\n/tmp/tmp9y7roqk0.swift:23:12: error: cannot find 'is_subarray' in\
    \ scope\n        if is_subarray(a, b_rotation) {\n           ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824846
- exit_code: -4
  program: "\n/// You are given 2 words. You need to return true if the second word\
    \ or any of its rotations is a substring in the first word\n/// >>> cycpattern_check(a:\
    \ \"abcd\", b: \"abd\")\n/// false\n/// >>> cycpattern_check(a: \"hello\", b:\
    \ \"ell\")\n/// true\n/// >>> cycpattern_check(a: \"whassup\", b: \"psus\")\n\
    /// false\n/// >>> cycpattern_check(a: \"abab\", b: \"baa\")\n/// true\n/// >>>\
    \ cycpattern_check(a: \"efef\", b: \"eeff\")\n/// false\n/// >>> cycpattern_check(a:\
    \ \"himenss\", b: \"simen\")\n/// true\nfunc cycpattern_check(a: String, b: String)\
    \ -> Bool {\n    var a = a\n    var b = b\n    if a.count != b.count {\n     \
    \   return false\n    }\n    if a.contains(b) {\n        return true\n    }\n\
    \    for _ in 0..<a.count {\n        a.append(a.removeFirst())\n        if a.contains(b)\
    \ {\n            return true\n        }\n    }\n    return false\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(cycpattern_check(a: \"xyzw\", b: \"xyw\") == false)\n\
    assert(cycpattern_check(a: \"yello\", b: \"ell\") == true)\nassert(cycpattern_check(a:\
    \ \"whattup\", b: \"ptut\") == false)\nassert(cycpattern_check(a: \"efef\", b:\
    \ \"fee\") == true)\nassert(cycpattern_check(a: \"abab\", b: \"aabb\") == false)\n\
    assert(cycpattern_check(a: \"winemtt\", b: \"tinem\") == true)"
  status: Exception
  stderr: 'tmpxw3o0tn0/tmpxw3o0tn0.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b422fd6cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b422fa63b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b422fa63988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b422fa627b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxw3o0tn0                        0x0000559bcb0bc721 <unavailable> + 5921

    5    libc.so.6                          0x00002b422ff58460 __libc_start_main +
    245

    6    tmpxw3o0tn0                        0x0000559bcb0bc299 <unavailable> + 4761

    '
  stdout: ''
  timestamp: 1659824845
- exit_code: -4
  program: "\n/// You are given 2 words. You need to return true if the second word\
    \ or any of its rotations is a substring in the first word\n/// >>> cycpattern_check(a:\
    \ \"abcd\", b: \"abd\")\n/// false\n/// >>> cycpattern_check(a: \"hello\", b:\
    \ \"ell\")\n/// true\n/// >>> cycpattern_check(a: \"whassup\", b: \"psus\")\n\
    /// false\n/// >>> cycpattern_check(a: \"abab\", b: \"baa\")\n/// true\n/// >>>\
    \ cycpattern_check(a: \"efef\", b: \"eeff\")\n/// false\n/// >>> cycpattern_check(a:\
    \ \"himenss\", b: \"simen\")\n/// true\nfunc cycpattern_check(a: String, b: String)\
    \ -> Bool {\n    var a = a\n    var b = b\n    var i = 0\n    while i < a.count\
    \ {\n        if a.contains(b) {\n            return true\n        }\n        a.insert(a.removeFirst(),\
    \ at: a.endIndex)\n        i += 1\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(cycpattern_check(a: \"xyzw\", b: \"xyw\") == false)\n\
    assert(cycpattern_check(a: \"yello\", b: \"ell\") == true)\nassert(cycpattern_check(a:\
    \ \"whattup\", b: \"ptut\") == false)\nassert(cycpattern_check(a: \"efef\", b:\
    \ \"fee\") == true)\nassert(cycpattern_check(a: \"abab\", b: \"aabb\") == false)\n\
    assert(cycpattern_check(a: \"winemtt\", b: \"tinem\") == true)"
  status: Exception
  stderr: 'Swift/Substring.swift:316: Fatal error: String index is out of bounds

    Current stack trace:

    0    libswiftCore.so                    0x00002b8b1036dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8b10064561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b8b10064286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b8b1006413c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b8b10063bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftCore.so                    0x00002b8b101bee40 Substring.index(_:offsetBy:)
    + 880

    6    libswiftCore.so                    0x00002b8b101c385c <unavailable> + 2873436

    7    libswiftCore.so                    0x00002b8b10090920 Collection.formIndex(_:offsetBy:)
    + 116

    8    libswift_StringProcessing.so       0x00002b8b0fd4bb82 <unavailable> + 285570

    9    libswift_StringProcessing.so       0x00002b8b0fd4ab2f <unavailable> + 281391

    10   libswift_StringProcessing.so       0x00002b8b0fd4bced <unavailable> + 285933

    11   libswift_StringProcessing.so       0x00002b8b0fd3142d <unavailable> + 177197

    12   libswift_StringProcessing.so       0x00002b8b0fd2f840 BidirectionalCollection<>.firstRange<A>(of:)
    + 1517

    13   libswift_StringProcessing.so       0x00002b8b0fd2fe70 StringProtocol.contains(_:)
    + 64

    14   tmpuf3ir_5v                        0x000055b795d0bbdb <unavailable> + 7131

    15   tmpuf3ir_5v                        0x000055b795d0b4a5 <unavailable> + 5285

    16   libc.so.6                          0x00002b8b10559460 __libc_start_main +
    245

    17   tmpuf3ir_5v                        0x000055b795d0b179 <unavailable> + 4473

    '
  stdout: ''
  timestamp: 1659824846
- exit_code: -4
  program: "\n/// You are given 2 words. You need to return true if the second word\
    \ or any of its rotations is a substring in the first word\n/// >>> cycpattern_check(a:\
    \ \"abcd\", b: \"abd\")\n/// false\n/// >>> cycpattern_check(a: \"hello\", b:\
    \ \"ell\")\n/// true\n/// >>> cycpattern_check(a: \"whassup\", b: \"psus\")\n\
    /// false\n/// >>> cycpattern_check(a: \"abab\", b: \"baa\")\n/// true\n/// >>>\
    \ cycpattern_check(a: \"efef\", b: \"eeff\")\n/// false\n/// >>> cycpattern_check(a:\
    \ \"himenss\", b: \"simen\")\n/// true\nfunc cycpattern_check(a: String, b: String)\
    \ -> Bool {\n    if a.count < b.count {\n        return false\n    }\n    let\
    \ a = Array(a)\n    let b = Array(b)\n    var i = 0\n    while i < a.count {\n\
    \        var j = 0\n        while j < b.count && a[(i + j) % a.count] == b[j]\
    \ {\n            j += 1\n        }\n        if j == b.count {\n            return\
    \ true\n        }\n        i += 1\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(cycpattern_check(a: \"xyzw\", b: \"xyw\") == false)\n\
    assert(cycpattern_check(a: \"yello\", b: \"ell\") == true)\nassert(cycpattern_check(a:\
    \ \"whattup\", b: \"ptut\") == false)\nassert(cycpattern_check(a: \"efef\", b:\
    \ \"fee\") == true)\nassert(cycpattern_check(a: \"abab\", b: \"aabb\") == false)\n\
    assert(cycpattern_check(a: \"winemtt\", b: \"tinem\") == true)"
  status: Exception
  stderr: 'tmp68ft3eqy/tmp68ft3eqy.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1752dcec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1752ac5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1752ac5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1752ac47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp68ft3eqy                        0x0000562f0e9888d5 <unavailable> + 6357

    5    libc.so.6                          0x00002b1752fba460 __libc_start_main +
    245

    6    tmp68ft3eqy                        0x0000562f0e988239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659824845
- exit_code: -4
  program: "\n/// You are given 2 words. You need to return true if the second word\
    \ or any of its rotations is a substring in the first word\n/// >>> cycpattern_check(a:\
    \ \"abcd\", b: \"abd\")\n/// false\n/// >>> cycpattern_check(a: \"hello\", b:\
    \ \"ell\")\n/// true\n/// >>> cycpattern_check(a: \"whassup\", b: \"psus\")\n\
    /// false\n/// >>> cycpattern_check(a: \"abab\", b: \"baa\")\n/// true\n/// >>>\
    \ cycpattern_check(a: \"efef\", b: \"eeff\")\n/// false\n/// >>> cycpattern_check(a:\
    \ \"himenss\", b: \"simen\")\n/// true\nfunc cycpattern_check(a: String, b: String)\
    \ -> Bool {\n    var a = a\n    var b = b\n    if a.count != b.count {\n     \
    \   return false\n    }\n    for _ in 0..<a.count {\n        if a.contains(b)\
    \ {\n            return true\n        }\n        a.insert(a.removeFirst(), at:\
    \ a.endIndex)\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(cycpattern_check(a: \"xyzw\", b: \"xyw\") == false)\nassert(cycpattern_check(a:\
    \ \"yello\", b: \"ell\") == true)\nassert(cycpattern_check(a: \"whattup\", b:\
    \ \"ptut\") == false)\nassert(cycpattern_check(a: \"efef\", b: \"fee\") == true)\n\
    assert(cycpattern_check(a: \"abab\", b: \"aabb\") == false)\nassert(cycpattern_check(a:\
    \ \"winemtt\", b: \"tinem\") == true)"
  status: Exception
  stderr: 'tmppj0o2rub/tmppj0o2rub.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b37f67b1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b37f64a8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b37f64a8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b37f64a77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppj0o2rub                        0x00005602c86ae781 <unavailable> + 6017

    5    libc.so.6                          0x00002b37f699d460 __libc_start_main +
    245

    6    tmppj0o2rub                        0x00005602c86ae2f9 <unavailable> + 4857

    '
  stdout: ''
  timestamp: 1659824845
- exit_code: -4
  program: "\n/// You are given 2 words. You need to return true if the second word\
    \ or any of its rotations is a substring in the first word\n/// >>> cycpattern_check(a:\
    \ \"abcd\", b: \"abd\")\n/// false\n/// >>> cycpattern_check(a: \"hello\", b:\
    \ \"ell\")\n/// true\n/// >>> cycpattern_check(a: \"whassup\", b: \"psus\")\n\
    /// false\n/// >>> cycpattern_check(a: \"abab\", b: \"baa\")\n/// true\n/// >>>\
    \ cycpattern_check(a: \"efef\", b: \"eeff\")\n/// false\n/// >>> cycpattern_check(a:\
    \ \"himenss\", b: \"simen\")\n/// true\nfunc cycpattern_check(a: String, b: String)\
    \ -> Bool {\n    guard a.count >= b.count else { return false }\n    let b = b\
    \ + b\n    return b.contains(a)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(cycpattern_check(a:\
    \ \"xyzw\", b: \"xyw\") == false)\nassert(cycpattern_check(a: \"yello\", b: \"\
    ell\") == true)\nassert(cycpattern_check(a: \"whattup\", b: \"ptut\") == false)\n\
    assert(cycpattern_check(a: \"efef\", b: \"fee\") == true)\nassert(cycpattern_check(a:\
    \ \"abab\", b: \"aabb\") == false)\nassert(cycpattern_check(a: \"winemtt\", b:\
    \ \"tinem\") == true)"
  status: Exception
  stderr: 'Swift/Substring.swift:316: Fatal error: String index is out of bounds

    Current stack trace:

    0    libswiftCore.so                    0x00002b383fa00c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b383f6f7561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b383f6f7286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b383f6f713c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b383f6f6bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftCore.so                    0x00002b383f851e40 Substring.index(_:offsetBy:)
    + 880

    6    libswiftCore.so                    0x00002b383f85685c <unavailable> + 2873436

    7    libswiftCore.so                    0x00002b383f723920 Collection.formIndex(_:offsetBy:)
    + 116

    8    libswift_StringProcessing.so       0x00002b383f3deb82 <unavailable> + 285570

    9    libswift_StringProcessing.so       0x00002b383f3ddb2f <unavailable> + 281391

    10   libswift_StringProcessing.so       0x00002b383f3deced <unavailable> + 285933

    11   libswift_StringProcessing.so       0x00002b383f3c442d <unavailable> + 177197

    12   libswift_StringProcessing.so       0x00002b383f3c2840 BidirectionalCollection<>.firstRange<A>(of:)
    + 1517

    13   libswift_StringProcessing.so       0x00002b383f3c2e70 StringProtocol.contains(_:)
    + 64

    14   tmp64rhm_p_                        0x00005578c812aa1c <unavailable> + 6684

    15   tmp64rhm_p_                        0x00005578c812a3a5 <unavailable> + 5029

    16   libc.so.6                          0x00002b383fbec460 __libc_start_main +
    245

    17   tmp64rhm_p_                        0x00005578c812a079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1659824846
- exit_code: 1
  program: "\n/// You are given 2 words. You need to return true if the second word\
    \ or any of its rotations is a substring in the first word\n/// >>> cycpattern_check(a:\
    \ \"abcd\", b: \"abd\")\n/// false\n/// >>> cycpattern_check(a: \"hello\", b:\
    \ \"ell\")\n/// true\n/// >>> cycpattern_check(a: \"whassup\", b: \"psus\")\n\
    /// false\n/// >>> cycpattern_check(a: \"abab\", b: \"baa\")\n/// true\n/// >>>\
    \ cycpattern_check(a: \"efef\", b: \"eeff\")\n/// false\n/// >>> cycpattern_check(a:\
    \ \"himenss\", b: \"simen\")\n/// true\nfunc cycpattern_check(a: String, b: String)\
    \ -> Bool {\n    let a = a.lowercased()\n    let b = b.lowercased()\n    if a.count\
    \ < b.count {\n        return false\n    }\n    for i in 0..<a.count {\n     \
    \   let index = a.index(a.startIndex, offsetBy: i)\n        let sub = String(a[index])\n\
    \        let new = a.replacingOccurrences(of: sub, with: \"\")\n        if new.contains(b)\
    \ {\n            return true\n        }\n    }\n    return false\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(cycpattern_check(a: \"xyzw\", b: \"xyw\") == false)\n\
    assert(cycpattern_check(a: \"yello\", b: \"ell\") == true)\nassert(cycpattern_check(a:\
    \ \"whattup\", b: \"ptut\") == false)\nassert(cycpattern_check(a: \"efef\", b:\
    \ \"fee\") == true)\nassert(cycpattern_check(a: \"abab\", b: \"aabb\") == false)\n\
    assert(cycpattern_check(a: \"winemtt\", b: \"tinem\") == true)"
  status: SyntaxError
  stderr: "/tmp/tmpctp1e60o.swift:24:21: error: value of type 'String' has no member\
    \ 'replacingOccurrences'\n        let new = a.replacingOccurrences(of: sub, with:\
    \ \"\")\n                  ~ ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824846
- exit_code: -4
  program: "\n/// You are given 2 words. You need to return true if the second word\
    \ or any of its rotations is a substring in the first word\n/// >>> cycpattern_check(a:\
    \ \"abcd\", b: \"abd\")\n/// false\n/// >>> cycpattern_check(a: \"hello\", b:\
    \ \"ell\")\n/// true\n/// >>> cycpattern_check(a: \"whassup\", b: \"psus\")\n\
    /// false\n/// >>> cycpattern_check(a: \"abab\", b: \"baa\")\n/// true\n/// >>>\
    \ cycpattern_check(a: \"efef\", b: \"eeff\")\n/// false\n/// >>> cycpattern_check(a:\
    \ \"himenss\", b: \"simen\")\n/// true\nfunc cycpattern_check(a: String, b: String)\
    \ -> Bool {\n    let a = Array(a)\n    let b = Array(b)\n    let a_len = a.count\n\
    \    let b_len = b.count\n    if a_len < b_len {\n        return false\n    }\n\
    \    var i = 0\n    while i < a_len {\n        var j = 0\n        while j < b_len\
    \ {\n            if a[(i + j) % a_len] != b[j] {\n                break\n    \
    \        }\n            j += 1\n        }\n        if j == b_len {\n         \
    \   return true\n        }\n        i += 1\n    }\n    return false\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(cycpattern_check(a: \"xyzw\", b: \"xyw\") == false)\n\
    assert(cycpattern_check(a: \"yello\", b: \"ell\") == true)\nassert(cycpattern_check(a:\
    \ \"whattup\", b: \"ptut\") == false)\nassert(cycpattern_check(a: \"efef\", b:\
    \ \"fee\") == true)\nassert(cycpattern_check(a: \"abab\", b: \"aabb\") == false)\n\
    assert(cycpattern_check(a: \"winemtt\", b: \"tinem\") == true)"
  status: Exception
  stderr: 'tmp1jtp0_ke/tmp1jtp0_ke.swift:56: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b824eaf4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b824e7ebb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b824e7eb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b824e7ea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1jtp0_ke                        0x0000557e52193835 <unavailable> + 6197

    5    libc.so.6                          0x00002b824ece0460 __libc_start_main +
    245

    6    tmp1jtp0_ke                        0x0000557e52193199 <unavailable> + 4505

    '
  stdout: ''
  timestamp: 1659824845
- exit_code: -4
  program: "\n/// You are given 2 words. You need to return true if the second word\
    \ or any of its rotations is a substring in the first word\n/// >>> cycpattern_check(a:\
    \ \"abcd\", b: \"abd\")\n/// false\n/// >>> cycpattern_check(a: \"hello\", b:\
    \ \"ell\")\n/// true\n/// >>> cycpattern_check(a: \"whassup\", b: \"psus\")\n\
    /// false\n/// >>> cycpattern_check(a: \"abab\", b: \"baa\")\n/// true\n/// >>>\
    \ cycpattern_check(a: \"efef\", b: \"eeff\")\n/// false\n/// >>> cycpattern_check(a:\
    \ \"himenss\", b: \"simen\")\n/// true\nfunc cycpattern_check(a: String, b: String)\
    \ -> Bool {\n    var a = a\n    var b = b\n    if a.count < b.count {\n      \
    \  return false\n    }\n    if a.count == b.count {\n        return a == b\n \
    \   }\n    var i = 0\n    while i < a.count {\n        if a.contains(b) {\n  \
    \          return true\n        }\n        a.append(a.removeFirst())\n       \
    \ i += 1\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(cycpattern_check(a:\
    \ \"xyzw\", b: \"xyw\") == false)\nassert(cycpattern_check(a: \"yello\", b: \"\
    ell\") == true)\nassert(cycpattern_check(a: \"whattup\", b: \"ptut\") == false)\n\
    assert(cycpattern_check(a: \"efef\", b: \"fee\") == true)\nassert(cycpattern_check(a:\
    \ \"abab\", b: \"aabb\") == false)\nassert(cycpattern_check(a: \"winemtt\", b:\
    \ \"tinem\") == true)"
  status: Exception
  stderr: 'Swift/Substring.swift:316: Fatal error: String index is out of bounds

    Current stack trace:

    0    libswiftCore.so                    0x00002baa0f7e8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002baa0f4df561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002baa0f4df286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002baa0f4df13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002baa0f4debb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftCore.so                    0x00002baa0f639e40 Substring.index(_:offsetBy:)
    + 880

    6    libswiftCore.so                    0x00002baa0f63e85c <unavailable> + 2873436

    7    libswiftCore.so                    0x00002baa0f50b920 Collection.formIndex(_:offsetBy:)
    + 116

    8    libswift_StringProcessing.so       0x00002baa0f1c6b82 <unavailable> + 285570

    9    libswift_StringProcessing.so       0x00002baa0f1c5b2f <unavailable> + 281391

    10   libswift_StringProcessing.so       0x00002baa0f1c6ced <unavailable> + 285933

    11   libswift_StringProcessing.so       0x00002baa0f1ac42d <unavailable> + 177197

    12   libswift_StringProcessing.so       0x00002baa0f1aa840 BidirectionalCollection<>.firstRange<A>(of:)
    + 1517

    13   libswift_StringProcessing.so       0x00002baa0f1aae70 StringProtocol.contains(_:)
    + 64

    14   tmpe7qgxjys                        0x0000555923146dc7 <unavailable> + 7623

    15   tmpe7qgxjys                        0x0000555923146495 <unavailable> + 5269

    16   libc.so.6                          0x00002baa0f9d4460 __libc_start_main +
    245

    17   tmpe7qgxjys                        0x0000555923146169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659824845
- exit_code: -4
  program: "\n/// You are given 2 words. You need to return true if the second word\
    \ or any of its rotations is a substring in the first word\n/// >>> cycpattern_check(a:\
    \ \"abcd\", b: \"abd\")\n/// false\n/// >>> cycpattern_check(a: \"hello\", b:\
    \ \"ell\")\n/// true\n/// >>> cycpattern_check(a: \"whassup\", b: \"psus\")\n\
    /// false\n/// >>> cycpattern_check(a: \"abab\", b: \"baa\")\n/// true\n/// >>>\
    \ cycpattern_check(a: \"efef\", b: \"eeff\")\n/// false\n/// >>> cycpattern_check(a:\
    \ \"himenss\", b: \"simen\")\n/// true\nfunc cycpattern_check(a: String, b: String)\
    \ -> Bool {\n    let a = Array(a)\n    let b = Array(b)\n    let b_len = b.count\n\
    \    let a_len = a.count\n    if b_len > a_len {\n        return false\n    }\n\
    \    var i = 0\n    while i < a_len {\n        var j = 0\n        while j < b_len\
    \ {\n            if a[(i + j) % a_len] != b[j] {\n                break\n    \
    \        }\n            j += 1\n        }\n        if j == b_len {\n         \
    \   return true\n        }\n        i += 1\n    }\n    return false\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(cycpattern_check(a: \"xyzw\", b: \"xyw\") == false)\n\
    assert(cycpattern_check(a: \"yello\", b: \"ell\") == true)\nassert(cycpattern_check(a:\
    \ \"whattup\", b: \"ptut\") == false)\nassert(cycpattern_check(a: \"efef\", b:\
    \ \"fee\") == true)\nassert(cycpattern_check(a: \"abab\", b: \"aabb\") == false)\n\
    assert(cycpattern_check(a: \"winemtt\", b: \"tinem\") == true)"
  status: Exception
  stderr: 'tmptlhlvqq3/tmptlhlvqq3.swift:56: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2d6b19fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2d6ae96b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2d6ae96988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2d6ae957b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptlhlvqq3                        0x000055ef383f2835 <unavailable> + 6197

    5    libc.so.6                          0x00002b2d6b38b460 __libc_start_main +
    245

    6    tmptlhlvqq3                        0x000055ef383f2199 <unavailable> + 4505

    '
  stdout: ''
  timestamp: 1659824846
- exit_code: -4
  program: "\n/// You are given 2 words. You need to return true if the second word\
    \ or any of its rotations is a substring in the first word\n/// >>> cycpattern_check(a:\
    \ \"abcd\", b: \"abd\")\n/// false\n/// >>> cycpattern_check(a: \"hello\", b:\
    \ \"ell\")\n/// true\n/// >>> cycpattern_check(a: \"whassup\", b: \"psus\")\n\
    /// false\n/// >>> cycpattern_check(a: \"abab\", b: \"baa\")\n/// true\n/// >>>\
    \ cycpattern_check(a: \"efef\", b: \"eeff\")\n/// false\n/// >>> cycpattern_check(a:\
    \ \"himenss\", b: \"simen\")\n/// true\nfunc cycpattern_check(a: String, b: String)\
    \ -> Bool {\n    if a.count < b.count {\n        return false\n    }\n    var\
    \ a = a\n    for _ in 0..<a.count {\n        if a.contains(b) {\n            return\
    \ true\n        }\n        let first = a.removeFirst()\n        a.append(first)\n\
    \    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(cycpattern_check(a:\
    \ \"xyzw\", b: \"xyw\") == false)\nassert(cycpattern_check(a: \"yello\", b: \"\
    ell\") == true)\nassert(cycpattern_check(a: \"whattup\", b: \"ptut\") == false)\n\
    assert(cycpattern_check(a: \"efef\", b: \"fee\") == true)\nassert(cycpattern_check(a:\
    \ \"abab\", b: \"aabb\") == false)\nassert(cycpattern_check(a: \"winemtt\", b:\
    \ \"tinem\") == true)"
  status: Exception
  stderr: 'Swift/Substring.swift:316: Fatal error: String index is out of bounds

    Current stack trace:

    0    libswiftCore.so                    0x00002aca61f25c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aca61c1c561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002aca61c1c286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002aca61c1c13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002aca61c1bbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftCore.so                    0x00002aca61d76e40 Substring.index(_:offsetBy:)
    + 880

    6    libswiftCore.so                    0x00002aca61d7b85c <unavailable> + 2873436

    7    libswiftCore.so                    0x00002aca61c48920 Collection.formIndex(_:offsetBy:)
    + 116

    8    libswift_StringProcessing.so       0x00002aca61903b82 <unavailable> + 285570

    9    libswift_StringProcessing.so       0x00002aca61902b2f <unavailable> + 281391

    10   libswift_StringProcessing.so       0x00002aca61903ced <unavailable> + 285933

    11   libswift_StringProcessing.so       0x00002aca618e942d <unavailable> + 177197

    12   libswift_StringProcessing.so       0x00002aca618e7840 BidirectionalCollection<>.firstRange<A>(of:)
    + 1517

    13   libswift_StringProcessing.so       0x00002aca618e7e70 StringProtocol.contains(_:)
    + 64

    14   tmp98kuka5s                        0x000055fac277cda2 <unavailable> + 7586

    15   tmp98kuka5s                        0x000055fac277c5c5 <unavailable> + 5573

    16   libc.so.6                          0x00002aca62111460 __libc_start_main +
    245

    17   tmp98kuka5s                        0x000055fac277c299 <unavailable> + 4761

    '
  stdout: ''
  timestamp: 1659824846
- exit_code: -4
  program: "\n/// You are given 2 words. You need to return true if the second word\
    \ or any of its rotations is a substring in the first word\n/// >>> cycpattern_check(a:\
    \ \"abcd\", b: \"abd\")\n/// false\n/// >>> cycpattern_check(a: \"hello\", b:\
    \ \"ell\")\n/// true\n/// >>> cycpattern_check(a: \"whassup\", b: \"psus\")\n\
    /// false\n/// >>> cycpattern_check(a: \"abab\", b: \"baa\")\n/// true\n/// >>>\
    \ cycpattern_check(a: \"efef\", b: \"eeff\")\n/// false\n/// >>> cycpattern_check(a:\
    \ \"himenss\", b: \"simen\")\n/// true\nfunc cycpattern_check(a: String, b: String)\
    \ -> Bool {\n    let a = Array(a)\n    let b = Array(b)\n    let n = a.count\n\
    \    let m = b.count\n    for i in 0..<n {\n        var j = 0\n        var k =\
    \ i\n        while j < m && k < n && a[k] == b[j] {\n            j += 1\n    \
    \        k += 1\n        }\n        if j == m {\n            return true\n   \
    \     }\n        if k == n && j < m {\n            k = 0\n            while j\
    \ < m && k < i && a[k] == b[j] {\n                j += 1\n                k +=\
    \ 1\n            }\n            if j == m {\n                return true\n   \
    \         }\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(cycpattern_check(a: \"xyzw\", b: \"xyw\") == false)\nassert(cycpattern_check(a:\
    \ \"yello\", b: \"ell\") == true)\nassert(cycpattern_check(a: \"whattup\", b:\
    \ \"ptut\") == false)\nassert(cycpattern_check(a: \"efef\", b: \"fee\") == true)\n\
    assert(cycpattern_check(a: \"abab\", b: \"aabb\") == false)\nassert(cycpattern_check(a:\
    \ \"winemtt\", b: \"tinem\") == true)"
  status: Exception
  stderr: 'tmpy3gjvwkm/tmpy3gjvwkm.swift:60: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af0fc355c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af0fc04cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af0fc04c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af0fc04b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpy3gjvwkm                        0x000055a8da429975 <unavailable> + 6517

    5    libc.so.6                          0x00002af0fc541460 __libc_start_main +
    245

    6    tmpy3gjvwkm                        0x000055a8da4292d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1659824846
- exit_code: 1
  program: "\n/// You are given 2 words. You need to return true if the second word\
    \ or any of its rotations is a substring in the first word\n/// >>> cycpattern_check(a:\
    \ \"abcd\", b: \"abd\")\n/// false\n/// >>> cycpattern_check(a: \"hello\", b:\
    \ \"ell\")\n/// true\n/// >>> cycpattern_check(a: \"whassup\", b: \"psus\")\n\
    /// false\n/// >>> cycpattern_check(a: \"abab\", b: \"baa\")\n/// true\n/// >>>\
    \ cycpattern_check(a: \"efef\", b: \"eeff\")\n/// false\n/// >>> cycpattern_check(a:\
    \ \"himenss\", b: \"simen\")\n/// true\nfunc cycpattern_check(a: String, b: String)\
    \ -> Bool {\n    let a = a.lowercased()\n    let b = b.lowercased()\n    let b_length\
    \ = b.count\n    let a_length = a.count\n    if b_length > a_length {\n      \
    \  return false\n    }\n    let b_first_char = b.first!\n    let b_last_char =\
    \ b.last!\n    var b_index = 0\n    var a_index = 0\n    while a_index < a_length\
    \ {\n        if a[a_index] == b_first_char {\n            b_index = 0\n      \
    \      while b_index < b_length {\n                if a[a_index] != b[b_index]\
    \ {\n                    break\n                }\n                a_index +=\
    \ 1\n                b_index += 1\n                if b_index == b_length {\n\
    \                    return true\n                }\n                if a_index\
    \ == a_length {\n                    a_index = 0\n                }\n        \
    \    }\n        }\n        a_index += 1\n    }\n    return false\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(cycpattern_check(a: \"xyzw\", b: \"xyw\") == false)\n\
    assert(cycpattern_check(a: \"yello\", b: \"ell\") == true)\nassert(cycpattern_check(a:\
    \ \"whattup\", b: \"ptut\") == false)\nassert(cycpattern_check(a: \"efef\", b:\
    \ \"fee\") == true)\nassert(cycpattern_check(a: \"abab\", b: \"aabb\") == false)\n\
    assert(cycpattern_check(a: \"winemtt\", b: \"tinem\") == true)"
  status: SyntaxError
  stderr: "/tmp/tmprzip3mrr.swift:28:12: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an Int, use a String.Index instead.\n        if a[a_index]\
    \ == b_first_char {\n           ^~~~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)'\
    \ has been explicitly marked unavailable here\n    public subscript(i: Int) ->\
    \ Character { get }\n           ^\n/tmp/tmprzip3mrr.swift:31:20: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \                if a[a_index] != b[b_index] {\n                   ^~~~~~~~~~\n\
    Swift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmprzip3mrr.swift:31:34:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n                if a[a_index] != b[b_index] {\n\
    \                                 ^~~~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)'\
    \ has been explicitly marked unavailable here\n    public subscript(i: Int) ->\
    \ Character { get }\n           ^\n/tmp/tmprzip3mrr.swift:24:9: warning: initialization\
    \ of immutable value 'b_last_char' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    let b_last_char = b.last!\n    ~~~~^~~~~~~~~~~\n\
    \    _\n"
  stdout: ''
  timestamp: 1659824846
- exit_code: -4
  program: "\n/// You are given 2 words. You need to return true if the second word\
    \ or any of its rotations is a substring in the first word\n/// >>> cycpattern_check(a:\
    \ \"abcd\", b: \"abd\")\n/// false\n/// >>> cycpattern_check(a: \"hello\", b:\
    \ \"ell\")\n/// true\n/// >>> cycpattern_check(a: \"whassup\", b: \"psus\")\n\
    /// false\n/// >>> cycpattern_check(a: \"abab\", b: \"baa\")\n/// true\n/// >>>\
    \ cycpattern_check(a: \"efef\", b: \"eeff\")\n/// false\n/// >>> cycpattern_check(a:\
    \ \"himenss\", b: \"simen\")\n/// true\nfunc cycpattern_check(a: String, b: String)\
    \ -> Bool {\n    let a = Array(a)\n    let b = Array(b)\n    let n = a.count\n\
    \    let m = b.count\n    if n < m { return false }\n    var i = 0\n    while\
    \ i < n {\n        if a[i] == b[0] {\n            var j = 0\n            while\
    \ j < m {\n                if a[(i + j) % n] != b[j] { break }\n             \
    \   j += 1\n            }\n            if j == m { return true }\n        }\n\
    \        i += 1\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(cycpattern_check(a: \"xyzw\", b: \"xyw\") == false)\nassert(cycpattern_check(a:\
    \ \"yello\", b: \"ell\") == true)\nassert(cycpattern_check(a: \"whattup\", b:\
    \ \"ptut\") == false)\nassert(cycpattern_check(a: \"efef\", b: \"fee\") == true)\n\
    assert(cycpattern_check(a: \"abab\", b: \"aabb\") == false)\nassert(cycpattern_check(a:\
    \ \"winemtt\", b: \"tinem\") == true)"
  status: Exception
  stderr: 'tmpdqqu3_92/tmpdqqu3_92.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8288412c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8288109b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8288109988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b82881087b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdqqu3_92                        0x0000556982fca835 <unavailable> + 6197

    5    libc.so.6                          0x00002b82885fe460 __libc_start_main +
    245

    6    tmpdqqu3_92                        0x0000556982fca199 <unavailable> + 4505

    '
  stdout: ''
  timestamp: 1659824846
- exit_code: 1
  program: "\n/// You are given 2 words. You need to return true if the second word\
    \ or any of its rotations is a substring in the first word\n/// >>> cycpattern_check(a:\
    \ \"abcd\", b: \"abd\")\n/// false\n/// >>> cycpattern_check(a: \"hello\", b:\
    \ \"ell\")\n/// true\n/// >>> cycpattern_check(a: \"whassup\", b: \"psus\")\n\
    /// false\n/// >>> cycpattern_check(a: \"abab\", b: \"baa\")\n/// true\n/// >>>\
    \ cycpattern_check(a: \"efef\", b: \"eeff\")\n/// false\n/// >>> cycpattern_check(a:\
    \ \"himenss\", b: \"simen\")\n/// true\nfunc cycpattern_check(a: String, b: String)\
    \ -> Bool {\n    var str = a\n    for _ in 0..<a.count {\n        if str.contains(b)\
    \ {\n            return true\n        }\n        str = str.substring(from: str.index(after:\
    \ str.startIndex)) + str.substring(to: str.index(before: str.endIndex))\n    }\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(cycpattern_check(a:\
    \ \"xyzw\", b: \"xyw\") == false)\nassert(cycpattern_check(a: \"yello\", b: \"\
    ell\") == true)\nassert(cycpattern_check(a: \"whattup\", b: \"ptut\") == false)\n\
    assert(cycpattern_check(a: \"efef\", b: \"fee\") == true)\nassert(cycpattern_check(a:\
    \ \"abab\", b: \"aabb\") == false)\nassert(cycpattern_check(a: \"winemtt\", b:\
    \ \"tinem\") == true)"
  status: SyntaxError
  stderr: "/tmp/tmpxvxn6l_z.swift:21:19: error: value of type 'String' has no member\
    \ 'substring'\n        str = str.substring(from: str.index(after: str.startIndex))\
    \ + str.substring(to: str.index(before: str.endIndex))\n              ~~~ ^~~~~~~~~\n\
    /tmp/tmpxvxn6l_z.swift:21:75: error: value of type 'String' has no member 'substring'\n\
    \        str = str.substring(from: str.index(after: str.startIndex)) + str.substring(to:\
    \ str.index(before: str.endIndex))\n                                         \
    \                             ~~~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824846
- exit_code: 1
  program: "\n/// You are given 2 words. You need to return true if the second word\
    \ or any of its rotations is a substring in the first word\n/// >>> cycpattern_check(a:\
    \ \"abcd\", b: \"abd\")\n/// false\n/// >>> cycpattern_check(a: \"hello\", b:\
    \ \"ell\")\n/// true\n/// >>> cycpattern_check(a: \"whassup\", b: \"psus\")\n\
    /// false\n/// >>> cycpattern_check(a: \"abab\", b: \"baa\")\n/// true\n/// >>>\
    \ cycpattern_check(a: \"efef\", b: \"eeff\")\n/// false\n/// >>> cycpattern_check(a:\
    \ \"himenss\", b: \"simen\")\n/// true\nfunc cycpattern_check(a: String, b: String)\
    \ -> Bool {\n    let a = Array(a)\n    let b = Array(b)\n    var b_rot = b\n \
    \   for _ in 0..<b.count {\n        if a.contains(where: { $0 == b_rot[0] }) {\n\
    \            var i = 0\n            while i < b_rot.count {\n                if\
    \ a[i] != b_rot[i] {\n                    break\n                }\n         \
    \       i += 1\n            }\n            if i == b_rot.count {\n           \
    \     return true\n            }\n        }\n        b_rot.rotate()\n    }\n \
    \   return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(cycpattern_check(a:\
    \ \"xyzw\", b: \"xyw\") == false)\nassert(cycpattern_check(a: \"yello\", b: \"\
    ell\") == true)\nassert(cycpattern_check(a: \"whattup\", b: \"ptut\") == false)\n\
    assert(cycpattern_check(a: \"efef\", b: \"fee\") == true)\nassert(cycpattern_check(a:\
    \ \"abab\", b: \"aabb\") == false)\nassert(cycpattern_check(a: \"winemtt\", b:\
    \ \"tinem\") == true)"
  status: SyntaxError
  stderr: "/tmp/tmpbg42v4s_.swift:32:15: error: value of type '[String.Element]' (aka\
    \ 'Array<Character>') has no member 'rotate'\n        b_rot.rotate()\n       \
    \ ~~~~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824846
- exit_code: -4
  program: "\n/// You are given 2 words. You need to return true if the second word\
    \ or any of its rotations is a substring in the first word\n/// >>> cycpattern_check(a:\
    \ \"abcd\", b: \"abd\")\n/// false\n/// >>> cycpattern_check(a: \"hello\", b:\
    \ \"ell\")\n/// true\n/// >>> cycpattern_check(a: \"whassup\", b: \"psus\")\n\
    /// false\n/// >>> cycpattern_check(a: \"abab\", b: \"baa\")\n/// true\n/// >>>\
    \ cycpattern_check(a: \"efef\", b: \"eeff\")\n/// false\n/// >>> cycpattern_check(a:\
    \ \"himenss\", b: \"simen\")\n/// true\nfunc cycpattern_check(a: String, b: String)\
    \ -> Bool {\n    let a = Array(a)\n    let b = Array(b)\n    var i = 0\n    var\
    \ j = 0\n    while i < a.count && j < b.count {\n        if a[i] == b[j] {\n \
    \           i += 1\n            j += 1\n        } else {\n            i = i -\
    \ j + 1\n            j = 0\n        }\n    }\n    if j == b.count {\n        return\
    \ true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(cycpattern_check(a:\
    \ \"xyzw\", b: \"xyw\") == false)\nassert(cycpattern_check(a: \"yello\", b: \"\
    ell\") == true)\nassert(cycpattern_check(a: \"whattup\", b: \"ptut\") == false)\n\
    assert(cycpattern_check(a: \"efef\", b: \"fee\") == true)\nassert(cycpattern_check(a:\
    \ \"abab\", b: \"aabb\") == false)\nassert(cycpattern_check(a: \"winemtt\", b:\
    \ \"tinem\") == true)"
  status: Exception
  stderr: 'tmpo5lmltf7/tmpo5lmltf7.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b25a2897c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b25a258eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b25a258e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b25a258d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpo5lmltf7                        0x0000559a744937f5 <unavailable> + 6133

    5    libc.so.6                          0x00002b25a2a83460 __libc_start_main +
    245

    6    tmpo5lmltf7                        0x0000559a74493159 <unavailable> + 4441

    '
  stdout: ''
  timestamp: 1659824846
- exit_code: -4
  program: "\n/// You are given 2 words. You need to return true if the second word\
    \ or any of its rotations is a substring in the first word\n/// >>> cycpattern_check(a:\
    \ \"abcd\", b: \"abd\")\n/// false\n/// >>> cycpattern_check(a: \"hello\", b:\
    \ \"ell\")\n/// true\n/// >>> cycpattern_check(a: \"whassup\", b: \"psus\")\n\
    /// false\n/// >>> cycpattern_check(a: \"abab\", b: \"baa\")\n/// true\n/// >>>\
    \ cycpattern_check(a: \"efef\", b: \"eeff\")\n/// false\n/// >>> cycpattern_check(a:\
    \ \"himenss\", b: \"simen\")\n/// true\nfunc cycpattern_check(a: String, b: String)\
    \ -> Bool {\n    if a.count < b.count { return false }\n    var b = b\n    for\
    \ _ in 0..<a.count {\n        if a.contains(b) { return true }\n        b.append(b.removeFirst())\n\
    \    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(cycpattern_check(a:\
    \ \"xyzw\", b: \"xyw\") == false)\nassert(cycpattern_check(a: \"yello\", b: \"\
    ell\") == true)\nassert(cycpattern_check(a: \"whattup\", b: \"ptut\") == false)\n\
    assert(cycpattern_check(a: \"efef\", b: \"fee\") == true)\nassert(cycpattern_check(a:\
    \ \"abab\", b: \"aabb\") == false)\nassert(cycpattern_check(a: \"winemtt\", b:\
    \ \"tinem\") == true)"
  status: Exception
  stderr: 'Swift/Substring.swift:316: Fatal error: String index is out of bounds

    Current stack trace:

    0    libswiftCore.so                    0x00002b32e3202c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b32e2ef9561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b32e2ef9286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b32e2ef913c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b32e2ef8bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftCore.so                    0x00002b32e3053e40 Substring.index(_:offsetBy:)
    + 880

    6    libswiftCore.so                    0x00002b32e305885c <unavailable> + 2873436

    7    libswiftCore.so                    0x00002b32e2f25920 Collection.formIndex(_:offsetBy:)
    + 116

    8    libswift_StringProcessing.so       0x00002b32e2be0b82 <unavailable> + 285570

    9    libswift_StringProcessing.so       0x00002b32e2bdfb2f <unavailable> + 281391

    10   libswift_StringProcessing.so       0x00002b32e2be0ced <unavailable> + 285933

    11   libswift_StringProcessing.so       0x00002b32e2bc642d <unavailable> + 177197

    12   libswift_StringProcessing.so       0x00002b32e2bc4840 BidirectionalCollection<>.firstRange<A>(of:)
    + 1517

    13   libswift_StringProcessing.so       0x00002b32e2bc4e70 StringProtocol.contains(_:)
    + 64

    14   tmph0vvixv9                        0x00005572cc13ad85 <unavailable> + 7557

    15   tmph0vvixv9                        0x00005572cc13a5c5 <unavailable> + 5573

    16   libc.so.6                          0x00002b32e33ee460 __libc_start_main +
    245

    17   tmph0vvixv9                        0x00005572cc13a299 <unavailable> + 4761

    '
  stdout: ''
  timestamp: 1659824846
- exit_code: -4
  program: "\n/// You are given 2 words. You need to return true if the second word\
    \ or any of its rotations is a substring in the first word\n/// >>> cycpattern_check(a:\
    \ \"abcd\", b: \"abd\")\n/// false\n/// >>> cycpattern_check(a: \"hello\", b:\
    \ \"ell\")\n/// true\n/// >>> cycpattern_check(a: \"whassup\", b: \"psus\")\n\
    /// false\n/// >>> cycpattern_check(a: \"abab\", b: \"baa\")\n/// true\n/// >>>\
    \ cycpattern_check(a: \"efef\", b: \"eeff\")\n/// false\n/// >>> cycpattern_check(a:\
    \ \"himenss\", b: \"simen\")\n/// true\nfunc cycpattern_check(a: String, b: String)\
    \ -> Bool {\n    var b = b\n    for _ in 0..<b.count {\n        if a.contains(b)\
    \ {\n            return true\n        }\n        b.append(b.removeFirst())\n \
    \   }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(cycpattern_check(a:\
    \ \"xyzw\", b: \"xyw\") == false)\nassert(cycpattern_check(a: \"yello\", b: \"\
    ell\") == true)\nassert(cycpattern_check(a: \"whattup\", b: \"ptut\") == false)\n\
    assert(cycpattern_check(a: \"efef\", b: \"fee\") == true)\nassert(cycpattern_check(a:\
    \ \"abab\", b: \"aabb\") == false)\nassert(cycpattern_check(a: \"winemtt\", b:\
    \ \"tinem\") == true)"
  status: Exception
  stderr: 'Swift/Substring.swift:316: Fatal error: String index is out of bounds

    Current stack trace:

    0    libswiftCore.so                    0x00002ba9518f5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba9515ec561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ba9515ec286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ba9515ec13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ba9515ebbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftCore.so                    0x00002ba951746e40 Substring.index(_:offsetBy:)
    + 880

    6    libswiftCore.so                    0x00002ba95174b85c <unavailable> + 2873436

    7    libswiftCore.so                    0x00002ba951618920 Collection.formIndex(_:offsetBy:)
    + 116

    8    libswift_StringProcessing.so       0x00002ba9512d3b82 <unavailable> + 285570

    9    libswift_StringProcessing.so       0x00002ba9512d2b2f <unavailable> + 281391

    10   libswift_StringProcessing.so       0x00002ba9512d3ced <unavailable> + 285933

    11   libswift_StringProcessing.so       0x00002ba9512b942d <unavailable> + 177197

    12   libswift_StringProcessing.so       0x00002ba9512b7840 BidirectionalCollection<>.firstRange<A>(of:)
    + 1517

    13   libswift_StringProcessing.so       0x00002ba9512b7e70 StringProtocol.contains(_:)
    + 64

    14   tmpxxc0g7sv                        0x000055fb90321d4d <unavailable> + 7501

    15   tmpxxc0g7sv                        0x000055fb903215c5 <unavailable> + 5573

    16   libc.so.6                          0x00002ba951ae1460 __libc_start_main +
    245

    17   tmpxxc0g7sv                        0x000055fb90321299 <unavailable> + 4761

    '
  stdout: ''
  timestamp: 1659824845
- exit_code: 1
  program: "\n/// You are given 2 words. You need to return true if the second word\
    \ or any of its rotations is a substring in the first word\n/// >>> cycpattern_check(a:\
    \ \"abcd\", b: \"abd\")\n/// false\n/// >>> cycpattern_check(a: \"hello\", b:\
    \ \"ell\")\n/// true\n/// >>> cycpattern_check(a: \"whassup\", b: \"psus\")\n\
    /// false\n/// >>> cycpattern_check(a: \"abab\", b: \"baa\")\n/// true\n/// >>>\
    \ cycpattern_check(a: \"efef\", b: \"eeff\")\n/// false\n/// >>> cycpattern_check(a:\
    \ \"himenss\", b: \"simen\")\n/// true\nfunc cycpattern_check(a: String, b: String)\
    \ -> Bool {\n    let a = a.lowercased()\n    let b = b.lowercased()\n    if a.count\
    \ < b.count { return false }\n    if a.count == b.count { return a == b }\n  \
    \  let b_count = b.count\n    var b_index = b.startIndex\n    for _ in 0..<b_count\
    \ {\n        if a.contains(b) { return true }\n        b_index = b.index(after:\
    \ b_index)\n        let b_first = b[b.startIndex..<b_index]\n        let b_last\
    \ = b[b_index..<b.endIndex]\n        let b_rotated = String(b_last + b_first)\n\
    \        b = b_rotated\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(cycpattern_check(a: \"xyzw\", b: \"xyw\") == false)\nassert(cycpattern_check(a:\
    \ \"yello\", b: \"ell\") == true)\nassert(cycpattern_check(a: \"whattup\", b:\
    \ \"ptut\") == false)\nassert(cycpattern_check(a: \"efef\", b: \"fee\") == true)\n\
    assert(cycpattern_check(a: \"abab\", b: \"aabb\") == false)\nassert(cycpattern_check(a:\
    \ \"winemtt\", b: \"tinem\") == true)"
  status: SyntaxError
  stderr: "/tmp/tmph8n_6mwy.swift:28:9: error: cannot assign to value: 'b' is a 'let'\
    \ constant\n        b = b_rotated\n        ^\n/tmp/tmph8n_6mwy.swift:17:5: note:\
    \ change 'let' to 'var' to make it mutable\n    let b = b.lowercased()\n    ^~~\n\
    \    var\n"
  stdout: ''
  timestamp: 1659824846
- exit_code: -4
  program: "\n/// You are given 2 words. You need to return true if the second word\
    \ or any of its rotations is a substring in the first word\n/// >>> cycpattern_check(a:\
    \ \"abcd\", b: \"abd\")\n/// false\n/// >>> cycpattern_check(a: \"hello\", b:\
    \ \"ell\")\n/// true\n/// >>> cycpattern_check(a: \"whassup\", b: \"psus\")\n\
    /// false\n/// >>> cycpattern_check(a: \"abab\", b: \"baa\")\n/// true\n/// >>>\
    \ cycpattern_check(a: \"efef\", b: \"eeff\")\n/// false\n/// >>> cycpattern_check(a:\
    \ \"himenss\", b: \"simen\")\n/// true\nfunc cycpattern_check(a: String, b: String)\
    \ -> Bool {\n    let a = Array(a)\n    let b = Array(b)\n    let b_length = b.count\n\
    \    let a_length = a.count\n    if a_length < b_length {\n        return false\n\
    \    }\n    var b_index = 0\n    for i in 0..<a_length {\n        if a[i] == b[b_index]\
    \ {\n            b_index += 1\n            if b_index == b_length {\n        \
    \        return true\n            }\n        } else {\n            b_index = 0\n\
    \        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(cycpattern_check(a: \"xyzw\", b: \"xyw\") == false)\nassert(cycpattern_check(a:\
    \ \"yello\", b: \"ell\") == true)\nassert(cycpattern_check(a: \"whattup\", b:\
    \ \"ptut\") == false)\nassert(cycpattern_check(a: \"efef\", b: \"fee\") == true)\n\
    assert(cycpattern_check(a: \"abab\", b: \"aabb\") == false)\nassert(cycpattern_check(a:\
    \ \"winemtt\", b: \"tinem\") == true)"
  status: Exception
  stderr: 'tmp1qgumdag/tmp1qgumdag.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5b1e07bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5b1dd72b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5b1dd72988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5b1dd717b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1qgumdag                        0x00005599df1d0935 <unavailable> + 6453

    5    libc.so.6                          0x00002b5b1e267460 __libc_start_main +
    245

    6    tmp1qgumdag                        0x00005599df1d0299 <unavailable> + 4761

    '
  stdout: ''
  timestamp: 1659824846
- exit_code: -4
  program: "\n/// You are given 2 words. You need to return true if the second word\
    \ or any of its rotations is a substring in the first word\n/// >>> cycpattern_check(a:\
    \ \"abcd\", b: \"abd\")\n/// false\n/// >>> cycpattern_check(a: \"hello\", b:\
    \ \"ell\")\n/// true\n/// >>> cycpattern_check(a: \"whassup\", b: \"psus\")\n\
    /// false\n/// >>> cycpattern_check(a: \"abab\", b: \"baa\")\n/// true\n/// >>>\
    \ cycpattern_check(a: \"efef\", b: \"eeff\")\n/// false\n/// >>> cycpattern_check(a:\
    \ \"himenss\", b: \"simen\")\n/// true\nfunc cycpattern_check(a: String, b: String)\
    \ -> Bool {\n    if a.count < b.count {\n        return false\n    }\n    var\
    \ b = b\n    for _ in 0..<b.count {\n        if a.contains(b) {\n            return\
    \ true\n        }\n        b.append(b.removeFirst())\n    }\n    return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(cycpattern_check(a: \"xyzw\", b: \"xyw\") == false)\n\
    assert(cycpattern_check(a: \"yello\", b: \"ell\") == true)\nassert(cycpattern_check(a:\
    \ \"whattup\", b: \"ptut\") == false)\nassert(cycpattern_check(a: \"efef\", b:\
    \ \"fee\") == true)\nassert(cycpattern_check(a: \"abab\", b: \"aabb\") == false)\n\
    assert(cycpattern_check(a: \"winemtt\", b: \"tinem\") == true)"
  status: Exception
  stderr: 'Swift/Substring.swift:316: Fatal error: String index is out of bounds

    Current stack trace:

    0    libswiftCore.so                    0x00002b67c1ed2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b67c1bc9561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b67c1bc9286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b67c1bc913c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b67c1bc8bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftCore.so                    0x00002b67c1d23e40 Substring.index(_:offsetBy:)
    + 880

    6    libswiftCore.so                    0x00002b67c1d2885c <unavailable> + 2873436

    7    libswiftCore.so                    0x00002b67c1bf5920 Collection.formIndex(_:offsetBy:)
    + 116

    8    libswift_StringProcessing.so       0x00002b67c18b0b82 <unavailable> + 285570

    9    libswift_StringProcessing.so       0x00002b67c18afb2f <unavailable> + 281391

    10   libswift_StringProcessing.so       0x00002b67c18b0ced <unavailable> + 285933

    11   libswift_StringProcessing.so       0x00002b67c189642d <unavailable> + 177197

    12   libswift_StringProcessing.so       0x00002b67c1894840 BidirectionalCollection<>.firstRange<A>(of:)
    + 1517

    13   libswift_StringProcessing.so       0x00002b67c1894e70 StringProtocol.contains(_:)
    + 64

    14   tmp7ooyejfg                        0x0000562b4545dd8f <unavailable> + 7567

    15   tmp7ooyejfg                        0x0000562b4545d5c5 <unavailable> + 5573

    16   libc.so.6                          0x00002b67c20be460 __libc_start_main +
    245

    17   tmp7ooyejfg                        0x0000562b4545d299 <unavailable> + 4761

    '
  stdout: ''
  timestamp: 1659824846
- exit_code: -4
  program: "\n/// You are given 2 words. You need to return true if the second word\
    \ or any of its rotations is a substring in the first word\n/// >>> cycpattern_check(a:\
    \ \"abcd\", b: \"abd\")\n/// false\n/// >>> cycpattern_check(a: \"hello\", b:\
    \ \"ell\")\n/// true\n/// >>> cycpattern_check(a: \"whassup\", b: \"psus\")\n\
    /// false\n/// >>> cycpattern_check(a: \"abab\", b: \"baa\")\n/// true\n/// >>>\
    \ cycpattern_check(a: \"efef\", b: \"eeff\")\n/// false\n/// >>> cycpattern_check(a:\
    \ \"himenss\", b: \"simen\")\n/// true\nfunc cycpattern_check(a: String, b: String)\
    \ -> Bool {\n    let a = Array(a)\n    let b = Array(b)\n    let b_len = b.count\n\
    \    for i in 0..<a.count {\n        if a[i] == b[0] {\n            var j = 1\n\
    \            while j < b_len && a[(i + j) % a.count] == b[j] {\n             \
    \   j += 1\n            }\n            if j == b_len {\n                return\
    \ true\n            }\n        }\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(cycpattern_check(a: \"xyzw\", b: \"xyw\") == false)\n\
    assert(cycpattern_check(a: \"yello\", b: \"ell\") == true)\nassert(cycpattern_check(a:\
    \ \"whattup\", b: \"ptut\") == false)\nassert(cycpattern_check(a: \"efef\", b:\
    \ \"fee\") == true)\nassert(cycpattern_check(a: \"abab\", b: \"aabb\") == false)\n\
    assert(cycpattern_check(a: \"winemtt\", b: \"tinem\") == true)"
  status: Exception
  stderr: 'tmp9d_y8fye/tmp9d_y8fye.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab29e9c1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab29e6b8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab29e6b8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab29e6b77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9d_y8fye                        0x000055773941c975 <unavailable> + 6517

    5    libc.so.6                          0x00002ab29ebad460 __libc_start_main +
    245

    6    tmp9d_y8fye                        0x000055773941c2d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1659824846
- exit_code: 1
  program: "\n/// You are given 2 words. You need to return true if the second word\
    \ or any of its rotations is a substring in the first word\n/// >>> cycpattern_check(a:\
    \ \"abcd\", b: \"abd\")\n/// false\n/// >>> cycpattern_check(a: \"hello\", b:\
    \ \"ell\")\n/// true\n/// >>> cycpattern_check(a: \"whassup\", b: \"psus\")\n\
    /// false\n/// >>> cycpattern_check(a: \"abab\", b: \"baa\")\n/// true\n/// >>>\
    \ cycpattern_check(a: \"efef\", b: \"eeff\")\n/// false\n/// >>> cycpattern_check(a:\
    \ \"himenss\", b: \"simen\")\n/// true\nfunc cycpattern_check(a: String, b: String)\
    \ -> Bool {\n    if a.count == b.count {\n        return a == b\n    }\n    if\
    \ a.count < b.count {\n        return false\n    }\n    let b_count = b.count\n\
    \    let b_start = b.startIndex\n    let b_end = b.index(b_start, offsetBy: b_count)\n\
    \    let b_substring = b[b_start..<b_end]\n    let b_substring_count = b_substring.count\n\
    \    let b_substring_start = b_substring.startIndex\n    let b_substring_end =\
    \ b_substring.index(b_substring_start, offsetBy: b_substring_count)\n    let b_substring_substring\
    \ = b_substring[b_substring_start..<b_substring_end]\n    let b_substring_substring_count\
    \ = b_substring_substring.count\n    let b_substring_substring_start = b_substring_substring.startIndex\n\
    \    let b_substring_substring_end = b_substring_substring.index(b_substring_substring_start,\
    \ offsetBy: b_substring_substring_count)\n    let b_substring_substring_substring\
    \ = b_substring_substring[b_substring_substring_start..<b_substring_substring_end]\n\
    \    let b_substring_substring_substring_count = b_substring_substring_substring.count\n\
    \    let b_substring_substring_substring_start = b_substring_substring_substring.startIndex\n\
    \    let b_substring_substring_substring_end = b_substring_substring_substring.index(b_substring_substring_substring_start,\
    \ offsetBy: b_substring_substring_substring_count)\n    let b_substring_substring_substring_substring\
    \ = b_substring_substring_substring[b_substring_substring_substring_start..<b_substring_substring_substring_end]\n\
    \    let b_substring_substring\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(cycpattern_check(a:\
    \ \"xyzw\", b: \"xyw\") == false)\nassert(cycpattern_check(a: \"yello\", b: \"\
    ell\") == true)\nassert(cycpattern_check(a: \"whattup\", b: \"ptut\") == false)\n\
    assert(cycpattern_check(a: \"efef\", b: \"fee\") == true)\nassert(cycpattern_check(a:\
    \ \"abab\", b: \"aabb\") == false)\nassert(cycpattern_check(a: \"winemtt\", b:\
    \ \"tinem\") == true)"
  status: SyntaxError
  stderr: "/tmp/tmpy7nm1goi.swift:38:9: error: type annotation missing in pattern\n\
    \    let b_substring_substring\n        ^\n"
  stdout: ''
  timestamp: 1659824846
- exit_code: -4
  program: "\n/// You are given 2 words. You need to return true if the second word\
    \ or any of its rotations is a substring in the first word\n/// >>> cycpattern_check(a:\
    \ \"abcd\", b: \"abd\")\n/// false\n/// >>> cycpattern_check(a: \"hello\", b:\
    \ \"ell\")\n/// true\n/// >>> cycpattern_check(a: \"whassup\", b: \"psus\")\n\
    /// false\n/// >>> cycpattern_check(a: \"abab\", b: \"baa\")\n/// true\n/// >>>\
    \ cycpattern_check(a: \"efef\", b: \"eeff\")\n/// false\n/// >>> cycpattern_check(a:\
    \ \"himenss\", b: \"simen\")\n/// true\nfunc cycpattern_check(a: String, b: String)\
    \ -> Bool {\n    var a = a\n    var b = b\n    if a.count < b.count {\n      \
    \  return false\n    }\n    for _ in 0..<a.count {\n        if a.contains(b) {\n\
    \            return true\n        }\n        let first = a.removeFirst()\n   \
    \     a.append(first)\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(cycpattern_check(a: \"xyzw\", b: \"xyw\") == false)\nassert(cycpattern_check(a:\
    \ \"yello\", b: \"ell\") == true)\nassert(cycpattern_check(a: \"whattup\", b:\
    \ \"ptut\") == false)\nassert(cycpattern_check(a: \"efef\", b: \"fee\") == true)\n\
    assert(cycpattern_check(a: \"abab\", b: \"aabb\") == false)\nassert(cycpattern_check(a:\
    \ \"winemtt\", b: \"tinem\") == true)"
  status: Exception
  stderr: 'Swift/Substring.swift:316: Fatal error: String index is out of bounds

    Current stack trace:

    0    libswiftCore.so                    0x00002b59480d2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5947dc9561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b5947dc9286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b5947dc913c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b5947dc8bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftCore.so                    0x00002b5947f23e40 Substring.index(_:offsetBy:)
    + 880

    6    libswiftCore.so                    0x00002b5947f2885c <unavailable> + 2873436

    7    libswiftCore.so                    0x00002b5947df5920 Collection.formIndex(_:offsetBy:)
    + 116

    8    libswift_StringProcessing.so       0x00002b5947ab0b82 <unavailable> + 285570

    9    libswift_StringProcessing.so       0x00002b5947aafb2f <unavailable> + 281391

    10   libswift_StringProcessing.so       0x00002b5947ab0ced <unavailable> + 285933

    11   libswift_StringProcessing.so       0x00002b5947a9642d <unavailable> + 177197

    12   libswift_StringProcessing.so       0x00002b5947a94840 BidirectionalCollection<>.firstRange<A>(of:)
    + 1517

    13   libswift_StringProcessing.so       0x00002b5947a94e70 StringProtocol.contains(_:)
    + 64

    14   tmp37wlh22f                        0x0000559bd9328e6f <unavailable> + 7791

    15   tmp37wlh22f                        0x0000559bd93285c5 <unavailable> + 5573

    16   libc.so.6                          0x00002b59482be460 __libc_start_main +
    245

    17   tmp37wlh22f                        0x0000559bd9328299 <unavailable> + 4761

    '
  stdout: ''
  timestamp: 1659824845
- exit_code: -4
  program: "\n/// You are given 2 words. You need to return true if the second word\
    \ or any of its rotations is a substring in the first word\n/// >>> cycpattern_check(a:\
    \ \"abcd\", b: \"abd\")\n/// false\n/// >>> cycpattern_check(a: \"hello\", b:\
    \ \"ell\")\n/// true\n/// >>> cycpattern_check(a: \"whassup\", b: \"psus\")\n\
    /// false\n/// >>> cycpattern_check(a: \"abab\", b: \"baa\")\n/// true\n/// >>>\
    \ cycpattern_check(a: \"efef\", b: \"eeff\")\n/// false\n/// >>> cycpattern_check(a:\
    \ \"himenss\", b: \"simen\")\n/// true\nfunc cycpattern_check(a: String, b: String)\
    \ -> Bool {\n    var b = b\n    for _ in 0..<b.count {\n        if a.contains(b)\
    \ {\n            return true\n        }\n        b.append(b.removeFirst())\n \
    \   }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(cycpattern_check(a:\
    \ \"xyzw\", b: \"xyw\") == false)\nassert(cycpattern_check(a: \"yello\", b: \"\
    ell\") == true)\nassert(cycpattern_check(a: \"whattup\", b: \"ptut\") == false)\n\
    assert(cycpattern_check(a: \"efef\", b: \"fee\") == true)\nassert(cycpattern_check(a:\
    \ \"abab\", b: \"aabb\") == false)\nassert(cycpattern_check(a: \"winemtt\", b:\
    \ \"tinem\") == true)"
  status: Exception
  stderr: 'Swift/Substring.swift:316: Fatal error: String index is out of bounds

    Current stack trace:

    0    libswiftCore.so                    0x00002ba9518f5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba9515ec561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ba9515ec286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ba9515ec13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ba9515ebbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftCore.so                    0x00002ba951746e40 Substring.index(_:offsetBy:)
    + 880

    6    libswiftCore.so                    0x00002ba95174b85c <unavailable> + 2873436

    7    libswiftCore.so                    0x00002ba951618920 Collection.formIndex(_:offsetBy:)
    + 116

    8    libswift_StringProcessing.so       0x00002ba9512d3b82 <unavailable> + 285570

    9    libswift_StringProcessing.so       0x00002ba9512d2b2f <unavailable> + 281391

    10   libswift_StringProcessing.so       0x00002ba9512d3ced <unavailable> + 285933

    11   libswift_StringProcessing.so       0x00002ba9512b942d <unavailable> + 177197

    12   libswift_StringProcessing.so       0x00002ba9512b7840 BidirectionalCollection<>.firstRange<A>(of:)
    + 1517

    13   libswift_StringProcessing.so       0x00002ba9512b7e70 StringProtocol.contains(_:)
    + 64

    14   tmpxxc0g7sv                        0x000055fb90321d4d <unavailable> + 7501

    15   tmpxxc0g7sv                        0x000055fb903215c5 <unavailable> + 5573

    16   libc.so.6                          0x00002ba951ae1460 __libc_start_main +
    245

    17   tmpxxc0g7sv                        0x000055fb90321299 <unavailable> + 4761

    '
  stdout: ''
  timestamp: 1659824845
- exit_code: -4
  program: "\n/// You are given 2 words. You need to return true if the second word\
    \ or any of its rotations is a substring in the first word\n/// >>> cycpattern_check(a:\
    \ \"abcd\", b: \"abd\")\n/// false\n/// >>> cycpattern_check(a: \"hello\", b:\
    \ \"ell\")\n/// true\n/// >>> cycpattern_check(a: \"whassup\", b: \"psus\")\n\
    /// false\n/// >>> cycpattern_check(a: \"abab\", b: \"baa\")\n/// true\n/// >>>\
    \ cycpattern_check(a: \"efef\", b: \"eeff\")\n/// false\n/// >>> cycpattern_check(a:\
    \ \"himenss\", b: \"simen\")\n/// true\nfunc cycpattern_check(a: String, b: String)\
    \ -> Bool {\n    var a = a\n    var b = b\n    if a.count == b.count {\n     \
    \   if a == b {\n            return true\n        }\n        for _ in 0..<a.count\
    \ {\n            a.append(a.removeFirst())\n            if a == b {\n        \
    \        return true\n            }\n        }\n    }\n    return false\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(cycpattern_check(a: \"xyzw\", b: \"xyw\") == false)\n\
    assert(cycpattern_check(a: \"yello\", b: \"ell\") == true)\nassert(cycpattern_check(a:\
    \ \"whattup\", b: \"ptut\") == false)\nassert(cycpattern_check(a: \"efef\", b:\
    \ \"fee\") == true)\nassert(cycpattern_check(a: \"abab\", b: \"aabb\") == false)\n\
    assert(cycpattern_check(a: \"winemtt\", b: \"tinem\") == true)"
  status: Exception
  stderr: 'tmpx_1yui2r/tmpx_1yui2r.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b415e779c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b415e470b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b415e470988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b415e46f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpx_1yui2r                        0x0000564cfab566d1 <unavailable> + 5841

    5    libc.so.6                          0x00002b415e965460 __libc_start_main +
    245

    6    tmpx_1yui2r                        0x0000564cfab56249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659824846
- exit_code: -4
  program: "\n/// You are given 2 words. You need to return true if the second word\
    \ or any of its rotations is a substring in the first word\n/// >>> cycpattern_check(a:\
    \ \"abcd\", b: \"abd\")\n/// false\n/// >>> cycpattern_check(a: \"hello\", b:\
    \ \"ell\")\n/// true\n/// >>> cycpattern_check(a: \"whassup\", b: \"psus\")\n\
    /// false\n/// >>> cycpattern_check(a: \"abab\", b: \"baa\")\n/// true\n/// >>>\
    \ cycpattern_check(a: \"efef\", b: \"eeff\")\n/// false\n/// >>> cycpattern_check(a:\
    \ \"himenss\", b: \"simen\")\n/// true\nfunc cycpattern_check(a: String, b: String)\
    \ -> Bool {\n    let a = a.lowercased()\n    let b = b.lowercased()\n    let a_len\
    \ = a.count\n    let b_len = b.count\n    if a_len < b_len {\n        return false\n\
    \    }\n    let a_arr = Array(a)\n    let b_arr = Array(b)\n    var i = 0\n  \
    \  var j = 0\n    while i < a_len {\n        if a_arr[i] == b_arr[j] {\n     \
    \       j += 1\n            if j == b_len {\n                return true\n   \
    \         }\n        } else {\n            j = 0\n        }\n        i += 1\n\
    \    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(cycpattern_check(a:\
    \ \"xyzw\", b: \"xyw\") == false)\nassert(cycpattern_check(a: \"yello\", b: \"\
    ell\") == true)\nassert(cycpattern_check(a: \"whattup\", b: \"ptut\") == false)\n\
    assert(cycpattern_check(a: \"efef\", b: \"fee\") == true)\nassert(cycpattern_check(a:\
    \ \"abab\", b: \"aabb\") == false)\nassert(cycpattern_check(a: \"winemtt\", b:\
    \ \"tinem\") == true)"
  status: Exception
  stderr: 'tmp2193lx66/tmp2193lx66.swift:57: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad7e7c69c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad7e7960b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad7e7960988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad7e795f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2193lx66                        0x0000557a933fe7f5 <unavailable> + 6133

    5    libc.so.6                          0x00002ad7e7e55460 __libc_start_main +
    245

    6    tmp2193lx66                        0x0000557a933fe159 <unavailable> + 4441

    '
  stdout: ''
  timestamp: 1659824846
- exit_code: 1
  program: "\n/// You are given 2 words. You need to return true if the second word\
    \ or any of its rotations is a substring in the first word\n/// >>> cycpattern_check(a:\
    \ \"abcd\", b: \"abd\")\n/// false\n/// >>> cycpattern_check(a: \"hello\", b:\
    \ \"ell\")\n/// true\n/// >>> cycpattern_check(a: \"whassup\", b: \"psus\")\n\
    /// false\n/// >>> cycpattern_check(a: \"abab\", b: \"baa\")\n/// true\n/// >>>\
    \ cycpattern_check(a: \"efef\", b: \"eeff\")\n/// false\n/// >>> cycpattern_check(a:\
    \ \"himenss\", b: \"simen\")\n/// true\nfunc cycpattern_check(a: String, b: String)\
    \ -> Bool {\n    if a.count < b.count {\n        return false\n    }\n    var\
    \ b_rotated = b\n    for _ in 0..<b.count {\n        if a.contains(b_rotated)\
    \ {\n            return true\n        }\n        b_rotated = b_rotated.rotate()\n\
    \    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(cycpattern_check(a:\
    \ \"xyzw\", b: \"xyw\") == false)\nassert(cycpattern_check(a: \"yello\", b: \"\
    ell\") == true)\nassert(cycpattern_check(a: \"whattup\", b: \"ptut\") == false)\n\
    assert(cycpattern_check(a: \"efef\", b: \"fee\") == true)\nassert(cycpattern_check(a:\
    \ \"abab\", b: \"aabb\") == false)\nassert(cycpattern_check(a: \"winemtt\", b:\
    \ \"tinem\") == true)"
  status: SyntaxError
  stderr: "/tmp/tmp97lckjht.swift:24:31: error: value of type 'String' has no member\
    \ 'rotate'\n        b_rotated = b_rotated.rotate()\n                    ~~~~~~~~~\
    \ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824846
- exit_code: 1
  program: "\n/// You are given 2 words. You need to return true if the second word\
    \ or any of its rotations is a substring in the first word\n/// >>> cycpattern_check(a:\
    \ \"abcd\", b: \"abd\")\n/// false\n/// >>> cycpattern_check(a: \"hello\", b:\
    \ \"ell\")\n/// true\n/// >>> cycpattern_check(a: \"whassup\", b: \"psus\")\n\
    /// false\n/// >>> cycpattern_check(a: \"abab\", b: \"baa\")\n/// true\n/// >>>\
    \ cycpattern_check(a: \"efef\", b: \"eeff\")\n/// false\n/// >>> cycpattern_check(a:\
    \ \"himenss\", b: \"simen\")\n/// true\nfunc cycpattern_check(a: String, b: String)\
    \ -> Bool {\n    let a = a.characters\n    let b = b.characters\n    var b_index\
    \ = b.startIndex\n    var a_index = a.startIndex\n    var b_count = 0\n    var\
    \ a_count = 0\n    var b_found = false\n    var a_found = false\n    while a_count\
    \ < a.count && b_count < b.count {\n        if a[a_index] == b[b_index] {\n  \
    \          b_index = b.index(after: b_index)\n            b_count += 1\n     \
    \       b_found = true\n        } else {\n            b_index = b.startIndex\n\
    \            b_count = 0\n            b_found = false\n        }\n        if b_count\
    \ == b.count {\n            return true\n        }\n        a_index = a.index(after:\
    \ a_index)\n        a_count += 1\n        if a_count == a.count {\n          \
    \  if b_found {\n                a_index = a.startIndex\n                a_count\
    \ = 0\n            } else {\n                return false\n            }\n   \
    \     }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(cycpattern_check(a:\
    \ \"xyzw\", b: \"xyw\") == false)\nassert(cycpattern_check(a: \"yello\", b: \"\
    ell\") == true)\nassert(cycpattern_check(a: \"whattup\", b: \"ptut\") == false)\n\
    assert(cycpattern_check(a: \"efef\", b: \"fee\") == true)\nassert(cycpattern_check(a:\
    \ \"abab\", b: \"aabb\") == false)\nassert(cycpattern_check(a: \"winemtt\", b:\
    \ \"tinem\") == true)"
  status: SyntaxError
  stderr: "/tmp/tmp26vacmlz.swift:16:15: error: 'characters' is unavailable: Please\
    \ use String directly\n    let a = a.characters\n              ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmp26vacmlz.swift:17:15: error: 'characters'\
    \ is unavailable: Please use String directly\n    let b = b.characters\n     \
    \         ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmp26vacmlz.swift:23:9:\
    \ warning: initialization of variable 'a_found' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var a_found = false\n    ~~~~^~~~~~~\n\
    \    _\n"
  stdout: ''
  timestamp: 1659824846
- exit_code: 1
  program: "\n/// You are given 2 words. You need to return true if the second word\
    \ or any of its rotations is a substring in the first word\n/// >>> cycpattern_check(a:\
    \ \"abcd\", b: \"abd\")\n/// false\n/// >>> cycpattern_check(a: \"hello\", b:\
    \ \"ell\")\n/// true\n/// >>> cycpattern_check(a: \"whassup\", b: \"psus\")\n\
    /// false\n/// >>> cycpattern_check(a: \"abab\", b: \"baa\")\n/// true\n/// >>>\
    \ cycpattern_check(a: \"efef\", b: \"eeff\")\n/// false\n/// >>> cycpattern_check(a:\
    \ \"himenss\", b: \"simen\")\n/// true\nfunc cycpattern_check(a: String, b: String)\
    \ -> Bool {\n    if a.count != b.count {\n        return false\n    }\n    let\
    \ a = Array(a)\n    let b = Array(b)\n    let b_rotations = b.rotations()\n  \
    \  for rotation in b_rotations {\n        if a.contains(rotation) {\n        \
    \    return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(cycpattern_check(a: \"xyzw\", b: \"xyw\") == false)\nassert(cycpattern_check(a:\
    \ \"yello\", b: \"ell\") == true)\nassert(cycpattern_check(a: \"whattup\", b:\
    \ \"ptut\") == false)\nassert(cycpattern_check(a: \"efef\", b: \"fee\") == true)\n\
    assert(cycpattern_check(a: \"abab\", b: \"aabb\") == false)\nassert(cycpattern_check(a:\
    \ \"winemtt\", b: \"tinem\") == true)"
  status: SyntaxError
  stderr: "/tmp/tmpi7yt_cf0.swift:21:25: error: value of type '[String.Element]' (aka\
    \ 'Array<Character>') has no member 'rotations'\n    let b_rotations = b.rotations()\n\
    \                      ~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824846
- exit_code: -4
  program: "\n/// You are given 2 words. You need to return true if the second word\
    \ or any of its rotations is a substring in the first word\n/// >>> cycpattern_check(a:\
    \ \"abcd\", b: \"abd\")\n/// false\n/// >>> cycpattern_check(a: \"hello\", b:\
    \ \"ell\")\n/// true\n/// >>> cycpattern_check(a: \"whassup\", b: \"psus\")\n\
    /// false\n/// >>> cycpattern_check(a: \"abab\", b: \"baa\")\n/// true\n/// >>>\
    \ cycpattern_check(a: \"efef\", b: \"eeff\")\n/// false\n/// >>> cycpattern_check(a:\
    \ \"himenss\", b: \"simen\")\n/// true\nfunc cycpattern_check(a: String, b: String)\
    \ -> Bool {\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(cycpattern_check(a:\
    \ \"xyzw\", b: \"xyw\") == false)\nassert(cycpattern_check(a: \"yello\", b: \"\
    ell\") == true)\nassert(cycpattern_check(a: \"whattup\", b: \"ptut\") == false)\n\
    assert(cycpattern_check(a: \"efef\", b: \"fee\") == true)\nassert(cycpattern_check(a:\
    \ \"abab\", b: \"aabb\") == false)\nassert(cycpattern_check(a: \"winemtt\", b:\
    \ \"tinem\") == true)"
  status: Exception
  stderr: 'tmp5ngt0b9p/tmp5ngt0b9p.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5997ce8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b59979dfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b59979df988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b59979de7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5ngt0b9p                        0x00005609c2f0a371 <unavailable> + 4977

    5    libc.so.6                          0x00002b5997ed4460 __libc_start_main +
    245

    6    tmp5ngt0b9p                        0x00005609c2f09ee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1659824845
- exit_code: -4
  program: "\n/// You are given 2 words. You need to return true if the second word\
    \ or any of its rotations is a substring in the first word\n/// >>> cycpattern_check(a:\
    \ \"abcd\", b: \"abd\")\n/// false\n/// >>> cycpattern_check(a: \"hello\", b:\
    \ \"ell\")\n/// true\n/// >>> cycpattern_check(a: \"whassup\", b: \"psus\")\n\
    /// false\n/// >>> cycpattern_check(a: \"abab\", b: \"baa\")\n/// true\n/// >>>\
    \ cycpattern_check(a: \"efef\", b: \"eeff\")\n/// false\n/// >>> cycpattern_check(a:\
    \ \"himenss\", b: \"simen\")\n/// true\nfunc cycpattern_check(a: String, b: String)\
    \ -> Bool {\n    guard a.count >= b.count else { return false }\n    let a = Array(a)\n\
    \    let b = Array(b)\n    var i = 0\n    while i < a.count {\n        var j =\
    \ 0\n        while j < b.count && a[(i + j) % a.count] == b[j] {\n           \
    \ j += 1\n        }\n        if j == b.count {\n            return true\n    \
    \    }\n        i += 1\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(cycpattern_check(a: \"xyzw\", b: \"xyw\") == false)\nassert(cycpattern_check(a:\
    \ \"yello\", b: \"ell\") == true)\nassert(cycpattern_check(a: \"whattup\", b:\
    \ \"ptut\") == false)\nassert(cycpattern_check(a: \"efef\", b: \"fee\") == true)\n\
    assert(cycpattern_check(a: \"abab\", b: \"aabb\") == false)\nassert(cycpattern_check(a:\
    \ \"winemtt\", b: \"tinem\") == true)"
  status: Exception
  stderr: 'tmpgac4pb1a/tmpgac4pb1a.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0eab824c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0eab51bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0eab51b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0eab51a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgac4pb1a                        0x000055dd25f228d5 <unavailable> + 6357

    5    libc.so.6                          0x00002b0eaba10460 __libc_start_main +
    245

    6    tmpgac4pb1a                        0x000055dd25f22239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659824846
- exit_code: -4
  program: "\n/// You are given 2 words. You need to return true if the second word\
    \ or any of its rotations is a substring in the first word\n/// >>> cycpattern_check(a:\
    \ \"abcd\", b: \"abd\")\n/// false\n/// >>> cycpattern_check(a: \"hello\", b:\
    \ \"ell\")\n/// true\n/// >>> cycpattern_check(a: \"whassup\", b: \"psus\")\n\
    /// false\n/// >>> cycpattern_check(a: \"abab\", b: \"baa\")\n/// true\n/// >>>\
    \ cycpattern_check(a: \"efef\", b: \"eeff\")\n/// false\n/// >>> cycpattern_check(a:\
    \ \"himenss\", b: \"simen\")\n/// true\nfunc cycpattern_check(a: String, b: String)\
    \ -> Bool {\n    let a = a.lowercased()\n    let b = b.lowercased()\n    let b_length\
    \ = b.count\n    let a_length = a.count\n    let a_chars = Array(a)\n    let b_chars\
    \ = Array(b)\n    var b_rotated = b_chars\n    for _ in 0..<b_length {\n     \
    \   b_rotated.append(b_rotated.removeFirst())\n        if String(b_rotated) ==\
    \ b {\n            continue\n        }\n        var a_index = 0\n        var b_index\
    \ = 0\n        while a_index < a_length && b_index < b_length {\n            if\
    \ a_chars[a_index] == b_rotated[b_index] {\n                a_index += 1\n   \
    \             b_index += 1\n            } else {\n                a_index += 1\n\
    \            }\n        }\n        if b_index == b_length {\n            return\
    \ true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(cycpattern_check(a: \"xyzw\", b: \"xyw\") == false)\nassert(cycpattern_check(a:\
    \ \"yello\", b: \"ell\") == true)\nassert(cycpattern_check(a: \"whattup\", b:\
    \ \"ptut\") == false)\nassert(cycpattern_check(a: \"efef\", b: \"fee\") == true)\n\
    assert(cycpattern_check(a: \"abab\", b: \"aabb\") == false)\nassert(cycpattern_check(a:\
    \ \"winemtt\", b: \"tinem\") == true)"
  status: Exception
  stderr: 'tmpj5ckyzzi/tmpj5ckyzzi.swift:59: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afede8dbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afede5d2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afede5d2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afede5d17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpj5ckyzzi                        0x000055f61e4c1971 <unavailable> + 6513

    5    libc.so.6                          0x00002afedeac7460 __libc_start_main +
    245

    6    tmpj5ckyzzi                        0x000055f61e4c14e9 <unavailable> + 5353

    '
  stdout: ''
  timestamp: 1659824846
- exit_code: -4
  program: "\n/// You are given 2 words. You need to return true if the second word\
    \ or any of its rotations is a substring in the first word\n/// >>> cycpattern_check(a:\
    \ \"abcd\", b: \"abd\")\n/// false\n/// >>> cycpattern_check(a: \"hello\", b:\
    \ \"ell\")\n/// true\n/// >>> cycpattern_check(a: \"whassup\", b: \"psus\")\n\
    /// false\n/// >>> cycpattern_check(a: \"abab\", b: \"baa\")\n/// true\n/// >>>\
    \ cycpattern_check(a: \"efef\", b: \"eeff\")\n/// false\n/// >>> cycpattern_check(a:\
    \ \"himenss\", b: \"simen\")\n/// true\nfunc cycpattern_check(a: String, b: String)\
    \ -> Bool {\n    var a = a\n    var b = b\n    if a.count < b.count {\n      \
    \  return false\n    }\n    for _ in 0..<a.count {\n        if a.contains(b) {\n\
    \            return true\n        }\n        a.append(a.removeFirst())\n    }\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(cycpattern_check(a:\
    \ \"xyzw\", b: \"xyw\") == false)\nassert(cycpattern_check(a: \"yello\", b: \"\
    ell\") == true)\nassert(cycpattern_check(a: \"whattup\", b: \"ptut\") == false)\n\
    assert(cycpattern_check(a: \"efef\", b: \"fee\") == true)\nassert(cycpattern_check(a:\
    \ \"abab\", b: \"aabb\") == false)\nassert(cycpattern_check(a: \"winemtt\", b:\
    \ \"tinem\") == true)"
  status: Exception
  stderr: 'Swift/Substring.swift:316: Fatal error: String index is out of bounds

    Current stack trace:

    0    libswiftCore.so                    0x00002ab3d3ee4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab3d3bdb561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ab3d3bdb286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ab3d3bdb13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ab3d3bdabb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftCore.so                    0x00002ab3d3d35e40 Substring.index(_:offsetBy:)
    + 880

    6    libswiftCore.so                    0x00002ab3d3d3a85c <unavailable> + 2873436

    7    libswiftCore.so                    0x00002ab3d3c07920 Collection.formIndex(_:offsetBy:)
    + 116

    8    libswift_StringProcessing.so       0x00002ab3d38c2b82 <unavailable> + 285570

    9    libswift_StringProcessing.so       0x00002ab3d38c1b2f <unavailable> + 281391

    10   libswift_StringProcessing.so       0x00002ab3d38c2ced <unavailable> + 285933

    11   libswift_StringProcessing.so       0x00002ab3d38a842d <unavailable> + 177197

    12   libswift_StringProcessing.so       0x00002ab3d38a6840 BidirectionalCollection<>.firstRange<A>(of:)
    + 1517

    13   libswift_StringProcessing.so       0x00002ab3d38a6e70 StringProtocol.contains(_:)
    + 64

    14   tmpst2ie6pm                        0x00005647168e3e5c <unavailable> + 7772

    15   tmpst2ie6pm                        0x00005647168e35c5 <unavailable> + 5573

    16   libc.so.6                          0x00002ab3d40d0460 __libc_start_main +
    245

    17   tmpst2ie6pm                        0x00005647168e3299 <unavailable> + 4761

    '
  stdout: ''
  timestamp: 1659824845
