language: swift
name: HumanEval_81_numerical_letter_grade
results:
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades: [String] = []\n    for grade\
    \ in grades {\n        if grade >= 4.0 {\n            letterGrades.append(\"A+\"\
    )\n        } else if grade >= 3.7 {\n            letterGrades.append(\"A\")\n\
    \        } else if grade >= 3.3 {\n            letterGrades.append(\"A-\")\n \
    \       } else if grade >= 3.0 {\n            letterGrades.append(\"B+\")\n  \
    \      } else if grade >= 2.7 {\n            letterGrades.append(\"B\")\n    \
    \    } else if grade >= 2.3 {\n            letterGrades.append(\"B-\")\n     \
    \   } else if grade >= 2.0 {\n            letterGrades.append(\"C+\")\n      \
    \  } else if grade >= 1.7 {\n            letterGrades.append(\"C\")\n        }\
    \ else if grade >= 1.3 {\n            letterGrades.append(\"C-\")\n        } else\
    \ if grade >= 1.0 {\n            letterGrades.append(\"D+\")\n        } else if\
    \ grade >= 0.7 {\n            letterGrades.append(\"D\")\n        } else if grade\
    \ >= 0.0 {\n            letterGrades.append(\"D-\")\n        } else {\n      \
    \      letterGrades.append(\"E\")\n        }\n    }\n    return letterGrades\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpzd4bshlr/tmpzd4bshlr.swift:71: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b26274e3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b26271dab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b26271da988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b26271d97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzd4bshlr                        0x000056416df8a7a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b26276cf460 __libc_start_main +
    245

    6    tmpzd4bshlr                        0x000056416df8a2c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660013958
- exit_code: 0
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades: [String] = []\n    for grade\
    \ in grades {\n        if grade == 4.0 {\n            letterGrades.append(\"A+\"\
    )\n        } else if grade > 3.7 {\n            letterGrades.append(\"A\")\n \
    \       } else if grade > 3.3 {\n            letterGrades.append(\"A-\")\n   \
    \     } else if grade > 3.0 {\n            letterGrades.append(\"B+\")\n     \
    \   } else if grade > 2.7 {\n            letterGrades.append(\"B\")\n        }\
    \ else if grade > 2.3 {\n            letterGrades.append(\"B-\")\n        } else\
    \ if grade > 2.0 {\n            letterGrades.append(\"C+\")\n        } else if\
    \ grade > 1.7 {\n            letterGrades.append(\"C\")\n        } else if grade\
    \ > 1.3 {\n            letterGrades.append(\"C-\")\n        } else if grade >\
    \ 1.0 {\n            letterGrades.append(\"D+\")\n        } else if grade > 0.7\
    \ {\n            letterGrades.append(\"D\")\n        } else if grade > 0.0 {\n\
    \            letterGrades.append(\"D-\")\n        } else {\n            letterGrades.append(\"\
    E\")\n        }\n    }\n    return letterGrades\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2])\
    \ == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013958
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letter_grades: [String] = []\n    for grade\
    \ in grades {\n        if grade >= 4.0 {\n            letter_grades.append(\"\
    A+\")\n        } else if grade >= 3.7 {\n            letter_grades.append(\"A\"\
    )\n        } else if grade >= 3.3 {\n            letter_grades.append(\"A-\")\n\
    \        } else if grade >= 3.0 {\n            letter_grades.append(\"B+\")\n\
    \        } else if grade >= 2.7 {\n            letter_grades.append(\"B\")\n \
    \       } else if grade >= 2.3 {\n            letter_grades.append(\"B-\")\n \
    \       } else if grade >= 2.0 {\n            letter_grades.append(\"C+\")\n \
    \       } else if grade >= 1.7 {\n            letter_grades.append(\"C\")\n  \
    \      } else if grade >= 1.3 {\n            letter_grades.append(\"C-\")\n  \
    \      } else if grade >= 1.0 {\n            letter_grades.append(\"D+\")\n  \
    \      } else if grade >= 0.7 {\n            letter_grades.append(\"D\")\n   \
    \     } else if grade >= 0.0 {\n            letter_grades.append(\"D-\")\n   \
    \     } else {\n            letter_grades.append(\"E\")\n        }\n    }\n  \
    \  return letter_grades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpg5y0zgra/tmpg5y0zgra.swift:71: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8d221f6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8d21eedb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8d21eed988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8d21eec7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpg5y0zgra                        0x0000556d548d07a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b8d223e2460 __libc_start_main +
    245

    6    tmpg5y0zgra                        0x0000556d548d02c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660013958
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letter_grades: [String] = []\n    for grade\
    \ in grades {\n        if grade >= 4.0 {\n            letter_grades.append(\"\
    A+\")\n        } else if grade >= 3.7 {\n            letter_grades.append(\"A\"\
    )\n        } else if grade >= 3.3 {\n            letter_grades.append(\"A-\")\n\
    \        } else if grade >= 3.0 {\n            letter_grades.append(\"B+\")\n\
    \        } else if grade >= 2.7 {\n            letter_grades.append(\"B\")\n \
    \       } else if grade >= 2.3 {\n            letter_grades.append(\"B-\")\n \
    \       } else if grade >= 2.0 {\n            letter_grades.append(\"C+\")\n \
    \       } else if grade >= 1.7 {\n            letter_grades.append(\"C\")\n  \
    \      } else if grade >= 1.3 {\n            letter_grades.append(\"C-\")\n  \
    \      } else if grade >= 1.0 {\n            letter_grades.append(\"D+\")\n  \
    \      } else if grade >= 0.7 {\n            letter_grades.append(\"D\")\n   \
    \     } else if grade >= 0.0 {\n            letter_grades.append(\"D-\")\n   \
    \     } else {\n            letter_grades.append(\"E\")\n        }\n    }\n  \
    \  return letter_grades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpg5y0zgra/tmpg5y0zgra.swift:71: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8d221f6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8d21eedb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8d21eed988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8d21eec7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpg5y0zgra                        0x0000556d548d07a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b8d223e2460 __libc_start_main +
    245

    6    tmpg5y0zgra                        0x0000556d548d02c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660013958
- exit_code: 0
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades: [String] = []\n    for grade\
    \ in grades {\n        if grade == 4.0 {\n            letterGrades.append(\"A+\"\
    )\n        } else if grade > 3.7 {\n            letterGrades.append(\"A\")\n \
    \       } else if grade > 3.3 {\n            letterGrades.append(\"A-\")\n   \
    \     } else if grade > 3.0 {\n            letterGrades.append(\"B+\")\n     \
    \   } else if grade > 2.7 {\n            letterGrades.append(\"B\")\n        }\
    \ else if grade > 2.3 {\n            letterGrades.append(\"B-\")\n        } else\
    \ if grade > 2.0 {\n            letterGrades.append(\"C+\")\n        } else if\
    \ grade > 1.7 {\n            letterGrades.append(\"C\")\n        } else if grade\
    \ > 1.3 {\n            letterGrades.append(\"C-\")\n        } else if grade >\
    \ 1.0 {\n            letterGrades.append(\"D+\")\n        } else if grade > 0.7\
    \ {\n            letterGrades.append(\"D\")\n        } else if grade > 0.0 {\n\
    \            letterGrades.append(\"D-\")\n        } else {\n            letterGrades.append(\"\
    E\")\n        }\n    }\n    return letterGrades\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2])\
    \ == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013958
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letter_grades: [String] = []\n    for grade\
    \ in grades {\n        if grade >= 4.0 {\n            letter_grades.append(\"\
    A+\")\n        } else if grade >= 3.7 {\n            letter_grades.append(\"A\"\
    )\n        } else if grade >= 3.3 {\n            letter_grades.append(\"A-\")\n\
    \        } else if grade >= 3.0 {\n            letter_grades.append(\"B+\")\n\
    \        } else if grade >= 2.7 {\n            letter_grades.append(\"B\")\n \
    \       } else if grade >= 2.3 {\n            letter_grades.append(\"B-\")\n \
    \       } else if grade >= 2.0 {\n            letter_grades.append(\"C+\")\n \
    \       } else if grade >= 1.7 {\n            letter_grades.append(\"C\")\n  \
    \      } else if grade >= 1.3 {\n            letter_grades.append(\"C-\")\n  \
    \      } else if grade >= 1.0 {\n            letter_grades.append(\"D+\")\n  \
    \      } else if grade >= 0.7 {\n            letter_grades.append(\"D\")\n   \
    \     } else if grade >= 0.0 {\n            letter_grades.append(\"D-\")\n   \
    \     } else {\n            letter_grades.append(\"E\")\n        }\n    }\n  \
    \  return letter_grades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpg5y0zgra/tmpg5y0zgra.swift:71: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8d221f6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8d21eedb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8d21eed988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8d21eec7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpg5y0zgra                        0x0000556d548d07a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b8d223e2460 __libc_start_main +
    245

    6    tmpg5y0zgra                        0x0000556d548d02c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660013958
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letter_grades: [String] = []\n    for grade\
    \ in grades {\n        if grade >= 4.0 {\n            letter_grades.append(\"\
    A+\")\n        } else if grade >= 3.7 {\n            letter_grades.append(\"A\"\
    )\n        } else if grade >= 3.3 {\n            letter_grades.append(\"A-\")\n\
    \        } else if grade >= 3.0 {\n            letter_grades.append(\"B+\")\n\
    \        } else if grade >= 2.7 {\n            letter_grades.append(\"B\")\n \
    \       } else if grade >= 2.3 {\n            letter_grades.append(\"B-\")\n \
    \       } else if grade >= 2.0 {\n            letter_grades.append(\"C+\")\n \
    \       } else if grade >= 1.7 {\n            letter_grades.append(\"C\")\n  \
    \      } else if grade >= 1.3 {\n            letter_grades.append(\"C-\")\n  \
    \      } else if grade >= 1.0 {\n            letter_grades.append(\"D+\")\n  \
    \      } else if grade >= 0.7 {\n            letter_grades.append(\"D\")\n   \
    \     } else if grade >= 0.0 {\n            letter_grades.append(\"D-\")\n   \
    \     } else {\n            letter_grades.append(\"E\")\n        }\n    }\n  \
    \  return letter_grades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpg5y0zgra/tmpg5y0zgra.swift:71: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8d221f6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8d21eedb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8d21eed988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8d21eec7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpg5y0zgra                        0x0000556d548d07a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b8d223e2460 __libc_start_main +
    245

    6    tmpg5y0zgra                        0x0000556d548d02c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660013958
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades: [String] = []\n    for grade\
    \ in grades {\n        if grade >= 4.0 {\n            letterGrades.append(\"A+\"\
    )\n        } else if grade >= 3.7 {\n            letterGrades.append(\"A\")\n\
    \        } else if grade >= 3.3 {\n            letterGrades.append(\"A-\")\n \
    \       } else if grade >= 3.0 {\n            letterGrades.append(\"B+\")\n  \
    \      } else if grade >= 2.7 {\n            letterGrades.append(\"B\")\n    \
    \    } else if grade >= 2.3 {\n            letterGrades.append(\"B-\")\n     \
    \   } else if grade >= 2.0 {\n            letterGrades.append(\"C+\")\n      \
    \  } else if grade >= 1.7 {\n            letterGrades.append(\"C\")\n        }\
    \ else if grade >= 1.3 {\n            letterGrades.append(\"C-\")\n        } else\
    \ if grade >= 1.0 {\n            letterGrades.append(\"D+\")\n        } else if\
    \ grade >= 0.7 {\n            letterGrades.append(\"D\")\n        } else if grade\
    \ >= 0.0 {\n            letterGrades.append(\"D-\")\n        } else {\n      \
    \      letterGrades.append(\"E\")\n        }\n    }\n    return letterGrades\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpzd4bshlr/tmpzd4bshlr.swift:71: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b26274e3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b26271dab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b26271da988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b26271d97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzd4bshlr                        0x000056416df8a7a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b26276cf460 __libc_start_main +
    245

    6    tmpzd4bshlr                        0x000056416df8a2c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660013958
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades: [String] = []\n    for grade\
    \ in grades {\n        switch grade {\n        case 4.0:\n            letterGrades.append(\"\
    A+\")\n        case 3.7..<4.0:\n            letterGrades.append(\"A\")\n     \
    \   case 3.3..<3.7:\n            letterGrades.append(\"A-\")\n        case 3.0..<3.3:\n\
    \            letterGrades.append(\"B+\")\n        case 2.7..<3.0:\n          \
    \  letterGrades.append(\"B\")\n        case 2.3..<2.7:\n            letterGrades.append(\"\
    B-\")\n        case 2.0..<2.3:\n            letterGrades.append(\"C+\")\n    \
    \    case 1.7..<2.0:\n            letterGrades.append(\"C\")\n        case 1.3..<1.7:\n\
    \            letterGrades.append(\"C-\")\n        case 1.0..<1.3:\n          \
    \  letterGrades.append(\"D+\")\n        case 0.7..<1.0:\n            letterGrades.append(\"\
    D\")\n        case 0.0..<0.7:\n            letterGrades.append(\"D-\")\n     \
    \   case 0.0:\n            letterGrades.append(\"E\")\n        default:\n    \
    \        letterGrades.append(\"Invalid grade\")\n        }\n    }\n    return\
    \ letterGrades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmp5u38w_6z/tmp5u38w_6z.swift:74: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac06755fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac067256b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac067256988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac0672557b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5u38w_6z                        0x0000555567c6d8d6 <unavailable> + 6358

    5    libc.so.6                          0x00002ac06774b460 __libc_start_main +
    245

    6    tmp5u38w_6z                        0x0000555567c6d3f9 <unavailable> + 5113

    '
  stdout: ''
  timestamp: 1660013958
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var result: [String] = []\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            result.append(\"A+\")\n        } else\
    \ if grade >= 3.7 {\n            result.append(\"A\")\n        } else if grade\
    \ >= 3.3 {\n            result.append(\"A-\")\n        } else if grade >= 3.0\
    \ {\n            result.append(\"B+\")\n        } else if grade >= 2.7 {\n   \
    \         result.append(\"B\")\n        } else if grade >= 2.3 {\n           \
    \ result.append(\"B-\")\n        } else if grade >= 2.0 {\n            result.append(\"\
    C+\")\n        } else if grade >= 1.7 {\n            result.append(\"C\")\n  \
    \      } else if grade >= 1.3 {\n            result.append(\"C-\")\n        }\
    \ else if grade >= 1.0 {\n            result.append(\"D+\")\n        } else if\
    \ grade >= 0.7 {\n            result.append(\"D\")\n        } else if grade >=\
    \ 0.0 {\n            result.append(\"D-\")\n        } else {\n            result.append(\"\
    E\")\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2])\
    \ == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpdri1lvgf/tmpdri1lvgf.swift:71: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b295682ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2956525b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2956525988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b29565247b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdri1lvgf                        0x000055e4cf0bd7a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b2956a1a460 __libc_start_main +
    245

    6    tmpdri1lvgf                        0x000055e4cf0bd2c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660013958
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var result: [String] = []\n    for grade in grades\
    \ {\n        switch grade {\n        case 4.0:\n            result.append(\"A+\"\
    )\n        case 3.7..<4.0:\n            result.append(\"A\")\n        case 3.3..<3.7:\n\
    \            result.append(\"A-\")\n        case 3.0..<3.3:\n            result.append(\"\
    B+\")\n        case 2.7..<3.0:\n            result.append(\"B\")\n        case\
    \ 2.3..<2.7:\n            result.append(\"B-\")\n        case 2.0..<2.3:\n   \
    \         result.append(\"C+\")\n        case 1.7..<2.0:\n            result.append(\"\
    C\")\n        case 1.3..<1.7:\n            result.append(\"C-\")\n        case\
    \ 1.0..<1.3:\n            result.append(\"D+\")\n        case 0.7..<1.0:\n   \
    \         result.append(\"D\")\n        case 0.0..<0.7:\n            result.append(\"\
    D-\")\n        case 0.0:\n            result.append(\"E\")\n        default:\n\
    \            print(\"Error\")\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpl4i4l296/tmpl4i4l296.swift:74: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b502b8fdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b502b5f4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b502b5f4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b502b5f37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpl4i4l296                        0x0000557f5b4939f6 <unavailable> + 6646

    5    libc.so.6                          0x00002b502bae9460 __libc_start_main +
    245

    6    tmpl4i4l296                        0x0000557f5b493519 <unavailable> + 5401

    '
  stdout: ''
  timestamp: 1660013958
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades: [String] = []\n    for grade\
    \ in grades {\n        if grade >= 4.0 {\n            letterGrades.append(\"A+\"\
    )\n        } else if grade >= 3.7 {\n            letterGrades.append(\"A\")\n\
    \        } else if grade >= 3.3 {\n            letterGrades.append(\"A-\")\n \
    \       } else if grade >= 3.0 {\n            letterGrades.append(\"B+\")\n  \
    \      } else if grade >= 2.7 {\n            letterGrades.append(\"B\")\n    \
    \    } else if grade >= 2.3 {\n            letterGrades.append(\"B-\")\n     \
    \   } else if grade >= 2.0 {\n            letterGrades.append(\"C+\")\n      \
    \  } else if grade >= 1.7 {\n            letterGrades.append(\"C\")\n        }\
    \ else if grade >= 1.3 {\n            letterGrades.append(\"C-\")\n        } else\
    \ if grade >= 1.0 {\n            letterGrades.append(\"D+\")\n        } else if\
    \ grade >= 0.7 {\n            letterGrades.append(\"D\")\n        } else if grade\
    \ >= 0.0 {\n            letterGrades.append(\"D-\")\n        } else {\n      \
    \      letterGrades.append(\"E\")\n        }\n    }\n    return letterGrades\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpzd4bshlr/tmpzd4bshlr.swift:71: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b26274e3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b26271dab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b26271da988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b26271d97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzd4bshlr                        0x000056416df8a7a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b26276cf460 __libc_start_main +
    245

    6    tmpzd4bshlr                        0x000056416df8a2c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660013958
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades: [String] = []\n    for grade\
    \ in grades {\n        if grade >= 4.0 {\n            letterGrades.append(\"A+\"\
    )\n        } else if grade >= 3.7 {\n            letterGrades.append(\"A\")\n\
    \        } else if grade >= 3.3 {\n            letterGrades.append(\"A-\")\n \
    \       } else if grade >= 3.0 {\n            letterGrades.append(\"B+\")\n  \
    \      } else if grade >= 2.7 {\n            letterGrades.append(\"B\")\n    \
    \    } else if grade >= 2.3 {\n            letterGrades.append(\"B-\")\n     \
    \   } else if grade >= 2.0 {\n            letterGrades.append(\"C+\")\n      \
    \  } else if grade >= 1.7 {\n            letterGrades.append(\"C\")\n        }\
    \ else if grade >= 1.3 {\n            letterGrades.append(\"C-\")\n        } else\
    \ if grade >= 1.0 {\n            letterGrades.append(\"D+\")\n        } else if\
    \ grade >= 0.7 {\n            letterGrades.append(\"D\")\n        } else if grade\
    \ >= 0.0 {\n            letterGrades.append(\"D-\")\n        } else {\n      \
    \      letterGrades.append(\"E\")\n        }\n    }\n    return letterGrades\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpzd4bshlr/tmpzd4bshlr.swift:71: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b26274e3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b26271dab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b26271da988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b26271d97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzd4bshlr                        0x000056416df8a7a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b26276cf460 __libc_start_main +
    245

    6    tmpzd4bshlr                        0x000056416df8a2c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660013958
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades: [String] = []\n    for grade\
    \ in grades {\n        if grade >= 4.0 {\n            letterGrades.append(\"A+\"\
    )\n        } else if grade >= 3.7 {\n            letterGrades.append(\"A\")\n\
    \        } else if grade >= 3.3 {\n            letterGrades.append(\"A-\")\n \
    \       } else if grade >= 3.0 {\n            letterGrades.append(\"B+\")\n  \
    \      } else if grade >= 2.7 {\n            letterGrades.append(\"B\")\n    \
    \    } else if grade >= 2.3 {\n            letterGrades.append(\"B-\")\n     \
    \   } else if grade >= 2.0 {\n            letterGrades.append(\"C+\")\n      \
    \  } else if grade >= 1.7 {\n            letterGrades.append(\"C\")\n        }\
    \ else if grade >= 1.3 {\n            letterGrades.append(\"C-\")\n        } else\
    \ if grade >= 1.0 {\n            letterGrades.append(\"D+\")\n        } else if\
    \ grade >= 0.7 {\n            letterGrades.append(\"D\")\n        } else if grade\
    \ >= 0.0 {\n            letterGrades.append(\"D-\")\n        } else {\n      \
    \      letterGrades.append(\"E\")\n        }\n    }\n    return letterGrades\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpzd4bshlr/tmpzd4bshlr.swift:71: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b26274e3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b26271dab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b26271da988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b26271d97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzd4bshlr                        0x000056416df8a7a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b26276cf460 __libc_start_main +
    245

    6    tmpzd4bshlr                        0x000056416df8a2c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660013958
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var result: [String] = []\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            result.append(\"A+\")\n        } else\
    \ if grade >= 3.7 {\n            result.append(\"A\")\n        } else if grade\
    \ >= 3.3 {\n            result.append(\"A-\")\n        } else if grade >= 3.0\
    \ {\n            result.append(\"B+\")\n        } else if grade >= 2.7 {\n   \
    \         result.append(\"B\")\n        } else if grade >= 2.3 {\n           \
    \ result.append(\"B-\")\n        } else if grade >= 2.0 {\n            result.append(\"\
    C+\")\n        } else if grade >= 1.7 {\n            result.append(\"C\")\n  \
    \      } else if grade >= 1.3 {\n            result.append(\"C-\")\n        }\
    \ else if grade >= 1.0 {\n            result.append(\"D+\")\n        } else if\
    \ grade >= 0.7 {\n            result.append(\"D\")\n        } else if grade >=\
    \ 0.0 {\n            result.append(\"D-\")\n        } else {\n            result.append(\"\
    E\")\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2])\
    \ == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpdri1lvgf/tmpdri1lvgf.swift:71: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b295682ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2956525b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2956525988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b29565247b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdri1lvgf                        0x000055e4cf0bd7a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b2956a1a460 __libc_start_main +
    245

    6    tmpdri1lvgf                        0x000055e4cf0bd2c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660013958
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades: [String] = []\n    for grade\
    \ in grades {\n        switch grade {\n        case 4.0:\n            letterGrades.append(\"\
    A+\")\n        case 3.7..<4.0:\n            letterGrades.append(\"A\")\n     \
    \   case 3.3..<3.7:\n            letterGrades.append(\"A-\")\n        case 3.0..<3.3:\n\
    \            letterGrades.append(\"B+\")\n        case 2.7..<3.0:\n          \
    \  letterGrades.append(\"B\")\n        case 2.3..<2.7:\n            letterGrades.append(\"\
    B-\")\n        case 2.0..<2.3:\n            letterGrades.append(\"C+\")\n    \
    \    case 1.7..<2.0:\n            letterGrades.append(\"C\")\n        case 1.3..<1.7:\n\
    \            letterGrades.append(\"C-\")\n        case 1.0..<1.3:\n          \
    \  letterGrades.append(\"D+\")\n        case 0.7..<1.0:\n            letterGrades.append(\"\
    D\")\n        case 0.0..<0.7:\n            letterGrades.append(\"D-\")\n     \
    \   default:\n            letterGrades.append(\"E\")\n        }\n    }\n    return\
    \ letterGrades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpsao889wi/tmpsao889wi.swift:72: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4658481c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4658178b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4658178988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b46581777b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsao889wi                        0x000055b5f8a108d6 <unavailable> + 6358

    5    libc.so.6                          0x00002b465866d460 __libc_start_main +
    245

    6    tmpsao889wi                        0x000055b5f8a103f9 <unavailable> + 5113

    '
  stdout: ''
  timestamp: 1660013958
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var result: [String] = []\n    for grade in grades\
    \ {\n        switch grade {\n        case 4.0:\n            result.append(\"A+\"\
    )\n        case 3.7..<4.0:\n            result.append(\"A\")\n        case 3.3..<3.7:\n\
    \            result.append(\"A-\")\n        case 3.0..<3.3:\n            result.append(\"\
    B+\")\n        case 2.7..<3.0:\n            result.append(\"B\")\n        case\
    \ 2.3..<2.7:\n            result.append(\"B-\")\n        case 2.0..<2.3:\n   \
    \         result.append(\"C+\")\n        case 1.7..<2.0:\n            result.append(\"\
    C\")\n        case 1.3..<1.7:\n            result.append(\"C-\")\n        case\
    \ 1.0..<1.3:\n            result.append(\"D+\")\n        case 0.7..<1.0:\n   \
    \         result.append(\"D\")\n        case 0.0..<0.7:\n            result.append(\"\
    D-\")\n        case 0.0:\n            result.append(\"E\")\n        default:\n\
    \            result.append(\"Invalid\")\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpnvkt28oz/tmpnvkt28oz.swift:74: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8c0fd42c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8c0fa39b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8c0fa39988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8c0fa387b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnvkt28oz                        0x0000556dd690d8d6 <unavailable> + 6358

    5    libc.so.6                          0x00002b8c0ff2e460 __libc_start_main +
    245

    6    tmpnvkt28oz                        0x0000556dd690d3f9 <unavailable> + 5113

    '
  stdout: ''
  timestamp: 1660013958
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades: [String] = []\n    for grade\
    \ in grades {\n        if grade >= 4.0 {\n            letterGrades.append(\"A+\"\
    )\n        } else if grade >= 3.7 {\n            letterGrades.append(\"A\")\n\
    \        } else if grade >= 3.3 {\n            letterGrades.append(\"A-\")\n \
    \       } else if grade >= 3.0 {\n            letterGrades.append(\"B+\")\n  \
    \      } else if grade >= 2.7 {\n            letterGrades.append(\"B\")\n    \
    \    } else if grade >= 2.3 {\n            letterGrades.append(\"B-\")\n     \
    \   } else if grade >= 2.0 {\n            letterGrades.append(\"C+\")\n      \
    \  } else if grade >= 1.7 {\n            letterGrades.append(\"C\")\n        }\
    \ else if grade >= 1.3 {\n            letterGrades.append(\"C-\")\n        } else\
    \ if grade >= 1.0 {\n            letterGrades.append(\"D+\")\n        } else if\
    \ grade >= 0.7 {\n            letterGrades.append(\"D\")\n        } else if grade\
    \ >= 0.0 {\n            letterGrades.append(\"D-\")\n        } else {\n      \
    \      letterGrades.append(\"E\")\n        }\n    }\n    return letterGrades\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpzd4bshlr/tmpzd4bshlr.swift:71: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b26274e3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b26271dab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b26271da988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b26271d97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzd4bshlr                        0x000056416df8a7a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b26276cf460 __libc_start_main +
    245

    6    tmpzd4bshlr                        0x000056416df8a2c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660013958
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letter_grades: [String] = []\n    for grade\
    \ in grades {\n        switch grade {\n        case 4.0:\n            letter_grades.append(\"\
    A+\")\n        case 3.7..<4.0:\n            letter_grades.append(\"A\")\n    \
    \    case 3.3..<3.7:\n            letter_grades.append(\"A-\")\n        case 3.0..<3.3:\n\
    \            letter_grades.append(\"B+\")\n        case 2.7..<3.0:\n         \
    \   letter_grades.append(\"B\")\n        case 2.3..<2.7:\n            letter_grades.append(\"\
    B-\")\n        case 2.0..<2.3:\n            letter_grades.append(\"C+\")\n   \
    \     case 1.7..<2.0:\n            letter_grades.append(\"C\")\n        case 1.3..<1.7:\n\
    \            letter_grades.append(\"C-\")\n        case 1.0..<1.3:\n         \
    \   letter_grades.append(\"D+\")\n        case 0.7..<1.0:\n            letter_grades.append(\"\
    D\")\n        case 0.0..<0.7:\n            letter_grades.append(\"D-\")\n    \
    \    case 0.0:\n            letter_grades.append(\"E\")\n        default:\n  \
    \          letter_grades.append(\"Invalid\")\n        }\n    }\n    return letter_grades\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmp8l318ljb/tmp8l318ljb.swift:74: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8025a0fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8025706b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8025706988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b80257057b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8l318ljb                        0x0000561941b948d6 <unavailable> + 6358

    5    libc.so.6                          0x00002b8025bfb460 __libc_start_main +
    245

    6    tmp8l318ljb                        0x0000561941b943f9 <unavailable> + 5113

    '
  stdout: ''
  timestamp: 1660013958
- exit_code: 0
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades = [String]()\n    for grade in\
    \ grades {\n        if grade == 4.0 {\n            letterGrades.append(\"A+\"\
    )\n        } else if grade > 3.7 {\n            letterGrades.append(\"A\")\n \
    \       } else if grade > 3.3 {\n            letterGrades.append(\"A-\")\n   \
    \     } else if grade > 3.0 {\n            letterGrades.append(\"B+\")\n     \
    \   } else if grade > 2.7 {\n            letterGrades.append(\"B\")\n        }\
    \ else if grade > 2.3 {\n            letterGrades.append(\"B-\")\n        } else\
    \ if grade > 2.0 {\n            letterGrades.append(\"C+\")\n        } else if\
    \ grade > 1.7 {\n            letterGrades.append(\"C\")\n        } else if grade\
    \ > 1.3 {\n            letterGrades.append(\"C-\")\n        } else if grade >\
    \ 1.0 {\n            letterGrades.append(\"D+\")\n        } else if grade > 0.7\
    \ {\n            letterGrades.append(\"D\")\n        } else if grade > 0.0 {\n\
    \            letterGrades.append(\"D-\")\n        } else {\n            letterGrades.append(\"\
    E\")\n        }\n    }\n    return letterGrades\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2])\
    \ == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013958
- exit_code: 0
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades: [String] = []\n    for grade\
    \ in grades {\n        if grade == 4.0 {\n            letterGrades.append(\"A+\"\
    )\n        } else if grade > 3.7 {\n            letterGrades.append(\"A\")\n \
    \       } else if grade > 3.3 {\n            letterGrades.append(\"A-\")\n   \
    \     } else if grade > 3.0 {\n            letterGrades.append(\"B+\")\n     \
    \   } else if grade > 2.7 {\n            letterGrades.append(\"B\")\n        }\
    \ else if grade > 2.3 {\n            letterGrades.append(\"B-\")\n        } else\
    \ if grade > 2.0 {\n            letterGrades.append(\"C+\")\n        } else if\
    \ grade > 1.7 {\n            letterGrades.append(\"C\")\n        } else if grade\
    \ > 1.3 {\n            letterGrades.append(\"C-\")\n        } else if grade >\
    \ 1.0 {\n            letterGrades.append(\"D+\")\n        } else if grade > 0.7\
    \ {\n            letterGrades.append(\"D\")\n        } else if grade > 0.0 {\n\
    \            letterGrades.append(\"D-\")\n        } else {\n            letterGrades.append(\"\
    E\")\n        }\n    }\n    return letterGrades\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2])\
    \ == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013958
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades: [String] = []\n    for grade\
    \ in grades {\n        if grade >= 4.0 {\n            letterGrades.append(\"A+\"\
    )\n        } else if grade >= 3.7 {\n            letterGrades.append(\"A\")\n\
    \        } else if grade >= 3.3 {\n            letterGrades.append(\"A-\")\n \
    \       } else if grade >= 3.0 {\n            letterGrades.append(\"B+\")\n  \
    \      } else if grade >= 2.7 {\n            letterGrades.append(\"B\")\n    \
    \    } else if grade >= 2.3 {\n            letterGrades.append(\"B-\")\n     \
    \   } else if grade >= 2.0 {\n            letterGrades.append(\"C+\")\n      \
    \  } else if grade >= 1.7 {\n            letterGrades.append(\"C\")\n        }\
    \ else if grade >= 1.3 {\n            letterGrades.append(\"C-\")\n        } else\
    \ if grade >= 1.0 {\n            letterGrades.append(\"D+\")\n        } else if\
    \ grade >= 0.7 {\n            letterGrades.append(\"D\")\n        } else if grade\
    \ >= 0.0 {\n            letterGrades.append(\"D-\")\n        } else {\n      \
    \      letterGrades.append(\"E\")\n        }\n    }\n    return letterGrades\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpzd4bshlr/tmpzd4bshlr.swift:71: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b26274e3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b26271dab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b26271da988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b26271d97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzd4bshlr                        0x000056416df8a7a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b26276cf460 __libc_start_main +
    245

    6    tmpzd4bshlr                        0x000056416df8a2c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660013958
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades: [String] = []\n    for grade\
    \ in grades {\n        if grade >= 4.0 {\n            letterGrades.append(\"A+\"\
    )\n        } else if grade >= 3.7 {\n            letterGrades.append(\"A\")\n\
    \        } else if grade >= 3.3 {\n            letterGrades.append(\"A-\")\n \
    \       } else if grade >= 3.0 {\n            letterGrades.append(\"B+\")\n  \
    \      } else if grade >= 2.7 {\n            letterGrades.append(\"B\")\n    \
    \    } else if grade >= 2.3 {\n            letterGrades.append(\"B-\")\n     \
    \   } else if grade >= 2.0 {\n            letterGrades.append(\"C+\")\n      \
    \  } else if grade >= 1.7 {\n            letterGrades.append(\"C\")\n        }\
    \ else if grade >= 1.3 {\n            letterGrades.append(\"C-\")\n        } else\
    \ if grade >= 1.0 {\n            letterGrades.append(\"D+\")\n        } else if\
    \ grade >= 0.7 {\n            letterGrades.append(\"D\")\n        } else if grade\
    \ >= 0.0 {\n            letterGrades.append(\"D-\")\n        } else {\n      \
    \      letterGrades.append(\"E\")\n        }\n    }\n    return letterGrades\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpzd4bshlr/tmpzd4bshlr.swift:71: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b26274e3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b26271dab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b26271da988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b26271d97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzd4bshlr                        0x000056416df8a7a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b26276cf460 __libc_start_main +
    245

    6    tmpzd4bshlr                        0x000056416df8a2c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660013958
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    // Your code here\n    return []\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5])\
    \ == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmp2q46o5co/tmp2q46o5co.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b453c021c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b453bd18b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b453bd18988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b453bd177b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2q46o5co                        0x000056375593d5e6 <unavailable> + 5606

    5    libc.so.6                          0x00002b453c20d460 __libc_start_main +
    245

    6    tmp2q46o5co                        0x000056375593d109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660013958
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades: [String] = []\n    for grade\
    \ in grades {\n        switch grade {\n        case 4.0:\n            letterGrades.append(\"\
    A+\")\n        case 3.7..<4.0:\n            letterGrades.append(\"A\")\n     \
    \   case 3.3..<3.7:\n            letterGrades.append(\"A-\")\n        case 3.0..<3.3:\n\
    \            letterGrades.append(\"B+\")\n        case 2.7..<3.0:\n          \
    \  letterGrades.append(\"B\")\n        case 2.3..<2.7:\n            letterGrades.append(\"\
    B-\")\n        case 2.0..<2.3:\n            letterGrades.append(\"C+\")\n    \
    \    case 1.7..<2.0:\n            letterGrades.append(\"C\")\n        case 1.3..<1.7:\n\
    \            letterGrades.append(\"C-\")\n        case 1.0..<1.3:\n          \
    \  letterGrades.append(\"D+\")\n        case 0.7..<1.0:\n            letterGrades.append(\"\
    D\")\n        case 0.0..<0.7:\n            letterGrades.append(\"D-\")\n     \
    \   case 0.0:\n            letterGrades.append(\"E\")\n        default:\n    \
    \        print(\"Invalid grade\")\n        }\n    }\n    return letterGrades\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpexljrswj/tmpexljrswj.swift:74: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b69da2ffc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b69d9ff6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b69d9ff6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b69d9ff57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpexljrswj                        0x000055c20e58a9f6 <unavailable> + 6646

    5    libc.so.6                          0x00002b69da4eb460 __libc_start_main +
    245

    6    tmpexljrswj                        0x000055c20e58a519 <unavailable> + 5401

    '
  stdout: ''
  timestamp: 1660013958
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades = [String]()\n    for grade in\
    \ grades {\n        if grade >= 4.0 {\n            letterGrades.append(\"A+\"\
    )\n        } else if grade >= 3.7 {\n            letterGrades.append(\"A\")\n\
    \        } else if grade >= 3.3 {\n            letterGrades.append(\"A-\")\n \
    \       } else if grade >= 3.0 {\n            letterGrades.append(\"B+\")\n  \
    \      } else if grade >= 2.7 {\n            letterGrades.append(\"B\")\n    \
    \    } else if grade >= 2.3 {\n            letterGrades.append(\"B-\")\n     \
    \   } else if grade >= 2.0 {\n            letterGrades.append(\"C+\")\n      \
    \  } else if grade >= 1.7 {\n            letterGrades.append(\"C\")\n        }\
    \ else if grade >= 1.3 {\n            letterGrades.append(\"C-\")\n        } else\
    \ if grade >= 1.0 {\n            letterGrades.append(\"D+\")\n        } else if\
    \ grade >= 0.7 {\n            letterGrades.append(\"D\")\n        } else if grade\
    \ >= 0.0 {\n            letterGrades.append(\"D-\")\n        } else {\n      \
    \      letterGrades.append(\"E\")\n        }\n    }\n    return letterGrades\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmp_e648e_q/tmp_e648e_q.swift:71: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae1592c1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae158fb8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae158fb8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae158fb77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_e648e_q                        0x0000559655f5e7f6 <unavailable> + 6134

    5    libc.so.6                          0x00002ae1594ad460 __libc_start_main +
    245

    6    tmp_e648e_q                        0x0000559655f5e319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1660013958
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades: [String] = []\n    for grade\
    \ in grades {\n        if grade >= 4.0 {\n            letterGrades.append(\"A+\"\
    )\n        } else if grade >= 3.7 {\n            letterGrades.append(\"A\")\n\
    \        } else if grade >= 3.3 {\n            letterGrades.append(\"A-\")\n \
    \       } else if grade >= 3.0 {\n            letterGrades.append(\"B+\")\n  \
    \      } else if grade >= 2.7 {\n            letterGrades.append(\"B\")\n    \
    \    } else if grade >= 2.3 {\n            letterGrades.append(\"B-\")\n     \
    \   } else if grade >= 2.0 {\n            letterGrades.append(\"C+\")\n      \
    \  } else if grade >= 1.7 {\n            letterGrades.append(\"C\")\n        }\
    \ else if grade >= 1.3 {\n            letterGrades.append(\"C-\")\n        } else\
    \ if grade >= 1.0 {\n            letterGrades.append(\"D+\")\n        } else if\
    \ grade >= 0.7 {\n            letterGrades.append(\"D\")\n        } else if grade\
    \ >= 0.0 {\n            letterGrades.append(\"D-\")\n        } else {\n      \
    \      letterGrades.append(\"E\")\n        }\n    }\n    return letterGrades\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpzd4bshlr/tmpzd4bshlr.swift:71: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b26274e3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b26271dab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b26271da988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b26271d97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzd4bshlr                        0x000056416df8a7a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b26276cf460 __libc_start_main +
    245

    6    tmpzd4bshlr                        0x000056416df8a2c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660013958
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades: [String] = []\n    for grade\
    \ in grades {\n        if grade >= 4.0 {\n            letterGrades.append(\"A+\"\
    )\n        } else if grade >= 3.7 {\n            letterGrades.append(\"A\")\n\
    \        } else if grade >= 3.3 {\n            letterGrades.append(\"A-\")\n \
    \       } else if grade >= 3.0 {\n            letterGrades.append(\"B+\")\n  \
    \      } else if grade >= 2.7 {\n            letterGrades.append(\"B\")\n    \
    \    } else if grade >= 2.3 {\n            letterGrades.append(\"B-\")\n     \
    \   } else if grade >= 2.0 {\n            letterGrades.append(\"C+\")\n      \
    \  } else if grade >= 1.7 {\n            letterGrades.append(\"C\")\n        }\
    \ else if grade >= 1.3 {\n            letterGrades.append(\"C-\")\n        } else\
    \ if grade >= 1.0 {\n            letterGrades.append(\"D+\")\n        } else if\
    \ grade >= 0.7 {\n            letterGrades.append(\"D\")\n        } else if grade\
    \ >= 0.0 {\n            letterGrades.append(\"D-\")\n        } else {\n      \
    \      letterGrades.append(\"E\")\n        }\n    }\n    return letterGrades\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpzd4bshlr/tmpzd4bshlr.swift:71: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b26274e3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b26271dab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b26271da988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b26271d97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzd4bshlr                        0x000056416df8a7a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b26276cf460 __libc_start_main +
    245

    6    tmpzd4bshlr                        0x000056416df8a2c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660013958
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var grades_letter: [String] = []\n    for grade\
    \ in grades {\n        if grade >= 4.0 {\n            grades_letter.append(\"\
    A+\")\n        } else if grade >= 3.7 {\n            grades_letter.append(\"A\"\
    )\n        } else if grade >= 3.3 {\n            grades_letter.append(\"A-\")\n\
    \        } else if grade >= 3.0 {\n            grades_letter.append(\"B+\")\n\
    \        } else if grade >= 2.7 {\n            grades_letter.append(\"B\")\n \
    \       } else if grade >= 2.3 {\n            grades_letter.append(\"B-\")\n \
    \       } else if grade >= 2.0 {\n            grades_letter.append(\"C+\")\n \
    \       } else if grade >= 1.7 {\n            grades_letter.append(\"C\")\n  \
    \      } else if grade >= 1.3 {\n            grades_letter.append(\"C-\")\n  \
    \      } else if grade >= 1.0 {\n            grades_letter.append(\"D+\")\n  \
    \      } else if grade >= 0.7 {\n            grades_letter.append(\"D\")\n   \
    \     } else if grade >= 0.0 {\n            grades_letter.append(\"D-\")\n   \
    \     } else {\n            grades_letter.append(\"E\")\n        }\n    }\n  \
    \  return grades_letter\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpth1p2moa/tmpth1p2moa.swift:71: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6d92b3dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6d92834b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6d92834988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6d928337b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpth1p2moa                        0x000056227adf57a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b6d92d29460 __libc_start_main +
    245

    6    tmpth1p2moa                        0x000056227adf52c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660013958
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var result: [String] = []\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            result.append(\"A+\")\n        } else\
    \ if grade >= 3.7 {\n            result.append(\"A\")\n        } else if grade\
    \ >= 3.3 {\n            result.append(\"A-\")\n        } else if grade >= 3.0\
    \ {\n            result.append(\"B+\")\n        } else if grade >= 2.7 {\n   \
    \         result.append(\"B\")\n        } else if grade >= 2.3 {\n           \
    \ result.append(\"B-\")\n        } else if grade >= 2.0 {\n            result.append(\"\
    C+\")\n        } else if grade >= 1.7 {\n            result.append(\"C\")\n  \
    \      } else if grade >= 1.3 {\n            result.append(\"C-\")\n        }\
    \ else if grade >= 1.0 {\n            result.append(\"D+\")\n        } else if\
    \ grade >= 0.7 {\n            result.append(\"D\")\n        } else if grade >=\
    \ 0.0 {\n            result.append(\"D-\")\n        } else {\n            result.append(\"\
    E\")\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2])\
    \ == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpdri1lvgf/tmpdri1lvgf.swift:71: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b295682ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2956525b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2956525988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b29565247b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdri1lvgf                        0x000055e4cf0bd7a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b2956a1a460 __libc_start_main +
    245

    6    tmpdri1lvgf                        0x000055e4cf0bd2c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660013958
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var grades = grades\n    var result = [String]()\n\
    \    for grade in grades {\n        if grade >= 4.0 {\n            result.append(\"\
    A+\")\n        } else if grade >= 3.7 {\n            result.append(\"A\")\n  \
    \      } else if grade >= 3.3 {\n            result.append(\"A-\")\n        }\
    \ else if grade >= 3.0 {\n            result.append(\"B+\")\n        } else if\
    \ grade >= 2.7 {\n            result.append(\"B\")\n        } else if grade >=\
    \ 2.3 {\n            result.append(\"B-\")\n        } else if grade >= 2.0 {\n\
    \            result.append(\"C+\")\n        } else if grade >= 1.7 {\n       \
    \     result.append(\"C\")\n        } else if grade >= 1.3 {\n            result.append(\"\
    C-\")\n        } else if grade >= 1.0 {\n            result.append(\"D+\")\n \
    \       } else if grade >= 0.7 {\n            result.append(\"D\")\n        }\
    \ else if grade >= 0.0 {\n            result.append(\"D-\")\n        } else {\n\
    \            result.append(\"E\")\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmph_92uj_h/tmph_92uj_h.swift:72: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b70cbef6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b70cbbedb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b70cbbed988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b70cbbec7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmph_92uj_h                        0x00005599534437f6 <unavailable> + 6134

    5    libc.so.6                          0x00002b70cc0e2460 __libc_start_main +
    245

    6    tmph_92uj_h                        0x0000559953443319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1660013958
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades = [String]()\n    for grade in\
    \ grades {\n        if grade >= 4.0 {\n            letterGrades.append(\"A+\"\
    )\n        } else if grade >= 3.7 {\n            letterGrades.append(\"A\")\n\
    \        } else if grade >= 3.3 {\n            letterGrades.append(\"A-\")\n \
    \       } else if grade >= 3.0 {\n            letterGrades.append(\"B+\")\n  \
    \      } else if grade >= 2.7 {\n            letterGrades.append(\"B\")\n    \
    \    } else if grade >= 2.3 {\n            letterGrades.append(\"B-\")\n     \
    \   } else if grade >= 2.0 {\n            letterGrades.append(\"C+\")\n      \
    \  } else if grade >= 1.7 {\n            letterGrades.append(\"C\")\n        }\
    \ else if grade >= 1.3 {\n            letterGrades.append(\"C-\")\n        } else\
    \ if grade >= 1.0 {\n            letterGrades.append(\"D+\")\n        } else if\
    \ grade >= 0.7 {\n            letterGrades.append(\"D\")\n        } else if grade\
    \ >= 0.0 {\n            letterGrades.append(\"D-\")\n        } else {\n      \
    \      letterGrades.append(\"E\")\n        }\n    }\n    return letterGrades\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmp_e648e_q/tmp_e648e_q.swift:71: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae1592c1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae158fb8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae158fb8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae158fb77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_e648e_q                        0x0000559655f5e7f6 <unavailable> + 6134

    5    libc.so.6                          0x00002ae1594ad460 __libc_start_main +
    245

    6    tmp_e648e_q                        0x0000559655f5e319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1660013958
- exit_code: 0
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades: [String] = []\n    for grade\
    \ in grades {\n        if grade == 4.0 {\n            letterGrades.append(\"A+\"\
    )\n        } else if grade > 3.7 {\n            letterGrades.append(\"A\")\n \
    \       } else if grade > 3.3 {\n            letterGrades.append(\"A-\")\n   \
    \     } else if grade > 3.0 {\n            letterGrades.append(\"B+\")\n     \
    \   } else if grade > 2.7 {\n            letterGrades.append(\"B\")\n        }\
    \ else if grade > 2.3 {\n            letterGrades.append(\"B-\")\n        } else\
    \ if grade > 2.0 {\n            letterGrades.append(\"C+\")\n        } else if\
    \ grade > 1.7 {\n            letterGrades.append(\"C\")\n        } else if grade\
    \ > 1.3 {\n            letterGrades.append(\"C-\")\n        } else if grade >\
    \ 1.0 {\n            letterGrades.append(\"D+\")\n        } else if grade > 0.7\
    \ {\n            letterGrades.append(\"D\")\n        } else if grade > 0.0 {\n\
    \            letterGrades.append(\"D-\")\n        } else {\n            letterGrades.append(\"\
    E\")\n        }\n    }\n    return letterGrades\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2])\
    \ == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013958
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades: [String] = []\n    for grade\
    \ in grades {\n        if grade >= 4.0 {\n            letterGrades.append(\"A+\"\
    )\n        } else if grade >= 3.7 {\n            letterGrades.append(\"A\")\n\
    \        } else if grade >= 3.3 {\n            letterGrades.append(\"A-\")\n \
    \       } else if grade >= 3.0 {\n            letterGrades.append(\"B+\")\n  \
    \      } else if grade >= 2.7 {\n            letterGrades.append(\"B\")\n    \
    \    } else if grade >= 2.3 {\n            letterGrades.append(\"B-\")\n     \
    \   } else if grade >= 2.0 {\n            letterGrades.append(\"C+\")\n      \
    \  } else if grade >= 1.7 {\n            letterGrades.append(\"C\")\n        }\
    \ else if grade >= 1.3 {\n            letterGrades.append(\"C-\")\n        } else\
    \ if grade >= 1.0 {\n            letterGrades.append(\"D+\")\n        } else if\
    \ grade >= 0.7 {\n            letterGrades.append(\"D\")\n        } else if grade\
    \ >= 0.0 {\n            letterGrades.append(\"D-\")\n        } else {\n      \
    \      letterGrades.append(\"E\")\n        }\n    }\n    return letterGrades\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpzd4bshlr/tmpzd4bshlr.swift:71: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b26274e3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b26271dab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b26271da988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b26271d97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzd4bshlr                        0x000056416df8a7a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b26276cf460 __libc_start_main +
    245

    6    tmpzd4bshlr                        0x000056416df8a2c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660013958
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var result: [String] = []\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            result.append(\"A+\")\n        } else\
    \ if grade >= 3.7 {\n            result.append(\"A\")\n        } else if grade\
    \ >= 3.3 {\n            result.append(\"A-\")\n        } else if grade >= 3.0\
    \ {\n            result.append(\"B+\")\n        } else if grade >= 2.7 {\n   \
    \         result.append(\"B\")\n        } else if grade >= 2.3 {\n           \
    \ result.append(\"B-\")\n        } else if grade >= 2.0 {\n            result.append(\"\
    C+\")\n        } else if grade >= 1.7 {\n            result.append(\"C\")\n  \
    \      } else if grade >= 1.3 {\n            result.append(\"C-\")\n        }\
    \ else if grade >= 1.0 {\n            result.append(\"D+\")\n        } else if\
    \ grade >= 0.7 {\n            result.append(\"D\")\n        } else if grade >=\
    \ 0.0 {\n            result.append(\"D-\")\n        } else {\n            result.append(\"\
    E\")\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2])\
    \ == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpdri1lvgf/tmpdri1lvgf.swift:71: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b295682ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2956525b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2956525988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b29565247b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdri1lvgf                        0x000055e4cf0bd7a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b2956a1a460 __libc_start_main +
    245

    6    tmpdri1lvgf                        0x000055e4cf0bd2c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660013958
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letter_grades: [String] = []\n    for grade\
    \ in grades {\n        if grade >= 4.0 {\n            letter_grades.append(\"\
    A+\")\n        } else if grade >= 3.7 {\n            letter_grades.append(\"A\"\
    )\n        } else if grade >= 3.3 {\n            letter_grades.append(\"A-\")\n\
    \        } else if grade >= 3.0 {\n            letter_grades.append(\"B+\")\n\
    \        } else if grade >= 2.7 {\n            letter_grades.append(\"B\")\n \
    \       } else if grade >= 2.3 {\n            letter_grades.append(\"B-\")\n \
    \       } else if grade >= 2.0 {\n            letter_grades.append(\"C+\")\n \
    \       } else if grade >= 1.7 {\n            letter_grades.append(\"C\")\n  \
    \      } else if grade >= 1.3 {\n            letter_grades.append(\"C-\")\n  \
    \      } else if grade >= 1.0 {\n            letter_grades.append(\"D+\")\n  \
    \      } else if grade >= 0.7 {\n            letter_grades.append(\"D\")\n   \
    \     } else if grade >= 0.0 {\n            letter_grades.append(\"D-\")\n   \
    \     } else {\n            letter_grades.append(\"E\")\n        }\n    }\n  \
    \  return letter_grades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpg5y0zgra/tmpg5y0zgra.swift:71: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8d221f6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8d21eedb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8d21eed988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8d21eec7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpg5y0zgra                        0x0000556d548d07a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b8d223e2460 __libc_start_main +
    245

    6    tmpg5y0zgra                        0x0000556d548d02c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660013958
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letter_grades: [String] = []\n    for grade\
    \ in grades {\n        if grade >= 4.0 {\n            letter_grades.append(\"\
    A+\")\n        } else if grade >= 3.7 {\n            letter_grades.append(\"A\"\
    )\n        } else if grade >= 3.3 {\n            letter_grades.append(\"A-\")\n\
    \        } else if grade >= 3.0 {\n            letter_grades.append(\"B+\")\n\
    \        } else if grade >= 2.7 {\n            letter_grades.append(\"B\")\n \
    \       } else if grade >= 2.3 {\n            letter_grades.append(\"B-\")\n \
    \       } else if grade >= 2.0 {\n            letter_grades.append(\"C+\")\n \
    \       } else if grade >= 1.7 {\n            letter_grades.append(\"C\")\n  \
    \      } else if grade >= 1.3 {\n            letter_grades.append(\"C-\")\n  \
    \      } else if grade >= 1.0 {\n            letter_grades.append(\"D+\")\n  \
    \      } else if grade >= 0.7 {\n            letter_grades.append(\"D\")\n   \
    \     } else if grade >= 0.0 {\n            letter_grades.append(\"D-\")\n   \
    \     } else {\n            letter_grades.append(\"E\")\n        }\n    }\n  \
    \  return letter_grades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpg5y0zgra/tmpg5y0zgra.swift:71: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8d221f6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8d21eedb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8d21eed988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8d21eec7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpg5y0zgra                        0x0000556d548d07a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b8d223e2460 __libc_start_main +
    245

    6    tmpg5y0zgra                        0x0000556d548d02c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660013958
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades: [String] = []\n    for grade\
    \ in grades {\n        switch grade {\n        case 4.0:\n            letterGrades.append(\"\
    A+\")\n        case 3.7..<4.0:\n            letterGrades.append(\"A\")\n     \
    \   case 3.3..<3.7:\n            letterGrades.append(\"A-\")\n        case 3.0..<3.3:\n\
    \            letterGrades.append(\"B+\")\n        case 2.7..<3.0:\n          \
    \  letterGrades.append(\"B\")\n        case 2.3..<2.7:\n            letterGrades.append(\"\
    B-\")\n        case 2.0..<2.3:\n            letterGrades.append(\"C+\")\n    \
    \    case 1.7..<2.0:\n            letterGrades.append(\"C\")\n        case 1.3..<1.7:\n\
    \            letterGrades.append(\"C-\")\n        case 1.0..<1.3:\n          \
    \  letterGrades.append(\"D+\")\n        case 0.7..<1.0:\n            letterGrades.append(\"\
    D\")\n        case 0.0..<0.7:\n            letterGrades.append(\"D-\")\n     \
    \   case 0.0:\n            letterGrades.append(\"E\")\n        default:\n    \
    \        letterGrades.append(\"Invalid\")\n        }\n    }\n    return letterGrades\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmp1obexfzp/tmp1obexfzp.swift:74: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad3ab8d3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad3ab5cab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad3ab5ca988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad3ab5c97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1obexfzp                        0x00005627f2fe88d6 <unavailable> + 6358

    5    libc.so.6                          0x00002ad3ababf460 __libc_start_main +
    245

    6    tmp1obexfzp                        0x00005627f2fe83f9 <unavailable> + 5113

    '
  stdout: ''
  timestamp: 1660013958
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var result: [String] = []\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            result.append(\"A+\")\n        } else\
    \ if grade >= 3.7 {\n            result.append(\"A\")\n        } else if grade\
    \ >= 3.3 {\n            result.append(\"A-\")\n        } else if grade >= 3.0\
    \ {\n            result.append(\"B+\")\n        } else if grade >= 2.7 {\n   \
    \         result.append(\"B\")\n        } else if grade >= 2.3 {\n           \
    \ result.append(\"B-\")\n        } else if grade >= 2.0 {\n            result.append(\"\
    C+\")\n        } else if grade >= 1.7 {\n            result.append(\"C\")\n  \
    \      } else if grade >= 1.3 {\n            result.append(\"C-\")\n        }\
    \ else if grade >= 1.0 {\n            result.append(\"D+\")\n        } else if\
    \ grade >= 0.7 {\n            result.append(\"D\")\n        } else if grade >=\
    \ 0.0 {\n            result.append(\"D-\")\n        } else {\n            result.append(\"\
    E\")\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2])\
    \ == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpdri1lvgf/tmpdri1lvgf.swift:71: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b295682ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2956525b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2956525988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b29565247b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdri1lvgf                        0x000055e4cf0bd7a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b2956a1a460 __libc_start_main +
    245

    6    tmpdri1lvgf                        0x000055e4cf0bd2c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660013958
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades: [String] = []\n    for grade\
    \ in grades {\n        if grade >= 4.0 {\n            letterGrades.append(\"A+\"\
    )\n        } else if grade >= 3.7 {\n            letterGrades.append(\"A\")\n\
    \        } else if grade >= 3.3 {\n            letterGrades.append(\"A-\")\n \
    \       } else if grade >= 3.0 {\n            letterGrades.append(\"B+\")\n  \
    \      } else if grade >= 2.7 {\n            letterGrades.append(\"B\")\n    \
    \    } else if grade >= 2.3 {\n            letterGrades.append(\"B-\")\n     \
    \   } else if grade >= 2.0 {\n            letterGrades.append(\"C+\")\n      \
    \  } else if grade >= 1.7 {\n            letterGrades.append(\"C\")\n        }\
    \ else if grade >= 1.3 {\n            letterGrades.append(\"C-\")\n        } else\
    \ if grade >= 1.0 {\n            letterGrades.append(\"D+\")\n        } else if\
    \ grade >= 0.7 {\n            letterGrades.append(\"D\")\n        } else if grade\
    \ >= 0.0 {\n            letterGrades.append(\"D-\")\n        } else {\n      \
    \      letterGrades.append(\"E\")\n        }\n    }\n    return letterGrades\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpzd4bshlr/tmpzd4bshlr.swift:71: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b26274e3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b26271dab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b26271da988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b26271d97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzd4bshlr                        0x000056416df8a7a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b26276cf460 __libc_start_main +
    245

    6    tmpzd4bshlr                        0x000056416df8a2c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660013958
- exit_code: 0
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var result = [String]()\n    for grade in grades\
    \ {\n        if grade == 4.0 {\n            result.append(\"A+\")\n        } else\
    \ if grade > 3.7 {\n            result.append(\"A\")\n        } else if grade\
    \ > 3.3 {\n            result.append(\"A-\")\n        } else if grade > 3.0 {\n\
    \            result.append(\"B+\")\n        } else if grade > 2.7 {\n        \
    \    result.append(\"B\")\n        } else if grade > 2.3 {\n            result.append(\"\
    B-\")\n        } else if grade > 2.0 {\n            result.append(\"C+\")\n  \
    \      } else if grade > 1.7 {\n            result.append(\"C\")\n        } else\
    \ if grade > 1.3 {\n            result.append(\"C-\")\n        } else if grade\
    \ > 1.0 {\n            result.append(\"D+\")\n        } else if grade > 0.7 {\n\
    \            result.append(\"D\")\n        } else if grade > 0.0 {\n         \
    \   result.append(\"D-\")\n        } else {\n            result.append(\"E\")\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2]) == [\"\
    D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013958
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades: [String] = []\n    for grade\
    \ in grades {\n        if grade >= 4.0 {\n            letterGrades.append(\"A+\"\
    )\n        } else if grade >= 3.7 {\n            letterGrades.append(\"A\")\n\
    \        } else if grade >= 3.3 {\n            letterGrades.append(\"A-\")\n \
    \       } else if grade >= 3.0 {\n            letterGrades.append(\"B+\")\n  \
    \      } else if grade >= 2.7 {\n            letterGrades.append(\"B\")\n    \
    \    } else if grade >= 2.3 {\n            letterGrades.append(\"B-\")\n     \
    \   } else if grade >= 2.0 {\n            letterGrades.append(\"C+\")\n      \
    \  } else if grade >= 1.7 {\n            letterGrades.append(\"C\")\n        }\
    \ else if grade >= 1.3 {\n            letterGrades.append(\"C-\")\n        } else\
    \ if grade >= 1.0 {\n            letterGrades.append(\"D+\")\n        } else if\
    \ grade >= 0.7 {\n            letterGrades.append(\"D\")\n        } else if grade\
    \ >= 0.0 {\n            letterGrades.append(\"D-\")\n        } else {\n      \
    \      letterGrades.append(\"E\")\n        }\n    }\n    return letterGrades\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpzd4bshlr/tmpzd4bshlr.swift:71: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b26274e3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b26271dab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b26271da988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b26271d97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzd4bshlr                        0x000056416df8a7a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b26276cf460 __libc_start_main +
    245

    6    tmpzd4bshlr                        0x000056416df8a2c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660013958
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var grades = grades\n    var letterGrades = [String]()\n\
    \    for i in 0..<grades.count {\n        if grades[i] >= 4.0 {\n            letterGrades.append(\"\
    A+\")\n        } else if grades[i] >= 3.7 {\n            letterGrades.append(\"\
    A\")\n        } else if grades[i] >= 3.3 {\n            letterGrades.append(\"\
    A-\")\n        } else if grades[i] >= 3.0 {\n            letterGrades.append(\"\
    B+\")\n        } else if grades[i] >= 2.7 {\n            letterGrades.append(\"\
    B\")\n        } else if grades[i] >= 2.3 {\n            letterGrades.append(\"\
    B-\")\n        } else if grades[i] >= 2.0 {\n            letterGrades.append(\"\
    C+\")\n        } else if grades[i] >= 1.7 {\n            letterGrades.append(\"\
    C\")\n        } else if grades[i] >= 1.3 {\n            letterGrades.append(\"\
    C-\")\n        } else if grades[i] >= 1.0 {\n            letterGrades.append(\"\
    D+\")\n        } else if grades[i] >= 0.7 {\n            letterGrades.append(\"\
    D\")\n        } else if grades[i] >= 0.0 {\n            letterGrades.append(\"\
    D-\")\n        } else {\n            letterGrades.append(\"E\")\n        }\n \
    \   }\n    return letterGrades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmptwx35jcs/tmptwx35jcs.swift:72: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afd1639cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afd16093b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afd16093988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afd160927b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptwx35jcs                        0x000056338167f8c6 <unavailable> + 6342

    5    libc.so.6                          0x00002afd16588460 __libc_start_main +
    245

    6    tmptwx35jcs                        0x000056338167f3e9 <unavailable> + 5097

    '
  stdout: ''
  timestamp: 1660013958
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades: [String] = []\n    for grade\
    \ in grades {\n        if grade >= 4.0 {\n            letterGrades.append(\"A+\"\
    )\n        } else if grade >= 3.7 {\n            letterGrades.append(\"A\")\n\
    \        } else if grade >= 3.3 {\n            letterGrades.append(\"A-\")\n \
    \       } else if grade >= 3.0 {\n            letterGrades.append(\"B+\")\n  \
    \      } else if grade >= 2.7 {\n            letterGrades.append(\"B\")\n    \
    \    } else if grade >= 2.3 {\n            letterGrades.append(\"B-\")\n     \
    \   } else if grade >= 2.0 {\n            letterGrades.append(\"C+\")\n      \
    \  } else if grade >= 1.7 {\n            letterGrades.append(\"C\")\n        }\
    \ else if grade >= 1.3 {\n            letterGrades.append(\"C-\")\n        } else\
    \ if grade >= 1.0 {\n            letterGrades.append(\"D+\")\n        } else if\
    \ grade >= 0.7 {\n            letterGrades.append(\"D\")\n        } else if grade\
    \ >= 0.0 {\n            letterGrades.append(\"D-\")\n        } else {\n      \
    \      letterGrades.append(\"E\")\n        }\n    }\n    return letterGrades\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpzd4bshlr/tmpzd4bshlr.swift:71: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b26274e3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b26271dab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b26271da988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b26271d97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzd4bshlr                        0x000056416df8a7a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b26276cf460 __libc_start_main +
    245

    6    tmpzd4bshlr                        0x000056416df8a2c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660013958
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades: [String] = []\n    for grade\
    \ in grades {\n        if grade >= 4.0 {\n            letterGrades.append(\"A+\"\
    )\n        } else if grade >= 3.7 {\n            letterGrades.append(\"A\")\n\
    \        } else if grade >= 3.3 {\n            letterGrades.append(\"A-\")\n \
    \       } else if grade >= 3.0 {\n            letterGrades.append(\"B+\")\n  \
    \      } else if grade >= 2.7 {\n            letterGrades.append(\"B\")\n    \
    \    } else if grade >= 2.3 {\n            letterGrades.append(\"B-\")\n     \
    \   } else if grade >= 2.0 {\n            letterGrades.append(\"C+\")\n      \
    \  } else if grade >= 1.7 {\n            letterGrades.append(\"C\")\n        }\
    \ else if grade >= 1.3 {\n            letterGrades.append(\"C-\")\n        } else\
    \ if grade >= 1.0 {\n            letterGrades.append(\"D+\")\n        } else if\
    \ grade >= 0.7 {\n            letterGrades.append(\"D\")\n        } else if grade\
    \ >= 0.0 {\n            letterGrades.append(\"D-\")\n        } else {\n      \
    \      letterGrades.append(\"E\")\n        }\n    }\n    return letterGrades\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpzd4bshlr/tmpzd4bshlr.swift:71: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b26274e3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b26271dab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b26271da988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b26271d97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzd4bshlr                        0x000056416df8a7a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b26276cf460 __libc_start_main +
    245

    6    tmpzd4bshlr                        0x000056416df8a2c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660013958
- exit_code: 0
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var grades_letter = [String]()\n    for grade in\
    \ grades {\n        if grade == 4.0 {\n            grades_letter.append(\"A+\"\
    )\n        } else if grade > 3.7 {\n            grades_letter.append(\"A\")\n\
    \        } else if grade > 3.3 {\n            grades_letter.append(\"A-\")\n \
    \       } else if grade > 3.0 {\n            grades_letter.append(\"B+\")\n  \
    \      } else if grade > 2.7 {\n            grades_letter.append(\"B\")\n    \
    \    } else if grade > 2.3 {\n            grades_letter.append(\"B-\")\n     \
    \   } else if grade > 2.0 {\n            grades_letter.append(\"C+\")\n      \
    \  } else if grade > 1.7 {\n            grades_letter.append(\"C\")\n        }\
    \ else if grade > 1.3 {\n            grades_letter.append(\"C-\")\n        } else\
    \ if grade > 1.0 {\n            grades_letter.append(\"D+\")\n        } else if\
    \ grade > 0.7 {\n            grades_letter.append(\"D\")\n        } else if grade\
    \ > 0.0 {\n            grades_letter.append(\"D-\")\n        } else {\n      \
    \      grades_letter.append(\"E\")\n        }\n    }\n    return grades_letter\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013958
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades = [String]()\n    for grade in\
    \ grades {\n        switch grade {\n        case 4.0:\n            letterGrades.append(\"\
    A+\")\n        case 3.7..<4.0:\n            letterGrades.append(\"A\")\n     \
    \   case 3.3..<3.7:\n            letterGrades.append(\"A-\")\n        case 3.0..<3.3:\n\
    \            letterGrades.append(\"B+\")\n        case 2.7..<3.0:\n          \
    \  letterGrades.append(\"B\")\n        case 2.3..<2.7:\n            letterGrades.append(\"\
    B-\")\n        case 2.0..<2.3:\n            letterGrades.append(\"C+\")\n    \
    \    case 1.7..<2.0:\n            letterGrades.append(\"C\")\n        case 1.3..<1.7:\n\
    \            letterGrades.append(\"C-\")\n        case 1.0..<1.3:\n          \
    \  letterGrades.append(\"D+\")\n        case 0.7..<1.0:\n            letterGrades.append(\"\
    D\")\n        case 0.0..<0.7:\n            letterGrades.append(\"D-\")\n     \
    \   case 0.0:\n            letterGrades.append(\"E\")\n        default:\n    \
    \        letterGrades.append(\"Invalid\")\n        }\n    }\n    return letterGrades\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpsfmesqa9/tmpsfmesqa9.swift:74: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba989efec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba989bf5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba989bf5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba989bf47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsfmesqa9                        0x0000559648922926 <unavailable> + 6438

    5    libc.so.6                          0x00002ba98a0ea460 __libc_start_main +
    245

    6    tmpsfmesqa9                        0x0000559648922449 <unavailable> + 5193

    '
  stdout: ''
  timestamp: 1660013958
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades: [String] = []\n    for grade\
    \ in grades {\n        if grade >= 4.0 {\n            letterGrades.append(\"A+\"\
    )\n        } else if grade >= 3.7 {\n            letterGrades.append(\"A\")\n\
    \        } else if grade >= 3.3 {\n            letterGrades.append(\"A-\")\n \
    \       } else if grade >= 3.0 {\n            letterGrades.append(\"B+\")\n  \
    \      } else if grade >= 2.7 {\n            letterGrades.append(\"B\")\n    \
    \    } else if grade >= 2.3 {\n            letterGrades.append(\"B-\")\n     \
    \   } else if grade >= 2.0 {\n            letterGrades.append(\"C+\")\n      \
    \  } else if grade >= 1.7 {\n            letterGrades.append(\"C\")\n        }\
    \ else if grade >= 1.3 {\n            letterGrades.append(\"C-\")\n        } else\
    \ if grade >= 1.0 {\n            letterGrades.append(\"D+\")\n        } else if\
    \ grade >= 0.7 {\n            letterGrades.append(\"D\")\n        } else if grade\
    \ >= 0.0 {\n            letterGrades.append(\"D-\")\n        } else {\n      \
    \      letterGrades.append(\"E\")\n        }\n    }\n    return letterGrades\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpzd4bshlr/tmpzd4bshlr.swift:71: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b26274e3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b26271dab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b26271da988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b26271d97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzd4bshlr                        0x000056416df8a7a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b26276cf460 __libc_start_main +
    245

    6    tmpzd4bshlr                        0x000056416df8a2c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660013958
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades: [String] = []\n    for grade\
    \ in grades {\n        if grade >= 4.0 {\n            letterGrades.append(\"A+\"\
    )\n        } else if grade >= 3.7 {\n            letterGrades.append(\"A\")\n\
    \        } else if grade >= 3.3 {\n            letterGrades.append(\"A-\")\n \
    \       } else if grade >= 3.0 {\n            letterGrades.append(\"B+\")\n  \
    \      } else if grade >= 2.7 {\n            letterGrades.append(\"B\")\n    \
    \    } else if grade >= 2.3 {\n            letterGrades.append(\"B-\")\n     \
    \   } else if grade >= 2.0 {\n            letterGrades.append(\"C+\")\n      \
    \  } else if grade >= 1.7 {\n            letterGrades.append(\"C\")\n        }\
    \ else if grade >= 1.3 {\n            letterGrades.append(\"C-\")\n        } else\
    \ if grade >= 1.0 {\n            letterGrades.append(\"D+\")\n        } else if\
    \ grade >= 0.7 {\n            letterGrades.append(\"D\")\n        } else if grade\
    \ >= 0.0 {\n            letterGrades.append(\"D-\")\n        } else {\n      \
    \      letterGrades.append(\"E\")\n        }\n    }\n    return letterGrades\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpzd4bshlr/tmpzd4bshlr.swift:71: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b26274e3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b26271dab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b26271da988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b26271d97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzd4bshlr                        0x000056416df8a7a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b26276cf460 __libc_start_main +
    245

    6    tmpzd4bshlr                        0x000056416df8a2c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660013958
- exit_code: 0
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades = [String]()\n    for grade in\
    \ grades {\n        if grade == 4.0 {\n            letterGrades.append(\"A+\"\
    )\n        } else if grade > 3.7 {\n            letterGrades.append(\"A\")\n \
    \       } else if grade > 3.3 {\n            letterGrades.append(\"A-\")\n   \
    \     } else if grade > 3.0 {\n            letterGrades.append(\"B+\")\n     \
    \   } else if grade > 2.7 {\n            letterGrades.append(\"B\")\n        }\
    \ else if grade > 2.3 {\n            letterGrades.append(\"B-\")\n        } else\
    \ if grade > 2.0 {\n            letterGrades.append(\"C+\")\n        } else if\
    \ grade > 1.7 {\n            letterGrades.append(\"C\")\n        } else if grade\
    \ > 1.3 {\n            letterGrades.append(\"C-\")\n        } else if grade >\
    \ 1.0 {\n            letterGrades.append(\"D+\")\n        } else if grade > 0.7\
    \ {\n            letterGrades.append(\"D\")\n        } else if grade > 0.0 {\n\
    \            letterGrades.append(\"D-\")\n        } else {\n            letterGrades.append(\"\
    E\")\n        }\n    }\n    return letterGrades\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2])\
    \ == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013958
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letter_grades: [String] = []\n    for grade\
    \ in grades {\n        if grade >= 4.0 {\n            letter_grades.append(\"\
    A+\")\n        } else if grade >= 3.7 {\n            letter_grades.append(\"A\"\
    )\n        } else if grade >= 3.3 {\n            letter_grades.append(\"A-\")\n\
    \        } else if grade >= 3.0 {\n            letter_grades.append(\"B+\")\n\
    \        } else if grade >= 2.7 {\n            letter_grades.append(\"B\")\n \
    \       } else if grade >= 2.3 {\n            letter_grades.append(\"B-\")\n \
    \       } else if grade >= 2.0 {\n            letter_grades.append(\"C+\")\n \
    \       } else if grade >= 1.7 {\n            letter_grades.append(\"C\")\n  \
    \      } else if grade >= 1.3 {\n            letter_grades.append(\"C-\")\n  \
    \      } else if grade >= 1.0 {\n            letter_grades.append(\"D+\")\n  \
    \      } else if grade >= 0.7 {\n            letter_grades.append(\"D\")\n   \
    \     } else if grade >= 0.0 {\n            letter_grades.append(\"D-\")\n   \
    \     } else {\n            letter_grades.append(\"E\")\n        }\n    }\n  \
    \  return letter_grades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpg5y0zgra/tmpg5y0zgra.swift:71: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8d221f6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8d21eedb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8d21eed988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8d21eec7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpg5y0zgra                        0x0000556d548d07a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b8d223e2460 __libc_start_main +
    245

    6    tmpg5y0zgra                        0x0000556d548d02c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660013958
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    return grades.map {\n        switch $0 {\n    \
    \    case 4.0: return \"A+\"\n        case 3.7..<4.0: return \"A\"\n        case\
    \ 3.3..<3.7: return \"A-\"\n        case 3.0..<3.3: return \"B+\"\n        case\
    \ 2.7..<3.0: return \"B\"\n        case 2.3..<2.7: return \"B-\"\n        case\
    \ 2.0..<2.3: return \"C+\"\n        case 1.7..<2.0: return \"C\"\n        case\
    \ 1.3..<1.7: return \"C-\"\n        case 1.0..<1.3: return \"D+\"\n        case\
    \ 0.7..<1.0: return \"D\"\n        case 0.0..<0.7: return \"D-\"\n        default:\
    \ return \"E\"\n        }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpelckq0z7/tmpelckq0z7.swift:57: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b455aa42c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b455a739b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b455a739988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b455a7387b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpelckq0z7                        0x00005565aaddd7b6 <unavailable> + 6070

    5    libc.so.6                          0x00002b455ac2e460 __libc_start_main +
    245

    6    tmpelckq0z7                        0x00005565aaddd2d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1660013958
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades = [String]()\n    for grade in\
    \ grades {\n        switch grade {\n        case 4.0:\n            letterGrades.append(\"\
    A+\")\n        case 3.7..<4.0:\n            letterGrades.append(\"A\")\n     \
    \   case 3.3..<3.7:\n            letterGrades.append(\"A-\")\n        case 3.0..<3.3:\n\
    \            letterGrades.append(\"B+\")\n        case 2.7..<3.0:\n          \
    \  letterGrades.append(\"B\")\n        case 2.3..<2.7:\n            letterGrades.append(\"\
    B-\")\n        case 2.0..<2.3:\n            letterGrades.append(\"C+\")\n    \
    \    case 1.7..<2.0:\n            letterGrades.append(\"C\")\n        case 1.3..<1.7:\n\
    \            letterGrades.append(\"C-\")\n        case 1.0..<1.3:\n          \
    \  letterGrades.append(\"D+\")\n        case 0.7..<1.0:\n            letterGrades.append(\"\
    D\")\n        case 0.0..<0.7:\n            letterGrades.append(\"D-\")\n     \
    \   case 0.0:\n            letterGrades.append(\"E\")\n        default:\n    \
    \        letterGrades.append(\"Invalid\")\n        }\n    }\n    return letterGrades\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpsfmesqa9/tmpsfmesqa9.swift:74: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba989efec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba989bf5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba989bf5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba989bf47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsfmesqa9                        0x0000559648922926 <unavailable> + 6438

    5    libc.so.6                          0x00002ba98a0ea460 __libc_start_main +
    245

    6    tmpsfmesqa9                        0x0000559648922449 <unavailable> + 5193

    '
  stdout: ''
  timestamp: 1660013958
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades: [String] = []\n    for grade\
    \ in grades {\n        if grade >= 4.0 {\n            letterGrades.append(\"A+\"\
    )\n        } else if grade >= 3.7 {\n            letterGrades.append(\"A\")\n\
    \        } else if grade >= 3.3 {\n            letterGrades.append(\"A-\")\n \
    \       } else if grade >= 3.0 {\n            letterGrades.append(\"B+\")\n  \
    \      } else if grade >= 2.7 {\n            letterGrades.append(\"B\")\n    \
    \    } else if grade >= 2.3 {\n            letterGrades.append(\"B-\")\n     \
    \   } else if grade >= 2.0 {\n            letterGrades.append(\"C+\")\n      \
    \  } else if grade >= 1.7 {\n            letterGrades.append(\"C\")\n        }\
    \ else if grade >= 1.3 {\n            letterGrades.append(\"C-\")\n        } else\
    \ if grade >= 1.0 {\n            letterGrades.append(\"D+\")\n        } else if\
    \ grade >= 0.7 {\n            letterGrades.append(\"D\")\n        } else if grade\
    \ >= 0.0 {\n            letterGrades.append(\"D-\")\n        } else {\n      \
    \      letterGrades.append(\"E\")\n        }\n    }\n    return letterGrades\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpzd4bshlr/tmpzd4bshlr.swift:71: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b26274e3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b26271dab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b26271da988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b26271d97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzd4bshlr                        0x000056416df8a7a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b26276cf460 __libc_start_main +
    245

    6    tmpzd4bshlr                        0x000056416df8a2c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660013958
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades: [String] = []\n    for grade\
    \ in grades {\n        if grade >= 4.0 {\n            letterGrades.append(\"A+\"\
    )\n        } else if grade >= 3.7 {\n            letterGrades.append(\"A\")\n\
    \        } else if grade >= 3.3 {\n            letterGrades.append(\"A-\")\n \
    \       } else if grade >= 3.0 {\n            letterGrades.append(\"B+\")\n  \
    \      } else if grade >= 2.7 {\n            letterGrades.append(\"B\")\n    \
    \    } else if grade >= 2.3 {\n            letterGrades.append(\"B-\")\n     \
    \   } else if grade >= 2.0 {\n            letterGrades.append(\"C+\")\n      \
    \  } else if grade >= 1.7 {\n            letterGrades.append(\"C\")\n        }\
    \ else if grade >= 1.3 {\n            letterGrades.append(\"C-\")\n        } else\
    \ if grade >= 1.0 {\n            letterGrades.append(\"D+\")\n        } else if\
    \ grade >= 0.7 {\n            letterGrades.append(\"D\")\n        } else if grade\
    \ >= 0.0 {\n            letterGrades.append(\"D-\")\n        } else {\n      \
    \      letterGrades.append(\"E\")\n        }\n    }\n    return letterGrades\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpzd4bshlr/tmpzd4bshlr.swift:71: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b26274e3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b26271dab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b26271da988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b26271d97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzd4bshlr                        0x000056416df8a7a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b26276cf460 __libc_start_main +
    245

    6    tmpzd4bshlr                        0x000056416df8a2c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660013958
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades: [String] = []\n    for grade\
    \ in grades {\n        switch grade {\n        case 4.0:\n            letterGrades.append(\"\
    A+\")\n        case 3.7..<4.0:\n            letterGrades.append(\"A\")\n     \
    \   case 3.3..<3.7:\n            letterGrades.append(\"A-\")\n        case 3.0..<3.3:\n\
    \            letterGrades.append(\"B+\")\n        case 2.7..<3.0:\n          \
    \  letterGrades.append(\"B\")\n        case 2.3..<2.7:\n            letterGrades.append(\"\
    B-\")\n        case 2.0..<2.3:\n            letterGrades.append(\"C+\")\n    \
    \    case 1.7..<2.0:\n            letterGrades.append(\"C\")\n        case 1.3..<1.7:\n\
    \            letterGrades.append(\"C-\")\n        case 1.0..<1.3:\n          \
    \  letterGrades.append(\"D+\")\n        case 0.7..<1.0:\n            letterGrades.append(\"\
    D\")\n        case 0.0..<0.7:\n            letterGrades.append(\"D-\")\n     \
    \   case 0.0:\n            letterGrades.append(\"E\")\n        default:\n    \
    \        letterGrades.append(\"Invalid\")\n        }\n    }\n    return letterGrades\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmp1obexfzp/tmp1obexfzp.swift:74: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad3ab8d3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad3ab5cab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad3ab5ca988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad3ab5c97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1obexfzp                        0x00005627f2fe88d6 <unavailable> + 6358

    5    libc.so.6                          0x00002ad3ababf460 __libc_start_main +
    245

    6    tmp1obexfzp                        0x00005627f2fe83f9 <unavailable> + 5113

    '
  stdout: ''
  timestamp: 1660013958
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades = [String]()\n    for grade in\
    \ grades {\n        if grade >= 4.0 {\n            letterGrades.append(\"A+\"\
    )\n        } else if grade >= 3.7 {\n            letterGrades.append(\"A\")\n\
    \        } else if grade >= 3.3 {\n            letterGrades.append(\"A-\")\n \
    \       } else if grade >= 3.0 {\n            letterGrades.append(\"B+\")\n  \
    \      } else if grade >= 2.7 {\n            letterGrades.append(\"B\")\n    \
    \    } else if grade >= 2.3 {\n            letterGrades.append(\"B-\")\n     \
    \   } else if grade >= 2.0 {\n            letterGrades.append(\"C+\")\n      \
    \  } else if grade >= 1.7 {\n            letterGrades.append(\"C\")\n        }\
    \ else if grade >= 1.3 {\n            letterGrades.append(\"C-\")\n        } else\
    \ if grade >= 1.0 {\n            letterGrades.append(\"D+\")\n        } else if\
    \ grade >= 0.7 {\n            letterGrades.append(\"D\")\n        } else if grade\
    \ >= 0.0 {\n            letterGrades.append(\"D-\")\n        } else {\n      \
    \      letterGrades.append(\"E\")\n        }\n    }\n    return letterGrades\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmp_e648e_q/tmp_e648e_q.swift:71: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae1592c1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae158fb8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae158fb8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae158fb77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_e648e_q                        0x0000559655f5e7f6 <unavailable> + 6134

    5    libc.so.6                          0x00002ae1594ad460 __libc_start_main +
    245

    6    tmp_e648e_q                        0x0000559655f5e319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1660013958
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var result: [String] = []\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            result.append(\"A+\")\n        } else\
    \ if grade >= 3.7 {\n            result.append(\"A\")\n        } else if grade\
    \ >= 3.3 {\n            result.append(\"A-\")\n        } else if grade >= 3.0\
    \ {\n            result.append(\"B+\")\n        } else if grade >= 2.7 {\n   \
    \         result.append(\"B\")\n        } else if grade >= 2.3 {\n           \
    \ result.append(\"B-\")\n        } else if grade >= 2.0 {\n            result.append(\"\
    C+\")\n        } else if grade >= 1.7 {\n            result.append(\"C\")\n  \
    \      } else if grade >= 1.3 {\n            result.append(\"C-\")\n        }\
    \ else if grade >= 1.0 {\n            result.append(\"D+\")\n        } else if\
    \ grade >= 0.7 {\n            result.append(\"D\")\n        } else if grade >=\
    \ 0.0 {\n            result.append(\"D-\")\n        } else {\n            result.append(\"\
    E\")\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2])\
    \ == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpdri1lvgf/tmpdri1lvgf.swift:71: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b295682ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2956525b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2956525988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b29565247b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdri1lvgf                        0x000055e4cf0bd7a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b2956a1a460 __libc_start_main +
    245

    6    tmpdri1lvgf                        0x000055e4cf0bd2c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660013958
- exit_code: 0
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades: [String] = []\n    for grade\
    \ in grades {\n        if grade == 4.0 {\n            letterGrades.append(\"A+\"\
    )\n        } else if grade > 3.7 {\n            letterGrades.append(\"A\")\n \
    \       } else if grade > 3.3 {\n            letterGrades.append(\"A-\")\n   \
    \     } else if grade > 3.0 {\n            letterGrades.append(\"B+\")\n     \
    \   } else if grade > 2.7 {\n            letterGrades.append(\"B\")\n        }\
    \ else if grade > 2.3 {\n            letterGrades.append(\"B-\")\n        } else\
    \ if grade > 2.0 {\n            letterGrades.append(\"C+\")\n        } else if\
    \ grade > 1.7 {\n            letterGrades.append(\"C\")\n        } else if grade\
    \ > 1.3 {\n            letterGrades.append(\"C-\")\n        } else if grade >\
    \ 1.0 {\n            letterGrades.append(\"D+\")\n        } else if grade > 0.7\
    \ {\n            letterGrades.append(\"D\")\n        } else if grade > 0.0 {\n\
    \            letterGrades.append(\"D-\")\n        } else {\n            letterGrades.append(\"\
    E\")\n        }\n    }\n    return letterGrades\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2])\
    \ == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013958
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    // your code here\n    var grades_letter = [String]()\n\
    \    for grade in grades {\n        if grade >= 4.0 {\n            grades_letter.append(\"\
    A+\")\n        }\n        else if grade >= 3.7 {\n            grades_letter.append(\"\
    A\")\n        }\n        else if grade >= 3.3 {\n            grades_letter.append(\"\
    A-\")\n        }\n        else if grade >= 3.0 {\n            grades_letter.append(\"\
    B+\")\n        }\n        else if grade >= 2.7 {\n            grades_letter.append(\"\
    B\")\n        }\n        else if grade >= 2.3 {\n            grades_letter.append(\"\
    B-\")\n        }\n        else if grade >= 2.0 {\n            grades_letter.append(\"\
    C+\")\n        }\n        else if grade >= 1.7 {\n            grades_letter.append(\"\
    C\")\n        }\n        else if grade >= 1.3 {\n            grades_letter.append(\"\
    C-\")\n        }\n        else if grade >= 1.0 {\n            grades_letter.append(\"\
    D+\")\n        }\n        else if grade >= 0.7 {\n            grades_letter.append(\"\
    D\")\n        }\n        else if grade >= 0.0 {\n            grades_letter.append(\"\
    D-\")\n        }\n        else {\n            grades_letter.append(\"E\")\n  \
    \      }\n    }\n    return grades_letter\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2])\
    \ == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmp5mikp40g/tmp5mikp40g.swift:84: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b67602dbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b675ffd2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b675ffd2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b675ffd17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5mikp40g                        0x000055f86c9f37f6 <unavailable> + 6134

    5    libc.so.6                          0x00002b67604c7460 __libc_start_main +
    245

    6    tmp5mikp40g                        0x000055f86c9f3319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1660013958
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades = [String]()\n    for grade in\
    \ grades {\n        if grade >= 4.0 {\n            letterGrades.append(\"A+\"\
    )\n        } else if grade >= 3.7 {\n            letterGrades.append(\"A\")\n\
    \        } else if grade >= 3.3 {\n            letterGrades.append(\"A-\")\n \
    \       } else if grade >= 3.0 {\n            letterGrades.append(\"B+\")\n  \
    \      } else if grade >= 2.7 {\n            letterGrades.append(\"B\")\n    \
    \    } else if grade >= 2.3 {\n            letterGrades.append(\"B-\")\n     \
    \   } else if grade >= 2.0 {\n            letterGrades.append(\"C+\")\n      \
    \  } else if grade >= 1.7 {\n            letterGrades.append(\"C\")\n        }\
    \ else if grade >= 1.3 {\n            letterGrades.append(\"C-\")\n        } else\
    \ if grade >= 1.0 {\n            letterGrades.append(\"D+\")\n        } else if\
    \ grade >= 0.7 {\n            letterGrades.append(\"D\")\n        } else if grade\
    \ >= 0.0 {\n            letterGrades.append(\"D-\")\n        } else {\n      \
    \      letterGrades.append(\"E\")\n        }\n    }\n    return letterGrades\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmp_e648e_q/tmp_e648e_q.swift:71: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae1592c1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae158fb8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae158fb8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae158fb77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_e648e_q                        0x0000559655f5e7f6 <unavailable> + 6134

    5    libc.so.6                          0x00002ae1594ad460 __libc_start_main +
    245

    6    tmp_e648e_q                        0x0000559655f5e319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1660013958
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades: [String] = []\n    for grade\
    \ in grades {\n        if grade >= 4.0 {\n            letterGrades.append(\"A+\"\
    )\n        } else if grade >= 3.7 {\n            letterGrades.append(\"A\")\n\
    \        } else if grade >= 3.3 {\n            letterGrades.append(\"A-\")\n \
    \       } else if grade >= 3.0 {\n            letterGrades.append(\"B+\")\n  \
    \      } else if grade >= 2.7 {\n            letterGrades.append(\"B\")\n    \
    \    } else if grade >= 2.3 {\n            letterGrades.append(\"B-\")\n     \
    \   } else if grade >= 2.0 {\n            letterGrades.append(\"C+\")\n      \
    \  } else if grade >= 1.7 {\n            letterGrades.append(\"C\")\n        }\
    \ else if grade >= 1.3 {\n            letterGrades.append(\"C-\")\n        } else\
    \ if grade >= 1.0 {\n            letterGrades.append(\"D+\")\n        } else if\
    \ grade >= 0.7 {\n            letterGrades.append(\"D\")\n        } else if grade\
    \ >= 0.0 {\n            letterGrades.append(\"D-\")\n        } else {\n      \
    \      letterGrades.append(\"E\")\n        }\n    }\n    return letterGrades\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpzd4bshlr/tmpzd4bshlr.swift:71: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b26274e3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b26271dab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b26271da988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b26271d97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzd4bshlr                        0x000056416df8a7a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b26276cf460 __libc_start_main +
    245

    6    tmpzd4bshlr                        0x000056416df8a2c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660013958
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades: [String] = []\n    for grade\
    \ in grades {\n        if grade >= 4.0 {\n            letterGrades.append(\"A+\"\
    )\n        } else if grade >= 3.7 {\n            letterGrades.append(\"A\")\n\
    \        } else if grade >= 3.3 {\n            letterGrades.append(\"A-\")\n \
    \       } else if grade >= 3.0 {\n            letterGrades.append(\"B+\")\n  \
    \      } else if grade >= 2.7 {\n            letterGrades.append(\"B\")\n    \
    \    } else if grade >= 2.3 {\n            letterGrades.append(\"B-\")\n     \
    \   } else if grade >= 2.0 {\n            letterGrades.append(\"C+\")\n      \
    \  } else if grade >= 1.7 {\n            letterGrades.append(\"C\")\n        }\
    \ else if grade >= 1.3 {\n            letterGrades.append(\"C-\")\n        } else\
    \ if grade >= 1.0 {\n            letterGrades.append(\"D+\")\n        } else if\
    \ grade >= 0.7 {\n            letterGrades.append(\"D\")\n        } else if grade\
    \ >= 0.0 {\n            letterGrades.append(\"D-\")\n        } else {\n      \
    \      letterGrades.append(\"E\")\n        }\n    }\n    return letterGrades\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpzd4bshlr/tmpzd4bshlr.swift:71: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b26274e3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b26271dab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b26271da988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b26271d97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzd4bshlr                        0x000056416df8a7a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b26276cf460 __libc_start_main +
    245

    6    tmpzd4bshlr                        0x000056416df8a2c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660013958
- exit_code: 0
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letter_grades: [String] = []\n    for grade\
    \ in grades {\n        if grade == 4.0 {\n            letter_grades.append(\"\
    A+\")\n        } else if grade > 3.7 {\n            letter_grades.append(\"A\"\
    )\n        } else if grade > 3.3 {\n            letter_grades.append(\"A-\")\n\
    \        } else if grade > 3.0 {\n            letter_grades.append(\"B+\")\n \
    \       } else if grade > 2.7 {\n            letter_grades.append(\"B\")\n   \
    \     } else if grade > 2.3 {\n            letter_grades.append(\"B-\")\n    \
    \    } else if grade > 2.0 {\n            letter_grades.append(\"C+\")\n     \
    \   } else if grade > 1.7 {\n            letter_grades.append(\"C\")\n       \
    \ } else if grade > 1.3 {\n            letter_grades.append(\"C-\")\n        }\
    \ else if grade > 1.0 {\n            letter_grades.append(\"D+\")\n        } else\
    \ if grade > 0.7 {\n            letter_grades.append(\"D\")\n        } else if\
    \ grade > 0.0 {\n            letter_grades.append(\"D-\")\n        } else {\n\
    \            letter_grades.append(\"E\")\n        }\n    }\n    return letter_grades\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013958
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letter_grades: [String] = []\n    for grade\
    \ in grades {\n        if grade >= 4.0 {\n            letter_grades.append(\"\
    A+\")\n        } else if grade >= 3.7 {\n            letter_grades.append(\"A\"\
    )\n        } else if grade >= 3.3 {\n            letter_grades.append(\"A-\")\n\
    \        } else if grade >= 3.0 {\n            letter_grades.append(\"B+\")\n\
    \        } else if grade >= 2.7 {\n            letter_grades.append(\"B\")\n \
    \       } else if grade >= 2.3 {\n            letter_grades.append(\"B-\")\n \
    \       } else if grade >= 2.0 {\n            letter_grades.append(\"C+\")\n \
    \       } else if grade >= 1.7 {\n            letter_grades.append(\"C\")\n  \
    \      } else if grade >= 1.3 {\n            letter_grades.append(\"C-\")\n  \
    \      } else if grade >= 1.0 {\n            letter_grades.append(\"D+\")\n  \
    \      } else if grade >= 0.7 {\n            letter_grades.append(\"D\")\n   \
    \     } else if grade >= 0.0 {\n            letter_grades.append(\"D-\")\n   \
    \     } else {\n            letter_grades.append(\"E\")\n        }\n    }\n  \
    \  return letter_grades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpg5y0zgra/tmpg5y0zgra.swift:71: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8d221f6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8d21eedb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8d21eed988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8d21eec7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpg5y0zgra                        0x0000556d548d07a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b8d223e2460 __libc_start_main +
    245

    6    tmpg5y0zgra                        0x0000556d548d02c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660013958
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades: [String] = []\n    for grade\
    \ in grades {\n        if grade >= 4.0 {\n            letterGrades.append(\"A+\"\
    )\n        } else if grade >= 3.7 {\n            letterGrades.append(\"A\")\n\
    \        } else if grade >= 3.3 {\n            letterGrades.append(\"A-\")\n \
    \       } else if grade >= 3.0 {\n            letterGrades.append(\"B+\")\n  \
    \      } else if grade >= 2.7 {\n            letterGrades.append(\"B\")\n    \
    \    } else if grade >= 2.3 {\n            letterGrades.append(\"B-\")\n     \
    \   } else if grade >= 2.0 {\n            letterGrades.append(\"C+\")\n      \
    \  } else if grade >= 1.7 {\n            letterGrades.append(\"C\")\n        }\
    \ else if grade >= 1.3 {\n            letterGrades.append(\"C-\")\n        } else\
    \ if grade >= 1.0 {\n            letterGrades.append(\"D+\")\n        } else if\
    \ grade >= 0.7 {\n            letterGrades.append(\"D\")\n        } else if grade\
    \ >= 0.0 {\n            letterGrades.append(\"D-\")\n        } else {\n      \
    \      letterGrades.append(\"E\")\n        }\n    }\n    return letterGrades\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpzd4bshlr/tmpzd4bshlr.swift:71: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b26274e3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b26271dab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b26271da988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b26271d97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzd4bshlr                        0x000056416df8a7a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b26276cf460 __libc_start_main +
    245

    6    tmpzd4bshlr                        0x000056416df8a2c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660013958
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades: [String] = []\n    for grade\
    \ in grades {\n        if grade >= 4.0 {\n            letterGrades.append(\"A+\"\
    )\n        } else if grade >= 3.7 {\n            letterGrades.append(\"A\")\n\
    \        } else if grade >= 3.3 {\n            letterGrades.append(\"A-\")\n \
    \       } else if grade >= 3.0 {\n            letterGrades.append(\"B+\")\n  \
    \      } else if grade >= 2.7 {\n            letterGrades.append(\"B\")\n    \
    \    } else if grade >= 2.3 {\n            letterGrades.append(\"B-\")\n     \
    \   } else if grade >= 2.0 {\n            letterGrades.append(\"C+\")\n      \
    \  } else if grade >= 1.7 {\n            letterGrades.append(\"C\")\n        }\
    \ else if grade >= 1.3 {\n            letterGrades.append(\"C-\")\n        } else\
    \ if grade >= 1.0 {\n            letterGrades.append(\"D+\")\n        } else if\
    \ grade >= 0.7 {\n            letterGrades.append(\"D\")\n        } else if grade\
    \ >= 0.0 {\n            letterGrades.append(\"D-\")\n        } else {\n      \
    \      letterGrades.append(\"E\")\n        }\n    }\n    return letterGrades\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpzd4bshlr/tmpzd4bshlr.swift:71: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b26274e3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b26271dab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b26271da988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b26271d97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzd4bshlr                        0x000056416df8a7a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b26276cf460 __libc_start_main +
    245

    6    tmpzd4bshlr                        0x000056416df8a2c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660013958
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    // your code here\n    return []\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5])\
    \ == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpdb23odh5/tmpdb23odh5.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad95ae23c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad95ab1ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad95ab1a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad95ab197b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdb23odh5                        0x00005602ef2735e6 <unavailable> + 5606

    5    libc.so.6                          0x00002ad95b00f460 __libc_start_main +
    245

    6    tmpdb23odh5                        0x00005602ef273109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660013958
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades: [String] = []\n    for grade\
    \ in grades {\n        if grade >= 4.0 {\n            letterGrades.append(\"A+\"\
    )\n        } else if grade >= 3.7 {\n            letterGrades.append(\"A\")\n\
    \        } else if grade >= 3.3 {\n            letterGrades.append(\"A-\")\n \
    \       } else if grade >= 3.0 {\n            letterGrades.append(\"B+\")\n  \
    \      } else if grade >= 2.7 {\n            letterGrades.append(\"B\")\n    \
    \    } else if grade >= 2.3 {\n            letterGrades.append(\"B-\")\n     \
    \   } else if grade >= 2.0 {\n            letterGrades.append(\"C+\")\n      \
    \  } else if grade >= 1.7 {\n            letterGrades.append(\"C\")\n        }\
    \ else if grade >= 1.3 {\n            letterGrades.append(\"C-\")\n        } else\
    \ if grade >= 1.0 {\n            letterGrades.append(\"D+\")\n        } else if\
    \ grade >= 0.7 {\n            letterGrades.append(\"D\")\n        } else if grade\
    \ >= 0.0 {\n            letterGrades.append(\"D-\")\n        } else {\n      \
    \      letterGrades.append(\"E\")\n        }\n    }\n    return letterGrades\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpzd4bshlr/tmpzd4bshlr.swift:71: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b26274e3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b26271dab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b26271da988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b26271d97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzd4bshlr                        0x000056416df8a7a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b26276cf460 __libc_start_main +
    245

    6    tmpzd4bshlr                        0x000056416df8a2c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660013958
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades = [String]()\n    for grade in\
    \ grades {\n        if grade >= 4.0 {\n            letterGrades.append(\"A+\"\
    )\n        } else if grade >= 3.7 {\n            letterGrades.append(\"A\")\n\
    \        } else if grade >= 3.3 {\n            letterGrades.append(\"A-\")\n \
    \       } else if grade >= 3.0 {\n            letterGrades.append(\"B+\")\n  \
    \      } else if grade >= 2.7 {\n            letterGrades.append(\"B\")\n    \
    \    } else if grade >= 2.3 {\n            letterGrades.append(\"B-\")\n     \
    \   } else if grade >= 2.0 {\n            letterGrades.append(\"C+\")\n      \
    \  } else if grade >= 1.7 {\n            letterGrades.append(\"C\")\n        }\
    \ else if grade >= 1.3 {\n            letterGrades.append(\"C-\")\n        } else\
    \ if grade >= 1.0 {\n            letterGrades.append(\"D+\")\n        } else if\
    \ grade >= 0.7 {\n            letterGrades.append(\"D\")\n        } else if grade\
    \ >= 0.0 {\n            letterGrades.append(\"D-\")\n        } else {\n      \
    \      letterGrades.append(\"E\")\n        }\n    }\n    return letterGrades\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmp_e648e_q/tmp_e648e_q.swift:71: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae1592c1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae158fb8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae158fb8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae158fb77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_e648e_q                        0x0000559655f5e7f6 <unavailable> + 6134

    5    libc.so.6                          0x00002ae1594ad460 __libc_start_main +
    245

    6    tmp_e648e_q                        0x0000559655f5e319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1660013958
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var result: [String] = []\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            result.append(\"A+\")\n        } else\
    \ if grade >= 3.7 {\n            result.append(\"A\")\n        } else if grade\
    \ >= 3.3 {\n            result.append(\"A-\")\n        } else if grade >= 3.0\
    \ {\n            result.append(\"B+\")\n        } else if grade >= 2.7 {\n   \
    \         result.append(\"B\")\n        } else if grade >= 2.3 {\n           \
    \ result.append(\"B-\")\n        } else if grade >= 2.0 {\n            result.append(\"\
    C+\")\n        } else if grade >= 1.7 {\n            result.append(\"C\")\n  \
    \      } else if grade >= 1.3 {\n            result.append(\"C-\")\n        }\
    \ else if grade >= 1.0 {\n            result.append(\"D+\")\n        } else if\
    \ grade >= 0.7 {\n            result.append(\"D\")\n        } else if grade >=\
    \ 0.0 {\n            result.append(\"D-\")\n        } else {\n            result.append(\"\
    E\")\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2])\
    \ == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpdri1lvgf/tmpdri1lvgf.swift:71: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b295682ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2956525b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2956525988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b29565247b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdri1lvgf                        0x000055e4cf0bd7a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b2956a1a460 __libc_start_main +
    245

    6    tmpdri1lvgf                        0x000055e4cf0bd2c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660013958
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letter_grades: [String] = []\n    for grade\
    \ in grades {\n        if grade >= 4.0 {\n            letter_grades.append(\"\
    A+\")\n        } else if grade >= 3.7 {\n            letter_grades.append(\"A\"\
    )\n        } else if grade >= 3.3 {\n            letter_grades.append(\"A-\")\n\
    \        } else if grade >= 3.0 {\n            letter_grades.append(\"B+\")\n\
    \        } else if grade >= 2.7 {\n            letter_grades.append(\"B\")\n \
    \       } else if grade >= 2.3 {\n            letter_grades.append(\"B-\")\n \
    \       } else if grade >= 2.0 {\n            letter_grades.append(\"C+\")\n \
    \       } else if grade >= 1.7 {\n            letter_grades.append(\"C\")\n  \
    \      } else if grade >= 1.3 {\n            letter_grades.append(\"C-\")\n  \
    \      } else if grade >= 1.0 {\n            letter_grades.append(\"D+\")\n  \
    \      } else if grade >= 0.7 {\n            letter_grades.append(\"D\")\n   \
    \     } else if grade >= 0.0 {\n            letter_grades.append(\"D-\")\n   \
    \     } else {\n            letter_grades.append(\"E\")\n        }\n    }\n  \
    \  return letter_grades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpg5y0zgra/tmpg5y0zgra.swift:71: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8d221f6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8d21eedb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8d21eed988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8d21eec7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpg5y0zgra                        0x0000556d548d07a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b8d223e2460 __libc_start_main +
    245

    6    tmpg5y0zgra                        0x0000556d548d02c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660013958
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades: [String] = []\n    for grade\
    \ in grades {\n        if grade >= 4.0 {\n            letterGrades.append(\"A+\"\
    )\n        } else if grade >= 3.7 {\n            letterGrades.append(\"A\")\n\
    \        } else if grade >= 3.3 {\n            letterGrades.append(\"A-\")\n \
    \       } else if grade >= 3.0 {\n            letterGrades.append(\"B+\")\n  \
    \      } else if grade >= 2.7 {\n            letterGrades.append(\"B\")\n    \
    \    } else if grade >= 2.3 {\n            letterGrades.append(\"B-\")\n     \
    \   } else if grade >= 2.0 {\n            letterGrades.append(\"C+\")\n      \
    \  } else if grade >= 1.7 {\n            letterGrades.append(\"C\")\n        }\
    \ else if grade >= 1.3 {\n            letterGrades.append(\"C-\")\n        } else\
    \ if grade >= 1.0 {\n            letterGrades.append(\"D+\")\n        } else if\
    \ grade >= 0.7 {\n            letterGrades.append(\"D\")\n        } else if grade\
    \ >= 0.0 {\n            letterGrades.append(\"D-\")\n        } else {\n      \
    \      letterGrades.append(\"E\")\n        }\n    }\n    return letterGrades\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpzd4bshlr/tmpzd4bshlr.swift:71: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b26274e3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b26271dab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b26271da988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b26271d97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzd4bshlr                        0x000056416df8a7a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b26276cf460 __libc_start_main +
    245

    6    tmpzd4bshlr                        0x000056416df8a2c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660013958
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades = [String]()\n    for grade in\
    \ grades {\n        if grade >= 4.0 {\n            letterGrades.append(\"A+\"\
    )\n        } else if grade >= 3.7 {\n            letterGrades.append(\"A\")\n\
    \        } else if grade >= 3.3 {\n            letterGrades.append(\"A-\")\n \
    \       } else if grade >= 3.0 {\n            letterGrades.append(\"B+\")\n  \
    \      } else if grade >= 2.7 {\n            letterGrades.append(\"B\")\n    \
    \    } else if grade >= 2.3 {\n            letterGrades.append(\"B-\")\n     \
    \   } else if grade >= 2.0 {\n            letterGrades.append(\"C+\")\n      \
    \  } else if grade >= 1.7 {\n            letterGrades.append(\"C\")\n        }\
    \ else if grade >= 1.3 {\n            letterGrades.append(\"C-\")\n        } else\
    \ if grade >= 1.0 {\n            letterGrades.append(\"D+\")\n        } else if\
    \ grade >= 0.7 {\n            letterGrades.append(\"D\")\n        } else if grade\
    \ >= 0.0 {\n            letterGrades.append(\"D-\")\n        } else {\n      \
    \      letterGrades.append(\"E\")\n        }\n    }\n    return letterGrades\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmp_e648e_q/tmp_e648e_q.swift:71: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae1592c1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae158fb8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae158fb8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae158fb77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_e648e_q                        0x0000559655f5e7f6 <unavailable> + 6134

    5    libc.so.6                          0x00002ae1594ad460 __libc_start_main +
    245

    6    tmp_e648e_q                        0x0000559655f5e319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1660013958
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    // Write your code here\n    var result: [String]\
    \ = []\n    for grade in grades {\n        if grade >= 4.0 {\n            result.append(\"\
    A+\")\n        } else if grade >= 3.7 {\n            result.append(\"A\")\n  \
    \      } else if grade >= 3.3 {\n            result.append(\"A-\")\n        }\
    \ else if grade >= 3.0 {\n            result.append(\"B+\")\n        } else if\
    \ grade >= 2.7 {\n            result.append(\"B\")\n        } else if grade >=\
    \ 2.3 {\n            result.append(\"B-\")\n        } else if grade >= 2.0 {\n\
    \            result.append(\"C+\")\n        } else if grade >= 1.7 {\n       \
    \     result.append(\"C\")\n        } else if grade >= 1.3 {\n            result.append(\"\
    C-\")\n        } else if grade >= 1.0 {\n            result.append(\"D+\")\n \
    \       } else if grade >= 0.7 {\n            result.append(\"D\")\n        }\
    \ else if grade >= 0.0 {\n            result.append(\"D-\")\n        } else {\n\
    \            result.append(\"E\")\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpk4m4tsa4/tmpk4m4tsa4.swift:72: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac2f629cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac2f5f93b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac2f5f93988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac2f5f927b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpk4m4tsa4                        0x0000558465bd97a6 <unavailable> + 6054

    5    libc.so.6                          0x00002ac2f6488460 __libc_start_main +
    245

    6    tmpk4m4tsa4                        0x0000558465bd92c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660013958
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades: [String] = []\n    for grade\
    \ in grades {\n        if grade >= 4.0 {\n            letterGrades.append(\"A+\"\
    )\n        } else if grade >= 3.7 {\n            letterGrades.append(\"A\")\n\
    \        } else if grade >= 3.3 {\n            letterGrades.append(\"A-\")\n \
    \       } else if grade >= 3.0 {\n            letterGrades.append(\"B+\")\n  \
    \      } else if grade >= 2.7 {\n            letterGrades.append(\"B\")\n    \
    \    } else if grade >= 2.3 {\n            letterGrades.append(\"B-\")\n     \
    \   } else if grade >= 2.0 {\n            letterGrades.append(\"C+\")\n      \
    \  } else if grade >= 1.7 {\n            letterGrades.append(\"C\")\n        }\
    \ else if grade >= 1.3 {\n            letterGrades.append(\"C-\")\n        } else\
    \ if grade >= 1.0 {\n            letterGrades.append(\"D+\")\n        } else if\
    \ grade >= 0.7 {\n            letterGrades.append(\"D\")\n        } else if grade\
    \ >= 0.0 {\n            letterGrades.append(\"D-\")\n        } else {\n      \
    \      letterGrades.append(\"E\")\n        }\n    }\n    return letterGrades\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpzd4bshlr/tmpzd4bshlr.swift:71: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b26274e3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b26271dab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b26271da988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b26271d97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzd4bshlr                        0x000056416df8a7a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b26276cf460 __libc_start_main +
    245

    6    tmpzd4bshlr                        0x000056416df8a2c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660013958
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades = [String]()\n    for grade in\
    \ grades {\n        switch grade {\n        case 4.0:\n            letterGrades.append(\"\
    A+\")\n        case 3.7..<4.0:\n            letterGrades.append(\"A\")\n     \
    \   case 3.3..<3.7:\n            letterGrades.append(\"A-\")\n        case 3.0..<3.3:\n\
    \            letterGrades.append(\"B+\")\n        case 2.7..<3.0:\n          \
    \  letterGrades.append(\"B\")\n        case 2.3..<2.7:\n            letterGrades.append(\"\
    B-\")\n        case 2.0..<2.3:\n            letterGrades.append(\"C+\")\n    \
    \    case 1.7..<2.0:\n            letterGrades.append(\"C\")\n        case 1.3..<1.7:\n\
    \            letterGrades.append(\"C-\")\n        case 1.0..<1.3:\n          \
    \  letterGrades.append(\"D+\")\n        case 0.7..<1.0:\n            letterGrades.append(\"\
    D\")\n        case 0.0..<0.7:\n            letterGrades.append(\"D-\")\n     \
    \   case 0.0:\n            letterGrades.append(\"E\")\n        default:\n    \
    \        letterGrades.append(\"Invalid\")\n        }\n    }\n    return letterGrades\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpsfmesqa9/tmpsfmesqa9.swift:74: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba989efec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba989bf5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba989bf5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba989bf47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsfmesqa9                        0x0000559648922926 <unavailable> + 6438

    5    libc.so.6                          0x00002ba98a0ea460 __libc_start_main +
    245

    6    tmpsfmesqa9                        0x0000559648922449 <unavailable> + 5193

    '
  stdout: ''
  timestamp: 1660013958
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades = [String]()\n    for grade in\
    \ grades {\n        switch grade {\n        case 4.0:\n            letterGrades.append(\"\
    A+\")\n        case 3.7..<4.0:\n            letterGrades.append(\"A\")\n     \
    \   case 3.3..<3.7:\n            letterGrades.append(\"A-\")\n        case 3.0..<3.3:\n\
    \            letterGrades.append(\"B+\")\n        case 2.7..<3.0:\n          \
    \  letterGrades.append(\"B\")\n        case 2.3..<2.7:\n            letterGrades.append(\"\
    B-\")\n        case 2.0..<2.3:\n            letterGrades.append(\"C+\")\n    \
    \    case 1.7..<2.0:\n            letterGrades.append(\"C\")\n        case 1.3..<1.7:\n\
    \            letterGrades.append(\"C-\")\n        case 1.0..<1.3:\n          \
    \  letterGrades.append(\"D+\")\n        case 0.7..<1.0:\n            letterGrades.append(\"\
    D\")\n        case 0.0..<0.7:\n            letterGrades.append(\"D-\")\n     \
    \   case 0.0:\n            letterGrades.append(\"E\")\n        default:\n    \
    \        letterGrades.append(\"Invalid\")\n        }\n    }\n    return letterGrades\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpsfmesqa9/tmpsfmesqa9.swift:74: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba989efec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba989bf5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba989bf5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba989bf47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsfmesqa9                        0x0000559648922926 <unavailable> + 6438

    5    libc.so.6                          0x00002ba98a0ea460 __libc_start_main +
    245

    6    tmpsfmesqa9                        0x0000559648922449 <unavailable> + 5193

    '
  stdout: ''
  timestamp: 1660013958
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades = [String]()\n    for grade in\
    \ grades {\n        if grade >= 4.0 {\n            letterGrades.append(\"A+\"\
    )\n        } else if grade >= 3.7 {\n            letterGrades.append(\"A\")\n\
    \        } else if grade >= 3.3 {\n            letterGrades.append(\"A-\")\n \
    \       } else if grade >= 3.0 {\n            letterGrades.append(\"B+\")\n  \
    \      } else if grade >= 2.7 {\n            letterGrades.append(\"B\")\n    \
    \    } else if grade >= 2.3 {\n            letterGrades.append(\"B-\")\n     \
    \   } else if grade >= 2.0 {\n            letterGrades.append(\"C+\")\n      \
    \  } else if grade >= 1.7 {\n            letterGrades.append(\"C\")\n        }\
    \ else if grade >= 1.3 {\n            letterGrades.append(\"C-\")\n        } else\
    \ if grade >= 1.0 {\n            letterGrades.append(\"D+\")\n        } else if\
    \ grade >= 0.7 {\n            letterGrades.append(\"D\")\n        } else if grade\
    \ >= 0.0 {\n            letterGrades.append(\"D-\")\n        } else {\n      \
    \      letterGrades.append(\"E\")\n        }\n    }\n    return letterGrades\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmp_e648e_q/tmp_e648e_q.swift:71: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae1592c1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae158fb8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae158fb8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae158fb77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_e648e_q                        0x0000559655f5e7f6 <unavailable> + 6134

    5    libc.so.6                          0x00002ae1594ad460 __libc_start_main +
    245

    6    tmp_e648e_q                        0x0000559655f5e319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1660013958
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades: [String] = []\n    for grade\
    \ in grades {\n        if grade >= 4.0 {\n            letterGrades.append(\"A+\"\
    )\n        } else if grade >= 3.7 {\n            letterGrades.append(\"A\")\n\
    \        } else if grade >= 3.3 {\n            letterGrades.append(\"A-\")\n \
    \       } else if grade >= 3.0 {\n            letterGrades.append(\"B+\")\n  \
    \      } else if grade >= 2.7 {\n            letterGrades.append(\"B\")\n    \
    \    } else if grade >= 2.3 {\n            letterGrades.append(\"B-\")\n     \
    \   } else if grade >= 2.0 {\n            letterGrades.append(\"C+\")\n      \
    \  } else if grade >= 1.7 {\n            letterGrades.append(\"C\")\n        }\
    \ else if grade >= 1.3 {\n            letterGrades.append(\"C-\")\n        } else\
    \ if grade >= 1.0 {\n            letterGrades.append(\"D+\")\n        } else if\
    \ grade >= 0.7 {\n            letterGrades.append(\"D\")\n        } else if grade\
    \ >= 0.0 {\n            letterGrades.append(\"D-\")\n        } else {\n      \
    \      letterGrades.append(\"E\")\n        }\n    }\n    return letterGrades\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpzd4bshlr/tmpzd4bshlr.swift:71: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b26274e3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b26271dab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b26271da988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b26271d97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzd4bshlr                        0x000056416df8a7a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b26276cf460 __libc_start_main +
    245

    6    tmpzd4bshlr                        0x000056416df8a2c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660013958
- exit_code: 0
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades: [String] = []\n    for grade\
    \ in grades {\n        if grade == 4.0 {\n            letterGrades.append(\"A+\"\
    )\n        } else if grade > 3.7 {\n            letterGrades.append(\"A\")\n \
    \       } else if grade > 3.3 {\n            letterGrades.append(\"A-\")\n   \
    \     } else if grade > 3.0 {\n            letterGrades.append(\"B+\")\n     \
    \   } else if grade > 2.7 {\n            letterGrades.append(\"B\")\n        }\
    \ else if grade > 2.3 {\n            letterGrades.append(\"B-\")\n        } else\
    \ if grade > 2.0 {\n            letterGrades.append(\"C+\")\n        } else if\
    \ grade > 1.7 {\n            letterGrades.append(\"C\")\n        } else if grade\
    \ > 1.3 {\n            letterGrades.append(\"C-\")\n        } else if grade >\
    \ 1.0 {\n            letterGrades.append(\"D+\")\n        } else if grade > 0.7\
    \ {\n            letterGrades.append(\"D\")\n        } else if grade > 0.0 {\n\
    \            letterGrades.append(\"D-\")\n        } else {\n            letterGrades.append(\"\
    E\")\n        }\n    }\n    return letterGrades\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2])\
    \ == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013958
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades: [String] = []\n    for grade\
    \ in grades {\n        switch grade {\n        case 4.0:\n            letterGrades.append(\"\
    A+\")\n        case 3.7..<4.0:\n            letterGrades.append(\"A\")\n     \
    \   case 3.3..<3.7:\n            letterGrades.append(\"A-\")\n        case 3.0..<3.3:\n\
    \            letterGrades.append(\"B+\")\n        case 2.7..<3.0:\n          \
    \  letterGrades.append(\"B\")\n        case 2.3..<2.7:\n            letterGrades.append(\"\
    B-\")\n        case 2.0..<2.3:\n            letterGrades.append(\"C+\")\n    \
    \    case 1.7..<2.0:\n            letterGrades.append(\"C\")\n        case 1.3..<1.7:\n\
    \            letterGrades.append(\"C-\")\n        case 1.0..<1.3:\n          \
    \  letterGrades.append(\"D+\")\n        case 0.7..<1.0:\n            letterGrades.append(\"\
    D\")\n        case 0.0..<0.7:\n            letterGrades.append(\"D-\")\n     \
    \   case 0.0:\n            letterGrades.append(\"E\")\n        default:\n    \
    \        letterGrades.append(\"Invalid\")\n        }\n    }\n    return letterGrades\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmp1obexfzp/tmp1obexfzp.swift:74: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad3ab8d3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad3ab5cab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad3ab5ca988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad3ab5c97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1obexfzp                        0x00005627f2fe88d6 <unavailable> + 6358

    5    libc.so.6                          0x00002ad3ababf460 __libc_start_main +
    245

    6    tmp1obexfzp                        0x00005627f2fe83f9 <unavailable> + 5113

    '
  stdout: ''
  timestamp: 1660013958
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades: [String] = []\n    for grade\
    \ in grades {\n        if grade >= 4.0 {\n            letterGrades.append(\"A+\"\
    )\n        } else if grade >= 3.7 {\n            letterGrades.append(\"A\")\n\
    \        } else if grade >= 3.3 {\n            letterGrades.append(\"A-\")\n \
    \       } else if grade >= 3.0 {\n            letterGrades.append(\"B+\")\n  \
    \      } else if grade >= 2.7 {\n            letterGrades.append(\"B\")\n    \
    \    } else if grade >= 2.3 {\n            letterGrades.append(\"B-\")\n     \
    \   } else if grade >= 2.0 {\n            letterGrades.append(\"C+\")\n      \
    \  } else if grade >= 1.7 {\n            letterGrades.append(\"C\")\n        }\
    \ else if grade >= 1.3 {\n            letterGrades.append(\"C-\")\n        } else\
    \ if grade >= 1.0 {\n            letterGrades.append(\"D+\")\n        } else if\
    \ grade >= 0.7 {\n            letterGrades.append(\"D\")\n        } else if grade\
    \ >= 0.0 {\n            letterGrades.append(\"D-\")\n        } else {\n      \
    \      letterGrades.append(\"E\")\n        }\n    }\n    return letterGrades\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpzd4bshlr/tmpzd4bshlr.swift:71: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b26274e3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b26271dab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b26271da988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b26271d97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzd4bshlr                        0x000056416df8a7a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b26276cf460 __libc_start_main +
    245

    6    tmpzd4bshlr                        0x000056416df8a2c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660013958
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades = [String]()\n    for grade in\
    \ grades {\n        if grade >= 4.0 {\n            letterGrades.append(\"A+\"\
    )\n        } else if grade >= 3.7 {\n            letterGrades.append(\"A\")\n\
    \        } else if grade >= 3.3 {\n            letterGrades.append(\"A-\")\n \
    \       } else if grade >= 3.0 {\n            letterGrades.append(\"B+\")\n  \
    \      } else if grade >= 2.7 {\n            letterGrades.append(\"B\")\n    \
    \    } else if grade >= 2.3 {\n            letterGrades.append(\"B-\")\n     \
    \   } else if grade >= 2.0 {\n            letterGrades.append(\"C+\")\n      \
    \  } else if grade >= 1.7 {\n            letterGrades.append(\"C\")\n        }\
    \ else if grade >= 1.3 {\n            letterGrades.append(\"C-\")\n        } else\
    \ if grade >= 1.0 {\n            letterGrades.append(\"D+\")\n        } else if\
    \ grade >= 0.7 {\n            letterGrades.append(\"D\")\n        } else if grade\
    \ >= 0.0 {\n            letterGrades.append(\"D-\")\n        } else {\n      \
    \      letterGrades.append(\"E\")\n        }\n    }\n    return letterGrades\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmp_e648e_q/tmp_e648e_q.swift:71: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae1592c1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae158fb8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae158fb8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae158fb77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_e648e_q                        0x0000559655f5e7f6 <unavailable> + 6134

    5    libc.so.6                          0x00002ae1594ad460 __libc_start_main +
    245

    6    tmp_e648e_q                        0x0000559655f5e319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1660013958
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades: [String] = []\n    for grade\
    \ in grades {\n        switch grade {\n        case 4.0:\n            letterGrades.append(\"\
    A+\")\n        case 3.7..<4.0:\n            letterGrades.append(\"A\")\n     \
    \   case 3.3..<3.7:\n            letterGrades.append(\"A-\")\n        case 3.0..<3.3:\n\
    \            letterGrades.append(\"B+\")\n        case 2.7..<3.0:\n          \
    \  letterGrades.append(\"B\")\n        case 2.3..<2.7:\n            letterGrades.append(\"\
    B-\")\n        case 2.0..<2.3:\n            letterGrades.append(\"C+\")\n    \
    \    case 1.7..<2.0:\n            letterGrades.append(\"C\")\n        case 1.3..<1.7:\n\
    \            letterGrades.append(\"C-\")\n        case 1.0..<1.3:\n          \
    \  letterGrades.append(\"D+\")\n        case 0.7..<1.0:\n            letterGrades.append(\"\
    D\")\n        case 0.0..<0.7:\n            letterGrades.append(\"D-\")\n     \
    \   case 0.0:\n            letterGrades.append(\"E\")\n        default:\n    \
    \        letterGrades.append(\"Invalid\")\n        }\n    }\n    return letterGrades\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmp1obexfzp/tmp1obexfzp.swift:74: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad3ab8d3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad3ab5cab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad3ab5ca988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad3ab5c97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1obexfzp                        0x00005627f2fe88d6 <unavailable> + 6358

    5    libc.so.6                          0x00002ad3ababf460 __libc_start_main +
    245

    6    tmp1obexfzp                        0x00005627f2fe83f9 <unavailable> + 5113

    '
  stdout: ''
  timestamp: 1660013958
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letter_grades = [String]()\n    for grade in\
    \ grades {\n        if grade >= 4.0 {\n            letter_grades.append(\"A+\"\
    )\n        } else if grade >= 3.7 {\n            letter_grades.append(\"A\")\n\
    \        } else if grade >= 3.3 {\n            letter_grades.append(\"A-\")\n\
    \        } else if grade >= 3.0 {\n            letter_grades.append(\"B+\")\n\
    \        } else if grade >= 2.7 {\n            letter_grades.append(\"B\")\n \
    \       } else if grade >= 2.3 {\n            letter_grades.append(\"B-\")\n \
    \       } else if grade >= 2.0 {\n            letter_grades.append(\"C+\")\n \
    \       } else if grade >= 1.7 {\n            letter_grades.append(\"C\")\n  \
    \      } else if grade >= 1.3 {\n            letter_grades.append(\"C-\")\n  \
    \      } else if grade >= 1.0 {\n            letter_grades.append(\"D+\")\n  \
    \      } else if grade >= 0.7 {\n            letter_grades.append(\"D\")\n   \
    \     } else if grade >= 0.0 {\n            letter_grades.append(\"D-\")\n   \
    \     } else {\n            letter_grades.append(\"E\")\n        }\n    }\n  \
    \  return letter_grades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpxz159fh_/tmpxz159fh_.swift:71: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8a9995ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8a99651b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8a99651988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8a996507b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxz159fh_                        0x000055e14d06c7f6 <unavailable> + 6134

    5    libc.so.6                          0x00002b8a99b46460 __libc_start_main +
    245

    6    tmpxz159fh_                        0x000055e14d06c319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1660013958
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letter_grades: [String] = []\n    for grade\
    \ in grades {\n        switch grade {\n        case 4.0:\n            letter_grades.append(\"\
    A+\")\n        case 3.7..<4.0:\n            letter_grades.append(\"A\")\n    \
    \    case 3.3..<3.7:\n            letter_grades.append(\"A-\")\n        case 3.0..<3.3:\n\
    \            letter_grades.append(\"B+\")\n        case 2.7..<3.0:\n         \
    \   letter_grades.append(\"B\")\n        case 2.3..<2.7:\n            letter_grades.append(\"\
    B-\")\n        case 2.0..<2.3:\n            letter_grades.append(\"C+\")\n   \
    \     case 1.7..<2.0:\n            letter_grades.append(\"C\")\n        case 1.3..<1.7:\n\
    \            letter_grades.append(\"C-\")\n        case 1.0..<1.3:\n         \
    \   letter_grades.append(\"D+\")\n        case 0.7..<1.0:\n            letter_grades.append(\"\
    D\")\n        case 0.0..<0.7:\n            letter_grades.append(\"D-\")\n    \
    \    case 0.0:\n            letter_grades.append(\"E\")\n        default:\n  \
    \          letter_grades.append(\"Invalid\")\n        }\n    }\n    return letter_grades\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmp8l318ljb/tmp8l318ljb.swift:74: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8025a0fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8025706b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8025706988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b80257057b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8l318ljb                        0x0000561941b948d6 <unavailable> + 6358

    5    libc.so.6                          0x00002b8025bfb460 __libc_start_main +
    245

    6    tmp8l318ljb                        0x0000561941b943f9 <unavailable> + 5113

    '
  stdout: ''
  timestamp: 1660013958
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades = [String]()\n    for grade in\
    \ grades {\n        switch grade {\n        case 4.0:\n            letterGrades.append(\"\
    A+\")\n        case 3.7..<4.0:\n            letterGrades.append(\"A\")\n     \
    \   case 3.3..<3.7:\n            letterGrades.append(\"A-\")\n        case 3.0..<3.3:\n\
    \            letterGrades.append(\"B+\")\n        case 2.7..<3.0:\n          \
    \  letterGrades.append(\"B\")\n        case 2.3..<2.7:\n            letterGrades.append(\"\
    B-\")\n        case 2.0..<2.3:\n            letterGrades.append(\"C+\")\n    \
    \    case 1.7..<2.0:\n            letterGrades.append(\"C\")\n        case 1.3..<1.7:\n\
    \            letterGrades.append(\"C-\")\n        case 1.0..<1.3:\n          \
    \  letterGrades.append(\"D+\")\n        case 0.7..<1.0:\n            letterGrades.append(\"\
    D\")\n        case 0.0..<0.7:\n            letterGrades.append(\"D-\")\n     \
    \   case 0.0:\n            letterGrades.append(\"E\")\n        default:\n    \
    \        letterGrades.append(\"Invalid grade\")\n        }\n    }\n    return\
    \ letterGrades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpsedols6m/tmpsedols6m.swift:74: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b93f0f34c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b93f0c2bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b93f0c2b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b93f0c2a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsedols6m                        0x00005643bd92d926 <unavailable> + 6438

    5    libc.so.6                          0x00002b93f1120460 __libc_start_main +
    245

    6    tmpsedols6m                        0x00005643bd92d449 <unavailable> + 5193

    '
  stdout: ''
  timestamp: 1660013958
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letter_grades: [String] = []\n    for grade\
    \ in grades {\n        if grade >= 4.0 {\n            letter_grades.append(\"\
    A+\")\n        } else if grade >= 3.7 {\n            letter_grades.append(\"A\"\
    )\n        } else if grade >= 3.3 {\n            letter_grades.append(\"A-\")\n\
    \        } else if grade >= 3.0 {\n            letter_grades.append(\"B+\")\n\
    \        } else if grade >= 2.7 {\n            letter_grades.append(\"B\")\n \
    \       } else if grade >= 2.3 {\n            letter_grades.append(\"B-\")\n \
    \       } else if grade >= 2.0 {\n            letter_grades.append(\"C+\")\n \
    \       } else if grade >= 1.7 {\n            letter_grades.append(\"C\")\n  \
    \      } else if grade >= 1.3 {\n            letter_grades.append(\"C-\")\n  \
    \      } else if grade >= 1.0 {\n            letter_grades.append(\"D+\")\n  \
    \      } else if grade >= 0.7 {\n            letter_grades.append(\"D\")\n   \
    \     } else if grade >= 0.0 {\n            letter_grades.append(\"D-\")\n   \
    \     } else {\n            letter_grades.append(\"E\")\n        }\n    }\n  \
    \  return letter_grades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpg5y0zgra/tmpg5y0zgra.swift:71: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8d221f6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8d21eedb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8d21eed988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8d21eec7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpg5y0zgra                        0x0000556d548d07a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b8d223e2460 __libc_start_main +
    245

    6    tmpg5y0zgra                        0x0000556d548d02c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660013958
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    // Write your code here\n    return []\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpzqc7qfdr/tmpzqc7qfdr.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba67efeac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba67ece1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba67ece1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba67ece07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzqc7qfdr                        0x0000559fdf6475e6 <unavailable> + 5606

    5    libc.so.6                          0x00002ba67f1d6460 __libc_start_main +
    245

    6    tmpzqc7qfdr                        0x0000559fdf647109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660013958
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades: [String] = []\n    for grade\
    \ in grades {\n        if grade >= 4.0 {\n            letterGrades.append(\"A+\"\
    )\n        } else if grade >= 3.7 {\n            letterGrades.append(\"A\")\n\
    \        } else if grade >= 3.3 {\n            letterGrades.append(\"A-\")\n \
    \       } else if grade >= 3.0 {\n            letterGrades.append(\"B+\")\n  \
    \      } else if grade >= 2.7 {\n            letterGrades.append(\"B\")\n    \
    \    } else if grade >= 2.3 {\n            letterGrades.append(\"B-\")\n     \
    \   } else if grade >= 2.0 {\n            letterGrades.append(\"C+\")\n      \
    \  } else if grade >= 1.7 {\n            letterGrades.append(\"C\")\n        }\
    \ else if grade >= 1.3 {\n            letterGrades.append(\"C-\")\n        } else\
    \ if grade >= 1.0 {\n            letterGrades.append(\"D+\")\n        } else if\
    \ grade >= 0.7 {\n            letterGrades.append(\"D\")\n        } else if grade\
    \ >= 0.0 {\n            letterGrades.append(\"D-\")\n        } else {\n      \
    \      letterGrades.append(\"E\")\n        }\n    }\n    return letterGrades\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpzd4bshlr/tmpzd4bshlr.swift:71: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b26274e3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b26271dab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b26271da988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b26271d97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzd4bshlr                        0x000056416df8a7a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b26276cf460 __libc_start_main +
    245

    6    tmpzd4bshlr                        0x000056416df8a2c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660013958
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades: [String] = []\n    for grade\
    \ in grades {\n        if grade >= 4.0 {\n            letterGrades.append(\"A+\"\
    )\n        } else if grade >= 3.7 {\n            letterGrades.append(\"A\")\n\
    \        } else if grade >= 3.3 {\n            letterGrades.append(\"A-\")\n \
    \       } else if grade >= 3.0 {\n            letterGrades.append(\"B+\")\n  \
    \      } else if grade >= 2.7 {\n            letterGrades.append(\"B\")\n    \
    \    } else if grade >= 2.3 {\n            letterGrades.append(\"B-\")\n     \
    \   } else if grade >= 2.0 {\n            letterGrades.append(\"C+\")\n      \
    \  } else if grade >= 1.7 {\n            letterGrades.append(\"C\")\n        }\
    \ else if grade >= 1.3 {\n            letterGrades.append(\"C-\")\n        } else\
    \ if grade >= 1.0 {\n            letterGrades.append(\"D+\")\n        } else if\
    \ grade >= 0.7 {\n            letterGrades.append(\"D\")\n        } else if grade\
    \ >= 0.0 {\n            letterGrades.append(\"D-\")\n        } else {\n      \
    \      letterGrades.append(\"E\")\n        }\n    }\n    return letterGrades\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpzd4bshlr/tmpzd4bshlr.swift:71: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b26274e3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b26271dab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b26271da988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b26271d97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzd4bshlr                        0x000056416df8a7a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b26276cf460 __libc_start_main +
    245

    6    tmpzd4bshlr                        0x000056416df8a2c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660013958
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var grades = grades\n    var letterGrades = [String]()\n\
    \    for i in 0..<grades.count {\n        if grades[i] >= 4.0 {\n            letterGrades.append(\"\
    A+\")\n        } else if grades[i] >= 3.7 {\n            letterGrades.append(\"\
    A\")\n        } else if grades[i] >= 3.3 {\n            letterGrades.append(\"\
    A-\")\n        } else if grades[i] >= 3.0 {\n            letterGrades.append(\"\
    B+\")\n        } else if grades[i] >= 2.7 {\n            letterGrades.append(\"\
    B\")\n        } else if grades[i] >= 2.3 {\n            letterGrades.append(\"\
    B-\")\n        } else if grades[i] >= 2.0 {\n            letterGrades.append(\"\
    C+\")\n        } else if grades[i] >= 1.7 {\n            letterGrades.append(\"\
    C\")\n        } else if grades[i] >= 1.3 {\n            letterGrades.append(\"\
    C-\")\n        } else if grades[i] >= 1.0 {\n            letterGrades.append(\"\
    D+\")\n        } else if grades[i] >= 0.7 {\n            letterGrades.append(\"\
    D\")\n        } else if grades[i] >= 0.0 {\n            letterGrades.append(\"\
    D-\")\n        } else {\n            letterGrades.append(\"E\")\n        }\n \
    \   }\n    return letterGrades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmptwx35jcs/tmptwx35jcs.swift:72: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afd1639cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afd16093b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afd16093988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afd160927b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptwx35jcs                        0x000056338167f8c6 <unavailable> + 6342

    5    libc.so.6                          0x00002afd16588460 __libc_start_main +
    245

    6    tmptwx35jcs                        0x000056338167f3e9 <unavailable> + 5097

    '
  stdout: ''
  timestamp: 1660013958
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades: [String] = []\n    for grade\
    \ in grades {\n        switch grade {\n        case 4.0:\n            letterGrades.append(\"\
    A+\")\n        case 3.7..<4.0:\n            letterGrades.append(\"A\")\n     \
    \   case 3.3..<3.7:\n            letterGrades.append(\"A-\")\n        case 3.0..<3.3:\n\
    \            letterGrades.append(\"B+\")\n        case 2.7..<3.0:\n          \
    \  letterGrades.append(\"B\")\n        case 2.3..<2.7:\n            letterGrades.append(\"\
    B-\")\n        case 2.0..<2.3:\n            letterGrades.append(\"C+\")\n    \
    \    case 1.7..<2.0:\n            letterGrades.append(\"C\")\n        case 1.3..<1.7:\n\
    \            letterGrades.append(\"C-\")\n        case 1.0..<1.3:\n          \
    \  letterGrades.append(\"D+\")\n        case 0.7..<1.0:\n            letterGrades.append(\"\
    D\")\n        case 0.0..<0.7:\n            letterGrades.append(\"D-\")\n     \
    \   case 0.0:\n            letterGrades.append(\"E\")\n        default:\n    \
    \        letterGrades.append(\"Invalid grade\")\n        }\n    }\n    return\
    \ letterGrades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmp5u38w_6z/tmp5u38w_6z.swift:74: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac06755fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac067256b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac067256988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac0672557b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5u38w_6z                        0x0000555567c6d8d6 <unavailable> + 6358

    5    libc.so.6                          0x00002ac06774b460 __libc_start_main +
    245

    6    tmp5u38w_6z                        0x0000555567c6d3f9 <unavailable> + 5113

    '
  stdout: ''
  timestamp: 1660013958
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades: [String] = []\n    for grade\
    \ in grades {\n        if grade >= 4.0 {\n            letterGrades.append(\"A+\"\
    )\n        } else if grade >= 3.7 {\n            letterGrades.append(\"A\")\n\
    \        } else if grade >= 3.3 {\n            letterGrades.append(\"A-\")\n \
    \       } else if grade >= 3.0 {\n            letterGrades.append(\"B+\")\n  \
    \      } else if grade >= 2.7 {\n            letterGrades.append(\"B\")\n    \
    \    } else if grade >= 2.3 {\n            letterGrades.append(\"B-\")\n     \
    \   } else if grade >= 2.0 {\n            letterGrades.append(\"C+\")\n      \
    \  } else if grade >= 1.7 {\n            letterGrades.append(\"C\")\n        }\
    \ else if grade >= 1.3 {\n            letterGrades.append(\"C-\")\n        } else\
    \ if grade >= 1.0 {\n            letterGrades.append(\"D+\")\n        } else if\
    \ grade >= 0.7 {\n            letterGrades.append(\"D\")\n        } else if grade\
    \ >= 0.0 {\n            letterGrades.append(\"D-\")\n        } else {\n      \
    \      letterGrades.append(\"E\")\n        }\n    }\n    return letterGrades\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpzd4bshlr/tmpzd4bshlr.swift:71: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b26274e3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b26271dab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b26271da988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b26271d97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzd4bshlr                        0x000056416df8a7a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b26276cf460 __libc_start_main +
    245

    6    tmpzd4bshlr                        0x000056416df8a2c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660013958
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letter_grades: [String] = []\n    for grade\
    \ in grades {\n        switch grade {\n        case 4.0:\n            letter_grades.append(\"\
    A+\")\n        case 3.7..<4.0:\n            letter_grades.append(\"A\")\n    \
    \    case 3.3..<3.7:\n            letter_grades.append(\"A-\")\n        case 3.0..<3.3:\n\
    \            letter_grades.append(\"B+\")\n        case 2.7..<3.0:\n         \
    \   letter_grades.append(\"B\")\n        case 2.3..<2.7:\n            letter_grades.append(\"\
    B-\")\n        case 2.0..<2.3:\n            letter_grades.append(\"C+\")\n   \
    \     case 1.7..<2.0:\n            letter_grades.append(\"C\")\n        case 1.3..<1.7:\n\
    \            letter_grades.append(\"C-\")\n        case 1.0..<1.3:\n         \
    \   letter_grades.append(\"D+\")\n        case 0.7..<1.0:\n            letter_grades.append(\"\
    D\")\n        case 0.0..<0.7:\n            letter_grades.append(\"D-\")\n    \
    \    case 0.0:\n            letter_grades.append(\"E\")\n        default:\n  \
    \          letter_grades.append(\"Invalid grade\")\n        }\n    }\n    return\
    \ letter_grades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpyib6s8z9/tmpyib6s8z9.swift:74: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8aede25c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8aedb1cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8aedb1c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8aedb1b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyib6s8z9                        0x000055c4ed8618d6 <unavailable> + 6358

    5    libc.so.6                          0x00002b8aee011460 __libc_start_main +
    245

    6    tmpyib6s8z9                        0x000055c4ed8613f9 <unavailable> + 5113

    '
  stdout: ''
  timestamp: 1660013958
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var result: [String] = []\n    for grade in grades\
    \ {\n        switch grade {\n        case 4.0:\n            result.append(\"A+\"\
    )\n        case 3.7..<4.0:\n            result.append(\"A\")\n        case 3.3..<3.7:\n\
    \            result.append(\"A-\")\n        case 3.0..<3.3:\n            result.append(\"\
    B+\")\n        case 2.7..<3.0:\n            result.append(\"B\")\n        case\
    \ 2.3..<2.7:\n            result.append(\"B-\")\n        case 2.0..<2.3:\n   \
    \         result.append(\"C+\")\n        case 1.7..<2.0:\n            result.append(\"\
    C\")\n        case 1.3..<1.7:\n            result.append(\"C-\")\n        case\
    \ 1.0..<1.3:\n            result.append(\"D+\")\n        case 0.7..<1.0:\n   \
    \         result.append(\"D\")\n        case 0.0..<0.7:\n            result.append(\"\
    D-\")\n        case 0.0:\n            result.append(\"E\")\n        default:\n\
    \            result.append(\"Invalid\")\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpnvkt28oz/tmpnvkt28oz.swift:74: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8c0fd42c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8c0fa39b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8c0fa39988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8c0fa387b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnvkt28oz                        0x0000556dd690d8d6 <unavailable> + 6358

    5    libc.so.6                          0x00002b8c0ff2e460 __libc_start_main +
    245

    6    tmpnvkt28oz                        0x0000556dd690d3f9 <unavailable> + 5113

    '
  stdout: ''
  timestamp: 1660013958
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letter_grades: [String] = []\n    for grade\
    \ in grades {\n        if grade >= 4.0 {\n            letter_grades.append(\"\
    A+\")\n        } else if grade >= 3.7 {\n            letter_grades.append(\"A\"\
    )\n        } else if grade >= 3.3 {\n            letter_grades.append(\"A-\")\n\
    \        } else if grade >= 3.0 {\n            letter_grades.append(\"B+\")\n\
    \        } else if grade >= 2.7 {\n            letter_grades.append(\"B\")\n \
    \       } else if grade >= 2.3 {\n            letter_grades.append(\"B-\")\n \
    \       } else if grade >= 2.0 {\n            letter_grades.append(\"C+\")\n \
    \       } else if grade >= 1.7 {\n            letter_grades.append(\"C\")\n  \
    \      } else if grade >= 1.3 {\n            letter_grades.append(\"C-\")\n  \
    \      } else if grade >= 1.0 {\n            letter_grades.append(\"D+\")\n  \
    \      } else if grade >= 0.7 {\n            letter_grades.append(\"D\")\n   \
    \     } else if grade >= 0.0 {\n            letter_grades.append(\"D-\")\n   \
    \     } else {\n            letter_grades.append(\"E\")\n        }\n    }\n  \
    \  return letter_grades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpg5y0zgra/tmpg5y0zgra.swift:71: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8d221f6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8d21eedb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8d21eed988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8d21eec7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpg5y0zgra                        0x0000556d548d07a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b8d223e2460 __libc_start_main +
    245

    6    tmpg5y0zgra                        0x0000556d548d02c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660013958
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades: [String] = []\n    for grade\
    \ in grades {\n        if grade >= 4.0 {\n            letterGrades.append(\"A+\"\
    )\n        } else if grade >= 3.7 {\n            letterGrades.append(\"A\")\n\
    \        } else if grade >= 3.3 {\n            letterGrades.append(\"A-\")\n \
    \       } else if grade >= 3.0 {\n            letterGrades.append(\"B+\")\n  \
    \      } else if grade >= 2.7 {\n            letterGrades.append(\"B\")\n    \
    \    } else if grade >= 2.3 {\n            letterGrades.append(\"B-\")\n     \
    \   } else if grade >= 2.0 {\n            letterGrades.append(\"C+\")\n      \
    \  } else if grade >= 1.7 {\n            letterGrades.append(\"C\")\n        }\
    \ else if grade >= 1.3 {\n            letterGrades.append(\"C-\")\n        } else\
    \ if grade >= 1.0 {\n            letterGrades.append(\"D+\")\n        } else if\
    \ grade >= 0.7 {\n            letterGrades.append(\"D\")\n        } else if grade\
    \ >= 0.0 {\n            letterGrades.append(\"D-\")\n        } else {\n      \
    \      letterGrades.append(\"E\")\n        }\n    }\n    return letterGrades\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpzd4bshlr/tmpzd4bshlr.swift:71: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b26274e3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b26271dab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b26271da988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b26271d97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzd4bshlr                        0x000056416df8a7a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b26276cf460 __libc_start_main +
    245

    6    tmpzd4bshlr                        0x000056416df8a2c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660013958
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var result: [String] = []\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            result.append(\"A+\")\n        } else\
    \ if grade >= 3.7 {\n            result.append(\"A\")\n        } else if grade\
    \ >= 3.3 {\n            result.append(\"A-\")\n        } else if grade >= 3.0\
    \ {\n            result.append(\"B+\")\n        } else if grade >= 2.7 {\n   \
    \         result.append(\"B\")\n        } else if grade >= 2.3 {\n           \
    \ result.append(\"B-\")\n        } else if grade >= 2.0 {\n            result.append(\"\
    C+\")\n        } else if grade >= 1.7 {\n            result.append(\"C\")\n  \
    \      } else if grade >= 1.3 {\n            result.append(\"C-\")\n        }\
    \ else if grade >= 1.0 {\n            result.append(\"D+\")\n        } else if\
    \ grade >= 0.7 {\n            result.append(\"D\")\n        } else if grade >=\
    \ 0.0 {\n            result.append(\"D-\")\n        } else {\n            result.append(\"\
    E\")\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2])\
    \ == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpdri1lvgf/tmpdri1lvgf.swift:71: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b295682ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2956525b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2956525988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b29565247b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdri1lvgf                        0x000055e4cf0bd7a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b2956a1a460 __libc_start_main +
    245

    6    tmpdri1lvgf                        0x000055e4cf0bd2c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660013958
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades: [String] = []\n    for grade\
    \ in grades {\n        if grade >= 4.0 {\n            letterGrades.append(\"A+\"\
    )\n        } else if grade >= 3.7 {\n            letterGrades.append(\"A\")\n\
    \        } else if grade >= 3.3 {\n            letterGrades.append(\"A-\")\n \
    \       } else if grade >= 3.0 {\n            letterGrades.append(\"B+\")\n  \
    \      } else if grade >= 2.7 {\n            letterGrades.append(\"B\")\n    \
    \    } else if grade >= 2.3 {\n            letterGrades.append(\"B-\")\n     \
    \   } else if grade >= 2.0 {\n            letterGrades.append(\"C+\")\n      \
    \  } else if grade >= 1.7 {\n            letterGrades.append(\"C\")\n        }\
    \ else if grade >= 1.3 {\n            letterGrades.append(\"C-\")\n        } else\
    \ if grade >= 1.0 {\n            letterGrades.append(\"D+\")\n        } else if\
    \ grade >= 0.7 {\n            letterGrades.append(\"D\")\n        } else if grade\
    \ >= 0.0 {\n            letterGrades.append(\"D-\")\n        } else {\n      \
    \      letterGrades.append(\"E\")\n        }\n    }\n    return letterGrades\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpzd4bshlr/tmpzd4bshlr.swift:71: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b26274e3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b26271dab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b26271da988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b26271d97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzd4bshlr                        0x000056416df8a7a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b26276cf460 __libc_start_main +
    245

    6    tmpzd4bshlr                        0x000056416df8a2c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660013958
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades: [String] = []\n    for grade\
    \ in grades {\n        if grade >= 4.0 {\n            letterGrades.append(\"A+\"\
    )\n        } else if grade >= 3.7 {\n            letterGrades.append(\"A\")\n\
    \        } else if grade >= 3.3 {\n            letterGrades.append(\"A-\")\n \
    \       } else if grade >= 3.0 {\n            letterGrades.append(\"B+\")\n  \
    \      } else if grade >= 2.7 {\n            letterGrades.append(\"B\")\n    \
    \    } else if grade >= 2.3 {\n            letterGrades.append(\"B-\")\n     \
    \   } else if grade >= 2.0 {\n            letterGrades.append(\"C+\")\n      \
    \  } else if grade >= 1.7 {\n            letterGrades.append(\"C\")\n        }\
    \ else if grade >= 1.3 {\n            letterGrades.append(\"C-\")\n        } else\
    \ if grade >= 1.0 {\n            letterGrades.append(\"D+\")\n        } else if\
    \ grade >= 0.7 {\n            letterGrades.append(\"D\")\n        } else if grade\
    \ >= 0.0 {\n            letterGrades.append(\"D-\")\n        } else {\n      \
    \      letterGrades.append(\"E\")\n        }\n    }\n    return letterGrades\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpzd4bshlr/tmpzd4bshlr.swift:71: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b26274e3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b26271dab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b26271da988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b26271d97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzd4bshlr                        0x000056416df8a7a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b26276cf460 __libc_start_main +
    245

    6    tmpzd4bshlr                        0x000056416df8a2c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660013958
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades: [String] = []\n    for grade\
    \ in grades {\n        if grade >= 4.0 {\n            letterGrades.append(\"A+\"\
    )\n        } else if grade >= 3.7 {\n            letterGrades.append(\"A\")\n\
    \        } else if grade >= 3.3 {\n            letterGrades.append(\"A-\")\n \
    \       } else if grade >= 3.0 {\n            letterGrades.append(\"B+\")\n  \
    \      } else if grade >= 2.7 {\n            letterGrades.append(\"B\")\n    \
    \    } else if grade >= 2.3 {\n            letterGrades.append(\"B-\")\n     \
    \   } else if grade >= 2.0 {\n            letterGrades.append(\"C+\")\n      \
    \  } else if grade >= 1.7 {\n            letterGrades.append(\"C\")\n        }\
    \ else if grade >= 1.3 {\n            letterGrades.append(\"C-\")\n        } else\
    \ if grade >= 1.0 {\n            letterGrades.append(\"D+\")\n        } else if\
    \ grade >= 0.7 {\n            letterGrades.append(\"D\")\n        } else if grade\
    \ >= 0.0 {\n            letterGrades.append(\"D-\")\n        } else {\n      \
    \      letterGrades.append(\"E\")\n        }\n    }\n    return letterGrades\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpzd4bshlr/tmpzd4bshlr.swift:71: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b26274e3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b26271dab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b26271da988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b26271d97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzd4bshlr                        0x000056416df8a7a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b26276cf460 __libc_start_main +
    245

    6    tmpzd4bshlr                        0x000056416df8a2c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660013958
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades: [String] = []\n    for grade\
    \ in grades {\n        if grade >= 4.0 {\n            letterGrades.append(\"A+\"\
    )\n        } else if grade >= 3.7 {\n            letterGrades.append(\"A\")\n\
    \        } else if grade >= 3.3 {\n            letterGrades.append(\"A-\")\n \
    \       } else if grade >= 3.0 {\n            letterGrades.append(\"B+\")\n  \
    \      } else if grade >= 2.7 {\n            letterGrades.append(\"B\")\n    \
    \    } else if grade >= 2.3 {\n            letterGrades.append(\"B-\")\n     \
    \   } else if grade >= 2.0 {\n            letterGrades.append(\"C+\")\n      \
    \  } else if grade >= 1.7 {\n            letterGrades.append(\"C\")\n        }\
    \ else if grade >= 1.3 {\n            letterGrades.append(\"C-\")\n        } else\
    \ if grade >= 1.0 {\n            letterGrades.append(\"D+\")\n        } else if\
    \ grade >= 0.7 {\n            letterGrades.append(\"D\")\n        } else if grade\
    \ >= 0.0 {\n            letterGrades.append(\"D-\")\n        } else {\n      \
    \      letterGrades.append(\"E\")\n        }\n    }\n    return letterGrades\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpzd4bshlr/tmpzd4bshlr.swift:71: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b26274e3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b26271dab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b26271da988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b26271d97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzd4bshlr                        0x000056416df8a7a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b26276cf460 __libc_start_main +
    245

    6    tmpzd4bshlr                        0x000056416df8a2c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660013958
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades: [String] = []\n    for grade\
    \ in grades {\n        if grade >= 4.0 {\n            letterGrades.append(\"A+\"\
    )\n        } else if grade >= 3.7 {\n            letterGrades.append(\"A\")\n\
    \        } else if grade >= 3.3 {\n            letterGrades.append(\"A-\")\n \
    \       } else if grade >= 3.0 {\n            letterGrades.append(\"B+\")\n  \
    \      } else if grade >= 2.7 {\n            letterGrades.append(\"B\")\n    \
    \    } else if grade >= 2.3 {\n            letterGrades.append(\"B-\")\n     \
    \   } else if grade >= 2.0 {\n            letterGrades.append(\"C+\")\n      \
    \  } else if grade >= 1.7 {\n            letterGrades.append(\"C\")\n        }\
    \ else if grade >= 1.3 {\n            letterGrades.append(\"C-\")\n        } else\
    \ if grade >= 1.0 {\n            letterGrades.append(\"D+\")\n        } else if\
    \ grade >= 0.7 {\n            letterGrades.append(\"D\")\n        } else if grade\
    \ >= 0.0 {\n            letterGrades.append(\"D-\")\n        } else {\n      \
    \      letterGrades.append(\"E\")\n        }\n    }\n    return letterGrades\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpzd4bshlr/tmpzd4bshlr.swift:71: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b26274e3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b26271dab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b26271da988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b26271d97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzd4bshlr                        0x000056416df8a7a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b26276cf460 __libc_start_main +
    245

    6    tmpzd4bshlr                        0x000056416df8a2c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660013958
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var result: [String] = []\n    for grade in grades\
    \ {\n        switch grade {\n        case 4.0:\n            result.append(\"A+\"\
    )\n        case 3.7..<4.0:\n            result.append(\"A\")\n        case 3.3..<3.7:\n\
    \            result.append(\"A-\")\n        case 3.0..<3.3:\n            result.append(\"\
    B+\")\n        case 2.7..<3.0:\n            result.append(\"B\")\n        case\
    \ 2.3..<2.7:\n            result.append(\"B-\")\n        case 2.0..<2.3:\n   \
    \         result.append(\"C+\")\n        case 1.7..<2.0:\n            result.append(\"\
    C\")\n        case 1.3..<1.7:\n            result.append(\"C-\")\n        case\
    \ 1.0..<1.3:\n            result.append(\"D+\")\n        case 0.7..<1.0:\n   \
    \         result.append(\"D\")\n        case 0.0..<0.7:\n            result.append(\"\
    D-\")\n        case 0.0:\n            result.append(\"E\")\n        default:\n\
    \            result.append(\"Invalid\")\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpnvkt28oz/tmpnvkt28oz.swift:74: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8c0fd42c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8c0fa39b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8c0fa39988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8c0fa387b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnvkt28oz                        0x0000556dd690d8d6 <unavailable> + 6358

    5    libc.so.6                          0x00002b8c0ff2e460 __libc_start_main +
    245

    6    tmpnvkt28oz                        0x0000556dd690d3f9 <unavailable> + 5113

    '
  stdout: ''
  timestamp: 1660013958
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    // Your code here\n    var result = [String]()\n\
    \    for grade in grades {\n        if grade >= 4.0 {\n            result.append(\"\
    A+\")\n        } else if grade >= 3.7 {\n            result.append(\"A\")\n  \
    \      } else if grade >= 3.3 {\n            result.append(\"A-\")\n        }\
    \ else if grade >= 3.0 {\n            result.append(\"B+\")\n        } else if\
    \ grade >= 2.7 {\n            result.append(\"B\")\n        } else if grade >=\
    \ 2.3 {\n            result.append(\"B-\")\n        } else if grade >= 2.0 {\n\
    \            result.append(\"C+\")\n        } else if grade >= 1.7 {\n       \
    \     result.append(\"C\")\n        } else if grade >= 1.3 {\n            result.append(\"\
    C-\")\n        } else if grade >= 1.0 {\n            result.append(\"D+\")\n \
    \       } else if grade >= 0.7 {\n            result.append(\"D\")\n        }\
    \ else if grade >= 0.0 {\n            result.append(\"D-\")\n        } else {\n\
    \            result.append(\"E\")\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpv6dl88jv/tmpv6dl88jv.swift:72: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5c5393cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5c53633b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5c53633988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5c536327b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpv6dl88jv                        0x000055e674e5c7f6 <unavailable> + 6134

    5    libc.so.6                          0x00002b5c53b28460 __libc_start_main +
    245

    6    tmpv6dl88jv                        0x000055e674e5c319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1660013958
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades: [String] = []\n    for grade\
    \ in grades {\n        if grade >= 4.0 {\n            letterGrades.append(\"A+\"\
    )\n        } else if grade >= 3.7 {\n            letterGrades.append(\"A\")\n\
    \        } else if grade >= 3.3 {\n            letterGrades.append(\"A-\")\n \
    \       } else if grade >= 3.0 {\n            letterGrades.append(\"B+\")\n  \
    \      } else if grade >= 2.7 {\n            letterGrades.append(\"B\")\n    \
    \    } else if grade >= 2.3 {\n            letterGrades.append(\"B-\")\n     \
    \   } else if grade >= 2.0 {\n            letterGrades.append(\"C+\")\n      \
    \  } else if grade >= 1.7 {\n            letterGrades.append(\"C\")\n        }\
    \ else if grade >= 1.3 {\n            letterGrades.append(\"C-\")\n        } else\
    \ if grade >= 1.0 {\n            letterGrades.append(\"D+\")\n        } else if\
    \ grade >= 0.7 {\n            letterGrades.append(\"D\")\n        } else if grade\
    \ >= 0.0 {\n            letterGrades.append(\"D-\")\n        } else {\n      \
    \      letterGrades.append(\"E\")\n        }\n    }\n    return letterGrades\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpzd4bshlr/tmpzd4bshlr.swift:71: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b26274e3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b26271dab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b26271da988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b26271d97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzd4bshlr                        0x000056416df8a7a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b26276cf460 __libc_start_main +
    245

    6    tmpzd4bshlr                        0x000056416df8a2c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660013958
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades: [String] = []\n    for grade\
    \ in grades {\n        if grade >= 4.0 {\n            letterGrades.append(\"A+\"\
    )\n        } else if grade >= 3.7 {\n            letterGrades.append(\"A\")\n\
    \        } else if grade >= 3.3 {\n            letterGrades.append(\"A-\")\n \
    \       } else if grade >= 3.0 {\n            letterGrades.append(\"B+\")\n  \
    \      } else if grade >= 2.7 {\n            letterGrades.append(\"B\")\n    \
    \    } else if grade >= 2.3 {\n            letterGrades.append(\"B-\")\n     \
    \   } else if grade >= 2.0 {\n            letterGrades.append(\"C+\")\n      \
    \  } else if grade >= 1.7 {\n            letterGrades.append(\"C\")\n        }\
    \ else if grade >= 1.3 {\n            letterGrades.append(\"C-\")\n        } else\
    \ if grade >= 1.0 {\n            letterGrades.append(\"D+\")\n        } else if\
    \ grade >= 0.7 {\n            letterGrades.append(\"D\")\n        } else if grade\
    \ >= 0.0 {\n            letterGrades.append(\"D-\")\n        } else {\n      \
    \      letterGrades.append(\"E\")\n        }\n    }\n    return letterGrades\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpzd4bshlr/tmpzd4bshlr.swift:71: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b26274e3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b26271dab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b26271da988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b26271d97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzd4bshlr                        0x000056416df8a7a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b26276cf460 __libc_start_main +
    245

    6    tmpzd4bshlr                        0x000056416df8a2c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660013958
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades: [String] = []\n    for grade\
    \ in grades {\n        if grade >= 4.0 {\n            letterGrades.append(\"A+\"\
    )\n        } else if grade >= 3.7 {\n            letterGrades.append(\"A\")\n\
    \        } else if grade >= 3.3 {\n            letterGrades.append(\"A-\")\n \
    \       } else if grade >= 3.0 {\n            letterGrades.append(\"B+\")\n  \
    \      } else if grade >= 2.7 {\n            letterGrades.append(\"B\")\n    \
    \    } else if grade >= 2.3 {\n            letterGrades.append(\"B-\")\n     \
    \   } else if grade >= 2.0 {\n            letterGrades.append(\"C+\")\n      \
    \  } else if grade >= 1.7 {\n            letterGrades.append(\"C\")\n        }\
    \ else if grade >= 1.3 {\n            letterGrades.append(\"C-\")\n        } else\
    \ if grade >= 1.0 {\n            letterGrades.append(\"D+\")\n        } else if\
    \ grade >= 0.7 {\n            letterGrades.append(\"D\")\n        } else if grade\
    \ >= 0.0 {\n            letterGrades.append(\"D-\")\n        } else {\n      \
    \      letterGrades.append(\"E\")\n        }\n    }\n    return letterGrades\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpzd4bshlr/tmpzd4bshlr.swift:71: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b26274e3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b26271dab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b26271da988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b26271d97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzd4bshlr                        0x000056416df8a7a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b26276cf460 __libc_start_main +
    245

    6    tmpzd4bshlr                        0x000056416df8a2c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660013958
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades: [String] = []\n    for grade\
    \ in grades {\n        if grade >= 4.0 {\n            letterGrades.append(\"A+\"\
    )\n        } else if grade >= 3.7 {\n            letterGrades.append(\"A\")\n\
    \        } else if grade >= 3.3 {\n            letterGrades.append(\"A-\")\n \
    \       } else if grade >= 3.0 {\n            letterGrades.append(\"B+\")\n  \
    \      } else if grade >= 2.7 {\n            letterGrades.append(\"B\")\n    \
    \    } else if grade >= 2.3 {\n            letterGrades.append(\"B-\")\n     \
    \   } else if grade >= 2.0 {\n            letterGrades.append(\"C+\")\n      \
    \  } else if grade >= 1.7 {\n            letterGrades.append(\"C\")\n        }\
    \ else if grade >= 1.3 {\n            letterGrades.append(\"C-\")\n        } else\
    \ if grade >= 1.0 {\n            letterGrades.append(\"D+\")\n        } else if\
    \ grade >= 0.7 {\n            letterGrades.append(\"D\")\n        } else if grade\
    \ >= 0.0 {\n            letterGrades.append(\"D-\")\n        } else {\n      \
    \      letterGrades.append(\"E\")\n        }\n    }\n    return letterGrades\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpzd4bshlr/tmpzd4bshlr.swift:71: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b26274e3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b26271dab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b26271da988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b26271d97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzd4bshlr                        0x000056416df8a7a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b26276cf460 __libc_start_main +
    245

    6    tmpzd4bshlr                        0x000056416df8a2c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660013958
- exit_code: 0
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var result: [String] = []\n    for grade in grades\
    \ {\n        if grade == 4.0 {\n            result.append(\"A+\")\n        } else\
    \ if grade > 3.7 {\n            result.append(\"A\")\n        } else if grade\
    \ > 3.3 {\n            result.append(\"A-\")\n        } else if grade > 3.0 {\n\
    \            result.append(\"B+\")\n        } else if grade > 2.7 {\n        \
    \    result.append(\"B\")\n        } else if grade > 2.3 {\n            result.append(\"\
    B-\")\n        } else if grade > 2.0 {\n            result.append(\"C+\")\n  \
    \      } else if grade > 1.7 {\n            result.append(\"C\")\n        } else\
    \ if grade > 1.3 {\n            result.append(\"C-\")\n        } else if grade\
    \ > 1.0 {\n            result.append(\"D+\")\n        } else if grade > 0.7 {\n\
    \            result.append(\"D\")\n        } else if grade > 0.0 {\n         \
    \   result.append(\"D-\")\n        } else {\n            result.append(\"E\")\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2]) == [\"\
    D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013958
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    // your code here\n    var result: [String] = []\n\
    \    for grade in grades {\n        if grade >= 4.0 {\n            result.append(\"\
    A+\")\n        } else if grade >= 3.7 {\n            result.append(\"A\")\n  \
    \      } else if grade >= 3.3 {\n            result.append(\"A-\")\n        }\
    \ else if grade >= 3.0 {\n            result.append(\"B+\")\n        } else if\
    \ grade >= 2.7 {\n            result.append(\"B\")\n        } else if grade >=\
    \ 2.3 {\n            result.append(\"B-\")\n        } else if grade >= 2.0 {\n\
    \            result.append(\"C+\")\n        } else if grade >= 1.7 {\n       \
    \     result.append(\"C\")\n        } else if grade >= 1.3 {\n            result.append(\"\
    C-\")\n        } else if grade >= 1.0 {\n            result.append(\"D+\")\n \
    \       } else if grade >= 0.7 {\n            result.append(\"D\")\n        }\
    \ else if grade >= 0.0 {\n            result.append(\"D-\")\n        } else {\n\
    \            result.append(\"E\")\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpmq3vxix6/tmpmq3vxix6.swift:72: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8574486c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b857417db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b857417d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b857417c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmq3vxix6                        0x00005586e1f2a7a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b8574672460 __libc_start_main +
    245

    6    tmpmq3vxix6                        0x00005586e1f2a2c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660013958
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    // Your code here\n    return []\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5])\
    \ == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmp2q46o5co/tmp2q46o5co.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b453c021c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b453bd18b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b453bd18988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b453bd177b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2q46o5co                        0x000056375593d5e6 <unavailable> + 5606

    5    libc.so.6                          0x00002b453c20d460 __libc_start_main +
    245

    6    tmp2q46o5co                        0x000056375593d109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660013958
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letter_grades: [String] = []\n    for grade\
    \ in grades {\n        if grade >= 4.0 {\n            letter_grades.append(\"\
    A+\")\n        } else if grade >= 3.7 {\n            letter_grades.append(\"A\"\
    )\n        } else if grade >= 3.3 {\n            letter_grades.append(\"A-\")\n\
    \        } else if grade >= 3.0 {\n            letter_grades.append(\"B+\")\n\
    \        } else if grade >= 2.7 {\n            letter_grades.append(\"B\")\n \
    \       } else if grade >= 2.3 {\n            letter_grades.append(\"B-\")\n \
    \       } else if grade >= 2.0 {\n            letter_grades.append(\"C+\")\n \
    \       } else if grade >= 1.7 {\n            letter_grades.append(\"C\")\n  \
    \      } else if grade >= 1.3 {\n            letter_grades.append(\"C-\")\n  \
    \      } else if grade >= 1.0 {\n            letter_grades.append(\"D+\")\n  \
    \      } else if grade >= 0.7 {\n            letter_grades.append(\"D\")\n   \
    \     } else if grade >= 0.0 {\n            letter_grades.append(\"D-\")\n   \
    \     } else {\n            letter_grades.append(\"E\")\n        }\n    }\n  \
    \  return letter_grades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpg5y0zgra/tmpg5y0zgra.swift:71: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8d221f6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8d21eedb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8d21eed988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8d21eec7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpg5y0zgra                        0x0000556d548d07a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b8d223e2460 __libc_start_main +
    245

    6    tmpg5y0zgra                        0x0000556d548d02c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660013958
- exit_code: 0
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades: [String] = []\n    for grade\
    \ in grades {\n        if grade == 4.0 {\n            letterGrades.append(\"A+\"\
    )\n        } else if grade > 3.7 {\n            letterGrades.append(\"A\")\n \
    \       } else if grade > 3.3 {\n            letterGrades.append(\"A-\")\n   \
    \     } else if grade > 3.0 {\n            letterGrades.append(\"B+\")\n     \
    \   } else if grade > 2.7 {\n            letterGrades.append(\"B\")\n        }\
    \ else if grade > 2.3 {\n            letterGrades.append(\"B-\")\n        } else\
    \ if grade > 2.0 {\n            letterGrades.append(\"C+\")\n        } else if\
    \ grade > 1.7 {\n            letterGrades.append(\"C\")\n        } else if grade\
    \ > 1.3 {\n            letterGrades.append(\"C-\")\n        } else if grade >\
    \ 1.0 {\n            letterGrades.append(\"D+\")\n        } else if grade > 0.7\
    \ {\n            letterGrades.append(\"D\")\n        } else if grade > 0.0 {\n\
    \            letterGrades.append(\"D-\")\n        } else {\n            letterGrades.append(\"\
    E\")\n        }\n    }\n    return letterGrades\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2])\
    \ == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013958
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letter_grades: [String] = []\n    for grade\
    \ in grades {\n        if grade >= 4.0 {\n            letter_grades.append(\"\
    A+\")\n        } else if grade >= 3.7 {\n            letter_grades.append(\"A\"\
    )\n        } else if grade >= 3.3 {\n            letter_grades.append(\"A-\")\n\
    \        } else if grade >= 3.0 {\n            letter_grades.append(\"B+\")\n\
    \        } else if grade >= 2.7 {\n            letter_grades.append(\"B\")\n \
    \       } else if grade >= 2.3 {\n            letter_grades.append(\"B-\")\n \
    \       } else if grade >= 2.0 {\n            letter_grades.append(\"C+\")\n \
    \       } else if grade >= 1.7 {\n            letter_grades.append(\"C\")\n  \
    \      } else if grade >= 1.3 {\n            letter_grades.append(\"C-\")\n  \
    \      } else if grade >= 1.0 {\n            letter_grades.append(\"D+\")\n  \
    \      } else if grade >= 0.7 {\n            letter_grades.append(\"D\")\n   \
    \     } else if grade >= 0.0 {\n            letter_grades.append(\"D-\")\n   \
    \     } else {\n            letter_grades.append(\"E\")\n        }\n    }\n  \
    \  return letter_grades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpg5y0zgra/tmpg5y0zgra.swift:71: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8d221f6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8d21eedb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8d21eed988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8d21eec7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpg5y0zgra                        0x0000556d548d07a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b8d223e2460 __libc_start_main +
    245

    6    tmpg5y0zgra                        0x0000556d548d02c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660013958
- exit_code: 0
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letter_grades = [String]()\n    for grade in\
    \ grades {\n        if grade == 4.0 {\n            letter_grades.append(\"A+\"\
    )\n        } else if grade > 3.7 {\n            letter_grades.append(\"A\")\n\
    \        } else if grade > 3.3 {\n            letter_grades.append(\"A-\")\n \
    \       } else if grade > 3.0 {\n            letter_grades.append(\"B+\")\n  \
    \      } else if grade > 2.7 {\n            letter_grades.append(\"B\")\n    \
    \    } else if grade > 2.3 {\n            letter_grades.append(\"B-\")\n     \
    \   } else if grade > 2.0 {\n            letter_grades.append(\"C+\")\n      \
    \  } else if grade > 1.7 {\n            letter_grades.append(\"C\")\n        }\
    \ else if grade > 1.3 {\n            letter_grades.append(\"C-\")\n        } else\
    \ if grade > 1.0 {\n            letter_grades.append(\"D+\")\n        } else if\
    \ grade > 0.7 {\n            letter_grades.append(\"D\")\n        } else if grade\
    \ > 0.0 {\n            letter_grades.append(\"D-\")\n        } else {\n      \
    \      letter_grades.append(\"E\")\n        }\n    }\n    return letter_grades\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013958
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letter_grades = [String]()\n    for grade in\
    \ grades {\n        if grade >= 4.0 {\n            letter_grades.append(\"A+\"\
    )\n        } else if grade >= 3.7 {\n            letter_grades.append(\"A\")\n\
    \        } else if grade >= 3.3 {\n            letter_grades.append(\"A-\")\n\
    \        } else if grade >= 3.0 {\n            letter_grades.append(\"B+\")\n\
    \        } else if grade >= 2.7 {\n            letter_grades.append(\"B\")\n \
    \       } else if grade >= 2.3 {\n            letter_grades.append(\"B-\")\n \
    \       } else if grade >= 2.0 {\n            letter_grades.append(\"C+\")\n \
    \       } else if grade >= 1.7 {\n            letter_grades.append(\"C\")\n  \
    \      } else if grade >= 1.3 {\n            letter_grades.append(\"C-\")\n  \
    \      } else if grade >= 1.0 {\n            letter_grades.append(\"D+\")\n  \
    \      } else if grade >= 0.7 {\n            letter_grades.append(\"D\")\n   \
    \     } else if grade >= 0.0 {\n            letter_grades.append(\"D-\")\n   \
    \     } else {\n            letter_grades.append(\"E\")\n        }\n    }\n  \
    \  return letter_grades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpxz159fh_/tmpxz159fh_.swift:71: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8a9995ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8a99651b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8a99651988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8a996507b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxz159fh_                        0x000055e14d06c7f6 <unavailable> + 6134

    5    libc.so.6                          0x00002b8a99b46460 __libc_start_main +
    245

    6    tmpxz159fh_                        0x000055e14d06c319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1660013958
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var result: [String] = []\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            result.append(\"A+\")\n        } else\
    \ if grade >= 3.7 {\n            result.append(\"A\")\n        } else if grade\
    \ >= 3.3 {\n            result.append(\"A-\")\n        } else if grade >= 3.0\
    \ {\n            result.append(\"B+\")\n        } else if grade >= 2.7 {\n   \
    \         result.append(\"B\")\n        } else if grade >= 2.3 {\n           \
    \ result.append(\"B-\")\n        } else if grade >= 2.0 {\n            result.append(\"\
    C+\")\n        } else if grade >= 1.7 {\n            result.append(\"C\")\n  \
    \      } else if grade >= 1.3 {\n            result.append(\"C-\")\n        }\
    \ else if grade >= 1.0 {\n            result.append(\"D+\")\n        } else if\
    \ grade >= 0.7 {\n            result.append(\"D\")\n        } else if grade >=\
    \ 0.0 {\n            result.append(\"D-\")\n        } else {\n            result.append(\"\
    E\")\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2])\
    \ == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpdri1lvgf/tmpdri1lvgf.swift:71: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b295682ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2956525b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2956525988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b29565247b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdri1lvgf                        0x000055e4cf0bd7a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b2956a1a460 __libc_start_main +
    245

    6    tmpdri1lvgf                        0x000055e4cf0bd2c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660013958
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letter_grades: [String] = []\n    for grade\
    \ in grades {\n        if grade >= 4.0 {\n            letter_grades.append(\"\
    A+\")\n        } else if grade >= 3.7 {\n            letter_grades.append(\"A\"\
    )\n        } else if grade >= 3.3 {\n            letter_grades.append(\"A-\")\n\
    \        } else if grade >= 3.0 {\n            letter_grades.append(\"B+\")\n\
    \        } else if grade >= 2.7 {\n            letter_grades.append(\"B\")\n \
    \       } else if grade >= 2.3 {\n            letter_grades.append(\"B-\")\n \
    \       } else if grade >= 2.0 {\n            letter_grades.append(\"C+\")\n \
    \       } else if grade >= 1.7 {\n            letter_grades.append(\"C\")\n  \
    \      } else if grade >= 1.3 {\n            letter_grades.append(\"C-\")\n  \
    \      } else if grade >= 1.0 {\n            letter_grades.append(\"D+\")\n  \
    \      } else if grade >= 0.7 {\n            letter_grades.append(\"D\")\n   \
    \     } else if grade >= 0.0 {\n            letter_grades.append(\"D-\")\n   \
    \     } else {\n            letter_grades.append(\"E\")\n        }\n    }\n  \
    \  return letter_grades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpg5y0zgra/tmpg5y0zgra.swift:71: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8d221f6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8d21eedb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8d21eed988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8d21eec7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpg5y0zgra                        0x0000556d548d07a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b8d223e2460 __libc_start_main +
    245

    6    tmpg5y0zgra                        0x0000556d548d02c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660013958
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var result = [String]()\n    for grade in grades\
    \ {\n        switch grade {\n        case 4.0:\n            result.append(\"A+\"\
    )\n        case 3.7..<4.0:\n            result.append(\"A\")\n        case 3.3..<3.7:\n\
    \            result.append(\"A-\")\n        case 3.0..<3.3:\n            result.append(\"\
    B+\")\n        case 2.7..<3.0:\n            result.append(\"B\")\n        case\
    \ 2.3..<2.7:\n            result.append(\"B-\")\n        case 2.0..<2.3:\n   \
    \         result.append(\"C+\")\n        case 1.7..<2.0:\n            result.append(\"\
    C\")\n        case 1.3..<1.7:\n            result.append(\"C-\")\n        case\
    \ 1.0..<1.3:\n            result.append(\"D+\")\n        case 0.7..<1.0:\n   \
    \         result.append(\"D\")\n        case 0.0..<0.7:\n            result.append(\"\
    D-\")\n        case 0.0:\n            result.append(\"E\")\n        default:\n\
    \            result.append(\"Invalid grade\")\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmp0xe8rb1k/tmp0xe8rb1k.swift:74: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b991a340c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b991a037b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b991a037988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b991a0367b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0xe8rb1k                        0x000055fcfcd75926 <unavailable> + 6438

    5    libc.so.6                          0x00002b991a52c460 __libc_start_main +
    245

    6    tmp0xe8rb1k                        0x000055fcfcd75449 <unavailable> + 5193

    '
  stdout: ''
  timestamp: 1660013958
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades: [String] = []\n    for grade\
    \ in grades {\n        switch grade {\n        case 4.0:\n            letterGrades.append(\"\
    A+\")\n        case 3.7..<4.0:\n            letterGrades.append(\"A\")\n     \
    \   case 3.3..<3.7:\n            letterGrades.append(\"A-\")\n        case 3.0..<3.3:\n\
    \            letterGrades.append(\"B+\")\n        case 2.7..<3.0:\n          \
    \  letterGrades.append(\"B\")\n        case 2.3..<2.7:\n            letterGrades.append(\"\
    B-\")\n        case 2.0..<2.3:\n            letterGrades.append(\"C+\")\n    \
    \    case 1.7..<2.0:\n            letterGrades.append(\"C\")\n        case 1.3..<1.7:\n\
    \            letterGrades.append(\"C-\")\n        case 1.0..<1.3:\n          \
    \  letterGrades.append(\"D+\")\n        case 0.7..<1.0:\n            letterGrades.append(\"\
    D\")\n        case 0.0..<0.7:\n            letterGrades.append(\"D-\")\n     \
    \   case 0.0:\n            letterGrades.append(\"E\")\n        default:\n    \
    \        letterGrades.append(\"Invalid Grade\")\n        }\n    }\n    return\
    \ letterGrades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmp4hh5_mp9/tmp4hh5_mp9.swift:74: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab7a9526c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab7a921db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab7a921d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab7a921c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4hh5_mp9                        0x000055c09c0a18d6 <unavailable> + 6358

    5    libc.so.6                          0x00002ab7a9712460 __libc_start_main +
    245

    6    tmp4hh5_mp9                        0x000055c09c0a13f9 <unavailable> + 5113

    '
  stdout: ''
  timestamp: 1660013958
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades: [String] = []\n    for grade\
    \ in grades {\n        switch grade {\n        case 4.0:\n            letterGrades.append(\"\
    A+\")\n        case 3.7..<4.0:\n            letterGrades.append(\"A\")\n     \
    \   case 3.3..<3.7:\n            letterGrades.append(\"A-\")\n        case 3.0..<3.3:\n\
    \            letterGrades.append(\"B+\")\n        case 2.7..<3.0:\n          \
    \  letterGrades.append(\"B\")\n        case 2.3..<2.7:\n            letterGrades.append(\"\
    B-\")\n        case 2.0..<2.3:\n            letterGrades.append(\"C+\")\n    \
    \    case 1.7..<2.0:\n            letterGrades.append(\"C\")\n        case 1.3..<1.7:\n\
    \            letterGrades.append(\"C-\")\n        case 1.0..<1.3:\n          \
    \  letterGrades.append(\"D+\")\n        case 0.7..<1.0:\n            letterGrades.append(\"\
    D\")\n        case 0.0..<0.7:\n            letterGrades.append(\"D-\")\n     \
    \   case 0.0:\n            letterGrades.append(\"E\")\n        default:\n    \
    \        letterGrades.append(\"Invalid\")\n        }\n    }\n    return letterGrades\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmp1obexfzp/tmp1obexfzp.swift:74: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad3ab8d3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad3ab5cab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad3ab5ca988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad3ab5c97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1obexfzp                        0x00005627f2fe88d6 <unavailable> + 6358

    5    libc.so.6                          0x00002ad3ababf460 __libc_start_main +
    245

    6    tmp1obexfzp                        0x00005627f2fe83f9 <unavailable> + 5113

    '
  stdout: ''
  timestamp: 1660013958
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades: [String] = []\n    for grade\
    \ in grades {\n        if grade >= 4.0 {\n            letterGrades.append(\"A+\"\
    )\n        } else if grade >= 3.7 {\n            letterGrades.append(\"A\")\n\
    \        } else if grade >= 3.3 {\n            letterGrades.append(\"A-\")\n \
    \       } else if grade >= 3.0 {\n            letterGrades.append(\"B+\")\n  \
    \      } else if grade >= 2.7 {\n            letterGrades.append(\"B\")\n    \
    \    } else if grade >= 2.3 {\n            letterGrades.append(\"B-\")\n     \
    \   } else if grade >= 2.0 {\n            letterGrades.append(\"C+\")\n      \
    \  } else if grade >= 1.7 {\n            letterGrades.append(\"C\")\n        }\
    \ else if grade >= 1.3 {\n            letterGrades.append(\"C-\")\n        } else\
    \ if grade >= 1.0 {\n            letterGrades.append(\"D+\")\n        } else if\
    \ grade >= 0.7 {\n            letterGrades.append(\"D\")\n        } else if grade\
    \ >= 0.0 {\n            letterGrades.append(\"D-\")\n        } else {\n      \
    \      letterGrades.append(\"E\")\n        }\n    }\n    return letterGrades\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpzd4bshlr/tmpzd4bshlr.swift:71: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b26274e3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b26271dab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b26271da988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b26271d97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzd4bshlr                        0x000056416df8a7a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b26276cf460 __libc_start_main +
    245

    6    tmpzd4bshlr                        0x000056416df8a2c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660013958
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades: [String] = []\n    for grade\
    \ in grades {\n        if grade >= 4.0 {\n            letterGrades.append(\"A+\"\
    )\n        } else if grade >= 3.7 {\n            letterGrades.append(\"A\")\n\
    \        } else if grade >= 3.3 {\n            letterGrades.append(\"A-\")\n \
    \       } else if grade >= 3.0 {\n            letterGrades.append(\"B+\")\n  \
    \      } else if grade >= 2.7 {\n            letterGrades.append(\"B\")\n    \
    \    } else if grade >= 2.3 {\n            letterGrades.append(\"B-\")\n     \
    \   } else if grade >= 2.0 {\n            letterGrades.append(\"C+\")\n      \
    \  } else if grade >= 1.7 {\n            letterGrades.append(\"C\")\n        }\
    \ else if grade >= 1.3 {\n            letterGrades.append(\"C-\")\n        } else\
    \ if grade >= 1.0 {\n            letterGrades.append(\"D+\")\n        } else if\
    \ grade >= 0.7 {\n            letterGrades.append(\"D\")\n        } else if grade\
    \ >= 0.0 {\n            letterGrades.append(\"D-\")\n        } else {\n      \
    \      letterGrades.append(\"E\")\n        }\n    }\n    return letterGrades\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpzd4bshlr/tmpzd4bshlr.swift:71: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b26274e3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b26271dab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b26271da988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b26271d97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzd4bshlr                        0x000056416df8a7a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b26276cf460 __libc_start_main +
    245

    6    tmpzd4bshlr                        0x000056416df8a2c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660013958
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var result: [String] = []\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            result.append(\"A+\")\n        } else\
    \ if grade >= 3.7 {\n            result.append(\"A\")\n        } else if grade\
    \ >= 3.3 {\n            result.append(\"A-\")\n        } else if grade >= 3.0\
    \ {\n            result.append(\"B+\")\n        } else if grade >= 2.7 {\n   \
    \         result.append(\"B\")\n        } else if grade >= 2.3 {\n           \
    \ result.append(\"B-\")\n        } else if grade >= 2.0 {\n            result.append(\"\
    C+\")\n        } else if grade >= 1.7 {\n            result.append(\"C\")\n  \
    \      } else if grade >= 1.3 {\n            result.append(\"C-\")\n        }\
    \ else if grade >= 1.0 {\n            result.append(\"D+\")\n        } else if\
    \ grade >= 0.7 {\n            result.append(\"D\")\n        } else if grade >=\
    \ 0.0 {\n            result.append(\"D-\")\n        } else {\n            result.append(\"\
    E\")\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2])\
    \ == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpdri1lvgf/tmpdri1lvgf.swift:71: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b295682ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2956525b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2956525988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b29565247b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdri1lvgf                        0x000055e4cf0bd7a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b2956a1a460 __libc_start_main +
    245

    6    tmpdri1lvgf                        0x000055e4cf0bd2c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660013958
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades: [String] = []\n    for grade\
    \ in grades {\n        if grade >= 4.0 {\n            letterGrades.append(\"A+\"\
    )\n        } else if grade >= 3.7 {\n            letterGrades.append(\"A\")\n\
    \        } else if grade >= 3.3 {\n            letterGrades.append(\"A-\")\n \
    \       } else if grade >= 3.0 {\n            letterGrades.append(\"B+\")\n  \
    \      } else if grade >= 2.7 {\n            letterGrades.append(\"B\")\n    \
    \    } else if grade >= 2.3 {\n            letterGrades.append(\"B-\")\n     \
    \   } else if grade >= 2.0 {\n            letterGrades.append(\"C+\")\n      \
    \  } else if grade >= 1.7 {\n            letterGrades.append(\"C\")\n        }\
    \ else if grade >= 1.3 {\n            letterGrades.append(\"C-\")\n        } else\
    \ if grade >= 1.0 {\n            letterGrades.append(\"D+\")\n        } else if\
    \ grade >= 0.7 {\n            letterGrades.append(\"D\")\n        } else if grade\
    \ >= 0.0 {\n            letterGrades.append(\"D-\")\n        } else {\n      \
    \      letterGrades.append(\"E\")\n        }\n    }\n    return letterGrades\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpzd4bshlr/tmpzd4bshlr.swift:71: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b26274e3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b26271dab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b26271da988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b26271d97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzd4bshlr                        0x000056416df8a7a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b26276cf460 __libc_start_main +
    245

    6    tmpzd4bshlr                        0x000056416df8a2c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660013958
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades: [String] = []\n    for grade\
    \ in grades {\n        if grade >= 4.0 {\n            letterGrades.append(\"A+\"\
    )\n        } else if grade >= 3.7 {\n            letterGrades.append(\"A\")\n\
    \        } else if grade >= 3.3 {\n            letterGrades.append(\"A-\")\n \
    \       } else if grade >= 3.0 {\n            letterGrades.append(\"B+\")\n  \
    \      } else if grade >= 2.7 {\n            letterGrades.append(\"B\")\n    \
    \    } else if grade >= 2.3 {\n            letterGrades.append(\"B-\")\n     \
    \   } else if grade >= 2.0 {\n            letterGrades.append(\"C+\")\n      \
    \  } else if grade >= 1.7 {\n            letterGrades.append(\"C\")\n        }\
    \ else if grade >= 1.3 {\n            letterGrades.append(\"C-\")\n        } else\
    \ if grade >= 1.0 {\n            letterGrades.append(\"D+\")\n        } else if\
    \ grade >= 0.7 {\n            letterGrades.append(\"D\")\n        } else if grade\
    \ >= 0.0 {\n            letterGrades.append(\"D-\")\n        } else {\n      \
    \      letterGrades.append(\"E\")\n        }\n    }\n    return letterGrades\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpzd4bshlr/tmpzd4bshlr.swift:71: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b26274e3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b26271dab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b26271da988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b26271d97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzd4bshlr                        0x000056416df8a7a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b26276cf460 __libc_start_main +
    245

    6    tmpzd4bshlr                        0x000056416df8a2c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660013958
- exit_code: 0
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades: [String] = []\n    for grade\
    \ in grades {\n        if grade == 4.0 {\n            letterGrades.append(\"A+\"\
    )\n        } else if grade > 3.7 {\n            letterGrades.append(\"A\")\n \
    \       } else if grade > 3.3 {\n            letterGrades.append(\"A-\")\n   \
    \     } else if grade > 3.0 {\n            letterGrades.append(\"B+\")\n     \
    \   } else if grade > 2.7 {\n            letterGrades.append(\"B\")\n        }\
    \ else if grade > 2.3 {\n            letterGrades.append(\"B-\")\n        } else\
    \ if grade > 2.0 {\n            letterGrades.append(\"C+\")\n        } else if\
    \ grade > 1.7 {\n            letterGrades.append(\"C\")\n        } else if grade\
    \ > 1.3 {\n            letterGrades.append(\"C-\")\n        } else if grade >\
    \ 1.0 {\n            letterGrades.append(\"D+\")\n        } else if grade > 0.7\
    \ {\n            letterGrades.append(\"D\")\n        } else if grade > 0.0 {\n\
    \            letterGrades.append(\"D-\")\n        } else {\n            letterGrades.append(\"\
    E\")\n        }\n    }\n    return letterGrades\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2])\
    \ == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013958
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades: [String] = []\n    for grade\
    \ in grades {\n        if grade >= 4.0 {\n            letterGrades.append(\"A+\"\
    )\n        } else if grade >= 3.7 {\n            letterGrades.append(\"A\")\n\
    \        } else if grade >= 3.3 {\n            letterGrades.append(\"A-\")\n \
    \       } else if grade >= 3.0 {\n            letterGrades.append(\"B+\")\n  \
    \      } else if grade >= 2.7 {\n            letterGrades.append(\"B\")\n    \
    \    } else if grade >= 2.3 {\n            letterGrades.append(\"B-\")\n     \
    \   } else if grade >= 2.0 {\n            letterGrades.append(\"C+\")\n      \
    \  } else if grade >= 1.7 {\n            letterGrades.append(\"C\")\n        }\
    \ else if grade >= 1.3 {\n            letterGrades.append(\"C-\")\n        } else\
    \ if grade >= 1.0 {\n            letterGrades.append(\"D+\")\n        } else if\
    \ grade >= 0.7 {\n            letterGrades.append(\"D\")\n        } else if grade\
    \ >= 0.0 {\n            letterGrades.append(\"D-\")\n        } else {\n      \
    \      letterGrades.append(\"E\")\n        }\n    }\n    return letterGrades\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpzd4bshlr/tmpzd4bshlr.swift:71: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b26274e3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b26271dab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b26271da988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b26271d97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzd4bshlr                        0x000056416df8a7a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b26276cf460 __libc_start_main +
    245

    6    tmpzd4bshlr                        0x000056416df8a2c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660013958
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades: [String] = []\n    for grade\
    \ in grades {\n        switch grade {\n        case 4.0:\n            letterGrades.append(\"\
    A+\")\n        case 3.7..<4.0:\n            letterGrades.append(\"A\")\n     \
    \   case 3.3..<3.7:\n            letterGrades.append(\"A-\")\n        case 3.0..<3.3:\n\
    \            letterGrades.append(\"B+\")\n        case 2.7..<3.0:\n          \
    \  letterGrades.append(\"B\")\n        case 2.3..<2.7:\n            letterGrades.append(\"\
    B-\")\n        case 2.0..<2.3:\n            letterGrades.append(\"C+\")\n    \
    \    case 1.7..<2.0:\n            letterGrades.append(\"C\")\n        case 1.3..<1.7:\n\
    \            letterGrades.append(\"C-\")\n        case 1.0..<1.3:\n          \
    \  letterGrades.append(\"D+\")\n        case 0.7..<1.0:\n            letterGrades.append(\"\
    D\")\n        case 0.0..<0.7:\n            letterGrades.append(\"D-\")\n     \
    \   default:\n            letterGrades.append(\"E\")\n        }\n    }\n    return\
    \ letterGrades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpsao889wi/tmpsao889wi.swift:72: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4658481c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4658178b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4658178988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b46581777b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsao889wi                        0x000055b5f8a108d6 <unavailable> + 6358

    5    libc.so.6                          0x00002b465866d460 __libc_start_main +
    245

    6    tmpsao889wi                        0x000055b5f8a103f9 <unavailable> + 5113

    '
  stdout: ''
  timestamp: 1660013958
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades: [String] = []\n    for grade\
    \ in grades {\n        switch grade {\n        case 4.0:\n            letterGrades.append(\"\
    A+\")\n        case 3.7..<4.0:\n            letterGrades.append(\"A\")\n     \
    \   case 3.3..<3.7:\n            letterGrades.append(\"A-\")\n        case 3.0..<3.3:\n\
    \            letterGrades.append(\"B+\")\n        case 2.7..<3.0:\n          \
    \  letterGrades.append(\"B\")\n        case 2.3..<2.7:\n            letterGrades.append(\"\
    B-\")\n        case 2.0..<2.3:\n            letterGrades.append(\"C+\")\n    \
    \    case 1.7..<2.0:\n            letterGrades.append(\"C\")\n        case 1.3..<1.7:\n\
    \            letterGrades.append(\"C-\")\n        case 1.0..<1.3:\n          \
    \  letterGrades.append(\"D+\")\n        case 0.7..<1.0:\n            letterGrades.append(\"\
    D\")\n        case 0.0..<0.7:\n            letterGrades.append(\"D-\")\n     \
    \   default:\n            letterGrades.append(\"E\")\n        }\n    }\n    return\
    \ letterGrades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpsao889wi/tmpsao889wi.swift:72: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4658481c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4658178b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4658178988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b46581777b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsao889wi                        0x000055b5f8a108d6 <unavailable> + 6358

    5    libc.so.6                          0x00002b465866d460 __libc_start_main +
    245

    6    tmpsao889wi                        0x000055b5f8a103f9 <unavailable> + 5113

    '
  stdout: ''
  timestamp: 1660013958
- exit_code: 0
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var result: [String] = []\n    for grade in grades\
    \ {\n        if grade == 4.0 {\n            result.append(\"A+\")\n        } else\
    \ if grade > 3.7 {\n            result.append(\"A\")\n        } else if grade\
    \ > 3.3 {\n            result.append(\"A-\")\n        } else if grade > 3.0 {\n\
    \            result.append(\"B+\")\n        } else if grade > 2.7 {\n        \
    \    result.append(\"B\")\n        } else if grade > 2.3 {\n            result.append(\"\
    B-\")\n        } else if grade > 2.0 {\n            result.append(\"C+\")\n  \
    \      } else if grade > 1.7 {\n            result.append(\"C\")\n        } else\
    \ if grade > 1.3 {\n            result.append(\"C-\")\n        } else if grade\
    \ > 1.0 {\n            result.append(\"D+\")\n        } else if grade > 0.7 {\n\
    \            result.append(\"D\")\n        } else if grade > 0.0 {\n         \
    \   result.append(\"D-\")\n        } else {\n            result.append(\"E\")\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2]) == [\"\
    D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013958
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var result: [String] = []\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            result.append(\"A+\")\n        } else\
    \ if grade >= 3.7 {\n            result.append(\"A\")\n        } else if grade\
    \ >= 3.3 {\n            result.append(\"A-\")\n        } else if grade >= 3.0\
    \ {\n            result.append(\"B+\")\n        } else if grade >= 2.7 {\n   \
    \         result.append(\"B\")\n        } else if grade >= 2.3 {\n           \
    \ result.append(\"B-\")\n        } else if grade >= 2.0 {\n            result.append(\"\
    C+\")\n        } else if grade >= 1.7 {\n            result.append(\"C\")\n  \
    \      } else if grade >= 1.3 {\n            result.append(\"C-\")\n        }\
    \ else if grade >= 1.0 {\n            result.append(\"D+\")\n        } else if\
    \ grade >= 0.7 {\n            result.append(\"D\")\n        } else if grade >=\
    \ 0.0 {\n            result.append(\"D-\")\n        } else {\n            result.append(\"\
    E\")\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2])\
    \ == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpdri1lvgf/tmpdri1lvgf.swift:71: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b295682ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2956525b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2956525988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b29565247b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdri1lvgf                        0x000055e4cf0bd7a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b2956a1a460 __libc_start_main +
    245

    6    tmpdri1lvgf                        0x000055e4cf0bd2c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660013958
- exit_code: 0
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades: [String] = []\n    for grade\
    \ in grades {\n        if grade == 4.0 {\n            letterGrades.append(\"A+\"\
    )\n        } else if grade > 3.7 {\n            letterGrades.append(\"A\")\n \
    \       } else if grade > 3.3 {\n            letterGrades.append(\"A-\")\n   \
    \     } else if grade > 3.0 {\n            letterGrades.append(\"B+\")\n     \
    \   } else if grade > 2.7 {\n            letterGrades.append(\"B\")\n        }\
    \ else if grade > 2.3 {\n            letterGrades.append(\"B-\")\n        } else\
    \ if grade > 2.0 {\n            letterGrades.append(\"C+\")\n        } else if\
    \ grade > 1.7 {\n            letterGrades.append(\"C\")\n        } else if grade\
    \ > 1.3 {\n            letterGrades.append(\"C-\")\n        } else if grade >\
    \ 1.0 {\n            letterGrades.append(\"D+\")\n        } else if grade > 0.7\
    \ {\n            letterGrades.append(\"D\")\n        } else if grade > 0.0 {\n\
    \            letterGrades.append(\"D-\")\n        } else {\n            letterGrades.append(\"\
    E\")\n        }\n    }\n    return letterGrades\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2])\
    \ == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013958
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letter_grades: [String] = []\n    for grade\
    \ in grades {\n        if grade >= 4.0 {\n            letter_grades.append(\"\
    A+\")\n        } else if grade >= 3.7 {\n            letter_grades.append(\"A\"\
    )\n        } else if grade >= 3.3 {\n            letter_grades.append(\"A-\")\n\
    \        } else if grade >= 3.0 {\n            letter_grades.append(\"B+\")\n\
    \        } else if grade >= 2.7 {\n            letter_grades.append(\"B\")\n \
    \       } else if grade >= 2.3 {\n            letter_grades.append(\"B-\")\n \
    \       } else if grade >= 2.0 {\n            letter_grades.append(\"C+\")\n \
    \       } else if grade >= 1.7 {\n            letter_grades.append(\"C\")\n  \
    \      } else if grade >= 1.3 {\n            letter_grades.append(\"C-\")\n  \
    \      } else if grade >= 1.0 {\n            letter_grades.append(\"D+\")\n  \
    \      } else if grade >= 0.7 {\n            letter_grades.append(\"D\")\n   \
    \     } else if grade >= 0.0 {\n            letter_grades.append(\"D-\")\n   \
    \     } else {\n            letter_grades.append(\"E\")\n        }\n    }\n  \
    \  return letter_grades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpg5y0zgra/tmpg5y0zgra.swift:71: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8d221f6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8d21eedb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8d21eed988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8d21eec7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpg5y0zgra                        0x0000556d548d07a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b8d223e2460 __libc_start_main +
    245

    6    tmpg5y0zgra                        0x0000556d548d02c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660013958
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades: [String] = []\n    for grade\
    \ in grades {\n        switch grade {\n        case 4.0:\n            letterGrades.append(\"\
    A+\")\n        case 3.7..<4.0:\n            letterGrades.append(\"A\")\n     \
    \   case 3.3..<3.7:\n            letterGrades.append(\"A-\")\n        case 3.0..<3.3:\n\
    \            letterGrades.append(\"B+\")\n        case 2.7..<3.0:\n          \
    \  letterGrades.append(\"B\")\n        case 2.3..<2.7:\n            letterGrades.append(\"\
    B-\")\n        case 2.0..<2.3:\n            letterGrades.append(\"C+\")\n    \
    \    case 1.7..<2.0:\n            letterGrades.append(\"C\")\n        case 1.3..<1.7:\n\
    \            letterGrades.append(\"C-\")\n        case 1.0..<1.3:\n          \
    \  letterGrades.append(\"D+\")\n        case 0.7..<1.0:\n            letterGrades.append(\"\
    D\")\n        case 0.0..<0.7:\n            letterGrades.append(\"D-\")\n     \
    \   default:\n            letterGrades.append(\"E\")\n        }\n    }\n    return\
    \ letterGrades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpsao889wi/tmpsao889wi.swift:72: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4658481c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4658178b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4658178988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b46581777b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsao889wi                        0x000055b5f8a108d6 <unavailable> + 6358

    5    libc.so.6                          0x00002b465866d460 __libc_start_main +
    245

    6    tmpsao889wi                        0x000055b5f8a103f9 <unavailable> + 5113

    '
  stdout: ''
  timestamp: 1660013958
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letter_grades: [String] = []\n    for grade\
    \ in grades {\n        switch grade {\n        case 4.0:\n            letter_grades.append(\"\
    A+\")\n        case 3.7..<4.0:\n            letter_grades.append(\"A\")\n    \
    \    case 3.3..<3.7:\n            letter_grades.append(\"A-\")\n        case 3.0..<3.3:\n\
    \            letter_grades.append(\"B+\")\n        case 2.7..<3.0:\n         \
    \   letter_grades.append(\"B\")\n        case 2.3..<2.7:\n            letter_grades.append(\"\
    B-\")\n        case 2.0..<2.3:\n            letter_grades.append(\"C+\")\n   \
    \     case 1.7..<2.0:\n            letter_grades.append(\"C\")\n        case 1.3..<1.7:\n\
    \            letter_grades.append(\"C-\")\n        case 1.0..<1.3:\n         \
    \   letter_grades.append(\"D+\")\n        case 0.7..<1.0:\n            letter_grades.append(\"\
    D\")\n        case 0.0..<0.7:\n            letter_grades.append(\"D-\")\n    \
    \    case 0.0:\n            letter_grades.append(\"E\")\n        default:\n  \
    \          letter_grades.append(\"Invalid\")\n        }\n    }\n    return letter_grades\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmp8l318ljb/tmp8l318ljb.swift:74: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8025a0fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8025706b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8025706988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b80257057b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8l318ljb                        0x0000561941b948d6 <unavailable> + 6358

    5    libc.so.6                          0x00002b8025bfb460 __libc_start_main +
    245

    6    tmp8l318ljb                        0x0000561941b943f9 <unavailable> + 5113

    '
  stdout: ''
  timestamp: 1660013958
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    return grades.map {\n        switch $0 {\n    \
    \    case 4.0:\n            return \"A+\"\n        case 3.7..<4.0:\n         \
    \   return \"A\"\n        case 3.3..<3.7:\n            return \"A-\"\n       \
    \ case 3.0..<3.3:\n            return \"B+\"\n        case 2.7..<3.0:\n      \
    \      return \"B\"\n        case 2.3..<2.7:\n            return \"B-\"\n    \
    \    case 2.0..<2.3:\n            return \"C+\"\n        case 1.7..<2.0:\n   \
    \         return \"C\"\n        case 1.3..<1.7:\n            return \"C-\"\n \
    \       case 1.0..<1.3:\n            return \"D+\"\n        case 0.7..<1.0:\n\
    \            return \"D\"\n        case 0.0..<0.7:\n            return \"D-\"\n\
    \        default:\n            return \"E\"\n        }\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5])\
    \ == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpu9lrvn39/tmpu9lrvn39.swift:70: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af95a8eac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af95a5e1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af95a5e1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af95a5e07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpu9lrvn39                        0x000055cbc1d7a7b6 <unavailable> + 6070

    5    libc.so.6                          0x00002af95aad6460 __libc_start_main +
    245

    6    tmpu9lrvn39                        0x000055cbc1d7a2d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1660013958
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades: [String] = []\n    for grade\
    \ in grades {\n        switch grade {\n        case 4.0:\n            letterGrades.append(\"\
    A+\")\n        case 3.7..<4.0:\n            letterGrades.append(\"A\")\n     \
    \   case 3.3..<3.7:\n            letterGrades.append(\"A-\")\n        case 3.0..<3.3:\n\
    \            letterGrades.append(\"B+\")\n        case 2.7..<3.0:\n          \
    \  letterGrades.append(\"B\")\n        case 2.3..<2.7:\n            letterGrades.append(\"\
    B-\")\n        case 2.0..<2.3:\n            letterGrades.append(\"C+\")\n    \
    \    case 1.7..<2.0:\n            letterGrades.append(\"C\")\n        case 1.3..<1.7:\n\
    \            letterGrades.append(\"C-\")\n        case 1.0..<1.3:\n          \
    \  letterGrades.append(\"D+\")\n        case 0.7..<1.0:\n            letterGrades.append(\"\
    D\")\n        case 0.0..<0.7:\n            letterGrades.append(\"D-\")\n     \
    \   case 0.0:\n            letterGrades.append(\"E\")\n        default:\n    \
    \        letterGrades.append(\"Invalid\")\n        }\n    }\n    return letterGrades\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmp1obexfzp/tmp1obexfzp.swift:74: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad3ab8d3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad3ab5cab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad3ab5ca988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad3ab5c97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1obexfzp                        0x00005627f2fe88d6 <unavailable> + 6358

    5    libc.so.6                          0x00002ad3ababf460 __libc_start_main +
    245

    6    tmp1obexfzp                        0x00005627f2fe83f9 <unavailable> + 5113

    '
  stdout: ''
  timestamp: 1660013958
- exit_code: 0
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var result: [String] = []\n    for grade in grades\
    \ {\n        if grade == 4.0 {\n            result.append(\"A+\")\n        } else\
    \ if grade > 3.7 {\n            result.append(\"A\")\n        } else if grade\
    \ > 3.3 {\n            result.append(\"A-\")\n        } else if grade > 3.0 {\n\
    \            result.append(\"B+\")\n        } else if grade > 2.7 {\n        \
    \    result.append(\"B\")\n        } else if grade > 2.3 {\n            result.append(\"\
    B-\")\n        } else if grade > 2.0 {\n            result.append(\"C+\")\n  \
    \      } else if grade > 1.7 {\n            result.append(\"C\")\n        } else\
    \ if grade > 1.3 {\n            result.append(\"C-\")\n        } else if grade\
    \ > 1.0 {\n            result.append(\"D+\")\n        } else if grade > 0.7 {\n\
    \            result.append(\"D\")\n        } else if grade > 0.0 {\n         \
    \   result.append(\"D-\")\n        } else {\n            result.append(\"E\")\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2]) == [\"\
    D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013958
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades = [String]()\n    for grade in\
    \ grades {\n        if grade >= 4.0 {\n            letterGrades.append(\"A+\"\
    )\n        } else if grade >= 3.7 {\n            letterGrades.append(\"A\")\n\
    \        } else if grade >= 3.3 {\n            letterGrades.append(\"A-\")\n \
    \       } else if grade >= 3.0 {\n            letterGrades.append(\"B+\")\n  \
    \      } else if grade >= 2.7 {\n            letterGrades.append(\"B\")\n    \
    \    } else if grade >= 2.3 {\n            letterGrades.append(\"B-\")\n     \
    \   } else if grade >= 2.0 {\n            letterGrades.append(\"C+\")\n      \
    \  } else if grade >= 1.7 {\n            letterGrades.append(\"C\")\n        }\
    \ else if grade >= 1.3 {\n            letterGrades.append(\"C-\")\n        } else\
    \ if grade >= 1.0 {\n            letterGrades.append(\"D+\")\n        } else if\
    \ grade >= 0.7 {\n            letterGrades.append(\"D\")\n        } else if grade\
    \ >= 0.0 {\n            letterGrades.append(\"D-\")\n        } else {\n      \
    \      letterGrades.append(\"E\")\n        }\n    }\n    return letterGrades\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmp_e648e_q/tmp_e648e_q.swift:71: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae1592c1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae158fb8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae158fb8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae158fb77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_e648e_q                        0x0000559655f5e7f6 <unavailable> + 6134

    5    libc.so.6                          0x00002ae1594ad460 __libc_start_main +
    245

    6    tmp_e648e_q                        0x0000559655f5e319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1660013958
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades: [String] = []\n    for grade\
    \ in grades {\n        if grade >= 4.0 {\n            letterGrades.append(\"A+\"\
    )\n        } else if grade >= 3.7 {\n            letterGrades.append(\"A\")\n\
    \        } else if grade >= 3.3 {\n            letterGrades.append(\"A-\")\n \
    \       } else if grade >= 3.0 {\n            letterGrades.append(\"B+\")\n  \
    \      } else if grade >= 2.7 {\n            letterGrades.append(\"B\")\n    \
    \    } else if grade >= 2.3 {\n            letterGrades.append(\"B-\")\n     \
    \   } else if grade >= 2.0 {\n            letterGrades.append(\"C+\")\n      \
    \  } else if grade >= 1.7 {\n            letterGrades.append(\"C\")\n        }\
    \ else if grade >= 1.3 {\n            letterGrades.append(\"C-\")\n        } else\
    \ if grade >= 1.0 {\n            letterGrades.append(\"D+\")\n        } else if\
    \ grade >= 0.7 {\n            letterGrades.append(\"D\")\n        } else if grade\
    \ >= 0.0 {\n            letterGrades.append(\"D-\")\n        } else {\n      \
    \      letterGrades.append(\"E\")\n        }\n    }\n    return letterGrades\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpzd4bshlr/tmpzd4bshlr.swift:71: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b26274e3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b26271dab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b26271da988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b26271d97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzd4bshlr                        0x000056416df8a7a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b26276cf460 __libc_start_main +
    245

    6    tmpzd4bshlr                        0x000056416df8a2c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660013958
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades: [String] = []\n    for grade\
    \ in grades {\n        if grade >= 4.0 {\n            letterGrades.append(\"A+\"\
    )\n        } else if grade >= 3.7 {\n            letterGrades.append(\"A\")\n\
    \        } else if grade >= 3.3 {\n            letterGrades.append(\"A-\")\n \
    \       } else if grade >= 3.0 {\n            letterGrades.append(\"B+\")\n  \
    \      } else if grade >= 2.7 {\n            letterGrades.append(\"B\")\n    \
    \    } else if grade >= 2.3 {\n            letterGrades.append(\"B-\")\n     \
    \   } else if grade >= 2.0 {\n            letterGrades.append(\"C+\")\n      \
    \  } else if grade >= 1.7 {\n            letterGrades.append(\"C\")\n        }\
    \ else if grade >= 1.3 {\n            letterGrades.append(\"C-\")\n        } else\
    \ if grade >= 1.0 {\n            letterGrades.append(\"D+\")\n        } else if\
    \ grade >= 0.7 {\n            letterGrades.append(\"D\")\n        } else if grade\
    \ >= 0.0 {\n            letterGrades.append(\"D-\")\n        } else {\n      \
    \      letterGrades.append(\"E\")\n        }\n    }\n    return letterGrades\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpzd4bshlr/tmpzd4bshlr.swift:71: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b26274e3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b26271dab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b26271da988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b26271d97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzd4bshlr                        0x000056416df8a7a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b26276cf460 __libc_start_main +
    245

    6    tmpzd4bshlr                        0x000056416df8a2c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660013958
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letter_grades = [String]()\n    for grade in\
    \ grades {\n        if grade >= 4.0 {\n            letter_grades.append(\"A+\"\
    )\n        } else if grade >= 3.7 {\n            letter_grades.append(\"A\")\n\
    \        } else if grade >= 3.3 {\n            letter_grades.append(\"A-\")\n\
    \        } else if grade >= 3.0 {\n            letter_grades.append(\"B+\")\n\
    \        } else if grade >= 2.7 {\n            letter_grades.append(\"B\")\n \
    \       } else if grade >= 2.3 {\n            letter_grades.append(\"B-\")\n \
    \       } else if grade >= 2.0 {\n            letter_grades.append(\"C+\")\n \
    \       } else if grade >= 1.7 {\n            letter_grades.append(\"C\")\n  \
    \      } else if grade >= 1.3 {\n            letter_grades.append(\"C-\")\n  \
    \      } else if grade >= 1.0 {\n            letter_grades.append(\"D+\")\n  \
    \      } else if grade >= 0.7 {\n            letter_grades.append(\"D\")\n   \
    \     } else if grade >= 0.0 {\n            letter_grades.append(\"D-\")\n   \
    \     } else {\n            letter_grades.append(\"E\")\n        }\n    }\n  \
    \  return letter_grades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpxz159fh_/tmpxz159fh_.swift:71: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8a9995ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8a99651b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8a99651988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8a996507b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxz159fh_                        0x000055e14d06c7f6 <unavailable> + 6134

    5    libc.so.6                          0x00002b8a99b46460 __libc_start_main +
    245

    6    tmpxz159fh_                        0x000055e14d06c319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1660013958
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var result: [String] = []\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            result.append(\"A+\")\n        } else\
    \ if grade >= 3.7 {\n            result.append(\"A\")\n        } else if grade\
    \ >= 3.3 {\n            result.append(\"A-\")\n        } else if grade >= 3.0\
    \ {\n            result.append(\"B+\")\n        } else if grade >= 2.7 {\n   \
    \         result.append(\"B\")\n        } else if grade >= 2.3 {\n           \
    \ result.append(\"B-\")\n        } else if grade >= 2.0 {\n            result.append(\"\
    C+\")\n        } else if grade >= 1.7 {\n            result.append(\"C\")\n  \
    \      } else if grade >= 1.3 {\n            result.append(\"C-\")\n        }\
    \ else if grade >= 1.0 {\n            result.append(\"D+\")\n        } else if\
    \ grade >= 0.7 {\n            result.append(\"D\")\n        } else if grade >=\
    \ 0.0 {\n            result.append(\"D-\")\n        } else {\n            result.append(\"\
    E\")\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2])\
    \ == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpdri1lvgf/tmpdri1lvgf.swift:71: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b295682ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2956525b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2956525988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b29565247b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdri1lvgf                        0x000055e4cf0bd7a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b2956a1a460 __libc_start_main +
    245

    6    tmpdri1lvgf                        0x000055e4cf0bd2c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660013958
- exit_code: 0
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letter_grades: [String] = []\n    for grade\
    \ in grades {\n        if grade == 4.0 {\n            letter_grades.append(\"\
    A+\")\n        } else if grade > 3.7 {\n            letter_grades.append(\"A\"\
    )\n        } else if grade > 3.3 {\n            letter_grades.append(\"A-\")\n\
    \        } else if grade > 3.0 {\n            letter_grades.append(\"B+\")\n \
    \       } else if grade > 2.7 {\n            letter_grades.append(\"B\")\n   \
    \     } else if grade > 2.3 {\n            letter_grades.append(\"B-\")\n    \
    \    } else if grade > 2.0 {\n            letter_grades.append(\"C+\")\n     \
    \   } else if grade > 1.7 {\n            letter_grades.append(\"C\")\n       \
    \ } else if grade > 1.3 {\n            letter_grades.append(\"C-\")\n        }\
    \ else if grade > 1.0 {\n            letter_grades.append(\"D+\")\n        } else\
    \ if grade > 0.7 {\n            letter_grades.append(\"D\")\n        } else if\
    \ grade > 0.0 {\n            letter_grades.append(\"D-\")\n        } else {\n\
    \            letter_grades.append(\"E\")\n        }\n    }\n    return letter_grades\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013958
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades: [String] = []\n    for grade\
    \ in grades {\n        if grade >= 4.0 {\n            letterGrades.append(\"A+\"\
    )\n        } else if grade >= 3.7 {\n            letterGrades.append(\"A\")\n\
    \        } else if grade >= 3.3 {\n            letterGrades.append(\"A-\")\n \
    \       } else if grade >= 3.0 {\n            letterGrades.append(\"B+\")\n  \
    \      } else if grade >= 2.7 {\n            letterGrades.append(\"B\")\n    \
    \    } else if grade >= 2.3 {\n            letterGrades.append(\"B-\")\n     \
    \   } else if grade >= 2.0 {\n            letterGrades.append(\"C+\")\n      \
    \  } else if grade >= 1.7 {\n            letterGrades.append(\"C\")\n        }\
    \ else if grade >= 1.3 {\n            letterGrades.append(\"C-\")\n        } else\
    \ if grade >= 1.0 {\n            letterGrades.append(\"D+\")\n        } else if\
    \ grade >= 0.7 {\n            letterGrades.append(\"D\")\n        } else if grade\
    \ >= 0.0 {\n            letterGrades.append(\"D-\")\n        } else {\n      \
    \      letterGrades.append(\"E\")\n        }\n    }\n    return letterGrades\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpzd4bshlr/tmpzd4bshlr.swift:71: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b26274e3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b26271dab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b26271da988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b26271d97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzd4bshlr                        0x000056416df8a7a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b26276cf460 __libc_start_main +
    245

    6    tmpzd4bshlr                        0x000056416df8a2c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660013958
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades: [String] = []\n    for grade\
    \ in grades {\n        switch grade {\n        case 4.0:\n            letterGrades.append(\"\
    A+\")\n        case 3.7..<4.0:\n            letterGrades.append(\"A\")\n     \
    \   case 3.3..<3.7:\n            letterGrades.append(\"A-\")\n        case 3.0..<3.3:\n\
    \            letterGrades.append(\"B+\")\n        case 2.7..<3.0:\n          \
    \  letterGrades.append(\"B\")\n        case 2.3..<2.7:\n            letterGrades.append(\"\
    B-\")\n        case 2.0..<2.3:\n            letterGrades.append(\"C+\")\n    \
    \    case 1.7..<2.0:\n            letterGrades.append(\"C\")\n        case 1.3..<1.7:\n\
    \            letterGrades.append(\"C-\")\n        case 1.0..<1.3:\n          \
    \  letterGrades.append(\"D+\")\n        case 0.7..<1.0:\n            letterGrades.append(\"\
    D\")\n        case 0.0..<0.7:\n            letterGrades.append(\"D-\")\n     \
    \   default:\n            letterGrades.append(\"E\")\n        }\n    }\n    return\
    \ letterGrades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpsao889wi/tmpsao889wi.swift:72: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4658481c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4658178b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4658178988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b46581777b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsao889wi                        0x000055b5f8a108d6 <unavailable> + 6358

    5    libc.so.6                          0x00002b465866d460 __libc_start_main +
    245

    6    tmpsao889wi                        0x000055b5f8a103f9 <unavailable> + 5113

    '
  stdout: ''
  timestamp: 1660013958
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letter_grades = [String]()\n    for grade in\
    \ grades {\n        if grade >= 4.0 {\n            letter_grades.append(\"A+\"\
    )\n        } else if grade >= 3.7 {\n            letter_grades.append(\"A\")\n\
    \        } else if grade >= 3.3 {\n            letter_grades.append(\"A-\")\n\
    \        } else if grade >= 3.0 {\n            letter_grades.append(\"B+\")\n\
    \        } else if grade >= 2.7 {\n            letter_grades.append(\"B\")\n \
    \       } else if grade >= 2.3 {\n            letter_grades.append(\"B-\")\n \
    \       } else if grade >= 2.0 {\n            letter_grades.append(\"C+\")\n \
    \       } else if grade >= 1.7 {\n            letter_grades.append(\"C\")\n  \
    \      } else if grade >= 1.3 {\n            letter_grades.append(\"C-\")\n  \
    \      } else if grade >= 1.0 {\n            letter_grades.append(\"D+\")\n  \
    \      } else if grade >= 0.7 {\n            letter_grades.append(\"D\")\n   \
    \     } else if grade >= 0.0 {\n            letter_grades.append(\"D-\")\n   \
    \     } else {\n            letter_grades.append(\"E\")\n        }\n    }\n  \
    \  return letter_grades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpxz159fh_/tmpxz159fh_.swift:71: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8a9995ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8a99651b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8a99651988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8a996507b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxz159fh_                        0x000055e14d06c7f6 <unavailable> + 6134

    5    libc.so.6                          0x00002b8a99b46460 __libc_start_main +
    245

    6    tmpxz159fh_                        0x000055e14d06c319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1660013958
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades: [String] = []\n    for grade\
    \ in grades {\n        if grade >= 4.0 {\n            letterGrades.append(\"A+\"\
    )\n        } else if grade >= 3.7 {\n            letterGrades.append(\"A\")\n\
    \        } else if grade >= 3.3 {\n            letterGrades.append(\"A-\")\n \
    \       } else if grade >= 3.0 {\n            letterGrades.append(\"B+\")\n  \
    \      } else if grade >= 2.7 {\n            letterGrades.append(\"B\")\n    \
    \    } else if grade >= 2.3 {\n            letterGrades.append(\"B-\")\n     \
    \   } else if grade >= 2.0 {\n            letterGrades.append(\"C+\")\n      \
    \  } else if grade >= 1.7 {\n            letterGrades.append(\"C\")\n        }\
    \ else if grade >= 1.3 {\n            letterGrades.append(\"C-\")\n        } else\
    \ if grade >= 1.0 {\n            letterGrades.append(\"D+\")\n        } else if\
    \ grade >= 0.7 {\n            letterGrades.append(\"D\")\n        } else if grade\
    \ >= 0.0 {\n            letterGrades.append(\"D-\")\n        } else {\n      \
    \      letterGrades.append(\"E\")\n        }\n    }\n    return letterGrades\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpzd4bshlr/tmpzd4bshlr.swift:71: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b26274e3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b26271dab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b26271da988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b26271d97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzd4bshlr                        0x000056416df8a7a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b26276cf460 __libc_start_main +
    245

    6    tmpzd4bshlr                        0x000056416df8a2c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660013958
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letter_grades: [String] = []\n    for grade\
    \ in grades {\n        if grade >= 4.0 {\n            letter_grades.append(\"\
    A+\")\n        } else if grade >= 3.7 {\n            letter_grades.append(\"A\"\
    )\n        } else if grade >= 3.3 {\n            letter_grades.append(\"A-\")\n\
    \        } else if grade >= 3.0 {\n            letter_grades.append(\"B+\")\n\
    \        } else if grade >= 2.7 {\n            letter_grades.append(\"B\")\n \
    \       } else if grade >= 2.3 {\n            letter_grades.append(\"B-\")\n \
    \       } else if grade >= 2.0 {\n            letter_grades.append(\"C+\")\n \
    \       } else if grade >= 1.7 {\n            letter_grades.append(\"C\")\n  \
    \      } else if grade >= 1.3 {\n            letter_grades.append(\"C-\")\n  \
    \      } else if grade >= 1.0 {\n            letter_grades.append(\"D+\")\n  \
    \      } else if grade >= 0.7 {\n            letter_grades.append(\"D\")\n   \
    \     } else if grade >= 0.0 {\n            letter_grades.append(\"D-\")\n   \
    \     } else {\n            letter_grades.append(\"E\")\n        }\n    }\n  \
    \  return letter_grades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpg5y0zgra/tmpg5y0zgra.swift:71: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8d221f6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8d21eedb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8d21eed988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8d21eec7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpg5y0zgra                        0x0000556d548d07a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b8d223e2460 __libc_start_main +
    245

    6    tmpg5y0zgra                        0x0000556d548d02c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660013958
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letter_grades: [String] = []\n    for grade\
    \ in grades {\n        if grade >= 4.0 {\n            letter_grades.append(\"\
    A+\")\n        } else if grade >= 3.7 {\n            letter_grades.append(\"A\"\
    )\n        } else if grade >= 3.3 {\n            letter_grades.append(\"A-\")\n\
    \        } else if grade >= 3.0 {\n            letter_grades.append(\"B+\")\n\
    \        } else if grade >= 2.7 {\n            letter_grades.append(\"B\")\n \
    \       } else if grade >= 2.3 {\n            letter_grades.append(\"B-\")\n \
    \       } else if grade >= 2.0 {\n            letter_grades.append(\"C+\")\n \
    \       } else if grade >= 1.7 {\n            letter_grades.append(\"C\")\n  \
    \      } else if grade >= 1.3 {\n            letter_grades.append(\"C-\")\n  \
    \      } else if grade >= 1.0 {\n            letter_grades.append(\"D+\")\n  \
    \      } else if grade >= 0.7 {\n            letter_grades.append(\"D\")\n   \
    \     } else if grade >= 0.0 {\n            letter_grades.append(\"D-\")\n   \
    \     } else {\n            letter_grades.append(\"E\")\n        }\n    }\n  \
    \  return letter_grades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpg5y0zgra/tmpg5y0zgra.swift:71: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8d221f6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8d21eedb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8d21eed988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8d21eec7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpg5y0zgra                        0x0000556d548d07a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b8d223e2460 __libc_start_main +
    245

    6    tmpg5y0zgra                        0x0000556d548d02c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660013958
- exit_code: 0
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades: [String] = []\n    for grade\
    \ in grades {\n        if grade == 4.0 {\n            letterGrades.append(\"A+\"\
    )\n        } else if grade > 3.7 {\n            letterGrades.append(\"A\")\n \
    \       } else if grade > 3.3 {\n            letterGrades.append(\"A-\")\n   \
    \     } else if grade > 3.0 {\n            letterGrades.append(\"B+\")\n     \
    \   } else if grade > 2.7 {\n            letterGrades.append(\"B\")\n        }\
    \ else if grade > 2.3 {\n            letterGrades.append(\"B-\")\n        } else\
    \ if grade > 2.0 {\n            letterGrades.append(\"C+\")\n        } else if\
    \ grade > 1.7 {\n            letterGrades.append(\"C\")\n        } else if grade\
    \ > 1.3 {\n            letterGrades.append(\"C-\")\n        } else if grade >\
    \ 1.0 {\n            letterGrades.append(\"D+\")\n        } else if grade > 0.7\
    \ {\n            letterGrades.append(\"D\")\n        } else if grade > 0.0 {\n\
    \            letterGrades.append(\"D-\")\n        } else {\n            letterGrades.append(\"\
    E\")\n        }\n    }\n    return letterGrades\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2])\
    \ == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013958
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades: [String] = []\n    for grade\
    \ in grades {\n        switch grade {\n        case 4.0:\n            letterGrades.append(\"\
    A+\")\n        case 3.7..<4.0:\n            letterGrades.append(\"A\")\n     \
    \   case 3.3..<3.7:\n            letterGrades.append(\"A-\")\n        case 3.0..<3.3:\n\
    \            letterGrades.append(\"B+\")\n        case 2.7..<3.0:\n          \
    \  letterGrades.append(\"B\")\n        case 2.3..<2.7:\n            letterGrades.append(\"\
    B-\")\n        case 2.0..<2.3:\n            letterGrades.append(\"C+\")\n    \
    \    case 1.7..<2.0:\n            letterGrades.append(\"C\")\n        case 1.3..<1.7:\n\
    \            letterGrades.append(\"C-\")\n        case 1.0..<1.3:\n          \
    \  letterGrades.append(\"D+\")\n        case 0.7..<1.0:\n            letterGrades.append(\"\
    D\")\n        case 0.0..<0.7:\n            letterGrades.append(\"D-\")\n     \
    \   default:\n            letterGrades.append(\"E\")\n        }\n    }\n    return\
    \ letterGrades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpsao889wi/tmpsao889wi.swift:72: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4658481c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4658178b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4658178988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b46581777b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsao889wi                        0x000055b5f8a108d6 <unavailable> + 6358

    5    libc.so.6                          0x00002b465866d460 __libc_start_main +
    245

    6    tmpsao889wi                        0x000055b5f8a103f9 <unavailable> + 5113

    '
  stdout: ''
  timestamp: 1660013958
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var result: [String] = []\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            result.append(\"A+\")\n        } else\
    \ if grade >= 3.7 {\n            result.append(\"A\")\n        } else if grade\
    \ >= 3.3 {\n            result.append(\"A-\")\n        } else if grade >= 3.0\
    \ {\n            result.append(\"B+\")\n        } else if grade >= 2.7 {\n   \
    \         result.append(\"B\")\n        } else if grade >= 2.3 {\n           \
    \ result.append(\"B-\")\n        } else if grade >= 2.0 {\n            result.append(\"\
    C+\")\n        } else if grade >= 1.7 {\n            result.append(\"C\")\n  \
    \      } else if grade >= 1.3 {\n            result.append(\"C-\")\n        }\
    \ else if grade >= 1.0 {\n            result.append(\"D+\")\n        } else if\
    \ grade >= 0.7 {\n            result.append(\"D\")\n        } else if grade >=\
    \ 0.0 {\n            result.append(\"D-\")\n        } else {\n            result.append(\"\
    E\")\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2])\
    \ == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpdri1lvgf/tmpdri1lvgf.swift:71: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b295682ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2956525b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2956525988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b29565247b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdri1lvgf                        0x000055e4cf0bd7a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b2956a1a460 __libc_start_main +
    245

    6    tmpdri1lvgf                        0x000055e4cf0bd2c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660013958
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letter_grades: [String] = []\n    for grade\
    \ in grades {\n        if grade >= 4.0 {\n            letter_grades.append(\"\
    A+\")\n        } else if grade >= 3.7 {\n            letter_grades.append(\"A\"\
    )\n        } else if grade >= 3.3 {\n            letter_grades.append(\"A-\")\n\
    \        } else if grade >= 3.0 {\n            letter_grades.append(\"B+\")\n\
    \        } else if grade >= 2.7 {\n            letter_grades.append(\"B\")\n \
    \       } else if grade >= 2.3 {\n            letter_grades.append(\"B-\")\n \
    \       } else if grade >= 2.0 {\n            letter_grades.append(\"C+\")\n \
    \       } else if grade >= 1.7 {\n            letter_grades.append(\"C\")\n  \
    \      } else if grade >= 1.3 {\n            letter_grades.append(\"C-\")\n  \
    \      } else if grade >= 1.0 {\n            letter_grades.append(\"D+\")\n  \
    \      } else if grade >= 0.7 {\n            letter_grades.append(\"D\")\n   \
    \     } else if grade >= 0.0 {\n            letter_grades.append(\"D-\")\n   \
    \     } else {\n            letter_grades.append(\"E\")\n        }\n    }\n  \
    \  return letter_grades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpg5y0zgra/tmpg5y0zgra.swift:71: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8d221f6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8d21eedb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8d21eed988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8d21eec7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpg5y0zgra                        0x0000556d548d07a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b8d223e2460 __libc_start_main +
    245

    6    tmpg5y0zgra                        0x0000556d548d02c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660013958
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades = [String]()\n    for grade in\
    \ grades {\n        if grade >= 4.0 {\n            letterGrades.append(\"A+\"\
    )\n        } else if grade >= 3.7 {\n            letterGrades.append(\"A\")\n\
    \        } else if grade >= 3.3 {\n            letterGrades.append(\"A-\")\n \
    \       } else if grade >= 3.0 {\n            letterGrades.append(\"B+\")\n  \
    \      } else if grade >= 2.7 {\n            letterGrades.append(\"B\")\n    \
    \    } else if grade >= 2.3 {\n            letterGrades.append(\"B-\")\n     \
    \   } else if grade >= 2.0 {\n            letterGrades.append(\"C+\")\n      \
    \  } else if grade >= 1.7 {\n            letterGrades.append(\"C\")\n        }\
    \ else if grade >= 1.3 {\n            letterGrades.append(\"C-\")\n        } else\
    \ if grade >= 1.0 {\n            letterGrades.append(\"D+\")\n        } else if\
    \ grade >= 0.7 {\n            letterGrades.append(\"D\")\n        } else if grade\
    \ >= 0.0 {\n            letterGrades.append(\"D-\")\n        } else {\n      \
    \      letterGrades.append(\"E\")\n        }\n    }\n    return letterGrades\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmp_e648e_q/tmp_e648e_q.swift:71: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae1592c1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae158fb8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae158fb8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae158fb77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_e648e_q                        0x0000559655f5e7f6 <unavailable> + 6134

    5    libc.so.6                          0x00002ae1594ad460 __libc_start_main +
    245

    6    tmp_e648e_q                        0x0000559655f5e319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1660013958
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades: [String] = []\n    for grade\
    \ in grades {\n        switch grade {\n        case 4.0:\n            letterGrades.append(\"\
    A+\")\n        case 3.7..<4.0:\n            letterGrades.append(\"A\")\n     \
    \   case 3.3..<3.7:\n            letterGrades.append(\"A-\")\n        case 3.0..<3.3:\n\
    \            letterGrades.append(\"B+\")\n        case 2.7..<3.0:\n          \
    \  letterGrades.append(\"B\")\n        case 2.3..<2.7:\n            letterGrades.append(\"\
    B-\")\n        case 2.0..<2.3:\n            letterGrades.append(\"C+\")\n    \
    \    case 1.7..<2.0:\n            letterGrades.append(\"C\")\n        case 1.3..<1.7:\n\
    \            letterGrades.append(\"C-\")\n        case 1.0..<1.3:\n          \
    \  letterGrades.append(\"D+\")\n        case 0.7..<1.0:\n            letterGrades.append(\"\
    D\")\n        case 0.0..<0.7:\n            letterGrades.append(\"D-\")\n     \
    \   case 0.0:\n            letterGrades.append(\"E\")\n        default:\n    \
    \        letterGrades.append(\"Invalid\")\n        }\n    }\n    return letterGrades\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmp1obexfzp/tmp1obexfzp.swift:74: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad3ab8d3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad3ab5cab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad3ab5ca988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad3ab5c97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1obexfzp                        0x00005627f2fe88d6 <unavailable> + 6358

    5    libc.so.6                          0x00002ad3ababf460 __libc_start_main +
    245

    6    tmp1obexfzp                        0x00005627f2fe83f9 <unavailable> + 5113

    '
  stdout: ''
  timestamp: 1660013958
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letter_grades: [String] = []\n    for grade\
    \ in grades {\n        if grade >= 4.0 {\n            letter_grades.append(\"\
    A+\")\n        } else if grade >= 3.7 {\n            letter_grades.append(\"A\"\
    )\n        } else if grade >= 3.3 {\n            letter_grades.append(\"A-\")\n\
    \        } else if grade >= 3.0 {\n            letter_grades.append(\"B+\")\n\
    \        } else if grade >= 2.7 {\n            letter_grades.append(\"B\")\n \
    \       } else if grade >= 2.3 {\n            letter_grades.append(\"B-\")\n \
    \       } else if grade >= 2.0 {\n            letter_grades.append(\"C+\")\n \
    \       } else if grade >= 1.7 {\n            letter_grades.append(\"C\")\n  \
    \      } else if grade >= 1.3 {\n            letter_grades.append(\"C-\")\n  \
    \      } else if grade >= 1.0 {\n            letter_grades.append(\"D+\")\n  \
    \      } else if grade >= 0.7 {\n            letter_grades.append(\"D\")\n   \
    \     } else if grade >= 0.0 {\n            letter_grades.append(\"D-\")\n   \
    \     } else {\n            letter_grades.append(\"E\")\n        }\n    }\n  \
    \  return letter_grades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpg5y0zgra/tmpg5y0zgra.swift:71: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8d221f6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8d21eedb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8d21eed988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8d21eec7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpg5y0zgra                        0x0000556d548d07a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b8d223e2460 __libc_start_main +
    245

    6    tmpg5y0zgra                        0x0000556d548d02c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660013958
- exit_code: 0
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades: [String] = []\n    for grade\
    \ in grades {\n        if grade == 4.0 {\n            letterGrades.append(\"A+\"\
    )\n        } else if grade > 3.7 {\n            letterGrades.append(\"A\")\n \
    \       } else if grade > 3.3 {\n            letterGrades.append(\"A-\")\n   \
    \     } else if grade > 3.0 {\n            letterGrades.append(\"B+\")\n     \
    \   } else if grade > 2.7 {\n            letterGrades.append(\"B\")\n        }\
    \ else if grade > 2.3 {\n            letterGrades.append(\"B-\")\n        } else\
    \ if grade > 2.0 {\n            letterGrades.append(\"C+\")\n        } else if\
    \ grade > 1.7 {\n            letterGrades.append(\"C\")\n        } else if grade\
    \ > 1.3 {\n            letterGrades.append(\"C-\")\n        } else if grade >\
    \ 1.0 {\n            letterGrades.append(\"D+\")\n        } else if grade > 0.7\
    \ {\n            letterGrades.append(\"D\")\n        } else if grade > 0.0 {\n\
    \            letterGrades.append(\"D-\")\n        } else {\n            letterGrades.append(\"\
    E\")\n        }\n    }\n    return letterGrades\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2])\
    \ == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013958
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var result: [String] = []\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            result.append(\"A+\")\n        } else\
    \ if grade >= 3.7 {\n            result.append(\"A\")\n        } else if grade\
    \ >= 3.3 {\n            result.append(\"A-\")\n        } else if grade >= 3.0\
    \ {\n            result.append(\"B+\")\n        } else if grade >= 2.7 {\n   \
    \         result.append(\"B\")\n        } else if grade >= 2.3 {\n           \
    \ result.append(\"B-\")\n        } else if grade >= 2.0 {\n            result.append(\"\
    C+\")\n        } else if grade >= 1.7 {\n            result.append(\"C\")\n  \
    \      } else if grade >= 1.3 {\n            result.append(\"C-\")\n        }\
    \ else if grade >= 1.0 {\n            result.append(\"D+\")\n        } else if\
    \ grade >= 0.7 {\n            result.append(\"D\")\n        } else if grade >=\
    \ 0.0 {\n            result.append(\"D-\")\n        } else {\n            result.append(\"\
    E\")\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2])\
    \ == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpdri1lvgf/tmpdri1lvgf.swift:71: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b295682ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2956525b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2956525988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b29565247b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdri1lvgf                        0x000055e4cf0bd7a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b2956a1a460 __libc_start_main +
    245

    6    tmpdri1lvgf                        0x000055e4cf0bd2c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660013958
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades: [String] = []\n    for grade\
    \ in grades {\n        switch grade {\n        case 4.0:\n            letterGrades.append(\"\
    A+\")\n        case 3.7..<4.0:\n            letterGrades.append(\"A\")\n     \
    \   case 3.3..<3.7:\n            letterGrades.append(\"A-\")\n        case 3.0..<3.3:\n\
    \            letterGrades.append(\"B+\")\n        case 2.7..<3.0:\n          \
    \  letterGrades.append(\"B\")\n        case 2.3..<2.7:\n            letterGrades.append(\"\
    B-\")\n        case 2.0..<2.3:\n            letterGrades.append(\"C+\")\n    \
    \    case 1.7..<2.0:\n            letterGrades.append(\"C\")\n        case 1.3..<1.7:\n\
    \            letterGrades.append(\"C-\")\n        case 1.0..<1.3:\n          \
    \  letterGrades.append(\"D+\")\n        case 0.7..<1.0:\n            letterGrades.append(\"\
    D\")\n        case 0.0..<0.7:\n            letterGrades.append(\"D-\")\n     \
    \   case 0.0:\n            letterGrades.append(\"E\")\n        default:\n    \
    \        letterGrades.append(\"Invalid Grade\")\n        }\n    }\n    return\
    \ letterGrades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmp4hh5_mp9/tmp4hh5_mp9.swift:74: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab7a9526c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab7a921db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab7a921d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab7a921c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4hh5_mp9                        0x000055c09c0a18d6 <unavailable> + 6358

    5    libc.so.6                          0x00002ab7a9712460 __libc_start_main +
    245

    6    tmp4hh5_mp9                        0x000055c09c0a13f9 <unavailable> + 5113

    '
  stdout: ''
  timestamp: 1660013958
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades: [String] = []\n    for grade\
    \ in grades {\n        switch grade {\n        case 4.0:\n            letterGrades.append(\"\
    A+\")\n        case 3.7..<4.0:\n            letterGrades.append(\"A\")\n     \
    \   case 3.3..<3.7:\n            letterGrades.append(\"A-\")\n        case 3.0..<3.3:\n\
    \            letterGrades.append(\"B+\")\n        case 2.7..<3.0:\n          \
    \  letterGrades.append(\"B\")\n        case 2.3..<2.7:\n            letterGrades.append(\"\
    B-\")\n        case 2.0..<2.3:\n            letterGrades.append(\"C+\")\n    \
    \    case 1.7..<2.0:\n            letterGrades.append(\"C\")\n        case 1.3..<1.7:\n\
    \            letterGrades.append(\"C-\")\n        case 1.0..<1.3:\n          \
    \  letterGrades.append(\"D+\")\n        case 0.7..<1.0:\n            letterGrades.append(\"\
    D\")\n        case 0.0..<0.7:\n            letterGrades.append(\"D-\")\n     \
    \   case 0.0:\n            letterGrades.append(\"E\")\n        default:\n    \
    \        letterGrades.append(\"Invalid\")\n        }\n    }\n    return letterGrades\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmp1obexfzp/tmp1obexfzp.swift:74: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad3ab8d3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad3ab5cab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad3ab5ca988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad3ab5c97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1obexfzp                        0x00005627f2fe88d6 <unavailable> + 6358

    5    libc.so.6                          0x00002ad3ababf460 __libc_start_main +
    245

    6    tmp1obexfzp                        0x00005627f2fe83f9 <unavailable> + 5113

    '
  stdout: ''
  timestamp: 1660013958
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var result: [String] = []\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            result.append(\"A+\")\n        } else\
    \ if grade >= 3.7 {\n            result.append(\"A\")\n        } else if grade\
    \ >= 3.3 {\n            result.append(\"A-\")\n        } else if grade >= 3.0\
    \ {\n            result.append(\"B+\")\n        } else if grade >= 2.7 {\n   \
    \         result.append(\"B\")\n        } else if grade >= 2.3 {\n           \
    \ result.append(\"B-\")\n        } else if grade >= 2.0 {\n            result.append(\"\
    C+\")\n        } else if grade >= 1.7 {\n            result.append(\"C\")\n  \
    \      } else if grade >= 1.3 {\n            result.append(\"C-\")\n        }\
    \ else if grade >= 1.0 {\n            result.append(\"D+\")\n        } else if\
    \ grade >= 0.7 {\n            result.append(\"D\")\n        } else if grade >=\
    \ 0.0 {\n            result.append(\"D-\")\n        } else {\n            result.append(\"\
    E\")\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2])\
    \ == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpdri1lvgf/tmpdri1lvgf.swift:71: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b295682ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2956525b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2956525988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b29565247b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdri1lvgf                        0x000055e4cf0bd7a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b2956a1a460 __libc_start_main +
    245

    6    tmpdri1lvgf                        0x000055e4cf0bd2c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660013958
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades: [String] = []\n    for grade\
    \ in grades {\n        if grade >= 4.0 {\n            letterGrades.append(\"A+\"\
    )\n        } else if grade >= 3.7 {\n            letterGrades.append(\"A\")\n\
    \        } else if grade >= 3.3 {\n            letterGrades.append(\"A-\")\n \
    \       } else if grade >= 3.0 {\n            letterGrades.append(\"B+\")\n  \
    \      } else if grade >= 2.7 {\n            letterGrades.append(\"B\")\n    \
    \    } else if grade >= 2.3 {\n            letterGrades.append(\"B-\")\n     \
    \   } else if grade >= 2.0 {\n            letterGrades.append(\"C+\")\n      \
    \  } else if grade >= 1.7 {\n            letterGrades.append(\"C\")\n        }\
    \ else if grade >= 1.3 {\n            letterGrades.append(\"C-\")\n        } else\
    \ if grade >= 1.0 {\n            letterGrades.append(\"D+\")\n        } else if\
    \ grade >= 0.7 {\n            letterGrades.append(\"D\")\n        } else if grade\
    \ >= 0.0 {\n            letterGrades.append(\"D-\")\n        } else {\n      \
    \      letterGrades.append(\"E\")\n        }\n    }\n    return letterGrades\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpzd4bshlr/tmpzd4bshlr.swift:71: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b26274e3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b26271dab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b26271da988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b26271d97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzd4bshlr                        0x000056416df8a7a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b26276cf460 __libc_start_main +
    245

    6    tmpzd4bshlr                        0x000056416df8a2c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660013958
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letter_grades: [String] = []\n    for grade\
    \ in grades {\n        switch grade {\n        case 4.0:\n            letter_grades.append(\"\
    A+\")\n        case 3.7..<4.0:\n            letter_grades.append(\"A\")\n    \
    \    case 3.3..<3.7:\n            letter_grades.append(\"A-\")\n        case 3.0..<3.3:\n\
    \            letter_grades.append(\"B+\")\n        case 2.7..<3.0:\n         \
    \   letter_grades.append(\"B\")\n        case 2.3..<2.7:\n            letter_grades.append(\"\
    B-\")\n        case 2.0..<2.3:\n            letter_grades.append(\"C+\")\n   \
    \     case 1.7..<2.0:\n            letter_grades.append(\"C\")\n        case 1.3..<1.7:\n\
    \            letter_grades.append(\"C-\")\n        case 1.0..<1.3:\n         \
    \   letter_grades.append(\"D+\")\n        case 0.7..<1.0:\n            letter_grades.append(\"\
    D\")\n        case 0.0..<0.7:\n            letter_grades.append(\"D-\")\n    \
    \    default:\n            letter_grades.append(\"E\")\n        }\n    }\n   \
    \ return letter_grades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpbup_osmv/tmpbup_osmv.swift:72: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af622ed9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af622bd0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af622bd0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af622bcf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbup_osmv                        0x000055a3cbaac8d6 <unavailable> + 6358

    5    libc.so.6                          0x00002af6230c5460 __libc_start_main +
    245

    6    tmpbup_osmv                        0x000055a3cbaac3f9 <unavailable> + 5113

    '
  stdout: ''
  timestamp: 1660013958
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades: [String] = []\n    for grade\
    \ in grades {\n        if grade >= 4.0 {\n            letterGrades.append(\"A+\"\
    )\n        } else if grade >= 3.7 {\n            letterGrades.append(\"A\")\n\
    \        } else if grade >= 3.3 {\n            letterGrades.append(\"A-\")\n \
    \       } else if grade >= 3.0 {\n            letterGrades.append(\"B+\")\n  \
    \      } else if grade >= 2.7 {\n            letterGrades.append(\"B\")\n    \
    \    } else if grade >= 2.3 {\n            letterGrades.append(\"B-\")\n     \
    \   } else if grade >= 2.0 {\n            letterGrades.append(\"C+\")\n      \
    \  } else if grade >= 1.7 {\n            letterGrades.append(\"C\")\n        }\
    \ else if grade >= 1.3 {\n            letterGrades.append(\"C-\")\n        } else\
    \ if grade >= 1.0 {\n            letterGrades.append(\"D+\")\n        } else if\
    \ grade >= 0.7 {\n            letterGrades.append(\"D\")\n        } else if grade\
    \ >= 0.0 {\n            letterGrades.append(\"D-\")\n        } else {\n      \
    \      letterGrades.append(\"E\")\n        }\n    }\n    return letterGrades\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpzd4bshlr/tmpzd4bshlr.swift:71: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b26274e3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b26271dab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b26271da988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b26271d97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzd4bshlr                        0x000056416df8a7a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b26276cf460 __libc_start_main +
    245

    6    tmpzd4bshlr                        0x000056416df8a2c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660013958
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades: [String] = []\n    for grade\
    \ in grades {\n        if grade >= 4.0 {\n            letterGrades.append(\"A+\"\
    )\n        } else if grade >= 3.7 {\n            letterGrades.append(\"A\")\n\
    \        } else if grade >= 3.3 {\n            letterGrades.append(\"A-\")\n \
    \       } else if grade >= 3.0 {\n            letterGrades.append(\"B+\")\n  \
    \      } else if grade >= 2.7 {\n            letterGrades.append(\"B\")\n    \
    \    } else if grade >= 2.3 {\n            letterGrades.append(\"B-\")\n     \
    \   } else if grade >= 2.0 {\n            letterGrades.append(\"C+\")\n      \
    \  } else if grade >= 1.7 {\n            letterGrades.append(\"C\")\n        }\
    \ else if grade >= 1.3 {\n            letterGrades.append(\"C-\")\n        } else\
    \ if grade >= 1.0 {\n            letterGrades.append(\"D+\")\n        } else if\
    \ grade >= 0.7 {\n            letterGrades.append(\"D\")\n        } else if grade\
    \ >= 0.0 {\n            letterGrades.append(\"D-\")\n        } else {\n      \
    \      letterGrades.append(\"E\")\n        }\n    }\n    return letterGrades\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpzd4bshlr/tmpzd4bshlr.swift:71: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b26274e3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b26271dab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b26271da988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b26271d97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzd4bshlr                        0x000056416df8a7a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b26276cf460 __libc_start_main +
    245

    6    tmpzd4bshlr                        0x000056416df8a2c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660013958
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades = [String]()\n    for grade in\
    \ grades {\n        switch grade {\n        case 4.0:\n            letterGrades.append(\"\
    A+\")\n        case 3.7..<4.0:\n            letterGrades.append(\"A\")\n     \
    \   case 3.3..<3.7:\n            letterGrades.append(\"A-\")\n        case 3.0..<3.3:\n\
    \            letterGrades.append(\"B+\")\n        case 2.7..<3.0:\n          \
    \  letterGrades.append(\"B\")\n        case 2.3..<2.7:\n            letterGrades.append(\"\
    B-\")\n        case 2.0..<2.3:\n            letterGrades.append(\"C+\")\n    \
    \    case 1.7..<2.0:\n            letterGrades.append(\"C\")\n        case 1.3..<1.7:\n\
    \            letterGrades.append(\"C-\")\n        case 1.0..<1.3:\n          \
    \  letterGrades.append(\"D+\")\n        case 0.7..<1.0:\n            letterGrades.append(\"\
    D\")\n        case 0.0..<0.7:\n            letterGrades.append(\"D-\")\n     \
    \   case 0.0:\n            letterGrades.append(\"E\")\n        default:\n    \
    \        letterGrades.append(\"Invalid\")\n        }\n    }\n    return letterGrades\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpsfmesqa9/tmpsfmesqa9.swift:74: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba989efec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba989bf5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba989bf5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba989bf47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsfmesqa9                        0x0000559648922926 <unavailable> + 6438

    5    libc.so.6                          0x00002ba98a0ea460 __libc_start_main +
    245

    6    tmpsfmesqa9                        0x0000559648922449 <unavailable> + 5193

    '
  stdout: ''
  timestamp: 1660013958
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades: [String] = []\n    for grade\
    \ in grades {\n        if grade >= 4.0 {\n            letterGrades.append(\"A+\"\
    )\n        } else if grade >= 3.7 {\n            letterGrades.append(\"A\")\n\
    \        } else if grade >= 3.3 {\n            letterGrades.append(\"A-\")\n \
    \       } else if grade >= 3.0 {\n            letterGrades.append(\"B+\")\n  \
    \      } else if grade >= 2.7 {\n            letterGrades.append(\"B\")\n    \
    \    } else if grade >= 2.3 {\n            letterGrades.append(\"B-\")\n     \
    \   } else if grade >= 2.0 {\n            letterGrades.append(\"C+\")\n      \
    \  } else if grade >= 1.7 {\n            letterGrades.append(\"C\")\n        }\
    \ else if grade >= 1.3 {\n            letterGrades.append(\"C-\")\n        } else\
    \ if grade >= 1.0 {\n            letterGrades.append(\"D+\")\n        } else if\
    \ grade >= 0.7 {\n            letterGrades.append(\"D\")\n        } else if grade\
    \ >= 0.0 {\n            letterGrades.append(\"D-\")\n        } else {\n      \
    \      letterGrades.append(\"E\")\n        }\n    }\n    return letterGrades\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpzd4bshlr/tmpzd4bshlr.swift:71: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b26274e3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b26271dab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b26271da988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b26271d97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzd4bshlr                        0x000056416df8a7a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b26276cf460 __libc_start_main +
    245

    6    tmpzd4bshlr                        0x000056416df8a2c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660013958
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades: [String] = []\n    for grade\
    \ in grades {\n        if grade >= 4.0 {\n            letterGrades.append(\"A+\"\
    )\n        } else if grade >= 3.7 {\n            letterGrades.append(\"A\")\n\
    \        } else if grade >= 3.3 {\n            letterGrades.append(\"A-\")\n \
    \       } else if grade >= 3.0 {\n            letterGrades.append(\"B+\")\n  \
    \      } else if grade >= 2.7 {\n            letterGrades.append(\"B\")\n    \
    \    } else if grade >= 2.3 {\n            letterGrades.append(\"B-\")\n     \
    \   } else if grade >= 2.0 {\n            letterGrades.append(\"C+\")\n      \
    \  } else if grade >= 1.7 {\n            letterGrades.append(\"C\")\n        }\
    \ else if grade >= 1.3 {\n            letterGrades.append(\"C-\")\n        } else\
    \ if grade >= 1.0 {\n            letterGrades.append(\"D+\")\n        } else if\
    \ grade >= 0.7 {\n            letterGrades.append(\"D\")\n        } else if grade\
    \ >= 0.0 {\n            letterGrades.append(\"D-\")\n        } else {\n      \
    \      letterGrades.append(\"E\")\n        }\n    }\n    return letterGrades\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpzd4bshlr/tmpzd4bshlr.swift:71: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b26274e3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b26271dab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b26271da988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b26271d97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzd4bshlr                        0x000056416df8a7a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b26276cf460 __libc_start_main +
    245

    6    tmpzd4bshlr                        0x000056416df8a2c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660013958
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var result: [String] = []\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            result.append(\"A+\")\n        } else\
    \ if grade >= 3.7 {\n            result.append(\"A\")\n        } else if grade\
    \ >= 3.3 {\n            result.append(\"A-\")\n        } else if grade >= 3.0\
    \ {\n            result.append(\"B+\")\n        } else if grade >= 2.7 {\n   \
    \         result.append(\"B\")\n        } else if grade >= 2.3 {\n           \
    \ result.append(\"B-\")\n        } else if grade >= 2.0 {\n            result.append(\"\
    C+\")\n        } else if grade >= 1.7 {\n            result.append(\"C\")\n  \
    \      } else if grade >= 1.3 {\n            result.append(\"C-\")\n        }\
    \ else if grade >= 1.0 {\n            result.append(\"D+\")\n        } else if\
    \ grade >= 0.7 {\n            result.append(\"D\")\n        } else if grade >=\
    \ 0.0 {\n            result.append(\"D-\")\n        } else {\n            result.append(\"\
    E\")\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2])\
    \ == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpdri1lvgf/tmpdri1lvgf.swift:71: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b295682ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2956525b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2956525988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b29565247b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdri1lvgf                        0x000055e4cf0bd7a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b2956a1a460 __libc_start_main +
    245

    6    tmpdri1lvgf                        0x000055e4cf0bd2c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660013958
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades: [String] = []\n    for grade\
    \ in grades {\n        if grade >= 4.0 {\n            letterGrades.append(\"A+\"\
    )\n        } else if grade >= 3.7 {\n            letterGrades.append(\"A\")\n\
    \        } else if grade >= 3.3 {\n            letterGrades.append(\"A-\")\n \
    \       } else if grade >= 3.0 {\n            letterGrades.append(\"B+\")\n  \
    \      } else if grade >= 2.7 {\n            letterGrades.append(\"B\")\n    \
    \    } else if grade >= 2.3 {\n            letterGrades.append(\"B-\")\n     \
    \   } else if grade >= 2.0 {\n            letterGrades.append(\"C+\")\n      \
    \  } else if grade >= 1.7 {\n            letterGrades.append(\"C\")\n        }\
    \ else if grade >= 1.3 {\n            letterGrades.append(\"C-\")\n        } else\
    \ if grade >= 1.0 {\n            letterGrades.append(\"D+\")\n        } else if\
    \ grade >= 0.7 {\n            letterGrades.append(\"D\")\n        } else if grade\
    \ >= 0.0 {\n            letterGrades.append(\"D-\")\n        } else {\n      \
    \      letterGrades.append(\"E\")\n        }\n    }\n    return letterGrades\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpzd4bshlr/tmpzd4bshlr.swift:71: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b26274e3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b26271dab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b26271da988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b26271d97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzd4bshlr                        0x000056416df8a7a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b26276cf460 __libc_start_main +
    245

    6    tmpzd4bshlr                        0x000056416df8a2c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660013958
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var result: [String] = []\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            result.append(\"A+\")\n        } else\
    \ if grade >= 3.7 {\n            result.append(\"A\")\n        } else if grade\
    \ >= 3.3 {\n            result.append(\"A-\")\n        } else if grade >= 3.0\
    \ {\n            result.append(\"B+\")\n        } else if grade >= 2.7 {\n   \
    \         result.append(\"B\")\n        } else if grade >= 2.3 {\n           \
    \ result.append(\"B-\")\n        } else if grade >= 2.0 {\n            result.append(\"\
    C+\")\n        } else if grade >= 1.7 {\n            result.append(\"C\")\n  \
    \      } else if grade >= 1.3 {\n            result.append(\"C-\")\n        }\
    \ else if grade >= 1.0 {\n            result.append(\"D+\")\n        } else if\
    \ grade >= 0.7 {\n            result.append(\"D\")\n        } else if grade >=\
    \ 0.0 {\n            result.append(\"D-\")\n        } else {\n            result.append(\"\
    E\")\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2])\
    \ == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpdri1lvgf/tmpdri1lvgf.swift:71: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b295682ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2956525b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2956525988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b29565247b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdri1lvgf                        0x000055e4cf0bd7a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b2956a1a460 __libc_start_main +
    245

    6    tmpdri1lvgf                        0x000055e4cf0bd2c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660013958
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades: [String] = []\n    for grade\
    \ in grades {\n        if grade >= 4.0 {\n            letterGrades.append(\"A+\"\
    )\n        } else if grade >= 3.7 {\n            letterGrades.append(\"A\")\n\
    \        } else if grade >= 3.3 {\n            letterGrades.append(\"A-\")\n \
    \       } else if grade >= 3.0 {\n            letterGrades.append(\"B+\")\n  \
    \      } else if grade >= 2.7 {\n            letterGrades.append(\"B\")\n    \
    \    } else if grade >= 2.3 {\n            letterGrades.append(\"B-\")\n     \
    \   } else if grade >= 2.0 {\n            letterGrades.append(\"C+\")\n      \
    \  } else if grade >= 1.7 {\n            letterGrades.append(\"C\")\n        }\
    \ else if grade >= 1.3 {\n            letterGrades.append(\"C-\")\n        } else\
    \ if grade >= 1.0 {\n            letterGrades.append(\"D+\")\n        } else if\
    \ grade >= 0.7 {\n            letterGrades.append(\"D\")\n        } else if grade\
    \ >= 0.0 {\n            letterGrades.append(\"D-\")\n        } else {\n      \
    \      letterGrades.append(\"E\")\n        }\n    }\n    return letterGrades\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpzd4bshlr/tmpzd4bshlr.swift:71: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b26274e3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b26271dab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b26271da988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b26271d97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzd4bshlr                        0x000056416df8a7a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b26276cf460 __libc_start_main +
    245

    6    tmpzd4bshlr                        0x000056416df8a2c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660013958
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letter_grades: [String] = []\n    for grade\
    \ in grades {\n        if grade >= 4.0 {\n            letter_grades.append(\"\
    A+\")\n        } else if grade >= 3.7 {\n            letter_grades.append(\"A\"\
    )\n        } else if grade >= 3.3 {\n            letter_grades.append(\"A-\")\n\
    \        } else if grade >= 3.0 {\n            letter_grades.append(\"B+\")\n\
    \        } else if grade >= 2.7 {\n            letter_grades.append(\"B\")\n \
    \       } else if grade >= 2.3 {\n            letter_grades.append(\"B-\")\n \
    \       } else if grade >= 2.0 {\n            letter_grades.append(\"C+\")\n \
    \       } else if grade >= 1.7 {\n            letter_grades.append(\"C\")\n  \
    \      } else if grade >= 1.3 {\n            letter_grades.append(\"C-\")\n  \
    \      } else if grade >= 1.0 {\n            letter_grades.append(\"D+\")\n  \
    \      } else if grade >= 0.7 {\n            letter_grades.append(\"D\")\n   \
    \     } else if grade >= 0.0 {\n            letter_grades.append(\"D-\")\n   \
    \     } else {\n            letter_grades.append(\"E\")\n        }\n    }\n  \
    \  return letter_grades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpg5y0zgra/tmpg5y0zgra.swift:71: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8d221f6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8d21eedb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8d21eed988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8d21eec7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpg5y0zgra                        0x0000556d548d07a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b8d223e2460 __libc_start_main +
    245

    6    tmpg5y0zgra                        0x0000556d548d02c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660013958
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades: [String] = []\n    for grade\
    \ in grades {\n        if grade >= 4.0 {\n            letterGrades.append(\"A+\"\
    )\n        } else if grade >= 3.7 {\n            letterGrades.append(\"A\")\n\
    \        } else if grade >= 3.3 {\n            letterGrades.append(\"A-\")\n \
    \       } else if grade >= 3.0 {\n            letterGrades.append(\"B+\")\n  \
    \      } else if grade >= 2.7 {\n            letterGrades.append(\"B\")\n    \
    \    } else if grade >= 2.3 {\n            letterGrades.append(\"B-\")\n     \
    \   } else if grade >= 2.0 {\n            letterGrades.append(\"C+\")\n      \
    \  } else if grade >= 1.7 {\n            letterGrades.append(\"C\")\n        }\
    \ else if grade >= 1.3 {\n            letterGrades.append(\"C-\")\n        } else\
    \ if grade >= 1.0 {\n            letterGrades.append(\"D+\")\n        } else if\
    \ grade >= 0.7 {\n            letterGrades.append(\"D\")\n        } else if grade\
    \ >= 0.0 {\n            letterGrades.append(\"D-\")\n        } else {\n      \
    \      letterGrades.append(\"E\")\n        }\n    }\n    return letterGrades\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpzd4bshlr/tmpzd4bshlr.swift:71: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b26274e3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b26271dab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b26271da988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b26271d97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzd4bshlr                        0x000056416df8a7a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b26276cf460 __libc_start_main +
    245

    6    tmpzd4bshlr                        0x000056416df8a2c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660013958
- exit_code: 0
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades: [String] = []\n    for grade\
    \ in grades {\n        if grade == 4.0 {\n            letterGrades.append(\"A+\"\
    )\n        } else if grade > 3.7 {\n            letterGrades.append(\"A\")\n \
    \       } else if grade > 3.3 {\n            letterGrades.append(\"A-\")\n   \
    \     } else if grade > 3.0 {\n            letterGrades.append(\"B+\")\n     \
    \   } else if grade > 2.7 {\n            letterGrades.append(\"B\")\n        }\
    \ else if grade > 2.3 {\n            letterGrades.append(\"B-\")\n        } else\
    \ if grade > 2.0 {\n            letterGrades.append(\"C+\")\n        } else if\
    \ grade > 1.7 {\n            letterGrades.append(\"C\")\n        } else if grade\
    \ > 1.3 {\n            letterGrades.append(\"C-\")\n        } else if grade >\
    \ 1.0 {\n            letterGrades.append(\"D+\")\n        } else if grade > 0.7\
    \ {\n            letterGrades.append(\"D\")\n        } else if grade > 0.0 {\n\
    \            letterGrades.append(\"D-\")\n        } else {\n            letterGrades.append(\"\
    E\")\n        }\n    }\n    return letterGrades\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2])\
    \ == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013958
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades: [String] = []\n    for grade\
    \ in grades {\n        if grade >= 4.0 {\n            letterGrades.append(\"A+\"\
    )\n        } else if grade >= 3.7 {\n            letterGrades.append(\"A\")\n\
    \        } else if grade >= 3.3 {\n            letterGrades.append(\"A-\")\n \
    \       } else if grade >= 3.0 {\n            letterGrades.append(\"B+\")\n  \
    \      } else if grade >= 2.7 {\n            letterGrades.append(\"B\")\n    \
    \    } else if grade >= 2.3 {\n            letterGrades.append(\"B-\")\n     \
    \   } else if grade >= 2.0 {\n            letterGrades.append(\"C+\")\n      \
    \  } else if grade >= 1.7 {\n            letterGrades.append(\"C\")\n        }\
    \ else if grade >= 1.3 {\n            letterGrades.append(\"C-\")\n        } else\
    \ if grade >= 1.0 {\n            letterGrades.append(\"D+\")\n        } else if\
    \ grade >= 0.7 {\n            letterGrades.append(\"D\")\n        } else if grade\
    \ >= 0.0 {\n            letterGrades.append(\"D-\")\n        } else {\n      \
    \      letterGrades.append(\"E\")\n        }\n    }\n    return letterGrades\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpzd4bshlr/tmpzd4bshlr.swift:71: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b26274e3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b26271dab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b26271da988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b26271d97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzd4bshlr                        0x000056416df8a7a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b26276cf460 __libc_start_main +
    245

    6    tmpzd4bshlr                        0x000056416df8a2c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660013958
- exit_code: 0
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var result = [String]()\n    for grade in grades\
    \ {\n        if grade == 4.0 {\n            result.append(\"A+\")\n        } else\
    \ if grade > 3.7 {\n            result.append(\"A\")\n        } else if grade\
    \ > 3.3 {\n            result.append(\"A-\")\n        } else if grade > 3.0 {\n\
    \            result.append(\"B+\")\n        } else if grade > 2.7 {\n        \
    \    result.append(\"B\")\n        } else if grade > 2.3 {\n            result.append(\"\
    B-\")\n        } else if grade > 2.0 {\n            result.append(\"C+\")\n  \
    \      } else if grade > 1.7 {\n            result.append(\"C\")\n        } else\
    \ if grade > 1.3 {\n            result.append(\"C-\")\n        } else if grade\
    \ > 1.0 {\n            result.append(\"D+\")\n        } else if grade > 0.7 {\n\
    \            result.append(\"D\")\n        } else if grade > 0.0 {\n         \
    \   result.append(\"D-\")\n        } else {\n            result.append(\"E\")\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2]) == [\"\
    D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013958
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades: [String] = []\n    for grade\
    \ in grades {\n        if grade >= 4.0 {\n            letterGrades.append(\"A+\"\
    )\n        } else if grade >= 3.7 {\n            letterGrades.append(\"A\")\n\
    \        } else if grade >= 3.3 {\n            letterGrades.append(\"A-\")\n \
    \       } else if grade >= 3.0 {\n            letterGrades.append(\"B+\")\n  \
    \      } else if grade >= 2.7 {\n            letterGrades.append(\"B\")\n    \
    \    } else if grade >= 2.3 {\n            letterGrades.append(\"B-\")\n     \
    \   } else if grade >= 2.0 {\n            letterGrades.append(\"C+\")\n      \
    \  } else if grade >= 1.7 {\n            letterGrades.append(\"C\")\n        }\
    \ else if grade >= 1.3 {\n            letterGrades.append(\"C-\")\n        } else\
    \ if grade >= 1.0 {\n            letterGrades.append(\"D+\")\n        } else if\
    \ grade >= 0.7 {\n            letterGrades.append(\"D\")\n        } else if grade\
    \ >= 0.0 {\n            letterGrades.append(\"D-\")\n        } else {\n      \
    \      letterGrades.append(\"E\")\n        }\n    }\n    return letterGrades\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpzd4bshlr/tmpzd4bshlr.swift:71: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b26274e3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b26271dab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b26271da988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b26271d97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzd4bshlr                        0x000056416df8a7a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b26276cf460 __libc_start_main +
    245

    6    tmpzd4bshlr                        0x000056416df8a2c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660013958
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades: [String] = []\n    for grade\
    \ in grades {\n        if grade >= 4.0 {\n            letterGrades.append(\"A+\"\
    )\n        } else if grade >= 3.7 {\n            letterGrades.append(\"A\")\n\
    \        } else if grade >= 3.3 {\n            letterGrades.append(\"A-\")\n \
    \       } else if grade >= 3.0 {\n            letterGrades.append(\"B+\")\n  \
    \      } else if grade >= 2.7 {\n            letterGrades.append(\"B\")\n    \
    \    } else if grade >= 2.3 {\n            letterGrades.append(\"B-\")\n     \
    \   } else if grade >= 2.0 {\n            letterGrades.append(\"C+\")\n      \
    \  } else if grade >= 1.7 {\n            letterGrades.append(\"C\")\n        }\
    \ else if grade >= 1.3 {\n            letterGrades.append(\"C-\")\n        } else\
    \ if grade >= 1.0 {\n            letterGrades.append(\"D+\")\n        } else if\
    \ grade >= 0.7 {\n            letterGrades.append(\"D\")\n        } else if grade\
    \ >= 0.0 {\n            letterGrades.append(\"D-\")\n        } else {\n      \
    \      letterGrades.append(\"E\")\n        }\n    }\n    return letterGrades\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpzd4bshlr/tmpzd4bshlr.swift:71: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b26274e3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b26271dab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b26271da988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b26271d97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzd4bshlr                        0x000056416df8a7a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b26276cf460 __libc_start_main +
    245

    6    tmpzd4bshlr                        0x000056416df8a2c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660013958
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var result: [String] = []\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            result.append(\"A+\")\n        } else\
    \ if grade >= 3.7 {\n            result.append(\"A\")\n        } else if grade\
    \ >= 3.3 {\n            result.append(\"A-\")\n        } else if grade >= 3.0\
    \ {\n            result.append(\"B+\")\n        } else if grade >= 2.7 {\n   \
    \         result.append(\"B\")\n        } else if grade >= 2.3 {\n           \
    \ result.append(\"B-\")\n        } else if grade >= 2.0 {\n            result.append(\"\
    C+\")\n        } else if grade >= 1.7 {\n            result.append(\"C\")\n  \
    \      } else if grade >= 1.3 {\n            result.append(\"C-\")\n        }\
    \ else if grade >= 1.0 {\n            result.append(\"D+\")\n        } else if\
    \ grade >= 0.7 {\n            result.append(\"D\")\n        } else if grade >=\
    \ 0.0 {\n            result.append(\"D-\")\n        } else {\n            result.append(\"\
    E\")\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2])\
    \ == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpdri1lvgf/tmpdri1lvgf.swift:71: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b295682ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2956525b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2956525988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b29565247b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdri1lvgf                        0x000055e4cf0bd7a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b2956a1a460 __libc_start_main +
    245

    6    tmpdri1lvgf                        0x000055e4cf0bd2c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660013958
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades: [String] = []\n    for grade\
    \ in grades {\n        if grade >= 4.0 {\n            letterGrades.append(\"A+\"\
    )\n        } else if grade >= 3.7 {\n            letterGrades.append(\"A\")\n\
    \        } else if grade >= 3.3 {\n            letterGrades.append(\"A-\")\n \
    \       } else if grade >= 3.0 {\n            letterGrades.append(\"B+\")\n  \
    \      } else if grade >= 2.7 {\n            letterGrades.append(\"B\")\n    \
    \    } else if grade >= 2.3 {\n            letterGrades.append(\"B-\")\n     \
    \   } else if grade >= 2.0 {\n            letterGrades.append(\"C+\")\n      \
    \  } else if grade >= 1.7 {\n            letterGrades.append(\"C\")\n        }\
    \ else if grade >= 1.3 {\n            letterGrades.append(\"C-\")\n        } else\
    \ if grade >= 1.0 {\n            letterGrades.append(\"D+\")\n        } else if\
    \ grade >= 0.7 {\n            letterGrades.append(\"D\")\n        } else if grade\
    \ >= 0.0 {\n            letterGrades.append(\"D-\")\n        } else {\n      \
    \      letterGrades.append(\"E\")\n        }\n    }\n    return letterGrades\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpzd4bshlr/tmpzd4bshlr.swift:71: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b26274e3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b26271dab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b26271da988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b26271d97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzd4bshlr                        0x000056416df8a7a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b26276cf460 __libc_start_main +
    245

    6    tmpzd4bshlr                        0x000056416df8a2c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660013958
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades = [String]()\n    for grade in\
    \ grades {\n        switch grade {\n        case 4.0:\n            letterGrades.append(\"\
    A+\")\n        case 3.7..<4.0:\n            letterGrades.append(\"A\")\n     \
    \   case 3.3..<3.7:\n            letterGrades.append(\"A-\")\n        case 3.0..<3.3:\n\
    \            letterGrades.append(\"B+\")\n        case 2.7..<3.0:\n          \
    \  letterGrades.append(\"B\")\n        case 2.3..<2.7:\n            letterGrades.append(\"\
    B-\")\n        case 2.0..<2.3:\n            letterGrades.append(\"C+\")\n    \
    \    case 1.7..<2.0:\n            letterGrades.append(\"C\")\n        case 1.3..<1.7:\n\
    \            letterGrades.append(\"C-\")\n        case 1.0..<1.3:\n          \
    \  letterGrades.append(\"D+\")\n        case 0.7..<1.0:\n            letterGrades.append(\"\
    D\")\n        case 0.0..<0.7:\n            letterGrades.append(\"D-\")\n     \
    \   case 0.0:\n            letterGrades.append(\"E\")\n        default:\n    \
    \        letterGrades.append(\"Invalid GPA\")\n        }\n    }\n    return letterGrades\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpc8_bzq_4/tmpc8_bzq_4.swift:74: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad2f1d67c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad2f1a5eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad2f1a5e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad2f1a5d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpc8_bzq_4                        0x000055ddfc7f1926 <unavailable> + 6438

    5    libc.so.6                          0x00002ad2f1f53460 __libc_start_main +
    245

    6    tmpc8_bzq_4                        0x000055ddfc7f1449 <unavailable> + 5193

    '
  stdout: ''
  timestamp: 1660013958
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades: [String] = []\n    for grade\
    \ in grades {\n        if grade >= 4.0 {\n            letterGrades.append(\"A+\"\
    )\n        } else if grade >= 3.7 {\n            letterGrades.append(\"A\")\n\
    \        } else if grade >= 3.3 {\n            letterGrades.append(\"A-\")\n \
    \       } else if grade >= 3.0 {\n            letterGrades.append(\"B+\")\n  \
    \      } else if grade >= 2.7 {\n            letterGrades.append(\"B\")\n    \
    \    } else if grade >= 2.3 {\n            letterGrades.append(\"B-\")\n     \
    \   } else if grade >= 2.0 {\n            letterGrades.append(\"C+\")\n      \
    \  } else if grade >= 1.7 {\n            letterGrades.append(\"C\")\n        }\
    \ else if grade >= 1.3 {\n            letterGrades.append(\"C-\")\n        } else\
    \ if grade >= 1.0 {\n            letterGrades.append(\"D+\")\n        } else if\
    \ grade >= 0.7 {\n            letterGrades.append(\"D\")\n        } else if grade\
    \ >= 0.0 {\n            letterGrades.append(\"D-\")\n        } else {\n      \
    \      letterGrades.append(\"E\")\n        }\n    }\n    return letterGrades\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpzd4bshlr/tmpzd4bshlr.swift:71: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b26274e3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b26271dab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b26271da988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b26271d97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzd4bshlr                        0x000056416df8a7a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b26276cf460 __libc_start_main +
    245

    6    tmpzd4bshlr                        0x000056416df8a2c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660013958
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var grades = grades\n    var result = [String]()\n\
    \    for i in 0..<grades.count {\n        if grades[i] >= 4.0 {\n            result.append(\"\
    A+\")\n        } else if grades[i] >= 3.7 {\n            result.append(\"A\")\n\
    \        } else if grades[i] >= 3.3 {\n            result.append(\"A-\")\n   \
    \     } else if grades[i] >= 3.0 {\n            result.append(\"B+\")\n      \
    \  } else if grades[i] >= 2.7 {\n            result.append(\"B\")\n        } else\
    \ if grades[i] >= 2.3 {\n            result.append(\"B-\")\n        } else if\
    \ grades[i] >= 2.0 {\n            result.append(\"C+\")\n        } else if grades[i]\
    \ >= 1.7 {\n            result.append(\"C\")\n        } else if grades[i] >= 1.3\
    \ {\n            result.append(\"C-\")\n        } else if grades[i] >= 1.0 {\n\
    \            result.append(\"D+\")\n        } else if grades[i] >= 0.7 {\n   \
    \         result.append(\"D\")\n        } else if grades[i] >= 0.0 {\n       \
    \     result.append(\"D-\")\n        } else {\n            result.append(\"E\"\
    )\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2]) == [\"\
    D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmppiznk24p/tmppiznk24p.swift:72: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4ba553bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4ba5232b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4ba5232988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4ba52317b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppiznk24p                        0x00005583271e88c6 <unavailable> + 6342

    5    libc.so.6                          0x00002b4ba5727460 __libc_start_main +
    245

    6    tmppiznk24p                        0x00005583271e83e9 <unavailable> + 5097

    '
  stdout: ''
  timestamp: 1660013958
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var result = [String]()\n    for grade in grades\
    \ {\n        switch grade {\n        case 4.0:\n            result.append(\"A+\"\
    )\n        case 3.7..<4.0:\n            result.append(\"A\")\n        case 3.3..<3.7:\n\
    \            result.append(\"A-\")\n        case 3.0..<3.3:\n            result.append(\"\
    B+\")\n        case 2.7..<3.0:\n            result.append(\"B\")\n        case\
    \ 2.3..<2.7:\n            result.append(\"B-\")\n        case 2.0..<2.3:\n   \
    \         result.append(\"C+\")\n        case 1.7..<2.0:\n            result.append(\"\
    C\")\n        case 1.3..<1.7:\n            result.append(\"C-\")\n        case\
    \ 1.0..<1.3:\n            result.append(\"D+\")\n        case 0.7..<1.0:\n   \
    \         result.append(\"D\")\n        case 0.0..<0.7:\n            result.append(\"\
    D-\")\n        case 0.0:\n            result.append(\"E\")\n        default:\n\
    \            result.append(\"Invalid GPA\")\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpo3q2bi3a/tmpo3q2bi3a.swift:74: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae008ec7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae008bbeb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae008bbe988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae008bbd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpo3q2bi3a                        0x000055d80c35d926 <unavailable> + 6438

    5    libc.so.6                          0x00002ae0090b3460 __libc_start_main +
    245

    6    tmpo3q2bi3a                        0x000055d80c35d449 <unavailable> + 5193

    '
  stdout: ''
  timestamp: 1660013958
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades: [String] = []\n    for grade\
    \ in grades {\n        if grade >= 4.0 {\n            letterGrades.append(\"A+\"\
    )\n        } else if grade >= 3.7 {\n            letterGrades.append(\"A\")\n\
    \        } else if grade >= 3.3 {\n            letterGrades.append(\"A-\")\n \
    \       } else if grade >= 3.0 {\n            letterGrades.append(\"B+\")\n  \
    \      } else if grade >= 2.7 {\n            letterGrades.append(\"B\")\n    \
    \    } else if grade >= 2.3 {\n            letterGrades.append(\"B-\")\n     \
    \   } else if grade >= 2.0 {\n            letterGrades.append(\"C+\")\n      \
    \  } else if grade >= 1.7 {\n            letterGrades.append(\"C\")\n        }\
    \ else if grade >= 1.3 {\n            letterGrades.append(\"C-\")\n        } else\
    \ if grade >= 1.0 {\n            letterGrades.append(\"D+\")\n        } else if\
    \ grade >= 0.7 {\n            letterGrades.append(\"D\")\n        } else if grade\
    \ >= 0.0 {\n            letterGrades.append(\"D-\")\n        } else {\n      \
    \      letterGrades.append(\"E\")\n        }\n    }\n    return letterGrades\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpzd4bshlr/tmpzd4bshlr.swift:71: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b26274e3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b26271dab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b26271da988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b26271d97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzd4bshlr                        0x000056416df8a7a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b26276cf460 __libc_start_main +
    245

    6    tmpzd4bshlr                        0x000056416df8a2c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660013958
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letter_grades = [String]()\n    for grade in\
    \ grades {\n        if grade >= 4.0 {\n            letter_grades.append(\"A+\"\
    )\n        } else if grade >= 3.7 {\n            letter_grades.append(\"A\")\n\
    \        } else if grade >= 3.3 {\n            letter_grades.append(\"A-\")\n\
    \        } else if grade >= 3.0 {\n            letter_grades.append(\"B+\")\n\
    \        } else if grade >= 2.7 {\n            letter_grades.append(\"B\")\n \
    \       } else if grade >= 2.3 {\n            letter_grades.append(\"B-\")\n \
    \       } else if grade >= 2.0 {\n            letter_grades.append(\"C+\")\n \
    \       } else if grade >= 1.7 {\n            letter_grades.append(\"C\")\n  \
    \      } else if grade >= 1.3 {\n            letter_grades.append(\"C-\")\n  \
    \      } else if grade >= 1.0 {\n            letter_grades.append(\"D+\")\n  \
    \      } else if grade >= 0.7 {\n            letter_grades.append(\"D\")\n   \
    \     } else if grade >= 0.0 {\n            letter_grades.append(\"D-\")\n   \
    \     } else {\n            letter_grades.append(\"E\")\n        }\n    }\n  \
    \  return letter_grades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpxz159fh_/tmpxz159fh_.swift:71: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8a9995ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8a99651b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8a99651988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8a996507b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxz159fh_                        0x000055e14d06c7f6 <unavailable> + 6134

    5    libc.so.6                          0x00002b8a99b46460 __libc_start_main +
    245

    6    tmpxz159fh_                        0x000055e14d06c319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1660013958
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letter_grades = [String]()\n    for grade in\
    \ grades {\n        if grade >= 4.0 {\n            letter_grades.append(\"A+\"\
    )\n        } else if grade >= 3.7 {\n            letter_grades.append(\"A\")\n\
    \        } else if grade >= 3.3 {\n            letter_grades.append(\"A-\")\n\
    \        } else if grade >= 3.0 {\n            letter_grades.append(\"B+\")\n\
    \        } else if grade >= 2.7 {\n            letter_grades.append(\"B\")\n \
    \       } else if grade >= 2.3 {\n            letter_grades.append(\"B-\")\n \
    \       } else if grade >= 2.0 {\n            letter_grades.append(\"C+\")\n \
    \       } else if grade >= 1.7 {\n            letter_grades.append(\"C\")\n  \
    \      } else if grade >= 1.3 {\n            letter_grades.append(\"C-\")\n  \
    \      } else if grade >= 1.0 {\n            letter_grades.append(\"D+\")\n  \
    \      } else if grade >= 0.7 {\n            letter_grades.append(\"D\")\n   \
    \     } else if grade >= 0.0 {\n            letter_grades.append(\"D-\")\n   \
    \     } else {\n            letter_grades.append(\"E\")\n        }\n    }\n  \
    \  return letter_grades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpxz159fh_/tmpxz159fh_.swift:71: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8a9995ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8a99651b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8a99651988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8a996507b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxz159fh_                        0x000055e14d06c7f6 <unavailable> + 6134

    5    libc.so.6                          0x00002b8a99b46460 __libc_start_main +
    245

    6    tmpxz159fh_                        0x000055e14d06c319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1660013958
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades = [String]()\n    for grade in\
    \ grades {\n        if grade >= 4.0 {\n            letterGrades.append(\"A+\"\
    )\n        } else if grade >= 3.7 {\n            letterGrades.append(\"A\")\n\
    \        } else if grade >= 3.3 {\n            letterGrades.append(\"A-\")\n \
    \       } else if grade >= 3.0 {\n            letterGrades.append(\"B+\")\n  \
    \      } else if grade >= 2.7 {\n            letterGrades.append(\"B\")\n    \
    \    } else if grade >= 2.3 {\n            letterGrades.append(\"B-\")\n     \
    \   } else if grade >= 2.0 {\n            letterGrades.append(\"C+\")\n      \
    \  } else if grade >= 1.7 {\n            letterGrades.append(\"C\")\n        }\
    \ else if grade >= 1.3 {\n            letterGrades.append(\"C-\")\n        } else\
    \ if grade >= 1.0 {\n            letterGrades.append(\"D+\")\n        } else if\
    \ grade >= 0.7 {\n            letterGrades.append(\"D\")\n        } else if grade\
    \ >= 0.0 {\n            letterGrades.append(\"D-\")\n        } else {\n      \
    \      letterGrades.append(\"E\")\n        }\n    }\n    return letterGrades\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmp_e648e_q/tmp_e648e_q.swift:71: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae1592c1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae158fb8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae158fb8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae158fb77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_e648e_q                        0x0000559655f5e7f6 <unavailable> + 6134

    5    libc.so.6                          0x00002ae1594ad460 __libc_start_main +
    245

    6    tmp_e648e_q                        0x0000559655f5e319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1660013958
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var result: [String] = []\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            result.append(\"A+\")\n        } else\
    \ if grade >= 3.7 {\n            result.append(\"A\")\n        } else if grade\
    \ >= 3.3 {\n            result.append(\"A-\")\n        } else if grade >= 3.0\
    \ {\n            result.append(\"B+\")\n        } else if grade >= 2.7 {\n   \
    \         result.append(\"B\")\n        } else if grade >= 2.3 {\n           \
    \ result.append(\"B-\")\n        } else if grade >= 2.0 {\n            result.append(\"\
    C+\")\n        } else if grade >= 1.7 {\n            result.append(\"C\")\n  \
    \      } else if grade >= 1.3 {\n            result.append(\"C-\")\n        }\
    \ else if grade >= 1.0 {\n            result.append(\"D+\")\n        } else if\
    \ grade >= 0.7 {\n            result.append(\"D\")\n        } else if grade >=\
    \ 0.0 {\n            result.append(\"D-\")\n        } else {\n            result.append(\"\
    E\")\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2])\
    \ == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpdri1lvgf/tmpdri1lvgf.swift:71: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b295682ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2956525b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2956525988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b29565247b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdri1lvgf                        0x000055e4cf0bd7a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b2956a1a460 __libc_start_main +
    245

    6    tmpdri1lvgf                        0x000055e4cf0bd2c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660013958
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var result: [String] = []\n    for grade in grades\
    \ {\n        switch grade {\n        case 4.0:\n            result.append(\"A+\"\
    )\n        case 3.7..<4.0:\n            result.append(\"A\")\n        case 3.3..<3.7:\n\
    \            result.append(\"A-\")\n        case 3.0..<3.3:\n            result.append(\"\
    B+\")\n        case 2.7..<3.0:\n            result.append(\"B\")\n        case\
    \ 2.3..<2.7:\n            result.append(\"B-\")\n        case 2.0..<2.3:\n   \
    \         result.append(\"C+\")\n        case 1.7..<2.0:\n            result.append(\"\
    C\")\n        case 1.3..<1.7:\n            result.append(\"C-\")\n        case\
    \ 1.0..<1.3:\n            result.append(\"D+\")\n        case 0.7..<1.0:\n   \
    \         result.append(\"D\")\n        case 0.0..<0.7:\n            result.append(\"\
    D-\")\n        case 0.0:\n            result.append(\"E\")\n        default:\n\
    \            result.append(\"Invalid\")\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpnvkt28oz/tmpnvkt28oz.swift:74: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8c0fd42c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8c0fa39b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8c0fa39988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8c0fa387b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnvkt28oz                        0x0000556dd690d8d6 <unavailable> + 6358

    5    libc.so.6                          0x00002b8c0ff2e460 __libc_start_main +
    245

    6    tmpnvkt28oz                        0x0000556dd690d3f9 <unavailable> + 5113

    '
  stdout: ''
  timestamp: 1660013958
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    // your code here\n    return []\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5])\
    \ == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpdb23odh5/tmpdb23odh5.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad95ae23c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad95ab1ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad95ab1a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad95ab197b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdb23odh5                        0x00005602ef2735e6 <unavailable> + 5606

    5    libc.so.6                          0x00002ad95b00f460 __libc_start_main +
    245

    6    tmpdb23odh5                        0x00005602ef273109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660013958
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades: [String] = []\n    for grade\
    \ in grades {\n        if grade >= 4.0 {\n            letterGrades.append(\"A+\"\
    )\n        } else if grade >= 3.7 {\n            letterGrades.append(\"A\")\n\
    \        } else if grade >= 3.3 {\n            letterGrades.append(\"A-\")\n \
    \       } else if grade >= 3.0 {\n            letterGrades.append(\"B+\")\n  \
    \      } else if grade >= 2.7 {\n            letterGrades.append(\"B\")\n    \
    \    } else if grade >= 2.3 {\n            letterGrades.append(\"B-\")\n     \
    \   } else if grade >= 2.0 {\n            letterGrades.append(\"C+\")\n      \
    \  } else if grade >= 1.7 {\n            letterGrades.append(\"C\")\n        }\
    \ else if grade >= 1.3 {\n            letterGrades.append(\"C-\")\n        } else\
    \ if grade >= 1.0 {\n            letterGrades.append(\"D+\")\n        } else if\
    \ grade >= 0.7 {\n            letterGrades.append(\"D\")\n        } else if grade\
    \ >= 0.0 {\n            letterGrades.append(\"D-\")\n        } else {\n      \
    \      letterGrades.append(\"E\")\n        }\n    }\n    return letterGrades\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpzd4bshlr/tmpzd4bshlr.swift:71: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b26274e3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b26271dab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b26271da988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b26271d97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzd4bshlr                        0x000056416df8a7a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b26276cf460 __libc_start_main +
    245

    6    tmpzd4bshlr                        0x000056416df8a2c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660013958
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var result: [String] = []\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            result.append(\"A+\")\n        } else\
    \ if grade >= 3.7 {\n            result.append(\"A\")\n        } else if grade\
    \ >= 3.3 {\n            result.append(\"A-\")\n        } else if grade >= 3.0\
    \ {\n            result.append(\"B+\")\n        } else if grade >= 2.7 {\n   \
    \         result.append(\"B\")\n        } else if grade >= 2.3 {\n           \
    \ result.append(\"B-\")\n        } else if grade >= 2.0 {\n            result.append(\"\
    C+\")\n        } else if grade >= 1.7 {\n            result.append(\"C\")\n  \
    \      } else if grade >= 1.3 {\n            result.append(\"C-\")\n        }\
    \ else if grade >= 1.0 {\n            result.append(\"D+\")\n        } else if\
    \ grade >= 0.7 {\n            result.append(\"D\")\n        } else if grade >=\
    \ 0.0 {\n            result.append(\"D-\")\n        } else {\n            result.append(\"\
    E\")\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2])\
    \ == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpdri1lvgf/tmpdri1lvgf.swift:71: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b295682ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2956525b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2956525988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b29565247b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdri1lvgf                        0x000055e4cf0bd7a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b2956a1a460 __libc_start_main +
    245

    6    tmpdri1lvgf                        0x000055e4cf0bd2c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660013958
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades = [String]()\n    for grade in\
    \ grades {\n        switch grade {\n        case 4.0:\n            letterGrades.append(\"\
    A+\")\n        case 3.7..<4.0:\n            letterGrades.append(\"A\")\n     \
    \   case 3.3..<3.7:\n            letterGrades.append(\"A-\")\n        case 3.0..<3.3:\n\
    \            letterGrades.append(\"B+\")\n        case 2.7..<3.0:\n          \
    \  letterGrades.append(\"B\")\n        case 2.3..<2.7:\n            letterGrades.append(\"\
    B-\")\n        case 2.0..<2.3:\n            letterGrades.append(\"C+\")\n    \
    \    case 1.7..<2.0:\n            letterGrades.append(\"C\")\n        case 1.3..<1.7:\n\
    \            letterGrades.append(\"C-\")\n        case 1.0..<1.3:\n          \
    \  letterGrades.append(\"D+\")\n        case 0.7..<1.0:\n            letterGrades.append(\"\
    D\")\n        case 0.0..<0.7:\n            letterGrades.append(\"D-\")\n     \
    \   case 0.0:\n            letterGrades.append(\"E\")\n        default:\n    \
    \        letterGrades.append(\"Invalid grade\")\n        }\n    }\n    return\
    \ letterGrades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpsedols6m/tmpsedols6m.swift:74: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b93f0f34c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b93f0c2bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b93f0c2b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b93f0c2a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsedols6m                        0x00005643bd92d926 <unavailable> + 6438

    5    libc.so.6                          0x00002b93f1120460 __libc_start_main +
    245

    6    tmpsedols6m                        0x00005643bd92d449 <unavailable> + 5193

    '
  stdout: ''
  timestamp: 1660013958
