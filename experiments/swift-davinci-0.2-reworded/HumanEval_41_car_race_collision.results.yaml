language: swift
name: HumanEval_41_car_race_collision
results:
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = Array(repeating: 0, count: n)\n    var\
    \ right_to_left = Array(repeating: 0, count: n)\n    for i in 0..<n {\n      \
    \  left_to_right[i] = i\n        right_to_left[i] = n - i - 1\n    }\n    var\
    \ count = 0\n    for i in 0..<n {\n        for j in 0..<n {\n            if left_to_right[i]\
    \ == right_to_left[j] {\n                count += 1\n            }\n        }\n\
    \    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(car_race_collision(n:\
    \ 2) == 4)\nassert(car_race_collision(n: 3) == 9)\nassert(car_race_collision(n:\
    \ 4) == 16)\nassert(car_race_collision(n: 8) == 64)\nassert(car_race_collision(n:\
    \ 10) == 100)"
  status: Exception
  stderr: 'tmphqqnov2d/tmphqqnov2d.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad1ab38ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad1ab081b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad1ab081988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad1ab0807b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphqqnov2d                        0x0000560f44940455 <unavailable> + 5205

    5    libc.so.6                          0x00002ad1ab576460 __libc_start_main +
    245

    6    tmphqqnov2d                        0x0000560f44940109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660012166
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int](repeating: 0, count: n)\n    var\
    \ right_to_left = [Int](repeating: 0, count: n)\n    for i in 0..<n {\n      \
    \  left_to_right[i] = i\n        right_to_left[i] = n - i - 1\n    }\n    var\
    \ collisions = 0\n    for i in 0..<n {\n        for j in 0..<n {\n           \
    \ if left_to_right[i] == right_to_left[j] {\n                collisions += 1\n\
    \            }\n        }\n    }\n    return collisions\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmpy5_5e537/tmpy5_5e537.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4d882b4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4d87fabb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4d87fab988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4d87faa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpy5_5e537                        0x0000557cb2403455 <unavailable> + 5205

    5    libc.so.6                          0x00002b4d884a0460 __libc_start_main +
    245

    6    tmpy5_5e537                        0x0000557cb2403109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660012166
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = Array(0..<n)\n    var right_to_left =\
    \ Array(0..<n)\n    left_to_right.sort()\n    right_to_left.sort()\n    var collisions\
    \ = 0\n    var i = 0\n    var j = 0\n    while i < n && j < n {\n        if left_to_right[i]\
    \ < right_to_left[j] {\n            collisions += j\n            i += 1\n    \
    \    } else {\n            j += 1\n        }\n    }\n    collisions += j * (n\
    \ - i)\n    return collisions\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(car_race_collision(n:\
    \ 2) == 4)\nassert(car_race_collision(n: 3) == 9)\nassert(car_race_collision(n:\
    \ 4) == 16)\nassert(car_race_collision(n: 8) == 64)\nassert(car_race_collision(n:\
    \ 10) == 100)"
  status: Exception
  stderr: 'tmpurd7e6eb/tmpurd7e6eb.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6cfdb6fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6cfd866b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6cfd866988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6cfd8657b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpurd7e6eb                        0x000055ea8c6954f5 <unavailable> + 5365

    5    libc.so.6                          0x00002b6cfdd5b460 __libc_start_main +
    245

    6    tmpurd7e6eb                        0x000055ea8c6951a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660012166
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = Array(repeating: 0, count: n)\n    var\
    \ right_to_left = Array(repeating: 0, count: n)\n    for i in 0..<n {\n      \
    \  left_to_right[i] = i\n        right_to_left[i] = n - i - 1\n    }\n    var\
    \ count = 0\n    for i in 0..<n {\n        for j in 0..<n {\n            if left_to_right[i]\
    \ == right_to_left[j] {\n                count += 1\n            }\n        }\n\
    \    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(car_race_collision(n:\
    \ 2) == 4)\nassert(car_race_collision(n: 3) == 9)\nassert(car_race_collision(n:\
    \ 4) == 16)\nassert(car_race_collision(n: 8) == 64)\nassert(car_race_collision(n:\
    \ 10) == 100)"
  status: Exception
  stderr: 'tmphqqnov2d/tmphqqnov2d.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad1ab38ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad1ab081b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad1ab081988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad1ab0807b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphqqnov2d                        0x0000560f44940455 <unavailable> + 5205

    5    libc.so.6                          0x00002ad1ab576460 __libc_start_main +
    245

    6    tmphqqnov2d                        0x0000560f44940109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660012166
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int](repeating: 0, count: n)\n    var\
    \ right_to_left = [Int](repeating: 0, count: n)\n    for i in 0..<n {\n      \
    \  left_to_right[i] = i\n        right_to_left[i] = n - i - 1\n    }\n    var\
    \ collisions = 0\n    var i = 0\n    var j = 0\n    while i < n && j < n {\n \
    \       if left_to_right[i] < right_to_left[j] {\n            collisions += j\n\
    \            i += 1\n        } else {\n            j += 1\n        }\n    }\n\
    \    return collisions\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(car_race_collision(n:\
    \ 2) == 4)\nassert(car_race_collision(n: 3) == 9)\nassert(car_race_collision(n:\
    \ 4) == 16)\nassert(car_race_collision(n: 8) == 64)\nassert(car_race_collision(n:\
    \ 10) == 100)"
  status: Exception
  stderr: 'tmpopbqhmvo/tmpopbqhmvo.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae984848c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae98453fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae98453f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae98453e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpopbqhmvo                        0x00005585de3a5455 <unavailable> + 5205

    5    libc.so.6                          0x00002ae984a34460 __libc_start_main +
    245

    6    tmpopbqhmvo                        0x00005585de3a5109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660012167
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int](repeating: 0, count: n)\n    var\
    \ right_to_left = [Int](repeating: 0, count: n)\n    for i in 0..<n {\n      \
    \  left_to_right[i] = i\n        right_to_left[i] = n - i - 1\n    }\n    var\
    \ count = 0\n    for i in 0..<n {\n        for j in 0..<n {\n            if left_to_right[i]\
    \ == right_to_left[j] {\n                count += 1\n            }\n        }\n\
    \    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(car_race_collision(n:\
    \ 2) == 4)\nassert(car_race_collision(n: 3) == 9)\nassert(car_race_collision(n:\
    \ 4) == 16)\nassert(car_race_collision(n: 8) == 64)\nassert(car_race_collision(n:\
    \ 10) == 100)"
  status: Exception
  stderr: 'tmpeixhzo9y/tmpeixhzo9y.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b261dd57c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b261da4eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b261da4e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b261da4d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeixhzo9y                        0x00005571c4c4f455 <unavailable> + 5205

    5    libc.so.6                          0x00002b261df43460 __libc_start_main +
    245

    6    tmpeixhzo9y                        0x00005571c4c4f109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660012166
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int](repeating: 0, count: n)\n    var\
    \ right_to_left = [Int](repeating: 0, count: n)\n    for i in 0..<n {\n      \
    \  left_to_right[i] = i\n        right_to_left[i] = n - i - 1\n    }\n    var\
    \ collision = 0\n    for i in 0..<n {\n        for j in 0..<n {\n            if\
    \ left_to_right[i] == right_to_left[j] {\n                collision += 1\n   \
    \         }\n        }\n    }\n    return collision\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmpdl63q81s/tmpdl63q81s.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8e81d40c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8e81a37b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8e81a37988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8e81a367b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdl63q81s                        0x0000558b4d6b7455 <unavailable> + 5205

    5    libc.so.6                          0x00002b8e81f2c460 __libc_start_main +
    245

    6    tmpdl63q81s                        0x0000558b4d6b7109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660012166
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left = [Int](repeating: 0, count: n)\n    var right =\
    \ [Int](repeating: 0, count: n)\n    for i in 0..<n {\n        left[i] = i\n \
    \       right[i] = n - i - 1\n    }\n    var collisions = 0\n    for i in 0..<n\
    \ {\n        for j in 0..<n {\n            if left[i] == right[j] {\n        \
    \        collisions += 1\n            }\n        }\n    }\n    return collisions\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmp37vklzw9/tmp37vklzw9.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8dfaf59c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8dfac50b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8dfac50988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8dfac4f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp37vklzw9                        0x000055d2fd5ed455 <unavailable> + 5205

    5    libc.so.6                          0x00002b8dfb145460 __libc_start_main +
    245

    6    tmp37vklzw9                        0x000055d2fd5ed109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660012166
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    // TODO: implement this function\n    return 0\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmp7nd_k2hm/tmp7nd_k2hm.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adaa67e2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adaa64d9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adaa64d9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adaa64d87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7nd_k2hm                        0x000055d1b4d691b5 <unavailable> + 4533

    5    libc.so.6                          0x00002adaa69ce460 __libc_start_main +
    245

    6    tmp7nd_k2hm                        0x000055d1b4d68e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660012166
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int](repeating: 0, count: n)\n    var\
    \ right_to_left = [Int](repeating: 0, count: n)\n    for i in 0..<n {\n      \
    \  left_to_right[i] = i\n        right_to_left[i] = n - i - 1\n    }\n    var\
    \ count = 0\n    for i in 0..<n {\n        for j in 0..<n {\n            if left_to_right[i]\
    \ == right_to_left[j] {\n                count += 1\n            }\n        }\n\
    \    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(car_race_collision(n:\
    \ 2) == 4)\nassert(car_race_collision(n: 3) == 9)\nassert(car_race_collision(n:\
    \ 4) == 16)\nassert(car_race_collision(n: 8) == 64)\nassert(car_race_collision(n:\
    \ 10) == 100)"
  status: Exception
  stderr: 'tmpeixhzo9y/tmpeixhzo9y.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b261dd57c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b261da4eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b261da4e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b261da4d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeixhzo9y                        0x00005571c4c4f455 <unavailable> + 5205

    5    libc.so.6                          0x00002b261df43460 __libc_start_main +
    245

    6    tmpeixhzo9y                        0x00005571c4c4f109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660012166
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int](repeating: 0, count: n)\n    var\
    \ right_to_left = [Int](repeating: 0, count: n)\n    var collision = 0\n    for\
    \ i in 0..<n {\n        left_to_right[i] = i\n        right_to_left[i] = n - i\
    \ - 1\n    }\n    for i in 0..<n {\n        for j in 0..<n {\n            if left_to_right[i]\
    \ == right_to_left[j] {\n                collision += 1\n            }\n     \
    \   }\n    }\n    return collision\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n: 3) == 9)\n\
    assert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n: 8) == 64)\n\
    assert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmpw2pxp_gx/tmpw2pxp_gx.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1475015c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1474d0cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1474d0c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1474d0b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpw2pxp_gx                        0x000055eb2e404455 <unavailable> + 5205

    5    libc.so.6                          0x00002b1475201460 __libc_start_main +
    245

    6    tmpw2pxp_gx                        0x000055eb2e404109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660012166
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int]()\n    var right_to_left = [Int]()\n\
    \    var collisions = 0\n    for i in 0..<n {\n        left_to_right.append(i)\n\
    \        right_to_left.append(n-i-1)\n    }\n    for i in 0..<n {\n        for\
    \ j in 0..<n {\n            if left_to_right[i] == right_to_left[j] {\n      \
    \          collisions += 1\n            }\n        }\n    }\n    return collisions\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmpzl86np2_/tmpzl86np2_.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba97cd4ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba97ca45b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba97ca45988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba97ca447b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzl86np2_                        0x000055ca10def445 <unavailable> + 5189

    5    libc.so.6                          0x00002ba97cf3a460 __libc_start_main +
    245

    6    tmpzl86np2_                        0x000055ca10def0f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660012166
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int](repeating: 0, count: n)\n    var\
    \ right_to_left = [Int](repeating: 0, count: n)\n    for i in 0..<n {\n      \
    \  left_to_right[i] = i\n        right_to_left[i] = n - i - 1\n    }\n    var\
    \ collision = 0\n    for i in 0..<n {\n        for j in 0..<n {\n            if\
    \ left_to_right[i] == right_to_left[j] {\n                collision += 1\n   \
    \         }\n        }\n    }\n    return collision\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmpdl63q81s/tmpdl63q81s.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8e81d40c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8e81a37b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8e81a37988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8e81a367b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdl63q81s                        0x0000558b4d6b7455 <unavailable> + 5205

    5    libc.so.6                          0x00002b8e81f2c460 __libc_start_main +
    245

    6    tmpdl63q81s                        0x0000558b4d6b7109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660012166
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int](repeating: 0, count: n)\n    var\
    \ right_to_left = [Int](repeating: 0, count: n)\n    var collisions = 0\n    for\
    \ i in 0..<n {\n        left_to_right[i] = i\n        right_to_left[i] = n - i\
    \ - 1\n    }\n    for i in 0..<n {\n        for j in 0..<n {\n            if left_to_right[i]\
    \ == right_to_left[j] {\n                collisions += 1\n            }\n    \
    \    }\n    }\n    return collisions\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n: 3) == 9)\n\
    assert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n: 8) == 64)\n\
    assert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmps1jc4l0x/tmps1jc4l0x.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7480becc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b74808e3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b74808e3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b74808e27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmps1jc4l0x                        0x000055a38fff1455 <unavailable> + 5205

    5    libc.so.6                          0x00002b7480dd8460 __libc_start_main +
    245

    6    tmps1jc4l0x                        0x000055a38fff1109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660012166
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int]()\n    var right_to_left = [Int]()\n\
    \    for i in 0..<n {\n        left_to_right.append(i)\n        right_to_left.append(i)\n\
    \    }\n    var count = 0\n    while left_to_right.count > 0 && right_to_left.count\
    \ > 0 {\n        if left_to_right[0] == right_to_left[0] {\n            count\
    \ += 1\n            left_to_right.remove(at: 0)\n            right_to_left.remove(at:\
    \ 0)\n        } else if left_to_right[0] < right_to_left[0] {\n            left_to_right.remove(at:\
    \ 0)\n        } else {\n            right_to_left.remove(at: 0)\n        }\n \
    \   }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(car_race_collision(n:\
    \ 2) == 4)\nassert(car_race_collision(n: 3) == 9)\nassert(car_race_collision(n:\
    \ 4) == 16)\nassert(car_race_collision(n: 8) == 64)\nassert(car_race_collision(n:\
    \ 10) == 100)"
  status: Exception
  stderr: 'tmpat78vbq_/tmpat78vbq_.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8891f4ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8891c41b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8891c41988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8891c407b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpat78vbq_                        0x0000562e41bb6535 <unavailable> + 5429

    5    libc.so.6                          0x00002b8892136460 __libc_start_main +
    245

    6    tmpat78vbq_                        0x0000562e41bb61e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1660012166
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int](repeating: 0, count: n)\n    var\
    \ right_to_left = [Int](repeating: 0, count: n)\n    var collisions = 0\n    for\
    \ i in 0..<n {\n        left_to_right[i] = i\n        right_to_left[i] = n - i\
    \ - 1\n    }\n    for i in 0..<n {\n        for j in 0..<n {\n            if left_to_right[i]\
    \ == right_to_left[j] {\n                collisions += 1\n            }\n    \
    \    }\n    }\n    return collisions\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n: 3) == 9)\n\
    assert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n: 8) == 64)\n\
    assert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmps1jc4l0x/tmps1jc4l0x.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7480becc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b74808e3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b74808e3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b74808e27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmps1jc4l0x                        0x000055a38fff1455 <unavailable> + 5205

    5    libc.so.6                          0x00002b7480dd8460 __libc_start_main +
    245

    6    tmps1jc4l0x                        0x000055a38fff1109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660012166
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int](repeating: 0, count: n)\n    var\
    \ right_to_left = [Int](repeating: 0, count: n)\n    var collision_count = 0\n\
    \    for i in 0..<n {\n        left_to_right[i] = i\n        right_to_left[i]\
    \ = n - i - 1\n    }\n    for i in 0..<n {\n        for j in 0..<n {\n       \
    \     if left_to_right[i] == right_to_left[j] {\n                collision_count\
    \ += 1\n            }\n        }\n    }\n    return collision_count\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmp4lx4niiq/tmp4lx4niiq.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af4332c2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af432fb9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af432fb9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af432fb87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4lx4niiq                        0x000055db859ec455 <unavailable> + 5205

    5    libc.so.6                          0x00002af4334ae460 __libc_start_main +
    245

    6    tmp4lx4niiq                        0x000055db859ec109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660012166
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int](repeating: 0, count: n)\n    var\
    \ right_to_left = [Int](repeating: 0, count: n)\n    for i in 0..<n {\n      \
    \  left_to_right[i] = i\n        right_to_left[i] = n - i - 1\n    }\n    var\
    \ count = 0\n    for i in 0..<n {\n        for j in 0..<n {\n            if left_to_right[i]\
    \ == right_to_left[j] {\n                count += 1\n            }\n        }\n\
    \    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(car_race_collision(n:\
    \ 2) == 4)\nassert(car_race_collision(n: 3) == 9)\nassert(car_race_collision(n:\
    \ 4) == 16)\nassert(car_race_collision(n: 8) == 64)\nassert(car_race_collision(n:\
    \ 10) == 100)"
  status: Exception
  stderr: 'tmpeixhzo9y/tmpeixhzo9y.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b261dd57c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b261da4eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b261da4e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b261da4d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeixhzo9y                        0x00005571c4c4f455 <unavailable> + 5205

    5    libc.so.6                          0x00002b261df43460 __libc_start_main +
    245

    6    tmpeixhzo9y                        0x00005571c4c4f109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660012166
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int](repeating: 0, count: n)\n    var\
    \ right_to_left = [Int](repeating: 0, count: n)\n    var collision_count = 0\n\
    \    for i in 0..<n {\n        left_to_right[i] = i\n        right_to_left[i]\
    \ = n - i - 1\n    }\n    for i in 0..<n {\n        for j in 0..<n {\n       \
    \     if left_to_right[i] == right_to_left[j] {\n                collision_count\
    \ += 1\n            }\n        }\n    }\n    return collision_count\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmp4lx4niiq/tmp4lx4niiq.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af4332c2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af432fb9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af432fb9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af432fb87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4lx4niiq                        0x000055db859ec455 <unavailable> + 5205

    5    libc.so.6                          0x00002af4334ae460 __libc_start_main +
    245

    6    tmp4lx4niiq                        0x000055db859ec109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660012166
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(car_race_collision(n:\
    \ 2) == 4)\nassert(car_race_collision(n: 3) == 9)\nassert(car_race_collision(n:\
    \ 4) == 16)\nassert(car_race_collision(n: 8) == 64)\nassert(car_race_collision(n:\
    \ 10) == 100)"
  status: Exception
  stderr: 'tmptluchuc9/tmptluchuc9.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b49eb4e6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b49eb1ddb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b49eb1dd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b49eb1dc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptluchuc9                        0x00005578d78d91b5 <unavailable> + 4533

    5    libc.so.6                          0x00002b49eb6d2460 __libc_start_main +
    245

    6    tmptluchuc9                        0x00005578d78d8e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660012166
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int](repeating: 0, count: n)\n    var\
    \ right_to_left = [Int](repeating: 0, count: n)\n    for i in 0..<n {\n      \
    \  left_to_right[i] = i\n        right_to_left[i] = n - i - 1\n    }\n    var\
    \ count = 0\n    for i in 0..<n {\n        for j in 0..<n {\n            if left_to_right[i]\
    \ == right_to_left[j] {\n                count += 1\n            }\n        }\n\
    \    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(car_race_collision(n:\
    \ 2) == 4)\nassert(car_race_collision(n: 3) == 9)\nassert(car_race_collision(n:\
    \ 4) == 16)\nassert(car_race_collision(n: 8) == 64)\nassert(car_race_collision(n:\
    \ 10) == 100)"
  status: Exception
  stderr: 'tmpeixhzo9y/tmpeixhzo9y.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b261dd57c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b261da4eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b261da4e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b261da4d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeixhzo9y                        0x00005571c4c4f455 <unavailable> + 5205

    5    libc.so.6                          0x00002b261df43460 __libc_start_main +
    245

    6    tmpeixhzo9y                        0x00005571c4c4f109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660012166
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int](repeating: 0, count: n)\n    var\
    \ right_to_left = [Int](repeating: 0, count: n)\n    for i in 0..<n {\n      \
    \  left_to_right[i] = i\n        right_to_left[i] = n - i - 1\n    }\n    var\
    \ count = 0\n    for i in 0..<n {\n        for j in 0..<n {\n            if left_to_right[i]\
    \ == right_to_left[j] {\n                count += 1\n            }\n        }\n\
    \    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(car_race_collision(n:\
    \ 2) == 4)\nassert(car_race_collision(n: 3) == 9)\nassert(car_race_collision(n:\
    \ 4) == 16)\nassert(car_race_collision(n: 8) == 64)\nassert(car_race_collision(n:\
    \ 10) == 100)"
  status: Exception
  stderr: 'tmpeixhzo9y/tmpeixhzo9y.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b261dd57c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b261da4eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b261da4e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b261da4d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeixhzo9y                        0x00005571c4c4f455 <unavailable> + 5205

    5    libc.so.6                          0x00002b261df43460 __libc_start_main +
    245

    6    tmpeixhzo9y                        0x00005571c4c4f109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660012166
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int](repeating: 0, count: n)\n    var\
    \ right_to_left = [Int](repeating: 0, count: n)\n    var collisions = 0\n    for\
    \ i in 0..<n {\n        left_to_right[i] = i\n        right_to_left[i] = n - i\
    \ - 1\n    }\n    for i in 0..<n {\n        for j in 0..<n {\n            if left_to_right[i]\
    \ == right_to_left[j] {\n                collisions += 1\n            }\n    \
    \    }\n    }\n    return collisions\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n: 3) == 9)\n\
    assert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n: 8) == 64)\n\
    assert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmps1jc4l0x/tmps1jc4l0x.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7480becc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b74808e3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b74808e3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b74808e27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmps1jc4l0x                        0x000055a38fff1455 <unavailable> + 5205

    5    libc.so.6                          0x00002b7480dd8460 __libc_start_main +
    245

    6    tmps1jc4l0x                        0x000055a38fff1109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660012166
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int](repeating: 0, count: n)\n    var\
    \ right_to_left = [Int](repeating: 0, count: n)\n    var collision = 0\n    for\
    \ i in 0..<n {\n        left_to_right[i] = i\n        right_to_left[i] = n - i\
    \ - 1\n    }\n    for i in 0..<n {\n        for j in 0..<n {\n            if left_to_right[i]\
    \ == right_to_left[j] {\n                collision += 1\n            }\n     \
    \   }\n    }\n    return collision\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n: 3) == 9)\n\
    assert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n: 8) == 64)\n\
    assert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmpw2pxp_gx/tmpw2pxp_gx.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1475015c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1474d0cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1474d0c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1474d0b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpw2pxp_gx                        0x000055eb2e404455 <unavailable> + 5205

    5    libc.so.6                          0x00002b1475201460 __libc_start_main +
    245

    6    tmpw2pxp_gx                        0x000055eb2e404109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660012166
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int](repeating: 0, count: n)\n    var\
    \ right_to_left = [Int](repeating: 0, count: n)\n    var collisions = 0\n    for\
    \ i in 0..<n {\n        left_to_right[i] = i\n        right_to_left[i] = n - i\
    \ - 1\n    }\n    for i in 0..<n {\n        for j in 0..<n {\n            if left_to_right[i]\
    \ == right_to_left[j] {\n                collisions += 1\n            }\n    \
    \    }\n    }\n    return collisions\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n: 3) == 9)\n\
    assert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n: 8) == 64)\n\
    assert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmps1jc4l0x/tmps1jc4l0x.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7480becc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b74808e3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b74808e3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b74808e27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmps1jc4l0x                        0x000055a38fff1455 <unavailable> + 5205

    5    libc.so.6                          0x00002b7480dd8460 __libc_start_main +
    245

    6    tmps1jc4l0x                        0x000055a38fff1109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660012166
- exit_code: 1
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int](repeating: 0, count: n)\n    var\
    \ right_to_left = [Int](repeating: 0, count: n)\n    for i in 0..<n {\n      \
    \  left_to_right[i] = i\n        right_to_left[i] = n - i - 1\n    }\n    return\
    \ car_race_collision(left_to_right: left_to_right, right_to_left: right_to_left)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: SyntaxError
  stderr: "/tmp/tmp8mu6sjir.swift:17:30: error: extra arguments at positions #1, #2\
    \ in call\n    return car_race_collision(left_to_right: left_to_right, right_to_left:\
    \ right_to_left)\n                             ^\n/tmp/tmp8mu6sjir.swift:10:6:\
    \ note: 'car_race_collision(n:)' declared here\nfunc car_race_collision(n: Int)\
    \ -> Int {\n     ^\n/tmp/tmp8mu6sjir.swift:17:31: error: missing argument for\
    \ parameter 'n' in call\n    return car_race_collision(left_to_right: left_to_right,\
    \ right_to_left: right_to_left)\n                              ^\n           \
    \                   n: <#Int#>, \n/tmp/tmp8mu6sjir.swift:10:6: note: 'car_race_collision(n:)'\
    \ declared here\nfunc car_race_collision(n: Int) -> Int {\n     ^\n"
  stdout: ''
  timestamp: 1660012166
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var count = 0\n    for i in 0..<n {\n        for j in 0..<n\
    \ {\n            if i < j {\n                count += 1\n            }\n     \
    \   }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(car_race_collision(n:\
    \ 2) == 4)\nassert(car_race_collision(n: 3) == 9)\nassert(car_race_collision(n:\
    \ 4) == 16)\nassert(car_race_collision(n: 8) == 64)\nassert(car_race_collision(n:\
    \ 10) == 100)"
  status: Exception
  stderr: 'tmppbya1g_f/tmppbya1g_f.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9eb83c6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9eb80bdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9eb80bd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9eb80bc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppbya1g_f                        0x00005624dca9a335 <unavailable> + 4917

    5    libc.so.6                          0x00002b9eb85b2460 __libc_start_main +
    245

    6    tmppbya1g_f                        0x00005624dca99fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660012166
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int]()\n    var right_to_left = [Int]()\n\
    \    var collision_count = 0\n    for i in 0..<n {\n        left_to_right.append(i)\n\
    \        right_to_left.append(n-i-1)\n    }\n    for i in 0..<n {\n        for\
    \ j in 0..<n {\n            if left_to_right[i] == right_to_left[j] {\n      \
    \          collision_count += 1\n            }\n        }\n    }\n    return collision_count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmp27wjgho_/tmp27wjgho_.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b22d48b4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b22d45abb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b22d45ab988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b22d45aa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp27wjgho_                        0x0000563be6007445 <unavailable> + 5189

    5    libc.so.6                          0x00002b22d4aa0460 __libc_start_main +
    245

    6    tmp27wjgho_                        0x0000563be60070f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660012166
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int]()\n    var right_to_left = [Int]()\n\
    \    for i in 0..<n {\n        left_to_right.append(i)\n        right_to_left.append(n-i-1)\n\
    \    }\n    var count = 0\n    for i in 0..<n {\n        for j in 0..<n {\n  \
    \          if left_to_right[i] == right_to_left[j] {\n                count +=\
    \ 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmpj3scq00u/tmpj3scq00u.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7bd0c52c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7bd0949b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7bd0949988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7bd09487b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpj3scq00u                        0x00005649051c7445 <unavailable> + 5189

    5    libc.so.6                          0x00002b7bd0e3e460 __libc_start_main +
    245

    6    tmpj3scq00u                        0x00005649051c70f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660012166
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int](1...n)\n    var right_to_left =\
    \ [Int](1...n)\n    var collisions = 0\n    while !left_to_right.isEmpty && !right_to_left.isEmpty\
    \ {\n        let left = left_to_right.removeFirst()\n        let right = right_to_left.removeFirst()\n\
    \        if left == right {\n            collisions += 1\n        } else {\n \
    \           if left < right {\n                left_to_right.append(left)\n  \
    \              right_to_left.append(right)\n            } else {\n           \
    \     left_to_right.append(right)\n                right_to_left.append(left)\n\
    \            }\n        }\n    }\n    return collisions\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmplagntii8/tmplagntii8.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5ca1acbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5ca17c2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5ca17c2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5ca17c17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplagntii8                        0x000055dd6f395555 <unavailable> + 5461

    5    libc.so.6                          0x00002b5ca1cb7460 __libc_start_main +
    245

    6    tmplagntii8                        0x000055dd6f395209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660012167
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int](0..<n)\n    var right_to_left =\
    \ [Int](0..<n)\n    var collisions = 0\n    while left_to_right.count > 0 && right_to_left.count\
    \ > 0 {\n        let left_car = left_to_right.removeFirst()\n        let right_car\
    \ = right_to_left.removeFirst()\n        if left_car == right_car {\n        \
    \    collisions += 1\n        } else {\n            left_to_right.append(left_car)\n\
    \            right_to_left.append(right_car)\n        }\n    }\n    return collisions\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmpz15559y3/tmpz15559y3.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5a59d11c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5a59a08b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5a59a08988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5a59a077b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpz15559y3                        0x000055c5a5006525 <unavailable> + 5413

    5    libc.so.6                          0x00002b5a59efd460 __libc_start_main +
    245

    6    tmpz15559y3                        0x000055c5a50061d9 <unavailable> + 4569

    '
  stdout: ''
  timestamp: 1660012166
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int]()\n    var right_to_left = [Int]()\n\
    \    for i in 0..<n {\n        left_to_right.append(i)\n        right_to_left.append(i)\n\
    \    }\n    var collisions = 0\n    for i in 0..<n {\n        for j in 0..<n {\n\
    \            if left_to_right[i] == right_to_left[j] {\n                collisions\
    \ += 1\n            }\n        }\n    }\n    return collisions\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmpucfy9q2q/tmpucfy9q2q.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abe95969c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abe95660b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abe95660988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abe9565f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpucfy9q2q                        0x00005578fca50445 <unavailable> + 5189

    5    libc.so.6                          0x00002abe95b55460 __libc_start_main +
    245

    6    tmpucfy9q2q                        0x00005578fca500f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660012166
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int]()\n    var right_to_left = [Int]()\n\
    \    for i in 0..<n {\n        left_to_right.append(i)\n        right_to_left.append(n\
    \ - i - 1)\n    }\n    var collisions = 0\n    for i in 0..<n {\n        for j\
    \ in 0..<n {\n            if left_to_right[i] == right_to_left[j] {\n        \
    \        collisions += 1\n            }\n        }\n    }\n    return collisions\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmpaki30yyt/tmpaki30yyt.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b148ce30c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b148cb27b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b148cb27988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b148cb267b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpaki30yyt                        0x000055ebacb4e445 <unavailable> + 5189

    5    libc.so.6                          0x00002b148d01c460 __libc_start_main +
    245

    6    tmpaki30yyt                        0x000055ebacb4e0f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660012166
- exit_code: 1
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int](repeating: 0, count: n)\n    var\
    \ right_to_left = [Int](repeating: 0, count: n)\n    for i in 0..<n {\n      \
    \  left_to_right[i] = i\n        right_to_left[i] = n - i - 1\n    }\n    return\
    \ car_race_collision(left_to_right: left_to_right, right_to_left: right_to_left)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: SyntaxError
  stderr: "/tmp/tmp8mu6sjir.swift:17:30: error: extra arguments at positions #1, #2\
    \ in call\n    return car_race_collision(left_to_right: left_to_right, right_to_left:\
    \ right_to_left)\n                             ^\n/tmp/tmp8mu6sjir.swift:10:6:\
    \ note: 'car_race_collision(n:)' declared here\nfunc car_race_collision(n: Int)\
    \ -> Int {\n     ^\n/tmp/tmp8mu6sjir.swift:17:31: error: missing argument for\
    \ parameter 'n' in call\n    return car_race_collision(left_to_right: left_to_right,\
    \ right_to_left: right_to_left)\n                              ^\n           \
    \                   n: <#Int#>, \n/tmp/tmp8mu6sjir.swift:10:6: note: 'car_race_collision(n:)'\
    \ declared here\nfunc car_race_collision(n: Int) -> Int {\n     ^\n"
  stdout: ''
  timestamp: 1660012166
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int]()\n    var right_to_left = [Int]()\n\
    \    var collisions = 0\n    for i in 0..<n {\n        left_to_right.append(i)\n\
    \        right_to_left.append(n-i-1)\n    }\n    for i in 0..<n {\n        for\
    \ j in 0..<n {\n            if left_to_right[i] == right_to_left[j] {\n      \
    \          collisions += 1\n            }\n        }\n    }\n    return collisions\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmpzl86np2_/tmpzl86np2_.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba97cd4ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba97ca45b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba97ca45988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba97ca447b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzl86np2_                        0x000055ca10def445 <unavailable> + 5189

    5    libc.so.6                          0x00002ba97cf3a460 __libc_start_main +
    245

    6    tmpzl86np2_                        0x000055ca10def0f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660012166
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int]()\n    var right_to_left = [Int]()\n\
    \    var collisions = 0\n    for i in 0..<n {\n        left_to_right.append(i)\n\
    \        right_to_left.append(n-i-1)\n    }\n    for i in 0..<n {\n        for\
    \ j in 0..<n {\n            if left_to_right[i] == right_to_left[j] {\n      \
    \          collisions += 1\n            }\n        }\n    }\n    return collisions\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmpzl86np2_/tmpzl86np2_.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba97cd4ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba97ca45b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba97ca45988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba97ca447b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzl86np2_                        0x000055ca10def445 <unavailable> + 5189

    5    libc.so.6                          0x00002ba97cf3a460 __libc_start_main +
    245

    6    tmpzl86np2_                        0x000055ca10def0f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660012166
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int](repeating: 0, count: n)\n    var\
    \ right_to_left = [Int](repeating: 0, count: n)\n    for i in 0..<n {\n      \
    \  left_to_right[i] = i\n        right_to_left[i] = n - i - 1\n    }\n    var\
    \ count = 0\n    for i in 0..<n {\n        for j in 0..<n {\n            if left_to_right[i]\
    \ == right_to_left[j] {\n                count += 1\n            }\n        }\n\
    \    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(car_race_collision(n:\
    \ 2) == 4)\nassert(car_race_collision(n: 3) == 9)\nassert(car_race_collision(n:\
    \ 4) == 16)\nassert(car_race_collision(n: 8) == 64)\nassert(car_race_collision(n:\
    \ 10) == 100)"
  status: Exception
  stderr: 'tmpeixhzo9y/tmpeixhzo9y.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b261dd57c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b261da4eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b261da4e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b261da4d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeixhzo9y                        0x00005571c4c4f455 <unavailable> + 5205

    5    libc.so.6                          0x00002b261df43460 __libc_start_main +
    245

    6    tmpeixhzo9y                        0x00005571c4c4f109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660012166
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int](repeating: 0, count: n)\n    var\
    \ right_to_left = [Int](repeating: 0, count: n)\n    for i in 0..<n {\n      \
    \  left_to_right[i] = i\n        right_to_left[i] = n - i - 1\n    }\n    var\
    \ collisions = 0\n    var i = 0\n    var j = 0\n    while i < n && j < n {\n \
    \       if left_to_right[i] < right_to_left[j] {\n            collisions += j\n\
    \            i += 1\n        } else {\n            j += 1\n        }\n    }\n\
    \    return collisions\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(car_race_collision(n:\
    \ 2) == 4)\nassert(car_race_collision(n: 3) == 9)\nassert(car_race_collision(n:\
    \ 4) == 16)\nassert(car_race_collision(n: 8) == 64)\nassert(car_race_collision(n:\
    \ 10) == 100)"
  status: Exception
  stderr: 'tmpopbqhmvo/tmpopbqhmvo.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae984848c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae98453fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae98453f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae98453e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpopbqhmvo                        0x00005585de3a5455 <unavailable> + 5205

    5    libc.so.6                          0x00002ae984a34460 __libc_start_main +
    245

    6    tmpopbqhmvo                        0x00005585de3a5109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660012167
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int]()\n    var right_to_left = [Int]()\n\
    \    for i in 0..<n {\n        left_to_right.append(i)\n        right_to_left.append(n\
    \ - i - 1)\n    }\n    var count = 0\n    for i in 0..<n {\n        for j in 0..<n\
    \ {\n            if left_to_right[i] == right_to_left[j] {\n                count\
    \ += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmp2hktz2mj/tmp2hktz2mj.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acf0d9c0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acf0d6b7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acf0d6b7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acf0d6b67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2hktz2mj                        0x00005580120f7445 <unavailable> + 5189

    5    libc.so.6                          0x00002acf0dbac460 __libc_start_main +
    245

    6    tmp2hktz2mj                        0x00005580120f70f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660012166
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = Array(repeating: 0, count: n)\n    var\
    \ right_to_left = Array(repeating: 0, count: n)\n    var collisions = 0\n    for\
    \ i in 0..<n {\n        left_to_right[i] = i\n        right_to_left[i] = n - i\
    \ - 1\n    }\n    for i in 0..<n {\n        for j in 0..<n {\n            if left_to_right[i]\
    \ == right_to_left[j] {\n                collisions += 1\n            }\n    \
    \    }\n    }\n    return collisions\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n: 3) == 9)\n\
    assert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n: 8) == 64)\n\
    assert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmp8gl69j6y/tmp8gl69j6y.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abc680c1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abc67db8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abc67db8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abc67db77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8gl69j6y                        0x000055beeb7cb455 <unavailable> + 5205

    5    libc.so.6                          0x00002abc682ad460 __libc_start_main +
    245

    6    tmp8gl69j6y                        0x000055beeb7cb109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660012166
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int](repeating: 0, count: n)\n    var\
    \ right_to_left = [Int](repeating: 0, count: n)\n    var collisions = 0\n    for\
    \ i in 0..<n {\n        left_to_right[i] = i\n        right_to_left[i] = n - i\
    \ - 1\n    }\n    for i in 0..<n {\n        for j in 0..<n {\n            if left_to_right[i]\
    \ == right_to_left[j] {\n                collisions += 1\n            }\n    \
    \    }\n    }\n    return collisions\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n: 3) == 9)\n\
    assert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n: 8) == 64)\n\
    assert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmps1jc4l0x/tmps1jc4l0x.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7480becc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b74808e3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b74808e3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b74808e27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmps1jc4l0x                        0x000055a38fff1455 <unavailable> + 5205

    5    libc.so.6                          0x00002b7480dd8460 __libc_start_main +
    245

    6    tmps1jc4l0x                        0x000055a38fff1109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660012166
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int](repeating: 0, count: n)\n    var\
    \ right_to_left = [Int](repeating: 0, count: n)\n    var collisions = 0\n    for\
    \ i in 0..<n {\n        left_to_right[i] = i\n        right_to_left[i] = n - i\
    \ - 1\n    }\n    for i in 0..<n {\n        for j in 0..<n {\n            if left_to_right[i]\
    \ == right_to_left[j] {\n                collisions += 1\n            }\n    \
    \    }\n    }\n    return collisions\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n: 3) == 9)\n\
    assert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n: 8) == 64)\n\
    assert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmps1jc4l0x/tmps1jc4l0x.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7480becc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b74808e3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b74808e3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b74808e27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmps1jc4l0x                        0x000055a38fff1455 <unavailable> + 5205

    5    libc.so.6                          0x00002b7480dd8460 __libc_start_main +
    245

    6    tmps1jc4l0x                        0x000055a38fff1109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660012166
- exit_code: 1
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int](repeating: 0, count: n)\n    var\
    \ right_to_left = [Int](repeating: 0, count: n)\n    var i = 0\n    while i <\
    \ n {\n        left_to_right[i] = i\n        right_to_left[i] = n - i - 1\n  \
    \      i += 1\n    }\n    return merge_sort_collision(left_to_right, right_to_left)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: SyntaxError
  stderr: "/tmp/tmpydpgh6xm.swift:19:12: error: cannot find 'merge_sort_collision'\
    \ in scope\n    return merge_sort_collision(left_to_right, right_to_left)\n  \
    \         ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660012167
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int](repeating: 0, count: n)\n    var\
    \ right_to_left = [Int](repeating: 0, count: n)\n    for i in 0..<n {\n      \
    \  left_to_right[i] = i\n        right_to_left[i] = n - i - 1\n    }\n    var\
    \ collisions = 0\n    for i in 0..<n {\n        for j in 0..<n {\n           \
    \ if left_to_right[i] == right_to_left[j] {\n                collisions += 1\n\
    \            }\n        }\n    }\n    return collisions\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmpy5_5e537/tmpy5_5e537.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4d882b4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4d87fabb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4d87fab988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4d87faa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpy5_5e537                        0x0000557cb2403455 <unavailable> + 5205

    5    libc.so.6                          0x00002b4d884a0460 __libc_start_main +
    245

    6    tmpy5_5e537                        0x0000557cb2403109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660012166
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int](repeating: 0, count: n)\n    var\
    \ right_to_left = [Int](repeating: 0, count: n)\n    for i in 0..<n {\n      \
    \  left_to_right[i] = i\n        right_to_left[i] = n - i - 1\n    }\n    var\
    \ collisions = 0\n    for i in 0..<n {\n        for j in 0..<n {\n           \
    \ if left_to_right[i] == right_to_left[j] {\n                collisions += 1\n\
    \            }\n        }\n    }\n    return collisions\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmpy5_5e537/tmpy5_5e537.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4d882b4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4d87fabb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4d87fab988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4d87faa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpy5_5e537                        0x0000557cb2403455 <unavailable> + 5205

    5    libc.so.6                          0x00002b4d884a0460 __libc_start_main +
    245

    6    tmpy5_5e537                        0x0000557cb2403109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660012166
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int]()\n    var right_to_left = [Int]()\n\
    \    for i in 0..<n {\n        left_to_right.append(i)\n        right_to_left.append(n-i-1)\n\
    \    }\n    var count = 0\n    for i in 0..<n {\n        for j in 0..<n {\n  \
    \          if left_to_right[i] == right_to_left[j] {\n                count +=\
    \ 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmpj3scq00u/tmpj3scq00u.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7bd0c52c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7bd0949b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7bd0949988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7bd09487b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpj3scq00u                        0x00005649051c7445 <unavailable> + 5189

    5    libc.so.6                          0x00002b7bd0e3e460 __libc_start_main +
    245

    6    tmpj3scq00u                        0x00005649051c70f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660012166
- exit_code: 1
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int](repeating: 0, count: n)\n    var\
    \ right_to_left = [Int](repeating: 0, count: n)\n    for i in 0..<n {\n      \
    \  left_to_right[i] = i\n        right_to_left[i] = n - i - 1\n    }\n    return\
    \ car_race_collision(left_to_right: left_to_right, right_to_left: right_to_left)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: SyntaxError
  stderr: "/tmp/tmp8mu6sjir.swift:17:30: error: extra arguments at positions #1, #2\
    \ in call\n    return car_race_collision(left_to_right: left_to_right, right_to_left:\
    \ right_to_left)\n                             ^\n/tmp/tmp8mu6sjir.swift:10:6:\
    \ note: 'car_race_collision(n:)' declared here\nfunc car_race_collision(n: Int)\
    \ -> Int {\n     ^\n/tmp/tmp8mu6sjir.swift:17:31: error: missing argument for\
    \ parameter 'n' in call\n    return car_race_collision(left_to_right: left_to_right,\
    \ right_to_left: right_to_left)\n                              ^\n           \
    \                   n: <#Int#>, \n/tmp/tmp8mu6sjir.swift:10:6: note: 'car_race_collision(n:)'\
    \ declared here\nfunc car_race_collision(n: Int) -> Int {\n     ^\n"
  stdout: ''
  timestamp: 1660012166
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int]()\n    var right_to_left = [Int]()\n\
    \    for i in 0..<n {\n        left_to_right.append(i)\n        right_to_left.append(n-i-1)\n\
    \    }\n    var collisions = 0\n    while !left_to_right.isEmpty && !right_to_left.isEmpty\
    \ {\n        let l = left_to_right.removeFirst()\n        let r = right_to_left.removeFirst()\n\
    \        if l == r {\n            collisions += 1\n        }\n    }\n    return\
    \ collisions\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(car_race_collision(n:\
    \ 2) == 4)\nassert(car_race_collision(n: 3) == 9)\nassert(car_race_collision(n:\
    \ 4) == 16)\nassert(car_race_collision(n: 8) == 64)\nassert(car_race_collision(n:\
    \ 10) == 100)"
  status: Exception
  stderr: 'tmp44v462ur/tmp44v462ur.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad1a2908c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad1a25ffb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad1a25ff988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad1a25fe7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp44v462ur                        0x0000560eeed38575 <unavailable> + 5493

    5    libc.so.6                          0x00002ad1a2af4460 __libc_start_main +
    245

    6    tmp44v462ur                        0x0000560eeed38229 <unavailable> + 4649

    '
  stdout: ''
  timestamp: 1660012167
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = Array(0..<n)\n    var right_to_left =\
    \ Array(0..<n)\n    var collisions = 0\n    while !left_to_right.isEmpty && !right_to_left.isEmpty\
    \ {\n        if left_to_right.first! < right_to_left.first! {\n            left_to_right.removeFirst()\n\
    \        } else if left_to_right.first! > right_to_left.first! {\n           \
    \ right_to_left.removeFirst()\n        } else {\n            collisions += 1\n\
    \            left_to_right.removeFirst()\n            right_to_left.removeFirst()\n\
    \        }\n    }\n    return collisions\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n: 3) == 9)\n\
    assert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n: 8) == 64)\n\
    assert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmpvmhv2a6m/tmpvmhv2a6m.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002baa441e6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002baa43eddb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002baa43edd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002baa43edc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvmhv2a6m                        0x000056085eac7565 <unavailable> + 5477

    5    libc.so.6                          0x00002baa443d2460 __libc_start_main +
    245

    6    tmpvmhv2a6m                        0x000056085eac7219 <unavailable> + 4633

    '
  stdout: ''
  timestamp: 1660012167
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(car_race_collision(n:\
    \ 2) == 4)\nassert(car_race_collision(n: 3) == 9)\nassert(car_race_collision(n:\
    \ 4) == 16)\nassert(car_race_collision(n: 8) == 64)\nassert(car_race_collision(n:\
    \ 10) == 100)"
  status: Exception
  stderr: 'tmptluchuc9/tmptluchuc9.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b49eb4e6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b49eb1ddb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b49eb1dd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b49eb1dc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptluchuc9                        0x00005578d78d91b5 <unavailable> + 4533

    5    libc.so.6                          0x00002b49eb6d2460 __libc_start_main +
    245

    6    tmptluchuc9                        0x00005578d78d8e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660012166
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int]()\n    var right_to_left = [Int]()\n\
    \    for i in 0..<n {\n        left_to_right.append(i)\n        right_to_left.append(i)\n\
    \    }\n    var collision = 0\n    while left_to_right.count > 0 && right_to_left.count\
    \ > 0 {\n        if left_to_right[0] == right_to_left[0] {\n            collision\
    \ += 1\n            left_to_right.removeFirst()\n            right_to_left.removeFirst()\n\
    \        } else if left_to_right[0] < right_to_left[0] {\n            left_to_right.removeFirst()\n\
    \        } else {\n            right_to_left.removeFirst()\n        }\n    }\n\
    \    return collision\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(car_race_collision(n:\
    \ 2) == 4)\nassert(car_race_collision(n: 3) == 9)\nassert(car_race_collision(n:\
    \ 4) == 16)\nassert(car_race_collision(n: 8) == 64)\nassert(car_race_collision(n:\
    \ 10) == 100)"
  status: Exception
  stderr: 'tmpiv133e5k/tmpiv133e5k.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b82a4894c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b82a458bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b82a458b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b82a458a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpiv133e5k                        0x00005607d0ad0585 <unavailable> + 5509

    5    libc.so.6                          0x00002b82a4a80460 __libc_start_main +
    245

    6    tmpiv133e5k                        0x00005607d0ad0239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1660012167
- exit_code: 1
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left = [Int](repeating: 0, count: n)\n    var right =\
    \ [Int](repeating: 0, count: n)\n    for i in 0..<n {\n        left[i] = i\n \
    \       right[i] = n - i - 1\n    }\n    return car_race_collision(left: left,\
    \ right: right)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(car_race_collision(n:\
    \ 2) == 4)\nassert(car_race_collision(n: 3) == 9)\nassert(car_race_collision(n:\
    \ 4) == 16)\nassert(car_race_collision(n: 8) == 64)\nassert(car_race_collision(n:\
    \ 10) == 100)"
  status: SyntaxError
  stderr: "/tmp/tmp8f3w0fy0.swift:17:30: error: extra arguments at positions #1, #2\
    \ in call\n    return car_race_collision(left: left, right: right)\n         \
    \                    ^\n/tmp/tmp8f3w0fy0.swift:10:6: note: 'car_race_collision(n:)'\
    \ declared here\nfunc car_race_collision(n: Int) -> Int {\n     ^\n/tmp/tmp8f3w0fy0.swift:17:31:\
    \ error: missing argument for parameter 'n' in call\n    return car_race_collision(left:\
    \ left, right: right)\n                              ^\n                     \
    \         n: <#Int#>, \n/tmp/tmp8f3w0fy0.swift:10:6: note: 'car_race_collision(n:)'\
    \ declared here\nfunc car_race_collision(n: Int) -> Int {\n     ^\n"
  stdout: ''
  timestamp: 1660012167
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int]()\n    var right_to_left = [Int]()\n\
    \    for i in 0..<n {\n        left_to_right.append(i)\n        right_to_left.append(n-i-1)\n\
    \    }\n    var collision = 0\n    while !left_to_right.isEmpty && !right_to_left.isEmpty\
    \ {\n        let left = left_to_right.removeFirst()\n        let right = right_to_left.removeFirst()\n\
    \        if left == right {\n            collision += 1\n        }\n    }\n  \
    \  return collision\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(car_race_collision(n:\
    \ 2) == 4)\nassert(car_race_collision(n: 3) == 9)\nassert(car_race_collision(n:\
    \ 4) == 16)\nassert(car_race_collision(n: 8) == 64)\nassert(car_race_collision(n:\
    \ 10) == 100)"
  status: Exception
  stderr: 'tmpbxc264o0/tmpbxc264o0.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b903ccd9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b903c9d0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b903c9d0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b903c9cf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbxc264o0                        0x0000559f5dca5575 <unavailable> + 5493

    5    libc.so.6                          0x00002b903cec5460 __libc_start_main +
    245

    6    tmpbxc264o0                        0x0000559f5dca5229 <unavailable> + 4649

    '
  stdout: ''
  timestamp: 1660012167
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int](repeating: 0, count: n)\n    var\
    \ right_to_left = [Int](repeating: 0, count: n)\n    var collision_count = 0\n\
    \    for i in 0..<n {\n        left_to_right[i] = i\n        right_to_left[i]\
    \ = n - i - 1\n    }\n    for i in 0..<n {\n        for j in 0..<n {\n       \
    \     if left_to_right[i] == right_to_left[j] {\n                collision_count\
    \ += 1\n            }\n        }\n    }\n    return collision_count\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmp4lx4niiq/tmp4lx4niiq.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af4332c2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af432fb9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af432fb9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af432fb87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4lx4niiq                        0x000055db859ec455 <unavailable> + 5205

    5    libc.so.6                          0x00002af4334ae460 __libc_start_main +
    245

    6    tmp4lx4niiq                        0x000055db859ec109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660012166
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int](repeating: 0, count: n)\n    var\
    \ right_to_left = [Int](repeating: 0, count: n)\n    for i in 0..<n {\n      \
    \  left_to_right[i] = i\n        right_to_left[i] = n - i - 1\n    }\n    var\
    \ collisions = 0\n    for i in 0..<n {\n        for j in 0..<n {\n           \
    \ if left_to_right[i] == right_to_left[j] {\n                collisions += 1\n\
    \            }\n        }\n    }\n    return collisions\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmpy5_5e537/tmpy5_5e537.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4d882b4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4d87fabb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4d87fab988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4d87faa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpy5_5e537                        0x0000557cb2403455 <unavailable> + 5205

    5    libc.so.6                          0x00002b4d884a0460 __libc_start_main +
    245

    6    tmpy5_5e537                        0x0000557cb2403109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660012166
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int](repeating: 0, count: n)\n    var\
    \ right_to_left = [Int](repeating: 0, count: n)\n    var i = 0\n    while i <\
    \ n {\n        left_to_right[i] = i\n        right_to_left[i] = n - i - 1\n  \
    \      i += 1\n    }\n    var num_collisions = 0\n    i = 0\n    while i < n {\n\
    \        var j = 0\n        while j < n {\n            if left_to_right[i] ==\
    \ right_to_left[j] {\n                num_collisions += 1\n            }\n   \
    \         j += 1\n        }\n        i += 1\n    }\n    return num_collisions\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmp5i2we9v6/tmp5i2we9v6.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6743464c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b674315bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b674315b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b674315a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5i2we9v6                        0x000055dc5572b2c5 <unavailable> + 4805

    5    libc.so.6                          0x00002b6743650460 __libc_start_main +
    245

    6    tmp5i2we9v6                        0x000055dc5572af79 <unavailable> + 3961

    '
  stdout: ''
  timestamp: 1660012167
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = Array(repeating: 0, count: n)\n    var\
    \ right_to_left = Array(repeating: 0, count: n)\n    var count = 0\n    for i\
    \ in 0..<n {\n        left_to_right[i] = i\n        right_to_left[i] = n - i -\
    \ 1\n    }\n    for i in 0..<n {\n        for j in 0..<n {\n            if left_to_right[i]\
    \ == right_to_left[j] {\n                count += 1\n            }\n        }\n\
    \    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(car_race_collision(n:\
    \ 2) == 4)\nassert(car_race_collision(n: 3) == 9)\nassert(car_race_collision(n:\
    \ 4) == 16)\nassert(car_race_collision(n: 8) == 64)\nassert(car_race_collision(n:\
    \ 10) == 100)"
  status: Exception
  stderr: 'tmpsgt5wt3w/tmpsgt5wt3w.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae23a17bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae239e72b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae239e72988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae239e717b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsgt5wt3w                        0x00005653f2f79455 <unavailable> + 5205

    5    libc.so.6                          0x00002ae23a367460 __libc_start_main +
    245

    6    tmpsgt5wt3w                        0x00005653f2f79109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660012167
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int](repeating: 0, count: n)\n    var\
    \ right_to_left = [Int](repeating: 0, count: n)\n    for i in 0..<n {\n      \
    \  left_to_right[i] = i\n        right_to_left[i] = n - i - 1\n    }\n    var\
    \ collisions = 0\n    for i in 0..<n {\n        for j in 0..<n {\n           \
    \ if left_to_right[i] == right_to_left[j] {\n                collisions += 1\n\
    \            }\n        }\n    }\n    return collisions\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmpy5_5e537/tmpy5_5e537.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4d882b4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4d87fabb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4d87fab988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4d87faa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpy5_5e537                        0x0000557cb2403455 <unavailable> + 5205

    5    libc.so.6                          0x00002b4d884a0460 __libc_start_main +
    245

    6    tmpy5_5e537                        0x0000557cb2403109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660012166
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int](repeating: 0, count: n)\n    var\
    \ right_to_left = [Int](repeating: 0, count: n)\n    var collision = 0\n    for\
    \ i in 0..<n {\n        left_to_right[i] = i\n        right_to_left[i] = n - i\
    \ - 1\n    }\n    for i in 0..<n {\n        for j in 0..<n {\n            if left_to_right[i]\
    \ == right_to_left[j] {\n                collision += 1\n            }\n     \
    \   }\n    }\n    return collision\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n: 3) == 9)\n\
    assert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n: 8) == 64)\n\
    assert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmpw2pxp_gx/tmpw2pxp_gx.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1475015c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1474d0cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1474d0c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1474d0b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpw2pxp_gx                        0x000055eb2e404455 <unavailable> + 5205

    5    libc.so.6                          0x00002b1475201460 __libc_start_main +
    245

    6    tmpw2pxp_gx                        0x000055eb2e404109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660012166
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var collisions = 0\n    for i in 0..<n {\n        for j in\
    \ 0..<n {\n            if i < j {\n                collisions += 1\n         \
    \   }\n        }\n    }\n    return collisions\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n: 3)\
    \ == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmp7pueah2g/tmp7pueah2g.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4b026f3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4b023eab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4b023ea988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4b023e97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7pueah2g                        0x00005637895de335 <unavailable> + 4917

    5    libc.so.6                          0x00002b4b028df460 __libc_start_main +
    245

    6    tmp7pueah2g                        0x00005637895ddfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660012167
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int]()\n    var right_to_left = [Int]()\n\
    \    for i in 0..<n {\n        left_to_right.append(i)\n        right_to_left.append(n-i-1)\n\
    \    }\n    var collisions = 0\n    var i = 0\n    var j = 0\n    while i < n\
    \ && j < n {\n        if left_to_right[i] < right_to_left[j] {\n            collisions\
    \ += j\n            i += 1\n        } else {\n            j += 1\n        }\n\
    \    }\n    collisions += j * (n - i)\n    return collisions\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmp8omalk26/tmp8omalk26.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac57fe93c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac57fb8ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac57fb8a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac57fb897b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8omalk26                        0x000055645237d445 <unavailable> + 5189

    5    libc.so.6                          0x00002ac58007f460 __libc_start_main +
    245

    6    tmp8omalk26                        0x000055645237d0f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660012167
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int]()\n    var right_to_left = [Int]()\n\
    \    var collisions = 0\n    for i in 0..<n {\n        left_to_right.append(i)\n\
    \        right_to_left.append(n-i-1)\n    }\n    for i in 0..<n {\n        for\
    \ j in 0..<n {\n            if left_to_right[i] == right_to_left[j] {\n      \
    \          collisions += 1\n            }\n        }\n    }\n    return collisions\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmpzl86np2_/tmpzl86np2_.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba97cd4ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba97ca45b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba97ca45988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba97ca447b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzl86np2_                        0x000055ca10def445 <unavailable> + 5189

    5    libc.so.6                          0x00002ba97cf3a460 __libc_start_main +
    245

    6    tmpzl86np2_                        0x000055ca10def0f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660012166
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int](repeating: 0, count: n)\n    var\
    \ right_to_left = [Int](repeating: 0, count: n)\n    for i in 0..<n {\n      \
    \  left_to_right[i] = i\n        right_to_left[i] = n - i - 1\n    }\n    var\
    \ collisions = 0\n    for i in 0..<n {\n        for j in 0..<n {\n           \
    \ if left_to_right[i] == right_to_left[j] {\n                collisions += 1\n\
    \            }\n        }\n    }\n    return collisions\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmpy5_5e537/tmpy5_5e537.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4d882b4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4d87fabb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4d87fab988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4d87faa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpy5_5e537                        0x0000557cb2403455 <unavailable> + 5205

    5    libc.so.6                          0x00002b4d884a0460 __libc_start_main +
    245

    6    tmpy5_5e537                        0x0000557cb2403109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660012166
- exit_code: 1
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int](count: n, repeatedValue: 0)\n \
    \   var right_to_left = [Int](count: n, repeatedValue: 0)\n    var collisions\
    \ = 0\n    for i in 0..<n {\n        left_to_right[i] = i\n        right_to_left[i]\
    \ = n - i - 1\n    }\n    for i in 0..<n {\n        for j in 0..<n {\n       \
    \     if left_to_right[i] == right_to_left[j] {\n                collisions +=\
    \ 1\n            }\n        }\n    }\n    return collisions\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: SyntaxError
  stderr: "/tmp/tmpxkznug5i.swift:11:25: error: no exact matches in call to initializer\
    \ \n    var left_to_right = [Int](count: n, repeatedValue: 0)\n              \
    \          ^\n/tmp/tmpxkznug5i.swift:11:25: note: candidate has partially matching\
    \ parameter list (repeating: Int, count: Int)\n    var left_to_right = [Int](count:\
    \ n, repeatedValue: 0)\n                        ^\n/tmp/tmpxkznug5i.swift:11:25:\
    \ note: candidate has partially matching parameter list (repeating: Int, count:\
    \ Int)\n    var left_to_right = [Int](count: n, repeatedValue: 0)\n          \
    \              ^\n/tmp/tmpxkznug5i.swift:12:25: error: no exact matches in call\
    \ to initializer \n    var right_to_left = [Int](count: n, repeatedValue: 0)\n\
    \                        ^\n/tmp/tmpxkznug5i.swift:12:25: note: candidate has\
    \ partially matching parameter list (repeating: Int, count: Int)\n    var right_to_left\
    \ = [Int](count: n, repeatedValue: 0)\n                        ^\n/tmp/tmpxkznug5i.swift:12:25:\
    \ note: candidate has partially matching parameter list (repeating: Int, count:\
    \ Int)\n    var right_to_left = [Int](count: n, repeatedValue: 0)\n          \
    \              ^\n"
  stdout: ''
  timestamp: 1660012167
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int]()\n    var right_to_left = [Int]()\n\
    \    for i in 0..<n {\n        left_to_right.append(i)\n        right_to_left.append(n\
    \ - i - 1)\n    }\n    var collision = 0\n    while left_to_right.count > 0 &&\
    \ right_to_left.count > 0 {\n        if left_to_right[0] < right_to_left[0] {\n\
    \            left_to_right.remove(at: 0)\n            collision += 1\n       \
    \ } else {\n            right_to_left.remove(at: 0)\n        }\n    }\n    return\
    \ collision\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(car_race_collision(n:\
    \ 2) == 4)\nassert(car_race_collision(n: 3) == 9)\nassert(car_race_collision(n:\
    \ 4) == 16)\nassert(car_race_collision(n: 8) == 64)\nassert(car_race_collision(n:\
    \ 10) == 100)"
  status: Exception
  stderr: 'tmp8er8zln7/tmp8er8zln7.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5f99f09c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5f99c00b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5f99c00988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5f99bff7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8er8zln7                        0x0000556f5354d535 <unavailable> + 5429

    5    libc.so.6                          0x00002b5f9a0f5460 __libc_start_main +
    245

    6    tmp8er8zln7                        0x0000556f5354d1e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1660012167
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = Array(repeating: 0, count: n)\n    var\
    \ right_to_left = Array(repeating: 0, count: n)\n    var collisions = 0\n    for\
    \ i in 0..<n {\n        left_to_right[i] = i\n        right_to_left[i] = n - i\
    \ - 1\n    }\n    for i in 0..<n {\n        for j in 0..<n {\n            if left_to_right[i]\
    \ == right_to_left[j] {\n                collisions += 1\n            }\n    \
    \    }\n    }\n    return collisions\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n: 3) == 9)\n\
    assert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n: 8) == 64)\n\
    assert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmp8gl69j6y/tmp8gl69j6y.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abc680c1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abc67db8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abc67db8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abc67db77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8gl69j6y                        0x000055beeb7cb455 <unavailable> + 5205

    5    libc.so.6                          0x00002abc682ad460 __libc_start_main +
    245

    6    tmp8gl69j6y                        0x000055beeb7cb109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660012166
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int](repeating: 0, count: n)\n    var\
    \ right_to_left = [Int](repeating: 0, count: n)\n    var i = 0\n    while i <\
    \ n {\n        left_to_right[i] = i\n        right_to_left[i] = n - i - 1\n  \
    \      i += 1\n    }\n    var collisions = 0\n    i = 0\n    while i < n {\n \
    \       var j = 0\n        while j < n {\n            if left_to_right[i] == right_to_left[j]\
    \ {\n                collisions += 1\n            }\n            j += 1\n    \
    \    }\n        i += 1\n    }\n    return collisions\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmpx74kc7zh/tmpx74kc7zh.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab6dc17bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab6dbe72b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab6dbe72988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab6dbe717b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpx74kc7zh                        0x00005590291e32c5 <unavailable> + 4805

    5    libc.so.6                          0x00002ab6dc367460 __libc_start_main +
    245

    6    tmpx74kc7zh                        0x00005590291e2f79 <unavailable> + 3961

    '
  stdout: ''
  timestamp: 1660012167
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int](repeating: 0, count: n)\n    var\
    \ right_to_left = [Int](repeating: 0, count: n)\n    for i in 0..<n {\n      \
    \  left_to_right[i] = i\n        right_to_left[i] = n - i - 1\n    }\n    var\
    \ count = 0\n    for i in 0..<n {\n        for j in 0..<n {\n            if left_to_right[i]\
    \ == right_to_left[j] {\n                count += 1\n            }\n        }\n\
    \    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(car_race_collision(n:\
    \ 2) == 4)\nassert(car_race_collision(n: 3) == 9)\nassert(car_race_collision(n:\
    \ 4) == 16)\nassert(car_race_collision(n: 8) == 64)\nassert(car_race_collision(n:\
    \ 10) == 100)"
  status: Exception
  stderr: 'tmpeixhzo9y/tmpeixhzo9y.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b261dd57c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b261da4eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b261da4e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b261da4d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeixhzo9y                        0x00005571c4c4f455 <unavailable> + 5205

    5    libc.so.6                          0x00002b261df43460 __libc_start_main +
    245

    6    tmpeixhzo9y                        0x00005571c4c4f109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660012166
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int](repeating: 0, count: n)\n    var\
    \ right_to_left = [Int](repeating: 0, count: n)\n    var collision = 0\n    for\
    \ i in 0..<n {\n        left_to_right[i] = i\n        right_to_left[i] = n - i\
    \ - 1\n    }\n    for i in 0..<n {\n        for j in 0..<n {\n            if left_to_right[i]\
    \ == right_to_left[j] {\n                collision += 1\n            }\n     \
    \   }\n    }\n    return collision\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n: 3) == 9)\n\
    assert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n: 8) == 64)\n\
    assert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmpw2pxp_gx/tmpw2pxp_gx.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1475015c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1474d0cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1474d0c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1474d0b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpw2pxp_gx                        0x000055eb2e404455 <unavailable> + 5205

    5    libc.so.6                          0x00002b1475201460 __libc_start_main +
    245

    6    tmpw2pxp_gx                        0x000055eb2e404109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660012166
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right_cars = [Int](repeating: 0, count: n)\n\
    \    var right_to_left_cars = [Int](repeating: 0, count: n)\n    for i in 0..<n\
    \ {\n        left_to_right_cars[i] = i\n        right_to_left_cars[i] = n - i\
    \ - 1\n    }\n    var collisions = 0\n    for i in 0..<n {\n        for j in 0..<n\
    \ {\n            if left_to_right_cars[i] == right_to_left_cars[j] {\n       \
    \         collisions += 1\n            }\n        }\n    }\n    return collisions\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmp9p9ib76u/tmp9p9ib76u.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7863e5bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7863b52b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7863b52988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7863b517b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9p9ib76u                        0x000056284a6b0455 <unavailable> + 5205

    5    libc.so.6                          0x00002b7864047460 __libc_start_main +
    245

    6    tmp9p9ib76u                        0x000056284a6b0109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660012167
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int](repeating: 0, count: n)\n    var\
    \ right_to_left = [Int](repeating: 0, count: n)\n    for i in 0..<n {\n      \
    \  left_to_right[i] = i\n        right_to_left[i] = n - i - 1\n    }\n    var\
    \ collisions = 0\n    for i in 0..<n {\n        for j in 0..<n {\n           \
    \ if left_to_right[i] == right_to_left[j] {\n                collisions += 1\n\
    \            }\n        }\n    }\n    return collisions\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmpy5_5e537/tmpy5_5e537.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4d882b4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4d87fabb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4d87fab988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4d87faa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpy5_5e537                        0x0000557cb2403455 <unavailable> + 5205

    5    libc.so.6                          0x00002b4d884a0460 __libc_start_main +
    245

    6    tmpy5_5e537                        0x0000557cb2403109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660012166
- exit_code: 1
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = Array(1...n)\n    var right_to_left =\
    \ Array(1...n).reversed()\n    var collisions = 0\n    while !left_to_right.isEmpty\
    \ && !right_to_left.isEmpty {\n        if left_to_right.first! < right_to_left.first!\
    \ {\n            left_to_right.removeFirst()\n        } else if left_to_right.first!\
    \ > right_to_left.first! {\n            right_to_left.removeFirst()\n        }\
    \ else {\n            collisions += 1\n            left_to_right.removeFirst()\n\
    \            right_to_left.removeFirst()\n        }\n    }\n    return collisions\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: SyntaxError
  stderr: "/tmp/tmp84j3kj9i.swift:18:13: error: referencing instance method 'removeFirst()'\
    \ on 'Collection' requires the types 'ReversedCollection<[Int]>' and 'Slice<ReversedCollection<[Int]>>'\
    \ be equivalent\n            right_to_left.removeFirst()\n            ^\nSwift.Collection:1:11:\
    \ note: where 'Self' = 'ReversedCollection<[Int]>', 'Self.SubSequence' = 'Slice<ReversedCollection<[Int]>>'\n\
    extension Collection where Self == Self.SubSequence {\n          ^\n/tmp/tmp84j3kj9i.swift:22:13:\
    \ error: referencing instance method 'removeFirst()' on 'Collection' requires\
    \ the types 'ReversedCollection<[Int]>' and 'Slice<ReversedCollection<[Int]>>'\
    \ be equivalent\n            right_to_left.removeFirst()\n            ^\nSwift.Collection:1:11:\
    \ note: where 'Self' = 'ReversedCollection<[Int]>', 'Self.SubSequence' = 'Slice<ReversedCollection<[Int]>>'\n\
    extension Collection where Self == Self.SubSequence {\n          ^\n"
  stdout: ''
  timestamp: 1660012167
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = Array(repeating: 0, count: n)\n    var\
    \ right_to_left = Array(repeating: 0, count: n)\n    for i in 0..<n {\n      \
    \  left_to_right[i] = i\n        right_to_left[i] = n - i - 1\n    }\n    var\
    \ collisions = 0\n    for i in 0..<n {\n        for j in 0..<n {\n           \
    \ if left_to_right[i] == right_to_left[j] {\n                collisions += 1\n\
    \            }\n        }\n    }\n    return collisions\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmplj1_f9_5/tmplj1_f9_5.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad498029c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad497d20b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad497d20988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad497d1f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplj1_f9_5                        0x0000561810f56455 <unavailable> + 5205

    5    libc.so.6                          0x00002ad498215460 __libc_start_main +
    245

    6    tmplj1_f9_5                        0x0000561810f56109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660012167
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int](repeating: 0, count: n)\n    var\
    \ right_to_left = [Int](repeating: 0, count: n)\n    for i in 0..<n {\n      \
    \  left_to_right[i] = i\n        right_to_left[i] = n - i - 1\n    }\n    var\
    \ collisions = 0\n    for i in 0..<n {\n        for j in 0..<n {\n           \
    \ if left_to_right[i] == right_to_left[j] {\n                collisions += 1\n\
    \            }\n        }\n    }\n    return collisions\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmpy5_5e537/tmpy5_5e537.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4d882b4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4d87fabb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4d87fab988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4d87faa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpy5_5e537                        0x0000557cb2403455 <unavailable> + 5205

    5    libc.so.6                          0x00002b4d884a0460 __libc_start_main +
    245

    6    tmpy5_5e537                        0x0000557cb2403109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660012166
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int](repeating: 0, count: n)\n    var\
    \ right_to_left = [Int](repeating: 0, count: n)\n    var collisions = 0\n    for\
    \ i in 0..<n {\n        left_to_right[i] = i\n        right_to_left[i] = n - i\
    \ - 1\n    }\n    for i in 0..<n {\n        for j in 0..<n {\n            if left_to_right[i]\
    \ == right_to_left[j] {\n                collisions += 1\n            }\n    \
    \    }\n    }\n    return collisions\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n: 3) == 9)\n\
    assert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n: 8) == 64)\n\
    assert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmps1jc4l0x/tmps1jc4l0x.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7480becc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b74808e3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b74808e3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b74808e27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmps1jc4l0x                        0x000055a38fff1455 <unavailable> + 5205

    5    libc.so.6                          0x00002b7480dd8460 __libc_start_main +
    245

    6    tmps1jc4l0x                        0x000055a38fff1109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660012166
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int](repeating: 0, count: n)\n    var\
    \ right_to_left = [Int](repeating: 0, count: n)\n    var collisions = 0\n    for\
    \ i in 0..<n {\n        left_to_right[i] = i\n        right_to_left[i] = n - i\
    \ - 1\n    }\n    for i in 0..<n {\n        for j in 0..<n {\n            if left_to_right[i]\
    \ == right_to_left[j] {\n                collisions += 1\n            }\n    \
    \    }\n    }\n    return collisions\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n: 3) == 9)\n\
    assert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n: 8) == 64)\n\
    assert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmps1jc4l0x/tmps1jc4l0x.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7480becc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b74808e3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b74808e3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b74808e27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmps1jc4l0x                        0x000055a38fff1455 <unavailable> + 5205

    5    libc.so.6                          0x00002b7480dd8460 __libc_start_main +
    245

    6    tmps1jc4l0x                        0x000055a38fff1109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660012166
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int](repeating: 0, count: n)\n    var\
    \ right_to_left = [Int](repeating: 0, count: n)\n    for i in 0..<n {\n      \
    \  left_to_right[i] = i\n        right_to_left[i] = n - i - 1\n    }\n    var\
    \ collisions = 0\n    for i in 0..<n {\n        for j in 0..<n {\n           \
    \ if left_to_right[i] == right_to_left[j] {\n                collisions += 1\n\
    \            }\n        }\n    }\n    return collisions\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmpy5_5e537/tmpy5_5e537.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4d882b4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4d87fabb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4d87fab988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4d87faa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpy5_5e537                        0x0000557cb2403455 <unavailable> + 5205

    5    libc.so.6                          0x00002b4d884a0460 __libc_start_main +
    245

    6    tmpy5_5e537                        0x0000557cb2403109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660012166
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int]()\n    var right_to_left = [Int]()\n\
    \    for i in 0..<n {\n        left_to_right.append(i)\n        right_to_left.append(n\
    \ - i - 1)\n    }\n    var collisions = 0\n    var i = 0\n    var j = 0\n    while\
    \ i < n && j < n {\n        if left_to_right[i] < right_to_left[j] {\n       \
    \     collisions += j\n            i += 1\n        } else {\n            j +=\
    \ 1\n        }\n    }\n    collisions += (n - i) * j\n    return collisions\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmp6qq8mxot/tmp6qq8mxot.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3894571c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3894268b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3894268988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b38942677b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6qq8mxot                        0x0000560f8b952445 <unavailable> + 5189

    5    libc.so.6                          0x00002b389475d460 __libc_start_main +
    245

    6    tmp6qq8mxot                        0x0000560f8b9520f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660012167
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int](repeating: 0, count: n)\n    var\
    \ right_to_left = [Int](repeating: 0, count: n)\n    var collision_count = 0\n\
    \    var i = 0\n    while i < n {\n        left_to_right[i] = i\n        right_to_left[i]\
    \ = n - i - 1\n        i += 1\n    }\n    i = 0\n    while i < n {\n        if\
    \ left_to_right[i] == right_to_left[i] {\n            collision_count += 1\n \
    \       }\n        i += 1\n    }\n    return collision_count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmpa78lmqyr/tmpa78lmqyr.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba795016c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba794d0db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba794d0d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba794d0c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpa78lmqyr                        0x0000564ea22c82c5 <unavailable> + 4805

    5    libc.so.6                          0x00002ba795202460 __libc_start_main +
    245

    6    tmpa78lmqyr                        0x0000564ea22c7f79 <unavailable> + 3961

    '
  stdout: ''
  timestamp: 1660012167
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left = [Int](repeating: 0, count: n)\n    var right =\
    \ [Int](repeating: 0, count: n)\n    var collision = 0\n    for i in 0..<n {\n\
    \        left[i] = i\n        right[i] = n - i - 1\n    }\n    for i in 0..<n\
    \ {\n        for j in 0..<n {\n            if left[i] == right[j] {\n        \
    \        collision += 1\n            }\n        }\n    }\n    return collision\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmpesleicsl/tmpesleicsl.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b00f6546c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b00f623db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b00f623d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b00f623c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpesleicsl                        0x000055fbd658d455 <unavailable> + 5205

    5    libc.so.6                          0x00002b00f6732460 __libc_start_main +
    245

    6    tmpesleicsl                        0x000055fbd658d109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660012167
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = Array(repeating: 0, count: n)\n    var\
    \ right_to_left = Array(repeating: 0, count: n)\n    var collisions = 0\n    for\
    \ i in 0..<n {\n        left_to_right[i] = i\n        right_to_left[i] = n - i\
    \ - 1\n    }\n    for i in 0..<n {\n        for j in 0..<n {\n            if left_to_right[i]\
    \ == right_to_left[j] {\n                collisions += 1\n            }\n    \
    \    }\n    }\n    return collisions\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n: 3) == 9)\n\
    assert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n: 8) == 64)\n\
    assert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmp8gl69j6y/tmp8gl69j6y.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abc680c1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abc67db8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abc67db8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abc67db77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8gl69j6y                        0x000055beeb7cb455 <unavailable> + 5205

    5    libc.so.6                          0x00002abc682ad460 __libc_start_main +
    245

    6    tmp8gl69j6y                        0x000055beeb7cb109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660012166
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int](repeating: 0, count: n)\n    var\
    \ right_to_left = [Int](repeating: 0, count: n)\n    var i = 0\n    while i <\
    \ n {\n        left_to_right[i] = i\n        right_to_left[i] = n - i - 1\n  \
    \      i += 1\n    }\n    var collisions = 0\n    var j = 0\n    while j < n {\n\
    \        if left_to_right[j] == right_to_left[j] {\n            collisions +=\
    \ 1\n        }\n        j += 1\n    }\n    return collisions\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmpyrh67zex/tmpyrh67zex.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac2f34dfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac2f31d6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac2f31d6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac2f31d57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyrh67zex                        0x000055908da1c2c5 <unavailable> + 4805

    5    libc.so.6                          0x00002ac2f36cb460 __libc_start_main +
    245

    6    tmpyrh67zex                        0x000055908da1bf79 <unavailable> + 3961

    '
  stdout: ''
  timestamp: 1660012167
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int](repeating: 0, count: n)\n    var\
    \ right_to_left = [Int](repeating: 0, count: n)\n    for i in 0..<n {\n      \
    \  left_to_right[i] = i\n        right_to_left[i] = n - i - 1\n    }\n    var\
    \ collisions = 0\n    for i in 0..<n {\n        for j in 0..<n {\n           \
    \ if left_to_right[i] == right_to_left[j] {\n                collisions += 1\n\
    \            }\n        }\n    }\n    return collisions\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmpy5_5e537/tmpy5_5e537.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4d882b4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4d87fabb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4d87fab988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4d87faa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpy5_5e537                        0x0000557cb2403455 <unavailable> + 5205

    5    libc.so.6                          0x00002b4d884a0460 __libc_start_main +
    245

    6    tmpy5_5e537                        0x0000557cb2403109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660012166
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left = Array(repeating: 0, count: n)\n    var right =\
    \ Array(repeating: 0, count: n)\n    var collisions = 0\n    for i in 0..<n {\n\
    \        left[i] = i\n        right[i] = n - i - 1\n    }\n    for i in 0..<n\
    \ {\n        for j in 0..<n {\n            if left[i] == right[j] {\n        \
    \        collisions += 1\n            }\n        }\n    }\n    return collisions\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmp5hdrhdxz/tmp5hdrhdxz.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4ea81a1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4ea7e98b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4ea7e98988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4ea7e977b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5hdrhdxz                        0x0000563394de6455 <unavailable> + 5205

    5    libc.so.6                          0x00002b4ea838d460 __libc_start_main +
    245

    6    tmp5hdrhdxz                        0x0000563394de6109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660012167
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int](repeating: 0, count: n)\n    var\
    \ right_to_left = [Int](repeating: 0, count: n)\n    for i in 0..<n {\n      \
    \  left_to_right[i] = i\n        right_to_left[i] = n - i - 1\n    }\n    var\
    \ collisions = 0\n    for i in 0..<n {\n        for j in 0..<n {\n           \
    \ if left_to_right[i] == right_to_left[j] {\n                collisions += 1\n\
    \            }\n        }\n    }\n    return collisions\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmpy5_5e537/tmpy5_5e537.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4d882b4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4d87fabb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4d87fab988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4d87faa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpy5_5e537                        0x0000557cb2403455 <unavailable> + 5205

    5    libc.so.6                          0x00002b4d884a0460 __libc_start_main +
    245

    6    tmpy5_5e537                        0x0000557cb2403109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660012166
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int](repeating: 0, count: n)\n    var\
    \ right_to_left = [Int](repeating: 0, count: n)\n    for i in 0..<n {\n      \
    \  left_to_right[i] = i\n        right_to_left[i] = n - i - 1\n    }\n    var\
    \ collisions = 0\n    for i in 0..<n {\n        for j in 0..<n {\n           \
    \ if left_to_right[i] == right_to_left[j] {\n                collisions += 1\n\
    \            }\n        }\n    }\n    return collisions\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmpy5_5e537/tmpy5_5e537.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4d882b4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4d87fabb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4d87fab988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4d87faa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpy5_5e537                        0x0000557cb2403455 <unavailable> + 5205

    5    libc.so.6                          0x00002b4d884a0460 __libc_start_main +
    245

    6    tmpy5_5e537                        0x0000557cb2403109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660012166
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = Array(0..<n)\n    var right_to_left =\
    \ Array(0..<n)\n    var collisions = 0\n    while !left_to_right.isEmpty && !right_to_left.isEmpty\
    \ {\n        if left_to_right.first! < right_to_left.first! {\n            left_to_right.removeFirst()\n\
    \        } else if left_to_right.first! > right_to_left.first! {\n           \
    \ right_to_left.removeFirst()\n        } else {\n            left_to_right.removeFirst()\n\
    \            right_to_left.removeFirst()\n            collisions += 1\n      \
    \  }\n    }\n    return collisions\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n: 3) == 9)\n\
    assert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n: 8) == 64)\n\
    assert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmpnkryphrl/tmpnkryphrl.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b813b132c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b813ae29b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b813ae29988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b813ae287b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnkryphrl                        0x0000556b80850565 <unavailable> + 5477

    5    libc.so.6                          0x00002b813b31e460 __libc_start_main +
    245

    6    tmpnkryphrl                        0x0000556b80850219 <unavailable> + 4633

    '
  stdout: ''
  timestamp: 1660012167
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int]()\n    var right_to_left = [Int]()\n\
    \    var collision_count = 0\n    for i in 0..<n {\n        left_to_right.append(i)\n\
    \        right_to_left.append(n-i-1)\n    }\n    for i in 0..<n {\n        for\
    \ j in 0..<n {\n            if left_to_right[i] == right_to_left[j] {\n      \
    \          collision_count += 1\n            }\n        }\n    }\n    return collision_count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmp27wjgho_/tmp27wjgho_.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b22d48b4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b22d45abb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b22d45ab988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b22d45aa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp27wjgho_                        0x0000563be6007445 <unavailable> + 5189

    5    libc.so.6                          0x00002b22d4aa0460 __libc_start_main +
    245

    6    tmp27wjgho_                        0x0000563be60070f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660012166
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var collisions = 0\n    var left = 0\n    var right = n -\
    \ 1\n    while left < right {\n        if left == right {\n            collisions\
    \ += 1\n        } else {\n            collisions += 2\n        }\n        left\
    \ += 1\n        right -= 1\n    }\n    return collisions\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmpgfxqxete/tmpgfxqxete.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afbc9c49c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afbc9940b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afbc9940988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afbc993f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgfxqxete                        0x000055d0d60451b5 <unavailable> + 4533

    5    libc.so.6                          0x00002afbc9e35460 __libc_start_main +
    245

    6    tmpgfxqxete                        0x000055d0d6044e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660012167
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int](repeating: 0, count: n)\n    var\
    \ right_to_left = [Int](repeating: 0, count: n)\n    for i in 0..<n {\n      \
    \  left_to_right[i] = i\n        right_to_left[i] = n - i - 1\n    }\n    var\
    \ collisions = 0\n    for i in 0..<n {\n        for j in 0..<n {\n           \
    \ if left_to_right[i] == right_to_left[j] {\n                collisions += 1\n\
    \            }\n        }\n    }\n    return collisions\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmpy5_5e537/tmpy5_5e537.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4d882b4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4d87fabb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4d87fab988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4d87faa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpy5_5e537                        0x0000557cb2403455 <unavailable> + 5205

    5    libc.so.6                          0x00002b4d884a0460 __libc_start_main +
    245

    6    tmpy5_5e537                        0x0000557cb2403109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660012166
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int](repeating: 0, count: n)\n    var\
    \ right_to_left = [Int](repeating: 0, count: n)\n    for i in 0..<n {\n      \
    \  left_to_right[i] = i\n        right_to_left[i] = n - i - 1\n    }\n    var\
    \ collisions = 0\n    for i in 0..<n {\n        for j in 0..<n {\n           \
    \ if left_to_right[i] == right_to_left[j] {\n                collisions += 1\n\
    \            }\n        }\n    }\n    return collisions\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmpy5_5e537/tmpy5_5e537.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4d882b4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4d87fabb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4d87fab988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4d87faa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpy5_5e537                        0x0000557cb2403455 <unavailable> + 5205

    5    libc.so.6                          0x00002b4d884a0460 __libc_start_main +
    245

    6    tmpy5_5e537                        0x0000557cb2403109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660012166
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right_cars = [Int](repeating: 0, count: n)\n\
    \    var right_to_left_cars = [Int](repeating: 0, count: n)\n    for i in 0..<n\
    \ {\n        left_to_right_cars[i] = i\n        right_to_left_cars[i] = n - i\
    \ - 1\n    }\n    var collisions = 0\n    for i in 0..<n {\n        for j in 0..<n\
    \ {\n            if left_to_right_cars[i] == right_to_left_cars[j] {\n       \
    \         collisions += 1\n            }\n        }\n    }\n    return collisions\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmp9p9ib76u/tmp9p9ib76u.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7863e5bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7863b52b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7863b52988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7863b517b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9p9ib76u                        0x000056284a6b0455 <unavailable> + 5205

    5    libc.so.6                          0x00002b7864047460 __libc_start_main +
    245

    6    tmp9p9ib76u                        0x000056284a6b0109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660012167
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = Array(repeating: 0, count: n)\n    var\
    \ right_to_left = Array(repeating: 0, count: n)\n    var collisions = 0\n    for\
    \ i in 0..<n {\n        left_to_right[i] = i\n        right_to_left[i] = n - i\
    \ - 1\n    }\n    for i in 0..<n {\n        for j in 0..<n {\n            if left_to_right[i]\
    \ == right_to_left[j] {\n                collisions += 1\n            }\n    \
    \    }\n    }\n    return collisions\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n: 3) == 9)\n\
    assert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n: 8) == 64)\n\
    assert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmp8gl69j6y/tmp8gl69j6y.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abc680c1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abc67db8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abc67db8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abc67db77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8gl69j6y                        0x000055beeb7cb455 <unavailable> + 5205

    5    libc.so.6                          0x00002abc682ad460 __libc_start_main +
    245

    6    tmp8gl69j6y                        0x000055beeb7cb109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660012166
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int]()\n    var right_to_left = [Int]()\n\
    \    for i in 0..<n {\n        left_to_right.append(i)\n        right_to_left.append(n\
    \ - i - 1)\n    }\n    var collision = 0\n    for i in 0..<n {\n        for j\
    \ in 0..<n {\n            if left_to_right[i] == right_to_left[j] {\n        \
    \        collision += 1\n            }\n        }\n    }\n    return collision\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmpd3ver6fr/tmpd3ver6fr.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b787824cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7877f43b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7877f43988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7877f427b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpd3ver6fr                        0x000055a4687de445 <unavailable> + 5189

    5    libc.so.6                          0x00002b7878438460 __libc_start_main +
    245

    6    tmpd3ver6fr                        0x000055a4687de0f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660012167
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int]()\n    var right_to_left = [Int]()\n\
    \    for i in 0..<n {\n        left_to_right.append(i)\n        right_to_left.append(n\
    \ - i - 1)\n    }\n    var collisions = 0\n    var i = 0\n    var j = 0\n    while\
    \ i < n && j < n {\n        if left_to_right[i] < right_to_left[j] {\n       \
    \     collisions += j\n            i += 1\n        } else {\n            j +=\
    \ 1\n        }\n    }\n    collisions += (n - i) * j\n    return collisions\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmp6qq8mxot/tmp6qq8mxot.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3894571c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3894268b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3894268988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b38942677b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6qq8mxot                        0x0000560f8b952445 <unavailable> + 5189

    5    libc.so.6                          0x00002b389475d460 __libc_start_main +
    245

    6    tmp6qq8mxot                        0x0000560f8b9520f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660012167
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int]()\n    var right_to_left = [Int]()\n\
    \    for i in 0..<n {\n        left_to_right.append(i)\n        right_to_left.append(i)\n\
    \    }\n    var collisions = 0\n    for i in 0..<n {\n        for j in 0..<n {\n\
    \            if left_to_right[i] == right_to_left[j] {\n                collisions\
    \ += 1\n            }\n        }\n    }\n    return collisions\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmpucfy9q2q/tmpucfy9q2q.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abe95969c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abe95660b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abe95660988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abe9565f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpucfy9q2q                        0x00005578fca50445 <unavailable> + 5189

    5    libc.so.6                          0x00002abe95b55460 __libc_start_main +
    245

    6    tmpucfy9q2q                        0x00005578fca500f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660012166
- exit_code: 1
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = Array(repeating: 0, count: n)\n    var\
    \ right_to_left = Array(repeating: 0, count: n)\n    for i in 0..<n {\n      \
    \  left_to_right[i] = i\n        right_to_left[i] = n - i - 1\n    }\n    return\
    \ merge_and_count_inversions(left_to_right, right_to_left)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: SyntaxError
  stderr: "/tmp/tmppxfejnue.swift:17:12: error: cannot find 'merge_and_count_inversions'\
    \ in scope\n    return merge_and_count_inversions(left_to_right, right_to_left)\n\
    \           ^~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660012167
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int](repeating: 0, count: n)\n    var\
    \ right_to_left = [Int](repeating: 0, count: n)\n    var collisions = 0\n    for\
    \ i in 0..<n {\n        left_to_right[i] = i\n        right_to_left[i] = n - i\
    \ - 1\n    }\n    for i in 0..<n {\n        for j in 0..<n {\n            if left_to_right[i]\
    \ == right_to_left[j] {\n                collisions += 1\n            }\n    \
    \    }\n    }\n    return collisions\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n: 3) == 9)\n\
    assert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n: 8) == 64)\n\
    assert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmps1jc4l0x/tmps1jc4l0x.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7480becc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b74808e3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b74808e3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b74808e27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmps1jc4l0x                        0x000055a38fff1455 <unavailable> + 5205

    5    libc.so.6                          0x00002b7480dd8460 __libc_start_main +
    245

    6    tmps1jc4l0x                        0x000055a38fff1109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660012166
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int](repeating: 0, count: n)\n    var\
    \ right_to_left = [Int](repeating: 0, count: n)\n    var i = 0\n    while i <\
    \ n {\n        left_to_right[i] = i\n        right_to_left[i] = n - i - 1\n  \
    \      i += 1\n    }\n    var collisions = 0\n    i = 0\n    while i < n {\n \
    \       if left_to_right[i] == right_to_left[i] {\n            collisions += 1\n\
    \        }\n        i += 1\n    }\n    return collisions\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmpnjd3n2iq/tmpnjd3n2iq.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6d211c5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6d20ebcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6d20ebc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6d20ebb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnjd3n2iq                        0x000055b9535322c5 <unavailable> + 4805

    5    libc.so.6                          0x00002b6d213b1460 __libc_start_main +
    245

    6    tmpnjd3n2iq                        0x000055b953531f79 <unavailable> + 3961

    '
  stdout: ''
  timestamp: 1660012167
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var collisions = 0\n    var left = 0\n    var right = n -\
    \ 1\n    while left < right {\n        if left < right {\n            left +=\
    \ 1\n        }\n        if left < right {\n            right -= 1\n        }\n\
    \        collisions += 1\n    }\n    return collisions\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmp3soe120t/tmp3soe120t.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba7ccaa0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba7cc797b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba7cc797988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba7cc7967b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3soe120t                        0x000055b86a1ae1b5 <unavailable> + 4533

    5    libc.so.6                          0x00002ba7ccc8c460 __libc_start_main +
    245

    6    tmp3soe120t                        0x000055b86a1ade69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660012167
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int]()\n    var right_to_left = [Int]()\n\
    \    for i in 0..<n {\n        left_to_right.append(i)\n        right_to_left.append(i)\n\
    \    }\n    var count = 0\n    for i in 0..<n {\n        for j in 0..<n {\n  \
    \          if left_to_right[i] == right_to_left[j] {\n                count +=\
    \ 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmp70sp7ps7/tmp70sp7ps7.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aef617adc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aef614a4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aef614a4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aef614a37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp70sp7ps7                        0x000055764b76f445 <unavailable> + 5189

    5    libc.so.6                          0x00002aef61999460 __libc_start_main +
    245

    6    tmp70sp7ps7                        0x000055764b76f0f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660012167
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var collisions = 0\n    var left_to_right = [Int]()\n   \
    \ var right_to_left = [Int]()\n    for i in 0..<n {\n        left_to_right.append(i)\n\
    \        right_to_left.append(n - i - 1)\n    }\n    for i in 0..<n {\n      \
    \  for j in 0..<n {\n            if left_to_right[i] == right_to_left[j] {\n \
    \               collisions += 1\n            }\n        }\n    }\n    return collisions\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmpjmhqfu84/tmpjmhqfu84.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b03e5e5ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b03e5b51b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b03e5b51988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b03e5b507b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjmhqfu84                        0x0000560dea3a4445 <unavailable> + 5189

    5    libc.so.6                          0x00002b03e6046460 __libc_start_main +
    245

    6    tmpjmhqfu84                        0x0000560dea3a40f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660012167
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int](repeating: 0, count: n)\n    var\
    \ right_to_left = [Int](repeating: 0, count: n)\n    for i in 0..<n {\n      \
    \  left_to_right[i] = i\n        right_to_left[i] = n - i - 1\n    }\n    var\
    \ collisions = 0\n    var i = 0\n    var j = 0\n    while i < n && j < n {\n \
    \       if left_to_right[i] < right_to_left[j] {\n            collisions += j\n\
    \            i += 1\n        } else {\n            j += 1\n        }\n    }\n\
    \    collisions += (n - i) * j\n    return collisions\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmpoby69lxh/tmpoby69lxh.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af46acfcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af46a9f3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af46a9f3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af46a9f27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpoby69lxh                        0x00005651e075d455 <unavailable> + 5205

    5    libc.so.6                          0x00002af46aee8460 __libc_start_main +
    245

    6    tmpoby69lxh                        0x00005651e075d109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660012167
- exit_code: 1
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int](count: n, repeatedValue: 0)\n \
    \   var right_to_left = [Int](count: n, repeatedValue: 0)\n    for i in 0..<n\
    \ {\n        left_to_right[i] = i\n        right_to_left[i] = n - i - 1\n    }\n\
    \    return merge_sort_collision(left_to_right, right_to_left)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: SyntaxError
  stderr: "/tmp/tmp1l5_ebds.swift:11:25: error: no exact matches in call to initializer\
    \ \n    var left_to_right = [Int](count: n, repeatedValue: 0)\n              \
    \          ^\n/tmp/tmp1l5_ebds.swift:11:25: note: candidate has partially matching\
    \ parameter list (repeating: Int, count: Int)\n    var left_to_right = [Int](count:\
    \ n, repeatedValue: 0)\n                        ^\n/tmp/tmp1l5_ebds.swift:11:25:\
    \ note: candidate has partially matching parameter list (repeating: Int, count:\
    \ Int)\n    var left_to_right = [Int](count: n, repeatedValue: 0)\n          \
    \              ^\n/tmp/tmp1l5_ebds.swift:12:25: error: no exact matches in call\
    \ to initializer \n    var right_to_left = [Int](count: n, repeatedValue: 0)\n\
    \                        ^\n/tmp/tmp1l5_ebds.swift:12:25: note: candidate has\
    \ partially matching parameter list (repeating: Int, count: Int)\n    var right_to_left\
    \ = [Int](count: n, repeatedValue: 0)\n                        ^\n/tmp/tmp1l5_ebds.swift:12:25:\
    \ note: candidate has partially matching parameter list (repeating: Int, count:\
    \ Int)\n    var right_to_left = [Int](count: n, repeatedValue: 0)\n          \
    \              ^\n/tmp/tmp1l5_ebds.swift:17:12: error: cannot find 'merge_sort_collision'\
    \ in scope\n    return merge_sort_collision(left_to_right, right_to_left)\n  \
    \         ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660012167
- exit_code: 0
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int](repeating: 0, count: n)\n    var\
    \ right_to_left = [Int](repeating: 0, count: n)\n    var i = 0\n    var j = 0\n\
    \    var count = 0\n    while i < n && j < n {\n        if left_to_right[i] <\
    \ right_to_left[j] {\n            count += j\n            i += 1\n        } else\
    \ {\n            j += 1\n        }\n    }\n    return count + (n - i) * j\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660012167
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int](repeating: 0, count: n)\n    var\
    \ right_to_left = [Int](repeating: 0, count: n)\n    for i in 0..<n {\n      \
    \  left_to_right[i] = i\n        right_to_left[i] = n - i - 1\n    }\n    var\
    \ collisions = 0\n    for i in 0..<n {\n        for j in 0..<n {\n           \
    \ if left_to_right[i] == right_to_left[j] {\n                collisions += 1\n\
    \            }\n        }\n    }\n    return collisions\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmpy5_5e537/tmpy5_5e537.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4d882b4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4d87fabb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4d87fab988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4d87faa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpy5_5e537                        0x0000557cb2403455 <unavailable> + 5205

    5    libc.so.6                          0x00002b4d884a0460 __libc_start_main +
    245

    6    tmpy5_5e537                        0x0000557cb2403109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660012166
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int]()\n    var right_to_left = [Int]()\n\
    \    for i in 0..<n {\n        left_to_right.append(i)\n        right_to_left.append(n\
    \ - i - 1)\n    }\n    var collisions = 0\n    for i in 0..<n {\n        if left_to_right[i]\
    \ == right_to_left[i] {\n            collisions += 1\n        }\n    }\n    return\
    \ collisions\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(car_race_collision(n:\
    \ 2) == 4)\nassert(car_race_collision(n: 3) == 9)\nassert(car_race_collision(n:\
    \ 4) == 16)\nassert(car_race_collision(n: 8) == 64)\nassert(car_race_collision(n:\
    \ 10) == 100)"
  status: Exception
  stderr: 'tmpi5okbt3t/tmpi5okbt3t.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6460de4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6460adbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6460adb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6460ada7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpi5okbt3t                        0x0000564d89c71445 <unavailable> + 5189

    5    libc.so.6                          0x00002b6460fd0460 __libc_start_main +
    245

    6    tmpi5okbt3t                        0x0000564d89c710f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660012168
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int](repeating: 0, count: n)\n    var\
    \ right_to_left = [Int](repeating: 0, count: n)\n    var collisions = 0\n    for\
    \ i in 0..<n {\n        left_to_right[i] = i\n        right_to_left[i] = n - i\
    \ - 1\n    }\n    for i in 0..<n {\n        for j in 0..<n {\n            if left_to_right[i]\
    \ == right_to_left[j] {\n                collisions += 1\n            }\n    \
    \    }\n    }\n    return collisions\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n: 3) == 9)\n\
    assert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n: 8) == 64)\n\
    assert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmps1jc4l0x/tmps1jc4l0x.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7480becc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b74808e3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b74808e3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b74808e27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmps1jc4l0x                        0x000055a38fff1455 <unavailable> + 5205

    5    libc.so.6                          0x00002b7480dd8460 __libc_start_main +
    245

    6    tmps1jc4l0x                        0x000055a38fff1109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660012166
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var collisions = 0\n    var left_to_right = [Int]()\n   \
    \ var right_to_left = [Int]()\n    for i in 0..<n {\n        left_to_right.append(i)\n\
    \        right_to_left.append(n - i - 1)\n    }\n    for i in 0..<n {\n      \
    \  for j in 0..<n {\n            if left_to_right[i] == right_to_left[j] {\n \
    \               collisions += 1\n            }\n        }\n    }\n    return collisions\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmpjmhqfu84/tmpjmhqfu84.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b03e5e5ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b03e5b51b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b03e5b51988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b03e5b507b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjmhqfu84                        0x0000560dea3a4445 <unavailable> + 5189

    5    libc.so.6                          0x00002b03e6046460 __libc_start_main +
    245

    6    tmpjmhqfu84                        0x0000560dea3a40f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660012167
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int]()\n    var right_to_left = [Int]()\n\
    \    var collisions = 0\n    for i in 0..<n {\n        left_to_right.append(i)\n\
    \        right_to_left.append(n-i-1)\n    }\n    for i in 0..<n {\n        for\
    \ j in 0..<n {\n            if left_to_right[i] == right_to_left[j] {\n      \
    \          collisions += 1\n            }\n        }\n    }\n    return collisions\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmpzl86np2_/tmpzl86np2_.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba97cd4ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba97ca45b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba97ca45988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba97ca447b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzl86np2_                        0x000055ca10def445 <unavailable> + 5189

    5    libc.so.6                          0x00002ba97cf3a460 __libc_start_main +
    245

    6    tmpzl86np2_                        0x000055ca10def0f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660012166
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int](repeating: 0, count: n)\n    var\
    \ right_to_left = [Int](repeating: 0, count: n)\n    var collisions = 0\n    for\
    \ i in 0..<n {\n        left_to_right[i] = i\n        right_to_left[i] = n - i\
    \ - 1\n    }\n    for i in 0..<n {\n        for j in 0..<n {\n            if left_to_right[i]\
    \ == right_to_left[j] {\n                collisions += 1\n            }\n    \
    \    }\n    }\n    return collisions\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n: 3) == 9)\n\
    assert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n: 8) == 64)\n\
    assert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmps1jc4l0x/tmps1jc4l0x.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7480becc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b74808e3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b74808e3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b74808e27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmps1jc4l0x                        0x000055a38fff1455 <unavailable> + 5205

    5    libc.so.6                          0x00002b7480dd8460 __libc_start_main +
    245

    6    tmps1jc4l0x                        0x000055a38fff1109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660012166
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int]()\n    var right_to_left = [Int]()\n\
    \    for i in 0..<n {\n        left_to_right.append(i)\n        right_to_left.append(n\
    \ - i - 1)\n    }\n    var count = 0\n    for i in 0..<n {\n        for j in 0..<n\
    \ {\n            if left_to_right[i] == right_to_left[j] {\n                count\
    \ += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmp2hktz2mj/tmp2hktz2mj.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acf0d9c0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acf0d6b7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acf0d6b7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acf0d6b67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2hktz2mj                        0x00005580120f7445 <unavailable> + 5189

    5    libc.so.6                          0x00002acf0dbac460 __libc_start_main +
    245

    6    tmp2hktz2mj                        0x00005580120f70f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660012166
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var collisions = 0\n    var left_to_right = Array(repeating:\
    \ 0, count: n)\n    var right_to_left = Array(repeating: 0, count: n)\n    for\
    \ i in 0..<n {\n        left_to_right[i] = i\n        right_to_left[i] = n - i\
    \ - 1\n    }\n    for i in 0..<n {\n        for j in 0..<n {\n            if left_to_right[i]\
    \ == right_to_left[j] {\n                collisions += 1\n            }\n    \
    \    }\n    }\n    return collisions\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n: 3) == 9)\n\
    assert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n: 8) == 64)\n\
    assert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmp855j_geu/tmp855j_geu.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8d5bb32c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8d5b829b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8d5b829988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8d5b8287b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp855j_geu                        0x00005599f48b5455 <unavailable> + 5205

    5    libc.so.6                          0x00002b8d5bd1e460 __libc_start_main +
    245

    6    tmp855j_geu                        0x00005599f48b5109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660012167
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int](repeating: 0, count: n)\n    var\
    \ right_to_left = [Int](repeating: 0, count: n)\n    var collisions = 0\n    for\
    \ i in 0..<n {\n        left_to_right[i] = i\n        right_to_left[i] = n - i\
    \ - 1\n    }\n    for i in 0..<n {\n        for j in 0..<n {\n            if left_to_right[i]\
    \ == right_to_left[j] {\n                collisions += 1\n            }\n    \
    \    }\n    }\n    return collisions\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n: 3) == 9)\n\
    assert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n: 8) == 64)\n\
    assert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmps1jc4l0x/tmps1jc4l0x.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7480becc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b74808e3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b74808e3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b74808e27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmps1jc4l0x                        0x000055a38fff1455 <unavailable> + 5205

    5    libc.so.6                          0x00002b7480dd8460 __libc_start_main +
    245

    6    tmps1jc4l0x                        0x000055a38fff1109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660012166
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var collisions = 0\n    var left_to_right = Array(repeating:\
    \ 0, count: n)\n    var right_to_left = Array(repeating: 0, count: n)\n    for\
    \ i in 0..<n {\n        left_to_right[i] = i\n        right_to_left[i] = n - i\
    \ - 1\n    }\n    for i in 0..<n {\n        for j in 0..<n {\n            if left_to_right[i]\
    \ == right_to_left[j] {\n                collisions += 1\n            }\n    \
    \    }\n    }\n    return collisions\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n: 3) == 9)\n\
    assert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n: 8) == 64)\n\
    assert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmp855j_geu/tmp855j_geu.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8d5bb32c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8d5b829b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8d5b829988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8d5b8287b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp855j_geu                        0x00005599f48b5455 <unavailable> + 5205

    5    libc.so.6                          0x00002b8d5bd1e460 __libc_start_main +
    245

    6    tmp855j_geu                        0x00005599f48b5109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660012167
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int](repeating: 0, count: n)\n    var\
    \ right_to_left = [Int](repeating: 0, count: n)\n    var i = 0\n    while i <\
    \ n {\n        left_to_right[i] = i\n        right_to_left[i] = n - i - 1\n  \
    \      i += 1\n    }\n    var collisions = 0\n    i = 0\n    while i < n {\n \
    \       if left_to_right[i] == right_to_left[i] {\n            collisions += 1\n\
    \        }\n        i += 1\n    }\n    return collisions\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmpnjd3n2iq/tmpnjd3n2iq.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6d211c5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6d20ebcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6d20ebc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6d20ebb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnjd3n2iq                        0x000055b9535322c5 <unavailable> + 4805

    5    libc.so.6                          0x00002b6d213b1460 __libc_start_main +
    245

    6    tmpnjd3n2iq                        0x000055b953531f79 <unavailable> + 3961

    '
  stdout: ''
  timestamp: 1660012167
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int](repeating: 0, count: n)\n    var\
    \ right_to_left = [Int](repeating: 0, count: n)\n    var collision = 0\n    for\
    \ i in 0..<n {\n        left_to_right[i] = i\n        right_to_left[i] = n - i\
    \ - 1\n    }\n    for i in 0..<n {\n        for j in 0..<n {\n            if left_to_right[i]\
    \ == right_to_left[j] {\n                collision += 1\n            }\n     \
    \   }\n    }\n    return collision\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n: 3) == 9)\n\
    assert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n: 8) == 64)\n\
    assert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmpw2pxp_gx/tmpw2pxp_gx.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1475015c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1474d0cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1474d0c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1474d0b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpw2pxp_gx                        0x000055eb2e404455 <unavailable> + 5205

    5    libc.so.6                          0x00002b1475201460 __libc_start_main +
    245

    6    tmpw2pxp_gx                        0x000055eb2e404109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660012166
- exit_code: 1
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = Array(repeating: 0, count: n)\n    var\
    \ right_to_left = Array(repeating: 0, count: n)\n    var i = 0\n    while i <\
    \ n {\n        left_to_right[i] = i\n        right_to_left[i] = n - i - 1\n  \
    \      i += 1\n    }\n    return car_race_collision(left_to_right: left_to_right,\
    \ right_to_left: right_to_left)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(car_race_collision(n:\
    \ 2) == 4)\nassert(car_race_collision(n: 3) == 9)\nassert(car_race_collision(n:\
    \ 4) == 16)\nassert(car_race_collision(n: 8) == 64)\nassert(car_race_collision(n:\
    \ 10) == 100)"
  status: SyntaxError
  stderr: "/tmp/tmpiqkq4a68.swift:19:30: error: extra arguments at positions #1, #2\
    \ in call\n    return car_race_collision(left_to_right: left_to_right, right_to_left:\
    \ right_to_left)\n                             ^\n/tmp/tmpiqkq4a68.swift:10:6:\
    \ note: 'car_race_collision(n:)' declared here\nfunc car_race_collision(n: Int)\
    \ -> Int {\n     ^\n/tmp/tmpiqkq4a68.swift:19:31: error: missing argument for\
    \ parameter 'n' in call\n    return car_race_collision(left_to_right: left_to_right,\
    \ right_to_left: right_to_left)\n                              ^\n           \
    \                   n: <#Int#>, \n/tmp/tmpiqkq4a68.swift:10:6: note: 'car_race_collision(n:)'\
    \ declared here\nfunc car_race_collision(n: Int) -> Int {\n     ^\n"
  stdout: ''
  timestamp: 1660012167
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int](repeating: 0, count: n)\n    var\
    \ right_to_left = [Int](repeating: 0, count: n)\n    var collisions = 0\n    for\
    \ i in 0..<n {\n        left_to_right[i] = i\n        right_to_left[i] = n - i\
    \ - 1\n    }\n    for i in 0..<n {\n        for j in 0..<n {\n            if left_to_right[i]\
    \ == right_to_left[j] {\n                collisions += 1\n            }\n    \
    \    }\n    }\n    return collisions\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n: 3) == 9)\n\
    assert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n: 8) == 64)\n\
    assert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmps1jc4l0x/tmps1jc4l0x.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7480becc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b74808e3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b74808e3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b74808e27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmps1jc4l0x                        0x000055a38fff1455 <unavailable> + 5205

    5    libc.so.6                          0x00002b7480dd8460 __libc_start_main +
    245

    6    tmps1jc4l0x                        0x000055a38fff1109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660012166
- exit_code: 0
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int](repeating: 0, count: n)\n    var\
    \ right_to_left = [Int](repeating: 0, count: n)\n    var i = 0\n    var j = 0\n\
    \    var collisions = 0\n    while i < n && j < n {\n        if left_to_right[i]\
    \ < right_to_left[j] {\n            collisions += j\n            i += 1\n    \
    \    } else {\n            j += 1\n        }\n    }\n    collisions += (n - i)\
    \ * j\n    return collisions\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(car_race_collision(n:\
    \ 2) == 4)\nassert(car_race_collision(n: 3) == 9)\nassert(car_race_collision(n:\
    \ 4) == 16)\nassert(car_race_collision(n: 8) == 64)\nassert(car_race_collision(n:\
    \ 10) == 100)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660012167
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right_cars = [Int](repeating: 0, count: n)\n\
    \    var right_to_left_cars = [Int](repeating: 0, count: n)\n    var collisions\
    \ = 0\n    for i in 0..<n {\n        left_to_right_cars[i] = i\n        right_to_left_cars[i]\
    \ = n - i - 1\n    }\n    for i in 0..<n {\n        for j in 0..<n {\n       \
    \     if left_to_right_cars[i] == right_to_left_cars[j] {\n                collisions\
    \ += 1\n            }\n        }\n    }\n    return collisions\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmpt0f4u9k0/tmpt0f4u9k0.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b96309c3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b96306bab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b96306ba988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b96306b97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpt0f4u9k0                        0x0000563a26d4a455 <unavailable> + 5205

    5    libc.so.6                          0x00002b9630baf460 __libc_start_main +
    245

    6    tmpt0f4u9k0                        0x0000563a26d4a109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660012167
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int](1...n)\n    var right_to_left =\
    \ [Int](1...n)\n    var collisions = 0\n    while !left_to_right.isEmpty && !right_to_left.isEmpty\
    \ {\n        if left_to_right.first! < right_to_left.first! {\n            left_to_right.removeFirst()\n\
    \        } else if left_to_right.first! > right_to_left.first! {\n           \
    \ right_to_left.removeFirst()\n        } else {\n            collisions += 1\n\
    \            left_to_right.removeFirst()\n            right_to_left.removeFirst()\n\
    \        }\n    }\n    return collisions\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n: 3) == 9)\n\
    assert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n: 8) == 64)\n\
    assert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmp95qp7bho/tmp95qp7bho.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba647b0ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba647801b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba647801988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba6478007b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp95qp7bho                        0x00005555b1511565 <unavailable> + 5477

    5    libc.so.6                          0x00002ba647cf6460 __libc_start_main +
    245

    6    tmp95qp7bho                        0x00005555b1511219 <unavailable> + 4633

    '
  stdout: ''
  timestamp: 1660012168
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int](repeating: 0, count: n)\n    var\
    \ right_to_left = [Int](repeating: 0, count: n)\n    for i in 0..<n {\n      \
    \  left_to_right[i] = i\n        right_to_left[i] = n - i - 1\n    }\n    var\
    \ count = 0\n    for i in 0..<n {\n        for j in 0..<n {\n            if left_to_right[i]\
    \ == right_to_left[j] {\n                count += 1\n            }\n        }\n\
    \    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(car_race_collision(n:\
    \ 2) == 4)\nassert(car_race_collision(n: 3) == 9)\nassert(car_race_collision(n:\
    \ 4) == 16)\nassert(car_race_collision(n: 8) == 64)\nassert(car_race_collision(n:\
    \ 10) == 100)"
  status: Exception
  stderr: 'tmpeixhzo9y/tmpeixhzo9y.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b261dd57c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b261da4eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b261da4e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b261da4d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeixhzo9y                        0x00005571c4c4f455 <unavailable> + 5205

    5    libc.so.6                          0x00002b261df43460 __libc_start_main +
    245

    6    tmpeixhzo9y                        0x00005571c4c4f109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660012166
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = Array(repeating: 0, count: n)\n    var\
    \ right_to_left = Array(repeating: 0, count: n)\n    var collisions = 0\n    for\
    \ i in 0..<n {\n        left_to_right[i] = i\n        right_to_left[i] = n - i\
    \ - 1\n    }\n    for i in 0..<n {\n        for j in 0..<n {\n            if left_to_right[i]\
    \ == right_to_left[j] {\n                collisions += 1\n            }\n    \
    \    }\n    }\n    return collisions\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n: 3) == 9)\n\
    assert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n: 8) == 64)\n\
    assert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmp8gl69j6y/tmp8gl69j6y.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abc680c1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abc67db8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abc67db8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abc67db77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8gl69j6y                        0x000055beeb7cb455 <unavailable> + 5205

    5    libc.so.6                          0x00002abc682ad460 __libc_start_main +
    245

    6    tmp8gl69j6y                        0x000055beeb7cb109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660012166
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int](repeating: 0, count: n)\n    var\
    \ right_to_left = [Int](repeating: 0, count: n)\n    var collision = 0\n    for\
    \ i in 0..<n {\n        left_to_right[i] = i\n        right_to_left[i] = n - i\
    \ - 1\n    }\n    for i in 0..<n {\n        for j in 0..<n {\n            if left_to_right[i]\
    \ == right_to_left[j] {\n                collision += 1\n            }\n     \
    \   }\n    }\n    return collision\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n: 3) == 9)\n\
    assert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n: 8) == 64)\n\
    assert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmpw2pxp_gx/tmpw2pxp_gx.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1475015c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1474d0cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1474d0c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1474d0b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpw2pxp_gx                        0x000055eb2e404455 <unavailable> + 5205

    5    libc.so.6                          0x00002b1475201460 __libc_start_main +
    245

    6    tmpw2pxp_gx                        0x000055eb2e404109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660012166
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int](repeating: 0, count: n)\n    var\
    \ right_to_left = [Int](repeating: 0, count: n)\n    for i in 0..<n {\n      \
    \  left_to_right[i] = i\n        right_to_left[i] = n - i - 1\n    }\n    var\
    \ count = 0\n    for i in 0..<n {\n        for j in 0..<n {\n            if left_to_right[i]\
    \ == right_to_left[j] {\n                count += 1\n            }\n        }\n\
    \    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(car_race_collision(n:\
    \ 2) == 4)\nassert(car_race_collision(n: 3) == 9)\nassert(car_race_collision(n:\
    \ 4) == 16)\nassert(car_race_collision(n: 8) == 64)\nassert(car_race_collision(n:\
    \ 10) == 100)"
  status: Exception
  stderr: 'tmpeixhzo9y/tmpeixhzo9y.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b261dd57c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b261da4eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b261da4e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b261da4d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeixhzo9y                        0x00005571c4c4f455 <unavailable> + 5205

    5    libc.so.6                          0x00002b261df43460 __libc_start_main +
    245

    6    tmpeixhzo9y                        0x00005571c4c4f109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660012166
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int]()\n    var right_to_left = [Int]()\n\
    \    for i in 0..<n {\n        left_to_right.append(i)\n        right_to_left.append(i)\n\
    \    }\n    var count = 0\n    while left_to_right.count > 0 && right_to_left.count\
    \ > 0 {\n        let l = left_to_right.removeFirst()\n        let r = right_to_left.removeFirst()\n\
    \        if l == r {\n            count += 1\n        }\n    }\n    return count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmpq0qksbnm/tmpq0qksbnm.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b52ece26c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b52ecb1db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b52ecb1d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b52ecb1c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpq0qksbnm                        0x00005640b0383525 <unavailable> + 5413

    5    libc.so.6                          0x00002b52ed012460 __libc_start_main +
    245

    6    tmpq0qksbnm                        0x00005640b03831d9 <unavailable> + 4569

    '
  stdout: ''
  timestamp: 1660012168
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int](repeating: 0, count: n)\n    var\
    \ right_to_left = [Int](repeating: 0, count: n)\n    for i in 0..<n {\n      \
    \  left_to_right[i] = i\n        right_to_left[i] = n - i - 1\n    }\n    var\
    \ count = 0\n    for i in 0..<n {\n        for j in 0..<n {\n            if left_to_right[i]\
    \ == right_to_left[j] {\n                count += 1\n            }\n        }\n\
    \    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(car_race_collision(n:\
    \ 2) == 4)\nassert(car_race_collision(n: 3) == 9)\nassert(car_race_collision(n:\
    \ 4) == 16)\nassert(car_race_collision(n: 8) == 64)\nassert(car_race_collision(n:\
    \ 10) == 100)"
  status: Exception
  stderr: 'tmpeixhzo9y/tmpeixhzo9y.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b261dd57c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b261da4eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b261da4e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b261da4d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeixhzo9y                        0x00005571c4c4f455 <unavailable> + 5205

    5    libc.so.6                          0x00002b261df43460 __libc_start_main +
    245

    6    tmpeixhzo9y                        0x00005571c4c4f109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660012166
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int](repeating: 0, count: n)\n    var\
    \ right_to_left = [Int](repeating: 0, count: n)\n    var collisions = 0\n    for\
    \ i in 0..<n {\n        left_to_right[i] = i\n        right_to_left[i] = n - i\
    \ - 1\n    }\n    for i in 0..<n {\n        for j in 0..<n {\n            if left_to_right[i]\
    \ == right_to_left[j] {\n                collisions += 1\n            }\n    \
    \    }\n    }\n    return collisions\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n: 3) == 9)\n\
    assert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n: 8) == 64)\n\
    assert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmps1jc4l0x/tmps1jc4l0x.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7480becc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b74808e3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b74808e3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b74808e27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmps1jc4l0x                        0x000055a38fff1455 <unavailable> + 5205

    5    libc.so.6                          0x00002b7480dd8460 __libc_start_main +
    245

    6    tmps1jc4l0x                        0x000055a38fff1109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660012166
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(car_race_collision(n:\
    \ 2) == 4)\nassert(car_race_collision(n: 3) == 9)\nassert(car_race_collision(n:\
    \ 4) == 16)\nassert(car_race_collision(n: 8) == 64)\nassert(car_race_collision(n:\
    \ 10) == 100)"
  status: Exception
  stderr: 'tmptluchuc9/tmptluchuc9.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b49eb4e6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b49eb1ddb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b49eb1dd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b49eb1dc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptluchuc9                        0x00005578d78d91b5 <unavailable> + 4533

    5    libc.so.6                          0x00002b49eb6d2460 __libc_start_main +
    245

    6    tmptluchuc9                        0x00005578d78d8e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660012166
- exit_code: 1
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = Array(1...n)\n    var right_to_left =\
    \ Array(1...n).reversed()\n    var collision = 0\n    for i in 0..<n {\n     \
    \   for j in 0..<n {\n            if left_to_right[i] == right_to_left[j] {\n\
    \                collision += 1\n            }\n        }\n    }\n    return collision\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: SyntaxError
  stderr: "/tmp/tmp6djkqhaf.swift:16:50: error: cannot convert value of type 'Int'\
    \ to expected argument type 'ReversedCollection<[Int]>.Index'\n            if\
    \ left_to_right[i] == right_to_left[j] {\n                                   \
    \              ^\n"
  stdout: ''
  timestamp: 1660012167
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int](repeating: 0, count: n)\n    var\
    \ right_to_left = [Int](repeating: 0, count: n)\n    var collisions = 0\n    for\
    \ i in 0..<n {\n        left_to_right[i] = i\n        right_to_left[i] = n - i\
    \ - 1\n    }\n    for i in 0..<n {\n        for j in 0..<n {\n            if left_to_right[i]\
    \ == right_to_left[j] {\n                collisions += 1\n            }\n    \
    \    }\n    }\n    return collisions\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n: 3) == 9)\n\
    assert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n: 8) == 64)\n\
    assert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmps1jc4l0x/tmps1jc4l0x.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7480becc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b74808e3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b74808e3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b74808e27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmps1jc4l0x                        0x000055a38fff1455 <unavailable> + 5205

    5    libc.so.6                          0x00002b7480dd8460 __libc_start_main +
    245

    6    tmps1jc4l0x                        0x000055a38fff1109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660012166
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(car_race_collision(n:\
    \ 2) == 4)\nassert(car_race_collision(n: 3) == 9)\nassert(car_race_collision(n:\
    \ 4) == 16)\nassert(car_race_collision(n: 8) == 64)\nassert(car_race_collision(n:\
    \ 10) == 100)"
  status: Exception
  stderr: 'tmptluchuc9/tmptluchuc9.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b49eb4e6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b49eb1ddb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b49eb1dd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b49eb1dc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptluchuc9                        0x00005578d78d91b5 <unavailable> + 4533

    5    libc.so.6                          0x00002b49eb6d2460 __libc_start_main +
    245

    6    tmptluchuc9                        0x00005578d78d8e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660012166
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int](repeating: 0, count: n)\n    var\
    \ right_to_left = [Int](repeating: 0, count: n)\n    var i = 0\n    while i <\
    \ n {\n        left_to_right[i] = i\n        right_to_left[i] = n - i - 1\n  \
    \      i += 1\n    }\n    var collisions = 0\n    i = 0\n    while i < n {\n \
    \       var j = 0\n        while j < n {\n            if left_to_right[i] == right_to_left[j]\
    \ {\n                collisions += 1\n            }\n            j += 1\n    \
    \    }\n        i += 1\n    }\n    return collisions\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmpx74kc7zh/tmpx74kc7zh.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab6dc17bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab6dbe72b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab6dbe72988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab6dbe717b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpx74kc7zh                        0x00005590291e32c5 <unavailable> + 4805

    5    libc.so.6                          0x00002ab6dc367460 __libc_start_main +
    245

    6    tmpx74kc7zh                        0x00005590291e2f79 <unavailable> + 3961

    '
  stdout: ''
  timestamp: 1660012167
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int](repeating: 0, count: n)\n    var\
    \ right_to_left = [Int](repeating: 0, count: n)\n    for i in 0..<n {\n      \
    \  left_to_right[i] = i\n        right_to_left[i] = n - i - 1\n    }\n    var\
    \ count = 0\n    for i in 0..<n {\n        for j in 0..<n {\n            if left_to_right[i]\
    \ == right_to_left[j] {\n                count += 1\n            }\n        }\n\
    \    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(car_race_collision(n:\
    \ 2) == 4)\nassert(car_race_collision(n: 3) == 9)\nassert(car_race_collision(n:\
    \ 4) == 16)\nassert(car_race_collision(n: 8) == 64)\nassert(car_race_collision(n:\
    \ 10) == 100)"
  status: Exception
  stderr: 'tmpeixhzo9y/tmpeixhzo9y.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b261dd57c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b261da4eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b261da4e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b261da4d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeixhzo9y                        0x00005571c4c4f455 <unavailable> + 5205

    5    libc.so.6                          0x00002b261df43460 __libc_start_main +
    245

    6    tmpeixhzo9y                        0x00005571c4c4f109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660012166
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int](repeating: 0, count: n)\n    var\
    \ right_to_left = [Int](repeating: 0, count: n)\n    var i = 0\n    while i <\
    \ n {\n        left_to_right[i] = i\n        right_to_left[i] = n - i - 1\n  \
    \      i += 1\n    }\n    var collisions = 0\n    var j = 0\n    while j < n {\n\
    \        var k = 0\n        while k < n {\n            if left_to_right[j] ==\
    \ right_to_left[k] {\n                collisions += 1\n            }\n       \
    \     k += 1\n        }\n        j += 1\n    }\n    return collisions\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmp_hr4rabl/tmp_hr4rabl.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b872fb7bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b872f872b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b872f872988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b872f8717b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_hr4rabl                        0x00005568381bc2c5 <unavailable> + 4805

    5    libc.so.6                          0x00002b872fd67460 __libc_start_main +
    245

    6    tmp_hr4rabl                        0x00005568381bbf79 <unavailable> + 3961

    '
  stdout: ''
  timestamp: 1660012168
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int]()\n    var right_to_left = [Int]()\n\
    \    for i in 0..<n {\n        left_to_right.append(i)\n        right_to_left.append(n-i-1)\n\
    \    }\n    var collisions = 0\n    for i in 0..<n {\n        for j in 0..<n {\n\
    \            if left_to_right[i] == right_to_left[j] {\n                collisions\
    \ += 1\n            }\n        }\n    }\n    return collisions\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmpr4785uzn/tmpr4785uzn.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b78b286cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b78b2563b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b78b2563988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b78b25627b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpr4785uzn                        0x00005563c34e8445 <unavailable> + 5189

    5    libc.so.6                          0x00002b78b2a58460 __libc_start_main +
    245

    6    tmpr4785uzn                        0x00005563c34e80f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660012168
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int](0..<n)\n    var right_to_left =\
    \ [Int](0..<n)\n    var collisions = 0\n    for i in 0..<n {\n        for j in\
    \ 0..<n {\n            if left_to_right[i] == right_to_left[j] {\n           \
    \     collisions += 1\n            }\n        }\n    }\n    return collisions\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmpg3vgk3de/tmpg3vgk3de.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acceeef0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acceebe7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acceebe7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acceebe67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpg3vgk3de                        0x000056054d08a515 <unavailable> + 5397

    5    libc.so.6                          0x00002accef0dc460 __libc_start_main +
    245

    6    tmpg3vgk3de                        0x000056054d08a1c9 <unavailable> + 4553

    '
  stdout: ''
  timestamp: 1660012168
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int]()\n    var right_to_left = [Int]()\n\
    \    for i in 0..<n {\n        left_to_right.append(i)\n        right_to_left.append(n\
    \ - i - 1)\n    }\n    var collisions = 0\n    for i in 0..<n {\n        for j\
    \ in 0..<n {\n            if left_to_right[i] == right_to_left[j] {\n        \
    \        collisions += 1\n            }\n        }\n    }\n    return collisions\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmpaki30yyt/tmpaki30yyt.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b148ce30c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b148cb27b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b148cb27988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b148cb267b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpaki30yyt                        0x000055ebacb4e445 <unavailable> + 5189

    5    libc.so.6                          0x00002b148d01c460 __libc_start_main +
    245

    6    tmpaki30yyt                        0x000055ebacb4e0f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660012166
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = Array(0..<n)\n    var right_to_left =\
    \ Array(0..<n)\n    var collisions = 0\n    while !left_to_right.isEmpty && !right_to_left.isEmpty\
    \ {\n        let left = left_to_right.removeFirst()\n        let right = right_to_left.removeFirst()\n\
    \        if left > right {\n            collisions += 1\n        }\n    }\n  \
    \  return collisions\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(car_race_collision(n:\
    \ 2) == 4)\nassert(car_race_collision(n: 3) == 9)\nassert(car_race_collision(n:\
    \ 4) == 16)\nassert(car_race_collision(n: 8) == 64)\nassert(car_race_collision(n:\
    \ 10) == 100)"
  status: Exception
  stderr: 'tmpumygig9d/tmpumygig9d.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7c97966c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7c9765db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7c9765d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7c9765c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpumygig9d                        0x000055fb34036505 <unavailable> + 5381

    5    libc.so.6                          0x00002b7c97b52460 __libc_start_main +
    245

    6    tmpumygig9d                        0x000055fb340361b9 <unavailable> + 4537

    '
  stdout: ''
  timestamp: 1660012168
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int]()\n    var right_to_left = [Int]()\n\
    \    var collision = 0\n    for i in 0..<n {\n        left_to_right.append(i)\n\
    \        right_to_left.append(n-i-1)\n    }\n    for i in 0..<n {\n        for\
    \ j in 0..<n {\n            if left_to_right[i] == right_to_left[j] {\n      \
    \          collision += 1\n            }\n        }\n    }\n    return collision\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmp484i2g_s/tmp484i2g_s.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1919312c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1919009b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1919009988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b19190087b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp484i2g_s                        0x000055d55cecf445 <unavailable> + 5189

    5    libc.so.6                          0x00002b19194fe460 __libc_start_main +
    245

    6    tmp484i2g_s                        0x000055d55cecf0f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660012168
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var cars = Array(repeating: 0, count: n)\n    var collisions\
    \ = 0\n    for i in 0..<n {\n        cars[i] = i\n    }\n    for i in 0..<n {\n\
    \        for j in 0..<n {\n            if cars[i] > cars[j] {\n              \
    \  collisions += 1\n            }\n        }\n    }\n    return collisions\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmpyuxc3fp1/tmpyuxc3fp1.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afba8412c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afba8109b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afba8109988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afba81087b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyuxc3fp1                        0x000055ede8406455 <unavailable> + 5205

    5    libc.so.6                          0x00002afba85fe460 __libc_start_main +
    245

    6    tmpyuxc3fp1                        0x000055ede8406109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660012168
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var count = 0\n    var left = [Int](repeating: 0, count:\
    \ n)\n    var right = [Int](repeating: 0, count: n)\n    for i in 0..<n {\n  \
    \      left[i] = i\n        right[i] = n - i - 1\n    }\n    for i in 0..<n {\n\
    \        for j in 0..<n {\n            if left[i] > right[j] {\n             \
    \   count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmpdrrcoptj/tmpdrrcoptj.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac5010bbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac500db2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac500db2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac500db17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdrrcoptj                        0x0000559ef82fd455 <unavailable> + 5205

    5    libc.so.6                          0x00002ac5012a7460 __libc_start_main +
    245

    6    tmpdrrcoptj                        0x0000559ef82fd109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660012168
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = Array(repeating: 0, count: n)\n    var\
    \ right_to_left = Array(repeating: 0, count: n)\n    for i in 0..<n {\n      \
    \  left_to_right[i] = i\n        right_to_left[i] = n - i - 1\n    }\n    var\
    \ collisions = 0\n    for i in 0..<n {\n        for j in 0..<n {\n           \
    \ if left_to_right[i] == right_to_left[j] {\n                collisions += 1\n\
    \            }\n        }\n    }\n    return collisions\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmplj1_f9_5/tmplj1_f9_5.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad498029c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad497d20b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad497d20988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad497d1f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplj1_f9_5                        0x0000561810f56455 <unavailable> + 5205

    5    libc.so.6                          0x00002ad498215460 __libc_start_main +
    245

    6    tmplj1_f9_5                        0x0000561810f56109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660012167
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int]()\n    var right_to_left = [Int]()\n\
    \    var collisions = 0\n    for i in 0..<n {\n        left_to_right.append(i)\n\
    \        right_to_left.append(n-i-1)\n    }\n    for i in 0..<n {\n        for\
    \ j in 0..<n {\n            if left_to_right[i] == right_to_left[j] {\n      \
    \          collisions += 1\n            }\n        }\n    }\n    return collisions\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmpzl86np2_/tmpzl86np2_.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba97cd4ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba97ca45b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba97ca45988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba97ca447b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzl86np2_                        0x000055ca10def445 <unavailable> + 5189

    5    libc.so.6                          0x00002ba97cf3a460 __libc_start_main +
    245

    6    tmpzl86np2_                        0x000055ca10def0f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660012166
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int](repeating: 0, count: n)\n    var\
    \ right_to_left = [Int](repeating: 0, count: n)\n    var i = 0\n    while i <\
    \ n {\n        left_to_right[i] = i\n        right_to_left[i] = n - i - 1\n  \
    \      i += 1\n    }\n    var collisions = 0\n    i = 0\n    while i < n {\n \
    \       var j = 0\n        while j < n {\n            if left_to_right[i] == right_to_left[j]\
    \ {\n                collisions += 1\n            }\n            j += 1\n    \
    \    }\n        i += 1\n    }\n    return collisions\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmpx74kc7zh/tmpx74kc7zh.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab6dc17bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab6dbe72b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab6dbe72988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab6dbe717b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpx74kc7zh                        0x00005590291e32c5 <unavailable> + 4805

    5    libc.so.6                          0x00002ab6dc367460 __libc_start_main +
    245

    6    tmpx74kc7zh                        0x00005590291e2f79 <unavailable> + 3961

    '
  stdout: ''
  timestamp: 1660012167
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int](repeating: 0, count: n)\n    var\
    \ right_to_left = [Int](repeating: 0, count: n)\n    var collisions = 0\n    for\
    \ i in 0..<n {\n        left_to_right[i] = i\n        right_to_left[i] = n - i\
    \ - 1\n    }\n    for i in 0..<n {\n        for j in 0..<n {\n            if left_to_right[i]\
    \ == right_to_left[j] {\n                collisions += 1\n            }\n    \
    \    }\n    }\n    return collisions\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n: 3) == 9)\n\
    assert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n: 8) == 64)\n\
    assert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmps1jc4l0x/tmps1jc4l0x.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7480becc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b74808e3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b74808e3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b74808e27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmps1jc4l0x                        0x000055a38fff1455 <unavailable> + 5205

    5    libc.so.6                          0x00002b7480dd8460 __libc_start_main +
    245

    6    tmps1jc4l0x                        0x000055a38fff1109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660012166
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int](repeating: 0, count: n)\n    var\
    \ right_to_left = [Int](repeating: 0, count: n)\n    var i = 0\n    while i <\
    \ n {\n        left_to_right[i] = i\n        right_to_left[i] = n - i - 1\n  \
    \      i += 1\n    }\n    var result = 0\n    i = 0\n    while i < n {\n     \
    \   if left_to_right[i] > right_to_left[i] {\n            result += 1\n      \
    \  }\n        i += 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n: 3)\
    \ == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmp8gui2mg3/tmp8gui2mg3.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2d00f5dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2d00c54b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2d00c54988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2d00c537b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8gui2mg3                        0x000055d8a9bb92c5 <unavailable> + 4805

    5    libc.so.6                          0x00002b2d01149460 __libc_start_main +
    245

    6    tmp8gui2mg3                        0x000055d8a9bb8f79 <unavailable> + 3961

    '
  stdout: ''
  timestamp: 1660012168
- exit_code: 1
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = Array(repeating: 0, count: n)\n    var\
    \ right_to_left = Array(repeating: 0, count: n)\n    for i in 0..<n {\n      \
    \  left_to_right[i] = i\n        right_to_left[i] = n - i - 1\n    }\n    return\
    \ car_race_collision(left_to_right: left_to_right, right_to_left: right_to_left)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: SyntaxError
  stderr: "/tmp/tmpqde_j4k1.swift:17:30: error: extra arguments at positions #1, #2\
    \ in call\n    return car_race_collision(left_to_right: left_to_right, right_to_left:\
    \ right_to_left)\n                             ^\n/tmp/tmpqde_j4k1.swift:10:6:\
    \ note: 'car_race_collision(n:)' declared here\nfunc car_race_collision(n: Int)\
    \ -> Int {\n     ^\n/tmp/tmpqde_j4k1.swift:17:31: error: missing argument for\
    \ parameter 'n' in call\n    return car_race_collision(left_to_right: left_to_right,\
    \ right_to_left: right_to_left)\n                              ^\n           \
    \                   n: <#Int#>, \n/tmp/tmpqde_j4k1.swift:10:6: note: 'car_race_collision(n:)'\
    \ declared here\nfunc car_race_collision(n: Int) -> Int {\n     ^\n"
  stdout: ''
  timestamp: 1660012167
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int](repeating: 0, count: n)\n    var\
    \ right_to_left = [Int](repeating: 0, count: n)\n    for i in 0..<n {\n      \
    \  left_to_right[i] = i\n        right_to_left[i] = n - i - 1\n    }\n    var\
    \ collisions = 0\n    for i in 0..<n {\n        for j in 0..<n {\n           \
    \ if left_to_right[i] == right_to_left[j] {\n                collisions += 1\n\
    \            }\n        }\n    }\n    return collisions\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmpy5_5e537/tmpy5_5e537.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4d882b4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4d87fabb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4d87fab988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4d87faa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpy5_5e537                        0x0000557cb2403455 <unavailable> + 5205

    5    libc.so.6                          0x00002b4d884a0460 __libc_start_main +
    245

    6    tmpy5_5e537                        0x0000557cb2403109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660012166
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int](repeating: 0, count: n)\n    var\
    \ right_to_left = [Int](repeating: 0, count: n)\n    var i = 0\n    while i <\
    \ n {\n        left_to_right[i] = i\n        right_to_left[i] = n - i - 1\n  \
    \      i += 1\n    }\n    var count = 0\n    i = 0\n    while i < n {\n      \
    \  var j = 0\n        while j < n {\n            if left_to_right[i] == right_to_left[j]\
    \ {\n                count += 1\n            }\n            j += 1\n        }\n\
    \        i += 1\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n: 3) == 9)\n\
    assert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n: 8) == 64)\n\
    assert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmpn3yxay2h/tmpn3yxay2h.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aad74bb5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aad748acb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aad748ac988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aad748ab7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpn3yxay2h                        0x000055bf5b4892c5 <unavailable> + 4805

    5    libc.so.6                          0x00002aad74da1460 __libc_start_main +
    245

    6    tmpn3yxay2h                        0x000055bf5b488f79 <unavailable> + 3961

    '
  stdout: ''
  timestamp: 1660012168
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = Array(repeating: 0, count: n)\n    var\
    \ right_to_left = Array(repeating: 0, count: n)\n    var collisions = 0\n    for\
    \ i in 0..<n {\n        left_to_right[i] = i\n        right_to_left[i] = n - i\
    \ - 1\n    }\n    for i in 0..<n {\n        for j in 0..<n {\n            if left_to_right[i]\
    \ == right_to_left[j] {\n                collisions += 1\n            }\n    \
    \    }\n    }\n    return collisions\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n: 3) == 9)\n\
    assert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n: 8) == 64)\n\
    assert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmp8gl69j6y/tmp8gl69j6y.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abc680c1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abc67db8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abc67db8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abc67db77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8gl69j6y                        0x000055beeb7cb455 <unavailable> + 5205

    5    libc.so.6                          0x00002abc682ad460 __libc_start_main +
    245

    6    tmp8gl69j6y                        0x000055beeb7cb109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660012166
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int]()\n    var right_to_left = [Int]()\n\
    \    for i in 0..<n {\n        left_to_right.append(i)\n        right_to_left.append(i)\n\
    \    }\n    var collisions = 0\n    while left_to_right.count > 0 && right_to_left.count\
    \ > 0 {\n        let l = left_to_right.removeFirst()\n        let r = right_to_left.removeFirst()\n\
    \        if l == r {\n            collisions += 1\n        }\n    }\n    return\
    \ collisions\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(car_race_collision(n:\
    \ 2) == 4)\nassert(car_race_collision(n: 3) == 9)\nassert(car_race_collision(n:\
    \ 4) == 16)\nassert(car_race_collision(n: 8) == 64)\nassert(car_race_collision(n:\
    \ 10) == 100)"
  status: Exception
  stderr: 'tmplonpy10r/tmplonpy10r.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7cab2f2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7caafe9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7caafe9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7caafe87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplonpy10r                        0x0000561837a9d525 <unavailable> + 5413

    5    libc.so.6                          0x00002b7cab4de460 __libc_start_main +
    245

    6    tmplonpy10r                        0x0000561837a9d1d9 <unavailable> + 4569

    '
  stdout: ''
  timestamp: 1660012168
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int]()\n    var right_to_left = [Int]()\n\
    \    for i in 0..<n {\n        left_to_right.append(i)\n        right_to_left.append(n\
    \ - i - 1)\n    }\n    var collision = 0\n    var i = 0\n    var j = 0\n    while\
    \ i < n && j < n {\n        if left_to_right[i] < right_to_left[j] {\n       \
    \     collision += j\n            i += 1\n        } else {\n            j += 1\n\
    \        }\n    }\n    collision += (n - i) * j\n    return collision\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmprmk977a8/tmprmk977a8.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002accdca91c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002accdc788b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002accdc788988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002accdc7877b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprmk977a8                        0x0000561c15d78445 <unavailable> + 5189

    5    libc.so.6                          0x00002accdcc7d460 __libc_start_main +
    245

    6    tmprmk977a8                        0x0000561c15d780f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660012168
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right_cars = [Int](0..<n)\n    var right_to_left_cars\
    \ = [Int](0..<n)\n    var collisions = 0\n    while !left_to_right_cars.isEmpty\
    \ && !right_to_left_cars.isEmpty {\n        let left_car = left_to_right_cars.removeFirst()\n\
    \        let right_car = right_to_left_cars.removeFirst()\n        if left_car\
    \ == right_car {\n            collisions += 1\n        }\n    }\n    return collisions\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmpv88g0e4e/tmpv88g0e4e.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2a3ac35c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2a3a92cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2a3a92c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2a3a92b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpv88g0e4e                        0x0000560947ea5505 <unavailable> + 5381

    5    libc.so.6                          0x00002b2a3ae21460 __libc_start_main +
    245

    6    tmpv88g0e4e                        0x0000560947ea51b9 <unavailable> + 4537

    '
  stdout: ''
  timestamp: 1660012168
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int](repeating: 0, count: n)\n    var\
    \ right_to_left = [Int](repeating: 0, count: n)\n    for i in 0..<n {\n      \
    \  left_to_right[i] = i\n        right_to_left[i] = n - i - 1\n    }\n    var\
    \ collisions = 0\n    for i in 0..<n {\n        for j in 0..<n {\n           \
    \ if left_to_right[i] == right_to_left[j] {\n                collisions += 1\n\
    \            }\n        }\n    }\n    return collisions\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmpy5_5e537/tmpy5_5e537.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4d882b4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4d87fabb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4d87fab988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4d87faa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpy5_5e537                        0x0000557cb2403455 <unavailable> + 5205

    5    libc.so.6                          0x00002b4d884a0460 __libc_start_main +
    245

    6    tmpy5_5e537                        0x0000557cb2403109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660012166
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = Array(repeating: 0, count: n)\n    var\
    \ right_to_left = Array(repeating: 0, count: n)\n    var collisions = 0\n    for\
    \ i in 0..<n {\n        left_to_right[i] = i\n        right_to_left[i] = n - i\
    \ - 1\n    }\n    for i in 0..<n {\n        for j in 0..<n {\n            if left_to_right[i]\
    \ == right_to_left[j] {\n                collisions += 1\n            }\n    \
    \    }\n    }\n    return collisions\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n: 3) == 9)\n\
    assert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n: 8) == 64)\n\
    assert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmp8gl69j6y/tmp8gl69j6y.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abc680c1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abc67db8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abc67db8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abc67db77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8gl69j6y                        0x000055beeb7cb455 <unavailable> + 5205

    5    libc.so.6                          0x00002abc682ad460 __libc_start_main +
    245

    6    tmp8gl69j6y                        0x000055beeb7cb109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660012166
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int]()\n    var right_to_left = [Int]()\n\
    \    for i in 0..<n {\n        left_to_right.append(i)\n        right_to_left.append(n-i-1)\n\
    \    }\n    var collisions = 0\n    while left_to_right.count > 0 && right_to_left.count\
    \ > 0 {\n        if left_to_right[0] < right_to_left[0] {\n            left_to_right.remove(at:\
    \ 0)\n            collisions += 1\n        } else {\n            right_to_left.remove(at:\
    \ 0)\n        }\n    }\n    return collisions\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n: 3)\
    \ == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmpvxmfmjg5/tmpvxmfmjg5.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8f5b39bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8f5b092b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8f5b092988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8f5b0917b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvxmfmjg5                        0x000055fa7b54e535 <unavailable> + 5429

    5    libc.so.6                          0x00002b8f5b587460 __libc_start_main +
    245

    6    tmpvxmfmjg5                        0x000055fa7b54e1e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1660012168
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int](repeating: 0, count: n)\n    var\
    \ right_to_left = [Int](repeating: 0, count: n)\n    var collision = 0\n    for\
    \ i in 0..<n {\n        left_to_right[i] = i\n        right_to_left[i] = n - i\
    \ - 1\n    }\n    for i in 0..<n {\n        for j in 0..<n {\n            if left_to_right[i]\
    \ == right_to_left[j] {\n                collision += 1\n            }\n     \
    \   }\n    }\n    return collision\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n: 3) == 9)\n\
    assert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n: 8) == 64)\n\
    assert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmpw2pxp_gx/tmpw2pxp_gx.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1475015c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1474d0cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1474d0c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1474d0b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpw2pxp_gx                        0x000055eb2e404455 <unavailable> + 5205

    5    libc.so.6                          0x00002b1475201460 __libc_start_main +
    245

    6    tmpw2pxp_gx                        0x000055eb2e404109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660012166
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int](repeating: 0, count: n)\n    var\
    \ right_to_left = [Int](repeating: 0, count: n)\n    var i = 0\n    while i <\
    \ n {\n        left_to_right[i] = i\n        right_to_left[i] = n - i - 1\n  \
    \      i += 1\n    }\n    var collisions = 0\n    i = 0\n    while i < n {\n \
    \       var j = 0\n        while j < n {\n            if left_to_right[i] == right_to_left[j]\
    \ {\n                collisions += 1\n            }\n            j += 1\n    \
    \    }\n        i += 1\n    }\n    return collisions\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmpx74kc7zh/tmpx74kc7zh.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab6dc17bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab6dbe72b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab6dbe72988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab6dbe717b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpx74kc7zh                        0x00005590291e32c5 <unavailable> + 4805

    5    libc.so.6                          0x00002ab6dc367460 __libc_start_main +
    245

    6    tmpx74kc7zh                        0x00005590291e2f79 <unavailable> + 3961

    '
  stdout: ''
  timestamp: 1660012167
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int](repeating: 0, count: n)\n    var\
    \ right_to_left = [Int](repeating: 0, count: n)\n    for i in 0..<n {\n      \
    \  left_to_right[i] = i\n        right_to_left[i] = n - i - 1\n    }\n    var\
    \ count = 0\n    for i in 0..<n {\n        for j in 0..<n {\n            if left_to_right[i]\
    \ == right_to_left[j] {\n                count += 1\n            }\n        }\n\
    \    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(car_race_collision(n:\
    \ 2) == 4)\nassert(car_race_collision(n: 3) == 9)\nassert(car_race_collision(n:\
    \ 4) == 16)\nassert(car_race_collision(n: 8) == 64)\nassert(car_race_collision(n:\
    \ 10) == 100)"
  status: Exception
  stderr: 'tmpeixhzo9y/tmpeixhzo9y.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b261dd57c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b261da4eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b261da4e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b261da4d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeixhzo9y                        0x00005571c4c4f455 <unavailable> + 5205

    5    libc.so.6                          0x00002b261df43460 __libc_start_main +
    245

    6    tmpeixhzo9y                        0x00005571c4c4f109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660012166
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left = [Int](repeating: 0, count: n)\n    var right =\
    \ [Int](repeating: 0, count: n)\n    var collisions = 0\n    for i in 0..<n {\n\
    \        left[i] = i\n        right[i] = n - i - 1\n    }\n    for i in 0..<n\
    \ {\n        for j in 0..<n {\n            if left[i] == right[j] {\n        \
    \        collisions += 1\n            }\n        }\n    }\n    return collisions\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmpvkuk62dz/tmpvkuk62dz.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b56e00f2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b56dfde9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b56dfde9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b56dfde87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvkuk62dz                        0x000055a0ada58455 <unavailable> + 5205

    5    libc.so.6                          0x00002b56e02de460 __libc_start_main +
    245

    6    tmpvkuk62dz                        0x000055a0ada58109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660012168
- exit_code: 1
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int]()\n    var right_to_left = [Int]()\n\
    \    for i in 0..<n {\n        left_to_right.append(i)\n        right_to_left.append(n\
    \ - i - 1)\n    }\n    return car_race_collision_helper(left_to_right: left_to_right,\
    \ right_to_left: right_to_left)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(car_race_collision(n:\
    \ 2) == 4)\nassert(car_race_collision(n: 3) == 9)\nassert(car_race_collision(n:\
    \ 4) == 16)\nassert(car_race_collision(n: 8) == 64)\nassert(car_race_collision(n:\
    \ 10) == 100)"
  status: SyntaxError
  stderr: "/tmp/tmppwaucyy8.swift:17:12: error: cannot find 'car_race_collision_helper'\
    \ in scope\n    return car_race_collision_helper(left_to_right: left_to_right,\
    \ right_to_left: right_to_left)\n           ^~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660012168
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    return n * (n - 1) / 2\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n: 3)\
    \ == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmpmswg_rvv/tmpmswg_rvv.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aea5b323c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aea5b01ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aea5b01a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aea5b0197b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmswg_rvv                        0x0000561859a77245 <unavailable> + 4677

    5    libc.so.6                          0x00002aea5b50f460 __libc_start_main +
    245

    6    tmpmswg_rvv                        0x0000561859a76ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1660012168
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int](repeating: 0, count: n)\n    var\
    \ right_to_left = [Int](repeating: 0, count: n)\n    var collision_count = 0\n\
    \    for i in 0..<n {\n        left_to_right[i] = i\n        right_to_left[i]\
    \ = n - i - 1\n    }\n    for i in 0..<n {\n        for j in 0..<n {\n       \
    \     if left_to_right[i] == right_to_left[j] {\n                collision_count\
    \ += 1\n            }\n        }\n    }\n    return collision_count\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmp4lx4niiq/tmp4lx4niiq.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af4332c2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af432fb9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af432fb9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af432fb87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4lx4niiq                        0x000055db859ec455 <unavailable> + 5205

    5    libc.so.6                          0x00002af4334ae460 __libc_start_main +
    245

    6    tmp4lx4niiq                        0x000055db859ec109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660012166
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int](repeating: 0, count: n)\n    var\
    \ right_to_left = [Int](repeating: 0, count: n)\n    var collision = 0\n    for\
    \ i in 0..<n {\n        left_to_right[i] = i\n        right_to_left[i] = n - i\
    \ - 1\n    }\n    for i in 0..<n {\n        for j in 0..<n {\n            if left_to_right[i]\
    \ == right_to_left[j] {\n                collision += 1\n            }\n     \
    \   }\n    }\n    return collision\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n: 3) == 9)\n\
    assert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n: 8) == 64)\n\
    assert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmpw2pxp_gx/tmpw2pxp_gx.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1475015c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1474d0cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1474d0c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1474d0b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpw2pxp_gx                        0x000055eb2e404455 <unavailable> + 5205

    5    libc.so.6                          0x00002b1475201460 __libc_start_main +
    245

    6    tmpw2pxp_gx                        0x000055eb2e404109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660012166
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = Array(repeating: 0, count: n)\n    var\
    \ right_to_left = Array(repeating: 0, count: n)\n    var collisions = 0\n    for\
    \ i in 0..<n {\n        left_to_right[i] = i\n        right_to_left[i] = n - i\
    \ - 1\n    }\n    for i in 0..<n {\n        for j in 0..<n {\n            if left_to_right[i]\
    \ == right_to_left[j] {\n                collisions += 1\n            }\n    \
    \    }\n    }\n    return collisions\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n: 3) == 9)\n\
    assert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n: 8) == 64)\n\
    assert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmp8gl69j6y/tmp8gl69j6y.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abc680c1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abc67db8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abc67db8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abc67db77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8gl69j6y                        0x000055beeb7cb455 <unavailable> + 5205

    5    libc.so.6                          0x00002abc682ad460 __libc_start_main +
    245

    6    tmp8gl69j6y                        0x000055beeb7cb109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660012166
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = Array(0..<n)\n    var right_to_left =\
    \ Array(0..<n)\n    left_to_right.sort()\n    right_to_left.sort()\n    var collisions\
    \ = 0\n    var i = 0\n    var j = 0\n    while i < n && j < n {\n        if left_to_right[i]\
    \ < right_to_left[j] {\n            collisions += j\n            i += 1\n    \
    \    } else {\n            j += 1\n        }\n    }\n    collisions += (n - i)\
    \ * j\n    return collisions\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(car_race_collision(n:\
    \ 2) == 4)\nassert(car_race_collision(n: 3) == 9)\nassert(car_race_collision(n:\
    \ 4) == 16)\nassert(car_race_collision(n: 8) == 64)\nassert(car_race_collision(n:\
    \ 10) == 100)"
  status: Exception
  stderr: 'tmpa40a7qca/tmpa40a7qca.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b64037a3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b640349ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b640349a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b64034997b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpa40a7qca                        0x0000560cc0fbd4f5 <unavailable> + 5365

    5    libc.so.6                          0x00002b640398f460 __libc_start_main +
    245

    6    tmpa40a7qca                        0x0000560cc0fbd1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660012168
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int]()\n    var right_to_left = [Int]()\n\
    \    var collisions = 0\n    for i in 0..<n {\n        left_to_right.append(i)\n\
    \        right_to_left.append(i)\n    }\n    for i in 0..<n {\n        for j in\
    \ 0..<n {\n            if left_to_right[i] == right_to_left[j] {\n           \
    \     collisions += 1\n            }\n        }\n    }\n    return collisions\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmpk7k8ahls/tmpk7k8ahls.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b707d8adc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b707d5a4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b707d5a4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b707d5a37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpk7k8ahls                        0x0000555ddff47445 <unavailable> + 5189

    5    libc.so.6                          0x00002b707da99460 __libc_start_main +
    245

    6    tmpk7k8ahls                        0x0000555ddff470f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660012168
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int](repeating: 0, count: n)\n    var\
    \ right_to_left = [Int](repeating: 0, count: n)\n    for i in 0..<n {\n      \
    \  left_to_right[i] = i\n        right_to_left[i] = n - i - 1\n    }\n    var\
    \ collisions = 0\n    for i in 0..<n {\n        for j in 0..<n {\n           \
    \ if left_to_right[i] == right_to_left[j] {\n                collisions += 1\n\
    \            }\n        }\n    }\n    return collisions\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmpy5_5e537/tmpy5_5e537.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4d882b4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4d87fabb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4d87fab988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4d87faa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpy5_5e537                        0x0000557cb2403455 <unavailable> + 5205

    5    libc.so.6                          0x00002b4d884a0460 __libc_start_main +
    245

    6    tmpy5_5e537                        0x0000557cb2403109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660012166
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right_cars = [Int](repeating: 0, count: n)\n\
    \    var right_to_left_cars = [Int](repeating: 0, count: n)\n    var collision_count\
    \ = 0\n    for i in 0..<n {\n        left_to_right_cars[i] = i\n        right_to_left_cars[i]\
    \ = n - i - 1\n    }\n    for i in 0..<n {\n        for j in 0..<n {\n       \
    \     if left_to_right_cars[i] == right_to_left_cars[j] {\n                collision_count\
    \ += 1\n            }\n        }\n    }\n    return collision_count\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmpx764a2gp/tmpx764a2gp.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b56485a8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b564829fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b564829f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b564829e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpx764a2gp                        0x000055fce9650455 <unavailable> + 5205

    5    libc.so.6                          0x00002b5648794460 __libc_start_main +
    245

    6    tmpx764a2gp                        0x000055fce9650109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660012168
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = Array(repeating: 0, count: n)\n    var\
    \ right_to_left = Array(repeating: 0, count: n)\n    for i in 0..<n {\n      \
    \  left_to_right[i] = i\n        right_to_left[i] = n - i - 1\n    }\n    var\
    \ collisions = 0\n    for i in 0..<n {\n        for j in 0..<n {\n           \
    \ if left_to_right[i] == right_to_left[j] {\n                collisions += 1\n\
    \            }\n        }\n    }\n    return collisions\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmplj1_f9_5/tmplj1_f9_5.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad498029c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad497d20b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad497d20988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad497d1f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplj1_f9_5                        0x0000561810f56455 <unavailable> + 5205

    5    libc.so.6                          0x00002ad498215460 __libc_start_main +
    245

    6    tmplj1_f9_5                        0x0000561810f56109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660012167
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int](repeating: 0, count: n)\n    var\
    \ right_to_left = [Int](repeating: 0, count: n)\n    var collisions = 0\n    for\
    \ i in 0..<n {\n        left_to_right[i] = i\n        right_to_left[i] = n - i\
    \ - 1\n    }\n    for i in 0..<n {\n        for j in 0..<n {\n            if left_to_right[i]\
    \ == right_to_left[j] {\n                collisions += 1\n            }\n    \
    \    }\n    }\n    return collisions\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n: 3) == 9)\n\
    assert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n: 8) == 64)\n\
    assert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmps1jc4l0x/tmps1jc4l0x.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7480becc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b74808e3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b74808e3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b74808e27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmps1jc4l0x                        0x000055a38fff1455 <unavailable> + 5205

    5    libc.so.6                          0x00002b7480dd8460 __libc_start_main +
    245

    6    tmps1jc4l0x                        0x000055a38fff1109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660012166
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int](repeating: 0, count: n)\n    var\
    \ right_to_left = [Int](repeating: 0, count: n)\n    for i in 0..<n {\n      \
    \  left_to_right[i] = i\n        right_to_left[i] = n - i - 1\n    }\n    var\
    \ collisions = 0\n    for i in 0..<n {\n        for j in 0..<n {\n           \
    \ if left_to_right[i] == right_to_left[j] {\n                collisions += 1\n\
    \            }\n        }\n    }\n    return collisions\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmpy5_5e537/tmpy5_5e537.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4d882b4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4d87fabb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4d87fab988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4d87faa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpy5_5e537                        0x0000557cb2403455 <unavailable> + 5205

    5    libc.so.6                          0x00002b4d884a0460 __libc_start_main +
    245

    6    tmpy5_5e537                        0x0000557cb2403109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660012166
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var leftToRight = [Int]()\n    var rightToLeft = [Int]()\n\
    \    var collisions = 0\n    \n    for i in 1...n {\n        leftToRight.append(i)\n\
    \        rightToLeft.append(n+1-i)\n    }\n    \n    for i in 0..<n {\n      \
    \  if leftToRight[i] == rightToLeft[i] {\n            collisions += 1\n      \
    \  }\n    }\n    \n    return collisions\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n: 3) == 9)\n\
    assert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n: 8) == 64)\n\
    assert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmpwm1ct475/tmpwm1ct475.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ace1c0c8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ace1bdbfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ace1bdbf988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ace1bdbe7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwm1ct475                        0x0000561fd8d2d535 <unavailable> + 5429

    5    libc.so.6                          0x00002ace1c2b4460 __libc_start_main +
    245

    6    tmpwm1ct475                        0x0000561fd8d2d1e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1660012168
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int](repeating: 0, count: n)\n    var\
    \ right_to_left = [Int](repeating: 0, count: n)\n    for i in 0..<n {\n      \
    \  left_to_right[i] = i\n        right_to_left[i] = n - i - 1\n    }\n    var\
    \ collisions = 0\n    for i in 0..<n {\n        for j in 0..<n {\n           \
    \ if left_to_right[i] == right_to_left[j] {\n                collisions += 1\n\
    \            }\n        }\n    }\n    return collisions\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmpy5_5e537/tmpy5_5e537.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4d882b4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4d87fabb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4d87fab988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4d87faa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpy5_5e537                        0x0000557cb2403455 <unavailable> + 5205

    5    libc.so.6                          0x00002b4d884a0460 __libc_start_main +
    245

    6    tmpy5_5e537                        0x0000557cb2403109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660012166
- exit_code: 1
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = Array(1...n)\n    var right_to_left =\
    \ Array(1...n).reversed()\n    var collisions = 0\n    while left_to_right.count\
    \ > 0 && right_to_left.count > 0 {\n        if left_to_right[0] < right_to_left[0]\
    \ {\n            collisions += 1\n            left_to_right.remove(at: 0)\n  \
    \      } else {\n            right_to_left.remove(at: 0)\n        }\n    }\n \
    \   return collisions\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(car_race_collision(n:\
    \ 2) == 4)\nassert(car_race_collision(n: 3) == 9)\nassert(car_race_collision(n:\
    \ 4) == 16)\nassert(car_race_collision(n: 8) == 64)\nassert(car_race_collision(n:\
    \ 10) == 100)"
  status: SyntaxError
  stderr: "/tmp/tmp6q5en08i.swift:15:45: error: cannot convert value of type 'Int'\
    \ to expected argument type 'ReversedCollection<[Int]>.Index'\n        if left_to_right[0]\
    \ < right_to_left[0] {\n                                            ^\n/tmp/tmp6q5en08i.swift:19:27:\
    \ error: value of type 'ReversedCollection<[Int]>' has no member 'remove'\n  \
    \          right_to_left.remove(at: 0)\n            ~~~~~~~~~~~~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012168
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int](repeating: 0, count: n)\n    var\
    \ right_to_left = [Int](repeating: 0, count: n)\n    for i in 0..<n {\n      \
    \  left_to_right[i] = i\n        right_to_left[i] = n - i - 1\n    }\n    var\
    \ collisions = 0\n    for i in 0..<n {\n        for j in 0..<n {\n           \
    \ if left_to_right[i] == right_to_left[j] {\n                collisions += 1\n\
    \            }\n        }\n    }\n    return collisions\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmpy5_5e537/tmpy5_5e537.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4d882b4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4d87fabb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4d87fab988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4d87faa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpy5_5e537                        0x0000557cb2403455 <unavailable> + 5205

    5    libc.so.6                          0x00002b4d884a0460 __libc_start_main +
    245

    6    tmpy5_5e537                        0x0000557cb2403109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660012166
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var collisions = 0\n    for i in 1...n {\n        for j in\
    \ 1...n {\n            if i < j {\n                collisions += 1\n         \
    \   }\n        }\n    }\n    return collisions\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n: 3)\
    \ == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmpajuf0haw/tmpajuf0haw.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b98d8e3cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b98d8b33b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b98d8b33988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b98d8b327b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpajuf0haw                        0x0000564d235c6335 <unavailable> + 4917

    5    libc.so.6                          0x00002b98d9028460 __libc_start_main +
    245

    6    tmpajuf0haw                        0x0000564d235c5fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660012168
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int](repeating: 0, count: n)\n    var\
    \ right_to_left = [Int](repeating: 0, count: n)\n    for i in 0..<n {\n      \
    \  left_to_right[i] = i\n        right_to_left[i] = n - i - 1\n    }\n    var\
    \ collisions = 0\n    for i in 0..<n {\n        for j in 0..<n {\n           \
    \ if left_to_right[i] == right_to_left[j] {\n                collisions += 1\n\
    \            }\n        }\n    }\n    return collisions\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmpy5_5e537/tmpy5_5e537.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4d882b4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4d87fabb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4d87fab988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4d87faa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpy5_5e537                        0x0000557cb2403455 <unavailable> + 5205

    5    libc.so.6                          0x00002b4d884a0460 __libc_start_main +
    245

    6    tmpy5_5e537                        0x0000557cb2403109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660012166
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int]()\n    var right_to_left = [Int]()\n\
    \    for i in 0..<n {\n        left_to_right.append(i)\n        right_to_left.append(n\
    \ - i - 1)\n    }\n    var collision = 0\n    for i in 0..<n {\n        for j\
    \ in 0..<n {\n            if left_to_right[i] == right_to_left[j] {\n        \
    \        collision += 1\n            }\n        }\n    }\n    return collision\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmpd3ver6fr/tmpd3ver6fr.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b787824cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7877f43b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7877f43988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7877f427b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpd3ver6fr                        0x000055a4687de445 <unavailable> + 5189

    5    libc.so.6                          0x00002b7878438460 __libc_start_main +
    245

    6    tmpd3ver6fr                        0x000055a4687de0f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660012167
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = Array(repeating: 0, count: n)\n    var\
    \ right_to_left = Array(repeating: 0, count: n)\n    var collisions = 0\n    for\
    \ i in 0..<n {\n        left_to_right[i] = i\n        right_to_left[i] = n - i\
    \ - 1\n    }\n    for i in 0..<n {\n        for j in 0..<n {\n            if left_to_right[i]\
    \ == right_to_left[j] {\n                collisions += 1\n            }\n    \
    \    }\n    }\n    return collisions\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n: 3) == 9)\n\
    assert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n: 8) == 64)\n\
    assert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmp8gl69j6y/tmp8gl69j6y.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abc680c1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abc67db8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abc67db8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abc67db77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8gl69j6y                        0x000055beeb7cb455 <unavailable> + 5205

    5    libc.so.6                          0x00002abc682ad460 __libc_start_main +
    245

    6    tmp8gl69j6y                        0x000055beeb7cb109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660012166
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int](repeating: 0, count: n)\n    var\
    \ right_to_left = [Int](repeating: 0, count: n)\n    var collisions = 0\n    for\
    \ i in 0..<n {\n        left_to_right[i] = i\n        right_to_left[i] = n - i\
    \ - 1\n    }\n    for i in 0..<n {\n        for j in 0..<n {\n            if left_to_right[i]\
    \ == right_to_left[j] {\n                collisions += 1\n            }\n    \
    \    }\n    }\n    return collisions\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n: 3) == 9)\n\
    assert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n: 8) == 64)\n\
    assert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmps1jc4l0x/tmps1jc4l0x.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7480becc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b74808e3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b74808e3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b74808e27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmps1jc4l0x                        0x000055a38fff1455 <unavailable> + 5205

    5    libc.so.6                          0x00002b7480dd8460 __libc_start_main +
    245

    6    tmps1jc4l0x                        0x000055a38fff1109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660012166
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int](repeating: 0, count: n)\n    var\
    \ right_to_left = [Int](repeating: 0, count: n)\n    var i = 0\n    while i <\
    \ n {\n        left_to_right[i] = i\n        right_to_left[i] = n - i - 1\n  \
    \      i += 1\n    }\n    var count = 0\n    i = 0\n    while i < n {\n      \
    \  var j = 0\n        while j < n {\n            if left_to_right[i] == right_to_left[j]\
    \ {\n                count += 1\n            }\n            j += 1\n        }\n\
    \        i += 1\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n: 3) == 9)\n\
    assert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n: 8) == 64)\n\
    assert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmpn3yxay2h/tmpn3yxay2h.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aad74bb5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aad748acb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aad748ac988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aad748ab7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpn3yxay2h                        0x000055bf5b4892c5 <unavailable> + 4805

    5    libc.so.6                          0x00002aad74da1460 __libc_start_main +
    245

    6    tmpn3yxay2h                        0x000055bf5b488f79 <unavailable> + 3961

    '
  stdout: ''
  timestamp: 1660012168
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int]()\n    var right_to_left = [Int]()\n\
    \    for i in 0..<n {\n        left_to_right.append(i)\n        right_to_left.append(n\
    \ - i - 1)\n    }\n    var count = 0\n    for i in 0..<n {\n        for j in 0..<n\
    \ {\n            if left_to_right[i] == right_to_left[j] {\n                count\
    \ += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmp2hktz2mj/tmp2hktz2mj.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acf0d9c0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acf0d6b7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acf0d6b7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acf0d6b67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2hktz2mj                        0x00005580120f7445 <unavailable> + 5189

    5    libc.so.6                          0x00002acf0dbac460 __libc_start_main +
    245

    6    tmp2hktz2mj                        0x00005580120f70f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660012166
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int](repeating: 0, count: n)\n    var\
    \ right_to_left = [Int](repeating: 0, count: n)\n    for i in 0..<n {\n      \
    \  left_to_right[i] = i\n        right_to_left[i] = n - i - 1\n    }\n    var\
    \ collisions = 0\n    for i in 0..<n {\n        for j in 0..<n {\n           \
    \ if left_to_right[i] == right_to_left[j] {\n                collisions += 1\n\
    \            }\n        }\n    }\n    return collisions\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmpy5_5e537/tmpy5_5e537.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4d882b4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4d87fabb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4d87fab988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4d87faa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpy5_5e537                        0x0000557cb2403455 <unavailable> + 5205

    5    libc.so.6                          0x00002b4d884a0460 __libc_start_main +
    245

    6    tmpy5_5e537                        0x0000557cb2403109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660012166
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var collisions = 0\n    var left_to_right = Array(repeating:\
    \ 0, count: n)\n    var right_to_left = Array(repeating: 0, count: n)\n    for\
    \ i in 0..<n {\n        left_to_right[i] = i\n        right_to_left[i] = n - i\
    \ - 1\n    }\n    for i in 0..<n {\n        for j in 0..<n {\n            if left_to_right[i]\
    \ == right_to_left[j] {\n                collisions += 1\n            }\n    \
    \    }\n    }\n    return collisions\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n: 3) == 9)\n\
    assert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n: 8) == 64)\n\
    assert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmp855j_geu/tmp855j_geu.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8d5bb32c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8d5b829b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8d5b829988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8d5b8287b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp855j_geu                        0x00005599f48b5455 <unavailable> + 5205

    5    libc.so.6                          0x00002b8d5bd1e460 __libc_start_main +
    245

    6    tmp855j_geu                        0x00005599f48b5109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660012167
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var collisions = 0\n    for i in 0..<n {\n        for j in\
    \ 0..<n {\n            if i < j {\n                collisions += 1\n         \
    \   }\n        }\n    }\n    return collisions\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n: 3)\
    \ == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmp7pueah2g/tmp7pueah2g.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4b026f3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4b023eab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4b023ea988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4b023e97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7pueah2g                        0x00005637895de335 <unavailable> + 4917

    5    libc.so.6                          0x00002b4b028df460 __libc_start_main +
    245

    6    tmp7pueah2g                        0x00005637895ddfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660012167
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = Array(repeating: 0, count: n)\n    var\
    \ right_to_left = Array(repeating: 0, count: n)\n    var collision_count = 0\n\
    \    for i in 0..<n {\n        left_to_right[i] = i\n        right_to_left[i]\
    \ = n - i - 1\n    }\n    for i in 0..<n {\n        for j in 0..<n {\n       \
    \     if left_to_right[i] == right_to_left[j] {\n                collision_count\
    \ += 1\n            }\n        }\n    }\n    return collision_count\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmp9_a7cmqg/tmp9_a7cmqg.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aad54327c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aad5401eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aad5401e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aad5401d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9_a7cmqg                        0x0000556b8d884455 <unavailable> + 5205

    5    libc.so.6                          0x00002aad54513460 __libc_start_main +
    245

    6    tmp9_a7cmqg                        0x0000556b8d884109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660012168
- exit_code: 1
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int](repeating: 0, count: n)\n    var\
    \ right_to_left = [Int](repeating: 0, count: n)\n    for i in 0..<n {\n      \
    \  left_to_right[i] = i\n        right_to_left[i] = n - i - 1\n    }\n    return\
    \ merge_and_count_inversions(left_to_right, right_to_left)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: SyntaxError
  stderr: "/tmp/tmpsy_u24hm.swift:17:12: error: cannot find 'merge_and_count_inversions'\
    \ in scope\n    return merge_and_count_inversions(left_to_right, right_to_left)\n\
    \           ^~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660012168
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int](repeating: 0, count: n)\n    var\
    \ right_to_left = [Int](repeating: 0, count: n)\n    var collision = 0\n    for\
    \ i in 0..<n {\n        left_to_right[i] = i\n        right_to_left[i] = n - i\
    \ - 1\n    }\n    for i in 0..<n {\n        for j in 0..<n {\n            if left_to_right[i]\
    \ == right_to_left[j] {\n                collision += 1\n            }\n     \
    \   }\n    }\n    return collision\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n: 3) == 9)\n\
    assert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n: 8) == 64)\n\
    assert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmpw2pxp_gx/tmpw2pxp_gx.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1475015c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1474d0cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1474d0c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1474d0b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpw2pxp_gx                        0x000055eb2e404455 <unavailable> + 5205

    5    libc.so.6                          0x00002b1475201460 __libc_start_main +
    245

    6    tmpw2pxp_gx                        0x000055eb2e404109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660012166
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int]()\n    var right_to_left = [Int]()\n\
    \    for i in 0..<n {\n        left_to_right.append(i)\n        right_to_left.append(i)\n\
    \    }\n    var collisions = 0\n    while left_to_right.count > 0 && right_to_left.count\
    \ > 0 {\n        if left_to_right[0] == right_to_left[0] {\n            collisions\
    \ += 1\n            left_to_right.removeFirst()\n            right_to_left.removeFirst()\n\
    \        } else if left_to_right[0] < right_to_left[0] {\n            left_to_right.removeFirst()\n\
    \        } else {\n            right_to_left.removeFirst()\n        }\n    }\n\
    \    return collisions\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(car_race_collision(n:\
    \ 2) == 4)\nassert(car_race_collision(n: 3) == 9)\nassert(car_race_collision(n:\
    \ 4) == 16)\nassert(car_race_collision(n: 8) == 64)\nassert(car_race_collision(n:\
    \ 10) == 100)"
  status: Exception
  stderr: 'tmpc4emrcwv/tmpc4emrcwv.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0e89671c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0e89368b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0e89368988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0e893677b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpc4emrcwv                        0x000055b6e6a48585 <unavailable> + 5509

    5    libc.so.6                          0x00002b0e8985d460 __libc_start_main +
    245

    6    tmpc4emrcwv                        0x000055b6e6a48239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1660012168
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int](repeating: 0, count: n)\n    var\
    \ right_to_left = [Int](repeating: 0, count: n)\n    for i in 0..<n {\n      \
    \  left_to_right[i] = i\n        right_to_left[i] = n - i - 1\n    }\n    var\
    \ collisions = 0\n    for i in 0..<n {\n        for j in 0..<n {\n           \
    \ if left_to_right[i] == right_to_left[j] {\n                collisions += 1\n\
    \            }\n        }\n    }\n    return collisions\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmpy5_5e537/tmpy5_5e537.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4d882b4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4d87fabb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4d87fab988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4d87faa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpy5_5e537                        0x0000557cb2403455 <unavailable> + 5205

    5    libc.so.6                          0x00002b4d884a0460 __libc_start_main +
    245

    6    tmpy5_5e537                        0x0000557cb2403109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660012166
- exit_code: 1
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left = [Int](repeating: 0, count: n)\n    var right =\
    \ [Int](repeating: 0, count: n)\n    for i in 0..<n {\n        left[i] = i\n \
    \       right[i] = n - i - 1\n    }\n    return car_race_collision(left: left,\
    \ right: right)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(car_race_collision(n:\
    \ 2) == 4)\nassert(car_race_collision(n: 3) == 9)\nassert(car_race_collision(n:\
    \ 4) == 16)\nassert(car_race_collision(n: 8) == 64)\nassert(car_race_collision(n:\
    \ 10) == 100)"
  status: SyntaxError
  stderr: "/tmp/tmp8f3w0fy0.swift:17:30: error: extra arguments at positions #1, #2\
    \ in call\n    return car_race_collision(left: left, right: right)\n         \
    \                    ^\n/tmp/tmp8f3w0fy0.swift:10:6: note: 'car_race_collision(n:)'\
    \ declared here\nfunc car_race_collision(n: Int) -> Int {\n     ^\n/tmp/tmp8f3w0fy0.swift:17:31:\
    \ error: missing argument for parameter 'n' in call\n    return car_race_collision(left:\
    \ left, right: right)\n                              ^\n                     \
    \         n: <#Int#>, \n/tmp/tmp8f3w0fy0.swift:10:6: note: 'car_race_collision(n:)'\
    \ declared here\nfunc car_race_collision(n: Int) -> Int {\n     ^\n"
  stdout: ''
  timestamp: 1660012167
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int](repeating: 0, count: n)\n    var\
    \ right_to_left = [Int](repeating: 0, count: n)\n    var collisions = 0\n    for\
    \ i in 0..<n {\n        left_to_right[i] = i\n        right_to_left[i] = n - i\
    \ - 1\n    }\n    for i in 0..<n {\n        for j in 0..<n {\n            if left_to_right[i]\
    \ == right_to_left[j] {\n                collisions += 1\n            }\n    \
    \    }\n    }\n    return collisions\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n: 3) == 9)\n\
    assert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n: 8) == 64)\n\
    assert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmps1jc4l0x/tmps1jc4l0x.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7480becc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b74808e3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b74808e3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b74808e27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmps1jc4l0x                        0x000055a38fff1455 <unavailable> + 5205

    5    libc.so.6                          0x00002b7480dd8460 __libc_start_main +
    245

    6    tmps1jc4l0x                        0x000055a38fff1109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660012166
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int]()\n    var right_to_left = [Int]()\n\
    \    for i in 0..<n {\n        left_to_right.append(i)\n        right_to_left.append(n-i-1)\n\
    \    }\n    var count = 0\n    for i in 0..<n {\n        for j in 0..<n {\n  \
    \          if left_to_right[i] == right_to_left[j] {\n                count +=\
    \ 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmpj3scq00u/tmpj3scq00u.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7bd0c52c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7bd0949b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7bd0949988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7bd09487b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpj3scq00u                        0x00005649051c7445 <unavailable> + 5189

    5    libc.so.6                          0x00002b7bd0e3e460 __libc_start_main +
    245

    6    tmpj3scq00u                        0x00005649051c70f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660012166
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int]()\n    var right_to_left = [Int]()\n\
    \    for i in 0..<n {\n        left_to_right.append(i)\n        right_to_left.append(n\
    \ - i - 1)\n    }\n    var count = 0\n    for i in 0..<n {\n        for j in 0..<n\
    \ {\n            if left_to_right[i] == right_to_left[j] {\n                count\
    \ += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmp2hktz2mj/tmp2hktz2mj.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acf0d9c0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acf0d6b7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acf0d6b7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acf0d6b67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2hktz2mj                        0x00005580120f7445 <unavailable> + 5189

    5    libc.so.6                          0x00002acf0dbac460 __libc_start_main +
    245

    6    tmp2hktz2mj                        0x00005580120f70f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660012166
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int]()\n    var right_to_left = [Int]()\n\
    \    for i in 1...n {\n        left_to_right.append(i)\n        right_to_left.append(n\
    \ - i + 1)\n    }\n    var collisions = 0\n    for i in 0..<n {\n        for j\
    \ in 0..<n {\n            if left_to_right[i] == right_to_left[j] {\n        \
    \        collisions += 1\n            }\n        }\n    }\n    return collisions\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmp696do4ol/tmp696do4ol.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002add63665c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002add6335cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002add6335c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002add6335b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp696do4ol                        0x000055b9c0824535 <unavailable> + 5429

    5    libc.so.6                          0x00002add63851460 __libc_start_main +
    245

    6    tmp696do4ol                        0x000055b9c08241e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1660012168
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int]()\n    var right_to_left = [Int]()\n\
    \    for i in 0..<n {\n        left_to_right.append(i)\n        right_to_left.append(i)\n\
    \    }\n    var collisions = 0\n    while !left_to_right.isEmpty && !right_to_left.isEmpty\
    \ {\n        let left = left_to_right.removeFirst()\n        let right = right_to_left.removeFirst()\n\
    \        if left == right {\n            collisions += 1\n        }\n    }\n \
    \   return collisions\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(car_race_collision(n:\
    \ 2) == 4)\nassert(car_race_collision(n: 3) == 9)\nassert(car_race_collision(n:\
    \ 4) == 16)\nassert(car_race_collision(n: 8) == 64)\nassert(car_race_collision(n:\
    \ 10) == 100)"
  status: Exception
  stderr: 'tmp_hmta75x/tmp_hmta75x.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abc7e92cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abc7e623b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abc7e623988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abc7e6227b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_hmta75x                        0x0000561d3cb6c575 <unavailable> + 5493

    5    libc.so.6                          0x00002abc7eb18460 __libc_start_main +
    245

    6    tmp_hmta75x                        0x0000561d3cb6c229 <unavailable> + 4649

    '
  stdout: ''
  timestamp: 1660012168
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int](repeating: 0, count: n)\n    var\
    \ right_to_left = [Int](repeating: 0, count: n)\n    var collisions = 0\n    for\
    \ i in 0..<n {\n        left_to_right[i] = i\n        right_to_left[i] = n - i\
    \ - 1\n    }\n    for i in 0..<n {\n        for j in 0..<n {\n            if left_to_right[i]\
    \ == right_to_left[j] {\n                collisions += 1\n            }\n    \
    \    }\n    }\n    return collisions\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n: 3) == 9)\n\
    assert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n: 8) == 64)\n\
    assert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmps1jc4l0x/tmps1jc4l0x.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7480becc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b74808e3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b74808e3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b74808e27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmps1jc4l0x                        0x000055a38fff1455 <unavailable> + 5205

    5    libc.so.6                          0x00002b7480dd8460 __libc_start_main +
    245

    6    tmps1jc4l0x                        0x000055a38fff1109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660012166
