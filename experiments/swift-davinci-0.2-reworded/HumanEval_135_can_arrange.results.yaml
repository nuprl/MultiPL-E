language: swift
name: HumanEval_135_can_arrange
results:
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var max = -1\n    for i in 0..<arr.count - 1 {\n      \
    \  if arr[i] > arr[i + 1] {\n            max = i\n        }\n    }\n    return\
    \ max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(can_arrange(arr: [1, 2,\
    \ 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpk3xrq5op/tmpk3xrq5op.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8293f8dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8293c84b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8293c84988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8293c837b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpk3xrq5op                        0x000055b6a81ad552 <unavailable> + 5458

    5    libc.so.6                          0x00002b8294179460 __libc_start_main +
    245

    6    tmpk3xrq5op                        0x000055b6a81ad1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824339
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var max = arr[0]\n    var maxIndex = 0\n    for i in 1..<arr.count\
    \ {\n        if arr[i] > max {\n            max = arr[i]\n            maxIndex\
    \ = i\n        }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp12hpug9a/tmp12hpug9a.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acd64b0ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acd64801b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acd64801988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acd648007b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp12hpug9a                        0x000055f52efe2552 <unavailable> + 5458

    5    libc.so.6                          0x00002acd64cf6460 __libc_start_main +
    245

    6    tmp12hpug9a                        0x000055f52efe21a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824339
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var index = -1\n    for i in 0..<arr.count - 1 {\n    \
    \    if arr[i] > arr[i + 1] {\n            index = i\n        }\n    }\n    return\
    \ index\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(can_arrange(arr: [1, 2,\
    \ 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpkum5y97k/tmpkum5y97k.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b64c9592c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b64c9289b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b64c9289988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b64c92887b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkum5y97k                        0x0000561bc6e6e552 <unavailable> + 5458

    5    libc.so.6                          0x00002b64c977e460 __libc_start_main +
    245

    6    tmpkum5y97k                        0x0000561bc6e6e1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824339
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = -1\n    var maxValue = -1\n    for i in\
    \ 0..<arr.count {\n        if arr[i] > maxValue {\n            maxValue = arr[i]\n\
    \            maxIndex = i\n        }\n    }\n    return maxIndex\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpwe8ffplp/tmpwe8ffplp.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8215ba3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b821589ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b821589a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b82158997b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwe8ffplp                        0x00005559c3075552 <unavailable> + 5458

    5    libc.so.6                          0x00002b8215d8f460 __libc_start_main +
    245

    6    tmpwe8ffplp                        0x00005559c30751a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824339
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var max = arr[0]\n    var index = -1\n    for i in 1..<arr.count\
    \ {\n        if arr[i] > max {\n            max = arr[i]\n            index =\
    \ i\n        }\n    }\n    return index\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2,\
    \ 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\
    assert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr: [] as\
    \ [Int]) == -1)"
  status: Exception
  stderr: 'tmpk833zjm0/tmpk833zjm0.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afcf2117c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afcf1e0eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afcf1e0e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afcf1e0d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpk833zjm0                        0x000055b5a6836552 <unavailable> + 5458

    5    libc.so.6                          0x00002afcf2303460 __libc_start_main +
    245

    6    tmpk833zjm0                        0x000055b5a68361a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824339
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var max = -1\n    for i in 0..<arr.count - 1 {\n      \
    \  if arr[i] >= arr[i + 1] {\n            max = i\n        }\n    }\n    return\
    \ max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(can_arrange(arr: [1, 2,\
    \ 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpif_64jmd/tmpif_64jmd.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5e91c66c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5e9195db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5e9195d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5e9195c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpif_64jmd                        0x000055ae68b46552 <unavailable> + 5458

    5    libc.so.6                          0x00002b5e91e52460 __libc_start_main +
    245

    6    tmpif_64jmd                        0x000055ae68b461a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824339
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var max = arr[0]\n    var index = -1\n    for i in 1..<arr.count\
    \ {\n        if arr[i] < max {\n            index = i\n        } else {\n    \
    \        max = arr[i]\n        }\n    }\n    return index\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b854bd7bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b854ba72561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b854ba72286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b854ba7213c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b854ba71bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b854b871e83 <unavailable> + 188035

    6    tmpy3f8wczz                        0x000056369252a932 <unavailable> + 6450

    7    tmpy3f8wczz                        0x000056369252a81c <unavailable> + 6172

    8    libc.so.6                          0x00002b854bf67460 __libc_start_main +
    245

    9    tmpy3f8wczz                        0x000056369252a1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824339
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = -1\n    for i in 0..<arr.count - 1 {\n \
    \       if arr[i] <= arr[i + 1] {\n            maxIndex = i + 1\n        }\n \
    \   }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmprej94dad/tmprej94dad.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abf32c17c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abf3290eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abf3290e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abf3290d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprej94dad                        0x0000556fa741f552 <unavailable> + 5458

    5    libc.so.6                          0x00002abf32e03460 __libc_start_main +
    245

    6    tmprej94dad                        0x0000556fa741f1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824339
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = -1\n    var maxValue = -1\n    for i in\
    \ 0..<arr.count {\n        if arr[i] > maxValue {\n            maxValue = arr[i]\n\
    \            maxIndex = i\n        }\n    }\n    return maxIndex\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpwe8ffplp/tmpwe8ffplp.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8215ba3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b821589ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b821589a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b82158997b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwe8ffplp                        0x00005559c3075552 <unavailable> + 5458

    5    libc.so.6                          0x00002b8215d8f460 __libc_start_main +
    245

    6    tmpwe8ffplp                        0x00005559c30751a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824339
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var max_index = -1\n    for i in 1..<arr.count {\n    \
    \    if arr[i] <= arr[i - 1] {\n            max_index = i\n        }\n    }\n\
    \    return max_index\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'Swift/Range.swift:743: Fatal error: Range requires lowerBound <= upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002ad84a7a5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad84a49c561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ad84a49c286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ad84a49c13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ad84a49bbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmp3ntlqlao                        0x000055d9c64689c2 <unavailable> + 6594

    6    tmp3ntlqlao                        0x000055d9c646881c <unavailable> + 6172

    7    libc.so.6                          0x00002ad84a991460 __libc_start_main +
    245

    8    tmp3ntlqlao                        0x000055d9c64681a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824339
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var max_index = -1\n    var max_value = -1\n    for i in\
    \ 0..<arr.count {\n        if arr[i] > max_value {\n            max_value = arr[i]\n\
    \            max_index = i\n        }\n    }\n    return max_index\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpdsmdejt7/tmpdsmdejt7.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b04242d7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0423fceb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0423fce988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0423fcd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdsmdejt7                        0x0000559a4a757552 <unavailable> + 5458

    5    libc.so.6                          0x00002b04244c3460 __libc_start_main +
    245

    6    tmpdsmdejt7                        0x0000559a4a7571a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824339
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var max = -1\n    for i in 0..<arr.count - 1 {\n      \
    \  if arr[i] > arr[i + 1] {\n            if i > max {\n                max = i\n\
    \            }\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpr149cndy/tmpr149cndy.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aee454c6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aee451bdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aee451bd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aee451bc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpr149cndy                        0x0000557e7c904552 <unavailable> + 5458

    5    libc.so.6                          0x00002aee456b2460 __libc_start_main +
    245

    6    tmpr149cndy                        0x0000557e7c9041a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824339
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = -1\n    for i in 0..<arr.count - 1 {\n \
    \       if arr[i] >= arr[i + 1] {\n            maxIndex = i\n        }\n    }\n\
    \    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp2b9_bhgs/tmp2b9_bhgs.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9ca4384c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9ca407bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9ca407b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9ca407a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2b9_bhgs                        0x000056412df75552 <unavailable> + 5458

    5    libc.so.6                          0x00002b9ca4570460 __libc_start_main +
    245

    6    tmp2b9_bhgs                        0x000056412df751a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824339
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var max = arr[0]\n    var maxIndex = 0\n    for i in 1..<arr.count\
    \ {\n        if arr[i] > max {\n            max = arr[i]\n            maxIndex\
    \ = i\n        }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp12hpug9a/tmp12hpug9a.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acd64b0ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acd64801b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acd64801988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acd648007b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp12hpug9a                        0x000055f52efe2552 <unavailable> + 5458

    5    libc.so.6                          0x00002acd64cf6460 __libc_start_main +
    245

    6    tmp12hpug9a                        0x000055f52efe21a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824339
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var max = arr[0]\n    var maxIndex = 0\n    for i in 1..<arr.count\
    \ {\n        if arr[i] > max {\n            max = arr[i]\n            maxIndex\
    \ = i\n        }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp12hpug9a/tmp12hpug9a.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acd64b0ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acd64801b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acd64801988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acd648007b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp12hpug9a                        0x000055f52efe2552 <unavailable> + 5458

    5    libc.so.6                          0x00002acd64cf6460 __libc_start_main +
    245

    6    tmp12hpug9a                        0x000055f52efe21a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824339
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var max = arr[0]\n    var index = -1\n    for i in 1..<arr.count\
    \ {\n        if arr[i] <= max {\n            max = arr[i]\n            index =\
    \ i\n        }\n    }\n    return index\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2,\
    \ 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\
    assert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr: [] as\
    \ [Int]) == -1)"
  status: Exception
  stderr: 'tmpnibd_dfd/tmpnibd_dfd.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afb4ee62c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afb4eb59b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afb4eb59988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afb4eb587b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnibd_dfd                        0x000055674e4c4552 <unavailable> + 5458

    5    libc.so.6                          0x00002afb4f04e460 __libc_start_main +
    245

    6    tmpnibd_dfd                        0x000055674e4c41a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824339
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    if arr.count == 0 {\n        return -1\n    }\n    var\
    \ max_index = 0\n    for i in 1..<arr.count {\n        if arr[i] < arr[i - 1]\
    \ {\n            return max_index\n        }\n        if arr[i] > arr[max_index]\
    \ {\n            max_index = i\n        }\n    }\n    return -1\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpt0g8h_eu/tmpt0g8h_eu.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af928f50c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af928c47b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af928c47988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af928c467b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpt0g8h_eu                        0x0000562d82f16552 <unavailable> + 5458

    5    libc.so.6                          0x00002af92913c460 __libc_start_main +
    245

    6    tmpt0g8h_eu                        0x0000562d82f161a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824339
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var max = arr[0]\n    var maxIndex = 0\n    for i in 1..<arr.count\
    \ {\n        if arr[i] > max {\n            max = arr[i]\n            maxIndex\
    \ = i\n        }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp12hpug9a/tmp12hpug9a.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acd64b0ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acd64801b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acd64801988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acd648007b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp12hpug9a                        0x000055f52efe2552 <unavailable> + 5458

    5    libc.so.6                          0x00002acd64cf6460 __libc_start_main +
    245

    6    tmp12hpug9a                        0x000055f52efe21a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824339
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = -1\n    for i in 0..<arr.count - 1 {\n \
    \       if arr[i] >= arr[i + 1] {\n            maxIndex = i\n        }\n    }\n\
    \    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp2b9_bhgs/tmp2b9_bhgs.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9ca4384c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9ca407bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9ca407b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9ca407a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2b9_bhgs                        0x000056412df75552 <unavailable> + 5458

    5    libc.so.6                          0x00002b9ca4570460 __libc_start_main +
    245

    6    tmp2b9_bhgs                        0x000056412df751a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824339
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var max = 0\n    var maxIndex = -1\n    for i in 0..<arr.count\
    \ {\n        if arr[i] > max {\n            max = arr[i]\n            maxIndex\
    \ = i\n        }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpgo48kkzg/tmpgo48kkzg.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aeb940f4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aeb93debb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aeb93deb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aeb93dea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgo48kkzg                        0x0000555837bef552 <unavailable> + 5458

    5    libc.so.6                          0x00002aeb942e0460 __libc_start_main +
    245

    6    tmpgo48kkzg                        0x0000555837bef1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824339
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var index = -1\n    for i in 0..<arr.count - 1 {\n    \
    \    if arr[i] >= arr[i + 1] {\n            index = i\n        }\n    }\n    return\
    \ index\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(can_arrange(arr: [1, 2,\
    \ 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmps0cxtrj2/tmps0cxtrj2.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adf7946ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adf79165b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adf79165988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adf791647b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmps0cxtrj2                        0x000055844c69c552 <unavailable> + 5458

    5    libc.so.6                          0x00002adf7965a460 __libc_start_main +
    245

    6    tmps0cxtrj2                        0x000055844c69c1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824339
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var index = -1\n    for i in 0..<arr.count - 1 {\n    \
    \    if arr[i] >= arr[i + 1] {\n            index = i\n        }\n    }\n    return\
    \ index\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(can_arrange(arr: [1, 2,\
    \ 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmps0cxtrj2/tmps0cxtrj2.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adf7946ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adf79165b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adf79165988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adf791647b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmps0cxtrj2                        0x000055844c69c552 <unavailable> + 5458

    5    libc.so.6                          0x00002adf7965a460 __libc_start_main +
    245

    6    tmps0cxtrj2                        0x000055844c69c1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824339
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = -1\n    var maxValue = arr[0]\n    for i\
    \ in 1..<arr.count {\n        if arr[i] > maxValue {\n            maxIndex = i\n\
    \            maxValue = arr[i]\n        }\n    }\n    return maxIndex\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpi74aanc2/tmpi74aanc2.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9584fbbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9584cb2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9584cb2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9584cb17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpi74aanc2                        0x000055e3d1ca7552 <unavailable> + 5458

    5    libc.so.6                          0x00002b95851a7460 __libc_start_main +
    245

    6    tmpi74aanc2                        0x000055e3d1ca71a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824339
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var max = arr[0]\n    var index = -1\n    for i in 1..<arr.count\
    \ {\n        if arr[i] > max {\n            max = arr[i]\n            index =\
    \ i\n        }\n    }\n    return index\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2,\
    \ 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\
    assert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr: [] as\
    \ [Int]) == -1)"
  status: Exception
  stderr: 'tmpk833zjm0/tmpk833zjm0.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afcf2117c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afcf1e0eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afcf1e0e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afcf1e0d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpk833zjm0                        0x000055b5a6836552 <unavailable> + 5458

    5    libc.so.6                          0x00002afcf2303460 __libc_start_main +
    245

    6    tmpk833zjm0                        0x000055b5a68361a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824339
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = -1\n    for i in 0..<arr.count - 1 {\n \
    \       if arr[i] <= arr[i + 1] {\n            maxIndex = i + 1\n        }\n \
    \   }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmprej94dad/tmprej94dad.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abf32c17c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abf3290eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abf3290e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abf3290d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprej94dad                        0x0000556fa741f552 <unavailable> + 5458

    5    libc.so.6                          0x00002abf32e03460 __libc_start_main +
    245

    6    tmprej94dad                        0x0000556fa741f1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824339
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var max = -1\n    var maxIndex = -1\n    for i in 0..<arr.count\
    \ {\n        if arr[i] > max {\n            max = arr[i]\n            maxIndex\
    \ = i\n        }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpdu_kc3z5/tmpdu_kc3z5.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8a35b12c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8a35809b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8a35809988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8a358087b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdu_kc3z5                        0x000055ff29872552 <unavailable> + 5458

    5    libc.so.6                          0x00002b8a35cfe460 __libc_start_main +
    245

    6    tmpdu_kc3z5                        0x000055ff298721a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824339
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var max = arr[0]\n    var maxIndex = 0\n    for i in 1..<arr.count\
    \ {\n        if arr[i] > max {\n            max = arr[i]\n            maxIndex\
    \ = i\n        }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp12hpug9a/tmp12hpug9a.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acd64b0ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acd64801b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acd64801988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acd648007b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp12hpug9a                        0x000055f52efe2552 <unavailable> + 5458

    5    libc.so.6                          0x00002acd64cf6460 __libc_start_main +
    245

    6    tmp12hpug9a                        0x000055f52efe21a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824339
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var max = -1\n    var maxIndex = -1\n    for i in 0..<arr.count\
    \ - 1 {\n        if arr[i] > max && arr[i] < arr[i + 1] {\n            max = arr[i]\n\
    \            maxIndex = i\n        }\n    }\n    return maxIndex\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmproxsx0wb/tmproxsx0wb.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b297a9d8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b297a6cfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b297a6cf988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b297a6ce7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmproxsx0wb                        0x000055bb66f3e61f <unavailable> + 5663

    5    libc.so.6                          0x00002b297abc4460 __libc_start_main +
    245

    6    tmproxsx0wb                        0x000055bb66f3e1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824339
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var max = -1\n    for i in 0..<arr.count-1 {\n        if\
    \ arr[i] <= arr[i+1] {\n            max = i\n        }\n    }\n    return max\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp8v7x50kh/tmp8v7x50kh.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b523c051c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b523bd48b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b523bd48988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b523bd477b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8v7x50kh                        0x000055decdf2061f <unavailable> + 5663

    5    libc.so.6                          0x00002b523c23d460 __libc_start_main +
    245

    6    tmp8v7x50kh                        0x000055decdf201a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824339
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var result = -1\n    for i in 1..<arr.count {\n       \
    \ if arr[i] < arr[i - 1] {\n            result = i - 1\n            break\n  \
    \      }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2,\
    \ 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\
    assert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr: [] as\
    \ [Int]) == -1)"
  status: Exception
  stderr: 'tmpghjismmf/tmpghjismmf.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1a6874ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1a68445b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1a68445988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1a684447b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpghjismmf                        0x0000559fd322c552 <unavailable> + 5458

    5    libc.so.6                          0x00002b1a6893a460 __libc_start_main +
    245

    6    tmpghjismmf                        0x0000559fd322c1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824339
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var result = -1\n    for i in 0..<arr.count - 1 {\n   \
    \     if arr[i] >= arr[i + 1] {\n            result = i\n        }\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr: [1,\
    \ 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpvbgy7251/tmpvbgy7251.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afa195d2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afa192c9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afa192c9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afa192c87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvbgy7251                        0x0000560972d87552 <unavailable> + 5458

    5    libc.so.6                          0x00002afa197be460 __libc_start_main +
    245

    6    tmpvbgy7251                        0x0000560972d871a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824339
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var result = -1\n    for i in 0..<arr.count - 1 {\n   \
    \     if arr[i] >= arr[i + 1] {\n            result = i\n        }\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr: [1,\
    \ 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpvbgy7251/tmpvbgy7251.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afa195d2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afa192c9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afa192c9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afa192c87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvbgy7251                        0x0000560972d87552 <unavailable> + 5458

    5    libc.so.6                          0x00002afa197be460 __libc_start_main +
    245

    6    tmpvbgy7251                        0x0000560972d871a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824339
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var max = arr[0]\n    var maxIndex = 0\n    for i in 1..<arr.count\
    \ {\n        if arr[i] > max {\n            max = arr[i]\n            maxIndex\
    \ = i\n        }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp12hpug9a/tmp12hpug9a.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acd64b0ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acd64801b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acd64801988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acd648007b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp12hpug9a                        0x000055f52efe2552 <unavailable> + 5458

    5    libc.so.6                          0x00002acd64cf6460 __libc_start_main +
    245

    6    tmp12hpug9a                        0x000055f52efe21a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824339
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var max = arr[0]\n    var maxIndex = 0\n    for (index,\
    \ value) in arr.enumerated() {\n        if value > max {\n            max = value\n\
    \            maxIndex = index\n        }\n    }\n    return maxIndex\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp_53k2_l6/tmp_53k2_l6.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad45a4e4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad45a1dbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad45a1db988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad45a1da7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_53k2_l6                        0x0000560014add582 <unavailable> + 5506

    5    libc.so.6                          0x00002ad45a6d0460 __libc_start_main +
    245

    6    tmp_53k2_l6                        0x0000560014add1d9 <unavailable> + 4569

    '
  stdout: ''
  timestamp: 1659824339
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var index = -1\n    for i in 0..<arr.count - 1 {\n    \
    \    if arr[i] >= arr[i + 1] {\n            index = i\n        }\n    }\n    return\
    \ index\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(can_arrange(arr: [1, 2,\
    \ 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmps0cxtrj2/tmps0cxtrj2.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adf7946ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adf79165b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adf79165988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adf791647b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmps0cxtrj2                        0x000055844c69c552 <unavailable> + 5458

    5    libc.so.6                          0x00002adf7965a460 __libc_start_main +
    245

    6    tmps0cxtrj2                        0x000055844c69c1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824339
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = -1\n    var maxValue = arr[0]\n    for i\
    \ in 1..<arr.count {\n        if arr[i] > maxValue {\n            maxIndex = i\n\
    \            maxValue = arr[i]\n        }\n    }\n    return maxIndex\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpi74aanc2/tmpi74aanc2.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9584fbbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9584cb2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9584cb2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9584cb17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpi74aanc2                        0x000055e3d1ca7552 <unavailable> + 5458

    5    libc.so.6                          0x00002b95851a7460 __libc_start_main +
    245

    6    tmpi74aanc2                        0x000055e3d1ca71a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824339
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var max = -1\n    for i in 0..<arr.count - 1 {\n      \
    \  if arr[i] >= arr[i + 1] {\n            max = i\n        }\n    }\n    return\
    \ max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(can_arrange(arr: [1, 2,\
    \ 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpif_64jmd/tmpif_64jmd.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5e91c66c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5e9195db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5e9195d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5e9195c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpif_64jmd                        0x000055ae68b46552 <unavailable> + 5458

    5    libc.so.6                          0x00002b5e91e52460 __libc_start_main +
    245

    6    tmpif_64jmd                        0x000055ae68b461a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824339
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = -1\n    for i in 0..<arr.count - 1 {\n \
    \       if arr[i] >= arr[i + 1] {\n            maxIndex = i\n        }\n    }\n\
    \    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp2b9_bhgs/tmp2b9_bhgs.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9ca4384c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9ca407bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9ca407b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9ca407a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2b9_bhgs                        0x000056412df75552 <unavailable> + 5458

    5    libc.so.6                          0x00002b9ca4570460 __libc_start_main +
    245

    6    tmp2b9_bhgs                        0x000056412df751a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824339
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = -1\n    for i in 1..<arr.count {\n     \
    \   if arr[i] <= arr[i - 1] {\n            maxIndex = i\n        }\n    }\n  \
    \  return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr: [1,\
    \ 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'Swift/Range.swift:743: Fatal error: Range requires lowerBound <= upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002abd7da5bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abd7d752561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002abd7d752286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002abd7d75213c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002abd7d751bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmp3i_hfykn                        0x0000564da412c9c2 <unavailable> + 6594

    6    tmp3i_hfykn                        0x0000564da412c81c <unavailable> + 6172

    7    libc.so.6                          0x00002abd7dc47460 __libc_start_main +
    245

    8    tmp3i_hfykn                        0x0000564da412c1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824339
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = -1\n    for i in 1..<arr.count {\n     \
    \   if arr[i] >= arr[i - 1] {\n            maxIndex = i\n        }\n    }\n  \
    \  return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr: [1,\
    \ 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpzhaas1pp/tmpzhaas1pp.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6f46938c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6f4662fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6f4662f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6f4662e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzhaas1pp                        0x000055c2ccc04552 <unavailable> + 5458

    5    libc.so.6                          0x00002b6f46b24460 __libc_start_main +
    245

    6    tmpzhaas1pp                        0x000055c2ccc041a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824339
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var max = -1\n    for i in 0..<arr.count - 1 {\n      \
    \  if arr[i] >= arr[i + 1] {\n            max = i\n        }\n    }\n    return\
    \ max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(can_arrange(arr: [1, 2,\
    \ 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpif_64jmd/tmpif_64jmd.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5e91c66c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5e9195db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5e9195d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5e9195c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpif_64jmd                        0x000055ae68b46552 <unavailable> + 5458

    5    libc.so.6                          0x00002b5e91e52460 __libc_start_main +
    245

    6    tmpif_64jmd                        0x000055ae68b461a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824339
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var max = -1\n    for i in 0..<arr.count - 1 {\n      \
    \  if arr[i] >= arr[i + 1] {\n            max = i\n        }\n    }\n    return\
    \ max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(can_arrange(arr: [1, 2,\
    \ 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpif_64jmd/tmpif_64jmd.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5e91c66c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5e9195db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5e9195d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5e9195c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpif_64jmd                        0x000055ae68b46552 <unavailable> + 5458

    5    libc.so.6                          0x00002b5e91e52460 __libc_start_main +
    245

    6    tmpif_64jmd                        0x000055ae68b461a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824339
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var index = -1\n    for i in 0..<arr.count - 1 {\n    \
    \    if arr[i] > arr[i + 1] {\n            index = i\n        }\n    }\n    return\
    \ index\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(can_arrange(arr: [1, 2,\
    \ 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpkum5y97k/tmpkum5y97k.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b64c9592c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b64c9289b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b64c9289988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b64c92887b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkum5y97k                        0x0000561bc6e6e552 <unavailable> + 5458

    5    libc.so.6                          0x00002b64c977e460 __libc_start_main +
    245

    6    tmpkum5y97k                        0x0000561bc6e6e1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824339
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var max = arr[0]\n    var maxIndex = 0\n    for i in 1..<arr.count\
    \ {\n        if arr[i] > max {\n            max = arr[i]\n            maxIndex\
    \ = i\n        }\n    }\n    for i in 0..<arr.count {\n        if arr[i] == max\
    \ {\n            return i\n        }\n    }\n    return -1\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp1trp5io_/tmp1trp5io_.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af1b9303c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af1b8ffab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af1b8ffa988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af1b8ff97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1trp5io_                        0x0000561fe0fad552 <unavailable> + 5458

    5    libc.so.6                          0x00002af1b94ef460 __libc_start_main +
    245

    6    tmp1trp5io_                        0x0000561fe0fad1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824339
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var max = arr[0]\n    var maxIndex = 0\n    for i in 1..<arr.count\
    \ {\n        if arr[i] > max {\n            max = arr[i]\n            maxIndex\
    \ = i\n        }\n    }\n    for i in 0..<arr.count {\n        if arr[i] == max\
    \ {\n            return i\n        }\n    }\n    return -1\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp1trp5io_/tmp1trp5io_.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af1b9303c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af1b8ffab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af1b8ffa988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af1b8ff97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1trp5io_                        0x0000561fe0fad552 <unavailable> + 5458

    5    libc.so.6                          0x00002af1b94ef460 __libc_start_main +
    245

    6    tmp1trp5io_                        0x0000561fe0fad1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824339
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var max_index = -1\n    var max_value = Int.min\n    for\
    \ i in 0..<arr.count {\n        if arr[i] > max_value {\n            max_value\
    \ = arr[i]\n            max_index = i\n        }\n    }\n    return max_index\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpc2e85ty2/tmpc2e85ty2.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b52eb63ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b52eb335b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b52eb335988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b52eb3347b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpc2e85ty2                        0x00005647b02da552 <unavailable> + 5458

    5    libc.so.6                          0x00002b52eb82a460 __libc_start_main +
    245

    6    tmpc2e85ty2                        0x00005647b02da1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824339
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var max = arr[0]\n    var maxIndex = 0\n    for i in 1..<arr.count\
    \ {\n        if arr[i] > max {\n            max = arr[i]\n            maxIndex\
    \ = i\n        }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp12hpug9a/tmp12hpug9a.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acd64b0ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acd64801b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acd64801988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acd648007b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp12hpug9a                        0x000055f52efe2552 <unavailable> + 5458

    5    libc.so.6                          0x00002acd64cf6460 __libc_start_main +
    245

    6    tmp12hpug9a                        0x000055f52efe21a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824339
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var max = -1\n    for i in 0..<arr.count - 1 {\n      \
    \  if arr[i] <= arr[i + 1] {\n            max = i\n        }\n    }\n    return\
    \ max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(can_arrange(arr: [1, 2,\
    \ 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp0btx91e0/tmp0btx91e0.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae83db74c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae83d86bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae83d86b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae83d86a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0btx91e0                        0x0000555e572f261f <unavailable> + 5663

    5    libc.so.6                          0x00002ae83dd60460 __libc_start_main +
    245

    6    tmp0btx91e0                        0x0000555e572f21a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824339
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var max = arr[0]\n    var maxIndex = 0\n    for i in 1..<arr.count\
    \ {\n        if arr[i] > max {\n            max = arr[i]\n            maxIndex\
    \ = i\n        }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp12hpug9a/tmp12hpug9a.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acd64b0ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acd64801b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acd64801988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acd648007b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp12hpug9a                        0x000055f52efe2552 <unavailable> + 5458

    5    libc.so.6                          0x00002acd64cf6460 __libc_start_main +
    245

    6    tmp12hpug9a                        0x000055f52efe21a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824339
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var max = -1\n    for i in 0..<arr.count - 1 {\n      \
    \  if arr[i] >= arr[i + 1] {\n            max = i\n        }\n    }\n    return\
    \ max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(can_arrange(arr: [1, 2,\
    \ 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpif_64jmd/tmpif_64jmd.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5e91c66c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5e9195db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5e9195d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5e9195c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpif_64jmd                        0x000055ae68b46552 <unavailable> + 5458

    5    libc.so.6                          0x00002b5e91e52460 __libc_start_main +
    245

    6    tmpif_64jmd                        0x000055ae68b461a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824339
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var max = arr[0]\n    var maxIndex = 0\n    for i in 1..<arr.count\
    \ {\n        if arr[i] > max {\n            max = arr[i]\n            maxIndex\
    \ = i\n        }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp12hpug9a/tmp12hpug9a.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acd64b0ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acd64801b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acd64801988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acd648007b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp12hpug9a                        0x000055f52efe2552 <unavailable> + 5458

    5    libc.so.6                          0x00002acd64cf6460 __libc_start_main +
    245

    6    tmp12hpug9a                        0x000055f52efe21a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824339
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var max = -1\n    var maxIndex = -1\n    for i in 0..<arr.count\
    \ {\n        if arr[i] > max {\n            max = arr[i]\n            maxIndex\
    \ = i\n        }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpdu_kc3z5/tmpdu_kc3z5.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8a35b12c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8a35809b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8a35809988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8a358087b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdu_kc3z5                        0x000055ff29872552 <unavailable> + 5458

    5    libc.so.6                          0x00002b8a35cfe460 __libc_start_main +
    245

    6    tmpdu_kc3z5                        0x000055ff298721a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824339
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var max = arr[0]\n    var maxIndex = 0\n    for i in 1..<arr.count\
    \ {\n        if arr[i] > max {\n            max = arr[i]\n            maxIndex\
    \ = i\n        }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp12hpug9a/tmp12hpug9a.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acd64b0ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acd64801b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acd64801988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acd648007b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp12hpug9a                        0x000055f52efe2552 <unavailable> + 5458

    5    libc.so.6                          0x00002acd64cf6460 __libc_start_main +
    245

    6    tmp12hpug9a                        0x000055f52efe21a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824339
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var max = arr[0]\n    var maxIndex = 0\n    for i in 1..<arr.count\
    \ {\n        if arr[i] > max {\n            max = arr[i]\n            maxIndex\
    \ = i\n        }\n    }\n    if maxIndex == arr.count - 1 {\n        return -1\n\
    \    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpe4th2eus/tmpe4th2eus.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8d60a7bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8d60772b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8d60772988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8d607717b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpe4th2eus                        0x000055805e431552 <unavailable> + 5458

    5    libc.so.6                          0x00002b8d60c67460 __libc_start_main +
    245

    6    tmpe4th2eus                        0x000055805e4311a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824339
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = -1\n    for i in 0..<arr.count - 1 {\n \
    \       if arr[i] >= arr[i + 1] {\n            continue\n        }\n        maxIndex\
    \ = i + 1\n    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2,\
    \ 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\
    assert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr: [] as\
    \ [Int]) == -1)"
  status: Exception
  stderr: 'tmp2p83jgz7/tmp2p83jgz7.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5da7065c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5da6d5cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5da6d5c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5da6d5b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2p83jgz7                        0x0000563a7c2a6552 <unavailable> + 5458

    5    libc.so.6                          0x00002b5da7251460 __libc_start_main +
    245

    6    tmp2p83jgz7                        0x0000563a7c2a61a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824339
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var max = -1\n    for i in 0..<arr.count - 1 {\n      \
    \  if arr[i] >= arr[i + 1] {\n            max = i\n        }\n    }\n    return\
    \ max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(can_arrange(arr: [1, 2,\
    \ 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpif_64jmd/tmpif_64jmd.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5e91c66c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5e9195db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5e9195d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5e9195c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpif_64jmd                        0x000055ae68b46552 <unavailable> + 5458

    5    libc.so.6                          0x00002b5e91e52460 __libc_start_main +
    245

    6    tmpif_64jmd                        0x000055ae68b461a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824339
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = -1\n    var maxValue = -1\n    for i in\
    \ 0..<arr.count {\n        if arr[i] > maxValue {\n            maxValue = arr[i]\n\
    \            maxIndex = i\n        }\n    }\n    return maxIndex\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpwe8ffplp/tmpwe8ffplp.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8215ba3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b821589ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b821589a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b82158997b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwe8ffplp                        0x00005559c3075552 <unavailable> + 5458

    5    libc.so.6                          0x00002b8215d8f460 __libc_start_main +
    245

    6    tmpwe8ffplp                        0x00005559c30751a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824339
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var largestIndex = -1\n    for i in 0..<arr.count - 1 {\n\
    \        if arr[i] >= arr[i + 1] {\n            largestIndex = i\n        }\n\
    \    }\n    return largestIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpaf8x3328/tmpaf8x3328.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b001463dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0014334b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0014334988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b00143337b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpaf8x3328                        0x00005628f65aa552 <unavailable> + 5458

    5    libc.so.6                          0x00002b0014829460 __libc_start_main +
    245

    6    tmpaf8x3328                        0x00005628f65aa1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824339
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = -1\n    for i in 1..<arr.count {\n     \
    \   if arr[i] <= arr[i - 1] {\n            maxIndex = i\n        }\n    }\n  \
    \  return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr: [1,\
    \ 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'Swift/Range.swift:743: Fatal error: Range requires lowerBound <= upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002abd7da5bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abd7d752561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002abd7d752286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002abd7d75213c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002abd7d751bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmp3i_hfykn                        0x0000564da412c9c2 <unavailable> + 6594

    6    tmp3i_hfykn                        0x0000564da412c81c <unavailable> + 6172

    7    libc.so.6                          0x00002abd7dc47460 __libc_start_main +
    245

    8    tmp3i_hfykn                        0x0000564da412c1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824339
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var max = arr[0]\n    var maxIndex = 0\n    for i in 1..<arr.count\
    \ {\n        if arr[i] > max {\n            max = arr[i]\n            maxIndex\
    \ = i\n        }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp12hpug9a/tmp12hpug9a.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acd64b0ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acd64801b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acd64801988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acd648007b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp12hpug9a                        0x000055f52efe2552 <unavailable> + 5458

    5    libc.so.6                          0x00002acd64cf6460 __libc_start_main +
    245

    6    tmp12hpug9a                        0x000055f52efe21a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824339
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var max = 0\n    var result = -1\n    for i in 0..<arr.count\
    \ {\n        if arr[i] > max {\n            max = arr[i]\n            result =\
    \ i\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2,\
    \ 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\
    assert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr: [] as\
    \ [Int]) == -1)"
  status: Exception
  stderr: 'tmp4drnjuk8/tmp4drnjuk8.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad86c29cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad86bf93b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad86bf93988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad86bf927b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4drnjuk8                        0x000055a190e63552 <unavailable> + 5458

    5    libc.so.6                          0x00002ad86c488460 __libc_start_main +
    245

    6    tmp4drnjuk8                        0x000055a190e631a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824339
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var max = -1\n    var maxIndex = -1\n    for i in 0..<arr.count\
    \ {\n        if arr[i] > max {\n            max = arr[i]\n            maxIndex\
    \ = i\n        }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpdu_kc3z5/tmpdu_kc3z5.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8a35b12c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8a35809b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8a35809988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8a358087b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdu_kc3z5                        0x000055ff29872552 <unavailable> + 5458

    5    libc.so.6                          0x00002b8a35cfe460 __libc_start_main +
    245

    6    tmpdu_kc3z5                        0x000055ff298721a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824339
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var max_index = -1\n    var max_value = arr[0]\n    for\
    \ i in 1..<arr.count {\n        if arr[i] <= max_value {\n            max_index\
    \ = i\n            max_value = arr[i]\n        }\n    }\n    return max_index\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmppwrdxcys/tmppwrdxcys.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b526c9b6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b526c6adb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b526c6ad988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b526c6ac7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppwrdxcys                        0x000055fd3162b552 <unavailable> + 5458

    5    libc.so.6                          0x00002b526cba2460 __libc_start_main +
    245

    6    tmppwrdxcys                        0x000055fd3162b1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824339
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = -1\n    var maxValue = arr[0]\n    for i\
    \ in 1..<arr.count {\n        if arr[i] > maxValue {\n            maxIndex = i\n\
    \            maxValue = arr[i]\n        }\n    }\n    return maxIndex\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpi74aanc2/tmpi74aanc2.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9584fbbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9584cb2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9584cb2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9584cb17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpi74aanc2                        0x000055e3d1ca7552 <unavailable> + 5458

    5    libc.so.6                          0x00002b95851a7460 __libc_start_main +
    245

    6    tmpi74aanc2                        0x000055e3d1ca71a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824339
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = -1\n    for i in 0..<arr.count - 1 {\n \
    \       if arr[i] >= arr[i + 1] {\n            maxIndex = i\n        }\n    }\n\
    \    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp2b9_bhgs/tmp2b9_bhgs.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9ca4384c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9ca407bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9ca407b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9ca407a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2b9_bhgs                        0x000056412df75552 <unavailable> + 5458

    5    libc.so.6                          0x00002b9ca4570460 __libc_start_main +
    245

    6    tmp2b9_bhgs                        0x000056412df751a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824339
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var max = -1\n    for i in 0..<arr.count - 1 {\n      \
    \  if arr[i] >= arr[i + 1] {\n            max = i\n        }\n    }\n    return\
    \ max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(can_arrange(arr: [1, 2,\
    \ 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpif_64jmd/tmpif_64jmd.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5e91c66c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5e9195db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5e9195d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5e9195c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpif_64jmd                        0x000055ae68b46552 <unavailable> + 5458

    5    libc.so.6                          0x00002b5e91e52460 __libc_start_main +
    245

    6    tmpif_64jmd                        0x000055ae68b461a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824339
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = -1\n    for i in 0..<arr.count - 1 {\n \
    \       if arr[i] >= arr[i + 1] {\n            maxIndex = i\n        }\n    }\n\
    \    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp2b9_bhgs/tmp2b9_bhgs.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9ca4384c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9ca407bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9ca407b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9ca407a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2b9_bhgs                        0x000056412df75552 <unavailable> + 5458

    5    libc.so.6                          0x00002b9ca4570460 __libc_start_main +
    245

    6    tmp2b9_bhgs                        0x000056412df751a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824339
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = -1\n    for i in 0..<arr.count - 1 {\n \
    \       if arr[i] <= arr[i + 1] {\n            maxIndex = i + 1\n        }\n \
    \   }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmprej94dad/tmprej94dad.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abf32c17c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abf3290eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abf3290e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abf3290d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprej94dad                        0x0000556fa741f552 <unavailable> + 5458

    5    libc.so.6                          0x00002abf32e03460 __libc_start_main +
    245

    6    tmprej94dad                        0x0000556fa741f1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824339
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = -1\n    for i in 0..<arr.count - 1 {\n \
    \       if arr[i] <= arr[i + 1] {\n            maxIndex = i + 1\n        }\n \
    \   }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmprej94dad/tmprej94dad.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abf32c17c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abf3290eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abf3290e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abf3290d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprej94dad                        0x0000556fa741f552 <unavailable> + 5458

    5    libc.so.6                          0x00002abf32e03460 __libc_start_main +
    245

    6    tmprej94dad                        0x0000556fa741f1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824339
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var result = -1\n    for i in 0..<arr.count - 1 {\n   \
    \     if arr[i] >= arr[i + 1] {\n            result = i\n        }\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr: [1,\
    \ 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpvbgy7251/tmpvbgy7251.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afa195d2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afa192c9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afa192c9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afa192c87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvbgy7251                        0x0000560972d87552 <unavailable> + 5458

    5    libc.so.6                          0x00002afa197be460 __libc_start_main +
    245

    6    tmpvbgy7251                        0x0000560972d871a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824339
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = -1\n    for i in 0..<arr.count - 1 {\n \
    \       if arr[i] >= arr[i + 1] {\n            maxIndex = i\n        }\n    }\n\
    \    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp2b9_bhgs/tmp2b9_bhgs.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9ca4384c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9ca407bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9ca407b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9ca407a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2b9_bhgs                        0x000056412df75552 <unavailable> + 5458

    5    libc.so.6                          0x00002b9ca4570460 __libc_start_main +
    245

    6    tmp2b9_bhgs                        0x000056412df751a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824339
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = -1\n    var maxValue = -1\n    for i in\
    \ 0..<arr.count {\n        if arr[i] > maxValue {\n            maxValue = arr[i]\n\
    \            maxIndex = i\n        }\n    }\n    return maxIndex\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpwe8ffplp/tmpwe8ffplp.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8215ba3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b821589ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b821589a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b82158997b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwe8ffplp                        0x00005559c3075552 <unavailable> + 5458

    5    libc.so.6                          0x00002b8215d8f460 __libc_start_main +
    245

    6    tmpwe8ffplp                        0x00005559c30751a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824339
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var max = -1\n    for i in 0..<arr.count - 1 {\n      \
    \  if arr[i] > arr[i + 1] {\n            max = i\n        }\n    }\n    return\
    \ max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(can_arrange(arr: [1, 2,\
    \ 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpk3xrq5op/tmpk3xrq5op.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8293f8dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8293c84b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8293c84988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8293c837b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpk3xrq5op                        0x000055b6a81ad552 <unavailable> + 5458

    5    libc.so.6                          0x00002b8294179460 __libc_start_main +
    245

    6    tmpk3xrq5op                        0x000055b6a81ad1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824339
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = -1\n    for i in 0..<arr.count-1 {\n   \
    \     if arr[i] >= arr[i+1] {\n            maxIndex = i\n        }\n    }\n  \
    \  return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr: [1,\
    \ 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmprn9mv5dj/tmprn9mv5dj.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5901cc0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b59019b7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b59019b7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b59019b67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprn9mv5dj                        0x000055b3380fe552 <unavailable> + 5458

    5    libc.so.6                          0x00002b5901eac460 __libc_start_main +
    245

    6    tmprn9mv5dj                        0x000055b3380fe1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824339
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var max = -1\n    for i in 0..<arr.count - 1 {\n      \
    \  if arr[i] >= arr[i + 1] {\n            max = i\n        }\n    }\n    return\
    \ max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(can_arrange(arr: [1, 2,\
    \ 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpif_64jmd/tmpif_64jmd.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5e91c66c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5e9195db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5e9195d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5e9195c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpif_64jmd                        0x000055ae68b46552 <unavailable> + 5458

    5    libc.so.6                          0x00002b5e91e52460 __libc_start_main +
    245

    6    tmpif_64jmd                        0x000055ae68b461a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824339
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var max = -1\n    for i in 0..<arr.count - 1 {\n      \
    \  if arr[i] >= arr[i + 1] {\n            max = i\n        }\n    }\n    return\
    \ max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(can_arrange(arr: [1, 2,\
    \ 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpif_64jmd/tmpif_64jmd.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5e91c66c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5e9195db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5e9195d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5e9195c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpif_64jmd                        0x000055ae68b46552 <unavailable> + 5458

    5    libc.so.6                          0x00002b5e91e52460 __libc_start_main +
    245

    6    tmpif_64jmd                        0x000055ae68b461a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824339
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var max = arr[0]\n    var maxIndex = 0\n    for i in 1..<arr.count\
    \ {\n        if arr[i] > max {\n            max = arr[i]\n            maxIndex\
    \ = i\n        }\n    }\n    for i in 0..<arr.count {\n        if arr[i] == max\
    \ {\n            if i == arr.count - 1 {\n                return -1\n        \
    \    }\n            if arr[i + 1] < max {\n                return i\n        \
    \    }\n        }\n    }\n    return -1\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2,\
    \ 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\
    assert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr: [] as\
    \ [Int]) == -1)"
  status: Exception
  stderr: 'tmpubjmzcdr/tmpubjmzcdr.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abf078e0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abf075d7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abf075d7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abf075d67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpubjmzcdr                        0x0000560dc9bbf552 <unavailable> + 5458

    5    libc.so.6                          0x00002abf07acc460 __libc_start_main +
    245

    6    tmpubjmzcdr                        0x0000560dc9bbf1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824339
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var max = arr[0]\n    var maxIndex = 0\n    for i in 1..<arr.count\
    \ {\n        if arr[i] > max {\n            max = arr[i]\n            maxIndex\
    \ = i\n        }\n    }\n    for i in 0..<arr.count {\n        if arr[i] == max\
    \ {\n            return i\n        }\n    }\n    return -1\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp1trp5io_/tmp1trp5io_.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af1b9303c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af1b8ffab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af1b8ffa988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af1b8ff97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1trp5io_                        0x0000561fe0fad552 <unavailable> + 5458

    5    libc.so.6                          0x00002af1b94ef460 __libc_start_main +
    245

    6    tmp1trp5io_                        0x0000561fe0fad1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824339
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var max = 0\n    var maxIndex = -1\n    for i in 0..<arr.count\
    \ - 1 {\n        if arr[i] < arr[i + 1] && arr[i + 1] > max {\n            max\
    \ = arr[i + 1]\n            maxIndex = i + 1\n        }\n    }\n    return maxIndex\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpa1graj7i/tmpa1graj7i.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b92d7136c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b92d6e2db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b92d6e2d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b92d6e2c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpa1graj7i                        0x000055f285752552 <unavailable> + 5458

    5    libc.so.6                          0x00002b92d7322460 __libc_start_main +
    245

    6    tmpa1graj7i                        0x000055f2857521a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824339
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = -1\n    var maxValue = Int.min\n    for\
    \ i in 0..<arr.count {\n        if arr[i] > maxValue {\n            maxValue =\
    \ arr[i]\n            maxIndex = i\n        }\n    }\n    return maxIndex\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpmhek6bu7/tmpmhek6bu7.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0b37b59c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0b37850b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0b37850988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0b3784f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmhek6bu7                        0x000056365183e552 <unavailable> + 5458

    5    libc.so.6                          0x00002b0b37d45460 __libc_start_main +
    245

    6    tmpmhek6bu7                        0x000056365183e1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824339
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var max = arr[0]\n    var index = -1\n    for i in 1..<arr.count\
    \ {\n        if arr[i] <= max {\n            max = arr[i]\n            index =\
    \ i\n        }\n    }\n    return index\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2,\
    \ 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\
    assert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr: [] as\
    \ [Int]) == -1)"
  status: Exception
  stderr: 'tmpnibd_dfd/tmpnibd_dfd.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afb4ee62c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afb4eb59b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afb4eb59988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afb4eb587b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnibd_dfd                        0x000055674e4c4552 <unavailable> + 5458

    5    libc.so.6                          0x00002afb4f04e460 __libc_start_main +
    245

    6    tmpnibd_dfd                        0x000055674e4c41a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824339
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var max = arr[0]\n    var maxIndex = 0\n    for i in 1..<arr.count\
    \ {\n        if arr[i] > max {\n            max = arr[i]\n            maxIndex\
    \ = i\n        }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp12hpug9a/tmp12hpug9a.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acd64b0ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acd64801b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acd64801988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acd648007b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp12hpug9a                        0x000055f52efe2552 <unavailable> + 5458

    5    libc.so.6                          0x00002acd64cf6460 __libc_start_main +
    245

    6    tmp12hpug9a                        0x000055f52efe21a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824339
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var max = -1\n    for i in 0..<arr.count - 1 {\n      \
    \  if arr[i] >= arr[i + 1] {\n            max = i\n        }\n    }\n    return\
    \ max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(can_arrange(arr: [1, 2,\
    \ 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpif_64jmd/tmpif_64jmd.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5e91c66c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5e9195db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5e9195d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5e9195c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpif_64jmd                        0x000055ae68b46552 <unavailable> + 5458

    5    libc.so.6                          0x00002b5e91e52460 __libc_start_main +
    245

    6    tmpif_64jmd                        0x000055ae68b461a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824339
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var largest = -1\n    for i in 0..<arr.count - 1 {\n  \
    \      if arr[i] <= arr[i + 1] {\n            largest = i\n        }\n    }\n\
    \    return largest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr: [1,\
    \ 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp_boktx5e/tmp_boktx5e.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac735e64c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac735b5bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac735b5b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac735b5a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_boktx5e                        0x0000560b89b2061f <unavailable> + 5663

    5    libc.so.6                          0x00002ac736050460 __libc_start_main +
    245

    6    tmp_boktx5e                        0x0000560b89b201a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824339
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var max = -1\n    for i in 0..<arr.count - 1 {\n      \
    \  if arr[i] >= arr[i + 1] {\n            max = i\n        }\n    }\n    return\
    \ max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(can_arrange(arr: [1, 2,\
    \ 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpif_64jmd/tmpif_64jmd.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5e91c66c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5e9195db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5e9195d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5e9195c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpif_64jmd                        0x000055ae68b46552 <unavailable> + 5458

    5    libc.so.6                          0x00002b5e91e52460 __libc_start_main +
    245

    6    tmpif_64jmd                        0x000055ae68b461a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824339
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = -1\n    var maxValue = arr[0]\n    for i\
    \ in 1..<arr.count {\n        if arr[i] > maxValue {\n            maxIndex = i\n\
    \            maxValue = arr[i]\n        }\n    }\n    return maxIndex\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpi74aanc2/tmpi74aanc2.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9584fbbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9584cb2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9584cb2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9584cb17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpi74aanc2                        0x000055e3d1ca7552 <unavailable> + 5458

    5    libc.so.6                          0x00002b95851a7460 __libc_start_main +
    245

    6    tmpi74aanc2                        0x000055e3d1ca71a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824339
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var max = arr[0]\n    var index = -1\n    for i in 1..<arr.count\
    \ {\n        if arr[i] <= max {\n            max = arr[i]\n            index =\
    \ i\n        }\n    }\n    return index\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2,\
    \ 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\
    assert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr: [] as\
    \ [Int]) == -1)"
  status: Exception
  stderr: 'tmpnibd_dfd/tmpnibd_dfd.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afb4ee62c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afb4eb59b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afb4eb59988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afb4eb587b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnibd_dfd                        0x000055674e4c4552 <unavailable> + 5458

    5    libc.so.6                          0x00002afb4f04e460 __libc_start_main +
    245

    6    tmpnibd_dfd                        0x000055674e4c41a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824339
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var max = arr[0]\n    var maxIndex = 0\n    for i in 1..<arr.count\
    \ {\n        if arr[i] > max {\n            max = arr[i]\n            maxIndex\
    \ = i\n        }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp12hpug9a/tmp12hpug9a.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acd64b0ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acd64801b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acd64801988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acd648007b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp12hpug9a                        0x000055f52efe2552 <unavailable> + 5458

    5    libc.so.6                          0x00002acd64cf6460 __libc_start_main +
    245

    6    tmp12hpug9a                        0x000055f52efe21a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824339
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var result = -1\n    for i in 0..<arr.count-1 {\n     \
    \   if arr[i] >= arr[i+1] {\n            result = i\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(can_arrange(arr: [1,\
    \ 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpk5f14xgi/tmpk5f14xgi.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acd799bec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acd796b5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acd796b5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acd796b47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpk5f14xgi                        0x000056386b4c0552 <unavailable> + 5458

    5    libc.so.6                          0x00002acd79baa460 __libc_start_main +
    245

    6    tmpk5f14xgi                        0x000056386b4c01a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824339
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var max = arr[0]\n    var index = -1\n    for i in 1..<arr.count\
    \ {\n        if arr[i] <= max {\n            max = arr[i]\n            index =\
    \ i\n        }\n    }\n    return index\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2,\
    \ 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\
    assert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr: [] as\
    \ [Int]) == -1)"
  status: Exception
  stderr: 'tmpnibd_dfd/tmpnibd_dfd.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afb4ee62c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afb4eb59b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afb4eb59988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afb4eb587b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnibd_dfd                        0x000055674e4c4552 <unavailable> + 5458

    5    libc.so.6                          0x00002afb4f04e460 __libc_start_main +
    245

    6    tmpnibd_dfd                        0x000055674e4c41a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824339
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var max = -1\n    var maxIndex = -1\n    for i in 0..<arr.count\
    \ {\n        if arr[i] > max {\n            max = arr[i]\n            maxIndex\
    \ = i\n        }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpdu_kc3z5/tmpdu_kc3z5.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8a35b12c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8a35809b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8a35809988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8a358087b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdu_kc3z5                        0x000055ff29872552 <unavailable> + 5458

    5    libc.so.6                          0x00002b8a35cfe460 __libc_start_main +
    245

    6    tmpdu_kc3z5                        0x000055ff298721a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824339
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var max = -1\n    var maxIndex = -1\n    for i in 0..<arr.count\
    \ {\n        if arr[i] > max {\n            max = arr[i]\n            maxIndex\
    \ = i\n        }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpdu_kc3z5/tmpdu_kc3z5.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8a35b12c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8a35809b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8a35809988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8a358087b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdu_kc3z5                        0x000055ff29872552 <unavailable> + 5458

    5    libc.so.6                          0x00002b8a35cfe460 __libc_start_main +
    245

    6    tmpdu_kc3z5                        0x000055ff298721a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824339
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var max = -1\n    for i in 0..<arr.count - 1 {\n      \
    \  if arr[i] >= arr[i + 1] {\n            max = i\n        }\n    }\n    return\
    \ max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(can_arrange(arr: [1, 2,\
    \ 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpif_64jmd/tmpif_64jmd.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5e91c66c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5e9195db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5e9195d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5e9195c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpif_64jmd                        0x000055ae68b46552 <unavailable> + 5458

    5    libc.so.6                          0x00002b5e91e52460 __libc_start_main +
    245

    6    tmpif_64jmd                        0x000055ae68b461a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824339
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = -1\n    var maxValue = -1\n    for i in\
    \ 0..<arr.count {\n        if arr[i] > maxValue {\n            maxValue = arr[i]\n\
    \            maxIndex = i\n        }\n    }\n    return maxIndex\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpwe8ffplp/tmpwe8ffplp.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8215ba3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b821589ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b821589a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b82158997b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwe8ffplp                        0x00005559c3075552 <unavailable> + 5458

    5    libc.so.6                          0x00002b8215d8f460 __libc_start_main +
    245

    6    tmpwe8ffplp                        0x00005559c30751a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824339
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var index = -1\n    for i in 0..<arr.count - 1 {\n    \
    \    if arr[i] >= arr[i + 1] {\n            index = i\n        }\n    }\n    return\
    \ index\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(can_arrange(arr: [1, 2,\
    \ 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmps0cxtrj2/tmps0cxtrj2.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adf7946ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adf79165b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adf79165988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adf791647b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmps0cxtrj2                        0x000055844c69c552 <unavailable> + 5458

    5    libc.so.6                          0x00002adf7965a460 __libc_start_main +
    245

    6    tmps0cxtrj2                        0x000055844c69c1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824339
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var max = 0\n    for i in 1..<arr.count {\n        if arr[i]\
    \ < arr[i - 1] {\n            return max\n        }\n        if arr[i] > arr[max]\
    \ {\n            max = i\n        }\n    }\n    return -1\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpt4om7wqq/tmpt4om7wqq.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0fec073c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0febd6ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0febd6a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0febd697b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpt4om7wqq                        0x00005625e9135552 <unavailable> + 5458

    5    libc.so.6                          0x00002b0fec25f460 __libc_start_main +
    245

    6    tmpt4om7wqq                        0x00005625e91351a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824339
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var max = -1\n    var maxIndex = -1\n    for i in 0..<arr.count\
    \ {\n        if arr[i] > max {\n            max = arr[i]\n            maxIndex\
    \ = i\n        }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpdu_kc3z5/tmpdu_kc3z5.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8a35b12c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8a35809b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8a35809988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8a358087b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdu_kc3z5                        0x000055ff29872552 <unavailable> + 5458

    5    libc.so.6                          0x00002b8a35cfe460 __libc_start_main +
    245

    6    tmpdu_kc3z5                        0x000055ff298721a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824339
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var index = -1\n    for i in 0..<arr.count - 1 {\n    \
    \    if arr[i] >= arr[i + 1] {\n            index = i\n        }\n    }\n    return\
    \ index\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(can_arrange(arr: [1, 2,\
    \ 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmps0cxtrj2/tmps0cxtrj2.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adf7946ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adf79165b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adf79165988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adf791647b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmps0cxtrj2                        0x000055844c69c552 <unavailable> + 5458

    5    libc.so.6                          0x00002adf7965a460 __libc_start_main +
    245

    6    tmps0cxtrj2                        0x000055844c69c1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824339
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var max = 0\n    for i in 0..<arr.count {\n        if arr[i]\
    \ > arr[max] {\n            max = i\n        }\n    }\n    return max\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpy9jiugih/tmpy9jiugih.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae796625c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae79631cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae79631c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae79631b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpy9jiugih                        0x0000558bcc5de552 <unavailable> + 5458

    5    libc.so.6                          0x00002ae796811460 __libc_start_main +
    245

    6    tmpy9jiugih                        0x0000558bcc5de1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824339
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var max = arr[0]\n    var maxIndex = 0\n    for i in 1..<arr.count\
    \ {\n        if arr[i] > max {\n            max = arr[i]\n            maxIndex\
    \ = i\n        }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp12hpug9a/tmp12hpug9a.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acd64b0ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acd64801b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acd64801988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acd648007b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp12hpug9a                        0x000055f52efe2552 <unavailable> + 5458

    5    libc.so.6                          0x00002acd64cf6460 __libc_start_main +
    245

    6    tmp12hpug9a                        0x000055f52efe21a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824339
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var result = -1\n    for i in 1..<arr.count {\n       \
    \ if arr[i] < arr[i - 1] {\n            result = i - 1\n            break\n  \
    \      }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2,\
    \ 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\
    assert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr: [] as\
    \ [Int]) == -1)"
  status: Exception
  stderr: 'tmpghjismmf/tmpghjismmf.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1a6874ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1a68445b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1a68445988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1a684447b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpghjismmf                        0x0000559fd322c552 <unavailable> + 5458

    5    libc.so.6                          0x00002b1a6893a460 __libc_start_main +
    245

    6    tmpghjismmf                        0x0000559fd322c1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824339
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var max_index = -1\n    for i in 1..<arr.count {\n    \
    \    if arr[i] <= arr[i - 1] {\n            max_index = i\n        }\n    }\n\
    \    return max_index\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'Swift/Range.swift:743: Fatal error: Range requires lowerBound <= upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002ad84a7a5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad84a49c561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ad84a49c286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ad84a49c13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ad84a49bbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmp3ntlqlao                        0x000055d9c64689c2 <unavailable> + 6594

    6    tmp3ntlqlao                        0x000055d9c646881c <unavailable> + 6172

    7    libc.so.6                          0x00002ad84a991460 __libc_start_main +
    245

    8    tmp3ntlqlao                        0x000055d9c64681a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824339
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = -1\n    for i in 0..<arr.count - 1 {\n \
    \       if arr[i] >= arr[i + 1] {\n            maxIndex = i\n        }\n    }\n\
    \    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp2b9_bhgs/tmp2b9_bhgs.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9ca4384c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9ca407bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9ca407b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9ca407a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2b9_bhgs                        0x000056412df75552 <unavailable> + 5458

    5    libc.so.6                          0x00002b9ca4570460 __libc_start_main +
    245

    6    tmp2b9_bhgs                        0x000056412df751a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824339
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var max = -1\n    for i in 0..<arr.count - 1 {\n      \
    \  if arr[i] >= arr[i + 1] {\n            max = i\n        }\n    }\n    return\
    \ max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(can_arrange(arr: [1, 2,\
    \ 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpif_64jmd/tmpif_64jmd.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5e91c66c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5e9195db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5e9195d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5e9195c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpif_64jmd                        0x000055ae68b46552 <unavailable> + 5458

    5    libc.so.6                          0x00002b5e91e52460 __libc_start_main +
    245

    6    tmpif_64jmd                        0x000055ae68b461a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824339
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = -1\n    for i in 1..<arr.count {\n     \
    \   if arr[i] <= arr[i - 1] {\n            maxIndex = i\n        }\n    }\n  \
    \  return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr: [1,\
    \ 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'Swift/Range.swift:743: Fatal error: Range requires lowerBound <= upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002abd7da5bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abd7d752561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002abd7d752286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002abd7d75213c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002abd7d751bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmp3i_hfykn                        0x0000564da412c9c2 <unavailable> + 6594

    6    tmp3i_hfykn                        0x0000564da412c81c <unavailable> + 6172

    7    libc.so.6                          0x00002abd7dc47460 __libc_start_main +
    245

    8    tmp3i_hfykn                        0x0000564da412c1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824339
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var largest = -1\n    for i in 0..<arr.count - 1 {\n  \
    \      if arr[i] >= arr[i + 1] {\n            largest = i\n        }\n    }\n\
    \    return largest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr: [1,\
    \ 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmplog8icse/tmplog8icse.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae39b0d7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae39adceb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae39adce988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae39adcd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplog8icse                        0x000055be1d0a7552 <unavailable> + 5458

    5    libc.so.6                          0x00002ae39b2c3460 __libc_start_main +
    245

    6    tmplog8icse                        0x000055be1d0a71a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824339
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = -1\n    for i in 0..<arr.count - 1 {\n \
    \       if arr[i] <= arr[i + 1] {\n            maxIndex = i + 1\n        }\n \
    \   }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmprej94dad/tmprej94dad.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abf32c17c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abf3290eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abf3290e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abf3290d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprej94dad                        0x0000556fa741f552 <unavailable> + 5458

    5    libc.so.6                          0x00002abf32e03460 __libc_start_main +
    245

    6    tmprej94dad                        0x0000556fa741f1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824339
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    guard arr.count > 1 else { return -1 }\n    var maxIndex\
    \ = -1\n    for i in 1..<arr.count {\n        if arr[i] < arr[i - 1] {\n     \
    \       maxIndex = i - 1\n            break\n        }\n    }\n    return maxIndex\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp46gdzsqc/tmp46gdzsqc.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afb3524ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afb34f41b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afb34f41988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afb34f407b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp46gdzsqc                        0x000055d8ae842552 <unavailable> + 5458

    5    libc.so.6                          0x00002afb35436460 __libc_start_main +
    245

    6    tmp46gdzsqc                        0x000055d8ae8421a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824339
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var max = arr[0]\n    var maxIndex = 0\n    for i in 1..<arr.count\
    \ {\n        if arr[i] > max {\n            max = arr[i]\n            maxIndex\
    \ = i\n        }\n    }\n    for i in 0..<arr.count {\n        if arr[i] == max\
    \ {\n            return i\n        }\n    }\n    return -1\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp1trp5io_/tmp1trp5io_.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af1b9303c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af1b8ffab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af1b8ffa988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af1b8ff97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1trp5io_                        0x0000561fe0fad552 <unavailable> + 5458

    5    libc.so.6                          0x00002af1b94ef460 __libc_start_main +
    245

    6    tmp1trp5io_                        0x0000561fe0fad1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824339
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var max = -1\n    for i in 0..<arr.count - 1 {\n      \
    \  if arr[i] >= arr[i + 1] {\n            if i > max {\n                max =\
    \ i\n            }\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp0fo40zhz/tmp0fo40zhz.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b87ca856c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b87ca54db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b87ca54d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b87ca54c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0fo40zhz                        0x0000555cf3367552 <unavailable> + 5458

    5    libc.so.6                          0x00002b87caa42460 __libc_start_main +
    245

    6    tmp0fo40zhz                        0x0000555cf33671a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824339
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var max = arr[0]\n    var maxIndex = 0\n    for i in 1..<arr.count\
    \ {\n        if arr[i] > max {\n            max = arr[i]\n            maxIndex\
    \ = i\n        }\n    }\n    var min = arr[arr.count - 1]\n    var minIndex =\
    \ arr.count - 1\n    for i in (0..<arr.count - 1).reversed() {\n        if arr[i]\
    \ < min {\n            min = arr[i]\n            minIndex = i\n        }\n   \
    \ }\n    if maxIndex > minIndex {\n        return maxIndex\n    }\n    return\
    \ -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3,\
    \ 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpj67h6lzm/tmpj67h6lzm.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6fcc329c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6fcc020b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6fcc020988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6fcc01f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpj67h6lzm                        0x000055fc8501e812 <unavailable> + 6162

    5    libc.so.6                          0x00002b6fcc515460 __libc_start_main +
    245

    6    tmpj67h6lzm                        0x000055fc8501e469 <unavailable> + 5225

    '
  stdout: ''
  timestamp: 1659824339
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var max = -1\n    for i in 0..<arr.count - 1 {\n      \
    \  if arr[i] > arr[i + 1] {\n            max = i\n        }\n    }\n    return\
    \ max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(can_arrange(arr: [1, 2,\
    \ 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpk3xrq5op/tmpk3xrq5op.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8293f8dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8293c84b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8293c84988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8293c837b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpk3xrq5op                        0x000055b6a81ad552 <unavailable> + 5458

    5    libc.so.6                          0x00002b8294179460 __libc_start_main +
    245

    6    tmpk3xrq5op                        0x000055b6a81ad1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824339
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var max_index = -1\n    for i in 0..<arr.count - 1 {\n\
    \        if arr[i] >= arr[i + 1] {\n            max_index = i\n        }\n   \
    \ }\n    return max_index\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpzubx9cp9/tmpzubx9cp9.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9b95c6cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9b95963b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9b95963988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9b959627b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzubx9cp9                        0x000055b0e9e97552 <unavailable> + 5458

    5    libc.so.6                          0x00002b9b95e58460 __libc_start_main +
    245

    6    tmpzubx9cp9                        0x000055b0e9e971a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824339
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var max = arr[0]\n    var maxIndex = 0\n    for i in 1..<arr.count\
    \ {\n        if arr[i] > max {\n            max = arr[i]\n            maxIndex\
    \ = i\n        }\n    }\n    for i in 0..<arr.count {\n        if arr[i] == max\
    \ {\n            return i\n        }\n    }\n    return -1\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp1trp5io_/tmp1trp5io_.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af1b9303c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af1b8ffab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af1b8ffa988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af1b8ff97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1trp5io_                        0x0000561fe0fad552 <unavailable> + 5458

    5    libc.so.6                          0x00002af1b94ef460 __libc_start_main +
    245

    6    tmp1trp5io_                        0x0000561fe0fad1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824339
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var index = -1\n    for i in 1..<arr.count {\n        if\
    \ arr[i] < arr[i - 1] {\n            index = i\n            break\n        }\n\
    \    }\n    return index\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpnyqg1i4r/tmpnyqg1i4r.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b06040cec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0603dc5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0603dc5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0603dc47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnyqg1i4r                        0x000055f4e2bc47f9 <unavailable> + 6137

    5    libc.so.6                          0x00002b06042ba460 __libc_start_main +
    245

    6    tmpnyqg1i4r                        0x000055f4e2bc41a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824340
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var max = -1\n    for i in 0..<arr.count - 1 {\n      \
    \  if arr[i] >= arr[i + 1] {\n            max = i\n        }\n    }\n    return\
    \ max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(can_arrange(arr: [1, 2,\
    \ 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpif_64jmd/tmpif_64jmd.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5e91c66c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5e9195db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5e9195d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5e9195c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpif_64jmd                        0x000055ae68b46552 <unavailable> + 5458

    5    libc.so.6                          0x00002b5e91e52460 __libc_start_main +
    245

    6    tmpif_64jmd                        0x000055ae68b461a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824339
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = -1\n    for i in 0..<arr.count - 1 {\n \
    \       if arr[i] <= arr[i + 1] {\n            maxIndex = i + 1\n        }\n \
    \   }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmprej94dad/tmprej94dad.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abf32c17c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abf3290eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abf3290e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abf3290d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprej94dad                        0x0000556fa741f552 <unavailable> + 5458

    5    libc.so.6                          0x00002abf32e03460 __libc_start_main +
    245

    6    tmprej94dad                        0x0000556fa741f1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824339
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var max = arr[0]\n    var maxIndex = 0\n    for i in 1..<arr.count\
    \ {\n        if arr[i] > max {\n            max = arr[i]\n            maxIndex\
    \ = i\n        }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp12hpug9a/tmp12hpug9a.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acd64b0ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acd64801b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acd64801988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acd648007b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp12hpug9a                        0x000055f52efe2552 <unavailable> + 5458

    5    libc.so.6                          0x00002acd64cf6460 __libc_start_main +
    245

    6    tmp12hpug9a                        0x000055f52efe21a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824339
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var max = arr[0]\n    var index = -1\n    for i in 1..<arr.count\
    \ {\n        if arr[i] <= max {\n            max = arr[i]\n            index =\
    \ i\n        }\n    }\n    return index\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2,\
    \ 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\
    assert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr: [] as\
    \ [Int]) == -1)"
  status: Exception
  stderr: 'tmpnibd_dfd/tmpnibd_dfd.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afb4ee62c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afb4eb59b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afb4eb59988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afb4eb587b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnibd_dfd                        0x000055674e4c4552 <unavailable> + 5458

    5    libc.so.6                          0x00002afb4f04e460 __libc_start_main +
    245

    6    tmpnibd_dfd                        0x000055674e4c41a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824339
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = -1\n    var maxValue = arr[0]\n    for i\
    \ in 1..<arr.count {\n        if arr[i] > maxValue {\n            maxIndex = i\n\
    \            maxValue = arr[i]\n        }\n    }\n    return maxIndex\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpi74aanc2/tmpi74aanc2.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9584fbbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9584cb2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9584cb2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9584cb17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpi74aanc2                        0x000055e3d1ca7552 <unavailable> + 5458

    5    libc.so.6                          0x00002b95851a7460 __libc_start_main +
    245

    6    tmpi74aanc2                        0x000055e3d1ca71a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824339
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    guard arr.count > 1 else { return -1 }\n    var result\
    \ = -1\n    for i in 1..<arr.count {\n        if arr[i] < arr[i - 1] {\n     \
    \       result = i - 1\n            break\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpoqh00qlc/tmpoqh00qlc.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3b4651ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3b46215b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3b46215988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3b462147b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpoqh00qlc                        0x000055f6bbd1c552 <unavailable> + 5458

    5    libc.so.6                          0x00002b3b4670a460 __libc_start_main +
    245

    6    tmpoqh00qlc                        0x000055f6bbd1c1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824340
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var index = -1\n    for i in 0..<arr.count - 1 {\n    \
    \    if arr[i] >= arr[i + 1] {\n            index = i\n        }\n    }\n    return\
    \ index\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(can_arrange(arr: [1, 2,\
    \ 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmps0cxtrj2/tmps0cxtrj2.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adf7946ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adf79165b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adf79165988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adf791647b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmps0cxtrj2                        0x000055844c69c552 <unavailable> + 5458

    5    libc.so.6                          0x00002adf7965a460 __libc_start_main +
    245

    6    tmps0cxtrj2                        0x000055844c69c1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824339
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = -1\n    for i in 0..<arr.count - 1 {\n \
    \       if arr[i] >= arr[i + 1] {\n            maxIndex = i\n        }\n    }\n\
    \    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp2b9_bhgs/tmp2b9_bhgs.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9ca4384c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9ca407bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9ca407b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9ca407a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2b9_bhgs                        0x000056412df75552 <unavailable> + 5458

    5    libc.so.6                          0x00002b9ca4570460 __libc_start_main +
    245

    6    tmp2b9_bhgs                        0x000056412df751a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824339
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var max = arr[0]\n    var maxIndex = 0\n    for i in 1..<arr.count\
    \ {\n        if arr[i] > max {\n            max = arr[i]\n            maxIndex\
    \ = i\n        }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp12hpug9a/tmp12hpug9a.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acd64b0ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acd64801b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acd64801988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acd648007b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp12hpug9a                        0x000055f52efe2552 <unavailable> + 5458

    5    libc.so.6                          0x00002acd64cf6460 __libc_start_main +
    245

    6    tmp12hpug9a                        0x000055f52efe21a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824339
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var max = -1\n    for i in 0..<arr.count - 1 {\n      \
    \  if arr[i] > arr[i + 1] {\n            max = i\n        }\n    }\n    return\
    \ max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(can_arrange(arr: [1, 2,\
    \ 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpk3xrq5op/tmpk3xrq5op.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8293f8dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8293c84b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8293c84988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8293c837b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpk3xrq5op                        0x000055b6a81ad552 <unavailable> + 5458

    5    libc.so.6                          0x00002b8294179460 __libc_start_main +
    245

    6    tmpk3xrq5op                        0x000055b6a81ad1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824339
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var max = arr[0]\n    var maxIndex = 0\n    for i in 1..<arr.count\
    \ {\n        if arr[i] > max {\n            max = arr[i]\n            maxIndex\
    \ = i\n        }\n    }\n    if maxIndex == arr.count - 1 {\n        return -1\n\
    \    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpe4th2eus/tmpe4th2eus.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8d60a7bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8d60772b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8d60772988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8d607717b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpe4th2eus                        0x000055805e431552 <unavailable> + 5458

    5    libc.so.6                          0x00002b8d60c67460 __libc_start_main +
    245

    6    tmpe4th2eus                        0x000055805e4311a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824339
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var result = -1\n    for i in 0..<arr.count - 1 {\n   \
    \     if arr[i] >= arr[i + 1] {\n            result = i\n        }\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr: [1,\
    \ 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpvbgy7251/tmpvbgy7251.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afa195d2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afa192c9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afa192c9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afa192c87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvbgy7251                        0x0000560972d87552 <unavailable> + 5458

    5    libc.so.6                          0x00002afa197be460 __libc_start_main +
    245

    6    tmpvbgy7251                        0x0000560972d871a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824339
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var max = 0\n    for i in 0..<arr.count {\n        if arr[i]\
    \ > arr[max] {\n            max = i\n        }\n    }\n    return max\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpy9jiugih/tmpy9jiugih.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae796625c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae79631cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae79631c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae79631b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpy9jiugih                        0x0000558bcc5de552 <unavailable> + 5458

    5    libc.so.6                          0x00002ae796811460 __libc_start_main +
    245

    6    tmpy9jiugih                        0x0000558bcc5de1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824339
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var max = arr[0]\n    var maxIndex = 0\n    for i in 1..<arr.count\
    \ {\n        if arr[i] > max {\n            max = arr[i]\n            maxIndex\
    \ = i\n        }\n    }\n    for i in 0..<arr.count {\n        if arr[i] == max\
    \ {\n            if i == 0 {\n                return -1\n            }\n     \
    \       if arr[i - 1] < max {\n                return maxIndex\n            }\n\
    \        }\n    }\n    return -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp146fkigt/tmp146fkigt.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b67892dbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6788fd2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6788fd2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6788fd17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp146fkigt                        0x000055f69aedf552 <unavailable> + 5458

    5    libc.so.6                          0x00002b67894c7460 __libc_start_main +
    245

    6    tmp146fkigt                        0x000055f69aedf1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824340
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = -1\n    for i in 0..<arr.count - 1 {\n \
    \       if arr[i] <= arr[i + 1] {\n            maxIndex = i + 1\n        }\n \
    \   }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmprej94dad/tmprej94dad.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abf32c17c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abf3290eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abf3290e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abf3290d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprej94dad                        0x0000556fa741f552 <unavailable> + 5458

    5    libc.so.6                          0x00002abf32e03460 __libc_start_main +
    245

    6    tmprej94dad                        0x0000556fa741f1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824339
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var max = -1\n    var maxIndex = -1\n    for i in 0..<arr.count\
    \ {\n        if arr[i] > max {\n            max = arr[i]\n            maxIndex\
    \ = i\n        }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpdu_kc3z5/tmpdu_kc3z5.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8a35b12c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8a35809b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8a35809988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8a358087b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdu_kc3z5                        0x000055ff29872552 <unavailable> + 5458

    5    libc.so.6                          0x00002b8a35cfe460 __libc_start_main +
    245

    6    tmpdu_kc3z5                        0x000055ff298721a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824339
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var max_index = -1\n    for i in 1..<arr.count {\n    \
    \    if arr[i] <= arr[i - 1] {\n            max_index = i\n        }\n    }\n\
    \    return max_index\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'Swift/Range.swift:743: Fatal error: Range requires lowerBound <= upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002ad84a7a5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad84a49c561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ad84a49c286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ad84a49c13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ad84a49bbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmp3ntlqlao                        0x000055d9c64689c2 <unavailable> + 6594

    6    tmp3ntlqlao                        0x000055d9c646881c <unavailable> + 6172

    7    libc.so.6                          0x00002ad84a991460 __libc_start_main +
    245

    8    tmp3ntlqlao                        0x000055d9c64681a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824339
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var max_index = -1\n    var max_value = arr[0]\n    for\
    \ i in 1..<arr.count {\n        if arr[i] > max_value {\n            max_index\
    \ = i\n            max_value = arr[i]\n        }\n    }\n    return max_index\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpzi1orimm/tmpzi1orimm.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac826c05c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac8268fcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac8268fc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac8268fb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzi1orimm                        0x000055e20d988552 <unavailable> + 5458

    5    libc.so.6                          0x00002ac826df1460 __libc_start_main +
    245

    6    tmpzi1orimm                        0x000055e20d9881a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824340
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var max = arr[0]\n    var maxIndex = 0\n    for i in 1..<arr.count\
    \ {\n        if arr[i] > max {\n            max = arr[i]\n            maxIndex\
    \ = i\n        }\n    }\n    for i in 0..<arr.count {\n        if arr[i] == max\
    \ {\n            if i == arr.count - 1 {\n                return -1\n        \
    \    }\n            if arr[i + 1] < max {\n                return i\n        \
    \    }\n        }\n    }\n    return -1\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2,\
    \ 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\
    assert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr: [] as\
    \ [Int]) == -1)"
  status: Exception
  stderr: 'tmpubjmzcdr/tmpubjmzcdr.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abf078e0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abf075d7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abf075d7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abf075d67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpubjmzcdr                        0x0000560dc9bbf552 <unavailable> + 5458

    5    libc.so.6                          0x00002abf07acc460 __libc_start_main +
    245

    6    tmpubjmzcdr                        0x0000560dc9bbf1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824339
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var max = arr[0]\n    var maxIndex = 0\n    for i in 1..<arr.count\
    \ {\n        if arr[i] > max {\n            max = arr[i]\n            maxIndex\
    \ = i\n        }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp12hpug9a/tmp12hpug9a.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acd64b0ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acd64801b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acd64801988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acd648007b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp12hpug9a                        0x000055f52efe2552 <unavailable> + 5458

    5    libc.so.6                          0x00002acd64cf6460 __libc_start_main +
    245

    6    tmp12hpug9a                        0x000055f52efe21a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824339
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var max = arr[0]\n    var maxIndex = 0\n    for i in 1..<arr.count\
    \ {\n        if arr[i] > max {\n            max = arr[i]\n            maxIndex\
    \ = i\n        }\n    }\n    for i in 0..<arr.count {\n        if arr[i] == max\
    \ {\n            return i\n        }\n    }\n    return -1\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp1trp5io_/tmp1trp5io_.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af1b9303c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af1b8ffab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af1b8ffa988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af1b8ff97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1trp5io_                        0x0000561fe0fad552 <unavailable> + 5458

    5    libc.so.6                          0x00002af1b94ef460 __libc_start_main +
    245

    6    tmp1trp5io_                        0x0000561fe0fad1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824339
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var max = -1\n    for i in 0..<arr.count - 1 {\n      \
    \  if arr[i] >= arr[i + 1] {\n            continue\n        }\n        max = i\n\
    \    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpi27gy4j4/tmpi27gy4j4.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b07883c5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b07880bcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b07880bc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b07880bb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpi27gy4j4                        0x0000560eb0e1261f <unavailable> + 5663

    5    libc.so.6                          0x00002b07885b1460 __libc_start_main +
    245

    6    tmpi27gy4j4                        0x0000560eb0e121a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824340
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = -1\n    for i in 0..<arr.count - 1 {\n \
    \       if arr[i] >= arr[i + 1] {\n            maxIndex = i\n        }\n    }\n\
    \    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp2b9_bhgs/tmp2b9_bhgs.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9ca4384c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9ca407bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9ca407b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9ca407a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2b9_bhgs                        0x000056412df75552 <unavailable> + 5458

    5    libc.so.6                          0x00002b9ca4570460 __libc_start_main +
    245

    6    tmp2b9_bhgs                        0x000056412df751a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824339
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var max = -1\n    for i in 0..<arr.count - 1 {\n      \
    \  if arr[i] >= arr[i + 1] {\n            max = i\n        }\n    }\n    return\
    \ max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(can_arrange(arr: [1, 2,\
    \ 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpif_64jmd/tmpif_64jmd.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5e91c66c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5e9195db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5e9195d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5e9195c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpif_64jmd                        0x000055ae68b46552 <unavailable> + 5458

    5    libc.so.6                          0x00002b5e91e52460 __libc_start_main +
    245

    6    tmpif_64jmd                        0x000055ae68b461a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824339
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var max = arr[0]\n    var maxIndex = 0\n    for i in 1..<arr.count\
    \ {\n        if arr[i] > max {\n            max = arr[i]\n            maxIndex\
    \ = i\n        }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp12hpug9a/tmp12hpug9a.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acd64b0ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acd64801b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acd64801988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acd648007b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp12hpug9a                        0x000055f52efe2552 <unavailable> + 5458

    5    libc.so.6                          0x00002acd64cf6460 __libc_start_main +
    245

    6    tmp12hpug9a                        0x000055f52efe21a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824339
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = -1\n    var maxValue = -1\n    for i in\
    \ 0..<arr.count {\n        if arr[i] > maxValue {\n            maxValue = arr[i]\n\
    \            maxIndex = i\n        }\n    }\n    return maxIndex\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpwe8ffplp/tmpwe8ffplp.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8215ba3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b821589ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b821589a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b82158997b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwe8ffplp                        0x00005559c3075552 <unavailable> + 5458

    5    libc.so.6                          0x00002b8215d8f460 __libc_start_main +
    245

    6    tmpwe8ffplp                        0x00005559c30751a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824339
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var max = -1\n    for i in 0..<arr.count - 1 {\n      \
    \  if arr[i] > arr[i + 1] {\n            max = i\n        }\n    }\n    return\
    \ max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(can_arrange(arr: [1, 2,\
    \ 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpk3xrq5op/tmpk3xrq5op.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8293f8dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8293c84b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8293c84988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8293c837b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpk3xrq5op                        0x000055b6a81ad552 <unavailable> + 5458

    5    libc.so.6                          0x00002b8294179460 __libc_start_main +
    245

    6    tmpk3xrq5op                        0x000055b6a81ad1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824339
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = -1\n    for i in 0..<arr.count - 1 {\n \
    \       if arr[i] >= arr[i + 1] {\n            maxIndex = i\n        }\n    }\n\
    \    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp2b9_bhgs/tmp2b9_bhgs.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9ca4384c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9ca407bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9ca407b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9ca407a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2b9_bhgs                        0x000056412df75552 <unavailable> + 5458

    5    libc.so.6                          0x00002b9ca4570460 __libc_start_main +
    245

    6    tmp2b9_bhgs                        0x000056412df751a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824339
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    return -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpdit4fta4/tmpdit4fta4.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b74efb5ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b74ef851b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b74ef851988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b74ef8507b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdit4fta4                        0x000055a915951312 <unavailable> + 4882

    5    libc.so.6                          0x00002b74efd46460 __libc_start_main +
    245

    6    tmpdit4fta4                        0x000055a915950f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659824340
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = -1\n    for i in 0..<arr.count - 1 {\n \
    \       if arr[i] >= arr[i + 1] {\n            maxIndex = i\n        }\n    }\n\
    \    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp2b9_bhgs/tmp2b9_bhgs.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9ca4384c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9ca407bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9ca407b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9ca407a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2b9_bhgs                        0x000056412df75552 <unavailable> + 5458

    5    libc.so.6                          0x00002b9ca4570460 __libc_start_main +
    245

    6    tmp2b9_bhgs                        0x000056412df751a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824339
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var max = -1\n    for i in 0..<arr.count - 1 {\n      \
    \  if arr[i] >= arr[i + 1] {\n            max = i\n        }\n    }\n    return\
    \ max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(can_arrange(arr: [1, 2,\
    \ 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpif_64jmd/tmpif_64jmd.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5e91c66c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5e9195db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5e9195d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5e9195c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpif_64jmd                        0x000055ae68b46552 <unavailable> + 5458

    5    libc.so.6                          0x00002b5e91e52460 __libc_start_main +
    245

    6    tmpif_64jmd                        0x000055ae68b461a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824339
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = -1\n    for i in 0..<arr.count - 1 {\n \
    \       if arr[i] >= arr[i + 1] {\n            maxIndex = i\n        }\n    }\n\
    \    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp2b9_bhgs/tmp2b9_bhgs.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9ca4384c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9ca407bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9ca407b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9ca407a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2b9_bhgs                        0x000056412df75552 <unavailable> + 5458

    5    libc.so.6                          0x00002b9ca4570460 __libc_start_main +
    245

    6    tmp2b9_bhgs                        0x000056412df751a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824339
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var max = arr[0]\n    var maxIndex = 0\n    for i in 1..<arr.count\
    \ {\n        if arr[i] > max {\n            max = arr[i]\n            maxIndex\
    \ = i\n        }\n    }\n    if maxIndex == arr.count - 1 {\n        return -1\n\
    \    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpe4th2eus/tmpe4th2eus.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8d60a7bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8d60772b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8d60772988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8d607717b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpe4th2eus                        0x000055805e431552 <unavailable> + 5458

    5    libc.so.6                          0x00002b8d60c67460 __libc_start_main +
    245

    6    tmpe4th2eus                        0x000055805e4311a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824339
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = -1\n    var maxValue = -1\n    for i in\
    \ 0..<arr.count {\n        if arr[i] > maxValue {\n            maxValue = arr[i]\n\
    \            maxIndex = i\n        }\n    }\n    return maxIndex\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpwe8ffplp/tmpwe8ffplp.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8215ba3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b821589ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b821589a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b82158997b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwe8ffplp                        0x00005559c3075552 <unavailable> + 5458

    5    libc.so.6                          0x00002b8215d8f460 __libc_start_main +
    245

    6    tmpwe8ffplp                        0x00005559c30751a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824339
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var max = arr[0]\n    var index = -1\n    for i in 1..<arr.count\
    \ {\n        if arr[i] <= max {\n            max = arr[i]\n            index =\
    \ i\n        }\n    }\n    return index\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2,\
    \ 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\
    assert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr: [] as\
    \ [Int]) == -1)"
  status: Exception
  stderr: 'tmpnibd_dfd/tmpnibd_dfd.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afb4ee62c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afb4eb59b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afb4eb59988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afb4eb587b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnibd_dfd                        0x000055674e4c4552 <unavailable> + 5458

    5    libc.so.6                          0x00002afb4f04e460 __libc_start_main +
    245

    6    tmpnibd_dfd                        0x000055674e4c41a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824339
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var max = arr[0]\n    var maxIndex = 0\n    for i in 1..<arr.count\
    \ {\n        if arr[i] > max {\n            max = arr[i]\n            maxIndex\
    \ = i\n        }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp12hpug9a/tmp12hpug9a.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acd64b0ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acd64801b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acd64801988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acd648007b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp12hpug9a                        0x000055f52efe2552 <unavailable> + 5458

    5    libc.so.6                          0x00002acd64cf6460 __libc_start_main +
    245

    6    tmp12hpug9a                        0x000055f52efe21a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824339
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var max = arr[0]\n    var index = -1\n    for i in 1..<arr.count\
    \ {\n        if arr[i] <= max {\n            max = arr[i]\n            index =\
    \ i\n        }\n    }\n    return index\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2,\
    \ 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\
    assert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr: [] as\
    \ [Int]) == -1)"
  status: Exception
  stderr: 'tmpnibd_dfd/tmpnibd_dfd.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afb4ee62c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afb4eb59b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afb4eb59988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afb4eb587b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnibd_dfd                        0x000055674e4c4552 <unavailable> + 5458

    5    libc.so.6                          0x00002afb4f04e460 __libc_start_main +
    245

    6    tmpnibd_dfd                        0x000055674e4c41a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824339
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var max = arr[0]\n    var index = -1\n    for i in 1..<arr.count\
    \ {\n        if arr[i] <= max {\n            max = arr[i]\n            index =\
    \ i\n        }\n    }\n    return index\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2,\
    \ 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\
    assert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr: [] as\
    \ [Int]) == -1)"
  status: Exception
  stderr: 'tmpnibd_dfd/tmpnibd_dfd.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afb4ee62c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afb4eb59b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afb4eb59988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afb4eb587b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnibd_dfd                        0x000055674e4c4552 <unavailable> + 5458

    5    libc.so.6                          0x00002afb4f04e460 __libc_start_main +
    245

    6    tmpnibd_dfd                        0x000055674e4c41a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824339
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var max = -1\n    for i in 0..<arr.count - 1 {\n      \
    \  if arr[i] >= arr[i + 1] {\n            continue\n        }\n        if max\
    \ < i {\n            max = i\n        }\n    }\n    return max\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpci3dd1as/tmpci3dd1as.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac7c16f5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac7c13ecb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac7c13ec988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac7c13eb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpci3dd1as                        0x000055c249d1d61f <unavailable> + 5663

    5    libc.so.6                          0x00002ac7c18e1460 __libc_start_main +
    245

    6    tmpci3dd1as                        0x000055c249d1d1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824340
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = -1\n    var maxValue = arr[0]\n    for i\
    \ in 1..<arr.count {\n        if arr[i] > maxValue {\n            maxIndex = i\n\
    \            maxValue = arr[i]\n        }\n    }\n    return maxIndex\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpi74aanc2/tmpi74aanc2.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9584fbbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9584cb2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9584cb2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9584cb17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpi74aanc2                        0x000055e3d1ca7552 <unavailable> + 5458

    5    libc.so.6                          0x00002b95851a7460 __libc_start_main +
    245

    6    tmpi74aanc2                        0x000055e3d1ca71a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824339
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var max = -1\n    for i in 0..<arr.count - 1 {\n      \
    \  if arr[i] >= arr[i + 1] {\n            max = i\n        }\n    }\n    return\
    \ max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(can_arrange(arr: [1, 2,\
    \ 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpif_64jmd/tmpif_64jmd.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5e91c66c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5e9195db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5e9195d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5e9195c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpif_64jmd                        0x000055ae68b46552 <unavailable> + 5458

    5    libc.so.6                          0x00002b5e91e52460 __libc_start_main +
    245

    6    tmpif_64jmd                        0x000055ae68b461a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824339
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var index = -1\n    for i in 0..<arr.count - 1 {\n    \
    \    if arr[i] >= arr[i + 1] {\n            index = i\n        }\n    }\n    return\
    \ index\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(can_arrange(arr: [1, 2,\
    \ 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmps0cxtrj2/tmps0cxtrj2.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adf7946ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adf79165b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adf79165988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adf791647b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmps0cxtrj2                        0x000055844c69c552 <unavailable> + 5458

    5    libc.so.6                          0x00002adf7965a460 __libc_start_main +
    245

    6    tmps0cxtrj2                        0x000055844c69c1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824339
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var max = -1\n    for i in 0..<arr.count - 1 {\n      \
    \  if arr[i] > arr[i + 1] {\n            max = i\n        }\n    }\n    return\
    \ max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(can_arrange(arr: [1, 2,\
    \ 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpk3xrq5op/tmpk3xrq5op.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8293f8dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8293c84b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8293c84988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8293c837b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpk3xrq5op                        0x000055b6a81ad552 <unavailable> + 5458

    5    libc.so.6                          0x00002b8294179460 __libc_start_main +
    245

    6    tmpk3xrq5op                        0x000055b6a81ad1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824339
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var max = arr[0]\n    var maxIndex = 0\n    for i in 1..<arr.count\
    \ {\n        if arr[i] > max {\n            max = arr[i]\n            maxIndex\
    \ = i\n        }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp12hpug9a/tmp12hpug9a.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acd64b0ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acd64801b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acd64801988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acd648007b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp12hpug9a                        0x000055f52efe2552 <unavailable> + 5458

    5    libc.so.6                          0x00002acd64cf6460 __libc_start_main +
    245

    6    tmp12hpug9a                        0x000055f52efe21a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824339
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var max = arr[0]\n    var index = -1\n    for i in 1..<arr.count\
    \ {\n        if arr[i] <= max {\n            max = arr[i]\n            index =\
    \ i\n        }\n    }\n    return index\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2,\
    \ 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\
    assert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr: [] as\
    \ [Int]) == -1)"
  status: Exception
  stderr: 'tmpnibd_dfd/tmpnibd_dfd.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afb4ee62c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afb4eb59b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afb4eb59988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afb4eb587b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnibd_dfd                        0x000055674e4c4552 <unavailable> + 5458

    5    libc.so.6                          0x00002afb4f04e460 __libc_start_main +
    245

    6    tmpnibd_dfd                        0x000055674e4c41a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824339
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var max = arr[0]\n    var maxIndex = 0\n    for i in 1..<arr.count\
    \ {\n        if arr[i] > max {\n            max = arr[i]\n            maxIndex\
    \ = i\n        }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp12hpug9a/tmp12hpug9a.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acd64b0ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acd64801b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acd64801988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acd648007b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp12hpug9a                        0x000055f52efe2552 <unavailable> + 5458

    5    libc.so.6                          0x00002acd64cf6460 __libc_start_main +
    245

    6    tmp12hpug9a                        0x000055f52efe21a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824339
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var max = -1\n    for i in 0..<arr.count - 1 {\n      \
    \  if arr[i] >= arr[i + 1] {\n            max = i\n        }\n    }\n    return\
    \ max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(can_arrange(arr: [1, 2,\
    \ 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpif_64jmd/tmpif_64jmd.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5e91c66c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5e9195db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5e9195d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5e9195c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpif_64jmd                        0x000055ae68b46552 <unavailable> + 5458

    5    libc.so.6                          0x00002b5e91e52460 __libc_start_main +
    245

    6    tmpif_64jmd                        0x000055ae68b461a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824339
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = -1\n    var maxValue = -1\n    for i in\
    \ 0..<arr.count {\n        if arr[i] > maxValue {\n            maxValue = arr[i]\n\
    \            maxIndex = i\n        }\n    }\n    return maxIndex\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpwe8ffplp/tmpwe8ffplp.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8215ba3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b821589ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b821589a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b82158997b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwe8ffplp                        0x00005559c3075552 <unavailable> + 5458

    5    libc.so.6                          0x00002b8215d8f460 __libc_start_main +
    245

    6    tmpwe8ffplp                        0x00005559c30751a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824339
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var max = arr[0]\n    var maxIndex = 0\n    for i in 1..<arr.count\
    \ {\n        if arr[i] > max {\n            max = arr[i]\n            maxIndex\
    \ = i\n        }\n    }\n    for i in 0..<arr.count {\n        if arr[i] == max\
    \ {\n            return i\n        }\n    }\n    return -1\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp1trp5io_/tmp1trp5io_.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af1b9303c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af1b8ffab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af1b8ffa988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af1b8ff97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1trp5io_                        0x0000561fe0fad552 <unavailable> + 5458

    5    libc.so.6                          0x00002af1b94ef460 __libc_start_main +
    245

    6    tmp1trp5io_                        0x0000561fe0fad1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824339
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var max = arr[0]\n    var index = -1\n    for i in 1..<arr.count\
    \ {\n        if arr[i] < max {\n            index = i\n        } else {\n    \
    \        max = arr[i]\n        }\n    }\n    return index\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b854bd7bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b854ba72561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b854ba72286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b854ba7213c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b854ba71bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b854b871e83 <unavailable> + 188035

    6    tmpy3f8wczz                        0x000056369252a932 <unavailable> + 6450

    7    tmpy3f8wczz                        0x000056369252a81c <unavailable> + 6172

    8    libc.so.6                          0x00002b854bf67460 __libc_start_main +
    245

    9    tmpy3f8wczz                        0x000056369252a1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824339
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var max = arr[0]\n    var maxIndex = 0\n    for i in 1..<arr.count\
    \ {\n        if arr[i] > max {\n            max = arr[i]\n            maxIndex\
    \ = i\n        }\n    }\n    if maxIndex == arr.count - 1 {\n        return -1\n\
    \    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpe4th2eus/tmpe4th2eus.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8d60a7bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8d60772b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8d60772988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8d607717b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpe4th2eus                        0x000055805e431552 <unavailable> + 5458

    5    libc.so.6                          0x00002b8d60c67460 __libc_start_main +
    245

    6    tmpe4th2eus                        0x000055805e4311a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824339
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = -1\n    for i in 0..<arr.count - 1 {\n \
    \       if arr[i] >= arr[i + 1] {\n            maxIndex = i\n        }\n    }\n\
    \    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp2b9_bhgs/tmp2b9_bhgs.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9ca4384c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9ca407bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9ca407b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9ca407a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2b9_bhgs                        0x000056412df75552 <unavailable> + 5458

    5    libc.so.6                          0x00002b9ca4570460 __libc_start_main +
    245

    6    tmp2b9_bhgs                        0x000056412df751a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824339
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var max = 0\n    var maxIndex = -1\n    for i in 0..<arr.count\
    \ - 1 {\n        if arr[i] < arr[i + 1] && arr[i + 1] > max {\n            max\
    \ = arr[i + 1]\n            maxIndex = i + 1\n        }\n    }\n    return maxIndex\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpa1graj7i/tmpa1graj7i.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b92d7136c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b92d6e2db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b92d6e2d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b92d6e2c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpa1graj7i                        0x000055f285752552 <unavailable> + 5458

    5    libc.so.6                          0x00002b92d7322460 __libc_start_main +
    245

    6    tmpa1graj7i                        0x000055f2857521a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824339
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var largest = -1\n    for i in 1..<arr.count {\n      \
    \  if arr[i] <= arr[i - 1] {\n            largest = i - 1\n        }\n    }\n\
    \    return largest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr: [1,\
    \ 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpon287n1l/tmpon287n1l.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac0c56f2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac0c53e9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac0c53e9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac0c53e87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpon287n1l                        0x0000564240934552 <unavailable> + 5458

    5    libc.so.6                          0x00002ac0c58de460 __libc_start_main +
    245

    6    tmpon287n1l                        0x00005642409341a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824340
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var max = arr[0]\n    var index = -1\n    for i in 1..<arr.count\
    \ {\n        if arr[i] <= max {\n            max = arr[i]\n            index =\
    \ i\n        }\n    }\n    return index\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2,\
    \ 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\
    assert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr: [] as\
    \ [Int]) == -1)"
  status: Exception
  stderr: 'tmpnibd_dfd/tmpnibd_dfd.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afb4ee62c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afb4eb59b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afb4eb59988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afb4eb587b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnibd_dfd                        0x000055674e4c4552 <unavailable> + 5458

    5    libc.so.6                          0x00002afb4f04e460 __libc_start_main +
    245

    6    tmpnibd_dfd                        0x000055674e4c41a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824339
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var max_index = -1\n    var max_value = -1\n    for i in\
    \ 0..<arr.count {\n        if arr[i] > max_value {\n            max_value = arr[i]\n\
    \            max_index = i\n        }\n    }\n    return max_index\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpdsmdejt7/tmpdsmdejt7.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b04242d7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0423fceb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0423fce988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0423fcd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdsmdejt7                        0x0000559a4a757552 <unavailable> + 5458

    5    libc.so.6                          0x00002b04244c3460 __libc_start_main +
    245

    6    tmpdsmdejt7                        0x0000559a4a7571a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824339
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var max = -1\n    var maxIndex = -1\n    for i in 0..<arr.count\
    \ {\n        if arr[i] > max {\n            max = arr[i]\n            maxIndex\
    \ = i\n        }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpdu_kc3z5/tmpdu_kc3z5.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8a35b12c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8a35809b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8a35809988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8a358087b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdu_kc3z5                        0x000055ff29872552 <unavailable> + 5458

    5    libc.so.6                          0x00002b8a35cfe460 __libc_start_main +
    245

    6    tmpdu_kc3z5                        0x000055ff298721a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824339
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var result = -1\n    for i in 0..<arr.count - 1 {\n   \
    \     if arr[i] >= arr[i + 1] {\n            result = i\n        }\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr: [1,\
    \ 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpvbgy7251/tmpvbgy7251.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afa195d2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afa192c9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afa192c9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afa192c87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvbgy7251                        0x0000560972d87552 <unavailable> + 5458

    5    libc.so.6                          0x00002afa197be460 __libc_start_main +
    245

    6    tmpvbgy7251                        0x0000560972d871a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824339
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = -1\n    for i in 0..<arr.count - 1 {\n \
    \       if arr[i] >= arr[i + 1] {\n            maxIndex = i\n        }\n    }\n\
    \    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp2b9_bhgs/tmp2b9_bhgs.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9ca4384c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9ca407bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9ca407b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9ca407a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2b9_bhgs                        0x000056412df75552 <unavailable> + 5458

    5    libc.so.6                          0x00002b9ca4570460 __libc_start_main +
    245

    6    tmp2b9_bhgs                        0x000056412df751a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824339
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var max = arr[0]\n    var maxIndex = 0\n    for i in 1..<arr.count\
    \ {\n        if arr[i] > max {\n            max = arr[i]\n            maxIndex\
    \ = i\n        }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp12hpug9a/tmp12hpug9a.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acd64b0ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acd64801b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acd64801988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acd648007b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp12hpug9a                        0x000055f52efe2552 <unavailable> + 5458

    5    libc.so.6                          0x00002acd64cf6460 __libc_start_main +
    245

    6    tmp12hpug9a                        0x000055f52efe21a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824339
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var max = arr[0]\n    var maxIndex = 0\n    for i in 1..<arr.count\
    \ {\n        if arr[i] > max {\n            max = arr[i]\n            maxIndex\
    \ = i\n        }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp12hpug9a/tmp12hpug9a.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acd64b0ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acd64801b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acd64801988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acd648007b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp12hpug9a                        0x000055f52efe2552 <unavailable> + 5458

    5    libc.so.6                          0x00002acd64cf6460 __libc_start_main +
    245

    6    tmp12hpug9a                        0x000055f52efe21a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824339
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var max = arr[0]\n    var index = -1\n    for i in 1..<arr.count\
    \ {\n        if arr[i] <= max {\n            max = arr[i]\n            index =\
    \ i\n        }\n    }\n    return index\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2,\
    \ 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\
    assert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr: [] as\
    \ [Int]) == -1)"
  status: Exception
  stderr: 'tmpnibd_dfd/tmpnibd_dfd.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afb4ee62c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afb4eb59b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afb4eb59988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afb4eb587b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnibd_dfd                        0x000055674e4c4552 <unavailable> + 5458

    5    libc.so.6                          0x00002afb4f04e460 __libc_start_main +
    245

    6    tmpnibd_dfd                        0x000055674e4c41a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824339
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var max = arr[0]\n    var index = -1\n    for i in 1..<arr.count\
    \ {\n        if arr[i] <= max {\n            max = arr[i]\n            index =\
    \ i\n        }\n    }\n    return index\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2,\
    \ 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\
    assert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr: [] as\
    \ [Int]) == -1)"
  status: Exception
  stderr: 'tmpnibd_dfd/tmpnibd_dfd.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afb4ee62c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afb4eb59b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afb4eb59988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afb4eb587b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnibd_dfd                        0x000055674e4c4552 <unavailable> + 5458

    5    libc.so.6                          0x00002afb4f04e460 __libc_start_main +
    245

    6    tmpnibd_dfd                        0x000055674e4c41a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824339
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var max = -1\n    var maxIndex = -1\n    for i in 0..<arr.count\
    \ {\n        if arr[i] > max {\n            max = arr[i]\n            maxIndex\
    \ = i\n        }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpdu_kc3z5/tmpdu_kc3z5.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8a35b12c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8a35809b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8a35809988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8a358087b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdu_kc3z5                        0x000055ff29872552 <unavailable> + 5458

    5    libc.so.6                          0x00002b8a35cfe460 __libc_start_main +
    245

    6    tmpdu_kc3z5                        0x000055ff298721a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824339
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var max = arr[0]\n    var maxIndex = 0\n    for i in 1..<arr.count\
    \ {\n        if arr[i] > max {\n            max = arr[i]\n            maxIndex\
    \ = i\n        }\n    }\n    for i in 0..<arr.count {\n        if arr[i] == max\
    \ {\n            return i\n        }\n    }\n    return -1\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp1trp5io_/tmp1trp5io_.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af1b9303c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af1b8ffab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af1b8ffa988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af1b8ff97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1trp5io_                        0x0000561fe0fad552 <unavailable> + 5458

    5    libc.so.6                          0x00002af1b94ef460 __libc_start_main +
    245

    6    tmp1trp5io_                        0x0000561fe0fad1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824339
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var max = -1\n    for i in 0..<arr.count - 1 {\n      \
    \  if arr[i] >= arr[i + 1] {\n            max = i\n        }\n    }\n    return\
    \ max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(can_arrange(arr: [1, 2,\
    \ 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpif_64jmd/tmpif_64jmd.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5e91c66c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5e9195db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5e9195d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5e9195c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpif_64jmd                        0x000055ae68b46552 <unavailable> + 5458

    5    libc.so.6                          0x00002b5e91e52460 __libc_start_main +
    245

    6    tmpif_64jmd                        0x000055ae68b461a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824339
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var max = -1\n    var index = -1\n    for i in 0..<arr.count\
    \ - 1 {\n        if arr[i] <= arr[i + 1] {\n            if max < arr[i + 1] {\n\
    \                max = arr[i + 1]\n                index = i + 1\n           \
    \ }\n        }\n    }\n    return index\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2,\
    \ 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\
    assert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr: [] as\
    \ [Int]) == -1)"
  status: Exception
  stderr: 'tmp6tym_3d7/tmp6tym_3d7.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5f8e98ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5f8e681b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5f8e681988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5f8e6807b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6tym_3d7                        0x00005555a5da5552 <unavailable> + 5458

    5    libc.so.6                          0x00002b5f8eb76460 __libc_start_main +
    245

    6    tmp6tym_3d7                        0x00005555a5da51a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824340
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = -1\n    var maxValue = arr[0]\n    for i\
    \ in 1..<arr.count {\n        if arr[i] > maxValue {\n            maxIndex = i\n\
    \            maxValue = arr[i]\n        }\n    }\n    return maxIndex\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpi74aanc2/tmpi74aanc2.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9584fbbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9584cb2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9584cb2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9584cb17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpi74aanc2                        0x000055e3d1ca7552 <unavailable> + 5458

    5    libc.so.6                          0x00002b95851a7460 __libc_start_main +
    245

    6    tmpi74aanc2                        0x000055e3d1ca71a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824339
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var largest = -1\n    for i in 0..<arr.count - 1 {\n  \
    \      if arr[i] >= arr[i + 1] {\n            largest = i\n        }\n    }\n\
    \    return largest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr: [1,\
    \ 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmplog8icse/tmplog8icse.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae39b0d7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae39adceb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae39adce988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae39adcd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplog8icse                        0x000055be1d0a7552 <unavailable> + 5458

    5    libc.so.6                          0x00002ae39b2c3460 __libc_start_main +
    245

    6    tmplog8icse                        0x000055be1d0a71a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824339
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var max = 0\n    for i in 0..<arr.count {\n        if arr[i]\
    \ > arr[max] {\n            max = i\n        }\n    }\n    return max\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpy9jiugih/tmpy9jiugih.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae796625c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae79631cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae79631c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae79631b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpy9jiugih                        0x0000558bcc5de552 <unavailable> + 5458

    5    libc.so.6                          0x00002ae796811460 __libc_start_main +
    245

    6    tmpy9jiugih                        0x0000558bcc5de1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824339
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var index = -1\n    for i in 0..<arr.count - 1 {\n    \
    \    if arr[i] >= arr[i + 1] {\n            index = i\n        }\n    }\n    return\
    \ index\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(can_arrange(arr: [1, 2,\
    \ 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmps0cxtrj2/tmps0cxtrj2.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adf7946ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adf79165b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adf79165988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adf791647b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmps0cxtrj2                        0x000055844c69c552 <unavailable> + 5458

    5    libc.so.6                          0x00002adf7965a460 __libc_start_main +
    245

    6    tmps0cxtrj2                        0x000055844c69c1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824339
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = -1\n    for i in 0..<arr.count - 1 {\n \
    \       if arr[i] >= arr[i + 1] {\n            maxIndex = i\n        }\n    }\n\
    \    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp2b9_bhgs/tmp2b9_bhgs.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9ca4384c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9ca407bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9ca407b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9ca407a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2b9_bhgs                        0x000056412df75552 <unavailable> + 5458

    5    libc.so.6                          0x00002b9ca4570460 __libc_start_main +
    245

    6    tmp2b9_bhgs                        0x000056412df751a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824339
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var result = -1\n    for i in 1..<arr.count {\n       \
    \ if arr[i] <= arr[i - 1] {\n            result = i\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(can_arrange(arr: [1,\
    \ 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'Swift/Range.swift:743: Fatal error: Range requires lowerBound <= upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002ae5b232cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae5b2023561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ae5b2023286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ae5b202313c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ae5b2022bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmp4_pkis4h                        0x0000564f9ad969c2 <unavailable> + 6594

    6    tmp4_pkis4h                        0x0000564f9ad9681c <unavailable> + 6172

    7    libc.so.6                          0x00002ae5b2518460 __libc_start_main +
    245

    8    tmp4_pkis4h                        0x0000564f9ad961a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824340
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var max = arr[0]\n    var maxIndex = 0\n    for i in 1..<arr.count\
    \ {\n        if arr[i] > max {\n            max = arr[i]\n            maxIndex\
    \ = i\n        }\n    }\n    if maxIndex == arr.count - 1 {\n        return -1\n\
    \    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpe4th2eus/tmpe4th2eus.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8d60a7bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8d60772b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8d60772988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8d607717b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpe4th2eus                        0x000055805e431552 <unavailable> + 5458

    5    libc.so.6                          0x00002b8d60c67460 __libc_start_main +
    245

    6    tmpe4th2eus                        0x000055805e4311a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824339
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var result = -1\n    for i in 1..<arr.count {\n       \
    \ if arr[i] <= arr[i - 1] {\n            result = i\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(can_arrange(arr: [1,\
    \ 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'Swift/Range.swift:743: Fatal error: Range requires lowerBound <= upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002ae5b232cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae5b2023561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ae5b2023286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ae5b202313c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ae5b2022bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmp4_pkis4h                        0x0000564f9ad969c2 <unavailable> + 6594

    6    tmp4_pkis4h                        0x0000564f9ad9681c <unavailable> + 6172

    7    libc.so.6                          0x00002ae5b2518460 __libc_start_main +
    245

    8    tmp4_pkis4h                        0x0000564f9ad961a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824340
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var result = -1\n    for i in 1..<arr.count {\n       \
    \ if arr[i] < arr[i - 1] {\n            result = i - 1\n            break\n  \
    \      }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2,\
    \ 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\
    assert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr: [] as\
    \ [Int]) == -1)"
  status: Exception
  stderr: 'tmpghjismmf/tmpghjismmf.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1a6874ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1a68445b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1a68445988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1a684447b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpghjismmf                        0x0000559fd322c552 <unavailable> + 5458

    5    libc.so.6                          0x00002b1a6893a460 __libc_start_main +
    245

    6    tmpghjismmf                        0x0000559fd322c1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824339
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var result = -1\n    for i in 1..<arr.count {\n       \
    \ if arr[i] <= arr[i - 1] {\n            result = i\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(can_arrange(arr: [1,\
    \ 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'Swift/Range.swift:743: Fatal error: Range requires lowerBound <= upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002ae5b232cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae5b2023561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ae5b2023286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ae5b202313c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ae5b2022bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmp4_pkis4h                        0x0000564f9ad969c2 <unavailable> + 6594

    6    tmp4_pkis4h                        0x0000564f9ad9681c <unavailable> + 6172

    7    libc.so.6                          0x00002ae5b2518460 __libc_start_main +
    245

    8    tmp4_pkis4h                        0x0000564f9ad961a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824340
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var max = -1\n    var maxIndex = -1\n    for i in 0..<arr.count\
    \ {\n        if arr[i] > max {\n            max = arr[i]\n            maxIndex\
    \ = i\n        }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpdu_kc3z5/tmpdu_kc3z5.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8a35b12c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8a35809b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8a35809988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8a358087b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdu_kc3z5                        0x000055ff29872552 <unavailable> + 5458

    5    libc.so.6                          0x00002b8a35cfe460 __libc_start_main +
    245

    6    tmpdu_kc3z5                        0x000055ff298721a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824339
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var result = -1\n    for i in 1..<arr.count {\n       \
    \ if arr[i] < arr[i - 1] {\n            result = i - 1\n            break\n  \
    \      }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2,\
    \ 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\
    assert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr: [] as\
    \ [Int]) == -1)"
  status: Exception
  stderr: 'tmpghjismmf/tmpghjismmf.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1a6874ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1a68445b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1a68445988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1a684447b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpghjismmf                        0x0000559fd322c552 <unavailable> + 5458

    5    libc.so.6                          0x00002b1a6893a460 __libc_start_main +
    245

    6    tmpghjismmf                        0x0000559fd322c1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824339
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var max = -1\n    for i in 0..<arr.count - 1 {\n      \
    \  if arr[i] > arr[i + 1] {\n            max = i\n        }\n    }\n    return\
    \ max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(can_arrange(arr: [1, 2,\
    \ 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpk3xrq5op/tmpk3xrq5op.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8293f8dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8293c84b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8293c84988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8293c837b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpk3xrq5op                        0x000055b6a81ad552 <unavailable> + 5458

    5    libc.so.6                          0x00002b8294179460 __libc_start_main +
    245

    6    tmpk3xrq5op                        0x000055b6a81ad1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824339
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var max = -1\n    var maxIndex = -1\n    for i in 0..<arr.count\
    \ {\n        if arr[i] > max {\n            max = arr[i]\n            maxIndex\
    \ = i\n        }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpdu_kc3z5/tmpdu_kc3z5.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8a35b12c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8a35809b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8a35809988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8a358087b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdu_kc3z5                        0x000055ff29872552 <unavailable> + 5458

    5    libc.so.6                          0x00002b8a35cfe460 __libc_start_main +
    245

    6    tmpdu_kc3z5                        0x000055ff298721a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824339
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var max = 0\n    var maxIndex = -1\n    for i in 0..<arr.count\
    \ - 1 {\n        if arr[i] < arr[i + 1] && arr[i + 1] > max {\n            max\
    \ = arr[i + 1]\n            maxIndex = i + 1\n        }\n    }\n    return maxIndex\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpa1graj7i/tmpa1graj7i.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b92d7136c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b92d6e2db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b92d6e2d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b92d6e2c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpa1graj7i                        0x000055f285752552 <unavailable> + 5458

    5    libc.so.6                          0x00002b92d7322460 __libc_start_main +
    245

    6    tmpa1graj7i                        0x000055f2857521a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824339
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var max = 0\n    var maxIndex = -1\n    for i in 0..<arr.count\
    \ - 1 {\n        if arr[i] < arr[i + 1] && arr[i + 1] > max {\n            max\
    \ = arr[i + 1]\n            maxIndex = i + 1\n        }\n    }\n    return maxIndex\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpa1graj7i/tmpa1graj7i.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b92d7136c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b92d6e2db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b92d6e2d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b92d6e2c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpa1graj7i                        0x000055f285752552 <unavailable> + 5458

    5    libc.so.6                          0x00002b92d7322460 __libc_start_main +
    245

    6    tmpa1graj7i                        0x000055f2857521a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824339
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var max = -1\n    for i in 0..<arr.count - 1 {\n      \
    \  if arr[i] >= arr[i + 1] {\n            max = i\n        }\n    }\n    return\
    \ max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(can_arrange(arr: [1, 2,\
    \ 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpif_64jmd/tmpif_64jmd.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5e91c66c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5e9195db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5e9195d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5e9195c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpif_64jmd                        0x000055ae68b46552 <unavailable> + 5458

    5    libc.so.6                          0x00002b5e91e52460 __libc_start_main +
    245

    6    tmpif_64jmd                        0x000055ae68b461a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824339
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var max = -1\n    for i in 0..<arr.count - 1 {\n      \
    \  if arr[i] > arr[i + 1] {\n            if i > max {\n                max = i\n\
    \            }\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpr149cndy/tmpr149cndy.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aee454c6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aee451bdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aee451bd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aee451bc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpr149cndy                        0x0000557e7c904552 <unavailable> + 5458

    5    libc.so.6                          0x00002aee456b2460 __libc_start_main +
    245

    6    tmpr149cndy                        0x0000557e7c9041a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824339
