name: HumanEval_10_make_palindrome
language: swift
prompt: "\n/// Find the shortest palindrome that begins with a supplied string.\n\
  /// Algorithm idea is simple:\n/// - Find the longest postfix of supplied string\
  \ that is a palindrome.\n/// - Append to the end of the string reverse of a string\
  \ prefix that comes before the palindromic suffix.\n/// >>> make_palindrome(string:\
  \ \"\")\n/// \"\"\n/// >>> make_palindrome(string: \"cat\")\n/// \"catac\"\n///\
  \ >>> make_palindrome(string: \"cata\")\n/// \"catac\"\nfunc make_palindrome(string:\
  \ String) -> String {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(make_palindrome(string: \"\") == \"\")\n\
  assert(make_palindrome(string: \"x\") == \"x\")\nassert(make_palindrome(string:\
  \ \"xyz\") == \"xyzyx\")\nassert(make_palindrome(string: \"xyx\") == \"xyx\")\n\
  assert(make_palindrome(string: \"jerry\") == \"jerryrrej\")"
completions: ["    let string_length = string.count\n    if string_length == 0 {\n\
    \        return \"\"\n    }\n    let string_chars = Array(string)\n    var longest_palindrome_length\
    \ = 0\n    var longest_palindrome_start = 0\n    for i in 0..<string_length {\n\
    \        let palindrome_length = longest_palindrome_length_at(string_chars: string_chars,\
    \ string_length: string_length, start: i)\n        if palindrome_length > longest_palindrome_length\
    \ {\n            longest_palindrome_length = palindrome_length\n            longest_palindrome_start\
    \ = i\n        }\n    }\n    let prefix_start = longest_palindrome_start + longest_palindrome_length\n\
    \    let prefix_end = string_length\n    let prefix = String(string_chars[prefix_start..<prefix_end])\n\
    \    let prefix_reversed = String(prefix.reversed())\n    return string + prefix_reversed",
  "    let string_length = string.count\n    if string_length == 0 {\n        return\
    \ \"\"\n    }\n    let string_array = Array(string)\n    var longest_palindrome_length\
    \ = 0\n    var longest_palindrome_index = 0\n    for i in 0..<string_length {\n\
    \        let palindrome_length = palindrome_length_at_index(string_array: string_array,\
    \ index: i)\n        if palindrome_length > longest_palindrome_length {\n    \
    \        longest_palindrome_length = palindrome_length\n            longest_palindrome_index\
    \ = i\n        }\n    }\n    var result = string\n    let prefix_length = string_length\
    \ - longest_palindrome_length\n    let prefix_start = string.index(string.startIndex,\
    \ offsetBy: prefix_length)\n    let prefix = String(string[prefix_start..<string.endIndex])\n\
    \    result.append(String(prefix.reversed()))\n    return result", "    let string_length\
    \ = string.count\n    if string_length == 0 {\n        return \"\"\n    }\n  \
    \  if string_length == 1 {\n        return string\n    }\n    let string_array\
    \ = Array(string)\n    var longest_palindrome_length = 0\n    var longest_palindrome_start\
    \ = 0\n    for i in 0..<string_length {\n        let palindrome_length = longest_palindrome_length_at(string_array:\
    \ string_array, start: i)\n        if palindrome_length > longest_palindrome_length\
    \ {\n            longest_palindrome_length = palindrome_length\n            longest_palindrome_start\
    \ = i\n        }\n    }\n    let prefix_start = longest_palindrome_start + longest_palindrome_length\n\
    \    let prefix_end = string_length\n    let prefix = String(string_array[prefix_start..<prefix_end])\n\
    \    let prefix_reversed = String(prefix.reversed())\n    return string + prefix_reversed",
  "    let string_length = string.count\n    if string_length == 0 {\n        return\
    \ \"\"\n    }\n    let string_characters = Array(string)\n    var longest_palindrome_length\
    \ = 0\n    var longest_palindrome_start = 0\n    for i in 0..<string_length {\n\
    \        let palindrome_length = get_palindrome_length(string_characters: string_characters,\
    \ start: i)\n        if palindrome_length > longest_palindrome_length {\n    \
    \        longest_palindrome_length = palindrome_length\n            longest_palindrome_start\
    \ = i\n        }\n    }\n    let prefix_start = longest_palindrome_start + longest_palindrome_length\n\
    \    let prefix_length = string_length - prefix_start\n    let prefix = String(string_characters[prefix_start..<prefix_start\
    \ + prefix_length])\n    let reversed_prefix = String(prefix.reversed())\n   \
    \ return string + reversed_prefix", "    let string_length = string.count\n  \
    \  if string_length == 0 {\n        return \"\"\n    }\n    let string_array =\
    \ Array(string)\n    var longest_palindrome_length = 0\n    var longest_palindrome_start\
    \ = 0\n    for i in 0..<string_length {\n        let palindrome_length = longest_palindrome_length_at(string_array:\
    \ string_array, string_length: string_length, start: i)\n        if palindrome_length\
    \ > longest_palindrome_length {\n            longest_palindrome_length = palindrome_length\n\
    \            longest_palindrome_start = i\n        }\n    }\n    let prefix_start\
    \ = longest_palindrome_start + longest_palindrome_length\n    let prefix_end =\
    \ string_length\n    let prefix = String(string_array[prefix_start..<prefix_end])\n\
    \    let prefix_reversed = String(prefix.reversed())\n    return string + prefix_reversed",
  "    let string_length = string.count\n    let string_chars = Array(string)\n  \
    \  let string_chars_reversed = string_chars.reversed()\n    var palindrome_suffix_length\
    \ = 0\n    var palindrome_suffix_length_max = 0\n    var palindrome_suffix_length_max_index\
    \ = 0\n    for i in 0..<string_length {\n        if string_chars[i] == string_chars_reversed[i]\
    \ {\n            palindrome_suffix_length += 1\n        } else {\n           \
    \ palindrome_suffix_length = 0\n        }\n        if palindrome_suffix_length\
    \ > palindrome_suffix_length_max {\n            palindrome_suffix_length_max =\
    \ palindrome_suffix_length\n            palindrome_suffix_length_max_index = i\n\
    \        }\n    }\n    let palindrome_prefix_length = string_length - palindrome_suffix_length_max_index\
    \ - 1\n    let palindrome_prefix = String(string_chars[0..<palindrome_prefix_length])\n\
    \    let palindrome_prefix_reversed = String(palindrome_prefix.reversed())\n \
    \   return string + palindrome_prefix_reversed", "    let string_length = string.count\n\
    \    let string_characters = Array(string)\n    var longest_palindrome_length\
    \ = 0\n    var longest_palindrome_end_index = 0\n    var is_palindrome = Array(repeating:\
    \ Array(repeating: false, count: string_length), count: string_length)\n    for\
    \ i in 0..<string_length {\n        is_palindrome[i][i] = true\n    }\n    for\
    \ i in 0..<string_length - 1 {\n        if string_characters[i] == string_characters[i\
    \ + 1] {\n            is_palindrome[i][i + 1] = true\n            longest_palindrome_length\
    \ = 2\n            longest_palindrome_end_index = i + 1\n        }\n    }\n  \
    \  for i in 3...string_length {\n        for j in 0..<string_length - i + 1 {\n\
    \            let k = j + i - 1\n            if string_characters[j] == string_characters[k]\
    \ && is_palindrome[j + 1][k - 1] {\n                is_palindrome[j][k] = true\n\
    \                longest_palindrome_length = i\n                longest_palindrome_end_index\
    \ = k\n            }\n        }\n    }\n    let palindrome_prefix = String(string_characters[0..<(string_length\
    \ - longest_palindrome_length)])\n    let palindrome_prefix_reversed = String(palindrome_prefix.reversed())\n\
    \    return palindrome_prefix + palindrome_prefix_reversed + String(string_characters[longest_palindrome_end_index])",
  "    let string_length = string.count\n    if string_length == 0 {\n        return\
    \ \"\"\n    }\n    let string_chars = Array(string)\n    var longest_palindrome_length\
    \ = 0\n    var longest_palindrome_start = 0\n    for i in 0..<string_length {\n\
    \        let palindrome_length = palindrome_length_at(string_chars: string_chars,\
    \ start: i)\n        if palindrome_length > longest_palindrome_length {\n    \
    \        longest_palindrome_length = palindrome_length\n            longest_palindrome_start\
    \ = i\n        }\n    }\n    let prefix_start = longest_palindrome_start + longest_palindrome_length\n\
    \    let prefix_end = string_length\n    let prefix = String(string_chars[prefix_start..<prefix_end])\n\
    \    let reversed_prefix = String(prefix.reversed())\n    return string + reversed_prefix",
  "    let string_length = string.count\n    let string_chars = Array(string)\n  \
    \  var longest_palindrome_length = 0\n    var longest_palindrome_index = 0\n \
    \   for i in 0..<string_length {\n        let palindrome_length = palindrome_length_at_index(string_chars:\
    \ string_chars, index: i)\n        if palindrome_length > longest_palindrome_length\
    \ {\n            longest_palindrome_length = palindrome_length\n            longest_palindrome_index\
    \ = i\n        }\n    }\n    let palindrome_prefix = String(string_chars[0..<(longest_palindrome_index\
    \ - longest_palindrome_length + 1)])\n    let palindrome_suffix = String(string_chars[(longest_palindrome_index\
    \ + 1)..<string_length])\n    return palindrome_prefix + palindrome_suffix + String(palindrome_prefix.reversed())",
  "    let string = string.lowercased()\n    let string_length = string.count\n  \
    \  if string_length == 0 {\n        return \"\"\n    }\n    let string_array =\
    \ Array(string)\n    let reversed_string_array = string_array.reversed()\n   \
    \ var longest_palindrome_suffix_length = 0\n    for i in 0..<string_length {\n\
    \        let string_suffix = String(string_array[i..<string_length])\n       \
    \ let reversed_string_suffix = String(reversed_string_array[i..<string_length])\n\
    \        if string_suffix == reversed_string_suffix {\n            longest_palindrome_suffix_length\
    \ = string_length - i\n            break\n        }\n    }\n    let string_prefix\
    \ = String(string_array[0..<string_length - longest_palindrome_suffix_length])\n\
    \    let reversed_string_prefix = String(reversed_string_array[0..<string_length\
    \ - longest_palindrome_suffix_length])\n    return string + reversed_string_prefix",
  "    let string_length = string.count\n    if string_length == 0 {\n        return\
    \ \"\"\n    }\n    let string_array = Array(string)\n    var longest_palindrome_length\
    \ = 0\n    var longest_palindrome_index = 0\n    var palindrome_length = 0\n \
    \   var palindrome_index = 0\n    for i in 0..<string_length {\n        // Check\
    \ for palindrome of odd length.\n        palindrome_length = 0\n        palindrome_index\
    \ = i\n        while palindrome_index >= 0 && palindrome_index + palindrome_length\
    \ < string_length &&\n            string_array[palindrome_index] == string_array[palindrome_index\
    \ + palindrome_length] {\n            palindrome_length += 1\n            palindrome_index\
    \ -= 1\n        }\n        palindrome_length -= 1\n        palindrome_index +=\
    \ 1\n        if palindrome_length > longest_palindrome_length {\n            longest_palindrome_length\
    \ = palindrome_length\n            longest_palindrome_index = palindrome_index\n\
    \        }\n        // Check for palindrome of even length.\n        palindrome_length\
    \ = 0\n        palindrome_index = i\n        while palindrome_index >= 0 && palindrome_index\
    \ + palindrome_length + 1 < string_length &&\n            string_array[palindrome_index]\
    \ == string_array[palindrome_index + palindrome_length + 1] {\n            palindrome_length\
    \ += 1\n            palindrome_index -= 1\n        }\n        palindrome_length\
    \ -= 1\n        palindrome_index += 1\n        if palindrome_length > longest_palindrome_length\
    \ {\n            longest_palindrome_length = palindrome_length\n            longest_palindrome_index\
    \ = palindrome_index\n        }\n    }\n    var result = string\n    for i in\
    \ 0..<string_length - longest_palindrome_length - longest_palindrome_index {\n\
    \        result.append(string_array[longest_palindrome_index + longest_palindrome_length",
  "    let string = string.lowercased()\n    let reversed = String(string.reversed())\n\
    \    let suffix = reversed.suffix(string.count - reversed.commonPrefix(with: string).count)\n\
    \    return string + String(suffix.reversed())", "    let reversed = String(string.reversed())\n\
    \    let concatenated = string + reversed\n    let lps = longest_palindromic_substring(string:\
    \ concatenated)\n    let prefix = String(string.prefix(string.count - lps.count))\n\
    \    let reversed_prefix = String(prefix.reversed())\n    return string + reversed_prefix",
  "    let reversed = String(string.reversed())\n    let combined = string + \"#\"\
    \ + reversed\n    let lps = longest_prefix_suffix(string: combined)\n    let prefix\
    \ = String(string.prefix(string.count - lps.last!))\n    return string + String(prefix.reversed())",
  "    let string = string.characters\n    let length = string.count\n    if length\
    \ == 0 {\n        return \"\"\n    }\n    var i = 0\n    var j = length - 1\n\
    \    while i < j {\n        if string[string.index(string.startIndex, offsetBy:\
    \ i)] != string[string.index(string.startIndex, offsetBy: j)] {\n            break\n\
    \        }\n        i += 1\n        j -= 1\n    }\n    if i >= j {\n        return\
    \ string.map { String($0) }.joined()\n    }\n    let prefix = string[string.index(string.startIndex,\
    \ offsetBy: 0)..<string.index(string.startIndex, offsetBy: i)]\n    let suffix\
    \ = string[string.index(string.startIndex, offsetBy: j + 1)..<string.index(string.startIndex,\
    \ offsetBy: length)]\n    let reversed_prefix = String(prefix.reversed())\n  \
    \  return string.map { String($0) }.joined() + reversed_prefix", "    let string_length\
    \ = string.count\n    let string_chars = Array(string)\n    var suffix_length\
    \ = 0\n    while suffix_length < string_length {\n        if is_palindrome(string:\
    \ string_chars, start: 0, end: string_length - suffix_length - 1) {\n        \
    \    break\n        }\n        suffix_length += 1\n    }\n    var prefix_length\
    \ = 0\n    while prefix_length < string_length - suffix_length {\n        if is_palindrome(string:\
    \ string_chars, start: prefix_length, end: string_length - 1) {\n            break\n\
    \        }\n        prefix_length += 1\n    }\n    var result = string\n    for\
    \ i in 0..<prefix_length {\n        result.append(string_chars[string_length -\
    \ prefix_length + i])\n    }\n    return result", "    let reversed = String(string.reversed())\n\
    \    let longest_common_suffix = longest_common_substring(string1: string, string2:\
    \ reversed)\n    let prefix = String(string.dropLast(longest_common_suffix.count))\n\
    \    return string + reversed.dropFirst(prefix.count)", "    let reversed = String(string.reversed())\n\
    \    let string_length = string.count\n    let reversed_length = reversed.count\n\
    \    let max_length = string_length + reversed_length\n    let string_array =\
    \ Array(string)\n    let reversed_array = Array(reversed)\n    var z = [Int](repeating:\
    \ 0, count: max_length)\n    var l = 0\n    var r = 0\n    for i in 1..<max_length\
    \ {\n        if i > r {\n            l = r = i\n            while r < max_length\
    \ && string_array[r - l] == reversed_array[r] {\n                r += 1\n    \
    \        }\n            z[i] = r - l\n            r -= 1\n        } else {\n \
    \           let k = i - l\n            if z[k] < r - i + 1 {\n               \
    \ z[i] = z[k]\n            } else {\n                l = i\n                while\
    \ r < max_length && string_array[r - l] == reversed_array[r] {\n             \
    \       r += 1\n                }\n                z[i] = r - l\n            \
    \    r -= 1\n            }\n        }\n    }\n    var max_z = 0\n    var max_z_index\
    \ = 0\n    for i in string_length..<max_length {\n        if z[i] > max_z {\n\
    \            max_z = z[i]\n            max_z_index = i\n        }\n    }\n   \
    \ let prefix = String(string_array[0..<(string_length - max_z)])\n    let reversed_prefix\
    \ = String(prefix.reversed())\n    return string + reversed_prefix", "    let\
    \ string_length = string.count\n    if string_length == 0 {\n        return \"\
    \"\n    }\n    let string_array = Array(string)\n    var longest_palindrome_length\
    \ = 0\n    var longest_palindrome_index = 0\n    for i in 0..<string_length {\n\
    \        let palindrome_length = longest_palindrome_length_at_index(string_array:\
    \ string_array, index: i)\n        if palindrome_length > longest_palindrome_length\
    \ {\n            longest_palindrome_length = palindrome_length\n            longest_palindrome_index\
    \ = i\n        }\n    }\n    let prefix_length = string_length - longest_palindrome_length\n\
    \    let prefix = String(string_array[0..<prefix_length])\n    let reversed_prefix\
    \ = String(prefix.reversed())\n    return string + reversed_prefix", "    let\
    \ string_length = string.count\n    if string_length == 0 {\n        return \"\
    \"\n    }\n    let string_array = Array(string)\n    var longest_palindrome_length\
    \ = 0\n    var longest_palindrome_index = 0\n    for i in 0..<string_length {\n\
    \        let palindrome_length = max(\n            palindrome_length_at_index(string_array:\
    \ string_array, index: i, string_length: string_length),\n            palindrome_length_at_index(string_array:\
    \ string_array, index: i + 1, string_length: string_length)\n        )\n     \
    \   if palindrome_length > longest_palindrome_length {\n            longest_palindrome_length\
    \ = palindrome_length\n            longest_palindrome_index = i\n        }\n \
    \   }\n    let prefix_length = string_length - longest_palindrome_length\n   \
    \ let prefix = String(string_array[0..<prefix_length])\n    let reversed_prefix\
    \ = String(prefix.reversed())\n    return prefix + reversed_prefix + string"]
stop_tokens:
- "\n}"
