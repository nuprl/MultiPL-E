language: swift
name: HumanEval_67_fruit_distribution
results:
- exit_code: 1
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    var totalFruits = 0\n    var totalApples = 0\n    var totalOranges\
    \ = 0\n    var totalMangos = 0\n    var totalFruitsInBasket = 0\n    var totalApplesInBasket\
    \ = 0\n    var totalOrangesInBasket = 0\n    var totalMangosInBasket = 0\n   \
    \ var totalFruitsInBasketString = \"\"\n    var totalApplesInBasketString = \"\
    \"\n    var totalOrangesInBasketString = \"\"\n    var totalMangosInBasketString\
    \ = \"\"\n    var totalFruitsString = \"\"\n    var totalApplesString = \"\"\n\
    \    var totalOrangesString = \"\"\n    var totalMangosString = \"\"\n    var\
    \ totalFruitsInBasketArray = [Character]()\n    var totalApplesInBasketArray =\
    \ [Character]()\n    var totalOrangesInBasketArray = [Character]()\n    var totalMangosInBasketArray\
    \ = [Character]()\n    var totalFruitsArray = [Character]()\n    var totalApplesArray\
    \ = [Character]()\n    var totalOrangesArray = [Character]()\n    var totalMangosArray\
    \ = [Character]()\n    var totalFruitsInBasketArrayInt = [Int]()\n    var totalApplesInBasketArrayInt\
    \ = [Int]()\n    var totalOrangesInBasketArrayInt = [Int]()\n    var totalMangosInBasketArrayInt\
    \ = [Int]()\n    var totalFruitsArrayInt = [Int]()\n    var totalApplesArrayInt\
    \ = [Int]()\n    var totalOrangesArrayInt = [Int]()\n    var totalMangosArrayInt\
    \ = [Int]()\n    var totalFruitsInBasketInt = 0\n    var totalApplesInBasketInt\
    \ = 0\n    var totalOrangesInBasketInt = 0\n    var totalMangosInBasketInt = 0\n\
    \    var totalFruitsInt = 0\n    var totalApplesInt = 0\n    var totalOrangesInt\
    \ = 0\n    var totalMangosInt = 0\n    var totalFruitsInBasketIntString = \"\"\
    \n    var totalApplesInBasketIntString = \"\"\n    var totalOrangesInB\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fruit_distribution(s: \"5 apples and 6 oranges\"\
    , n: 19) == 8)\nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21)\
    \ == 10)\nassert(fruit_distribution(s: \"0 apples and 1 oranges\", n: 3) == 2)\n\
    assert(fruit_distribution(s: \"1 apples and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s:\
    \ \"2 apples and 3 oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"\
    2 apples and 3 oranges\", n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples\
    \ and 100 oranges\", n: 120) == 19)"
  status: SyntaxError
  stderr: "/tmp/tmph46mmz5c.swift:59:9: error: type annotation missing in pattern\n\
    \    var totalOrangesInB\n        ^\n"
  stdout: ''
  timestamp: 1659824638
- exit_code: -4
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    // write your code here\n    return 0\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 19)\
    \ == 8)\nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21) == 10)\n\
    assert(fruit_distribution(s: \"0 apples and 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s:\
    \ \"1 apples and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"2 apples and\
    \ 3 oranges\", n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples and 100 oranges\"\
    , n: 120) == 19)"
  status: Exception
  stderr: 'tmpsj1fbkez/tmpsj1fbkez.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab8a4bddc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab8a48d4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab8a48d4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab8a48d37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsj1fbkez                        0x00005555a8246269 <unavailable> + 4713

    5    libc.so.6                          0x00002ab8a4dc9460 __libc_start_main +
    245

    6    tmpsj1fbkez                        0x00005555a8245ee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1659824639
- exit_code: 1
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    var total_apples = 0\n    var total_oranges = 0\n    var total_mangoes\
    \ = 0\n    var total_fruits = 0\n    var total_fruits_string = \"\"\n    var total_apples_string\
    \ = \"\"\n    var total_oranges_string = \"\"\n    var total_mangoes_string =\
    \ \"\"\n    var total_fruits_array = [String]()\n    var total_apples_array =\
    \ [String]()\n    var total_oranges_array = [String]()\n    var total_mangoes_array\
    \ = [String]()\n    var total_fruits_array_count = 0\n    var total_apples_array_count\
    \ = 0\n    var total_oranges_array_count = 0\n    var total_mangoes_array_count\
    \ = 0\n    var total_fruits_array_index = 0\n    var total_apples_array_index\
    \ = 0\n    var total_oranges_array_index = 0\n    var total_mangoes_array_index\
    \ = 0\n    var total_fruits_array_index_count = 0\n    var total_apples_array_index_count\
    \ = 0\n    var total_oranges_array_index_count = 0\n    var total_mangoes_array_index_count\
    \ = 0\n    var total_fruits_array_index_count_string = \"\"\n    var total_apples_array_index_count_string\
    \ = \"\"\n    var total_oranges_array_index_count_string = \"\"\n    var total_mangoes_array_index_count_string\
    \ = \"\"\n    var total_fruits_array_index_count_int = 0\n    var total_apples_array_index_count_int\
    \ = 0\n    var total_oranges_array_index_count_int = 0\n    var total_mangoes_array_index_count_int\
    \ = 0\n    var total_fruits_array_index_count_int_string = \"\"\n    var total_apples_array_index_count_int_string\
    \ = \"\"\n    var total_oranges_array_index_count_int_string = \"\"\n    var total_mangoes_array_\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fruit_distribution(s: \"5 apples and 6 oranges\"\
    , n: 19) == 8)\nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21)\
    \ == 10)\nassert(fruit_distribution(s: \"0 apples and 1 oranges\", n: 3) == 2)\n\
    assert(fruit_distribution(s: \"1 apples and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s:\
    \ \"2 apples and 3 oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"\
    2 apples and 3 oranges\", n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples\
    \ and 100 oranges\", n: 120) == 19)"
  status: SyntaxError
  stderr: "/tmp/tmpyzbm10y4.swift:52:9: error: type annotation missing in pattern\n\
    \    var total_mangoes_array_\n        ^\n"
  stdout: ''
  timestamp: 1659824638
- exit_code: -4
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    // Write your code here\n    return 0\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 19)\
    \ == 8)\nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21) == 10)\n\
    assert(fruit_distribution(s: \"0 apples and 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s:\
    \ \"1 apples and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"2 apples and\
    \ 3 oranges\", n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples and 100 oranges\"\
    , n: 120) == 19)"
  status: Exception
  stderr: 'tmpfincxi2h/tmpfincxi2h.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b42dd89cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b42dd593b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b42dd593988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b42dd5927b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfincxi2h                        0x000055972c5b8269 <unavailable> + 4713

    5    libc.so.6                          0x00002b42dda88460 __libc_start_main +
    245

    6    tmpfincxi2h                        0x000055972c5b7ee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1659824639
- exit_code: -4
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    let arr = s.split(separator: \" \")\n    let apples = Int(arr[0])!\n\
    \    let oranges = Int(arr[2])!\n    let mangoes = n - apples - oranges\n    return\
    \ mangoes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19) == 8)\nassert(fruit_distribution(s: \"5 apples\
    \ and 6 oranges\", n: 21) == 10)\nassert(fruit_distribution(s: \"0 apples and\
    \ 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"1 apples and 0 oranges\"\
    , n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\", n: 100)\
    \ == 95)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\", n: 5) == 0)\n\
    assert(fruit_distribution(s: \"1 apples and 100 oranges\", n: 120) == 19)"
  status: Exception
  stderr: 'tmpyvix5341/tmpyvix5341.swift:19: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002b4021a63c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b402175a561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b402175a286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b402175a13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b4021759bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpyvix5341                        0x000055f534d7febd <unavailable> + 7869

    6    tmpyvix5341                        0x000055f534d7f5fb <unavailable> + 5627

    7    libc.so.6                          0x00002b4021c4f460 __libc_start_main +
    245

    8    tmpyvix5341                        0x000055f534d7f2f9 <unavailable> + 4857

    '
  stdout: ''
  timestamp: 1659824639
- exit_code: -4
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    let arr = s.split(separator: \" \")\n    let apples = Int(arr[0])!\n\
    \    let oranges = Int(arr[2])!\n    let mangoes = n - apples - oranges\n    return\
    \ mangoes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19) == 8)\nassert(fruit_distribution(s: \"5 apples\
    \ and 6 oranges\", n: 21) == 10)\nassert(fruit_distribution(s: \"0 apples and\
    \ 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"1 apples and 0 oranges\"\
    , n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\", n: 100)\
    \ == 95)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\", n: 5) == 0)\n\
    assert(fruit_distribution(s: \"1 apples and 100 oranges\", n: 120) == 19)"
  status: Exception
  stderr: 'tmpyvix5341/tmpyvix5341.swift:19: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002b4021a63c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b402175a561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b402175a286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b402175a13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b4021759bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpyvix5341                        0x000055f534d7febd <unavailable> + 7869

    6    tmpyvix5341                        0x000055f534d7f5fb <unavailable> + 5627

    7    libc.so.6                          0x00002b4021c4f460 __libc_start_main +
    245

    8    tmpyvix5341                        0x000055f534d7f2f9 <unavailable> + 4857

    '
  stdout: ''
  timestamp: 1659824639
- exit_code: 1
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    var s = s\n    let apples = s.components(separatedBy: \" apples\
    \ and \")[0]\n    s = s.components(separatedBy: \" apples and \")[1]\n    let\
    \ oranges = s.components(separatedBy: \" oranges\")[0]\n    return n - Int(apples)!\
    \ - Int(oranges)!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19) == 8)\nassert(fruit_distribution(s: \"5 apples\
    \ and 6 oranges\", n: 21) == 10)\nassert(fruit_distribution(s: \"0 apples and\
    \ 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"1 apples and 0 oranges\"\
    , n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\", n: 100)\
    \ == 95)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\", n: 5) == 0)\n\
    assert(fruit_distribution(s: \"1 apples and 100 oranges\", n: 120) == 19)"
  status: SyntaxError
  stderr: "/tmp/tmphlts767h.swift:18:20: error: value of type 'String' has no member\
    \ 'components'\n    let apples = s.components(separatedBy: \" apples and \")[0]\n\
    \                 ~ ^~~~~~~~~~\n/tmp/tmphlts767h.swift:19:11: error: value of\
    \ type 'String' has no member 'components'\n    s = s.components(separatedBy:\
    \ \" apples and \")[1]\n        ~ ^~~~~~~~~~\n/tmp/tmphlts767h.swift:20:21: error:\
    \ value of type 'String' has no member 'components'\n    let oranges = s.components(separatedBy:\
    \ \" oranges\")[0]\n                  ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824638
- exit_code: -4
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    // Write your code here\n    var arr = s.split(separator: \" \"\
    )\n    var apples = Int(arr[0])!\n    var oranges = Int(arr[2])!\n    var mango\
    \ = n - apples - oranges\n    return mango\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 19) == 8)\n\
    assert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21) == 10)\nassert(fruit_distribution(s:\
    \ \"0 apples and 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"1 apples\
    \ and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples and 3\
    \ oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\"\
    , n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples and 100 oranges\", n: 120)\
    \ == 19)"
  status: Exception
  stderr: 'tmpou2i4b8z/tmpou2i4b8z.swift:20: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002b03b3d55c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b03b3a4c561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b03b3a4c286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b03b3a4c13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b03b3a4bbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpou2i4b8z                        0x000056191e082faa <unavailable> + 8106

    6    tmpou2i4b8z                        0x000056191e08264b <unavailable> + 5707

    7    libc.so.6                          0x00002b03b3f41460 __libc_start_main +
    245

    8    tmpou2i4b8z                        0x000056191e082349 <unavailable> + 4937

    '
  stdout: ''
  timestamp: 1659824639
- exit_code: -4
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    let arr = s.split(separator: \" \")\n    let apples = Int(arr[0])!\n\
    \    let oranges = Int(arr[2])!\n    let mangoes = n - apples - oranges\n    return\
    \ mangoes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19) == 8)\nassert(fruit_distribution(s: \"5 apples\
    \ and 6 oranges\", n: 21) == 10)\nassert(fruit_distribution(s: \"0 apples and\
    \ 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"1 apples and 0 oranges\"\
    , n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\", n: 100)\
    \ == 95)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\", n: 5) == 0)\n\
    assert(fruit_distribution(s: \"1 apples and 100 oranges\", n: 120) == 19)"
  status: Exception
  stderr: 'tmpyvix5341/tmpyvix5341.swift:19: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002b4021a63c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b402175a561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b402175a286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b402175a13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b4021759bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpyvix5341                        0x000055f534d7febd <unavailable> + 7869

    6    tmpyvix5341                        0x000055f534d7f5fb <unavailable> + 5627

    7    libc.so.6                          0x00002b4021c4f460 __libc_start_main +
    245

    8    tmpyvix5341                        0x000055f534d7f2f9 <unavailable> + 4857

    '
  stdout: ''
  timestamp: 1659824639
- exit_code: -4
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    let arr = s.split(separator: \" \")\n    let apples = Int(arr[0])!\n\
    \    let oranges = Int(arr[2])!\n    return n - apples - oranges\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fruit_distribution(s: \"5 apples and 6 oranges\"\
    , n: 19) == 8)\nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21)\
    \ == 10)\nassert(fruit_distribution(s: \"0 apples and 1 oranges\", n: 3) == 2)\n\
    assert(fruit_distribution(s: \"1 apples and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s:\
    \ \"2 apples and 3 oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"\
    2 apples and 3 oranges\", n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples\
    \ and 100 oranges\", n: 120) == 19)"
  status: Exception
  stderr: 'tmprd31g2wb/tmprd31g2wb.swift:19: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002afc720d9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afc71dd0561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002afc71dd0286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002afc71dd013c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002afc71dcfbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmprd31g2wb                        0x000055f789418eaa <unavailable> + 7850

    6    tmprd31g2wb                        0x000055f7894185fb <unavailable> + 5627

    7    libc.so.6                          0x00002afc722c5460 __libc_start_main +
    245

    8    tmprd31g2wb                        0x000055f7894182f9 <unavailable> + 4857

    '
  stdout: ''
  timestamp: 1659824639
- exit_code: 1
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    let fruits = s.components(separatedBy: \" and \")\n    let apples\
    \ = Int(fruits[0].components(separatedBy: \" \")[0])!\n    let oranges = Int(fruits[1].components(separatedBy:\
    \ \" \")[0])!\n    return n - apples - oranges\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 19) == 8)\n\
    assert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21) == 10)\nassert(fruit_distribution(s:\
    \ \"0 apples and 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"1 apples\
    \ and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples and 3\
    \ oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\"\
    , n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples and 100 oranges\", n: 120)\
    \ == 19)"
  status: SyntaxError
  stderr: "/tmp/tmprln0hg_6.swift:17:20: error: value of type 'String' has no member\
    \ 'components'\n    let fruits = s.components(separatedBy: \" and \")\n      \
    \           ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824638
- exit_code: -4
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    let fruits = s.split(separator: \" \")\n    let apples = Int(fruits[0])!\n\
    \    let oranges = Int(fruits[2])!\n    return n - apples - oranges\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fruit_distribution(s: \"5 apples and 6 oranges\"\
    , n: 19) == 8)\nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21)\
    \ == 10)\nassert(fruit_distribution(s: \"0 apples and 1 oranges\", n: 3) == 2)\n\
    assert(fruit_distribution(s: \"1 apples and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s:\
    \ \"2 apples and 3 oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"\
    2 apples and 3 oranges\", n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples\
    \ and 100 oranges\", n: 120) == 19)"
  status: Exception
  stderr: 'tmpybd6fg3_/tmpybd6fg3_.swift:19: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002b882f3cec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b882f0c5561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b882f0c5286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b882f0c513c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b882f0c4bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpybd6fg3_                        0x000055a3c316ceaa <unavailable> + 7850

    6    tmpybd6fg3_                        0x000055a3c316c5fb <unavailable> + 5627

    7    libc.so.6                          0x00002b882f5ba460 __libc_start_main +
    245

    8    tmpybd6fg3_                        0x000055a3c316c2f9 <unavailable> + 4857

    '
  stdout: ''
  timestamp: 1659824639
- exit_code: 1
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    var numberOfMangoes = 0\n    var numberOfApples = 0\n    var numberOfOranges\
    \ = 0\n    var numberOfFruits = 0\n    var numberOfFruitsString = \"\"\n    var\
    \ numberOfApplesString = \"\"\n    var numberOfOrangesString = \"\"\n    var numberOfMangoesString\
    \ = \"\"\n    var numberOfFruitsStringArray = [String]()\n    var numberOfApplesStringArray\
    \ = [String]()\n    var numberOfOrangesStringArray = [String]()\n    var numberOfMangoesStringArray\
    \ = [String]()\n    var numberOfFruitsArray = [Int]()\n    var numberOfApplesArray\
    \ = [Int]()\n    var numberOfOrangesArray = [Int]()\n    var numberOfMangoesArray\
    \ = [Int]()\n    var numberOfFruitsInt = 0\n    var numberOfApplesInt = 0\n  \
    \  var numberOfOrangesInt = 0\n    var numberOfMangoesInt = 0\n    var numberOfFruitsIntArray\
    \ = [Int]()\n    var numberOfApplesIntArray = [Int]()\n    var numberOfOrangesIntArray\
    \ = [Int]()\n    var numberOfMangoesIntArray = [Int]()\n    var numberOfFruitsIntArray2\
    \ = [Int]()\n    var numberOfApplesIntArray2 = [Int]()\n    var numberOfOrangesIntArray2\
    \ = [Int]()\n    var numberOfMangoesIntArray2 = [Int]()\n    var numberOfFruitsInt2\
    \ = 0\n    var numberOfApplesInt2 = 0\n    var numberOfOrangesInt2 = 0\n    var\
    \ numberOfMangoesInt2 = 0\n    var numberOfFruitsInt3 = 0\n    var numberOfApplesInt3\
    \ = 0\n    var numberOfOrangesInt3 = 0\n    var numberOfMangoesInt3 = 0\n    var\
    \ numberOfFruitsInt4 = 0\n    var numberOfApplesInt4 = 0\n    var numberOfOrangesInt4\
    \ = 0\n    var numberOfMangoesInt4 = 0\n    var numberOfFruitsInt5 = 0\n    var\
    \ numberOfApplesInt5 = 0\n    var numberOfOrangesInt\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 19)\
    \ == 8)\nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21) == 10)\n\
    assert(fruit_distribution(s: \"0 apples and 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s:\
    \ \"1 apples and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"2 apples and\
    \ 3 oranges\", n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples and 100 oranges\"\
    , n: 120) == 19)"
  status: SyntaxError
  stderr: "/tmp/tmp7l3zmg84.swift:59:9: error: type annotation missing in pattern\n\
    \    var numberOfOrangesInt\n        ^\n"
  stdout: ''
  timestamp: 1659824638
- exit_code: -4
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    var result = 0\n    let arr = s.split(separator: \" \")\n    let\
    \ apples = Int(arr[0])!\n    let oranges = Int(arr[2])!\n    result = n - apples\
    \ - oranges\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19) == 8)\nassert(fruit_distribution(s: \"5 apples\
    \ and 6 oranges\", n: 21) == 10)\nassert(fruit_distribution(s: \"0 apples and\
    \ 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"1 apples and 0 oranges\"\
    , n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\", n: 100)\
    \ == 95)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\", n: 5) == 0)\n\
    assert(fruit_distribution(s: \"1 apples and 100 oranges\", n: 120) == 19)"
  status: Exception
  stderr: 'tmpldm0vnq5/tmpldm0vnq5.swift:20: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002ad8f7bd4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad8f78cb561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ad8f78cb286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ad8f78cb13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ad8f78cabb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpldm0vnq5                        0x000056041fdd0ec5 <unavailable> + 7877

    6    tmpldm0vnq5                        0x000056041fdd05fb <unavailable> + 5627

    7    libc.so.6                          0x00002ad8f7dc0460 __libc_start_main +
    245

    8    tmpldm0vnq5                        0x000056041fdd02f9 <unavailable> + 4857

    '
  stdout: ''
  timestamp: 1659824639
- exit_code: 1
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    var fruits = s.components(separatedBy: \" \")\n    var total =\
    \ 0\n    for i in 0..<fruits.count {\n        if fruits[i] == \"apples\" || fruits[i]\
    \ == \"oranges\" {\n            total += Int(fruits[i-1])!\n        }\n    }\n\
    \    return n - total\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19) == 8)\nassert(fruit_distribution(s: \"5 apples\
    \ and 6 oranges\", n: 21) == 10)\nassert(fruit_distribution(s: \"0 apples and\
    \ 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"1 apples and 0 oranges\"\
    , n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\", n: 100)\
    \ == 95)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\", n: 5) == 0)\n\
    assert(fruit_distribution(s: \"1 apples and 100 oranges\", n: 120) == 19)"
  status: SyntaxError
  stderr: "/tmp/tmpqg6n5mf9.swift:17:20: error: value of type 'String' has no member\
    \ 'components'\n    var fruits = s.components(separatedBy: \" \")\n          \
    \       ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824638
- exit_code: 1
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    let fruits = s.components(separatedBy: \" and \")\n    let apples\
    \ = Int(fruits[0].components(separatedBy: \" \")[0])!\n    let oranges = Int(fruits[1].components(separatedBy:\
    \ \" \")[0])!\n    return n - apples - oranges\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 19) == 8)\n\
    assert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21) == 10)\nassert(fruit_distribution(s:\
    \ \"0 apples and 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"1 apples\
    \ and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples and 3\
    \ oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\"\
    , n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples and 100 oranges\", n: 120)\
    \ == 19)"
  status: SyntaxError
  stderr: "/tmp/tmprln0hg_6.swift:17:20: error: value of type 'String' has no member\
    \ 'components'\n    let fruits = s.components(separatedBy: \" and \")\n      \
    \           ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824638
- exit_code: 1
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    let arr = s.components(separatedBy: \" \")\n    let numOfApples\
    \ = Int(arr[0])!\n    let numOfOranges = Int(arr[2])!\n    let numOfMangoes =\
    \ n - numOfApples - numOfOranges\n    return numOfMangoes\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 19)\
    \ == 8)\nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21) == 10)\n\
    assert(fruit_distribution(s: \"0 apples and 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s:\
    \ \"1 apples and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"2 apples and\
    \ 3 oranges\", n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples and 100 oranges\"\
    , n: 120) == 19)"
  status: SyntaxError
  stderr: "/tmp/tmpj4cimfux.swift:17:17: error: value of type 'String' has no member\
    \ 'components'\n    let arr = s.components(separatedBy: \" \")\n             \
    \ ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824638
- exit_code: 1
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    let fruits = s.components(separatedBy: \" \")\n    let apples\
    \ = Int(fruits[0])!\n    let oranges = Int(fruits[2])!\n    return n - apples\
    \ - oranges\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19) == 8)\nassert(fruit_distribution(s: \"5 apples\
    \ and 6 oranges\", n: 21) == 10)\nassert(fruit_distribution(s: \"0 apples and\
    \ 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"1 apples and 0 oranges\"\
    , n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\", n: 100)\
    \ == 95)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\", n: 5) == 0)\n\
    assert(fruit_distribution(s: \"1 apples and 100 oranges\", n: 120) == 19)"
  status: SyntaxError
  stderr: "/tmp/tmp4l9cq2lh.swift:17:20: error: value of type 'String' has no member\
    \ 'components'\n    let fruits = s.components(separatedBy: \" \")\n          \
    \       ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824638
- exit_code: 1
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    var count = 0\n    var apples = 0\n    var oranges = 0\n    var\
    \ mango = 0\n    var i = 0\n    while i < s.count {\n        if s[i] == \" \"\
    \ {\n            i += 1\n        } else if s[i] == \"a\" {\n            while\
    \ s[i] != \" \" {\n                i += 1\n            }\n            i += 1\n\
    \            while s[i] != \" \" {\n                i += 1\n            }\n  \
    \          i += 1\n            while s[i] != \" \" {\n                i += 1\n\
    \            }\n            i += 1\n            while s[i] != \" \" {\n      \
    \          i += 1\n            }\n            i += 1\n            while s[i] !=\
    \ \" \" {\n                i += 1\n            }\n            i += 1\n       \
    \     while s[i] != \" \" {\n                i += 1\n            }\n         \
    \   i += 1\n            while s[i] != \" \" {\n                i += 1\n      \
    \      }\n            i += 1\n            while s[i] != \" \" {\n            \
    \    i += 1\n            }\n            i += 1\n            while s[i] != \" \"\
    \ {\n                i += 1\n            }\n            i += 1\n            while\
    \ s[i] != \" \" {\n                i += 1\n            }\n            i += 1\n\
    \            while s[i] != \" \" {\n                i += 1\n            }\n  \
    \          i += 1\n            while s[i] != \" \" {\n                i += 1\n\
    \            }\n            i += 1\n            while s[i] != \" \" {\n      \
    \          i += 1\n            }\n            i += 1\n            while s[i] !=\
    \ \" \" {\n                i += 1\n            }\n            i += 1\n       \
    \     while s[i] != \" \" {\n                i += 1\n            }\n         \
    \   i += 1\n            while s[i] != \" \" {\n                i += 1\n      \
    \      }\n            i += 1\n            while s[i] != \" \" {\n            \
    \    i += 1\n            }\n            i += 1\n            while s[i] != \" \"\
    \ {\n                i += 1\n            }\n            i += 1\n            while\
    \ s[i] != \" \" {\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19) == 8)\nassert(fruit_distribution(s: \"5 apples\
    \ and 6 oranges\", n: 21) == 10)\nassert(fruit_distribution(s: \"0 apples and\
    \ 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"1 apples and 0 oranges\"\
    , n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\", n: 100)\
    \ == 95)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\", n: 5) == 0)\n\
    assert(fruit_distribution(s: \"1 apples and 100 oranges\", n: 120) == 19)"
  status: SyntaxError
  stderr: "/tmp/tmpytnc7nhh.swift:120:72: error: expected '}' at end of brace statement\n\
    assert(fruit_distribution(s: \"1 apples and 100 oranges\", n: 120) == 19)\n  \
    \                                                                     ^\n/tmp/tmpytnc7nhh.swift:25:31:\
    \ note: to match this opening '{'\n        } else if s[i] == \"a\" {\n       \
    \                       ^\n/tmp/tmpytnc7nhh.swift:120:72: error: expected '}'\
    \ at end of brace statement\nassert(fruit_distribution(s: \"1 apples and 100 oranges\"\
    , n: 120) == 19)\n                                                           \
    \            ^\n/tmp/tmpytnc7nhh.swift:22:23: note: to match this opening '{'\n\
    \    while i < s.count {\n                      ^\n/tmp/tmpytnc7nhh.swift:120:72:\
    \ error: expected '}' at end of brace statement\nassert(fruit_distribution(s:\
    \ \"1 apples and 100 oranges\", n: 120) == 19)\n                             \
    \                                          ^\n/tmp/tmpytnc7nhh.swift:16:51: note:\
    \ to match this opening '{'\nfunc fruit_distribution(s: String, n: Int) -> Int\
    \ {\n                                                  ^\n/tmp/tmpytnc7nhh.swift:23:12:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n        if s[i] == \" \" {\n           ^~~~\nSwift.String:3:12:\
    \ note: 'subscript(_:)' has been explicitly marked unavailable here\n    public\
    \ subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpytnc7nhh.swift:25:19:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n        } else if s[i] == \"a\" {\n           \
    \       ^~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked\
    \ unavailable here\n    public subscript(i: Int) -> Character { get }\n      \
    \     ^\n/tmp/tmpytnc7nhh.swift:26:19: error: 'subscript(_:)' is unavailable:\
    \ cannot subscript String with an Int, use a String.Index instead.\n         \
    \   while s[i] != \" \" {\n                  ^~~~\nSwift.String:3:12: note: 'subscript(_:)'\
    \ has been explicitly marked unavailable here\n    public subscript(i: Int) ->\
    \ Character { ge"
  stdout: ''
  timestamp: 1659824638
- exit_code: 0
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    let arr = s.split(separator: \" \")\n    let numOfApples = Int(arr[0])!\n\
    \    let numOfOranges = Int(arr[3])!\n    return n - numOfApples - numOfOranges\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fruit_distribution(s: \"5 apples and 6 oranges\"\
    , n: 19) == 8)\nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21)\
    \ == 10)\nassert(fruit_distribution(s: \"0 apples and 1 oranges\", n: 3) == 2)\n\
    assert(fruit_distribution(s: \"1 apples and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s:\
    \ \"2 apples and 3 oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"\
    2 apples and 3 oranges\", n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples\
    \ and 100 oranges\", n: 120) == 19)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824639
- exit_code: -4
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    // Write your code here\n    var total = 0\n    var fruit = \"\
    \"\n    for char in s {\n        if char == \" \" {\n            total += Int(fruit)!\n\
    \            fruit = \"\"\n        } else {\n            fruit += String(char)\n\
    \        }\n    }\n    total += Int(fruit)!\n    return n - total\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fruit_distribution(s: \"5 apples and 6 oranges\"\
    , n: 19) == 8)\nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21)\
    \ == 10)\nassert(fruit_distribution(s: \"0 apples and 1 oranges\", n: 3) == 2)\n\
    assert(fruit_distribution(s: \"1 apples and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s:\
    \ \"2 apples and 3 oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"\
    2 apples and 3 oranges\", n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples\
    \ and 100 oranges\", n: 120) == 19)"
  status: Exception
  stderr: 'tmp746a8z19/tmp746a8z19.swift:22: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002b0f849e9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0f846e0561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b0f846e0286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b0f846e013c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b0f846dfbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmp746a8z19                        0x0000555ae6996d03 <unavailable> + 7427

    6    tmp746a8z19                        0x0000555ae699658b <unavailable> + 5515

    7    libc.so.6                          0x00002b0f84bd5460 __libc_start_main +
    245

    8    tmp746a8z19                        0x0000555ae6996289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1659824639
- exit_code: -4
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19) == 8)\nassert(fruit_distribution(s: \"5 apples\
    \ and 6 oranges\", n: 21) == 10)\nassert(fruit_distribution(s: \"0 apples and\
    \ 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"1 apples and 0 oranges\"\
    , n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\", n: 100)\
    \ == 95)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\", n: 5) == 0)\n\
    assert(fruit_distribution(s: \"1 apples and 100 oranges\", n: 120) == 19)"
  status: Exception
  stderr: 'tmpks6cctzx/tmpks6cctzx.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b34e34d6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b34e31cdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b34e31cd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b34e31cc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpks6cctzx                        0x000055f189d27269 <unavailable> + 4713

    5    libc.so.6                          0x00002b34e36c2460 __libc_start_main +
    245

    6    tmpks6cctzx                        0x000055f189d26ee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1659824639
- exit_code: 1
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    var mango = n\n    var apple = 0\n    var orange = 0\n    var\
    \ i = 0\n    var j = 0\n    var k = 0\n    var l = 0\n    var m = 0\n    var n\
    \ = 0\n    var o = 0\n    var p = 0\n    var q = 0\n    var r = 0\n    var s =\
    \ 0\n    var t = 0\n    var u = 0\n    var v = 0\n    var w = 0\n    var x = 0\n\
    \    var y = 0\n    var z = 0\n    var a = 0\n    var b = 0\n    var c = 0\n \
    \   var d = 0\n    var e = 0\n    var f = 0\n    var g = 0\n    var h = 0\n  \
    \  var j = 0\n    var k = 0\n    var l = 0\n    var m = 0\n    var n = 0\n   \
    \ var o = 0\n    var p = 0\n    var q = 0\n    var r = 0\n    var s = 0\n    var\
    \ t = 0\n    var u = 0\n    var v = 0\n    var w = 0\n    var x = 0\n    var y\
    \ = 0\n    var z = 0\n    var a = 0\n    var b = 0\n    var c = 0\n    var d =\
    \ 0\n    var e = 0\n    var f = 0\n    var g = 0\n    var h = 0\n    var j = 0\n\
    \    var k = 0\n    var l = 0\n    var m = 0\n    var n = 0\n    var o = 0\n \
    \   var p = 0\n    var q = 0\n    var r = 0\n    var s = 0\n    var t = 0\n  \
    \  var u = 0\n    var v = 0\n    var w = 0\n    var x = 0\n    var y = 0\n   \
    \ var z = 0\n    var a = 0\n    var b = 0\n    var c = 0\n    var d = 0\n    var\
    \ e = 0\n    var f = 0\n    var g = 0\n    var h = 0\n    var j = 0\n    var k\
    \ = 0\n    var l = 0\n    var m = 0\n    var n = 0\n    var o = 0\n   \n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fruit_distribution(s: \"5 apples and 6 oranges\"\
    , n: 19) == 8)\nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21)\
    \ == 10)\nassert(fruit_distribution(s: \"0 apples and 1 oranges\", n: 3) == 2)\n\
    assert(fruit_distribution(s: \"1 apples and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s:\
    \ \"2 apples and 3 oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"\
    2 apples and 3 oranges\", n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples\
    \ and 100 oranges\", n: 120) == 19)"
  status: SyntaxError
  stderr: "/tmp/tmp06asaie4.swift:46:9: error: invalid redeclaration of 'j'\n    var\
    \ j = 0\n        ^\n/tmp/tmp06asaie4.swift:21:9: note: 'j' previously declared\
    \ here\n    var j = 0\n        ^\n/tmp/tmp06asaie4.swift:47:9: error: invalid\
    \ redeclaration of 'k'\n    var k = 0\n        ^\n/tmp/tmp06asaie4.swift:22:9:\
    \ note: 'k' previously declared here\n    var k = 0\n        ^\n/tmp/tmp06asaie4.swift:48:9:\
    \ error: invalid redeclaration of 'l'\n    var l = 0\n        ^\n/tmp/tmp06asaie4.swift:23:9:\
    \ note: 'l' previously declared here\n    var l = 0\n        ^\n/tmp/tmp06asaie4.swift:49:9:\
    \ error: invalid redeclaration of 'm'\n    var m = 0\n        ^\n/tmp/tmp06asaie4.swift:24:9:\
    \ note: 'm' previously declared here\n    var m = 0\n        ^\n/tmp/tmp06asaie4.swift:50:9:\
    \ error: invalid redeclaration of 'n'\n    var n = 0\n        ^\n/tmp/tmp06asaie4.swift:25:9:\
    \ note: 'n' previously declared here\n    var n = 0\n        ^\n/tmp/tmp06asaie4.swift:51:9:\
    \ error: invalid redeclaration of 'o'\n    var o = 0\n        ^\n/tmp/tmp06asaie4.swift:26:9:\
    \ note: 'o' previously declared here\n    var o = 0\n        ^\n/tmp/tmp06asaie4.swift:52:9:\
    \ error: invalid redeclaration of 'p'\n    var p = 0\n        ^\n/tmp/tmp06asaie4.swift:27:9:\
    \ note: 'p' previously declared here\n    var p = 0\n        ^\n/tmp/tmp06asaie4.swift:53:9:\
    \ error: invalid redeclaration of 'q'\n    var q = 0\n        ^\n/tmp/tmp06asaie4.swift:28:9:\
    \ note: 'q' previously declared here\n    var q = 0\n        ^\n/tmp/tmp06asaie4.swift:54:9:\
    \ error: invalid redeclaration of 'r'\n    var r = 0\n        ^\n/tmp/tmp06asaie4.swift:29:9:\
    \ note: 'r' previously declared here\n    var r = 0\n        ^\n/tmp/tmp06asaie4.swift:55:9:\
    \ error: invalid redeclaration of 's'\n    var s = 0\n        ^\n/tmp/tmp06asaie4.swift:30:9:\
    \ note: 's' previously declared here\n    var s = 0\n        ^\n/tmp/tmp06asaie4.swift:56:9:\
    \ error: invalid redeclaration of 't'\n    var t = 0\n        ^\n/tmp/tmp06asaie4.swift:31:9:\
    \ note: 't' previously declared here\n    var t = 0\n        ^\n/tmp/tmp06asaie4.swift:57:9:\
    \ error: invalid redeclaration of 'u'\n    var u = 0\n        ^\n/tmp/tmp06as"
  stdout: ''
  timestamp: 1659824638
- exit_code: 1
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    var mango = n\n    var apple = 0\n    var orange = 0\n    var\
    \ arr = s.components(separatedBy: \" \")\n    for i in 0..<arr.count {\n     \
    \   if arr[i] == \"apples\" {\n            apple = Int(arr[i-1])!\n        }\n\
    \        if arr[i] == \"oranges\" {\n            orange = Int(arr[i-1])!\n   \
    \     }\n    }\n    mango = mango - apple - orange\n    return mango\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fruit_distribution(s: \"5 apples and 6 oranges\"\
    , n: 19) == 8)\nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21)\
    \ == 10)\nassert(fruit_distribution(s: \"0 apples and 1 oranges\", n: 3) == 2)\n\
    assert(fruit_distribution(s: \"1 apples and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s:\
    \ \"2 apples and 3 oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"\
    2 apples and 3 oranges\", n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples\
    \ and 100 oranges\", n: 120) == 19)"
  status: SyntaxError
  stderr: "/tmp/tmp3fdar80_.swift:20:17: error: value of type 'String' has no member\
    \ 'components'\n    var arr = s.components(separatedBy: \" \")\n             \
    \ ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824638
- exit_code: 1
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    var total_apples = 0\n    var total_oranges = 0\n    var total_mangoes\
    \ = 0\n    var total_fruits = 0\n    var total_fruits_in_basket = 0\n    var total_fruits_in_basket_string\
    \ = \"\"\n    var total_fruits_in_basket_array = [Character]()\n    var total_fruits_in_basket_array_count\
    \ = 0\n    var total_fruits_in_basket_array_count_string = \"\"\n    var total_fruits_in_basket_array_count_string_array\
    \ = [Character]()\n    var total_fruits_in_basket_array_count_string_array_count\
    \ = 0\n    var total_fruits_in_basket_array_count_string_array_count_string =\
    \ \"\"\n    var total_fruits_in_basket_array_count_string_array_count_string_array\
    \ = [Character]()\n    var total_fruits_in_basket_array_count_string_array_count_string_array_count\
    \ = 0\n    var total_fruits_in_basket_array_count_string_array_count_string_array_count_string\
    \ = \"\"\n    var total_fruits_in_basket_array_count_string_array_count_string_array_count_string_array\
    \ = [Character]()\n    var total_fruits_in_basket_array_count_string_array_count_string_array_count_string_array_count\
    \ = 0\n    var total_fruits_in_basket_array_count_string_array_count_string_array_count_string_array_count_string\
    \ = \"\"\n    var total_fruits_in_basket_array_count_string_array_count_string_array_count_string_array_count_string_array\
    \ = [Character]()\n    var total_fruits_in_basket_array_count_string_array_count_string_array_count_string_array_count_string_array_count\
    \ = 0\n    var total_fruits_in_basket_array_count_string_array_count_string\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fruit_distribution(s: \"5 apples and 6 oranges\"\
    , n: 19) == 8)\nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21)\
    \ == 10)\nassert(fruit_distribution(s: \"0 apples and 1 oranges\", n: 3) == 2)\n\
    assert(fruit_distribution(s: \"1 apples and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s:\
    \ \"2 apples and 3 oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"\
    2 apples and 3 oranges\", n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples\
    \ and 100 oranges\", n: 120) == 19)"
  status: SyntaxError
  stderr: "/tmp/tmp3dx4v9k5.swift:37:9: error: type annotation missing in pattern\n\
    \    var total_fruits_in_basket_array_count_string_array_count_string\n      \
    \  ^\n"
  stdout: ''
  timestamp: 1659824638
- exit_code: 0
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    var total = 0\n    var apples = 0\n    var oranges = 0\n    var\
    \ mango = 0\n    var arr = s.split(separator: \" \")\n    for i in 0..<arr.count\
    \ {\n        if arr[i] == \"apples\" {\n            apples = Int(arr[i-1])!\n\
    \        }\n        if arr[i] == \"oranges\" {\n            oranges = Int(arr[i-1])!\n\
    \        }\n    }\n    total = apples + oranges\n    mango = n - total\n    return\
    \ mango\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(fruit_distribution(s: \"\
    5 apples and 6 oranges\", n: 19) == 8)\nassert(fruit_distribution(s: \"5 apples\
    \ and 6 oranges\", n: 21) == 10)\nassert(fruit_distribution(s: \"0 apples and\
    \ 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"1 apples and 0 oranges\"\
    , n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\", n: 100)\
    \ == 95)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\", n: 5) == 0)\n\
    assert(fruit_distribution(s: \"1 apples and 100 oranges\", n: 120) == 19)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824639
- exit_code: 0
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    // Write your code here\n    let arr = s.split(separator: \" \"\
    )\n    let numOfApples = Int(arr[0])!\n    let numOfOranges = Int(arr[3])!\n \
    \   let numOfMangoes = n - numOfApples - numOfOranges\n    return numOfMangoes\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fruit_distribution(s: \"5 apples and 6 oranges\"\
    , n: 19) == 8)\nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21)\
    \ == 10)\nassert(fruit_distribution(s: \"0 apples and 1 oranges\", n: 3) == 2)\n\
    assert(fruit_distribution(s: \"1 apples and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s:\
    \ \"2 apples and 3 oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"\
    2 apples and 3 oranges\", n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples\
    \ and 100 oranges\", n: 120) == 19)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824639
- exit_code: 1
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    var s = s\n    var n = n\n    let a = s.components(separatedBy:\
    \ \" apples and \")\n    let b = a[1].components(separatedBy: \" oranges\")\n\
    \    n -= Int(a[0])! + Int(b[0])!\n    return n\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 19) == 8)\n\
    assert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21) == 10)\nassert(fruit_distribution(s:\
    \ \"0 apples and 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"1 apples\
    \ and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples and 3\
    \ oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\"\
    , n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples and 100 oranges\", n: 120)\
    \ == 19)"
  status: SyntaxError
  stderr: "/tmp/tmpnwp6nm05.swift:19:15: error: value of type 'String' has no member\
    \ 'components'\n    let a = s.components(separatedBy: \" apples and \")\n    \
    \        ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824639
- exit_code: 1
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    // Write your code here\n    let s = s.replacingOccurrences(of:\
    \ \"apples\", with: \"\")\n    let s = s.replacingOccurrences(of: \"oranges\"\
    , with: \"\")\n    let s = s.replacingOccurrences(of: \"and\", with: \"\")\n \
    \   let s = s.replacingOccurrences(of: \" \", with: \"\")\n    let s = s.replacingOccurrences(of:\
    \ \"0\", with: \"\")\n    let s = s.replacingOccurrences(of: \"1\", with: \"\"\
    )\n    let s = s.replacingOccurrences(of: \"2\", with: \"\")\n    let s = s.replacingOccurrences(of:\
    \ \"3\", with: \"\")\n    let s = s.replacingOccurrences(of: \"4\", with: \"\"\
    )\n    let s = s.replacingOccurrences(of: \"5\", with: \"\")\n    let s = s.replacingOccurrences(of:\
    \ \"6\", with: \"\")\n    let s = s.replacingOccurrences(of: \"7\", with: \"\"\
    )\n    let s = s.replacingOccurrences(of: \"8\", with: \"\")\n    let s = s.replacingOccurrences(of:\
    \ \"9\", with: \"\")\n    let s = s.replacingOccurrences(of: \"0\", with: \"\"\
    )\n    let s = s.replacingOccurrences(of: \"0\", with: \"\")\n    let s = s.replacingOccurrences(of:\
    \ \"0\", with: \"\")\n    let s = s.replacingOccurrences(of: \"0\", with: \"\"\
    )\n    let s = s.replacingOccurrences(of: \"0\", with: \"\")\n    let s = s.replacingOccurrences(of:\
    \ \"0\", with: \"\")\n    let s = s.replacingOccurrences(of: \"0\", with: \"\"\
    )\n    let s = s.replacingOccurrences(of: \"0\", with: \"\")\n    let s = s.replacingOccurrences(of:\
    \ \"0\", with:\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19) == 8)\nassert(fruit_distribution(s: \"5 apples\
    \ and 6 oranges\", n: 21) == 10)\nassert(fruit_distribution(s: \"0 apples and\
    \ 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"1 apples and 0 oranges\"\
    , n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\", n: 100)\
    \ == 95)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\", n: 5) == 0)\n\
    assert(fruit_distribution(s: \"1 apples and 100 oranges\", n: 120) == 19)"
  status: SyntaxError
  stderr: "/tmp/tmpt9ownlxg.swift:41:1: error: expected expression in list of expressions\n\
    }\n^\n/tmp/tmpt9ownlxg.swift:18:15: error: value of type 'String' has no member\
    \ 'replacingOccurrences'\n    let s = s.replacingOccurrences(of: \"apples\", with:\
    \ \"\")\n            ~ ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824639
- exit_code: -4
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    // Write your code here\n    return 0\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 19)\
    \ == 8)\nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21) == 10)\n\
    assert(fruit_distribution(s: \"0 apples and 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s:\
    \ \"1 apples and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"2 apples and\
    \ 3 oranges\", n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples and 100 oranges\"\
    , n: 120) == 19)"
  status: Exception
  stderr: 'tmpfincxi2h/tmpfincxi2h.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b42dd89cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b42dd593b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b42dd593988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b42dd5927b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfincxi2h                        0x000055972c5b8269 <unavailable> + 4713

    5    libc.so.6                          0x00002b42dda88460 __libc_start_main +
    245

    6    tmpfincxi2h                        0x000055972c5b7ee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1659824639
- exit_code: -4
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    let arr = s.split(separator: \" \")\n    let a = Int(arr[0])!\n\
    \    let o = Int(arr[2])!\n    return n - a - o\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 19) == 8)\n\
    assert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21) == 10)\nassert(fruit_distribution(s:\
    \ \"0 apples and 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"1 apples\
    \ and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples and 3\
    \ oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\"\
    , n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples and 100 oranges\", n: 120)\
    \ == 19)"
  status: Exception
  stderr: 'tmpywydsiss/tmpywydsiss.swift:19: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002b26d1238c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b26d0f2f561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b26d0f2f286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b26d0f2f13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b26d0f2ebb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpywydsiss                        0x00005653cef2beaa <unavailable> + 7850

    6    tmpywydsiss                        0x00005653cef2b5fb <unavailable> + 5627

    7    libc.so.6                          0x00002b26d1424460 __libc_start_main +
    245

    8    tmpywydsiss                        0x00005653cef2b2f9 <unavailable> + 4857

    '
  stdout: ''
  timestamp: 1659824639
- exit_code: 1
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    var s = s\n    var n = n\n    var a = 0\n    var o = 0\n    var\
    \ m = 0\n    var i = 0\n    while i < s.count {\n        if s[i] == \" \" {\n\
    \            i += 1\n            continue\n        }\n        if s[i] == \"a\"\
    \ {\n            i += 6\n            a = Int(s[i])!\n            i += 2\n    \
    \        continue\n        }\n        if s[i] == \"o\" {\n            i += 7\n\
    \            o = Int(s[i])!\n            i += 2\n            continue\n      \
    \  }\n        i += 1\n    }\n    m = n - a - o\n    return m\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 19)\
    \ == 8)\nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21) == 10)\n\
    assert(fruit_distribution(s: \"0 apples and 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s:\
    \ \"1 apples and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"2 apples and\
    \ 3 oranges\", n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples and 100 oranges\"\
    , n: 120) == 19)"
  status: SyntaxError
  stderr: "/tmp/tmp26enc37o.swift:24:12: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an Int, use a String.Index instead.\n        if s[i] ==\
    \ \" \" {\n           ^~~~\nSwift.String:3:12: note: 'subscript(_:)' has been\
    \ explicitly marked unavailable here\n    public subscript(i: Int) -> Character\
    \ { get }\n           ^\n/tmp/tmp26enc37o.swift:28:12: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \        if s[i] == \"a\" {\n           ^~~~\nSwift.String:3:12: note: 'subscript(_:)'\
    \ has been explicitly marked unavailable here\n    public subscript(i: Int) ->\
    \ Character { get }\n           ^\n/tmp/tmp26enc37o.swift:30:22: error: no exact\
    \ matches in call to subscript \n            a = Int(s[i])!\n                \
    \     ^\nSwift.String:3:12: note: candidate expects value of type 'Range<String.Index>'\
    \ for parameter #1 (got 'Int')\n    public subscript(r: Range<String.Index>) ->\
    \ Substring { get }\n           ^\nSwift.Collection:3:23: note: candidate expects\
    \ value of type '(UnboundedRange_) -> ()' for parameter #1 (got 'Int')\n    @inlinable\
    \ public subscript(x: (UnboundedRange_) -> ()) -> Self.SubSequence { get }\n \
    \                     ^\n/tmp/tmp26enc37o.swift:34:12: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \        if s[i] == \"o\" {\n           ^~~~\nSwift.String:3:12: note: 'subscript(_:)'\
    \ has been explicitly marked unavailable here\n    public subscript(i: Int) ->\
    \ Character { get }\n           ^\n/tmp/tmp26enc37o.swift:36:22: error: no exact\
    \ matches in call to subscript \n            o = Int(s[i])!\n                \
    \     ^\nSwift.String:3:12: note: candidate expects value of type 'Range<String.Index>'\
    \ for parameter #1 (got 'Int')\n    public subscript(r: Range<String.Index>) ->\
    \ Substring { get }\n           ^\nSwift.Collection:3:23: note: candidate expects\
    \ value of type '(UnboundedRange_) -> ()' for parameter #1 (got 'Int')\n    @inlinable\
    \ public subscript(x: (UnboundedRange_) -> ()) -> Self.SubSequence { get }\n \
    \                    "
  stdout: ''
  timestamp: 1659824639
- exit_code: -4
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    // write your code here\n    return 0\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 19)\
    \ == 8)\nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21) == 10)\n\
    assert(fruit_distribution(s: \"0 apples and 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s:\
    \ \"1 apples and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"2 apples and\
    \ 3 oranges\", n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples and 100 oranges\"\
    , n: 120) == 19)"
  status: Exception
  stderr: 'tmpsj1fbkez/tmpsj1fbkez.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab8a4bddc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab8a48d4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab8a48d4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab8a48d37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsj1fbkez                        0x00005555a8246269 <unavailable> + 4713

    5    libc.so.6                          0x00002ab8a4dc9460 __libc_start_main +
    245

    6    tmpsj1fbkez                        0x00005555a8245ee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1659824639
- exit_code: -4
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    // Write your code here\n    let arr = s.split(separator: \" \"\
    )\n    let apples = Int(arr[0])!\n    let oranges = Int(arr[2])!\n    return n\
    \ - apples - oranges\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19) == 8)\nassert(fruit_distribution(s: \"5 apples\
    \ and 6 oranges\", n: 21) == 10)\nassert(fruit_distribution(s: \"0 apples and\
    \ 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"1 apples and 0 oranges\"\
    , n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\", n: 100)\
    \ == 95)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\", n: 5) == 0)\n\
    assert(fruit_distribution(s: \"1 apples and 100 oranges\", n: 120) == 19)"
  status: Exception
  stderr: 'tmpum5wx8cn/tmpum5wx8cn.swift:20: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002b6d84e6fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6d84b66561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b6d84b66286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b6d84b6613c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b6d84b65bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpum5wx8cn                        0x000055e504246eaa <unavailable> + 7850

    6    tmpum5wx8cn                        0x000055e5042465fb <unavailable> + 5627

    7    libc.so.6                          0x00002b6d8505b460 __libc_start_main +
    245

    8    tmpum5wx8cn                        0x000055e5042462f9 <unavailable> + 4857

    '
  stdout: ''
  timestamp: 1659824639
- exit_code: 1
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    let fruits = s.components(separatedBy: \" \")\n    let apples\
    \ = Int(fruits[0])!\n    let oranges = Int(fruits[2])!\n    return n - apples\
    \ - oranges\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19) == 8)\nassert(fruit_distribution(s: \"5 apples\
    \ and 6 oranges\", n: 21) == 10)\nassert(fruit_distribution(s: \"0 apples and\
    \ 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"1 apples and 0 oranges\"\
    , n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\", n: 100)\
    \ == 95)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\", n: 5) == 0)\n\
    assert(fruit_distribution(s: \"1 apples and 100 oranges\", n: 120) == 19)"
  status: SyntaxError
  stderr: "/tmp/tmp4l9cq2lh.swift:17:20: error: value of type 'String' has no member\
    \ 'components'\n    let fruits = s.components(separatedBy: \" \")\n          \
    \       ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824638
- exit_code: -4
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    // Write your code here\n    return 0\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 19)\
    \ == 8)\nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21) == 10)\n\
    assert(fruit_distribution(s: \"0 apples and 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s:\
    \ \"1 apples and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"2 apples and\
    \ 3 oranges\", n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples and 100 oranges\"\
    , n: 120) == 19)"
  status: Exception
  stderr: 'tmpfincxi2h/tmpfincxi2h.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b42dd89cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b42dd593b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b42dd593988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b42dd5927b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfincxi2h                        0x000055972c5b8269 <unavailable> + 4713

    5    libc.so.6                          0x00002b42dda88460 __libc_start_main +
    245

    6    tmpfincxi2h                        0x000055972c5b7ee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1659824639
- exit_code: 1
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    let fruits = s.components(separatedBy: \" and \")\n    let apples\
    \ = Int(fruits[0].components(separatedBy: \" \")[0])!\n    let oranges = Int(fruits[1].components(separatedBy:\
    \ \" \")[0])!\n    return n - apples - oranges\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 19) == 8)\n\
    assert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21) == 10)\nassert(fruit_distribution(s:\
    \ \"0 apples and 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"1 apples\
    \ and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples and 3\
    \ oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\"\
    , n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples and 100 oranges\", n: 120)\
    \ == 19)"
  status: SyntaxError
  stderr: "/tmp/tmprln0hg_6.swift:17:20: error: value of type 'String' has no member\
    \ 'components'\n    let fruits = s.components(separatedBy: \" and \")\n      \
    \           ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824638
- exit_code: -4
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    // your code here\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 19) == 8)\n\
    assert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21) == 10)\nassert(fruit_distribution(s:\
    \ \"0 apples and 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"1 apples\
    \ and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples and 3\
    \ oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\"\
    , n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples and 100 oranges\", n: 120)\
    \ == 19)"
  status: Exception
  stderr: 'tmp86wphtoz/tmp86wphtoz.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b370f081c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b370ed78b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b370ed78988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b370ed777b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp86wphtoz                        0x000055abf4e8c269 <unavailable> + 4713

    5    libc.so.6                          0x00002b370f26d460 __libc_start_main +
    245

    6    tmp86wphtoz                        0x000055abf4e8bee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1659824639
- exit_code: -4
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    let arr = s.split(separator: \" \")\n    let apples = Int(arr[0])!\n\
    \    let oranges = Int(arr[2])!\n    return n - apples - oranges\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fruit_distribution(s: \"5 apples and 6 oranges\"\
    , n: 19) == 8)\nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21)\
    \ == 10)\nassert(fruit_distribution(s: \"0 apples and 1 oranges\", n: 3) == 2)\n\
    assert(fruit_distribution(s: \"1 apples and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s:\
    \ \"2 apples and 3 oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"\
    2 apples and 3 oranges\", n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples\
    \ and 100 oranges\", n: 120) == 19)"
  status: Exception
  stderr: 'tmprd31g2wb/tmprd31g2wb.swift:19: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002afc720d9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afc71dd0561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002afc71dd0286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002afc71dd013c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002afc71dcfbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmprd31g2wb                        0x000055f789418eaa <unavailable> + 7850

    6    tmprd31g2wb                        0x000055f7894185fb <unavailable> + 5627

    7    libc.so.6                          0x00002afc722c5460 __libc_start_main +
    245

    8    tmprd31g2wb                        0x000055f7894182f9 <unavailable> + 4857

    '
  stdout: ''
  timestamp: 1659824639
- exit_code: 0
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    let fruit = s.split(separator: \" \")\n    let apple = Int(fruit[0])!\n\
    \    let orange = Int(fruit[3])!\n    return n - apple - orange\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 19)\
    \ == 8)\nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21) == 10)\n\
    assert(fruit_distribution(s: \"0 apples and 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s:\
    \ \"1 apples and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"2 apples and\
    \ 3 oranges\", n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples and 100 oranges\"\
    , n: 120) == 19)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824639
- exit_code: -4
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    // Write your code here\n    return 0\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 19)\
    \ == 8)\nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21) == 10)\n\
    assert(fruit_distribution(s: \"0 apples and 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s:\
    \ \"1 apples and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"2 apples and\
    \ 3 oranges\", n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples and 100 oranges\"\
    , n: 120) == 19)"
  status: Exception
  stderr: 'tmpfincxi2h/tmpfincxi2h.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b42dd89cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b42dd593b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b42dd593988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b42dd5927b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfincxi2h                        0x000055972c5b8269 <unavailable> + 4713

    5    libc.so.6                          0x00002b42dda88460 __libc_start_main +
    245

    6    tmpfincxi2h                        0x000055972c5b7ee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1659824639
- exit_code: 0
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    // Write your code here\n    var result = 0\n    var arr = s.split(separator:\
    \ \" \")\n    var sum = 0\n    for i in 0..<arr.count {\n        if arr[i] ==\
    \ \"apples\" {\n            sum += Int(arr[i-1])!\n        }\n        if arr[i]\
    \ == \"oranges\" {\n            sum += Int(arr[i-1])!\n        }\n    }\n    result\
    \ = n - sum\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19) == 8)\nassert(fruit_distribution(s: \"5 apples\
    \ and 6 oranges\", n: 21) == 10)\nassert(fruit_distribution(s: \"0 apples and\
    \ 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"1 apples and 0 oranges\"\
    , n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\", n: 100)\
    \ == 95)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\", n: 5) == 0)\n\
    assert(fruit_distribution(s: \"1 apples and 100 oranges\", n: 120) == 19)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824639
- exit_code: -4
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    // Write your code here\n    var result = 0\n    let arr = s.split(separator:\
    \ \" \")\n    let num1 = Int(arr[0])!\n    let num2 = Int(arr[2])!\n    result\
    \ = n - (num1 + num2)\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 19) == 8)\nassert(fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 21) == 10)\nassert(fruit_distribution(s: \"0\
    \ apples and 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"1 apples\
    \ and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples and 3\
    \ oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\"\
    , n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples and 100 oranges\", n: 120)\
    \ == 19)"
  status: Exception
  stderr: 'tmpmeunyigx/tmpmeunyigx.swift:21: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002ae4236d8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae4233cf561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ae4233cf286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ae4233cf13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ae4233cebb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpmeunyigx                        0x00005634766caec5 <unavailable> + 7877

    6    tmpmeunyigx                        0x00005634766ca5fb <unavailable> + 5627

    7    libc.so.6                          0x00002ae4238c4460 __libc_start_main +
    245

    8    tmpmeunyigx                        0x00005634766ca2f9 <unavailable> + 4857

    '
  stdout: ''
  timestamp: 1659824639
- exit_code: -4
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    // Write your code here\n    return 0\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 19)\
    \ == 8)\nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21) == 10)\n\
    assert(fruit_distribution(s: \"0 apples and 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s:\
    \ \"1 apples and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"2 apples and\
    \ 3 oranges\", n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples and 100 oranges\"\
    , n: 120) == 19)"
  status: Exception
  stderr: 'tmpfincxi2h/tmpfincxi2h.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b42dd89cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b42dd593b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b42dd593988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b42dd5927b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfincxi2h                        0x000055972c5b8269 <unavailable> + 4713

    5    libc.so.6                          0x00002b42dda88460 __libc_start_main +
    245

    6    tmpfincxi2h                        0x000055972c5b7ee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1659824639
- exit_code: -4
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    // Write your code here\n    return 0\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 19)\
    \ == 8)\nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21) == 10)\n\
    assert(fruit_distribution(s: \"0 apples and 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s:\
    \ \"1 apples and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"2 apples and\
    \ 3 oranges\", n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples and 100 oranges\"\
    , n: 120) == 19)"
  status: Exception
  stderr: 'tmpfincxi2h/tmpfincxi2h.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b42dd89cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b42dd593b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b42dd593988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b42dd5927b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfincxi2h                        0x000055972c5b8269 <unavailable> + 4713

    5    libc.so.6                          0x00002b42dda88460 __libc_start_main +
    245

    6    tmpfincxi2h                        0x000055972c5b7ee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1659824639
- exit_code: -4
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    // Write your code here\n    return 0\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 19)\
    \ == 8)\nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21) == 10)\n\
    assert(fruit_distribution(s: \"0 apples and 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s:\
    \ \"1 apples and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"2 apples and\
    \ 3 oranges\", n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples and 100 oranges\"\
    , n: 120) == 19)"
  status: Exception
  stderr: 'tmpfincxi2h/tmpfincxi2h.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b42dd89cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b42dd593b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b42dd593988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b42dd5927b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfincxi2h                        0x000055972c5b8269 <unavailable> + 4713

    5    libc.so.6                          0x00002b42dda88460 __libc_start_main +
    245

    6    tmpfincxi2h                        0x000055972c5b7ee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1659824639
- exit_code: -4
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    // Write your code here\n    return 0\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 19)\
    \ == 8)\nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21) == 10)\n\
    assert(fruit_distribution(s: \"0 apples and 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s:\
    \ \"1 apples and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"2 apples and\
    \ 3 oranges\", n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples and 100 oranges\"\
    , n: 120) == 19)"
  status: Exception
  stderr: 'tmpfincxi2h/tmpfincxi2h.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b42dd89cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b42dd593b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b42dd593988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b42dd5927b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfincxi2h                        0x000055972c5b8269 <unavailable> + 4713

    5    libc.so.6                          0x00002b42dda88460 __libc_start_main +
    245

    6    tmpfincxi2h                        0x000055972c5b7ee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1659824639
- exit_code: 0
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    let s = s.split(separator: \" \")\n    let a = Int(s[0])!\n  \
    \  let o = Int(s[3])!\n    return n - a - o\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 19) == 8)\n\
    assert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21) == 10)\nassert(fruit_distribution(s:\
    \ \"0 apples and 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"1 apples\
    \ and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples and 3\
    \ oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\"\
    , n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples and 100 oranges\", n: 120)\
    \ == 19)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824639
- exit_code: 1
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    let arr = s.components(separatedBy: \" \")\n    let apple = Int(arr[0])!\n\
    \    let orange = Int(arr[2])!\n    return n - apple - orange\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 19)\
    \ == 8)\nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21) == 10)\n\
    assert(fruit_distribution(s: \"0 apples and 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s:\
    \ \"1 apples and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"2 apples and\
    \ 3 oranges\", n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples and 100 oranges\"\
    , n: 120) == 19)"
  status: SyntaxError
  stderr: "/tmp/tmp_kjvmg5q.swift:17:17: error: value of type 'String' has no member\
    \ 'components'\n    let arr = s.components(separatedBy: \" \")\n             \
    \ ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824639
- exit_code: 1
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    var mango = 0\n    var apple = 0\n    var orange = 0\n    var\
    \ total = 0\n    var i = 0\n    var j = 0\n    var k = 0\n    var l = 0\n    var\
    \ m = 0\n    var n = 0\n    var o = 0\n    var p = 0\n    var q = 0\n    var r\
    \ = 0\n    var s = 0\n    var t = 0\n    var u = 0\n    var v = 0\n    var w =\
    \ 0\n    var x = 0\n    var y = 0\n    var z = 0\n    var a = 0\n    var b = 0\n\
    \    var c = 0\n    var d = 0\n    var e = 0\n    var f = 0\n    var g = 0\n \
    \   var h = 0\n    var j = 0\n    var k = 0\n    var l = 0\n    var m = 0\n  \
    \  var n = 0\n    var o = 0\n    var p = 0\n    var q = 0\n    var r = 0\n   \
    \ var s = 0\n    var t = 0\n    var u = 0\n    var v = 0\n    var w = 0\n    var\
    \ x = 0\n    var y = 0\n    var z = 0\n    var a = 0\n    var b = 0\n    var c\
    \ = 0\n    var d = 0\n    var e = 0\n    var f = 0\n    var g = 0\n    var h =\
    \ 0\n    var j = 0\n    var k = 0\n    var l = 0\n    var m = 0\n    var n = 0\n\
    \    var o = 0\n    var p = 0\n    var q = 0\n    var r = 0\n    var s = 0\n \
    \   var t = 0\n    var u = 0\n    var v = 0\n    var w = 0\n    var x = 0\n  \
    \  var y = 0\n    var z = 0\n    var a = 0\n    var b = 0\n    var c = 0\n   \
    \ var d = 0\n    var e = 0\n    var f = 0\n    var g = 0\n    var h = 0\n    var\
    \ j = 0\n    var k = 0\n    var l = 0\n    var m = 0\n    var n = 0\n   \n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fruit_distribution(s: \"5 apples and 6 oranges\"\
    , n: 19) == 8)\nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21)\
    \ == 10)\nassert(fruit_distribution(s: \"0 apples and 1 oranges\", n: 3) == 2)\n\
    assert(fruit_distribution(s: \"1 apples and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s:\
    \ \"2 apples and 3 oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"\
    2 apples and 3 oranges\", n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples\
    \ and 100 oranges\", n: 120) == 19)"
  status: SyntaxError
  stderr: "/tmp/tmpb4kpedv5.swift:47:9: error: invalid redeclaration of 'j'\n    var\
    \ j = 0\n        ^\n/tmp/tmpb4kpedv5.swift:22:9: note: 'j' previously declared\
    \ here\n    var j = 0\n        ^\n/tmp/tmpb4kpedv5.swift:48:9: error: invalid\
    \ redeclaration of 'k'\n    var k = 0\n        ^\n/tmp/tmpb4kpedv5.swift:23:9:\
    \ note: 'k' previously declared here\n    var k = 0\n        ^\n/tmp/tmpb4kpedv5.swift:49:9:\
    \ error: invalid redeclaration of 'l'\n    var l = 0\n        ^\n/tmp/tmpb4kpedv5.swift:24:9:\
    \ note: 'l' previously declared here\n    var l = 0\n        ^\n/tmp/tmpb4kpedv5.swift:50:9:\
    \ error: invalid redeclaration of 'm'\n    var m = 0\n        ^\n/tmp/tmpb4kpedv5.swift:25:9:\
    \ note: 'm' previously declared here\n    var m = 0\n        ^\n/tmp/tmpb4kpedv5.swift:51:9:\
    \ error: invalid redeclaration of 'n'\n    var n = 0\n        ^\n/tmp/tmpb4kpedv5.swift:26:9:\
    \ note: 'n' previously declared here\n    var n = 0\n        ^\n/tmp/tmpb4kpedv5.swift:52:9:\
    \ error: invalid redeclaration of 'o'\n    var o = 0\n        ^\n/tmp/tmpb4kpedv5.swift:27:9:\
    \ note: 'o' previously declared here\n    var o = 0\n        ^\n/tmp/tmpb4kpedv5.swift:53:9:\
    \ error: invalid redeclaration of 'p'\n    var p = 0\n        ^\n/tmp/tmpb4kpedv5.swift:28:9:\
    \ note: 'p' previously declared here\n    var p = 0\n        ^\n/tmp/tmpb4kpedv5.swift:54:9:\
    \ error: invalid redeclaration of 'q'\n    var q = 0\n        ^\n/tmp/tmpb4kpedv5.swift:29:9:\
    \ note: 'q' previously declared here\n    var q = 0\n        ^\n/tmp/tmpb4kpedv5.swift:55:9:\
    \ error: invalid redeclaration of 'r'\n    var r = 0\n        ^\n/tmp/tmpb4kpedv5.swift:30:9:\
    \ note: 'r' previously declared here\n    var r = 0\n        ^\n/tmp/tmpb4kpedv5.swift:56:9:\
    \ error: invalid redeclaration of 's'\n    var s = 0\n        ^\n/tmp/tmpb4kpedv5.swift:31:9:\
    \ note: 's' previously declared here\n    var s = 0\n        ^\n/tmp/tmpb4kpedv5.swift:57:9:\
    \ error: invalid redeclaration of 't'\n    var t = 0\n        ^\n/tmp/tmpb4kpedv5.swift:32:9:\
    \ note: 't' previously declared here\n    var t = 0\n        ^\n/tmp/tmpb4kpedv5.swift:58:9:\
    \ error: invalid redeclaration of 'u'\n    var u = 0\n        ^\n/tmp/tmpb4kp"
  stdout: ''
  timestamp: 1659824639
- exit_code: -4
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    let arr = s.split(separator: \" \")\n    let num_apples = Int(arr[0])!\n\
    \    let num_oranges = Int(arr[2])!\n    return n - num_apples - num_oranges\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fruit_distribution(s: \"5 apples and 6 oranges\"\
    , n: 19) == 8)\nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21)\
    \ == 10)\nassert(fruit_distribution(s: \"0 apples and 1 oranges\", n: 3) == 2)\n\
    assert(fruit_distribution(s: \"1 apples and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s:\
    \ \"2 apples and 3 oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"\
    2 apples and 3 oranges\", n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples\
    \ and 100 oranges\", n: 120) == 19)"
  status: Exception
  stderr: 'tmp_0p24u5v/tmp_0p24u5v.swift:19: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002afb68f17c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afb68c0e561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002afb68c0e286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002afb68c0e13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002afb68c0dbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmp_0p24u5v                        0x000055b27cd1beaa <unavailable> + 7850

    6    tmp_0p24u5v                        0x000055b27cd1b5fb <unavailable> + 5627

    7    libc.so.6                          0x00002afb69103460 __libc_start_main +
    245

    8    tmp_0p24u5v                        0x000055b27cd1b2f9 <unavailable> + 4857

    '
  stdout: ''
  timestamp: 1659824639
- exit_code: 1
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    let fruits = s.components(separatedBy: \" and \")\n    let apples\
    \ = Int(fruits[0].components(separatedBy: \" \")[0])!\n    let oranges = Int(fruits[1].components(separatedBy:\
    \ \" \")[0])!\n    return n - apples - oranges\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 19) == 8)\n\
    assert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21) == 10)\nassert(fruit_distribution(s:\
    \ \"0 apples and 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"1 apples\
    \ and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples and 3\
    \ oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\"\
    , n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples and 100 oranges\", n: 120)\
    \ == 19)"
  status: SyntaxError
  stderr: "/tmp/tmprln0hg_6.swift:17:20: error: value of type 'String' has no member\
    \ 'components'\n    let fruits = s.components(separatedBy: \" and \")\n      \
    \           ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824638
- exit_code: 0
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    let arr = s.split(separator: \" \")\n    let numOfApples = Int(arr[0])!\n\
    \    let numOfOranges = Int(arr[3])!\n    return n - numOfApples - numOfOranges\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fruit_distribution(s: \"5 apples and 6 oranges\"\
    , n: 19) == 8)\nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21)\
    \ == 10)\nassert(fruit_distribution(s: \"0 apples and 1 oranges\", n: 3) == 2)\n\
    assert(fruit_distribution(s: \"1 apples and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s:\
    \ \"2 apples and 3 oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"\
    2 apples and 3 oranges\", n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples\
    \ and 100 oranges\", n: 120) == 19)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824639
- exit_code: -4
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    // Write your code here\n    var s = s.split(separator: \" \"\
    )\n    let a = Int(s[0])!\n    let o = Int(s[2])!\n    return n - a - o\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fruit_distribution(s: \"5 apples and 6 oranges\"\
    , n: 19) == 8)\nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21)\
    \ == 10)\nassert(fruit_distribution(s: \"0 apples and 1 oranges\", n: 3) == 2)\n\
    assert(fruit_distribution(s: \"1 apples and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s:\
    \ \"2 apples and 3 oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"\
    2 apples and 3 oranges\", n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples\
    \ and 100 oranges\", n: 120) == 19)"
  status: Exception
  stderr: 'tmp7duvkawn/tmp7duvkawn.swift:20: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002ab414bf8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab4148ef561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ab4148ef286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ab4148ef13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ab4148eebb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmp7duvkawn                        0x000055bb18feff9a <unavailable> + 8090

    6    tmp7duvkawn                        0x000055bb18fef64b <unavailable> + 5707

    7    libc.so.6                          0x00002ab414de4460 __libc_start_main +
    245

    8    tmp7duvkawn                        0x000055bb18fef349 <unavailable> + 4937

    '
  stdout: ''
  timestamp: 1659824639
- exit_code: -4
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    // Write your code here\n    return 0\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 19)\
    \ == 8)\nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21) == 10)\n\
    assert(fruit_distribution(s: \"0 apples and 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s:\
    \ \"1 apples and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"2 apples and\
    \ 3 oranges\", n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples and 100 oranges\"\
    , n: 120) == 19)"
  status: Exception
  stderr: 'tmpfincxi2h/tmpfincxi2h.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b42dd89cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b42dd593b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b42dd593988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b42dd5927b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfincxi2h                        0x000055972c5b8269 <unavailable> + 4713

    5    libc.so.6                          0x00002b42dda88460 __libc_start_main +
    245

    6    tmpfincxi2h                        0x000055972c5b7ee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1659824639
- exit_code: -4
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    var sum = 0\n    var num = 0\n    var str = \"\"\n    for i in\
    \ s {\n        if i == \" \" {\n            sum += Int(str)!\n            str\
    \ = \"\"\n        } else if i == \"a\" {\n            sum += Int(str)!\n     \
    \       str = \"\"\n        } else if i == \"n\" {\n            sum += Int(str)!\n\
    \            str = \"\"\n        } else if i == \"d\" {\n            sum += Int(str)!\n\
    \            str = \"\"\n        } else {\n            str += String(i)\n    \
    \    }\n    }\n    num = n - sum\n    return num\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 19)\
    \ == 8)\nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21) == 10)\n\
    assert(fruit_distribution(s: \"0 apples and 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s:\
    \ \"1 apples and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"2 apples and\
    \ 3 oranges\", n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples and 100 oranges\"\
    , n: 120) == 19)"
  status: Exception
  stderr: 'tmpe51nmr29/tmpe51nmr29.swift:25: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002b0897c90c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0897987561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b0897987286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b089798713c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b0897986bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpe51nmr29                        0x000055a56fc32eaf <unavailable> + 7855

    6    tmpe51nmr29                        0x000055a56fc3258b <unavailable> + 5515

    7    libc.so.6                          0x00002b0897e7c460 __libc_start_main +
    245

    8    tmpe51nmr29                        0x000055a56fc32289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1659824639
- exit_code: 0
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    // Write your code here\n    var total = 0\n    var fruits = s.split(separator:\
    \ \" \")\n    for i in 0..<fruits.count {\n        if fruits[i] == \"apples\"\
    \ {\n            total += Int(fruits[i-1])!\n        } else if fruits[i] == \"\
    oranges\" {\n            total += Int(fruits[i-1])!\n        }\n    }\n    return\
    \ n - total\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19) == 8)\nassert(fruit_distribution(s: \"5 apples\
    \ and 6 oranges\", n: 21) == 10)\nassert(fruit_distribution(s: \"0 apples and\
    \ 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"1 apples and 0 oranges\"\
    , n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\", n: 100)\
    \ == 95)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\", n: 5) == 0)\n\
    assert(fruit_distribution(s: \"1 apples and 100 oranges\", n: 120) == 19)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824639
- exit_code: -4
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    // write your code here\n    return 0\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 19)\
    \ == 8)\nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21) == 10)\n\
    assert(fruit_distribution(s: \"0 apples and 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s:\
    \ \"1 apples and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"2 apples and\
    \ 3 oranges\", n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples and 100 oranges\"\
    , n: 120) == 19)"
  status: Exception
  stderr: 'tmpsj1fbkez/tmpsj1fbkez.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab8a4bddc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab8a48d4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab8a48d4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab8a48d37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsj1fbkez                        0x00005555a8246269 <unavailable> + 4713

    5    libc.so.6                          0x00002ab8a4dc9460 __libc_start_main +
    245

    6    tmpsj1fbkez                        0x00005555a8245ee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1659824639
- exit_code: 1
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    var apples = 0\n    var oranges = 0\n    var mangoes = 0\n   \
    \ var sum = 0\n    var i = 0\n    var j = 0\n    var k = 0\n    var l = 0\n  \
    \  var m = 0\n    var n = 0\n    var o = 0\n    var p = 0\n    var q = 0\n   \
    \ var r = 0\n    var s = 0\n    var t = 0\n    var u = 0\n    var v = 0\n    var\
    \ w = 0\n    var x = 0\n    var y = 0\n    var z = 0\n    var a = 0\n    var b\
    \ = 0\n    var c = 0\n    var d = 0\n    var e = 0\n    var f = 0\n    var g =\
    \ 0\n    var h = 0\n    var ii = 0\n    var jj = 0\n    var kk = 0\n    var ll\
    \ = 0\n    var mm = 0\n    var nn = 0\n    var oo = 0\n    var pp = 0\n    var\
    \ qq = 0\n    var rr = 0\n    var ss = 0\n    var tt = 0\n    var uu = 0\n   \
    \ var vv = 0\n    var ww = 0\n    var xx = 0\n    var yy = 0\n    var zz = 0\n\
    \    var aa = 0\n    var bb = 0\n    var cc = 0\n    var dd = 0\n    var ee =\
    \ 0\n    var ff = 0\n    var gg = 0\n    var hh = 0\n    var iii = 0\n    var\
    \ jjj = 0\n    var kkk = 0\n    var lll = 0\n    var mmm = 0\n    var nnn = 0\n\
    \    var ooo = 0\n    var ppp = 0\n    var qqq = 0\n    var rrr = 0\n    var sss\
    \ = 0\n    var ttt = 0\n    var uuu = 0\n    var vvv = 0\n    var www = 0\n  \
    \  var xxx = 0\n    var yyy = 0\n    var zzz = 0\n    var aaaa = 0\n    var bbbb\
    \ = 0\n    var cccc = 0\n    var dddd = 0\n    var\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 19)\
    \ == 8)\nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21) == 10)\n\
    assert(fruit_distribution(s: \"0 apples and 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s:\
    \ \"1 apples and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"2 apples and\
    \ 3 oranges\", n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples and 100 oranges\"\
    , n: 120) == 19)"
  status: SyntaxError
  stderr: "/tmp/tmp1ttqa1u2.swift:95:8: error: expected pattern\n    var\n       ^\n\
    /tmp/tmp1ttqa1u2.swift:17:9: warning: initialization of variable 'apples' was\
    \ never used; consider replacing with assignment to '_' or removing it\n    var\
    \ apples = 0\n    ~~~~^~~~~~\n    _\n/tmp/tmp1ttqa1u2.swift:18:9: warning: initialization\
    \ of variable 'oranges' was never used; consider replacing with assignment to\
    \ '_' or removing it\n    var oranges = 0\n    ~~~~^~~~~~~\n    _\n/tmp/tmp1ttqa1u2.swift:19:9:\
    \ warning: initialization of variable 'mangoes' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var mangoes = 0\n    ~~~~^~~~~~~\n\
    \    _\n/tmp/tmp1ttqa1u2.swift:20:9: warning: initialization of variable 'sum'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var sum = 0\n    ~~~~^~~\n    _\n/tmp/tmp1ttqa1u2.swift:21:9: warning: initialization\
    \ of variable 'i' was never used; consider replacing with assignment to '_' or\
    \ removing it\n    var i = 0\n    ~~~~^\n    _\n/tmp/tmp1ttqa1u2.swift:22:9: warning:\
    \ initialization of variable 'j' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var j = 0\n    ~~~~^\n    _\n/tmp/tmp1ttqa1u2.swift:23:9:\
    \ warning: initialization of variable 'k' was never used; consider replacing with\
    \ assignment to '_' or removing it\n    var k = 0\n    ~~~~^\n    _\n/tmp/tmp1ttqa1u2.swift:24:9:\
    \ warning: initialization of variable 'l' was never used; consider replacing with\
    \ assignment to '_' or removing it\n    var l = 0\n    ~~~~^\n    _\n/tmp/tmp1ttqa1u2.swift:25:9:\
    \ warning: initialization of variable 'm' was never used; consider replacing with\
    \ assignment to '_' or removing it\n    var m = 0\n    ~~~~^\n    _\n/tmp/tmp1ttqa1u2.swift:26:9:\
    \ warning: initialization of variable 'n' was never used; consider replacing with\
    \ assignment to '_' or removing it\n    var n = 0\n    ~~~~^\n    _\n/tmp/tmp1ttqa1u2.swift:27:9:\
    \ warning: initialization of variable 'o' was never used; consider replacing with\
    \ assignment to '_' or removing it\n    var o = 0\n    ~~~~^\n    _\n/tmp/tmp1ttqa1u2.swift:28:9: "
  stdout: ''
  timestamp: 1659824639
- exit_code: -4
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    // Write your code here\n    return 0\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 19)\
    \ == 8)\nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21) == 10)\n\
    assert(fruit_distribution(s: \"0 apples and 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s:\
    \ \"1 apples and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"2 apples and\
    \ 3 oranges\", n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples and 100 oranges\"\
    , n: 120) == 19)"
  status: Exception
  stderr: 'tmpfincxi2h/tmpfincxi2h.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b42dd89cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b42dd593b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b42dd593988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b42dd5927b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfincxi2h                        0x000055972c5b8269 <unavailable> + 4713

    5    libc.so.6                          0x00002b42dda88460 __libc_start_main +
    245

    6    tmpfincxi2h                        0x000055972c5b7ee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1659824639
- exit_code: -4
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    // Write your code here\n    return 0\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 19)\
    \ == 8)\nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21) == 10)\n\
    assert(fruit_distribution(s: \"0 apples and 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s:\
    \ \"1 apples and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"2 apples and\
    \ 3 oranges\", n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples and 100 oranges\"\
    , n: 120) == 19)"
  status: Exception
  stderr: 'tmpfincxi2h/tmpfincxi2h.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b42dd89cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b42dd593b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b42dd593988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b42dd5927b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfincxi2h                        0x000055972c5b8269 <unavailable> + 4713

    5    libc.so.6                          0x00002b42dda88460 __libc_start_main +
    245

    6    tmpfincxi2h                        0x000055972c5b7ee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1659824639
- exit_code: -4
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    // Write your code here\n    return 0\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 19)\
    \ == 8)\nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21) == 10)\n\
    assert(fruit_distribution(s: \"0 apples and 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s:\
    \ \"1 apples and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"2 apples and\
    \ 3 oranges\", n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples and 100 oranges\"\
    , n: 120) == 19)"
  status: Exception
  stderr: 'tmpfincxi2h/tmpfincxi2h.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b42dd89cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b42dd593b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b42dd593988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b42dd5927b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfincxi2h                        0x000055972c5b8269 <unavailable> + 4713

    5    libc.so.6                          0x00002b42dda88460 __libc_start_main +
    245

    6    tmpfincxi2h                        0x000055972c5b7ee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1659824639
- exit_code: -4
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    // write your code here\n    return 0\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 19)\
    \ == 8)\nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21) == 10)\n\
    assert(fruit_distribution(s: \"0 apples and 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s:\
    \ \"1 apples and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"2 apples and\
    \ 3 oranges\", n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples and 100 oranges\"\
    , n: 120) == 19)"
  status: Exception
  stderr: 'tmpsj1fbkez/tmpsj1fbkez.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab8a4bddc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab8a48d4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab8a48d4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab8a48d37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsj1fbkez                        0x00005555a8246269 <unavailable> + 4713

    5    libc.so.6                          0x00002ab8a4dc9460 __libc_start_main +
    245

    6    tmpsj1fbkez                        0x00005555a8245ee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1659824639
- exit_code: -4
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    // Write your code here\n    return 0\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 19)\
    \ == 8)\nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21) == 10)\n\
    assert(fruit_distribution(s: \"0 apples and 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s:\
    \ \"1 apples and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"2 apples and\
    \ 3 oranges\", n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples and 100 oranges\"\
    , n: 120) == 19)"
  status: Exception
  stderr: 'tmpfincxi2h/tmpfincxi2h.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b42dd89cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b42dd593b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b42dd593988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b42dd5927b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfincxi2h                        0x000055972c5b8269 <unavailable> + 4713

    5    libc.so.6                          0x00002b42dda88460 __libc_start_main +
    245

    6    tmpfincxi2h                        0x000055972c5b7ee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1659824639
- exit_code: 1
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    // Write your code here\n    var total = 0\n    var apples = 0\n\
    \    var oranges = 0\n    var mangoes = 0\n    var i = 0\n    var j = 0\n    var\
    \ k = 0\n    var l = 0\n    var m = 0\n    var n = 0\n    var o = 0\n    var p\
    \ = 0\n    var q = 0\n    var r = 0\n    var s = 0\n    var t = 0\n    var u =\
    \ 0\n    var v = 0\n    var w = 0\n    var x = 0\n    var y = 0\n    var z = 0\n\
    \    var a = 0\n    var b = 0\n    var c = 0\n    var d = 0\n    var e = 0\n \
    \   var f = 0\n    var g = 0\n    var h = 0\n    var aa = 0\n    var bb = 0\n\
    \    var cc = 0\n    var dd = 0\n    var ee = 0\n    var ff = 0\n    var gg =\
    \ 0\n    var hh = 0\n    var ii = 0\n    var jj = 0\n    var kk = 0\n    var ll\
    \ = 0\n    var mm = 0\n    var nn = 0\n    var oo = 0\n    var pp = 0\n    var\
    \ qq = 0\n    var rr = 0\n    var ss = 0\n    var tt = 0\n    var uu = 0\n   \
    \ var vv = 0\n    var ww = 0\n    var xx = 0\n    var yy = 0\n    var zz = 0\n\
    \    var aaa = 0\n    var bbb = 0\n    var ccc = 0\n    var ddd = 0\n    var eee\
    \ = 0\n    var fff = 0\n    var ggg = 0\n    var hhh = 0\n    var iii = 0\n  \
    \  var jjj = 0\n    var kkk = 0\n    var lll = 0\n    var mmm = 0\n    var nnn\
    \ = 0\n    var ooo = 0\n    var ppp = 0\n    var qqq = 0\n    var rrr = 0\n  \
    \  var sss = 0\n    var ttt = 0\n    var uuu = 0\n    var vvv\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 19)\
    \ == 8)\nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21) == 10)\n\
    assert(fruit_distribution(s: \"0 apples and 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s:\
    \ \"1 apples and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"2 apples and\
    \ 3 oranges\", n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples and 100 oranges\"\
    , n: 120) == 19)"
  status: SyntaxError
  stderr: "/tmp/tmpt4xfhwaf.swift:95:9: error: type annotation missing in pattern\n\
    \    var vvv\n        ^\n"
  stdout: ''
  timestamp: 1659824639
- exit_code: -4
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    // Write your code here\n    return 0\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 19)\
    \ == 8)\nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21) == 10)\n\
    assert(fruit_distribution(s: \"0 apples and 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s:\
    \ \"1 apples and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"2 apples and\
    \ 3 oranges\", n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples and 100 oranges\"\
    , n: 120) == 19)"
  status: Exception
  stderr: 'tmpfincxi2h/tmpfincxi2h.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b42dd89cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b42dd593b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b42dd593988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b42dd5927b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfincxi2h                        0x000055972c5b8269 <unavailable> + 4713

    5    libc.so.6                          0x00002b42dda88460 __libc_start_main +
    245

    6    tmpfincxi2h                        0x000055972c5b7ee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1659824639
- exit_code: -4
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    let arr = s.split(separator: \" \")\n    let num_apples = Int(arr[0])!\n\
    \    let num_oranges = Int(arr[2])!\n    let num_mangoes = n - num_apples - num_oranges\n\
    \    return num_mangoes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19) == 8)\nassert(fruit_distribution(s: \"5 apples\
    \ and 6 oranges\", n: 21) == 10)\nassert(fruit_distribution(s: \"0 apples and\
    \ 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"1 apples and 0 oranges\"\
    , n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\", n: 100)\
    \ == 95)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\", n: 5) == 0)\n\
    assert(fruit_distribution(s: \"1 apples and 100 oranges\", n: 120) == 19)"
  status: Exception
  stderr: 'tmpor58knhk/tmpor58knhk.swift:19: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002b226c834c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b226c52b561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b226c52b286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b226c52b13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b226c52abb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpor58knhk                        0x0000560f48e0cebd <unavailable> + 7869

    6    tmpor58knhk                        0x0000560f48e0c5fb <unavailable> + 5627

    7    libc.so.6                          0x00002b226ca20460 __libc_start_main +
    245

    8    tmpor58knhk                        0x0000560f48e0c2f9 <unavailable> + 4857

    '
  stdout: ''
  timestamp: 1659824639
- exit_code: 1
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    var totalApples = 0\n    var totalOranges = 0\n    var totalMangoes\
    \ = 0\n    var totalFruits = 0\n    var totalFruitsString = \"\"\n    var totalApplesString\
    \ = \"\"\n    var totalOrangesString = \"\"\n    var totalMangoesString = \"\"\
    \n    var totalFruitsArray = [String]()\n    var totalApplesArray = [String]()\n\
    \    var totalOrangesArray = [String]()\n    var totalMangoesArray = [String]()\n\
    \    var totalFruitsArray2 = [String]()\n    var totalApplesArray2 = [String]()\n\
    \    var totalOrangesArray2 = [String]()\n    var totalMangoesArray2 = [String]()\n\
    \    var totalFruitsArray3 = [String]()\n    var totalApplesArray3 = [String]()\n\
    \    var totalOrangesArray3 = [String]()\n    var totalMangoesArray3 = [String]()\n\
    \    var totalFruitsArray4 = [String]()\n    var totalApplesArray4 = [String]()\n\
    \    var totalOrangesArray4 = [String]()\n    var totalMangoesArray4 = [String]()\n\
    \    var totalFruitsArray5 = [String]()\n    var totalApplesArray5 = [String]()\n\
    \    var totalOrangesArray5 = [String]()\n    var totalMangoesArray5 = [String]()\n\
    \    var totalFruitsArray6 = [String]()\n    var totalApplesArray6 = [String]()\n\
    \    var totalOrangesArray6 = [String]()\n    var totalMangoesArray6 = [String]()\n\
    \    var totalFruitsArray7 = [String]()\n    var totalApplesArray7 = [String]()\n\
    \    var totalOrangesArray7 = [String]()\n    var totalMangoesArray7 = [String]()\n\
    \    var totalFruitsArray8 = [String]()\n    var totalApplesArray8 = [String]()\n\
    \    var totalOrangesArray8 = [String]()\n    var totalMangoesArray8 = [String]()\n\
    \    var totalFruitsArray9 = [String]()\n    var totalApplesArray9 =\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fruit_distribution(s: \"5 apples and 6 oranges\"\
    , n: 19) == 8)\nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21)\
    \ == 10)\nassert(fruit_distribution(s: \"0 apples and 1 oranges\", n: 3) == 2)\n\
    assert(fruit_distribution(s: \"1 apples and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s:\
    \ \"2 apples and 3 oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"\
    2 apples and 3 oranges\", n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples\
    \ and 100 oranges\", n: 120) == 19)"
  status: SyntaxError
  stderr: "/tmp/tmp9lfvi570.swift:58:28: error: expected initial value after '='\n\
    \    var totalApplesArray9 =\n                           ^\n"
  stdout: ''
  timestamp: 1659824639
- exit_code: -4
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    // Write your code here\n    return 0\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 19)\
    \ == 8)\nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21) == 10)\n\
    assert(fruit_distribution(s: \"0 apples and 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s:\
    \ \"1 apples and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"2 apples and\
    \ 3 oranges\", n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples and 100 oranges\"\
    , n: 120) == 19)"
  status: Exception
  stderr: 'tmpfincxi2h/tmpfincxi2h.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b42dd89cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b42dd593b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b42dd593988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b42dd5927b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfincxi2h                        0x000055972c5b8269 <unavailable> + 4713

    5    libc.so.6                          0x00002b42dda88460 __libc_start_main +
    245

    6    tmpfincxi2h                        0x000055972c5b7ee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1659824639
- exit_code: -4
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    var mango = 0\n    var apple = 0\n    var orange = 0\n    var\
    \ temp = \"\"\n    for i in s {\n        if i == \" \" {\n            if temp\
    \ == \"apples\" {\n                apple = Int(temp)!\n            } else if temp\
    \ == \"oranges\" {\n                orange = Int(temp)!\n            }\n     \
    \       temp = \"\"\n        } else if i == \"a\" {\n            temp = \"\"\n\
    \        } else if i == \"n\" {\n            temp = \"\"\n        } else if i\
    \ == \"d\" {\n            temp = \"\"\n        } else {\n            temp += String(i)\n\
    \        }\n    }\n    mango = n - (apple + orange)\n    return mango\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fruit_distribution(s: \"5 apples and 6 oranges\"\
    , n: 19) == 8)\nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21)\
    \ == 10)\nassert(fruit_distribution(s: \"0 apples and 1 oranges\", n: 3) == 2)\n\
    assert(fruit_distribution(s: \"1 apples and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s:\
    \ \"2 apples and 3 oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"\
    2 apples and 3 oranges\", n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples\
    \ and 100 oranges\", n: 120) == 19)"
  status: Exception
  stderr: 'tmpak38vi8h/tmpak38vi8h.swift:56: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab1e8c94c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab1e898bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab1e898b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab1e898a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpak38vi8h                        0x000055b0c60d9659 <unavailable> + 5721

    5    libc.so.6                          0x00002ab1e8e80460 __libc_start_main +
    245

    6    tmpak38vi8h                        0x000055b0c60d92d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1659824639
- exit_code: -4
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    let arr = s.split(separator: \" \")\n    let apples = Int(arr[0])!\n\
    \    let oranges = Int(arr[2])!\n    return n - apples - oranges\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fruit_distribution(s: \"5 apples and 6 oranges\"\
    , n: 19) == 8)\nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21)\
    \ == 10)\nassert(fruit_distribution(s: \"0 apples and 1 oranges\", n: 3) == 2)\n\
    assert(fruit_distribution(s: \"1 apples and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s:\
    \ \"2 apples and 3 oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"\
    2 apples and 3 oranges\", n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples\
    \ and 100 oranges\", n: 120) == 19)"
  status: Exception
  stderr: 'tmprd31g2wb/tmprd31g2wb.swift:19: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002afc720d9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afc71dd0561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002afc71dd0286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002afc71dd013c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002afc71dcfbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmprd31g2wb                        0x000055f789418eaa <unavailable> + 7850

    6    tmprd31g2wb                        0x000055f7894185fb <unavailable> + 5627

    7    libc.so.6                          0x00002afc722c5460 __libc_start_main +
    245

    8    tmprd31g2wb                        0x000055f7894182f9 <unavailable> + 4857

    '
  stdout: ''
  timestamp: 1659824639
- exit_code: -4
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    // Write your code here\n    return 0\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 19)\
    \ == 8)\nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21) == 10)\n\
    assert(fruit_distribution(s: \"0 apples and 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s:\
    \ \"1 apples and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"2 apples and\
    \ 3 oranges\", n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples and 100 oranges\"\
    , n: 120) == 19)"
  status: Exception
  stderr: 'tmpfincxi2h/tmpfincxi2h.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b42dd89cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b42dd593b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b42dd593988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b42dd5927b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfincxi2h                        0x000055972c5b8269 <unavailable> + 4713

    5    libc.so.6                          0x00002b42dda88460 __libc_start_main +
    245

    6    tmpfincxi2h                        0x000055972c5b7ee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1659824639
- exit_code: -4
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    var fruits = s.split(separator: \" \")\n    let apples = Int(fruits[0])!\n\
    \    let oranges = Int(fruits[2])!\n    return n - apples - oranges\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fruit_distribution(s: \"5 apples and 6 oranges\"\
    , n: 19) == 8)\nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21)\
    \ == 10)\nassert(fruit_distribution(s: \"0 apples and 1 oranges\", n: 3) == 2)\n\
    assert(fruit_distribution(s: \"1 apples and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s:\
    \ \"2 apples and 3 oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"\
    2 apples and 3 oranges\", n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples\
    \ and 100 oranges\", n: 120) == 19)"
  status: Exception
  stderr: 'tmpu9dvs2sx/tmpu9dvs2sx.swift:19: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002b8c2f4d7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8c2f1ce561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b8c2f1ce286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b8c2f1ce13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b8c2f1cdbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpu9dvs2sx                        0x0000560964ebaf9a <unavailable> + 8090

    6    tmpu9dvs2sx                        0x0000560964eba64b <unavailable> + 5707

    7    libc.so.6                          0x00002b8c2f6c3460 __libc_start_main +
    245

    8    tmpu9dvs2sx                        0x0000560964eba349 <unavailable> + 4937

    '
  stdout: ''
  timestamp: 1659824639
- exit_code: 0
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    var result = 0\n    var apples = 0\n    var oranges = 0\n    var\
    \ mango = 0\n    var sum = 0\n    var arr = s.split(separator: \" \")\n    for\
    \ i in 0..<arr.count {\n        if arr[i] == \"apples\" {\n            apples\
    \ = Int(arr[i-1])!\n        }\n        if arr[i] == \"oranges\" {\n          \
    \  oranges = Int(arr[i-1])!\n        }\n    }\n    sum = apples + oranges\n  \
    \  mango = n - sum\n    result = mango\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 19)\
    \ == 8)\nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21) == 10)\n\
    assert(fruit_distribution(s: \"0 apples and 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s:\
    \ \"1 apples and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"2 apples and\
    \ 3 oranges\", n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples and 100 oranges\"\
    , n: 120) == 19)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824639
- exit_code: -4
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    let fruits = s.split(separator: \" \")\n    let apples = Int(fruits[0])!\n\
    \    let oranges = Int(fruits[2])!\n    return n - apples - oranges\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fruit_distribution(s: \"5 apples and 6 oranges\"\
    , n: 19) == 8)\nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21)\
    \ == 10)\nassert(fruit_distribution(s: \"0 apples and 1 oranges\", n: 3) == 2)\n\
    assert(fruit_distribution(s: \"1 apples and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s:\
    \ \"2 apples and 3 oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"\
    2 apples and 3 oranges\", n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples\
    \ and 100 oranges\", n: 120) == 19)"
  status: Exception
  stderr: 'tmpybd6fg3_/tmpybd6fg3_.swift:19: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002b882f3cec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b882f0c5561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b882f0c5286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b882f0c513c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b882f0c4bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpybd6fg3_                        0x000055a3c316ceaa <unavailable> + 7850

    6    tmpybd6fg3_                        0x000055a3c316c5fb <unavailable> + 5627

    7    libc.so.6                          0x00002b882f5ba460 __libc_start_main +
    245

    8    tmpybd6fg3_                        0x000055a3c316c2f9 <unavailable> + 4857

    '
  stdout: ''
  timestamp: 1659824639
- exit_code: -4
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    let fruits = s.split(separator: \" \")\n    let apples = Int(fruits[0])!\n\
    \    let oranges = Int(fruits[2])!\n    return n - apples - oranges\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fruit_distribution(s: \"5 apples and 6 oranges\"\
    , n: 19) == 8)\nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21)\
    \ == 10)\nassert(fruit_distribution(s: \"0 apples and 1 oranges\", n: 3) == 2)\n\
    assert(fruit_distribution(s: \"1 apples and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s:\
    \ \"2 apples and 3 oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"\
    2 apples and 3 oranges\", n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples\
    \ and 100 oranges\", n: 120) == 19)"
  status: Exception
  stderr: 'tmpybd6fg3_/tmpybd6fg3_.swift:19: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002b882f3cec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b882f0c5561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b882f0c5286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b882f0c513c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b882f0c4bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpybd6fg3_                        0x000055a3c316ceaa <unavailable> + 7850

    6    tmpybd6fg3_                        0x000055a3c316c5fb <unavailable> + 5627

    7    libc.so.6                          0x00002b882f5ba460 __libc_start_main +
    245

    8    tmpybd6fg3_                        0x000055a3c316c2f9 <unavailable> + 4857

    '
  stdout: ''
  timestamp: 1659824639
- exit_code: 0
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    let arr = s.split(separator: \" \")\n    let apple = Int(arr[0])!\n\
    \    let orange = Int(arr[3])!\n    return n - apple - orange\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 19)\
    \ == 8)\nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21) == 10)\n\
    assert(fruit_distribution(s: \"0 apples and 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s:\
    \ \"1 apples and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"2 apples and\
    \ 3 oranges\", n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples and 100 oranges\"\
    , n: 120) == 19)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824639
- exit_code: 0
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    // Write your code here\n    var str = s.split(separator: \" \"\
    )\n    var num = 0\n    for i in 0..<str.count {\n        if str[i] == \"apples\"\
    \ {\n            num += Int(str[i-1])!\n        }\n        if str[i] == \"oranges\"\
    \ {\n            num += Int(str[i-1])!\n        }\n    }\n    return n - num\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fruit_distribution(s: \"5 apples and 6 oranges\"\
    , n: 19) == 8)\nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21)\
    \ == 10)\nassert(fruit_distribution(s: \"0 apples and 1 oranges\", n: 3) == 2)\n\
    assert(fruit_distribution(s: \"1 apples and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s:\
    \ \"2 apples and 3 oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"\
    2 apples and 3 oranges\", n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples\
    \ and 100 oranges\", n: 120) == 19)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824639
- exit_code: 1
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    let fruits = s.components(separatedBy: \" and \")\n    let apples\
    \ = Int(fruits[0].components(separatedBy: \" \")[0])!\n    let oranges = Int(fruits[1].components(separatedBy:\
    \ \" \")[0])!\n    return n - apples - oranges\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 19) == 8)\n\
    assert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21) == 10)\nassert(fruit_distribution(s:\
    \ \"0 apples and 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"1 apples\
    \ and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples and 3\
    \ oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\"\
    , n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples and 100 oranges\", n: 120)\
    \ == 19)"
  status: SyntaxError
  stderr: "/tmp/tmprln0hg_6.swift:17:20: error: value of type 'String' has no member\
    \ 'components'\n    let fruits = s.components(separatedBy: \" and \")\n      \
    \           ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824638
- exit_code: 1
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    var apples = 0\n    var oranges = 0\n    var mangoes = 0\n   \
    \ var total = 0\n    var i = 0\n    var j = 0\n    var k = 0\n    var l = 0\n\
    \    var m = 0\n    var n = 0\n    var o = 0\n    var p = 0\n    var q = 0\n \
    \   var r = 0\n    var s = 0\n    var t = 0\n    var u = 0\n    var v = 0\n  \
    \  var w = 0\n    var x = 0\n    var y = 0\n    var z = 0\n    var a = 0\n   \
    \ var b = 0\n    var c = 0\n    var d = 0\n    var e = 0\n    var f = 0\n    var\
    \ g = 0\n    var h = 0\n    var ii = 0\n    var jj = 0\n    var kk = 0\n    var\
    \ ll = 0\n    var mm = 0\n    var nn = 0\n    var oo = 0\n    var pp = 0\n   \
    \ var qq = 0\n    var rr = 0\n    var ss = 0\n    var tt = 0\n    var uu = 0\n\
    \    var vv = 0\n    var ww = 0\n    var xx = 0\n    var yy = 0\n    var zz =\
    \ 0\n    var aa = 0\n    var bb = 0\n    var cc = 0\n    var dd = 0\n    var ee\
    \ = 0\n    var ff = 0\n    var gg = 0\n    var hh = 0\n    var iii = 0\n    var\
    \ jjj = 0\n    var kkk = 0\n    var lll = 0\n    var mmm = 0\n    var nnn = 0\n\
    \    var ooo = 0\n    var ppp = 0\n    var qqq = 0\n    var rrr = 0\n    var sss\
    \ = 0\n    var ttt = 0\n    var uuu = 0\n    var vvv = 0\n    var www = 0\n  \
    \  var xxx = 0\n    var yyy = 0\n    var zzz = 0\n    var aaaa = 0\n    var bbbb\
    \ = 0\n    var cccc = 0\n    var dddd = 0\n    var\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 19)\
    \ == 8)\nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21) == 10)\n\
    assert(fruit_distribution(s: \"0 apples and 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s:\
    \ \"1 apples and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"2 apples and\
    \ 3 oranges\", n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples and 100 oranges\"\
    , n: 120) == 19)"
  status: SyntaxError
  stderr: "/tmp/tmpqcjz96gj.swift:95:8: error: expected pattern\n    var\n       ^\n\
    /tmp/tmpqcjz96gj.swift:17:9: warning: initialization of variable 'apples' was\
    \ never used; consider replacing with assignment to '_' or removing it\n    var\
    \ apples = 0\n    ~~~~^~~~~~\n    _\n/tmp/tmpqcjz96gj.swift:18:9: warning: initialization\
    \ of variable 'oranges' was never used; consider replacing with assignment to\
    \ '_' or removing it\n    var oranges = 0\n    ~~~~^~~~~~~\n    _\n/tmp/tmpqcjz96gj.swift:19:9:\
    \ warning: initialization of variable 'mangoes' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var mangoes = 0\n    ~~~~^~~~~~~\n\
    \    _\n/tmp/tmpqcjz96gj.swift:20:9: warning: initialization of variable 'total'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var total = 0\n    ~~~~^~~~~\n    _\n/tmp/tmpqcjz96gj.swift:21:9: warning:\
    \ initialization of variable 'i' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var i = 0\n    ~~~~^\n    _\n/tmp/tmpqcjz96gj.swift:22:9:\
    \ warning: initialization of variable 'j' was never used; consider replacing with\
    \ assignment to '_' or removing it\n    var j = 0\n    ~~~~^\n    _\n/tmp/tmpqcjz96gj.swift:23:9:\
    \ warning: initialization of variable 'k' was never used; consider replacing with\
    \ assignment to '_' or removing it\n    var k = 0\n    ~~~~^\n    _\n/tmp/tmpqcjz96gj.swift:24:9:\
    \ warning: initialization of variable 'l' was never used; consider replacing with\
    \ assignment to '_' or removing it\n    var l = 0\n    ~~~~^\n    _\n/tmp/tmpqcjz96gj.swift:25:9:\
    \ warning: initialization of variable 'm' was never used; consider replacing with\
    \ assignment to '_' or removing it\n    var m = 0\n    ~~~~^\n    _\n/tmp/tmpqcjz96gj.swift:26:9:\
    \ warning: initialization of variable 'n' was never used; consider replacing with\
    \ assignment to '_' or removing it\n    var n = 0\n    ~~~~^\n    _\n/tmp/tmpqcjz96gj.swift:27:9:\
    \ warning: initialization of variable 'o' was never used; consider replacing with\
    \ assignment to '_' or removing it\n    var o = 0\n    ~~~~^\n    _\n/tmp/tmpqcjz96gj.swift:"
  stdout: ''
  timestamp: 1659824639
- exit_code: 0
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    let fruits = s.split(separator: \" \")\n    let apples = Int(fruits[0])!\n\
    \    let oranges = Int(fruits[3])!\n    return n - apples - oranges\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fruit_distribution(s: \"5 apples and 6 oranges\"\
    , n: 19) == 8)\nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21)\
    \ == 10)\nassert(fruit_distribution(s: \"0 apples and 1 oranges\", n: 3) == 2)\n\
    assert(fruit_distribution(s: \"1 apples and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s:\
    \ \"2 apples and 3 oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"\
    2 apples and 3 oranges\", n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples\
    \ and 100 oranges\", n: 120) == 19)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824639
- exit_code: 1
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    var totalApples = 0\n    var totalOranges = 0\n    var totalMangoes\
    \ = 0\n    var totalFruits = 0\n    var totalFruitsString = \"\"\n    var totalApplesString\
    \ = \"\"\n    var totalOrangesString = \"\"\n    var totalMangoesString = \"\"\
    \n    var totalFruitsStringArray = [String]()\n    var totalApplesStringArray\
    \ = [String]()\n    var totalOrangesStringArray = [String]()\n    var totalMangoesStringArray\
    \ = [String]()\n    var totalFruitsArray = [Int]()\n    var totalApplesArray =\
    \ [Int]()\n    var totalOrangesArray = [Int]()\n    var totalMangoesArray = [Int]()\n\
    \    var totalFruitsStringArray2 = [String]()\n    var totalApplesStringArray2\
    \ = [String]()\n    var totalOrangesStringArray2 = [String]()\n    var totalMangoesStringArray2\
    \ = [String]()\n    var totalFruitsArray2 = [Int]()\n    var totalApplesArray2\
    \ = [Int]()\n    var totalOrangesArray2 = [Int]()\n    var totalMangoesArray2\
    \ = [Int]()\n    var totalFruitsStringArray3 = [String]()\n    var totalApplesStringArray3\
    \ = [String]()\n    var totalOrangesStringArray3 = [String]()\n    var totalMangoesStringArray3\
    \ = [String]()\n    var totalFruitsArray3 = [Int]()\n    var totalApplesArray3\
    \ = [Int]()\n    var totalOrangesArray3 = [Int]()\n    var totalMangoesArray3\
    \ = [Int]()\n    var totalFruitsStringArray4 = [String]()\n    var totalApplesStringArray4\
    \ = [String]()\n    var totalOrangesStringArray4 = [String]()\n    var totalMangoesStringArray4\
    \ = [String]()\n    var totalFruitsArray4 = [Int]()\n    var totalApplesArray4\
    \ = [Int]()\n    var totalOrangesArray4 = [Int]()\n    var totalMangoesArray4\
    \ = [Int]()\n    var totalFruitsStringArray5 =\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 19) == 8)\n\
    assert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21) == 10)\nassert(fruit_distribution(s:\
    \ \"0 apples and 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"1 apples\
    \ and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples and 3\
    \ oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\"\
    , n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples and 100 oranges\", n: 120)\
    \ == 19)"
  status: SyntaxError
  stderr: "/tmp/tmprmyu3kp5.swift:57:34: error: expected initial value after '='\n\
    \    var totalFruitsStringArray5 =\n                                 ^\n"
  stdout: ''
  timestamp: 1659824639
- exit_code: -4
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    let arr = s.split(separator: \" \")\n    let a = Int(arr[0])!\n\
    \    let o = Int(arr[2])!\n    return n - a - o\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 19) == 8)\n\
    assert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21) == 10)\nassert(fruit_distribution(s:\
    \ \"0 apples and 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"1 apples\
    \ and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples and 3\
    \ oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\"\
    , n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples and 100 oranges\", n: 120)\
    \ == 19)"
  status: Exception
  stderr: 'tmpywydsiss/tmpywydsiss.swift:19: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002b26d1238c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b26d0f2f561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b26d0f2f286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b26d0f2f13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b26d0f2ebb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpywydsiss                        0x00005653cef2beaa <unavailable> + 7850

    6    tmpywydsiss                        0x00005653cef2b5fb <unavailable> + 5627

    7    libc.so.6                          0x00002b26d1424460 __libc_start_main +
    245

    8    tmpywydsiss                        0x00005653cef2b2f9 <unavailable> + 4857

    '
  stdout: ''
  timestamp: 1659824639
- exit_code: 0
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    var fruits = s.split(separator: \" \")\n    let apples = Int(fruits[0])!\n\
    \    let oranges = Int(fruits[3])!\n    return n - apples - oranges\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fruit_distribution(s: \"5 apples and 6 oranges\"\
    , n: 19) == 8)\nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21)\
    \ == 10)\nassert(fruit_distribution(s: \"0 apples and 1 oranges\", n: 3) == 2)\n\
    assert(fruit_distribution(s: \"1 apples and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s:\
    \ \"2 apples and 3 oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"\
    2 apples and 3 oranges\", n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples\
    \ and 100 oranges\", n: 120) == 19)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824639
- exit_code: 1
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    var total_apples = 0\n    var total_oranges = 0\n    var total_mangoes\
    \ = 0\n    var total_fruits = 0\n    var total_fruits_in_basket = 0\n    var total_fruits_in_string\
    \ = 0\n    var total_fruits_in_basket_string = 0\n    var total_fruits_in_basket_string_array\
    \ = [Character]()\n    var total_fruits_in_string_array = [Character]()\n    var\
    \ total_fruits_in_basket_string_array_count = 0\n    var total_fruits_in_string_array_count\
    \ = 0\n    var total_fruits_in_basket_string_array_count_index = 0\n    var total_fruits_in_string_array_count_index\
    \ = 0\n    var total_fruits_in_basket_string_array_count_index_value = 0\n   \
    \ var total_fruits_in_string_array_count_index_value = 0\n    var total_fruits_in_basket_string_array_count_index_value_int\
    \ = 0\n    var total_fruits_in_string_array_count_index_value_int = 0\n    var\
    \ total_fruits_in_basket_string_array_count_index_value_int_sum = 0\n    var total_fruits_in_string_array_count_index_value_int_sum\
    \ = 0\n    var total_fruits_in_basket_string_array_count_index_value_int_sum_sum\
    \ = 0\n    var total_fruits_in_string_array_count_index_value_int_sum_sum = 0\n\
    \    var total_fruits_in_basket_string_array_count_index_value_int_sum_sum_sum\
    \ = 0\n    var total_fruits_in_string_array_count_index_value_int_sum_sum_sum\
    \ = 0\n    var total_fruits_in_basket_string_array_count_index_value_int_sum_sum_sum_sum\
    \ = 0\n    var total_fruits_in_string_array_count_\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 19)\
    \ == 8)\nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21) == 10)\n\
    assert(fruit_distribution(s: \"0 apples and 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s:\
    \ \"1 apples and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"2 apples and\
    \ 3 oranges\", n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples and 100 oranges\"\
    , n: 120) == 19)"
  status: SyntaxError
  stderr: "/tmp/tmpc7ftke_0.swift:41:9: error: type annotation missing in pattern\n\
    \    var total_fruits_in_string_array_count_\n        ^\n"
  stdout: ''
  timestamp: 1659824639
- exit_code: 1
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    var mango = n\n    var apple = 0\n    var orange = 0\n    var\
    \ i = 0\n    var j = 0\n    var k = 0\n    var l = 0\n    var m = 0\n    var n\
    \ = 0\n    var o = 0\n    var p = 0\n    var q = 0\n    var r = 0\n    var s =\
    \ 0\n    var t = 0\n    var u = 0\n    var v = 0\n    var w = 0\n    var x = 0\n\
    \    var y = 0\n    var z = 0\n    var a = 0\n    var b = 0\n    var c = 0\n \
    \   var d = 0\n    var e = 0\n    var f = 0\n    var g = 0\n    var h = 0\n  \
    \  var ii = 0\n    var jj = 0\n    var kk = 0\n    var ll = 0\n    var mm = 0\n\
    \    var nn = 0\n    var oo = 0\n    var pp = 0\n    var qq = 0\n    var rr =\
    \ 0\n    var ss = 0\n    var tt = 0\n    var uu = 0\n    var vv = 0\n    var ww\
    \ = 0\n    var xx = 0\n    var yy = 0\n    var zz = 0\n    var aa = 0\n    var\
    \ bb = 0\n    var cc = 0\n    var dd = 0\n    var ee = 0\n    var ff = 0\n   \
    \ var gg = 0\n    var hh = 0\n    var iii = 0\n    var jjj = 0\n    var kkk =\
    \ 0\n    var lll = 0\n    var mmm = 0\n    var nnn = 0\n    var ooo = 0\n    var\
    \ ppp = 0\n    var qqq = 0\n    var rrr = 0\n    var sss = 0\n    var ttt = 0\n\
    \    var uuu = 0\n    var vvv = 0\n    var www = 0\n    var xxx = 0\n    var yyy\
    \ = 0\n    var zzz = 0\n    var aaaa = 0\n    var bbbb = 0\n    var cccc = 0\n\
    \    var dddd = 0\n    var eeee = 0\n   \n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 19) == 8)\nassert(fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 21) == 10)\nassert(fruit_distribution(s: \"0\
    \ apples and 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"1 apples\
    \ and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples and 3\
    \ oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\"\
    , n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples and 100 oranges\", n: 120)\
    \ == 19)"
  status: SyntaxError
  stderr: "/tmp/tmpaas76n90.swift:17:9: warning: initialization of variable 'mango'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var mango = n\n    ~~~~^~~~~\n    _\n/tmp/tmpaas76n90.swift:18:9: warning:\
    \ initialization of variable 'apple' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var apple = 0\n    ~~~~^~~~~\n    _\n/tmp/tmpaas76n90.swift:19:9:\
    \ warning: initialization of variable 'orange' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var orange = 0\n    ~~~~^~~~~~\n\
    \    _\n/tmp/tmpaas76n90.swift:20:9: warning: initialization of variable 'i' was\
    \ never used; consider replacing with assignment to '_' or removing it\n    var\
    \ i = 0\n    ~~~~^\n    _\n/tmp/tmpaas76n90.swift:21:9: warning: initialization\
    \ of variable 'j' was never used; consider replacing with assignment to '_' or\
    \ removing it\n    var j = 0\n    ~~~~^\n    _\n/tmp/tmpaas76n90.swift:22:9: warning:\
    \ initialization of variable 'k' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var k = 0\n    ~~~~^\n    _\n/tmp/tmpaas76n90.swift:23:9:\
    \ warning: initialization of variable 'l' was never used; consider replacing with\
    \ assignment to '_' or removing it\n    var l = 0\n    ~~~~^\n    _\n/tmp/tmpaas76n90.swift:24:9:\
    \ warning: initialization of variable 'm' was never used; consider replacing with\
    \ assignment to '_' or removing it\n    var m = 0\n    ~~~~^\n    _\n/tmp/tmpaas76n90.swift:25:9:\
    \ warning: initialization of variable 'n' was never used; consider replacing with\
    \ assignment to '_' or removing it\n    var n = 0\n    ~~~~^\n    _\n/tmp/tmpaas76n90.swift:26:9:\
    \ warning: initialization of variable 'o' was never used; consider replacing with\
    \ assignment to '_' or removing it\n    var o = 0\n    ~~~~^\n    _\n/tmp/tmpaas76n90.swift:27:9:\
    \ warning: initialization of variable 'p' was never used; consider replacing with\
    \ assignment to '_' or removing it\n    var p = 0\n    ~~~~^\n    _\n/tmp/tmpaas76n90.swift:28:9:\
    \ warning: initialization of variable 'q' was never used; consider replacing with\
    \ assignme"
  stdout: ''
  timestamp: 1659824639
- exit_code: 0
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    var sum = 0\n    var s = s.split(separator: \" \")\n    for i\
    \ in 0..<s.count {\n        if s[i] == \"apples\" || s[i] == \"oranges\" {\n \
    \           sum += Int(s[i-1])!\n        }\n    }\n    return n - sum\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fruit_distribution(s: \"5 apples and 6 oranges\"\
    , n: 19) == 8)\nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21)\
    \ == 10)\nassert(fruit_distribution(s: \"0 apples and 1 oranges\", n: 3) == 2)\n\
    assert(fruit_distribution(s: \"1 apples and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s:\
    \ \"2 apples and 3 oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"\
    2 apples and 3 oranges\", n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples\
    \ and 100 oranges\", n: 120) == 19)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824639
- exit_code: -4
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    let arr = s.split(separator: \" \")\n    let apples = Int(arr[0])!\n\
    \    let oranges = Int(arr[2])!\n    return n - apples - oranges\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fruit_distribution(s: \"5 apples and 6 oranges\"\
    , n: 19) == 8)\nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21)\
    \ == 10)\nassert(fruit_distribution(s: \"0 apples and 1 oranges\", n: 3) == 2)\n\
    assert(fruit_distribution(s: \"1 apples and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s:\
    \ \"2 apples and 3 oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"\
    2 apples and 3 oranges\", n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples\
    \ and 100 oranges\", n: 120) == 19)"
  status: Exception
  stderr: 'tmprd31g2wb/tmprd31g2wb.swift:19: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002afc720d9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afc71dd0561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002afc71dd0286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002afc71dd013c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002afc71dcfbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmprd31g2wb                        0x000055f789418eaa <unavailable> + 7850

    6    tmprd31g2wb                        0x000055f7894185fb <unavailable> + 5627

    7    libc.so.6                          0x00002afc722c5460 __libc_start_main +
    245

    8    tmprd31g2wb                        0x000055f7894182f9 <unavailable> + 4857

    '
  stdout: ''
  timestamp: 1659824639
- exit_code: -4
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    // write your code here\n    return 0\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 19)\
    \ == 8)\nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21) == 10)\n\
    assert(fruit_distribution(s: \"0 apples and 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s:\
    \ \"1 apples and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"2 apples and\
    \ 3 oranges\", n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples and 100 oranges\"\
    , n: 120) == 19)"
  status: Exception
  stderr: 'tmpsj1fbkez/tmpsj1fbkez.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab8a4bddc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab8a48d4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab8a48d4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab8a48d37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsj1fbkez                        0x00005555a8246269 <unavailable> + 4713

    5    libc.so.6                          0x00002ab8a4dc9460 __libc_start_main +
    245

    6    tmpsj1fbkez                        0x00005555a8245ee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1659824639
- exit_code: -4
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    let fruits = s.split(separator: \" \")\n    let apples = Int(fruits[0])!\n\
    \    let oranges = Int(fruits[2])!\n    return n - apples - oranges\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fruit_distribution(s: \"5 apples and 6 oranges\"\
    , n: 19) == 8)\nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21)\
    \ == 10)\nassert(fruit_distribution(s: \"0 apples and 1 oranges\", n: 3) == 2)\n\
    assert(fruit_distribution(s: \"1 apples and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s:\
    \ \"2 apples and 3 oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"\
    2 apples and 3 oranges\", n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples\
    \ and 100 oranges\", n: 120) == 19)"
  status: Exception
  stderr: 'tmpybd6fg3_/tmpybd6fg3_.swift:19: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002b882f3cec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b882f0c5561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b882f0c5286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b882f0c513c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b882f0c4bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpybd6fg3_                        0x000055a3c316ceaa <unavailable> + 7850

    6    tmpybd6fg3_                        0x000055a3c316c5fb <unavailable> + 5627

    7    libc.so.6                          0x00002b882f5ba460 __libc_start_main +
    245

    8    tmpybd6fg3_                        0x000055a3c316c2f9 <unavailable> + 4857

    '
  stdout: ''
  timestamp: 1659824639
- exit_code: 1
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    var mango = 0\n    var apple = 0\n    var orange = 0\n    var\
    \ temp = \"\"\n    var i = 0\n    while i < s.count {\n        if s[i] == \" \"\
    \ {\n            if temp == \"apples\" {\n                apple = Int(s[i+1])!\n\
    \            } else if temp == \"oranges\" {\n                orange = Int(s[i+1])!\n\
    \            }\n            temp = \"\"\n        } else {\n            temp +=\
    \ String(s[i])\n        }\n        i += 1\n    }\n    mango = n - (apple + orange)\n\
    \    return mango\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19) == 8)\nassert(fruit_distribution(s: \"5 apples\
    \ and 6 oranges\", n: 21) == 10)\nassert(fruit_distribution(s: \"0 apples and\
    \ 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"1 apples and 0 oranges\"\
    , n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\", n: 100)\
    \ == 95)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\", n: 5) == 0)\n\
    assert(fruit_distribution(s: \"1 apples and 100 oranges\", n: 120) == 19)"
  status: SyntaxError
  stderr: "/tmp/tmp5t3i1gv1.swift:23:12: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an Int, use a String.Index instead.\n        if s[i] ==\
    \ \" \" {\n           ^~~~\nSwift.String:3:12: note: 'subscript(_:)' has been\
    \ explicitly marked unavailable here\n    public subscript(i: Int) -> Character\
    \ { get }\n           ^\n/tmp/tmp5t3i1gv1.swift:25:30: error: no exact matches\
    \ in call to subscript \n                apple = Int(s[i+1])!\n              \
    \               ^\nSwift.String:3:12: note: candidate expects value of type 'Range<String.Index>'\
    \ for parameter #1 (got 'Int')\n    public subscript(r: Range<String.Index>) ->\
    \ Substring { get }\n           ^\nSwift.Collection:3:23: note: candidate expects\
    \ value of type '(UnboundedRange_) -> ()' for parameter #1 (got 'Int')\n    @inlinable\
    \ public subscript(x: (UnboundedRange_) -> ()) -> Self.SubSequence { get }\n \
    \                     ^\n/tmp/tmp5t3i1gv1.swift:27:31: error: no exact matches\
    \ in call to subscript \n                orange = Int(s[i+1])!\n             \
    \                 ^\nSwift.String:3:12: note: candidate expects value of type\
    \ 'Range<String.Index>' for parameter #1 (got 'Int')\n    public subscript(r:\
    \ Range<String.Index>) -> Substring { get }\n           ^\nSwift.Collection:3:23:\
    \ note: candidate expects value of type '(UnboundedRange_) -> ()' for parameter\
    \ #1 (got 'Int')\n    @inlinable public subscript(x: (UnboundedRange_) -> ())\
    \ -> Self.SubSequence { get }\n                      ^\n/tmp/tmp5t3i1gv1.swift:31:28:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n            temp += String(s[i])\n            \
    \               ^~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly\
    \ marked unavailable here\n    public subscript(i: Int) -> Character { get }\n\
    \           ^\n"
  stdout: ''
  timestamp: 1659824639
- exit_code: -4
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    // Write your code here\n    return 0\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 19)\
    \ == 8)\nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21) == 10)\n\
    assert(fruit_distribution(s: \"0 apples and 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s:\
    \ \"1 apples and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"2 apples and\
    \ 3 oranges\", n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples and 100 oranges\"\
    , n: 120) == 19)"
  status: Exception
  stderr: 'tmpfincxi2h/tmpfincxi2h.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b42dd89cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b42dd593b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b42dd593988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b42dd5927b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfincxi2h                        0x000055972c5b8269 <unavailable> + 4713

    5    libc.so.6                          0x00002b42dda88460 __libc_start_main +
    245

    6    tmpfincxi2h                        0x000055972c5b7ee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1659824639
- exit_code: -4
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    let fruits = s.split(separator: \" \")\n    let apples = Int(fruits[0])!\n\
    \    let oranges = Int(fruits[2])!\n    return n - apples - oranges\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fruit_distribution(s: \"5 apples and 6 oranges\"\
    , n: 19) == 8)\nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21)\
    \ == 10)\nassert(fruit_distribution(s: \"0 apples and 1 oranges\", n: 3) == 2)\n\
    assert(fruit_distribution(s: \"1 apples and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s:\
    \ \"2 apples and 3 oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"\
    2 apples and 3 oranges\", n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples\
    \ and 100 oranges\", n: 120) == 19)"
  status: Exception
  stderr: 'tmpybd6fg3_/tmpybd6fg3_.swift:19: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002b882f3cec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b882f0c5561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b882f0c5286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b882f0c513c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b882f0c4bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpybd6fg3_                        0x000055a3c316ceaa <unavailable> + 7850

    6    tmpybd6fg3_                        0x000055a3c316c5fb <unavailable> + 5627

    7    libc.so.6                          0x00002b882f5ba460 __libc_start_main +
    245

    8    tmpybd6fg3_                        0x000055a3c316c2f9 <unavailable> + 4857

    '
  stdout: ''
  timestamp: 1659824639
- exit_code: 1
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    let fruits = s.components(separatedBy: \" and \")\n    let apples\
    \ = Int(fruits[0].components(separatedBy: \" \")[0])!\n    let oranges = Int(fruits[1].components(separatedBy:\
    \ \" \")[0])!\n    return n - apples - oranges\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 19) == 8)\n\
    assert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21) == 10)\nassert(fruit_distribution(s:\
    \ \"0 apples and 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"1 apples\
    \ and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples and 3\
    \ oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\"\
    , n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples and 100 oranges\", n: 120)\
    \ == 19)"
  status: SyntaxError
  stderr: "/tmp/tmprln0hg_6.swift:17:20: error: value of type 'String' has no member\
    \ 'components'\n    let fruits = s.components(separatedBy: \" and \")\n      \
    \           ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824638
- exit_code: -4
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    var total = 0\n    var fruit = \"\"\n    for char in s {\n   \
    \     if char == \" \" {\n            total += Int(fruit)!\n            fruit\
    \ = \"\"\n        } else {\n            fruit += String(char)\n        }\n   \
    \ }\n    total += Int(fruit)!\n    return n - total\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 19)\
    \ == 8)\nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21) == 10)\n\
    assert(fruit_distribution(s: \"0 apples and 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s:\
    \ \"1 apples and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"2 apples and\
    \ 3 oranges\", n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples and 100 oranges\"\
    , n: 120) == 19)"
  status: Exception
  stderr: 'tmpjnl521vc/tmpjnl521vc.swift:21: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002b47b064fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b47b0346561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b47b0346286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b47b034613c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b47b0345bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpjnl521vc                        0x000055c617a88d03 <unavailable> + 7427

    6    tmpjnl521vc                        0x000055c617a8858b <unavailable> + 5515

    7    libc.so.6                          0x00002b47b083b460 __libc_start_main +
    245

    8    tmpjnl521vc                        0x000055c617a88289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1659824639
- exit_code: -4
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    // Write your code here\n    return 0\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 19)\
    \ == 8)\nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21) == 10)\n\
    assert(fruit_distribution(s: \"0 apples and 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s:\
    \ \"1 apples and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"2 apples and\
    \ 3 oranges\", n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples and 100 oranges\"\
    , n: 120) == 19)"
  status: Exception
  stderr: 'tmpfincxi2h/tmpfincxi2h.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b42dd89cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b42dd593b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b42dd593988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b42dd5927b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfincxi2h                        0x000055972c5b8269 <unavailable> + 4713

    5    libc.so.6                          0x00002b42dda88460 __libc_start_main +
    245

    6    tmpfincxi2h                        0x000055972c5b7ee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1659824639
- exit_code: -4
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    // Write your code here\n    return 0\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 19)\
    \ == 8)\nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21) == 10)\n\
    assert(fruit_distribution(s: \"0 apples and 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s:\
    \ \"1 apples and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"2 apples and\
    \ 3 oranges\", n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples and 100 oranges\"\
    , n: 120) == 19)"
  status: Exception
  stderr: 'tmpfincxi2h/tmpfincxi2h.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b42dd89cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b42dd593b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b42dd593988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b42dd5927b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfincxi2h                        0x000055972c5b8269 <unavailable> + 4713

    5    libc.so.6                          0x00002b42dda88460 __libc_start_main +
    245

    6    tmpfincxi2h                        0x000055972c5b7ee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1659824639
- exit_code: 1
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    var total = 0\n    var total_apples = 0\n    var total_oranges\
    \ = 0\n    var total_mangoes = 0\n    var total_fruits = 0\n    var total_fruits_in_basket\
    \ = 0\n    var total_fruits_in_string = 0\n    var total_fruits_in_basket_string\
    \ = 0\n    var total_fruits_in_basket_string_array = [String]()\n    var total_fruits_in_string_array\
    \ = [String]()\n    var total_fruits_in_basket_string_array_count = 0\n    var\
    \ total_fruits_in_string_array_count = 0\n    var total_fruits_in_basket_string_array_count_int\
    \ = 0\n    var total_fruits_in_string_array_count_int = 0\n    var total_fruits_in_basket_string_array_count_int_string\
    \ = \"\"\n    var total_fruits_in_string_array_count_int_string = \"\"\n    var\
    \ total_fruits_in_basket_string_array_count_int_string_int = 0\n    var total_fruits_in_string_array_count_int_string_int\
    \ = 0\n    var total_fruits_in_basket_string_array_count_int_string_int_int =\
    \ 0\n    var total_fruits_in_string_array_count_int_string_int_int = 0\n    var\
    \ total_fruits_in_basket_string_array_count_int_string_int_int_int = 0\n    var\
    \ total_fruits_in_string_array_count_int_string_int_int_int = 0\n    var total_fruits_in_basket_string_array_count_int_string_int_int_int_int\
    \ = 0\n    var total_fruits_in_string_array_count_int_string_int_int_int_int =\
    \ 0\n    var total_fruits_in_basket_string_array_count_int_string_int_int_int_int_int\
    \ = 0\n    var total_fruits_in_\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19) == 8)\nassert(fruit_distribution(s: \"5 apples\
    \ and 6 oranges\", n: 21) == 10)\nassert(fruit_distribution(s: \"0 apples and\
    \ 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"1 apples and 0 oranges\"\
    , n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\", n: 100)\
    \ == 95)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\", n: 5) == 0)\n\
    assert(fruit_distribution(s: \"1 apples and 100 oranges\", n: 120) == 19)"
  status: SyntaxError
  stderr: "/tmp/tmp29j821p5.swift:42:9: error: type annotation missing in pattern\n\
    \    var total_fruits_in_\n        ^\n"
  stdout: ''
  timestamp: 1659824639
- exit_code: 1
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    // Write your code here\n    var sum = 0\n    var num = 0\n  \
    \  var i = 0\n    while i < s.count {\n        if s[i] == \" \" {\n          \
    \  i += 1\n        } else if s[i] == \"a\" {\n            i += 6\n        } else\
    \ if s[i] == \"o\" {\n            i += 7\n        } else if s[i] == \"n\" {\n\
    \            i += 3\n        } else if s[i] == \"d\" {\n            i += 1\n \
    \       } else {\n            num = num * 10 + Int(s[i].asciiValue!) - 48\n  \
    \          i += 1\n        }\n    }\n    sum = n - num\n    return sum\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fruit_distribution(s: \"5 apples and 6 oranges\"\
    , n: 19) == 8)\nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21)\
    \ == 10)\nassert(fruit_distribution(s: \"0 apples and 1 oranges\", n: 3) == 2)\n\
    assert(fruit_distribution(s: \"1 apples and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s:\
    \ \"2 apples and 3 oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"\
    2 apples and 3 oranges\", n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples\
    \ and 100 oranges\", n: 120) == 19)"
  status: SyntaxError
  stderr: "/tmp/tmp57auewqi.swift:22:12: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an Int, use a String.Index instead.\n        if s[i] ==\
    \ \" \" {\n           ^~~~\nSwift.String:3:12: note: 'subscript(_:)' has been\
    \ explicitly marked unavailable here\n    public subscript(i: Int) -> Character\
    \ { get }\n           ^\n/tmp/tmp57auewqi.swift:24:19: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \        } else if s[i] == \"a\" {\n                  ^~~~\nSwift.String:3:12:\
    \ note: 'subscript(_:)' has been explicitly marked unavailable here\n    public\
    \ subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp57auewqi.swift:26:19:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n        } else if s[i] == \"o\" {\n           \
    \       ^~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked\
    \ unavailable here\n    public subscript(i: Int) -> Character { get }\n      \
    \     ^\n/tmp/tmp57auewqi.swift:28:19: error: 'subscript(_:)' is unavailable:\
    \ cannot subscript String with an Int, use a String.Index instead.\n        }\
    \ else if s[i] == \"n\" {\n                  ^~~~\nSwift.String:3:12: note: 'subscript(_:)'\
    \ has been explicitly marked unavailable here\n    public subscript(i: Int) ->\
    \ Character { get }\n           ^\n/tmp/tmp57auewqi.swift:30:19: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \        } else if s[i] == \"d\" {\n                  ^~~~\nSwift.String:3:12:\
    \ note: 'subscript(_:)' has been explicitly marked unavailable here\n    public\
    \ subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp57auewqi.swift:33:34:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n            num = num * 10 + Int(s[i].asciiValue!)\
    \ - 48\n                                 ^~~~\nSwift.String:3:12: note: 'subscript(_:)'\
    \ has been explicitly marked unavailable here\n    public subscript(i: Int) ->\
    \ Character { get }\n           ^\n"
  stdout: ''
  timestamp: 1659824639
- exit_code: -4
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    let arr = s.split(separator: \" \")\n    let apples = Int(arr[0])!\n\
    \    let oranges = Int(arr[2])!\n    return n - apples - oranges\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fruit_distribution(s: \"5 apples and 6 oranges\"\
    , n: 19) == 8)\nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21)\
    \ == 10)\nassert(fruit_distribution(s: \"0 apples and 1 oranges\", n: 3) == 2)\n\
    assert(fruit_distribution(s: \"1 apples and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s:\
    \ \"2 apples and 3 oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"\
    2 apples and 3 oranges\", n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples\
    \ and 100 oranges\", n: 120) == 19)"
  status: Exception
  stderr: 'tmprd31g2wb/tmprd31g2wb.swift:19: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002afc720d9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afc71dd0561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002afc71dd0286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002afc71dd013c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002afc71dcfbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmprd31g2wb                        0x000055f789418eaa <unavailable> + 7850

    6    tmprd31g2wb                        0x000055f7894185fb <unavailable> + 5627

    7    libc.so.6                          0x00002afc722c5460 __libc_start_main +
    245

    8    tmprd31g2wb                        0x000055f7894182f9 <unavailable> + 4857

    '
  stdout: ''
  timestamp: 1659824639
- exit_code: -4
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    var sum = 0\n    var num = 0\n    var i = 0\n    while i < s.count\
    \ {\n        let index = s.index(s.startIndex, offsetBy: i)\n        if s[index]\
    \ == \" \" {\n            i += 1\n            continue\n        }\n        if\
    \ s[index] == \"a\" {\n            i += 6\n            continue\n        }\n \
    \       if s[index] == \"o\" {\n            i += 7\n            continue\n   \
    \     }\n        if s[index] == \"n\" {\n            i += 4\n            continue\n\
    \        }\n        if s[index] == \"d\" {\n            i += 1\n            continue\n\
    \        }\n        if s[index] == \"0\" {\n            i += 1\n            continue\n\
    \        }\n        if s[index] == \"1\" {\n            num = 1\n            i\
    \ += 1\n            continue\n        }\n        if s[index] == \"2\" {\n    \
    \        num = 2\n            i += 1\n            continue\n        }\n      \
    \  if s[index] == \"3\" {\n            num = 3\n            i += 1\n         \
    \   continue\n        }\n        if s[index] == \"4\" {\n            num = 4\n\
    \            i += 1\n            continue\n        }\n        if s[index] == \"\
    5\" {\n            num = 5\n            i += 1\n            continue\n       \
    \ }\n        if s[index] == \"6\" {\n            num = 6\n            i += 1\n\
    \            continue\n        }\n        if s[index] == \"7\" {\n           \
    \ num = 7\n            i += 1\n            continue\n        }\n        if s[index]\
    \ == \"8\" {\n            num = 8\n            i += 1\n            continue\n\
    \        }\n        if s[index] == \"9\" {\n            num = 9\n            i\
    \ += 1\n            continue\n        }\n    }\n    sum = n - num\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(fruit_distribution(s: \"\
    5 apples and 6 oranges\", n: 19) == 8)\nassert(fruit_distribution(s: \"5 apples\
    \ and 6 oranges\", n: 21) == 10)\nassert(fruit_distribution(s: \"0 apples and\
    \ 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"1 apples and 0 oranges\"\
    , n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\", n: 100)\
    \ == 95)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\", n: 5) == 0)\n\
    assert(fruit_distribution(s: \"1 apples and 100 oranges\", n: 120) == 19)"
  status: Exception
  stderr: 'tmp95ulbbvw/tmp95ulbbvw.swift:109: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1ab261fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1ab2316b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1ab2316988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1ab23157b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp95ulbbvw                        0x000055d4a1c3d4c9 <unavailable> + 5321

    5    libc.so.6                          0x00002b1ab280b460 __libc_start_main +
    245

    6    tmp95ulbbvw                        0x000055d4a1c3d149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824639
- exit_code: -4
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    // Write your code here\n    return 0\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 19)\
    \ == 8)\nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21) == 10)\n\
    assert(fruit_distribution(s: \"0 apples and 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s:\
    \ \"1 apples and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"2 apples and\
    \ 3 oranges\", n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples and 100 oranges\"\
    , n: 120) == 19)"
  status: Exception
  stderr: 'tmpfincxi2h/tmpfincxi2h.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b42dd89cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b42dd593b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b42dd593988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b42dd5927b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfincxi2h                        0x000055972c5b8269 <unavailable> + 4713

    5    libc.so.6                          0x00002b42dda88460 __libc_start_main +
    245

    6    tmpfincxi2h                        0x000055972c5b7ee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1659824639
- exit_code: 1
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    var arr = s.components(separatedBy: \" \")\n    var apples = Int(arr[0])!\n\
    \    var oranges = Int(arr[2])!\n    var mango = n - apples - oranges\n    return\
    \ mango\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(fruit_distribution(s: \"\
    5 apples and 6 oranges\", n: 19) == 8)\nassert(fruit_distribution(s: \"5 apples\
    \ and 6 oranges\", n: 21) == 10)\nassert(fruit_distribution(s: \"0 apples and\
    \ 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"1 apples and 0 oranges\"\
    , n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\", n: 100)\
    \ == 95)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\", n: 5) == 0)\n\
    assert(fruit_distribution(s: \"1 apples and 100 oranges\", n: 120) == 19)"
  status: SyntaxError
  stderr: "/tmp/tmp6dxkq6ku.swift:17:17: error: value of type 'String' has no member\
    \ 'components'\n    var arr = s.components(separatedBy: \" \")\n             \
    \ ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824639
- exit_code: -4
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    let fruits = s.split(separator: \" \")\n    let apples = Int(fruits[0])!\n\
    \    let oranges = Int(fruits[2])!\n    return n - apples - oranges\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fruit_distribution(s: \"5 apples and 6 oranges\"\
    , n: 19) == 8)\nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21)\
    \ == 10)\nassert(fruit_distribution(s: \"0 apples and 1 oranges\", n: 3) == 2)\n\
    assert(fruit_distribution(s: \"1 apples and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s:\
    \ \"2 apples and 3 oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"\
    2 apples and 3 oranges\", n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples\
    \ and 100 oranges\", n: 120) == 19)"
  status: Exception
  stderr: 'tmpybd6fg3_/tmpybd6fg3_.swift:19: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002b882f3cec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b882f0c5561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b882f0c5286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b882f0c513c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b882f0c4bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpybd6fg3_                        0x000055a3c316ceaa <unavailable> + 7850

    6    tmpybd6fg3_                        0x000055a3c316c5fb <unavailable> + 5627

    7    libc.so.6                          0x00002b882f5ba460 __libc_start_main +
    245

    8    tmpybd6fg3_                        0x000055a3c316c2f9 <unavailable> + 4857

    '
  stdout: ''
  timestamp: 1659824639
- exit_code: -4
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    var apples = 0\n    var oranges = 0\n    var mangoes = 0\n   \
    \ var i = 0\n    var j = 0\n    var k = 0\n    var l = 0\n    for char in s {\n\
    \        if char == \"a\" {\n            i += 1\n        } else if char == \"\
    o\" {\n            j += 1\n        } else if char == \" \" {\n            k +=\
    \ 1\n        } else if char == \"n\" {\n            l += 1\n        }\n    }\n\
    \    apples = i - k\n    oranges = j - l\n    mangoes = n - (apples + oranges)\n\
    \    return mangoes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19) == 8)\nassert(fruit_distribution(s: \"5 apples\
    \ and 6 oranges\", n: 21) == 10)\nassert(fruit_distribution(s: \"0 apples and\
    \ 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"1 apples and 0 oranges\"\
    , n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\", n: 100)\
    \ == 95)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\", n: 5) == 0)\n\
    assert(fruit_distribution(s: \"1 apples and 100 oranges\", n: 120) == 19)"
  status: Exception
  stderr: 'tmp1mlzdfh0/tmp1mlzdfh0.swift:54: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3d20065c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3d1fd5cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3d1fd5c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3d1fd5b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1mlzdfh0                        0x000055e669412419 <unavailable> + 5145

    5    libc.so.6                          0x00002b3d20251460 __libc_start_main +
    245

    6    tmp1mlzdfh0                        0x000055e669412099 <unavailable> + 4249

    '
  stdout: ''
  timestamp: 1659824639
- exit_code: 1
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    var mango = n\n    var apple = 0\n    var orange = 0\n    var\
    \ i = 0\n    var j = 0\n    var k = 0\n    var l = 0\n    var m = 0\n    var n\
    \ = 0\n    var o = 0\n    var p = 0\n    var q = 0\n    var r = 0\n    var s =\
    \ 0\n    var t = 0\n    var u = 0\n    var v = 0\n    var w = 0\n    var x = 0\n\
    \    var y = 0\n    var z = 0\n    var a = 0\n    var b = 0\n    var c = 0\n \
    \   var d = 0\n    var e = 0\n    var f = 0\n    var g = 0\n    var h = 0\n  \
    \  var aa = 0\n    var bb = 0\n    var cc = 0\n    var dd = 0\n    var ee = 0\n\
    \    var ff = 0\n    var gg = 0\n    var hh = 0\n    var ii = 0\n    var jj =\
    \ 0\n    var kk = 0\n    var ll = 0\n    var mm = 0\n    var nn = 0\n    var oo\
    \ = 0\n    var pp = 0\n    var qq = 0\n    var rr = 0\n    var ss = 0\n    var\
    \ tt = 0\n    var uu = 0\n    var vv = 0\n    var ww = 0\n    var xx = 0\n   \
    \ var yy = 0\n    var zz = 0\n    var aaa = 0\n    var bbb = 0\n    var ccc =\
    \ 0\n    var ddd = 0\n    var eee = 0\n    var fff = 0\n    var ggg = 0\n    var\
    \ hhh = 0\n    var iii = 0\n    var jjj = 0\n    var kkk = 0\n    var lll = 0\n\
    \    var mmm = 0\n    var nnn = 0\n    var ooo = 0\n    var ppp = 0\n    var qqq\
    \ = 0\n    var rrr = 0\n    var sss = 0\n    var ttt = 0\n    var uuu = 0\n  \
    \  var vvv = 0\n    var www = 0\n    var xxx =\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 19) == 8)\n\
    assert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21) == 10)\nassert(fruit_distribution(s:\
    \ \"0 apples and 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"1 apples\
    \ and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples and 3\
    \ oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\"\
    , n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples and 100 oranges\", n: 120)\
    \ == 19)"
  status: SyntaxError
  stderr: "/tmp/tmpru9aq666.swift:95:14: error: expected initial value after '='\n\
    \    var xxx =\n             ^\n"
  stdout: ''
  timestamp: 1659824639
- exit_code: -4
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    // Write your code here\n    return 0\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 19)\
    \ == 8)\nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21) == 10)\n\
    assert(fruit_distribution(s: \"0 apples and 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s:\
    \ \"1 apples and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"2 apples and\
    \ 3 oranges\", n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples and 100 oranges\"\
    , n: 120) == 19)"
  status: Exception
  stderr: 'tmpfincxi2h/tmpfincxi2h.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b42dd89cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b42dd593b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b42dd593988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b42dd5927b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfincxi2h                        0x000055972c5b8269 <unavailable> + 4713

    5    libc.so.6                          0x00002b42dda88460 __libc_start_main +
    245

    6    tmpfincxi2h                        0x000055972c5b7ee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1659824639
- exit_code: -4
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    // Write your code here\n    let arr = s.split(separator: \" \"\
    )\n    let apple = Int(arr[0])!\n    let orange = Int(arr[2])!\n    return n -\
    \ apple - orange\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19) == 8)\nassert(fruit_distribution(s: \"5 apples\
    \ and 6 oranges\", n: 21) == 10)\nassert(fruit_distribution(s: \"0 apples and\
    \ 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"1 apples and 0 oranges\"\
    , n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\", n: 100)\
    \ == 95)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\", n: 5) == 0)\n\
    assert(fruit_distribution(s: \"1 apples and 100 oranges\", n: 120) == 19)"
  status: Exception
  stderr: 'tmpdgrmdmmk/tmpdgrmdmmk.swift:20: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002b7462e15c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7462b0c561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b7462b0c286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b7462b0c13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b7462b0bbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpdgrmdmmk                        0x0000558ce263ceaa <unavailable> + 7850

    6    tmpdgrmdmmk                        0x0000558ce263c5fb <unavailable> + 5627

    7    libc.so.6                          0x00002b7463001460 __libc_start_main +
    245

    8    tmpdgrmdmmk                        0x0000558ce263c2f9 <unavailable> + 4857

    '
  stdout: ''
  timestamp: 1659824639
- exit_code: 1
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    let fruits = s.components(separatedBy: \" \")\n    let apples\
    \ = Int(fruits[0])!\n    let oranges = Int(fruits[2])!\n    return n - apples\
    \ - oranges\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19) == 8)\nassert(fruit_distribution(s: \"5 apples\
    \ and 6 oranges\", n: 21) == 10)\nassert(fruit_distribution(s: \"0 apples and\
    \ 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"1 apples and 0 oranges\"\
    , n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\", n: 100)\
    \ == 95)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\", n: 5) == 0)\n\
    assert(fruit_distribution(s: \"1 apples and 100 oranges\", n: 120) == 19)"
  status: SyntaxError
  stderr: "/tmp/tmp4l9cq2lh.swift:17:20: error: value of type 'String' has no member\
    \ 'components'\n    let fruits = s.components(separatedBy: \" \")\n          \
    \       ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824638
- exit_code: -4
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    // Write your code here\n    return 0\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 19)\
    \ == 8)\nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21) == 10)\n\
    assert(fruit_distribution(s: \"0 apples and 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s:\
    \ \"1 apples and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"2 apples and\
    \ 3 oranges\", n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples and 100 oranges\"\
    , n: 120) == 19)"
  status: Exception
  stderr: 'tmpfincxi2h/tmpfincxi2h.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b42dd89cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b42dd593b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b42dd593988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b42dd5927b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfincxi2h                        0x000055972c5b8269 <unavailable> + 4713

    5    libc.so.6                          0x00002b42dda88460 __libc_start_main +
    245

    6    tmpfincxi2h                        0x000055972c5b7ee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1659824639
- exit_code: 1
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    let fruits = s.components(separatedBy: \" \")\n    let apples\
    \ = Int(fruits[0])!\n    let oranges = Int(fruits[2])!\n    return n - apples\
    \ - oranges\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19) == 8)\nassert(fruit_distribution(s: \"5 apples\
    \ and 6 oranges\", n: 21) == 10)\nassert(fruit_distribution(s: \"0 apples and\
    \ 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"1 apples and 0 oranges\"\
    , n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\", n: 100)\
    \ == 95)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\", n: 5) == 0)\n\
    assert(fruit_distribution(s: \"1 apples and 100 oranges\", n: 120) == 19)"
  status: SyntaxError
  stderr: "/tmp/tmp4l9cq2lh.swift:17:20: error: value of type 'String' has no member\
    \ 'components'\n    let fruits = s.components(separatedBy: \" \")\n          \
    \       ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824638
- exit_code: -4
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    // Write your code here\n    return 0\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 19)\
    \ == 8)\nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21) == 10)\n\
    assert(fruit_distribution(s: \"0 apples and 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s:\
    \ \"1 apples and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"2 apples and\
    \ 3 oranges\", n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples and 100 oranges\"\
    , n: 120) == 19)"
  status: Exception
  stderr: 'tmpfincxi2h/tmpfincxi2h.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b42dd89cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b42dd593b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b42dd593988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b42dd5927b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfincxi2h                        0x000055972c5b8269 <unavailable> + 4713

    5    libc.so.6                          0x00002b42dda88460 __libc_start_main +
    245

    6    tmpfincxi2h                        0x000055972c5b7ee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1659824639
- exit_code: -4
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    // write your code here\n    return 0\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 19)\
    \ == 8)\nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21) == 10)\n\
    assert(fruit_distribution(s: \"0 apples and 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s:\
    \ \"1 apples and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"2 apples and\
    \ 3 oranges\", n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples and 100 oranges\"\
    , n: 120) == 19)"
  status: Exception
  stderr: 'tmpsj1fbkez/tmpsj1fbkez.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab8a4bddc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab8a48d4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab8a48d4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab8a48d37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsj1fbkez                        0x00005555a8246269 <unavailable> + 4713

    5    libc.so.6                          0x00002ab8a4dc9460 __libc_start_main +
    245

    6    tmpsj1fbkez                        0x00005555a8245ee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1659824639
- exit_code: -4
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    // write your code here\n    return 0\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 19)\
    \ == 8)\nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21) == 10)\n\
    assert(fruit_distribution(s: \"0 apples and 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s:\
    \ \"1 apples and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"2 apples and\
    \ 3 oranges\", n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples and 100 oranges\"\
    , n: 120) == 19)"
  status: Exception
  stderr: 'tmpsj1fbkez/tmpsj1fbkez.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab8a4bddc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab8a48d4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab8a48d4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab8a48d37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsj1fbkez                        0x00005555a8246269 <unavailable> + 4713

    5    libc.so.6                          0x00002ab8a4dc9460 __libc_start_main +
    245

    6    tmpsj1fbkez                        0x00005555a8245ee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1659824639
- exit_code: 1
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    var apples = 0\n    var oranges = 0\n    var mangoes = 0\n   \
    \ var i = 0\n    var j = 0\n    var k = 0\n    var l = 0\n    var m = 0\n    var\
    \ n = 0\n    var o = 0\n    var p = 0\n    var q = 0\n    var r = 0\n    var s\
    \ = 0\n    var t = 0\n    var u = 0\n    var v = 0\n    var w = 0\n    var x =\
    \ 0\n    var y = 0\n    var z = 0\n    var a = 0\n    var b = 0\n    var c = 0\n\
    \    var d = 0\n    var e = 0\n    var f = 0\n    var g = 0\n    var h = 0\n \
    \   var j = 0\n    var k = 0\n    var l = 0\n    var m = 0\n    var n = 0\n  \
    \  var o = 0\n    var p = 0\n    var q = 0\n    var r = 0\n    var s = 0\n   \
    \ var t = 0\n    var u = 0\n    var v = 0\n    var w = 0\n    var x = 0\n    var\
    \ y = 0\n    var z = 0\n    var a = 0\n    var b = 0\n    var c = 0\n    var d\
    \ = 0\n    var e = 0\n    var f = 0\n    var g = 0\n    var h = 0\n    var j =\
    \ 0\n    var k = 0\n    var l = 0\n    var m = 0\n    var n = 0\n    var o = 0\n\
    \    var p = 0\n    var q = 0\n    var r = 0\n    var s = 0\n    var t = 0\n \
    \   var u = 0\n    var v = 0\n    var w = 0\n    var x = 0\n    var y = 0\n  \
    \  var z = 0\n    var a = 0\n    var b = 0\n    var c = 0\n    var d = 0\n   \
    \ var e = 0\n    var f = 0\n    var g = 0\n    var h = 0\n    var j = 0\n    var\
    \ k = 0\n    var l = 0\n    var m = 0\n    var n = 0\n    var o = 0\n\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fruit_distribution(s: \"5 apples and 6 oranges\"\
    , n: 19) == 8)\nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21)\
    \ == 10)\nassert(fruit_distribution(s: \"0 apples and 1 oranges\", n: 3) == 2)\n\
    assert(fruit_distribution(s: \"1 apples and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s:\
    \ \"2 apples and 3 oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"\
    2 apples and 3 oranges\", n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples\
    \ and 100 oranges\", n: 120) == 19)"
  status: SyntaxError
  stderr: "/tmp/tmpwfqzi80p.swift:46:9: error: invalid redeclaration of 'j'\n    var\
    \ j = 0\n        ^\n/tmp/tmpwfqzi80p.swift:21:9: note: 'j' previously declared\
    \ here\n    var j = 0\n        ^\n/tmp/tmpwfqzi80p.swift:47:9: error: invalid\
    \ redeclaration of 'k'\n    var k = 0\n        ^\n/tmp/tmpwfqzi80p.swift:22:9:\
    \ note: 'k' previously declared here\n    var k = 0\n        ^\n/tmp/tmpwfqzi80p.swift:48:9:\
    \ error: invalid redeclaration of 'l'\n    var l = 0\n        ^\n/tmp/tmpwfqzi80p.swift:23:9:\
    \ note: 'l' previously declared here\n    var l = 0\n        ^\n/tmp/tmpwfqzi80p.swift:49:9:\
    \ error: invalid redeclaration of 'm'\n    var m = 0\n        ^\n/tmp/tmpwfqzi80p.swift:24:9:\
    \ note: 'm' previously declared here\n    var m = 0\n        ^\n/tmp/tmpwfqzi80p.swift:50:9:\
    \ error: invalid redeclaration of 'n'\n    var n = 0\n        ^\n/tmp/tmpwfqzi80p.swift:25:9:\
    \ note: 'n' previously declared here\n    var n = 0\n        ^\n/tmp/tmpwfqzi80p.swift:51:9:\
    \ error: invalid redeclaration of 'o'\n    var o = 0\n        ^\n/tmp/tmpwfqzi80p.swift:26:9:\
    \ note: 'o' previously declared here\n    var o = 0\n        ^\n/tmp/tmpwfqzi80p.swift:52:9:\
    \ error: invalid redeclaration of 'p'\n    var p = 0\n        ^\n/tmp/tmpwfqzi80p.swift:27:9:\
    \ note: 'p' previously declared here\n    var p = 0\n        ^\n/tmp/tmpwfqzi80p.swift:53:9:\
    \ error: invalid redeclaration of 'q'\n    var q = 0\n        ^\n/tmp/tmpwfqzi80p.swift:28:9:\
    \ note: 'q' previously declared here\n    var q = 0\n        ^\n/tmp/tmpwfqzi80p.swift:54:9:\
    \ error: invalid redeclaration of 'r'\n    var r = 0\n        ^\n/tmp/tmpwfqzi80p.swift:29:9:\
    \ note: 'r' previously declared here\n    var r = 0\n        ^\n/tmp/tmpwfqzi80p.swift:55:9:\
    \ error: invalid redeclaration of 's'\n    var s = 0\n        ^\n/tmp/tmpwfqzi80p.swift:30:9:\
    \ note: 's' previously declared here\n    var s = 0\n        ^\n/tmp/tmpwfqzi80p.swift:56:9:\
    \ error: invalid redeclaration of 't'\n    var t = 0\n        ^\n/tmp/tmpwfqzi80p.swift:31:9:\
    \ note: 't' previously declared here\n    var t = 0\n        ^\n/tmp/tmpwfqzi80p.swift:57:9:\
    \ error: invalid redeclaration of 'u'\n    var u = 0\n        ^\n/tmp/tmpwfqz"
  stdout: ''
  timestamp: 1659824639
- exit_code: 1
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    let fruits = s.components(separatedBy: \" \")\n    let apples\
    \ = Int(fruits[0])!\n    let oranges = Int(fruits[2])!\n    return n - apples\
    \ - oranges\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19) == 8)\nassert(fruit_distribution(s: \"5 apples\
    \ and 6 oranges\", n: 21) == 10)\nassert(fruit_distribution(s: \"0 apples and\
    \ 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"1 apples and 0 oranges\"\
    , n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\", n: 100)\
    \ == 95)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\", n: 5) == 0)\n\
    assert(fruit_distribution(s: \"1 apples and 100 oranges\", n: 120) == 19)"
  status: SyntaxError
  stderr: "/tmp/tmp4l9cq2lh.swift:17:20: error: value of type 'String' has no member\
    \ 'components'\n    let fruits = s.components(separatedBy: \" \")\n          \
    \       ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824638
- exit_code: 1
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    let fruits = s.components(separatedBy: \" and \")\n    let apples\
    \ = Int(fruits[0].components(separatedBy: \" \")[0])!\n    let oranges = Int(fruits[1].components(separatedBy:\
    \ \" \")[0])!\n    return n - apples - oranges\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 19) == 8)\n\
    assert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21) == 10)\nassert(fruit_distribution(s:\
    \ \"0 apples and 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"1 apples\
    \ and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples and 3\
    \ oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\"\
    , n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples and 100 oranges\", n: 120)\
    \ == 19)"
  status: SyntaxError
  stderr: "/tmp/tmprln0hg_6.swift:17:20: error: value of type 'String' has no member\
    \ 'components'\n    let fruits = s.components(separatedBy: \" and \")\n      \
    \           ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824638
- exit_code: -4
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    // Write your code here\n    return 0\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 19)\
    \ == 8)\nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21) == 10)\n\
    assert(fruit_distribution(s: \"0 apples and 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s:\
    \ \"1 apples and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"2 apples and\
    \ 3 oranges\", n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples and 100 oranges\"\
    , n: 120) == 19)"
  status: Exception
  stderr: 'tmpfincxi2h/tmpfincxi2h.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b42dd89cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b42dd593b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b42dd593988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b42dd5927b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfincxi2h                        0x000055972c5b8269 <unavailable> + 4713

    5    libc.so.6                          0x00002b42dda88460 __libc_start_main +
    245

    6    tmpfincxi2h                        0x000055972c5b7ee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1659824639
- exit_code: 1
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    var total_apples = 0\n    var total_oranges = 0\n    var total_mangoes\
    \ = 0\n    var total_fruits = 0\n    var total_fruits_in_basket = 0\n    var total_fruits_in_basket_string\
    \ = \"\"\n    var total_fruits_in_basket_string_array = [String]()\n    var total_fruits_in_basket_string_array_count\
    \ = 0\n    var total_fruits_in_basket_string_array_count_index = 0\n    var total_fruits_in_basket_string_array_count_index_character\
    \ = \"\"\n    var total_fruits_in_basket_string_array_count_index_character_string\
    \ = \"\"\n    var total_fruits_in_basket_string_array_count_index_character_string_int\
    \ = 0\n    var total_fruits_in_basket_string_array_count_index_character_string_int_sum\
    \ = 0\n    var total_fruits_in_basket_string_array_count_index_character_string_int_sum_string\
    \ = \"\"\n    var total_fruits_in_basket_string_array_count_index_character_string_int_sum_string_int\
    \ = 0\n    var total_fruits_in_basket_string_array_count_index_character_string_int_sum_string_int_sum\
    \ = 0\n    var total_fruits_in_basket_string_array_count_index_character_string_int_sum_string_int_sum_string\
    \ = \"\"\n    var total_fruits_in_basket_string_array_count_index_character_string_int_sum_string_int_sum_string_int\
    \ = 0\n    var total_fruits_in_basket_string_array_count_index_character_string_int_sum_string_int_sum_string_int_sum\
    \ = 0\n    var total_fruits_in_basket_string_array_count_index_character_string_int_sum_string_int_sum_string_int_sum_string\
    \ = \"\"\n    var total_fruits_\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19) == 8)\nassert(fruit_distribution(s: \"5 apples\
    \ and 6 oranges\", n: 21) == 10)\nassert(fruit_distribution(s: \"0 apples and\
    \ 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"1 apples and 0 oranges\"\
    , n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\", n: 100)\
    \ == 95)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\", n: 5) == 0)\n\
    assert(fruit_distribution(s: \"1 apples and 100 oranges\", n: 120) == 19)"
  status: SyntaxError
  stderr: "/tmp/tmpjqt7ovse.swift:37:9: error: type annotation missing in pattern\n\
    \    var total_fruits_\n        ^\n"
  stdout: ''
  timestamp: 1659824639
- exit_code: -4
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    // Write your code here\n    let arr = s.split(separator: \" \"\
    )\n    let numOfApples = Int(arr[0])!\n    let numOfOranges = Int(arr[2])!\n \
    \   return n - numOfApples - numOfOranges\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 19) == 8)\n\
    assert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21) == 10)\nassert(fruit_distribution(s:\
    \ \"0 apples and 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"1 apples\
    \ and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples and 3\
    \ oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\"\
    , n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples and 100 oranges\", n: 120)\
    \ == 19)"
  status: Exception
  stderr: 'tmpz4sps2j5/tmpz4sps2j5.swift:20: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002af7cd0bcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af7ccdb3561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002af7ccdb3286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002af7ccdb313c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002af7ccdb2bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpz4sps2j5                        0x00005625d7576eaa <unavailable> + 7850

    6    tmpz4sps2j5                        0x00005625d75765fb <unavailable> + 5627

    7    libc.so.6                          0x00002af7cd2a8460 __libc_start_main +
    245

    8    tmpz4sps2j5                        0x00005625d75762f9 <unavailable> + 4857

    '
  stdout: ''
  timestamp: 1659824639
- exit_code: 1
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    let fruits = s.components(separatedBy: \" and \")\n    let apples\
    \ = Int(fruits[0].components(separatedBy: \" \")[0])!\n    let oranges = Int(fruits[1].components(separatedBy:\
    \ \" \")[0])!\n    return n - apples - oranges\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 19) == 8)\n\
    assert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21) == 10)\nassert(fruit_distribution(s:\
    \ \"0 apples and 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"1 apples\
    \ and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples and 3\
    \ oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\"\
    , n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples and 100 oranges\", n: 120)\
    \ == 19)"
  status: SyntaxError
  stderr: "/tmp/tmprln0hg_6.swift:17:20: error: value of type 'String' has no member\
    \ 'components'\n    let fruits = s.components(separatedBy: \" and \")\n      \
    \           ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824638
- exit_code: -4
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    let fruits = s.split(separator: \" \")\n    let apples = Int(fruits[0])!\n\
    \    let oranges = Int(fruits[2])!\n    return n - apples - oranges\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fruit_distribution(s: \"5 apples and 6 oranges\"\
    , n: 19) == 8)\nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21)\
    \ == 10)\nassert(fruit_distribution(s: \"0 apples and 1 oranges\", n: 3) == 2)\n\
    assert(fruit_distribution(s: \"1 apples and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s:\
    \ \"2 apples and 3 oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"\
    2 apples and 3 oranges\", n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples\
    \ and 100 oranges\", n: 120) == 19)"
  status: Exception
  stderr: 'tmpybd6fg3_/tmpybd6fg3_.swift:19: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002b882f3cec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b882f0c5561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b882f0c5286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b882f0c513c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b882f0c4bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpybd6fg3_                        0x000055a3c316ceaa <unavailable> + 7850

    6    tmpybd6fg3_                        0x000055a3c316c5fb <unavailable> + 5627

    7    libc.so.6                          0x00002b882f5ba460 __libc_start_main +
    245

    8    tmpybd6fg3_                        0x000055a3c316c2f9 <unavailable> + 4857

    '
  stdout: ''
  timestamp: 1659824639
- exit_code: 1
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    let fruits = s.components(separatedBy: \" and \")\n    let apples\
    \ = Int(fruits[0].components(separatedBy: \" \")[0])!\n    let oranges = Int(fruits[1].components(separatedBy:\
    \ \" \")[0])!\n    return n - apples - oranges\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 19) == 8)\n\
    assert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21) == 10)\nassert(fruit_distribution(s:\
    \ \"0 apples and 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"1 apples\
    \ and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples and 3\
    \ oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\"\
    , n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples and 100 oranges\", n: 120)\
    \ == 19)"
  status: SyntaxError
  stderr: "/tmp/tmprln0hg_6.swift:17:20: error: value of type 'String' has no member\
    \ 'components'\n    let fruits = s.components(separatedBy: \" and \")\n      \
    \           ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824638
- exit_code: 1
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    var mango = 0\n    var apple = 0\n    var orange = 0\n    var\
    \ i = 0\n    var j = 0\n    var k = 0\n    var l = 0\n    var m = 0\n    var n\
    \ = 0\n    var o = 0\n    var p = 0\n    var q = 0\n    var r = 0\n    var s =\
    \ 0\n    var t = 0\n    var u = 0\n    var v = 0\n    var w = 0\n    var x = 0\n\
    \    var y = 0\n    var z = 0\n    var a = 0\n    var b = 0\n    var c = 0\n \
    \   var d = 0\n    var e = 0\n    var f = 0\n    var g = 0\n    var h = 0\n  \
    \  var j = 0\n    var k = 0\n    var l = 0\n    var m = 0\n    var n = 0\n   \
    \ var o = 0\n    var p = 0\n    var q = 0\n    var r = 0\n    var s = 0\n    var\
    \ t = 0\n    var u = 0\n    var v = 0\n    var w = 0\n    var x = 0\n    var y\
    \ = 0\n    var z = 0\n    var a = 0\n    var b = 0\n    var c = 0\n    var d =\
    \ 0\n    var e = 0\n    var f = 0\n    var g = 0\n    var h = 0\n    var j = 0\n\
    \    var k = 0\n    var l = 0\n    var m = 0\n    var n = 0\n    var o = 0\n \
    \   var p = 0\n    var q = 0\n    var r = 0\n    var s = 0\n    var t = 0\n  \
    \  var u = 0\n    var v = 0\n    var w = 0\n    var x = 0\n    var y = 0\n   \
    \ var z = 0\n    var a = 0\n    var b = 0\n    var c = 0\n    var d = 0\n    var\
    \ e = 0\n    var f = 0\n    var g = 0\n    var h = 0\n    var j = 0\n    var k\
    \ = 0\n    var l = 0\n    var m = 0\n    var n = 0\n    var o = 0\n   \n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fruit_distribution(s: \"5 apples and 6 oranges\"\
    , n: 19) == 8)\nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21)\
    \ == 10)\nassert(fruit_distribution(s: \"0 apples and 1 oranges\", n: 3) == 2)\n\
    assert(fruit_distribution(s: \"1 apples and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s:\
    \ \"2 apples and 3 oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"\
    2 apples and 3 oranges\", n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples\
    \ and 100 oranges\", n: 120) == 19)"
  status: SyntaxError
  stderr: "/tmp/tmp1f8fi6bi.swift:46:9: error: invalid redeclaration of 'j'\n    var\
    \ j = 0\n        ^\n/tmp/tmp1f8fi6bi.swift:21:9: note: 'j' previously declared\
    \ here\n    var j = 0\n        ^\n/tmp/tmp1f8fi6bi.swift:47:9: error: invalid\
    \ redeclaration of 'k'\n    var k = 0\n        ^\n/tmp/tmp1f8fi6bi.swift:22:9:\
    \ note: 'k' previously declared here\n    var k = 0\n        ^\n/tmp/tmp1f8fi6bi.swift:48:9:\
    \ error: invalid redeclaration of 'l'\n    var l = 0\n        ^\n/tmp/tmp1f8fi6bi.swift:23:9:\
    \ note: 'l' previously declared here\n    var l = 0\n        ^\n/tmp/tmp1f8fi6bi.swift:49:9:\
    \ error: invalid redeclaration of 'm'\n    var m = 0\n        ^\n/tmp/tmp1f8fi6bi.swift:24:9:\
    \ note: 'm' previously declared here\n    var m = 0\n        ^\n/tmp/tmp1f8fi6bi.swift:50:9:\
    \ error: invalid redeclaration of 'n'\n    var n = 0\n        ^\n/tmp/tmp1f8fi6bi.swift:25:9:\
    \ note: 'n' previously declared here\n    var n = 0\n        ^\n/tmp/tmp1f8fi6bi.swift:51:9:\
    \ error: invalid redeclaration of 'o'\n    var o = 0\n        ^\n/tmp/tmp1f8fi6bi.swift:26:9:\
    \ note: 'o' previously declared here\n    var o = 0\n        ^\n/tmp/tmp1f8fi6bi.swift:52:9:\
    \ error: invalid redeclaration of 'p'\n    var p = 0\n        ^\n/tmp/tmp1f8fi6bi.swift:27:9:\
    \ note: 'p' previously declared here\n    var p = 0\n        ^\n/tmp/tmp1f8fi6bi.swift:53:9:\
    \ error: invalid redeclaration of 'q'\n    var q = 0\n        ^\n/tmp/tmp1f8fi6bi.swift:28:9:\
    \ note: 'q' previously declared here\n    var q = 0\n        ^\n/tmp/tmp1f8fi6bi.swift:54:9:\
    \ error: invalid redeclaration of 'r'\n    var r = 0\n        ^\n/tmp/tmp1f8fi6bi.swift:29:9:\
    \ note: 'r' previously declared here\n    var r = 0\n        ^\n/tmp/tmp1f8fi6bi.swift:55:9:\
    \ error: invalid redeclaration of 's'\n    var s = 0\n        ^\n/tmp/tmp1f8fi6bi.swift:30:9:\
    \ note: 's' previously declared here\n    var s = 0\n        ^\n/tmp/tmp1f8fi6bi.swift:56:9:\
    \ error: invalid redeclaration of 't'\n    var t = 0\n        ^\n/tmp/tmp1f8fi6bi.swift:31:9:\
    \ note: 't' previously declared here\n    var t = 0\n        ^\n/tmp/tmp1f8fi6bi.swift:57:9:\
    \ error: invalid redeclaration of 'u'\n    var u = 0\n        ^\n/tmp/tmp1f8f"
  stdout: ''
  timestamp: 1659824639
- exit_code: 1
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    var result = 0\n    let arr = s.components(separatedBy: \" \"\
    )\n    let apple = Int(arr[0])!\n    let orange = Int(arr[2])!\n    result = n\
    \ - apple - orange\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 19) == 8)\nassert(fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 21) == 10)\nassert(fruit_distribution(s: \"0\
    \ apples and 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"1 apples\
    \ and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples and 3\
    \ oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\"\
    , n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples and 100 oranges\", n: 120)\
    \ == 19)"
  status: SyntaxError
  stderr: "/tmp/tmp5q25x4za.swift:18:17: error: value of type 'String' has no member\
    \ 'components'\n    let arr = s.components(separatedBy: \" \")\n             \
    \ ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824639
- exit_code: -4
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    // Write your code here\n    return 0\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 19)\
    \ == 8)\nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21) == 10)\n\
    assert(fruit_distribution(s: \"0 apples and 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s:\
    \ \"1 apples and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"2 apples and\
    \ 3 oranges\", n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples and 100 oranges\"\
    , n: 120) == 19)"
  status: Exception
  stderr: 'tmpfincxi2h/tmpfincxi2h.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b42dd89cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b42dd593b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b42dd593988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b42dd5927b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfincxi2h                        0x000055972c5b8269 <unavailable> + 4713

    5    libc.so.6                          0x00002b42dda88460 __libc_start_main +
    245

    6    tmpfincxi2h                        0x000055972c5b7ee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1659824639
- exit_code: -4
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    // Write your code here\n    let s = s.split(separator: \" \"\
    )\n    let a = Int(s[0])!\n    let o = Int(s[2])!\n    return n - a - o\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fruit_distribution(s: \"5 apples and 6 oranges\"\
    , n: 19) == 8)\nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21)\
    \ == 10)\nassert(fruit_distribution(s: \"0 apples and 1 oranges\", n: 3) == 2)\n\
    assert(fruit_distribution(s: \"1 apples and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s:\
    \ \"2 apples and 3 oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"\
    2 apples and 3 oranges\", n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples\
    \ and 100 oranges\", n: 120) == 19)"
  status: Exception
  stderr: 'tmpuaachpz1/tmpuaachpz1.swift:20: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002b06d3a6ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b06d3765561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b06d3765286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b06d376513c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b06d3764bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpuaachpz1                        0x0000561781505eaa <unavailable> + 7850

    6    tmpuaachpz1                        0x00005617815055fb <unavailable> + 5627

    7    libc.so.6                          0x00002b06d3c5a460 __libc_start_main +
    245

    8    tmpuaachpz1                        0x00005617815052f9 <unavailable> + 4857

    '
  stdout: ''
  timestamp: 1659824639
- exit_code: 1
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    let fruits = s.components(separatedBy: \" and \")\n    let apples\
    \ = Int(fruits[0].components(separatedBy: \" \")[0])!\n    let oranges = Int(fruits[1].components(separatedBy:\
    \ \" \")[0])!\n    return n - apples - oranges\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 19) == 8)\n\
    assert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21) == 10)\nassert(fruit_distribution(s:\
    \ \"0 apples and 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"1 apples\
    \ and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples and 3\
    \ oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\"\
    , n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples and 100 oranges\", n: 120)\
    \ == 19)"
  status: SyntaxError
  stderr: "/tmp/tmprln0hg_6.swift:17:20: error: value of type 'String' has no member\
    \ 'components'\n    let fruits = s.components(separatedBy: \" and \")\n      \
    \           ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824638
- exit_code: -4
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    // Write your code here\n    return 0\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 19)\
    \ == 8)\nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21) == 10)\n\
    assert(fruit_distribution(s: \"0 apples and 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s:\
    \ \"1 apples and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"2 apples and\
    \ 3 oranges\", n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples and 100 oranges\"\
    , n: 120) == 19)"
  status: Exception
  stderr: 'tmpfincxi2h/tmpfincxi2h.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b42dd89cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b42dd593b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b42dd593988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b42dd5927b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfincxi2h                        0x000055972c5b8269 <unavailable> + 4713

    5    libc.so.6                          0x00002b42dda88460 __libc_start_main +
    245

    6    tmpfincxi2h                        0x000055972c5b7ee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1659824639
- exit_code: -4
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    // your code here\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 19) == 8)\n\
    assert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21) == 10)\nassert(fruit_distribution(s:\
    \ \"0 apples and 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"1 apples\
    \ and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples and 3\
    \ oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\"\
    , n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples and 100 oranges\", n: 120)\
    \ == 19)"
  status: Exception
  stderr: 'tmp86wphtoz/tmp86wphtoz.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b370f081c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b370ed78b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b370ed78988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b370ed777b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp86wphtoz                        0x000055abf4e8c269 <unavailable> + 4713

    5    libc.so.6                          0x00002b370f26d460 __libc_start_main +
    245

    6    tmp86wphtoz                        0x000055abf4e8bee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1659824639
- exit_code: 1
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    var total = 0\n    var fruits = s.components(separatedBy: \" \"\
    )\n    for i in 0..<fruits.count {\n        if fruits[i] == \"apples\" {\n   \
    \         total += Int(fruits[i-1])!\n        } else if fruits[i] == \"oranges\"\
    \ {\n            total += Int(fruits[i-1])!\n        }\n    }\n    return n -\
    \ total\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(fruit_distribution(s: \"\
    5 apples and 6 oranges\", n: 19) == 8)\nassert(fruit_distribution(s: \"5 apples\
    \ and 6 oranges\", n: 21) == 10)\nassert(fruit_distribution(s: \"0 apples and\
    \ 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"1 apples and 0 oranges\"\
    , n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\", n: 100)\
    \ == 95)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\", n: 5) == 0)\n\
    assert(fruit_distribution(s: \"1 apples and 100 oranges\", n: 120) == 19)"
  status: SyntaxError
  stderr: "/tmp/tmpmi77mcku.swift:18:20: error: value of type 'String' has no member\
    \ 'components'\n    var fruits = s.components(separatedBy: \" \")\n          \
    \       ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824639
- exit_code: 1
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    let s = s.components(separatedBy: \" \")\n    let a = Int(s[0])!\n\
    \    let o = Int(s[2])!\n    return n - a - o\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 19) == 8)\n\
    assert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21) == 10)\nassert(fruit_distribution(s:\
    \ \"0 apples and 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"1 apples\
    \ and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples and 3\
    \ oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\"\
    , n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples and 100 oranges\", n: 120)\
    \ == 19)"
  status: SyntaxError
  stderr: "/tmp/tmpzj9jfowm.swift:17:15: error: value of type 'String' has no member\
    \ 'components'\n    let s = s.components(separatedBy: \" \")\n            ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824639
- exit_code: -4
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    let arr = s.split(separator: \" \")\n    let num = Int(arr[0])!\
    \ + Int(arr[2])!\n    return n - num\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 19) == 8)\nassert(fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 21) == 10)\nassert(fruit_distribution(s: \"0\
    \ apples and 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"1 apples\
    \ and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples and 3\
    \ oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\"\
    , n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples and 100 oranges\", n: 120)\
    \ == 19)"
  status: Exception
  stderr: 'tmp2fi83smh/tmp2fi83smh.swift:18: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002b8e9d0e8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8e9cddf561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b8e9cddf286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b8e9cddf13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b8e9cddebb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmp2fi83smh                        0x0000564c6b692e90 <unavailable> + 7824

    6    tmp2fi83smh                        0x0000564c6b6925fb <unavailable> + 5627

    7    libc.so.6                          0x00002b8e9d2d4460 __libc_start_main +
    245

    8    tmp2fi83smh                        0x0000564c6b6922f9 <unavailable> + 4857

    '
  stdout: ''
  timestamp: 1659824639
- exit_code: -4
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    // Write your code here\n    return 0\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 19)\
    \ == 8)\nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21) == 10)\n\
    assert(fruit_distribution(s: \"0 apples and 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s:\
    \ \"1 apples and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"2 apples and\
    \ 3 oranges\", n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples and 100 oranges\"\
    , n: 120) == 19)"
  status: Exception
  stderr: 'tmpfincxi2h/tmpfincxi2h.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b42dd89cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b42dd593b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b42dd593988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b42dd5927b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfincxi2h                        0x000055972c5b8269 <unavailable> + 4713

    5    libc.so.6                          0x00002b42dda88460 __libc_start_main +
    245

    6    tmpfincxi2h                        0x000055972c5b7ee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1659824639
- exit_code: -4
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    // your code here\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 19) == 8)\n\
    assert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21) == 10)\nassert(fruit_distribution(s:\
    \ \"0 apples and 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"1 apples\
    \ and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples and 3\
    \ oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\"\
    , n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples and 100 oranges\", n: 120)\
    \ == 19)"
  status: Exception
  stderr: 'tmp86wphtoz/tmp86wphtoz.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b370f081c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b370ed78b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b370ed78988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b370ed777b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp86wphtoz                        0x000055abf4e8c269 <unavailable> + 4713

    5    libc.so.6                          0x00002b370f26d460 __libc_start_main +
    245

    6    tmp86wphtoz                        0x000055abf4e8bee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1659824639
- exit_code: 1
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    let s = s.components(separatedBy: \" \")\n    let a = Int(s[0])!\n\
    \    let o = Int(s[2])!\n    return n - a - o\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 19) == 8)\n\
    assert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21) == 10)\nassert(fruit_distribution(s:\
    \ \"0 apples and 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"1 apples\
    \ and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples and 3\
    \ oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\"\
    , n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples and 100 oranges\", n: 120)\
    \ == 19)"
  status: SyntaxError
  stderr: "/tmp/tmpzj9jfowm.swift:17:15: error: value of type 'String' has no member\
    \ 'components'\n    let s = s.components(separatedBy: \" \")\n            ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824639
- exit_code: 1
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    let arr = s.components(separatedBy: \" \")\n    let a = Int(arr[0])!\n\
    \    let o = Int(arr[2])!\n    return n - a - o\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 19) == 8)\n\
    assert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21) == 10)\nassert(fruit_distribution(s:\
    \ \"0 apples and 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"1 apples\
    \ and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples and 3\
    \ oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\"\
    , n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples and 100 oranges\", n: 120)\
    \ == 19)"
  status: SyntaxError
  stderr: "/tmp/tmpm9qjmt2e.swift:17:17: error: value of type 'String' has no member\
    \ 'components'\n    let arr = s.components(separatedBy: \" \")\n             \
    \ ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824639
- exit_code: 1
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    // Write your code here\n    var total_apples = 0\n    var total_oranges\
    \ = 0\n    var total_mangoes = 0\n    var total_fruits = 0\n    var temp = \"\"\
    \n    for i in s {\n        if i == \" \" {\n            if temp == \"apples\"\
    \ {\n                total_apples = Int(s.components(separatedBy: \" \")[0])!\n\
    \            }\n            else if temp == \"oranges\" {\n                total_oranges\
    \ = Int(s.components(separatedBy: \" \")[2])!\n            }\n            temp\
    \ = \"\"\n        }\n        else {\n            temp += String(i)\n        }\n\
    \    }\n    total_fruits = total_apples + total_oranges\n    total_mangoes = n\
    \ - total_fruits\n    return total_mangoes\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 19) == 8)\n\
    assert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21) == 10)\nassert(fruit_distribution(s:\
    \ \"0 apples and 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"1 apples\
    \ and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples and 3\
    \ oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\"\
    , n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples and 100 oranges\", n: 120)\
    \ == 19)"
  status: SyntaxError
  stderr: "/tmp/tmp8cvmhsjl.swift:26:38: error: value of type 'String' has no member\
    \ 'components'\n                total_apples = Int(s.components(separatedBy: \"\
    \ \")[0])!\n                                   ~ ^~~~~~~~~~\n/tmp/tmp8cvmhsjl.swift:29:39:\
    \ error: value of type 'String' has no member 'components'\n                total_oranges\
    \ = Int(s.components(separatedBy: \" \")[2])!\n                              \
    \      ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824639
- exit_code: 1
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    let fruits = s.components(separatedBy: \" and \")\n    let apples\
    \ = Int(fruits[0].components(separatedBy: \" \")[0])!\n    let oranges = Int(fruits[1].components(separatedBy:\
    \ \" \")[0])!\n    return n - apples - oranges\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 19) == 8)\n\
    assert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21) == 10)\nassert(fruit_distribution(s:\
    \ \"0 apples and 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"1 apples\
    \ and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples and 3\
    \ oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\"\
    , n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples and 100 oranges\", n: 120)\
    \ == 19)"
  status: SyntaxError
  stderr: "/tmp/tmprln0hg_6.swift:17:20: error: value of type 'String' has no member\
    \ 'components'\n    let fruits = s.components(separatedBy: \" and \")\n      \
    \           ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824638
- exit_code: -4
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    let arr = s.split(separator: \" \")\n    let a = Int(arr[0])!\n\
    \    let o = Int(arr[2])!\n    return n - a - o\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 19) == 8)\n\
    assert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21) == 10)\nassert(fruit_distribution(s:\
    \ \"0 apples and 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"1 apples\
    \ and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples and 3\
    \ oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\"\
    , n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples and 100 oranges\", n: 120)\
    \ == 19)"
  status: Exception
  stderr: 'tmpywydsiss/tmpywydsiss.swift:19: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002b26d1238c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b26d0f2f561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b26d0f2f286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b26d0f2f13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b26d0f2ebb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpywydsiss                        0x00005653cef2beaa <unavailable> + 7850

    6    tmpywydsiss                        0x00005653cef2b5fb <unavailable> + 5627

    7    libc.so.6                          0x00002b26d1424460 __libc_start_main +
    245

    8    tmpywydsiss                        0x00005653cef2b2f9 <unavailable> + 4857

    '
  stdout: ''
  timestamp: 1659824639
- exit_code: -4
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    // Write your code here\n    return 0\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 19)\
    \ == 8)\nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21) == 10)\n\
    assert(fruit_distribution(s: \"0 apples and 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s:\
    \ \"1 apples and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"2 apples and\
    \ 3 oranges\", n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples and 100 oranges\"\
    , n: 120) == 19)"
  status: Exception
  stderr: 'tmpfincxi2h/tmpfincxi2h.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b42dd89cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b42dd593b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b42dd593988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b42dd5927b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfincxi2h                        0x000055972c5b8269 <unavailable> + 4713

    5    libc.so.6                          0x00002b42dda88460 __libc_start_main +
    245

    6    tmpfincxi2h                        0x000055972c5b7ee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1659824639
- exit_code: -4
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    // Write your code here\n    return 0\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 19)\
    \ == 8)\nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21) == 10)\n\
    assert(fruit_distribution(s: \"0 apples and 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s:\
    \ \"1 apples and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"2 apples and\
    \ 3 oranges\", n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples and 100 oranges\"\
    , n: 120) == 19)"
  status: Exception
  stderr: 'tmpfincxi2h/tmpfincxi2h.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b42dd89cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b42dd593b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b42dd593988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b42dd5927b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfincxi2h                        0x000055972c5b8269 <unavailable> + 4713

    5    libc.so.6                          0x00002b42dda88460 __libc_start_main +
    245

    6    tmpfincxi2h                        0x000055972c5b7ee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1659824639
- exit_code: -4
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    let arr = s.split(separator: \" \")\n    let apples = Int(arr[0])!\n\
    \    let oranges = Int(arr[2])!\n    return n - apples - oranges\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fruit_distribution(s: \"5 apples and 6 oranges\"\
    , n: 19) == 8)\nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21)\
    \ == 10)\nassert(fruit_distribution(s: \"0 apples and 1 oranges\", n: 3) == 2)\n\
    assert(fruit_distribution(s: \"1 apples and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s:\
    \ \"2 apples and 3 oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"\
    2 apples and 3 oranges\", n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples\
    \ and 100 oranges\", n: 120) == 19)"
  status: Exception
  stderr: 'tmprd31g2wb/tmprd31g2wb.swift:19: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002afc720d9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afc71dd0561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002afc71dd0286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002afc71dd013c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002afc71dcfbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmprd31g2wb                        0x000055f789418eaa <unavailable> + 7850

    6    tmprd31g2wb                        0x000055f7894185fb <unavailable> + 5627

    7    libc.so.6                          0x00002afc722c5460 __libc_start_main +
    245

    8    tmprd31g2wb                        0x000055f7894182f9 <unavailable> + 4857

    '
  stdout: ''
  timestamp: 1659824639
- exit_code: 0
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    var arr = s.split(separator: \" \")\n    var num = 0\n    for\
    \ i in 0...arr.count-1 {\n        if arr[i] == \"apples\" {\n            num +=\
    \ Int(arr[i-1])!\n        } else if arr[i] == \"oranges\" {\n            num +=\
    \ Int(arr[i-1])!\n        }\n    }\n    return n - num\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 19)\
    \ == 8)\nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21) == 10)\n\
    assert(fruit_distribution(s: \"0 apples and 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s:\
    \ \"1 apples and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"2 apples and\
    \ 3 oranges\", n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples and 100 oranges\"\
    , n: 120) == 19)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824639
- exit_code: 1
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    let arr = s.components(separatedBy: \" \")\n    let apples = Int(arr[0])!\n\
    \    let oranges = Int(arr[2])!\n    return n - apples - oranges\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fruit_distribution(s: \"5 apples and 6 oranges\"\
    , n: 19) == 8)\nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21)\
    \ == 10)\nassert(fruit_distribution(s: \"0 apples and 1 oranges\", n: 3) == 2)\n\
    assert(fruit_distribution(s: \"1 apples and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s:\
    \ \"2 apples and 3 oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"\
    2 apples and 3 oranges\", n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples\
    \ and 100 oranges\", n: 120) == 19)"
  status: SyntaxError
  stderr: "/tmp/tmp8n388npq.swift:17:17: error: value of type 'String' has no member\
    \ 'components'\n    let arr = s.components(separatedBy: \" \")\n             \
    \ ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824639
- exit_code: -4
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    // Write your code here\n    return 0\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 19)\
    \ == 8)\nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21) == 10)\n\
    assert(fruit_distribution(s: \"0 apples and 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s:\
    \ \"1 apples and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"2 apples and\
    \ 3 oranges\", n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples and 100 oranges\"\
    , n: 120) == 19)"
  status: Exception
  stderr: 'tmpfincxi2h/tmpfincxi2h.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b42dd89cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b42dd593b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b42dd593988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b42dd5927b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfincxi2h                        0x000055972c5b8269 <unavailable> + 4713

    5    libc.so.6                          0x00002b42dda88460 __libc_start_main +
    245

    6    tmpfincxi2h                        0x000055972c5b7ee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1659824639
- exit_code: -4
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    // your code here\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 19) == 8)\n\
    assert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21) == 10)\nassert(fruit_distribution(s:\
    \ \"0 apples and 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"1 apples\
    \ and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples and 3\
    \ oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\"\
    , n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples and 100 oranges\", n: 120)\
    \ == 19)"
  status: Exception
  stderr: 'tmp86wphtoz/tmp86wphtoz.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b370f081c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b370ed78b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b370ed78988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b370ed777b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp86wphtoz                        0x000055abf4e8c269 <unavailable> + 4713

    5    libc.so.6                          0x00002b370f26d460 __libc_start_main +
    245

    6    tmp86wphtoz                        0x000055abf4e8bee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1659824639
- exit_code: -4
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    let fruits = s.split(separator: \" \")\n    let apples = Int(fruits[0])!\n\
    \    let oranges = Int(fruits[2])!\n    return n - apples - oranges\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fruit_distribution(s: \"5 apples and 6 oranges\"\
    , n: 19) == 8)\nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21)\
    \ == 10)\nassert(fruit_distribution(s: \"0 apples and 1 oranges\", n: 3) == 2)\n\
    assert(fruit_distribution(s: \"1 apples and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s:\
    \ \"2 apples and 3 oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"\
    2 apples and 3 oranges\", n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples\
    \ and 100 oranges\", n: 120) == 19)"
  status: Exception
  stderr: 'tmpybd6fg3_/tmpybd6fg3_.swift:19: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002b882f3cec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b882f0c5561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b882f0c5286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b882f0c513c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b882f0c4bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpybd6fg3_                        0x000055a3c316ceaa <unavailable> + 7850

    6    tmpybd6fg3_                        0x000055a3c316c5fb <unavailable> + 5627

    7    libc.so.6                          0x00002b882f5ba460 __libc_start_main +
    245

    8    tmpybd6fg3_                        0x000055a3c316c2f9 <unavailable> + 4857

    '
  stdout: ''
  timestamp: 1659824639
- exit_code: -4
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    // your code here\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 19) == 8)\n\
    assert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21) == 10)\nassert(fruit_distribution(s:\
    \ \"0 apples and 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"1 apples\
    \ and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples and 3\
    \ oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\"\
    , n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples and 100 oranges\", n: 120)\
    \ == 19)"
  status: Exception
  stderr: 'tmp86wphtoz/tmp86wphtoz.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b370f081c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b370ed78b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b370ed78988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b370ed777b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp86wphtoz                        0x000055abf4e8c269 <unavailable> + 4713

    5    libc.so.6                          0x00002b370f26d460 __libc_start_main +
    245

    6    tmp86wphtoz                        0x000055abf4e8bee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1659824639
- exit_code: -4
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    let fruits = s.split(separator: \" \")\n    let apples = Int(fruits[0])!\n\
    \    let oranges = Int(fruits[2])!\n    return n - apples - oranges\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fruit_distribution(s: \"5 apples and 6 oranges\"\
    , n: 19) == 8)\nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21)\
    \ == 10)\nassert(fruit_distribution(s: \"0 apples and 1 oranges\", n: 3) == 2)\n\
    assert(fruit_distribution(s: \"1 apples and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s:\
    \ \"2 apples and 3 oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"\
    2 apples and 3 oranges\", n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples\
    \ and 100 oranges\", n: 120) == 19)"
  status: Exception
  stderr: 'tmpybd6fg3_/tmpybd6fg3_.swift:19: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002b882f3cec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b882f0c5561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b882f0c5286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b882f0c513c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b882f0c4bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpybd6fg3_                        0x000055a3c316ceaa <unavailable> + 7850

    6    tmpybd6fg3_                        0x000055a3c316c5fb <unavailable> + 5627

    7    libc.so.6                          0x00002b882f5ba460 __libc_start_main +
    245

    8    tmpybd6fg3_                        0x000055a3c316c2f9 <unavailable> + 4857

    '
  stdout: ''
  timestamp: 1659824639
- exit_code: 0
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    var mango = 0\n    var apple = 0\n    var orange = 0\n    var\
    \ sum = 0\n    var arr = s.split(separator: \" \")\n    for i in 0..<arr.count\
    \ {\n        if arr[i] == \"apples\" {\n            apple = Int(arr[i-1])!\n \
    \       }\n        if arr[i] == \"oranges\" {\n            orange = Int(arr[i-1])!\n\
    \        }\n    }\n    sum = apple + orange\n    mango = n - sum\n    return mango\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fruit_distribution(s: \"5 apples and 6 oranges\"\
    , n: 19) == 8)\nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21)\
    \ == 10)\nassert(fruit_distribution(s: \"0 apples and 1 oranges\", n: 3) == 2)\n\
    assert(fruit_distribution(s: \"1 apples and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s:\
    \ \"2 apples and 3 oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"\
    2 apples and 3 oranges\", n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples\
    \ and 100 oranges\", n: 120) == 19)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824640
- exit_code: 1
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    let arr = s.components(separatedBy: \" \")\n    let numOfApples\
    \ = Int(arr[0])!\n    let numOfOranges = Int(arr[2])!\n    return n - numOfApples\
    \ - numOfOranges\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19) == 8)\nassert(fruit_distribution(s: \"5 apples\
    \ and 6 oranges\", n: 21) == 10)\nassert(fruit_distribution(s: \"0 apples and\
    \ 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"1 apples and 0 oranges\"\
    , n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\", n: 100)\
    \ == 95)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\", n: 5) == 0)\n\
    assert(fruit_distribution(s: \"1 apples and 100 oranges\", n: 120) == 19)"
  status: SyntaxError
  stderr: "/tmp/tmpxfujbnb2.swift:17:17: error: value of type 'String' has no member\
    \ 'components'\n    let arr = s.components(separatedBy: \" \")\n             \
    \ ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824639
- exit_code: 0
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    let arr = s.split(separator: \" \")\n    let numOfApples = Int(arr[0])!\n\
    \    let numOfOranges = Int(arr[3])!\n    return n - numOfApples - numOfOranges\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fruit_distribution(s: \"5 apples and 6 oranges\"\
    , n: 19) == 8)\nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21)\
    \ == 10)\nassert(fruit_distribution(s: \"0 apples and 1 oranges\", n: 3) == 2)\n\
    assert(fruit_distribution(s: \"1 apples and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s:\
    \ \"2 apples and 3 oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"\
    2 apples and 3 oranges\", n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples\
    \ and 100 oranges\", n: 120) == 19)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824639
- exit_code: -4
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    let arr = s.split(separator: \" \")\n    let a = Int(arr[0])!\n\
    \    let o = Int(arr[2])!\n    return n - a - o\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 19) == 8)\n\
    assert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21) == 10)\nassert(fruit_distribution(s:\
    \ \"0 apples and 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"1 apples\
    \ and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples and 3\
    \ oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\"\
    , n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples and 100 oranges\", n: 120)\
    \ == 19)"
  status: Exception
  stderr: 'tmpywydsiss/tmpywydsiss.swift:19: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002b26d1238c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b26d0f2f561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b26d0f2f286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b26d0f2f13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b26d0f2ebb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpywydsiss                        0x00005653cef2beaa <unavailable> + 7850

    6    tmpywydsiss                        0x00005653cef2b5fb <unavailable> + 5627

    7    libc.so.6                          0x00002b26d1424460 __libc_start_main +
    245

    8    tmpywydsiss                        0x00005653cef2b2f9 <unavailable> + 4857

    '
  stdout: ''
  timestamp: 1659824639
- exit_code: 1
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    var apples = 0\n    var oranges = 0\n    var mangoes = 0\n   \
    \ var temp = \"\"\n    var i = 0\n    while i < s.count {\n        if s[i] ==\
    \ \" \" {\n            if temp == \"apples\" {\n                apples = Int(s[i+1])!\n\
    \            } else if temp == \"oranges\" {\n                oranges = Int(s[i+1])!\n\
    \            }\n            temp = \"\"\n        } else {\n            temp +=\
    \ String(s[i])\n        }\n        i += 1\n    }\n    mangoes = n - apples - oranges\n\
    \    return mangoes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19) == 8)\nassert(fruit_distribution(s: \"5 apples\
    \ and 6 oranges\", n: 21) == 10)\nassert(fruit_distribution(s: \"0 apples and\
    \ 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"1 apples and 0 oranges\"\
    , n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\", n: 100)\
    \ == 95)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\", n: 5) == 0)\n\
    assert(fruit_distribution(s: \"1 apples and 100 oranges\", n: 120) == 19)"
  status: SyntaxError
  stderr: "/tmp/tmpkk25d5m3.swift:23:12: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an Int, use a String.Index instead.\n        if s[i] ==\
    \ \" \" {\n           ^~~~\nSwift.String:3:12: note: 'subscript(_:)' has been\
    \ explicitly marked unavailable here\n    public subscript(i: Int) -> Character\
    \ { get }\n           ^\n/tmp/tmpkk25d5m3.swift:25:31: error: no exact matches\
    \ in call to subscript \n                apples = Int(s[i+1])!\n             \
    \                 ^\nSwift.String:3:12: note: candidate expects value of type\
    \ 'Range<String.Index>' for parameter #1 (got 'Int')\n    public subscript(r:\
    \ Range<String.Index>) -> Substring { get }\n           ^\nSwift.Collection:3:23:\
    \ note: candidate expects value of type '(UnboundedRange_) -> ()' for parameter\
    \ #1 (got 'Int')\n    @inlinable public subscript(x: (UnboundedRange_) -> ())\
    \ -> Self.SubSequence { get }\n                      ^\n/tmp/tmpkk25d5m3.swift:27:32:\
    \ error: no exact matches in call to subscript \n                oranges = Int(s[i+1])!\n\
    \                               ^\nSwift.String:3:12: note: candidate expects\
    \ value of type 'Range<String.Index>' for parameter #1 (got 'Int')\n    public\
    \ subscript(r: Range<String.Index>) -> Substring { get }\n           ^\nSwift.Collection:3:23:\
    \ note: candidate expects value of type '(UnboundedRange_) -> ()' for parameter\
    \ #1 (got 'Int')\n    @inlinable public subscript(x: (UnboundedRange_) -> ())\
    \ -> Self.SubSequence { get }\n                      ^\n/tmp/tmpkk25d5m3.swift:31:28:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n            temp += String(s[i])\n            \
    \               ^~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly\
    \ marked unavailable here\n    public subscript(i: Int) -> Character { get }\n\
    \           ^\n"
  stdout: ''
  timestamp: 1659824639
- exit_code: -4
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    let arr = s.split(separator: \" \")\n    let numOfApples = Int(arr[0])!\n\
    \    let numOfOranges = Int(arr[2])!\n    return n - numOfApples - numOfOranges\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fruit_distribution(s: \"5 apples and 6 oranges\"\
    , n: 19) == 8)\nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21)\
    \ == 10)\nassert(fruit_distribution(s: \"0 apples and 1 oranges\", n: 3) == 2)\n\
    assert(fruit_distribution(s: \"1 apples and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s:\
    \ \"2 apples and 3 oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"\
    2 apples and 3 oranges\", n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples\
    \ and 100 oranges\", n: 120) == 19)"
  status: Exception
  stderr: 'tmp1cvogc4x/tmp1cvogc4x.swift:19: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002b6d333eec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6d330e5561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b6d330e5286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b6d330e513c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b6d330e4bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmp1cvogc4x                        0x000055d7dd5d3eaa <unavailable> + 7850

    6    tmp1cvogc4x                        0x000055d7dd5d35fb <unavailable> + 5627

    7    libc.so.6                          0x00002b6d335da460 __libc_start_main +
    245

    8    tmp1cvogc4x                        0x000055d7dd5d32f9 <unavailable> + 4857

    '
  stdout: ''
  timestamp: 1659824639
- exit_code: 1
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    let fruits = s.components(separatedBy: \" and \")\n    let apples\
    \ = Int(fruits[0].components(separatedBy: \" \")[0])!\n    let oranges = Int(fruits[1].components(separatedBy:\
    \ \" \")[0])!\n    return n - apples - oranges\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 19) == 8)\n\
    assert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21) == 10)\nassert(fruit_distribution(s:\
    \ \"0 apples and 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"1 apples\
    \ and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples and 3\
    \ oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\"\
    , n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples and 100 oranges\", n: 120)\
    \ == 19)"
  status: SyntaxError
  stderr: "/tmp/tmprln0hg_6.swift:17:20: error: value of type 'String' has no member\
    \ 'components'\n    let fruits = s.components(separatedBy: \" and \")\n      \
    \           ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824638
- exit_code: -4
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    // Write your code here\n    return 0\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 19)\
    \ == 8)\nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21) == 10)\n\
    assert(fruit_distribution(s: \"0 apples and 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s:\
    \ \"1 apples and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"2 apples and\
    \ 3 oranges\", n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples and 100 oranges\"\
    , n: 120) == 19)"
  status: Exception
  stderr: 'tmpfincxi2h/tmpfincxi2h.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b42dd89cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b42dd593b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b42dd593988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b42dd5927b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfincxi2h                        0x000055972c5b8269 <unavailable> + 4713

    5    libc.so.6                          0x00002b42dda88460 __libc_start_main +
    245

    6    tmpfincxi2h                        0x000055972c5b7ee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1659824639
- exit_code: 1
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    var fruit_count = 0\n    var apple_count = 0\n    var orange_count\
    \ = 0\n    var mango_count = 0\n    var fruit_array = s.components(separatedBy:\
    \ \" \")\n    for i in 0..<fruit_array.count {\n        if fruit_array[i] == \"\
    apples\" {\n            apple_count = Int(fruit_array[i-1])!\n        }\n    \
    \    if fruit_array[i] == \"oranges\" {\n            orange_count = Int(fruit_array[i-1])!\n\
    \        }\n    }\n    fruit_count = apple_count + orange_count\n    mango_count\
    \ = n - fruit_count\n    return mango_count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 19) == 8)\n\
    assert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21) == 10)\nassert(fruit_distribution(s:\
    \ \"0 apples and 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"1 apples\
    \ and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples and 3\
    \ oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\"\
    , n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples and 100 oranges\", n: 120)\
    \ == 19)"
  status: SyntaxError
  stderr: "/tmp/tmp2izwf61v.swift:21:25: error: value of type 'String' has no member\
    \ 'components'\n    var fruit_array = s.components(separatedBy: \" \")\n     \
    \                 ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824639
- exit_code: -4
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    // Write your code here\n    var fruits = s.split(separator: \"\
    \ \")\n    var apples = Int(fruits[0])!\n    var oranges = Int(fruits[2])!\n \
    \   var mangoes = n - apples - oranges\n    return mangoes\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 19)\
    \ == 8)\nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21) == 10)\n\
    assert(fruit_distribution(s: \"0 apples and 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s:\
    \ \"1 apples and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"2 apples and\
    \ 3 oranges\", n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples and 100 oranges\"\
    , n: 120) == 19)"
  status: Exception
  stderr: 'tmpq0od723g/tmpq0od723g.swift:20: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002abe7564ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abe75345561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002abe75345286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002abe7534513c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002abe75344bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpq0od723g                        0x000055b0c2275faa <unavailable> + 8106

    6    tmpq0od723g                        0x000055b0c227564b <unavailable> + 5707

    7    libc.so.6                          0x00002abe7583a460 __libc_start_main +
    245

    8    tmpq0od723g                        0x000055b0c2275349 <unavailable> + 4937

    '
  stdout: ''
  timestamp: 1659824640
- exit_code: -4
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    // Write your code here\n    let arr = s.split(separator: \" \"\
    )\n    let a = Int(arr[0])!\n    let o = Int(arr[2])!\n    return n - a - o\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fruit_distribution(s: \"5 apples and 6 oranges\"\
    , n: 19) == 8)\nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21)\
    \ == 10)\nassert(fruit_distribution(s: \"0 apples and 1 oranges\", n: 3) == 2)\n\
    assert(fruit_distribution(s: \"1 apples and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s:\
    \ \"2 apples and 3 oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"\
    2 apples and 3 oranges\", n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples\
    \ and 100 oranges\", n: 120) == 19)"
  status: Exception
  stderr: 'tmpz16e2wjp/tmpz16e2wjp.swift:20: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002b608361dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6083314561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b6083314286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b608331413c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b6083313bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpz16e2wjp                        0x000055d620bf6eaa <unavailable> + 7850

    6    tmpz16e2wjp                        0x000055d620bf65fb <unavailable> + 5627

    7    libc.so.6                          0x00002b6083809460 __libc_start_main +
    245

    8    tmpz16e2wjp                        0x000055d620bf62f9 <unavailable> + 4857

    '
  stdout: ''
  timestamp: 1659824640
- exit_code: -4
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    // Write your code here\n    return 0\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 19)\
    \ == 8)\nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21) == 10)\n\
    assert(fruit_distribution(s: \"0 apples and 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s:\
    \ \"1 apples and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"2 apples and\
    \ 3 oranges\", n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples and 100 oranges\"\
    , n: 120) == 19)"
  status: Exception
  stderr: 'tmpfincxi2h/tmpfincxi2h.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b42dd89cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b42dd593b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b42dd593988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b42dd5927b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfincxi2h                        0x000055972c5b8269 <unavailable> + 4713

    5    libc.so.6                          0x00002b42dda88460 __libc_start_main +
    245

    6    tmpfincxi2h                        0x000055972c5b7ee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1659824639
- exit_code: 1
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    let arr = s.components(separatedBy: \" \")\n    let num_apples\
    \ = Int(arr[0])!\n    let num_oranges = Int(arr[2])!\n    return n - num_apples\
    \ - num_oranges\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19) == 8)\nassert(fruit_distribution(s: \"5 apples\
    \ and 6 oranges\", n: 21) == 10)\nassert(fruit_distribution(s: \"0 apples and\
    \ 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"1 apples and 0 oranges\"\
    , n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\", n: 100)\
    \ == 95)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\", n: 5) == 0)\n\
    assert(fruit_distribution(s: \"1 apples and 100 oranges\", n: 120) == 19)"
  status: SyntaxError
  stderr: "/tmp/tmpc189wgwk.swift:17:17: error: value of type 'String' has no member\
    \ 'components'\n    let arr = s.components(separatedBy: \" \")\n             \
    \ ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824639
- exit_code: 1
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    let fruits = s.components(separatedBy: \" \")\n    let apples\
    \ = Int(fruits[0])!\n    let oranges = Int(fruits[2])!\n    return n - apples\
    \ - oranges\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19) == 8)\nassert(fruit_distribution(s: \"5 apples\
    \ and 6 oranges\", n: 21) == 10)\nassert(fruit_distribution(s: \"0 apples and\
    \ 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"1 apples and 0 oranges\"\
    , n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\", n: 100)\
    \ == 95)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\", n: 5) == 0)\n\
    assert(fruit_distribution(s: \"1 apples and 100 oranges\", n: 120) == 19)"
  status: SyntaxError
  stderr: "/tmp/tmp4l9cq2lh.swift:17:20: error: value of type 'String' has no member\
    \ 'components'\n    let fruits = s.components(separatedBy: \" \")\n          \
    \       ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824638
- exit_code: 1
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    var total = 0\n    var apples = 0\n    var oranges = 0\n    var\
    \ mango = 0\n    var arr = s.components(separatedBy: \" \")\n    for i in 0..<arr.count\
    \ {\n        if arr[i] == \"apples\" {\n            apples = Int(arr[i-1])!\n\
    \        }\n        if arr[i] == \"oranges\" {\n            oranges = Int(arr[i-1])!\n\
    \        }\n    }\n    total = apples + oranges\n    mango = n - total\n    return\
    \ mango\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(fruit_distribution(s: \"\
    5 apples and 6 oranges\", n: 19) == 8)\nassert(fruit_distribution(s: \"5 apples\
    \ and 6 oranges\", n: 21) == 10)\nassert(fruit_distribution(s: \"0 apples and\
    \ 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"1 apples and 0 oranges\"\
    , n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\", n: 100)\
    \ == 95)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\", n: 5) == 0)\n\
    assert(fruit_distribution(s: \"1 apples and 100 oranges\", n: 120) == 19)"
  status: SyntaxError
  stderr: "/tmp/tmpblp7jja4.swift:21:17: error: value of type 'String' has no member\
    \ 'components'\n    var arr = s.components(separatedBy: \" \")\n             \
    \ ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824639
- exit_code: 0
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    // Write your code here\n    let fruits = s.split(separator: \"\
    \ \")\n    let total = Int(fruits[0])! + Int(fruits[3])!\n    return n - total\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fruit_distribution(s: \"5 apples and 6 oranges\"\
    , n: 19) == 8)\nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21)\
    \ == 10)\nassert(fruit_distribution(s: \"0 apples and 1 oranges\", n: 3) == 2)\n\
    assert(fruit_distribution(s: \"1 apples and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s:\
    \ \"2 apples and 3 oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"\
    2 apples and 3 oranges\", n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples\
    \ and 100 oranges\", n: 120) == 19)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824640
- exit_code: 1
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    let fruit = s.components(separatedBy: \" \")\n    let apple =\
    \ Int(fruit[0])!\n    let orange = Int(fruit[3])!\n    return n - apple - orange\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fruit_distribution(s: \"5 apples and 6 oranges\"\
    , n: 19) == 8)\nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21)\
    \ == 10)\nassert(fruit_distribution(s: \"0 apples and 1 oranges\", n: 3) == 2)\n\
    assert(fruit_distribution(s: \"1 apples and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s:\
    \ \"2 apples and 3 oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"\
    2 apples and 3 oranges\", n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples\
    \ and 100 oranges\", n: 120) == 19)"
  status: SyntaxError
  stderr: "/tmp/tmp2669orr6.swift:17:19: error: value of type 'String' has no member\
    \ 'components'\n    let fruit = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824639
- exit_code: -4
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    let fruits = s.split(separator: \" \")\n    let apples = Int(fruits[0])!\n\
    \    let oranges = Int(fruits[2])!\n    return n - apples - oranges\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fruit_distribution(s: \"5 apples and 6 oranges\"\
    , n: 19) == 8)\nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21)\
    \ == 10)\nassert(fruit_distribution(s: \"0 apples and 1 oranges\", n: 3) == 2)\n\
    assert(fruit_distribution(s: \"1 apples and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s:\
    \ \"2 apples and 3 oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"\
    2 apples and 3 oranges\", n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples\
    \ and 100 oranges\", n: 120) == 19)"
  status: Exception
  stderr: 'tmpybd6fg3_/tmpybd6fg3_.swift:19: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002b882f3cec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b882f0c5561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b882f0c5286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b882f0c513c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b882f0c4bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpybd6fg3_                        0x000055a3c316ceaa <unavailable> + 7850

    6    tmpybd6fg3_                        0x000055a3c316c5fb <unavailable> + 5627

    7    libc.so.6                          0x00002b882f5ba460 __libc_start_main +
    245

    8    tmpybd6fg3_                        0x000055a3c316c2f9 <unavailable> + 4857

    '
  stdout: ''
  timestamp: 1659824639
- exit_code: -4
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    // Write your code here\n    return 0\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 19)\
    \ == 8)\nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21) == 10)\n\
    assert(fruit_distribution(s: \"0 apples and 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s:\
    \ \"1 apples and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"2 apples and\
    \ 3 oranges\", n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples and 100 oranges\"\
    , n: 120) == 19)"
  status: Exception
  stderr: 'tmpfincxi2h/tmpfincxi2h.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b42dd89cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b42dd593b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b42dd593988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b42dd5927b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfincxi2h                        0x000055972c5b8269 <unavailable> + 4713

    5    libc.so.6                          0x00002b42dda88460 __libc_start_main +
    245

    6    tmpfincxi2h                        0x000055972c5b7ee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1659824639
- exit_code: -4
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    let arr = s.split(separator: \" \")\n    let apples = Int(arr[0])!\n\
    \    let oranges = Int(arr[2])!\n    let mangoes = n - apples - oranges\n    return\
    \ mangoes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19) == 8)\nassert(fruit_distribution(s: \"5 apples\
    \ and 6 oranges\", n: 21) == 10)\nassert(fruit_distribution(s: \"0 apples and\
    \ 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"1 apples and 0 oranges\"\
    , n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\", n: 100)\
    \ == 95)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\", n: 5) == 0)\n\
    assert(fruit_distribution(s: \"1 apples and 100 oranges\", n: 120) == 19)"
  status: Exception
  stderr: 'tmpyvix5341/tmpyvix5341.swift:19: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002b4021a63c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b402175a561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b402175a286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b402175a13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b4021759bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpyvix5341                        0x000055f534d7febd <unavailable> + 7869

    6    tmpyvix5341                        0x000055f534d7f5fb <unavailable> + 5627

    7    libc.so.6                          0x00002b4021c4f460 __libc_start_main +
    245

    8    tmpyvix5341                        0x000055f534d7f2f9 <unavailable> + 4857

    '
  stdout: ''
  timestamp: 1659824639
- exit_code: -4
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    let arr = s.split(separator: \" \")\n    let apples = Int(arr[0])!\n\
    \    let oranges = Int(arr[2])!\n    return n - apples - oranges\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fruit_distribution(s: \"5 apples and 6 oranges\"\
    , n: 19) == 8)\nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21)\
    \ == 10)\nassert(fruit_distribution(s: \"0 apples and 1 oranges\", n: 3) == 2)\n\
    assert(fruit_distribution(s: \"1 apples and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s:\
    \ \"2 apples and 3 oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"\
    2 apples and 3 oranges\", n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples\
    \ and 100 oranges\", n: 120) == 19)"
  status: Exception
  stderr: 'tmprd31g2wb/tmprd31g2wb.swift:19: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002afc720d9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afc71dd0561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002afc71dd0286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002afc71dd013c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002afc71dcfbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmprd31g2wb                        0x000055f789418eaa <unavailable> + 7850

    6    tmprd31g2wb                        0x000055f7894185fb <unavailable> + 5627

    7    libc.so.6                          0x00002afc722c5460 __libc_start_main +
    245

    8    tmprd31g2wb                        0x000055f7894182f9 <unavailable> + 4857

    '
  stdout: ''
  timestamp: 1659824639
- exit_code: 1
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    let fruits = s.components(separatedBy: \" and \")\n    let apples\
    \ = Int(fruits[0].components(separatedBy: \" \")[0])!\n    let oranges = Int(fruits[1].components(separatedBy:\
    \ \" \")[0])!\n    return n - apples - oranges\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 19) == 8)\n\
    assert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21) == 10)\nassert(fruit_distribution(s:\
    \ \"0 apples and 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"1 apples\
    \ and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples and 3\
    \ oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\"\
    , n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples and 100 oranges\", n: 120)\
    \ == 19)"
  status: SyntaxError
  stderr: "/tmp/tmprln0hg_6.swift:17:20: error: value of type 'String' has no member\
    \ 'components'\n    let fruits = s.components(separatedBy: \" and \")\n      \
    \           ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824638
- exit_code: 1
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    var s = s\n    var n = n\n    var apples = 0\n    var oranges\
    \ = 0\n    var mangoes = 0\n    var i = 0\n    while i < s.count {\n        if\
    \ s[i] == \" \" {\n            i += 1\n        } else if s[i] == \"a\" {\n   \
    \         i += 7\n            var j = i\n            while s[j] != \" \" {\n \
    \               j += 1\n            }\n            apples = Int(s[i..<j])!\n \
    \           i = j\n        } else if s[i] == \"o\" {\n            i += 8\n   \
    \         var j = i\n            while s[j] != \" \" {\n                j += 1\n\
    \            }\n            oranges = Int(s[i..<j])!\n            i = j\n    \
    \    }\n    }\n    mangoes = n - apples - oranges\n    return mangoes\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fruit_distribution(s: \"5 apples and 6 oranges\"\
    , n: 19) == 8)\nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21)\
    \ == 10)\nassert(fruit_distribution(s: \"0 apples and 1 oranges\", n: 3) == 2)\n\
    assert(fruit_distribution(s: \"1 apples and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s:\
    \ \"2 apples and 3 oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"\
    2 apples and 3 oranges\", n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples\
    \ and 100 oranges\", n: 120) == 19)"
  status: SyntaxError
  stderr: "/tmp/tmpn409xs52.swift:24:12: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an Int, use a String.Index instead.\n        if s[i] ==\
    \ \" \" {\n           ^~~~\nSwift.String:3:12: note: 'subscript(_:)' has been\
    \ explicitly marked unavailable here\n    public subscript(i: Int) -> Character\
    \ { get }\n           ^\n/tmp/tmpn409xs52.swift:26:19: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \        } else if s[i] == \"a\" {\n                  ^~~~\nSwift.String:3:12:\
    \ note: 'subscript(_:)' has been explicitly marked unavailable here\n    public\
    \ subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpn409xs52.swift:29:19:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n            while s[j] != \" \" {\n           \
    \       ^~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked\
    \ unavailable here\n    public subscript(i: Int) -> Character { get }\n      \
    \     ^\n/tmp/tmpn409xs52.swift:32:26: error: 'subscript(_:)' is unavailable:\
    \ cannot subscript String with an integer range, use a String.Index range instead.\n\
    \            apples = Int(s[i..<j])!\n                         ^~~~~~~~\nSwift.String:5:12:\
    \ note: 'subscript(_:)' has been explicitly marked unavailable here\n    public\
    \ subscript<R>(bounds: R) -> String where R : RangeExpression, R.Bound == Int\
    \ { get }\n           ^\n/tmp/tmpn409xs52.swift:34:19: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \        } else if s[i] == \"o\" {\n                  ^~~~\nSwift.String:3:12:\
    \ note: 'subscript(_:)' has been explicitly marked unavailable here\n    public\
    \ subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpn409xs52.swift:37:19:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n            while s[j] != \" \" {\n           \
    \       ^~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked\
    \ unavailable here\n    public subscript(i: Int"
  stdout: ''
  timestamp: 1659824640
- exit_code: 1
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    let fruits = s.components(separatedBy: \" and \")\n    let apples\
    \ = Int(fruits[0].components(separatedBy: \" \")[0])!\n    let oranges = Int(fruits[1].components(separatedBy:\
    \ \" \")[0])!\n    return n - apples - oranges\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 19) == 8)\n\
    assert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21) == 10)\nassert(fruit_distribution(s:\
    \ \"0 apples and 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"1 apples\
    \ and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples and 3\
    \ oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\"\
    , n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples and 100 oranges\", n: 120)\
    \ == 19)"
  status: SyntaxError
  stderr: "/tmp/tmprln0hg_6.swift:17:20: error: value of type 'String' has no member\
    \ 'components'\n    let fruits = s.components(separatedBy: \" and \")\n      \
    \           ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824638
- exit_code: 0
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    var total = 0\n    var fruits = s.split(separator: \" \")\n  \
    \  for i in 0..<fruits.count {\n        if fruits[i] == \"apples\" {\n       \
    \     total += Int(fruits[i-1])!\n        } else if fruits[i] == \"oranges\" {\n\
    \            total += Int(fruits[i-1])!\n        }\n    }\n    return n - total\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fruit_distribution(s: \"5 apples and 6 oranges\"\
    , n: 19) == 8)\nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21)\
    \ == 10)\nassert(fruit_distribution(s: \"0 apples and 1 oranges\", n: 3) == 2)\n\
    assert(fruit_distribution(s: \"1 apples and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s:\
    \ \"2 apples and 3 oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"\
    2 apples and 3 oranges\", n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples\
    \ and 100 oranges\", n: 120) == 19)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824640
- exit_code: 0
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    let fruits = s.split(separator: \" \")\n    let numOfApples =\
    \ Int(fruits[0])!\n    let numOfOranges = Int(fruits[3])!\n    return n - numOfApples\
    \ - numOfOranges\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19) == 8)\nassert(fruit_distribution(s: \"5 apples\
    \ and 6 oranges\", n: 21) == 10)\nassert(fruit_distribution(s: \"0 apples and\
    \ 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"1 apples and 0 oranges\"\
    , n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\", n: 100)\
    \ == 95)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\", n: 5) == 0)\n\
    assert(fruit_distribution(s: \"1 apples and 100 oranges\", n: 120) == 19)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824640
- exit_code: 0
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    var mango = 0\n    var apple = 0\n    var orange = 0\n    var\
    \ total = 0\n    var arr = s.split(separator: \" \")\n    for i in 0..<arr.count\
    \ {\n        if arr[i] == \"apples\" {\n            apple = Int(arr[i-1])!\n \
    \       }\n        if arr[i] == \"oranges\" {\n            orange = Int(arr[i-1])!\n\
    \        }\n    }\n    total = apple + orange\n    mango = n - total\n    return\
    \ mango\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(fruit_distribution(s: \"\
    5 apples and 6 oranges\", n: 19) == 8)\nassert(fruit_distribution(s: \"5 apples\
    \ and 6 oranges\", n: 21) == 10)\nassert(fruit_distribution(s: \"0 apples and\
    \ 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"1 apples and 0 oranges\"\
    , n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\", n: 100)\
    \ == 95)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\", n: 5) == 0)\n\
    assert(fruit_distribution(s: \"1 apples and 100 oranges\", n: 120) == 19)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824640
- exit_code: 1
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    // Write your code here\n    var fruits = s.components(separatedBy:\
    \ \" \")\n    var mango = n - Int(fruits[0])! - Int(fruits[2])!\n    return mango\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fruit_distribution(s: \"5 apples and 6 oranges\"\
    , n: 19) == 8)\nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21)\
    \ == 10)\nassert(fruit_distribution(s: \"0 apples and 1 oranges\", n: 3) == 2)\n\
    assert(fruit_distribution(s: \"1 apples and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s:\
    \ \"2 apples and 3 oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"\
    2 apples and 3 oranges\", n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples\
    \ and 100 oranges\", n: 120) == 19)"
  status: SyntaxError
  stderr: "/tmp/tmplrv2wghd.swift:18:20: error: value of type 'String' has no member\
    \ 'components'\n    var fruits = s.components(separatedBy: \" \")\n          \
    \       ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824640
- exit_code: -4
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    // Write your code here\n    let arr = s.split(separator: \" \"\
    )\n    let apples = Int(arr[0])!\n    let oranges = Int(arr[2])!\n    return n\
    \ - apples - oranges\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19) == 8)\nassert(fruit_distribution(s: \"5 apples\
    \ and 6 oranges\", n: 21) == 10)\nassert(fruit_distribution(s: \"0 apples and\
    \ 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"1 apples and 0 oranges\"\
    , n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\", n: 100)\
    \ == 95)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\", n: 5) == 0)\n\
    assert(fruit_distribution(s: \"1 apples and 100 oranges\", n: 120) == 19)"
  status: Exception
  stderr: 'tmpum5wx8cn/tmpum5wx8cn.swift:20: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002b6d84e6fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6d84b66561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b6d84b66286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b6d84b6613c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b6d84b65bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpum5wx8cn                        0x000055e504246eaa <unavailable> + 7850

    6    tmpum5wx8cn                        0x000055e5042465fb <unavailable> + 5627

    7    libc.so.6                          0x00002b6d8505b460 __libc_start_main +
    245

    8    tmpum5wx8cn                        0x000055e5042462f9 <unavailable> + 4857

    '
  stdout: ''
  timestamp: 1659824639
- exit_code: 1
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    var mango = 0\n    var apple = 0\n    var orange = 0\n    var\
    \ number = \"\"\n    for i in s {\n        if i == \" \" {\n            continue\n\
    \        }\n        if i == \"a\" {\n            apple = Int(number)!\n      \
    \      number = \"\"\n        }\n        if i == \"o\" {\n            orange =\
    \ Int(number)!\n            number = \"\"\n        }\n        if i == \"n\" {\n\
    \            mango = Int(number)!\n            number = \"\"\n        }\n    \
    \    if i == \"d\" {\n            mango = Int(number)!\n            number = \"\
    \"\n        }\n        if i == \"r\" {\n            mango = Int(number)!\n   \
    \         number = \"\"\n        }\n        if i == \"g\" {\n            mango\
    \ = Int(number)!\n            number = \"\"\n        }\n        if i == \"e\"\
    \ {\n            mango = Int(number)!\n            number = \"\"\n        }\n\
    \        if i == \"s\" {\n            mango = Int(number)!\n            number\
    \ = \"\"\n        }\n        if i == \"l\" {\n            mango = Int(number)!\n\
    \            number = \"\"\n        }\n        if i == \"a\" {\n            mango\
    \ = Int(number)!\n            number = \"\"\n        }\n        if i == \"n\"\
    \ {\n            mango = Int(number)!\n            number = \"\"\n        }\n\
    \        if i == \"d\" {\n            mango = Int(number)!\n            number\
    \ = \"\"\n        }\n        if i == \" \" {\n            mango = Int(number)!\n\
    \            number = \"\"\n        }\n        if i == \"a\" {\n            mango\
    \ = Int(number)!\n            number = \"\"\n        }\n        if i == \"n\"\
    \ {\n            mango = Int(number)!\n            number = \"\"\n        }\n\
    \        if i == \"d\" {\n            mango = Int(number)!\n            number\
    \ = \"\"\n        }\n        if i == \" \" {\n            mango = Int(number)!\n\
    \            number = \"\"\n        }\n        if i == \"o\" {\n            mango\
    \ = Int(number)!\n            number = \"\"\n        }\n        if i == \"r\"\
    \ {\n            mango = Int(number)!\n           \n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 19)\
    \ == 8)\nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21) == 10)\n\
    assert(fruit_distribution(s: \"0 apples and 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s:\
    \ \"1 apples and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"2 apples and\
    \ 3 oranges\", n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples and 100 oranges\"\
    , n: 120) == 19)"
  status: SyntaxError
  stderr: "/tmp/tmpyikv2ah0.swift:121:72: error: expected '}' at end of brace statement\n\
    assert(fruit_distribution(s: \"1 apples and 100 oranges\", n: 120) == 19)\n  \
    \                                                                     ^\n/tmp/tmpyikv2ah0.swift:21:16:\
    \ note: to match this opening '{'\n    for i in s {\n               ^\n/tmp/tmpyikv2ah0.swift:121:72:\
    \ error: expected '}' at end of brace statement\nassert(fruit_distribution(s:\
    \ \"1 apples and 100 oranges\", n: 120) == 19)\n                             \
    \                                          ^\n/tmp/tmpyikv2ah0.swift:16:51: note:\
    \ to match this opening '{'\nfunc fruit_distribution(s: String, n: Int) -> Int\
    \ {\n                                                  ^\n/tmp/tmpyikv2ah0.swift:103:6:\
    \ error: operator functions can only be declared at global or in type scope\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n/tmp/tmpyikv2ah0.swift:17:9:\
    \ warning: variable 'mango' was written to, but never read\n    var mango = 0\n\
    \        ^\n/tmp/tmpyikv2ah0.swift:18:9: warning: variable 'apple' was written\
    \ to, but never read\n    var apple = 0\n        ^\n/tmp/tmpyikv2ah0.swift:19:9:\
    \ warning: variable 'orange' was written to, but never read\n    var orange =\
    \ 0\n        ^\n"
  stdout: ''
  timestamp: 1659824640
- exit_code: 1
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    // Write your code here\n    var sum = 0\n    var arr = s.components(separatedBy:\
    \ \" \")\n    for i in 0..<arr.count {\n        if arr[i] == \"apples\" {\n  \
    \          sum += Int(arr[i-1])!\n        } else if arr[i] == \"oranges\" {\n\
    \            sum += Int(arr[i-1])!\n        }\n    }\n    return n - sum\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fruit_distribution(s: \"5 apples and 6 oranges\"\
    , n: 19) == 8)\nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21)\
    \ == 10)\nassert(fruit_distribution(s: \"0 apples and 1 oranges\", n: 3) == 2)\n\
    assert(fruit_distribution(s: \"1 apples and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s:\
    \ \"2 apples and 3 oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"\
    2 apples and 3 oranges\", n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples\
    \ and 100 oranges\", n: 120) == 19)"
  status: SyntaxError
  stderr: "/tmp/tmpw4ru0fkm.swift:19:17: error: value of type 'String' has no member\
    \ 'components'\n    var arr = s.components(separatedBy: \" \")\n             \
    \ ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824640
- exit_code: -4
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    // write your code here\n    return 0\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 19)\
    \ == 8)\nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21) == 10)\n\
    assert(fruit_distribution(s: \"0 apples and 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s:\
    \ \"1 apples and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"2 apples and\
    \ 3 oranges\", n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples and 100 oranges\"\
    , n: 120) == 19)"
  status: Exception
  stderr: 'tmpsj1fbkez/tmpsj1fbkez.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab8a4bddc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab8a48d4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab8a48d4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab8a48d37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsj1fbkez                        0x00005555a8246269 <unavailable> + 4713

    5    libc.so.6                          0x00002ab8a4dc9460 __libc_start_main +
    245

    6    tmpsj1fbkez                        0x00005555a8245ee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1659824639
- exit_code: 1
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    let fruits = s.components(separatedBy: \" and \")\n    let apples\
    \ = Int(fruits[0].components(separatedBy: \" \")[0])!\n    let oranges = Int(fruits[1].components(separatedBy:\
    \ \" \")[0])!\n    return n - apples - oranges\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 19) == 8)\n\
    assert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21) == 10)\nassert(fruit_distribution(s:\
    \ \"0 apples and 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"1 apples\
    \ and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples and 3\
    \ oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\"\
    , n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples and 100 oranges\", n: 120)\
    \ == 19)"
  status: SyntaxError
  stderr: "/tmp/tmprln0hg_6.swift:17:20: error: value of type 'String' has no member\
    \ 'components'\n    let fruits = s.components(separatedBy: \" and \")\n      \
    \           ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824638
- exit_code: -4
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    let fruits = s.split(separator: \" \")\n    let apples = Int(fruits[0])!\n\
    \    let oranges = Int(fruits[2])!\n    return n - apples - oranges\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fruit_distribution(s: \"5 apples and 6 oranges\"\
    , n: 19) == 8)\nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21)\
    \ == 10)\nassert(fruit_distribution(s: \"0 apples and 1 oranges\", n: 3) == 2)\n\
    assert(fruit_distribution(s: \"1 apples and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s:\
    \ \"2 apples and 3 oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"\
    2 apples and 3 oranges\", n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples\
    \ and 100 oranges\", n: 120) == 19)"
  status: Exception
  stderr: 'tmpybd6fg3_/tmpybd6fg3_.swift:19: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002b882f3cec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b882f0c5561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b882f0c5286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b882f0c513c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b882f0c4bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpybd6fg3_                        0x000055a3c316ceaa <unavailable> + 7850

    6    tmpybd6fg3_                        0x000055a3c316c5fb <unavailable> + 5627

    7    libc.so.6                          0x00002b882f5ba460 __libc_start_main +
    245

    8    tmpybd6fg3_                        0x000055a3c316c2f9 <unavailable> + 4857

    '
  stdout: ''
  timestamp: 1659824639
- exit_code: -4
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    // Write your code here\n    var s = s.split(separator: \" \"\
    )\n    var n = n\n    var a = Int(s[0])!\n    var o = Int(s[2])!\n    n -= a +\
    \ o\n    return n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19) == 8)\nassert(fruit_distribution(s: \"5 apples\
    \ and 6 oranges\", n: 21) == 10)\nassert(fruit_distribution(s: \"0 apples and\
    \ 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"1 apples and 0 oranges\"\
    , n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\", n: 100)\
    \ == 95)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\", n: 5) == 0)\n\
    assert(fruit_distribution(s: \"1 apples and 100 oranges\", n: 120) == 19)"
  status: Exception
  stderr: 'tmpz83izk74/tmpz83izk74.swift:21: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002b0287144c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0286e3b561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b0286e3b286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b0286e3b13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b0286e3abb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpz83izk74                        0x000056509ac08fb8 <unavailable> + 8120

    6    tmpz83izk74                        0x000056509ac0864b <unavailable> + 5707

    7    libc.so.6                          0x00002b0287330460 __libc_start_main +
    245

    8    tmpz83izk74                        0x000056509ac08349 <unavailable> + 4937

    '
  stdout: ''
  timestamp: 1659824640
- exit_code: 1
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    var total = 0\n    var fruit = 0\n    var number = 0\n    var\
    \ number2 = 0\n    var number3 = 0\n    var number4 = 0\n    var number5 = 0\n\
    \    var number6 = 0\n    var number7 = 0\n    var number8 = 0\n    var number9\
    \ = 0\n    var number10 = 0\n    var number11 = 0\n    var number12 = 0\n    var\
    \ number13 = 0\n    var number14 = 0\n    var number15 = 0\n    var number16 =\
    \ 0\n    var number17 = 0\n    var number18 = 0\n    var number19 = 0\n    var\
    \ number20 = 0\n    var number21 = 0\n    var number22 = 0\n    var number23 =\
    \ 0\n    var number24 = 0\n    var number25 = 0\n    var number26 = 0\n    var\
    \ number27 = 0\n    var number28 = 0\n    var number29 = 0\n    var number30 =\
    \ 0\n    var number31 = 0\n    var number32 = 0\n    var number33 = 0\n    var\
    \ number34 = 0\n    var number35 = 0\n    var number36 = 0\n    var number37 =\
    \ 0\n    var number38 = 0\n    var number39 = 0\n    var number40 = 0\n    var\
    \ number41 = 0\n    var number42 = 0\n    var number43 = 0\n    var number44 =\
    \ 0\n    var number45 = 0\n    var number46 = 0\n    var number47 = 0\n    var\
    \ number48 = 0\n    var number49 = 0\n    var number50 = 0\n    var number51 =\
    \ 0\n    var number52 = 0\n    var number53 = 0\n    var number54 = 0\n    var\
    \ number55 = 0\n    var number56 = 0\n    var number57 = 0\n    var number58 =\
    \ 0\n    var number59 = 0\n    var number60 = 0\n    var number61 = 0\n    var\
    \ number62 = 0\n    var number63 = 0\n    var number64 = 0\n    var number65 =\
    \ 0\n    var number66 = 0\n    var number67 = 0\n    var number68 = 0\n    var\
    \ number69 = 0\n    var number70 = 0\n    var number71 = 0\n    var number\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fruit_distribution(s: \"5 apples and 6 oranges\"\
    , n: 19) == 8)\nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21)\
    \ == 10)\nassert(fruit_distribution(s: \"0 apples and 1 oranges\", n: 3) == 2)\n\
    assert(fruit_distribution(s: \"1 apples and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s:\
    \ \"2 apples and 3 oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"\
    2 apples and 3 oranges\", n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples\
    \ and 100 oranges\", n: 120) == 19)"
  status: SyntaxError
  stderr: "/tmp/tmpjt5_sw14.swift:90:9: error: type annotation missing in pattern\n\
    \    var number\n        ^\n"
  stdout: ''
  timestamp: 1659824640
- exit_code: -4
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    // Write your code here\n    let arr = s.split(separator: \" \"\
    )\n    let numOfApples = Int(arr[0])!\n    let numOfOranges = Int(arr[2])!\n \
    \   let numOfMangoes = n - numOfApples - numOfOranges\n    return numOfMangoes\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fruit_distribution(s: \"5 apples and 6 oranges\"\
    , n: 19) == 8)\nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21)\
    \ == 10)\nassert(fruit_distribution(s: \"0 apples and 1 oranges\", n: 3) == 2)\n\
    assert(fruit_distribution(s: \"1 apples and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s:\
    \ \"2 apples and 3 oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"\
    2 apples and 3 oranges\", n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples\
    \ and 100 oranges\", n: 120) == 19)"
  status: Exception
  stderr: 'tmpiqkyrvnn/tmpiqkyrvnn.swift:20: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002b91b1c4ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b91b1941561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b91b1941286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b91b194113c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b91b1940bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpiqkyrvnn                        0x000055f0ee9afebd <unavailable> + 7869

    6    tmpiqkyrvnn                        0x000055f0ee9af5fb <unavailable> + 5627

    7    libc.so.6                          0x00002b91b1e36460 __libc_start_main +
    245

    8    tmpiqkyrvnn                        0x000055f0ee9af2f9 <unavailable> + 4857

    '
  stdout: ''
  timestamp: 1659824640
- exit_code: -4
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    // Write your code here\n    var arr = s.split(separator: \" \"\
    )\n    var sum = 0\n    for i in 0..<arr.count{\n        if i % 2 == 0{\n    \
    \        sum += Int(arr[i])!\n        }\n    }\n    return n - sum\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fruit_distribution(s: \"5 apples and 6 oranges\"\
    , n: 19) == 8)\nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21)\
    \ == 10)\nassert(fruit_distribution(s: \"0 apples and 1 oranges\", n: 3) == 2)\n\
    assert(fruit_distribution(s: \"1 apples and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s:\
    \ \"2 apples and 3 oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"\
    2 apples and 3 oranges\", n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples\
    \ and 100 oranges\", n: 120) == 19)"
  status: Exception
  stderr: 'tmpnn2noxvm/tmpnn2noxvm.swift:22: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002b7a3be13c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7a3bb0a561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b7a3bb0a286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b7a3bb0a13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b7a3bb09bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpnn2noxvm                        0x000056280758811a <unavailable> + 8474

    6    tmpnn2noxvm                        0x000056280758774b <unavailable> + 5963

    7    libc.so.6                          0x00002b7a3bfff460 __libc_start_main +
    245

    8    tmpnn2noxvm                        0x0000562807587449 <unavailable> + 5193

    '
  stdout: ''
  timestamp: 1659824640
- exit_code: -4
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    // Write your code here\n    return 0\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 19)\
    \ == 8)\nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21) == 10)\n\
    assert(fruit_distribution(s: \"0 apples and 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s:\
    \ \"1 apples and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"2 apples and\
    \ 3 oranges\", n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples and 100 oranges\"\
    , n: 120) == 19)"
  status: Exception
  stderr: 'tmpfincxi2h/tmpfincxi2h.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b42dd89cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b42dd593b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b42dd593988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b42dd5927b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfincxi2h                        0x000055972c5b8269 <unavailable> + 4713

    5    libc.so.6                          0x00002b42dda88460 __libc_start_main +
    245

    6    tmpfincxi2h                        0x000055972c5b7ee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1659824639
- exit_code: -4
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    // Write your code here\n    var arr = s.split(separator: \" \"\
    )\n    var sum = 0\n    for i in 0..<arr.count{\n        if i % 2 == 0{\n    \
    \        sum += Int(arr[i])!\n        }\n    }\n    return n - sum\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fruit_distribution(s: \"5 apples and 6 oranges\"\
    , n: 19) == 8)\nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21)\
    \ == 10)\nassert(fruit_distribution(s: \"0 apples and 1 oranges\", n: 3) == 2)\n\
    assert(fruit_distribution(s: \"1 apples and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s:\
    \ \"2 apples and 3 oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"\
    2 apples and 3 oranges\", n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples\
    \ and 100 oranges\", n: 120) == 19)"
  status: Exception
  stderr: 'tmpnn2noxvm/tmpnn2noxvm.swift:22: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002b7a3be13c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7a3bb0a561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b7a3bb0a286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b7a3bb0a13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b7a3bb09bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpnn2noxvm                        0x000056280758811a <unavailable> + 8474

    6    tmpnn2noxvm                        0x000056280758774b <unavailable> + 5963

    7    libc.so.6                          0x00002b7a3bfff460 __libc_start_main +
    245

    8    tmpnn2noxvm                        0x0000562807587449 <unavailable> + 5193

    '
  stdout: ''
  timestamp: 1659824640
- exit_code: -4
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    let fruits = s.split(separator: \" \")\n    let apples = Int(fruits[0])!\n\
    \    let oranges = Int(fruits[2])!\n    return n - apples - oranges\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fruit_distribution(s: \"5 apples and 6 oranges\"\
    , n: 19) == 8)\nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21)\
    \ == 10)\nassert(fruit_distribution(s: \"0 apples and 1 oranges\", n: 3) == 2)\n\
    assert(fruit_distribution(s: \"1 apples and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s:\
    \ \"2 apples and 3 oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"\
    2 apples and 3 oranges\", n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples\
    \ and 100 oranges\", n: 120) == 19)"
  status: Exception
  stderr: 'tmpybd6fg3_/tmpybd6fg3_.swift:19: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002b882f3cec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b882f0c5561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b882f0c5286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b882f0c513c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b882f0c4bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpybd6fg3_                        0x000055a3c316ceaa <unavailable> + 7850

    6    tmpybd6fg3_                        0x000055a3c316c5fb <unavailable> + 5627

    7    libc.so.6                          0x00002b882f5ba460 __libc_start_main +
    245

    8    tmpybd6fg3_                        0x000055a3c316c2f9 <unavailable> + 4857

    '
  stdout: ''
  timestamp: 1659824639
- exit_code: 1
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    var total_apples = 0\n    var total_oranges = 0\n    var total_mangoes\
    \ = 0\n    var total_fruits = 0\n    var total_fruits_in_basket = 0\n    var total_fruits_in_string\
    \ = 0\n    var total_fruits_in_basket_string = \"\"\n    var total_fruits_in_string_string\
    \ = \"\"\n    var total_fruits_in_string_array = [String]()\n    var total_fruits_in_basket_array\
    \ = [String]()\n    var total_fruits_in_string_array_int = [Int]()\n    var total_fruits_in_basket_array_int\
    \ = [Int]()\n    var total_fruits_in_string_array_int_sum = 0\n    var total_fruits_in_basket_array_int_sum\
    \ = 0\n    var total_fruits_in_string_array_int_sum_string = \"\"\n    var total_fruits_in_basket_array_int_sum_string\
    \ = \"\"\n    var total_fruits_in_string_array_int_sum_string_array = [String]()\n\
    \    var total_fruits_in_basket_array_int_sum_string_array = [String]()\n    var\
    \ total_fruits_in_string_array_int_sum_string_array_int = [Int]()\n    var total_fruits_in_basket_array_int_sum_string_array_int\
    \ = [Int]()\n    var total_fruits_in_string_array_int_sum_string_array_int_sum\
    \ = 0\n    var total_fruits_in_basket_array_int_sum_string_array_int_sum = 0\n\
    \    var total_fruits_in_string_array_int_sum_string_array_int_sum_string = \"\
    \"\n    var total_fruits_in_basket_array_int_sum_string_array_int_sum_string =\
    \ \"\"\n    var total_fruits_in_string_array_int_sum_string_array_int_sum_string_array\
    \ = [String]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19) == 8)\nassert(fruit_distribution(s: \"5 apples\
    \ and 6 oranges\", n: 21) == 10)\nassert(fruit_distribution(s: \"0 apples and\
    \ 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"1 apples and 0 oranges\"\
    , n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\", n: 100)\
    \ == 95)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\", n: 5) == 0)\n\
    assert(fruit_distribution(s: \"1 apples and 100 oranges\", n: 120) == 19)"
  status: SyntaxError
  stderr: "/tmp/tmpr2tlqm8w.swift:41:82: error: expected member name or constructor\
    \ call after type name\n    var total_fruits_in_string_array_int_sum_string_array_int_sum_string_array\
    \ = [String]\n                                                               \
    \                  ^\n/tmp/tmpr2tlqm8w.swift:41:89: note: add arguments after\
    \ the type to construct a value of the type\n    var total_fruits_in_string_array_int_sum_string_array_int_sum_string_array\
    \ = [String]\n                                                               \
    \                         ^\n                                                \
    \                                         ()\n/tmp/tmpr2tlqm8w.swift:41:89: note:\
    \ use '.self' to reference the type object\n    var total_fruits_in_string_array_int_sum_string_array_int_sum_string_array\
    \ = [String]\n                                                               \
    \                         ^\n                                                \
    \                                         .self\n/tmp/tmpr2tlqm8w.swift:17:9:\
    \ warning: initialization of variable 'total_apples' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var total_apples = 0\n\
    \    ~~~~^~~~~~~~~~~~\n    _\n/tmp/tmpr2tlqm8w.swift:18:9: warning: initialization\
    \ of variable 'total_oranges' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var total_oranges = 0\n    ~~~~^~~~~~~~~~~~~\n  \
    \  _\n/tmp/tmpr2tlqm8w.swift:19:9: warning: initialization of variable 'total_mangoes'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var total_mangoes = 0\n    ~~~~^~~~~~~~~~~~~\n    _\n/tmp/tmpr2tlqm8w.swift:20:9:\
    \ warning: initialization of variable 'total_fruits' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var total_fruits = 0\n\
    \    ~~~~^~~~~~~~~~~~\n    _\n/tmp/tmpr2tlqm8w.swift:21:9: warning: initialization\
    \ of variable 'total_fruits_in_basket' was never used; consider replacing with\
    \ assignment to '_' or removing it\n    var total_fruits_in_basket = 0\n    ~~~~^~~~~~~~~~~~~~~~~~~~~~\n\
    \    "
  stdout: ''
  timestamp: 1659824640
- exit_code: -4
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    let fruits = s.split(separator: \" \")\n    let apples = Int(fruits[0])!\n\
    \    let oranges = Int(fruits[2])!\n    return n - apples - oranges\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fruit_distribution(s: \"5 apples and 6 oranges\"\
    , n: 19) == 8)\nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21)\
    \ == 10)\nassert(fruit_distribution(s: \"0 apples and 1 oranges\", n: 3) == 2)\n\
    assert(fruit_distribution(s: \"1 apples and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s:\
    \ \"2 apples and 3 oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"\
    2 apples and 3 oranges\", n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples\
    \ and 100 oranges\", n: 120) == 19)"
  status: Exception
  stderr: 'tmpybd6fg3_/tmpybd6fg3_.swift:19: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002b882f3cec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b882f0c5561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b882f0c5286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b882f0c513c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b882f0c4bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpybd6fg3_                        0x000055a3c316ceaa <unavailable> + 7850

    6    tmpybd6fg3_                        0x000055a3c316c5fb <unavailable> + 5627

    7    libc.so.6                          0x00002b882f5ba460 __libc_start_main +
    245

    8    tmpybd6fg3_                        0x000055a3c316c2f9 <unavailable> + 4857

    '
  stdout: ''
  timestamp: 1659824639
- exit_code: 1
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    let fruits = s.components(separatedBy: \" and \")\n    let apples\
    \ = Int(fruits[0].components(separatedBy: \" \")[0])!\n    let oranges = Int(fruits[1].components(separatedBy:\
    \ \" \")[0])!\n    return n - apples - oranges\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 19) == 8)\n\
    assert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21) == 10)\nassert(fruit_distribution(s:\
    \ \"0 apples and 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"1 apples\
    \ and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples and 3\
    \ oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\"\
    , n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples and 100 oranges\", n: 120)\
    \ == 19)"
  status: SyntaxError
  stderr: "/tmp/tmprln0hg_6.swift:17:20: error: value of type 'String' has no member\
    \ 'components'\n    let fruits = s.components(separatedBy: \" and \")\n      \
    \           ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824638
- exit_code: 0
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    // Write your code here\n    let s = s.split(separator: \" \"\
    )\n    let a = Int(s[0])!\n    let o = Int(s[3])!\n    return n - a - o\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fruit_distribution(s: \"5 apples and 6 oranges\"\
    , n: 19) == 8)\nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21)\
    \ == 10)\nassert(fruit_distribution(s: \"0 apples and 1 oranges\", n: 3) == 2)\n\
    assert(fruit_distribution(s: \"1 apples and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s:\
    \ \"2 apples and 3 oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"\
    2 apples and 3 oranges\", n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples\
    \ and 100 oranges\", n: 120) == 19)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824640
- exit_code: 1
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    var apples = 0\n    var oranges = 0\n    var mangoes = 0\n   \
    \ var sum = 0\n    var i = 0\n    var j = 0\n    var k = 0\n    var l = 0\n  \
    \  var m = 0\n    var n = 0\n    var o = 0\n    var p = 0\n    var q = 0\n   \
    \ var r = 0\n    var s = 0\n    var t = 0\n    var u = 0\n    var v = 0\n    var\
    \ w = 0\n    var x = 0\n    var y = 0\n    var z = 0\n    var a = 0\n    var b\
    \ = 0\n    var c = 0\n    var d = 0\n    var e = 0\n    var f = 0\n    var g =\
    \ 0\n    var h = 0\n    var ii = 0\n    var jj = 0\n    var kk = 0\n    var ll\
    \ = 0\n    var mm = 0\n    var nn = 0\n    var oo = 0\n    var pp = 0\n    var\
    \ qq = 0\n    var rr = 0\n    var ss = 0\n    var tt = 0\n    var uu = 0\n   \
    \ var vv = 0\n    var ww = 0\n    var xx = 0\n    var yy = 0\n    var zz = 0\n\
    \    var aa = 0\n    var bb = 0\n    var cc = 0\n    var dd = 0\n    var ee =\
    \ 0\n    var ff = 0\n    var gg = 0\n    var hh = 0\n    var iii = 0\n    var\
    \ jjj = 0\n    var kkk = 0\n    var lll = 0\n    var mmm = 0\n    var nnn = 0\n\
    \    var ooo = 0\n    var ppp = 0\n    var qqq = 0\n    var rrr = 0\n    var sss\
    \ = 0\n    var ttt = 0\n    var uuu = 0\n    var vvv = 0\n    var www = 0\n  \
    \  var xxx = 0\n    var yyy = 0\n    var zzz = 0\n    var aaaa = 0\n    var bbbb\
    \ = 0\n    var cccc = 0\n    var dddd = 0\n    var\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 19)\
    \ == 8)\nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21) == 10)\n\
    assert(fruit_distribution(s: \"0 apples and 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s:\
    \ \"1 apples and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"2 apples and\
    \ 3 oranges\", n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples and 100 oranges\"\
    , n: 120) == 19)"
  status: SyntaxError
  stderr: "/tmp/tmp1ttqa1u2.swift:95:8: error: expected pattern\n    var\n       ^\n\
    /tmp/tmp1ttqa1u2.swift:17:9: warning: initialization of variable 'apples' was\
    \ never used; consider replacing with assignment to '_' or removing it\n    var\
    \ apples = 0\n    ~~~~^~~~~~\n    _\n/tmp/tmp1ttqa1u2.swift:18:9: warning: initialization\
    \ of variable 'oranges' was never used; consider replacing with assignment to\
    \ '_' or removing it\n    var oranges = 0\n    ~~~~^~~~~~~\n    _\n/tmp/tmp1ttqa1u2.swift:19:9:\
    \ warning: initialization of variable 'mangoes' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var mangoes = 0\n    ~~~~^~~~~~~\n\
    \    _\n/tmp/tmp1ttqa1u2.swift:20:9: warning: initialization of variable 'sum'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var sum = 0\n    ~~~~^~~\n    _\n/tmp/tmp1ttqa1u2.swift:21:9: warning: initialization\
    \ of variable 'i' was never used; consider replacing with assignment to '_' or\
    \ removing it\n    var i = 0\n    ~~~~^\n    _\n/tmp/tmp1ttqa1u2.swift:22:9: warning:\
    \ initialization of variable 'j' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var j = 0\n    ~~~~^\n    _\n/tmp/tmp1ttqa1u2.swift:23:9:\
    \ warning: initialization of variable 'k' was never used; consider replacing with\
    \ assignment to '_' or removing it\n    var k = 0\n    ~~~~^\n    _\n/tmp/tmp1ttqa1u2.swift:24:9:\
    \ warning: initialization of variable 'l' was never used; consider replacing with\
    \ assignment to '_' or removing it\n    var l = 0\n    ~~~~^\n    _\n/tmp/tmp1ttqa1u2.swift:25:9:\
    \ warning: initialization of variable 'm' was never used; consider replacing with\
    \ assignment to '_' or removing it\n    var m = 0\n    ~~~~^\n    _\n/tmp/tmp1ttqa1u2.swift:26:9:\
    \ warning: initialization of variable 'n' was never used; consider replacing with\
    \ assignment to '_' or removing it\n    var n = 0\n    ~~~~^\n    _\n/tmp/tmp1ttqa1u2.swift:27:9:\
    \ warning: initialization of variable 'o' was never used; consider replacing with\
    \ assignment to '_' or removing it\n    var o = 0\n    ~~~~^\n    _\n/tmp/tmp1ttqa1u2.swift:28:9: "
  stdout: ''
  timestamp: 1659824639
- exit_code: 1
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    var mango = n\n    var apple = 0\n    var orange = 0\n    var\
    \ i = 0\n    while i < s.count {\n        if s[i] == \"a\" {\n            apple\
    \ = apple * 10 + Int(s[i + 1])!\n        } else if s[i] == \"o\" {\n         \
    \   orange = orange * 10 + Int(s[i + 1])!\n        }\n        i += 1\n    }\n\
    \    mango -= apple + orange\n    return mango\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 19) == 8)\n\
    assert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21) == 10)\nassert(fruit_distribution(s:\
    \ \"0 apples and 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"1 apples\
    \ and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples and 3\
    \ oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\"\
    , n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples and 100 oranges\", n: 120)\
    \ == 19)"
  status: SyntaxError
  stderr: "/tmp/tmpbygvf9cv.swift:22:12: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an Int, use a String.Index instead.\n        if s[i] ==\
    \ \"a\" {\n           ^~~~\nSwift.String:3:12: note: 'subscript(_:)' has been\
    \ explicitly marked unavailable here\n    public subscript(i: Int) -> Character\
    \ { get }\n           ^\n/tmp/tmpbygvf9cv.swift:23:39: error: no exact matches\
    \ in call to subscript \n            apple = apple * 10 + Int(s[i + 1])!\n   \
    \                                   ^\nSwift.String:3:12: note: candidate expects\
    \ value of type 'Range<String.Index>' for parameter #1 (got 'Int')\n    public\
    \ subscript(r: Range<String.Index>) -> Substring { get }\n           ^\nSwift.Collection:3:23:\
    \ note: candidate expects value of type '(UnboundedRange_) -> ()' for parameter\
    \ #1 (got 'Int')\n    @inlinable public subscript(x: (UnboundedRange_) -> ())\
    \ -> Self.SubSequence { get }\n                      ^\n/tmp/tmpbygvf9cv.swift:24:19:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n        } else if s[i] == \"o\" {\n           \
    \       ^~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked\
    \ unavailable here\n    public subscript(i: Int) -> Character { get }\n      \
    \     ^\n/tmp/tmpbygvf9cv.swift:25:41: error: no exact matches in call to subscript\
    \ \n            orange = orange * 10 + Int(s[i + 1])!\n                      \
    \                  ^\nSwift.String:3:12: note: candidate expects value of type\
    \ 'Range<String.Index>' for parameter #1 (got 'Int')\n    public subscript(r:\
    \ Range<String.Index>) -> Substring { get }\n           ^\nSwift.Collection:3:23:\
    \ note: candidate expects value of type '(UnboundedRange_) -> ()' for parameter\
    \ #1 (got 'Int')\n    @inlinable public subscript(x: (UnboundedRange_) -> ())\
    \ -> Self.SubSequence { get }\n                      ^\n"
  stdout: ''
  timestamp: 1659824640
- exit_code: -4
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    let fruits = s.split(separator: \" \")\n    let apples = Int(fruits[0])!\n\
    \    let oranges = Int(fruits[2])!\n    return n - apples - oranges\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fruit_distribution(s: \"5 apples and 6 oranges\"\
    , n: 19) == 8)\nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21)\
    \ == 10)\nassert(fruit_distribution(s: \"0 apples and 1 oranges\", n: 3) == 2)\n\
    assert(fruit_distribution(s: \"1 apples and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s:\
    \ \"2 apples and 3 oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"\
    2 apples and 3 oranges\", n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples\
    \ and 100 oranges\", n: 120) == 19)"
  status: Exception
  stderr: 'tmpybd6fg3_/tmpybd6fg3_.swift:19: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002b882f3cec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b882f0c5561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b882f0c5286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b882f0c513c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b882f0c4bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpybd6fg3_                        0x000055a3c316ceaa <unavailable> + 7850

    6    tmpybd6fg3_                        0x000055a3c316c5fb <unavailable> + 5627

    7    libc.so.6                          0x00002b882f5ba460 __libc_start_main +
    245

    8    tmpybd6fg3_                        0x000055a3c316c2f9 <unavailable> + 4857

    '
  stdout: ''
  timestamp: 1659824639
- exit_code: -4
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    let arr = s.split(separator: \" \")\n    let apples = Int(arr[0])!\n\
    \    let oranges = Int(arr[2])!\n    return n - apples - oranges\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fruit_distribution(s: \"5 apples and 6 oranges\"\
    , n: 19) == 8)\nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21)\
    \ == 10)\nassert(fruit_distribution(s: \"0 apples and 1 oranges\", n: 3) == 2)\n\
    assert(fruit_distribution(s: \"1 apples and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s:\
    \ \"2 apples and 3 oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"\
    2 apples and 3 oranges\", n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples\
    \ and 100 oranges\", n: 120) == 19)"
  status: Exception
  stderr: 'tmprd31g2wb/tmprd31g2wb.swift:19: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002afc720d9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afc71dd0561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002afc71dd0286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002afc71dd013c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002afc71dcfbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmprd31g2wb                        0x000055f789418eaa <unavailable> + 7850

    6    tmprd31g2wb                        0x000055f7894185fb <unavailable> + 5627

    7    libc.so.6                          0x00002afc722c5460 __libc_start_main +
    245

    8    tmprd31g2wb                        0x000055f7894182f9 <unavailable> + 4857

    '
  stdout: ''
  timestamp: 1659824639
- exit_code: -4
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    let arr = s.split(separator: \" \")\n    let num1 = Int(arr[0])!\n\
    \    let num2 = Int(arr[2])!\n    return n - num1 - num2\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 19)\
    \ == 8)\nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21) == 10)\n\
    assert(fruit_distribution(s: \"0 apples and 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s:\
    \ \"1 apples and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"2 apples and\
    \ 3 oranges\", n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples and 100 oranges\"\
    , n: 120) == 19)"
  status: Exception
  stderr: 'tmpifne_gv0/tmpifne_gv0.swift:19: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002afad4a52c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afad4749561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002afad4749286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002afad474913c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002afad4748bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpifne_gv0                        0x000056012dad3eaa <unavailable> + 7850

    6    tmpifne_gv0                        0x000056012dad35fb <unavailable> + 5627

    7    libc.so.6                          0x00002afad4c3e460 __libc_start_main +
    245

    8    tmpifne_gv0                        0x000056012dad32f9 <unavailable> + 4857

    '
  stdout: ''
  timestamp: 1659824640
