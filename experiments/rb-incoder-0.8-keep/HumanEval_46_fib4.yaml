name: HumanEval_46_fib4
language: rb
prompt: "# The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
  \ that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2) -> 2\n#\
  \ fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n# Please\
  \ write a function to efficiently compute the n-th element of the fib4 number sequence.\
  \  Do not use recursion.\n# >>> fib4(5)\n# 4\n# >>> fib4(6)\n# 8\n# >>> fib4(7)\n\
  # 14\ndef fib4(n)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib4\n\
  \    candidate = method(:fib4)\n    assert_equal(4, candidate.call(5))\n    assert_equal(28,\
  \ candidate.call(8))\n    assert_equal(104, candidate.call(10))\n    assert_equal(386,\
  \ candidate.call(12))\n  end\nend\n"
completions: ["  if n < 0 then\n    fib4(-n)\n  else\n    fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4)\n  end\nend\n</cell>\n<cell>", "\treturn fib4(n-1) + fib4(n-2)\
    \ + fib4(n-3) + fib4(n-4)\nfib4(5)\nfib4(6)\nfib4(7)\nfib4(10)\nfib4(15)\nfib4(30)\n\
    fib4(500)\nfib4(1000)\nfib4(2000)", "  if n == 0\n    fib4(0)\n  elsif n == 1\n\
    \    fib4(1)\n  elsif n == 2\n    fib4(2)\n  elsif n == 3\n    fib4(3)\n  elsif\
    \ n == 4\n    fib4(0)\n  else\n    fib4(fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4))\n\
    end", "  fib4_seq = [0, 1, 2, 0, 1, 2]\n  fib4_seq.each_with_index { |x, i| fib4_seq[i]\
    \ = fib4_seq[i - 1] + fib4_seq[i - 2] + fib4_seq[i - 3] + fib4_seq[i - 4] }\n\
    \  fib4_seq[n]\nend", "    arr = [0,0,0,0]\n    arr[n] = arr[n-1] + arr[n-2] +\
    \ arr[n-3] + arr[n-4]\n    return arr[n]\n</cell>\n<cell>", "  if n <= 0\n   \
    \ 0\n  else\n    fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\nend",
  "  fib4 = 0\n  if (n<=1)\n    fib4 = 0\n  elsif (n==2)\n    fib4 = 2\n  elsif (n==3)\n\
    \    fib4 = 0\n  elsif (n==4)\n    fib4 = 2\n  elsif (n>4)\n    fib4 = fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4)\n  end\n  return fib4\nend", "\tnumber =\
    \ 0\n\ti = 4\n\twhile i < n\n\t\tnumber += fib2(i-3)\n\t\ti += 1\n\tnumber\nend",
  "  if n < 0 or n > 4 then\n    print \"fib4 numbers are not in the expected range\"\
    \n    return 0\n  else\n    return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n\
    \  end\nend", "  puts \"fib4(#{n}) called\"\n  puts \"fib4(#{n}) = #{fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4)}\"\nend", "    n >= 0 and n <= 4\n    fib4_seq\
    \ = [0,1,2,3]\n    fib4_seq.push(n) while fib4_seq.length < n\n    fib4_seq.push(n-1)\n\
    \    fib4_seq.push(n-2)\n    fib4_seq.push(n-3)\n    fib4_seq.push(n-4)\n    fib4_seq.push(n-5)\n\
    \    return fib4_seq[n]\n    ", "  if n==0\n    0\n  elsif n==1\n    1\n  elsif\
    \ n==2\n    2\n  elsif n==3\n    0\n  elsif n==4\n    1\n  elsif n==5\n    2\n\
    \  elsif n==6\n    3\n  elsif n==7\n    0\n  elsif n==8\n    1\n  elsif n==9\n\
    \    2\n  elsif n==10\n    3\n  else\n    fib4(n-1) + fib4(n-2) + fib4(n-3) +\
    \ fib4(n-4) \n  end \nend", "  # Your code here\nend", "\treturn fib4_helper(n,0)\n\
    fib4_helper = lambda n,sum : 1 if n==0 else fib4_helper(n-1,sum+fib4_helper(n-2,sum))",
  "  if n == 0\n    fib4(0)\n  elsif n == 1\n    fib4(0)\n  elsif n == 2\n    fib4(2)\n\
    \  elsif n == 3\n    fib4(0)\n  else\n    fib4(n -1) + fib4(n -2) + fib4(n -3)\
    \ + fib4(n -4)\n  end\nend", "  n>0 && return fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4)\n  return 0\nend\n</cell>\n<cell>", "  Fib4.cache[n] || Fib4.cache[n]\
    \ = Fib4.fib4(n-1) + Fib4.fib4(n-2) + Fib4.fib4(n-3) + Fib4.fib4(n-4)\nend", '  return
    fib3(n) + fib2(n-1) + fib1(n-2) + fib0(n-3)', "  a, b = 0, 1\n  while n > 0\n\
    \    a, b = b, a + b\n    n -= 1\n  end\n  a\nend", "  return 0 if n == 0 else\
    \ fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\n  ", "  # Your code here\n\
    \  return(n)\n  ", "  return if n <= 0\n  fib4(n - 1) + fib4(n - 2) + fib4(n -\
    \ 3) + fib4(n - 4)\nend\n</cell>\n<code language=julia-1.3>", "  fibo = [0]\n\
    \  fibo[0] = fib0(fibo[0]) + 1\n  fibo[1] = fib0(fibo[1]) + 1\n  fibo[2] = fib0(fibo[2])\
    \ + 1\n  fibo[3] = fib0(fibo[3] + 1) + fib0(fibo[4] + 1) + fib0(fibo[5] + 1) +\
    \ fib0(fibo[6] + 1)\n  if n == 0 then return 0\n  if n == 1 then return fibo[0]\n\
    \  if n == 2 then return fibo[1]\n  if n == 3 then return fibo[2]\n  if n == 4\
    \ then return fibo[3]\n  if n == 5 then return fibo[4]\n  if n == 6 then return\
    \ fibo[5]\n  if n == 7 then return fibo[6]\n  if n == 8 then return fibo[7]\n\
    end", "  return 0 if n < 0 else fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n\
    \  ", "  (0..n)[-1..-1].inject(0) { |sum, i| sum + fib4(i + 1) }\nend\n</code>\n\
    As pointed out in the comments, this is an O(n) solution to the Fibonacci problem\
    \ (O(n) is the lower bound on the running time of your function).  While it's\
    \ easy to see that fib4 computes the Fibonacci sequence, it might not be obvious\
    \ how to prove it.  What you're looking for is the sum of the series F(n) = [0,\
    \ 1, 1, 2, 3, 5, 8, 13, 21, 34], which is equivalent to fib(n) - 1:\n<code>",
  "  case n\n    when 0\n      0\n    when 1\n      0\n    when 2\n      2\n    when\
    \ 3\n      0\n    else\n      fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    end", '    return fib4_ind(n) - fib4_ind(n - 1) + fib4_ind(n - 2) + fib4_ind(n
    - 3)', "    if n==0 or n==1 then\n       return n\n    end\n    return fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4)\nend\n</cell>\n<cell>", "\t\n\t# base case\n\
    \tif n == 0\n\t\t0\n\t\n\t# base case\n\tif n == 1\n\t\t0\n\t\n\t# base case\n\
    \tif n == 2\n\t\t2\n\t\n\t# base case\n\tif n == 3\n\t\t0\n\t\n\t# base case\n\
    \tif n == 4\n\t\t4\n\t\n\t# recursive case\n\telse # n >= 5\n\t\tfib4(n - 1) +\
    \ fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\n\t\t\nfib4(5)\nfib4(6)\nfib4(7)\nfib4(8)\n\
    fib4(9)\nfib4(10)\nfib4(11)\nfib4(12)\nfib4(13)\nfib4(14)\nfib4(15)\nfib4(16)\n\
    fib4(17)\nfib4(18)\nfib4(19)\nfib4(20)\nfib4(21)\nfib4(22)\nfib4(23)\nfib4(24)\n\
    fib4(25)\nfib4(26)\nfib4(27)\nfib4(28)\nfib4(29)\nfib4(30)\nfib4(31)\nfib4(32)\n\
    fib4(33)\nfib4(34)\nfib4(35)\nfib4(36)\nfib4(37)\nfib4(38)\nfib4(39)\nfib4(40)\n\
    fib4(41)\nfib4(42)\nfib4(43)\nfib4(44)\nfib4(45)\nfib4(46)\nfib4(47)\nfib4(48)\n\
    fib4(49)\nfib4(50)\nfib4(51)\nfib4(52)\nfib4(53)\nfib4(54)\nfib4(55)\nfib4(56)\n\
    fib4(57)\nfib4(58)\nfib4(59)\nfib4(60)\nfib4(61)\nfib4(62)\nfib4(63)\nfib4(64)\n\
    fib4(65)\nfib4(66)\nfib4(67)\nfib4(68)\nfib4(69)\nfib4(70)\nfib4(71)\nfib4(72)\n\
    fib4(73)\nfib4(74)\nfib4(75)\nfib4(76)\nfib4(77)\nfib4(78)\nfib4(79)\nfib4(80)\n\
    fib4(81)\nfib4(82)\nfib4(83)\nfib4(84)\nfib4(85)\nfib4(86)\nfib4(87)\nfib4(88)\n\
    fib4(89)\nfib4(90)\nfib4(91)\nfib4(92)\nfib4(9", "  result = 0\n  if n == 0\n\
    \    return 0\n  if n == 1\n    return 0\n  if n == 2\n    return 2\n  if n ==\
    \ 3\n    return 0\n  if n == 4\n    return 0\n  result = fib4(n - 1) + fib4(n\
    \ - 2) + fib4(n - 3) + fib4(n - 4)\n  return result\n</cell>\n<cell>", "  fib\
    \ = 0.upto(n-1) do |fib|\n    fib += 1\n  end\n  fib\nend\n</code>\n<|/ a tags=ruby\
    \ dscore=0 |>\n<| a tags=ruby |>\n<code>", "  if(n==0)\n    0\n  elsif(n==1)\n\
    \    1\n  elsif(n==2)\n    2\n  elsif(n==3)\n    0\n  elsif(n==4)\n    0\n  elsif(n==5)\n\
    \    1\n  elsif(n==6)\n    2\n  elsif(n==7)\n    0\n  elsif(n==8)\n    0\n  else\n\
    \    fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n  end\nend\n</cell>\n<code\
    \ language=julia-1.0>", "  # Write your code here.\nend", "  \n  return fib(n\
    \ - 1) + fib(n - 2) + fib(n - 3) + fib(n - 4)\n  ", "  fib4_list = []\n  fib4_list.push\
    \ 0\n  fib4_list.push 0\n  fib4_list.push 2\n  fib4_list.push 0\n  fib4_list.push\
    \ fib4_list[-3] + fib4_list[-2] + fib4_list[-1] + fib4_list[-4]\n  fib4_list.push\
    \ fib4_list[-3] + fib4_list[-2] + fib4_list[-1] + fib4_list[-4]\n  fib4_list.push\
    \ fib4_list[-3] + fib4_list[-2] + fib4_list[-1] + fib4_list[-4]\n  fib4_list.push\
    \ fib4_list[-3] + fib4_list[-2] + fib4_list[-1] + fib4_list[-4]\n  return fib4_list[n]\n\
    end", "  a = b = fib3(n - 1)\n  c = fib2(n - 3)\n  d = fib3(n - 4)\n  return a\
    \ + b + c + d\nend", "  sum = 0\n  if n == 0\n    sum = 0\n  elsif n == 1\n  \
    \  sum = 1\n  elsif n == 2\n    sum = 0\n  elsif n == 3\n    sum = 1\n  elsif\
    \ n == 4\n    sum = 2\n  elsif n > 4\n    sum = fib4(n - 1) + fib4(n - 2) + fib4(n\
    \ - 3) + fib4(n - 4)\n  end\n  sum\nend", "  if n <= 1\n    0\n  else\n    fib4(n\
    \ - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\n  end\nend", "  return if n\
    \ <= 0\n  fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\nend\n</cell>\n<text>\n\
    Problem 8", "  if n == 0\n    0\n  else if n == 1\n    1\n  else if n == 2\n \
    \   2\n  else if n == 3\n    0\n  else if n == 4\n    4\n  else\n    fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4)", "  fib4 = 0\n  if n > 0\n    fib4 = (fib4\
    \ * (n-1))+fib4(n-2) + fib4(n-3) + fib4(n-4)\n  end\n  return fib4\nend\n</cell>\n\
    <code language=julia-1.6>", "  if n <= 0\n    0\n  elsif n = 1\n    1\n  elsif\
    \ n = 2\n    2\n  elsif n = 3\n    0\n  elsif n < 4\n    fib4(n - 1) + fib4(n\
    \ - 2) + fib4(n - 3) + fib4(n - 4)\n  else\n    fib4(n - 1) + fib4(n - 2) + fib4(n\
    \ - 3) + fib4(n - 4)\nend\n</cell>\n<code language=julia-1.2>", "    if n == 0\n\
    \        return 0\n    elif n == 1\n        return 1\n    elif n == 2\n      \
    \  return 2\n    elif n == 3\n        return 0\n    else:\n        return fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4)", "  fib5 = if n <= 0\n    puts \"fib4 requires\
    \ n >= 0\"\n    puts \"fib4(0) = fib4(1) = 0\"\n    puts \"fib4(%d) = fib4(%d)\
    \ + fib4(%d) = fib4(%d) + fib4(%d)\"\n    0\n  else\n    fib5 + fib4(n - 2) +\
    \ fib4(n - 1) + fib4(n - 3)\n  end\n  puts \"fib4(%d) = fib4(%d) + fib4(%d) =\
    \ fib4(%d) + fib4(%d)\"\n  fib5\nend\nfib4(5)\nfib4(6)\nfib4(7)", "\tfib4 = 0\n\
    \tif n==0\n\t\tfib4 = 0\n\telsif n==1\n\t\tfib4 = 0\n\telsif n==2\n\t\tfib2 =\
    \ 2\n\t\tfib4 = 1\n\telsif n==3\n\t\tfib4 = 0\n\telsif n==4\n\t\tfib4 = 0\n\t\
    else\n\t\tfib4 = fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n\tend\n\treturn\
    \ fib4\nend", "  if n < 4\n    return 0\n  if n < 9\n    return n\n  return fib4(n\
    \ - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\nfib4(6)\n</cell>\n<text>\nExercises\n\
    1. Write a function called powers of which takes an integer as an input and returns\
    \ a list of powers of that integer. For example, if an input is 2, it should return\
    \ [2,4,8,16,32,64,128]", "  if n < 0\n    puts \"fib4(#{n}) should return an Integer\"\
    \n    return\n  end", "  puts \"fib4(#{n})\"\nend", "    # Fill this in.\nend",
  "  a, b = 0, 1\n  while n > 0\n    a, b = b, a+b\n    n -= 1\n  end\n  a\nend",
  "  n\nend", "    a, b = 0, 1\n    while a < n\n        a, b = b, a + b\n    end\n\
    \    b\nend\n</cell>\n<text>\nExercise 2\nUsing the function fib4, write a function\
    \ which computes the n-th element of the Fibbonacci sequence using recursion.\
    \  You may not use fib4 directly in your code.", "  if n == 0\n    0\n  elsif\
    \ n == 1\n    1\n  elsif n == 2\n    2\n  elsif n == 3\n    0\n  elsif n == 4\n\
    \    2\n  elsif n == 5\n    3\n  elsif n == 6\n    0\n  elsif n == 7\n    3\n\
    \  elsif n == 8\n    6\n  elsif n == 9\n    8\n  elsif n == 10\n    11\n  elsif\
    \ n == 11\n    9\n  elsif n == 12\n    12\n  elsif n == 13\n    15\n  elsif n\
    \ == 14\n    13\n  elsif n == 15\n    14\n  elsif n == 16\n    16\n  elsif n ==\
    \ 17\n    23\n  elsif n == 18\n    19\n  elsif n == 19\n    18\n  elsif n == 20\n\
    \    20\n  elsif n == 21\n    24\n  elsif n == 22\n    28\n  elsif n == 23\n \
    \   24\n  elsif n == 24\n    21\n  elsif n == 25\n    35\n  elsif n == 26\n  \
    \  30\n  elsif n == 27\n    35\n  elsif n == 28\n    30\n  elsif n == 29\n   \
    \ 35\n  elsif n == 30\n    35\n  elsif n == 31\n    55\n  elsif n == 32\n    50\n\
    \  elsif n == 33\n    55\n  elsif n == 34\n    50\n  elsif n == 35\n    55\n \
    \ elsif n == 36\n    90\n  elsif n == 37\n    90\n  elsif n == 38\n    90\n  elsif\
    \ n == 39\n    90\n  elsif n == 40\n    100\n  elsif n == 41\n    100\n  elsif\
    \ n == 42\n    100\n  elsif n == 43\n    100\n  elsif n == 44\n    100\n  elsif\
    \ n == 45\n    100\n  elsif n == 46\n    100\n  elsif n == 47\n    100\n  elsif\
    \ n == 48\n    100\n  elsif n == 49\n    100\n  elsif n == 50\n    100\n  elsif\
    \ n == 51\n    100", "    # YOUR CODE HERE\n    fib = 0\n    if n <= 3:\n    \
    \    fib = 0\n    elif n > 3:\n        fib = 1\n        for i in range(3,n+1):\n\
    \            fib += fib\n    return fib", "  fib4.cache = fib4.cache || [[0] *\
    \ (n+1)]\n  return fib4.cache[n][n]\nend\nfib4.cache = {}", "\treturn 0 if n <\
    \ 2 else fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n</cell>\n<cell>", "  if\
    \ n==0 then return 0\n  if n==1 then return 0\n  if n==2 then return 2\n  if n==3\
    \ then return 0\n  if n==4 then return 4\n  else return fib4(n-1) + fib4(n-2)\
    \ + fib4(n-3) + fib4(n-4)\nend", "    if n<=0\n        0\n    else\n        n*fib4(n-1)+fib4(n-2)+fib4(n-3)+fib4(n-4)\n\
    end\n</cell>\n<cell>", "  # Your code here\nend", "  if n<0\n    return 0\n  elif\
    \ n==0\n    return 0\n  elif n==1\n    return 1\n  else\n    return fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4) + fib4(n-5)\n</cell>\n<text>\nPart 2: Arithmetic\
    \ Operations\nFor this problem set, we will focus on one operation called \"Arithmetic\
    \ operations.\"", "  fib4_list = [0, 2, 1]\n  fib4_list_size = 3\n  fib4_list_index\
    \ = 0", "    return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4) \n</cell>\n\
    <cell>", "  return if n < 0 then nil else fib4(n-1) + fib4(n-2) + fib4(n-3) +\
    \ fib4(n-4)\nend\nputs fib4(4) # 4", "\ta = 1\n\tb = 1\n\tc = 1\n\td = 1\n\t\n\
    \tif n < 4\n\t\treturn n\n\t\n\ta = fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n\
    \tb = a + fib4(n-1)\n\tc = b + fib4(n-2)\n\td = c + fib4(n-3)\n\t\n\treturn d",
  "  if n <= 0\n    n\n  else\n    fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n\
    \ - 4)\n  end\nend", end, "    sum = fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n\
    \    if n == 4 then\n        sum\n    else\n        sum\n    end\nend", "    #\
    \ Your code here\n    if n==0\n        return 0\n    elif n==1\n        return\
    \ 0\n    elif n==2\n        return 2\n    elif n==3\n        return 0\n    elif\
    \ n==4\n        return 8\n    elif n==5\n        return 14\n    elif n==6\n  \
    \      return 24\n    elif n==7\n        return 34\n    elif n==8\n        return\
    \ 56\n    elif n==9\n        return 78\n    elif n==10\n        return 10\n  \
    \  elif n==11\n        return 18\n    elif n==12\n        return 28\n    elif\
    \ n==13\n        return 42\n    elif n==14\n        return 62\n    elif n==15\n\
    \        return 90\n    elif n==16\n        return 120\n    elif n==17\n     \
    \   return 144\n    elif n==18\n        return 168\n    elif n==19\n        return\
    \ 200\n    elif n==20\n        return 224\n    elif n==21\n        return 256\n\
    \    elif n==22\n        return 288\n    elif n==23\n        return 320\n    elif\
    \ n==24\n        return 352\n    elif n==25\n        return 384\n    elif n==26\n\
    \        return 416\n    elif n==27\n        return 448\n    elif n==28\n    \
    \    return 480\n    elif n==29\n        return 512\n    elif n==30\n        return\
    \ 544\n    elif n==31\n        return 576\n    elif n==32\n        return 608\n\
    \    elif n==33\n        return 640\n    elif n==34\n        return 672\n    elif\
    \ n==35\n        return 704\n    elif n==36\n        return 736\n    elif n==37\n\
    \        return 768\n    elif n==38\n        return 800\n    elif n==39\n    \
    \    return 832\n    elif n==40\n        return 864\n    elif n==41\n        return\
    \ 896\n    elif n==42\n        return 928\n    elif n==43\n        return 960\n\
    \    elif n==44\n        return 992\n    elif n==45\n        return 1024\n   \
    \ elif n==46\n        return 1056\n    elif n==47\n        return 1088\n    elif\
    \ n==48\n        return 1120\n    elif n==49\n        return 1152\n    elif n==50\n\
    \        return 1184\n    elif n==51\n        return 1216\n    elif n==52\n  \
    \      return 1248\n    elif n==53\n        return 1280\n    elif n==54\n    \
    \    return 1312\n    elif n==55\n        return 1344\n    elif n==56\n      \
    \  return 1376\n    elif n==57\n        return 1408\n    elif n==58\n        return\
    \ 1440\n    elif n==59\n        return 1472\n    elif n==60\n        return ",
  "  count = 0\n  while n != 0\n    count += 1\n    n -= 1\n  end\n  return count\n\
    end", "\ta, b = 0, 1\n\twhile n != 0\n\t\tputs n\n\t\ta, b = b, a + b\n\t\tn =\
    \ n-1\n\tend\n\ta\nend", "  if n == 0 or n == 1\n  else\n    fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4) + fib4(n-5)\n  end\nend", '    return n if n < 4 and n<10 else fib4(n
    - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)', "  n\nend", "  \n  return 0 if\
    \ (n == 0 || n == 1) \n  \n  return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) +\
    \ fib4(n - 4) + fib4(n - 5)\n  # return fib4(n - 1) + ((n - 2) * (fib4(n - 2)\
    \ + ((n - 3) * (fib4(n - 3) + ((n - 4) * (fib4(n - 4)))))))\nend\n</cell>\n<cell>",
  "  if n == 0\n    0\n  else \n    fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n\
    \ - 4)\nfib4(6)\nfib4(7)\nfib4(8)\nfib4(9)\nfib4(10)\nfib4(11)\nfib4(12)\nfib4(13)\n\
    fib4(14)\nfib4(15)\nfib4(16)\nfib4(17)\nfib4(18)\nfib4(19)\nfib4(20)\nfib4(21)\n\
    fib4(22)\nfib4(23)\nfib4(24)\nfib4(25)\nfib4(26)\nfib4(27)\nfib4(28)\nfib4(29)\n\
    fib4(30)\nfib4(31)\nfib4(32)\nfib4(33)\nfib4(34)\nfib4(35)\nfib4(36)\nfib4(37)\n\
    fib4(38)\nfib4(39)\nfib4(40)\nfib4(41)\nfib4(42)\nfib4(43)\nfib4(44)\nfib4(45)\n\
    fib4(46)\nfib4(47)\nfib4(48)\nfib4(49)\nfib4(50)\nfib4(51)\nfib4(52)\nfib4(53)\n\
    fib4(54)\nfib4(55)\nfib4(56)\nfib4(57)\nfib4(58)\nfib4(59)\nfib4(60)\nfib4(61)\n\
    fib4(62)\nfib4(63)\nfib4(64)\nfib4(65)\nfib4(66)\nfib4(67)\nfib4(68)\nfib4(69)\n\
    fib4(70)\nfib4(71)\nfib4(72)\nfib4(73)\nfib4(74)\nfib4(75)\nfib4(76)\nfib4(77)\n\
    fib4(78)\nfib4(79)\nfib4(80)\nfib4(81)\nfib4(82)\nfib4(83)\nfib4(84)\nfib4(85)\n\
    fib4(86)\nfib4(87)\nfib4(88)\nfib4(89)\nfib4(90)\nfib4(91)\nfib4(92)\nfib4(93)\n\
    fib4(94)\nfib4(95)\nfib4(96)\nfib4(97)\nfib4(98)\nfib4(99)\nfib4(100)\nfib4(101)\n\
    fib4(102)\nfib4(103)\nfib4(104)\nfib4(105)\nfib4(106)\nfib4(107)\nfib4(108)\n",
  "  a = 0\n  b = 4\n  while b < n\n    a, b = b, a + b\n  end\n  return a\nend",
  "  raise NotImplementedError\nend", "  return 0 if n <= 4 or n == 0 else fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4)\n</code>\nAnd here is the Fibonacci sequnece\
    \ in Ruby:\n<code>", "  if n == 0 then 0\n  if n == 1 then 1\n  if n == 2 then\
    \ 2\n  if n == 3 then 0\n  return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n\
    \ - 4)\nend", "  (n<=1)?0:fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\nend\n\
    fib4(6)", "    if n == 0 then\n        return 0\n    elif n == 1 then\n      \
    \  return 1\n    elif n == 2 then\n        return 2\n    elif n == 3 then\n  \
    \      return 0\n    else\n        return fib4(n-1) + fib4(n-2) + fib4(n-3) +\
    \ fib4(n-4)\nend", "  if n < 0 \n  then\n    fib4(-1)\n  else\n    fib4(n | 0)\
    \ + fib4(n | 1) + fib4(n | 2) + fib4(n | 3)\n  end\nend", "  a = 0\n  b = 1\n\
    \  while n > 0\n    a,b = b,a+b\n    n = n - 1\n  end\n  return a\nend", "  if\
    \ n < 0\n    -1\n  elsif n > 0\n    fib4(n - 1) + fib4(n - 2) + fib4(n - 3) +\
    \ fib4(n - 4)\n  else\n    0\n  end\nend", "  result = 1\n  for i in 0...n\n \
    \   result *= i\n    result += 1\n  end\n  result\nend", "  if n <= 0\n    n =\
    \ 0\n  else\n    fib4 = fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\n\
    \  end\n  return fib4\nend", "    fib4 = (0) + (1) + (2) + (0) + (1) + (2) + (0)\
    \ + (1) + (2) + (0) + (1) + (2) + (0) + (1) + (2)\n    if n<fib4\n        return\
    \ fib4\n    else \n        return fib4[n-1] + fib4[n-2] + fib4[n-3] + fib4[n-4]\n\
    </cell>\n<text>\nTesting the code you wrote in the Fibbonacci sequence\nThe fibbonacci\
    \ sequence begins with 1, 2, and 3, and each subsequent element is the sum of\
    \ the last two elements. For example, as 1, we get 1 as our first element. As\
    \ 2, we get 2 as our first element + 1 as our second element. As 3, we get 3 as\
    \ our first element + 2 as our second element + 1 as our third element. Hence,\
    \ fibbonacci sequence begins with 1, 2, 3 and each subsequent number is the sum\
    \ of the preceding two.", "\tif n <= 0\n\t\traise StandardError, 'fib4 takes one\
    \ argument'\n\telse\n\t\tfib4 = fib3(n - 4) + fib3(n - 3) + fib3(n - 2) + fib3(n\
    \ - 1)\n\treturn\nend", "  puts \"fib4\"\n  case n\n  when 0\n    0\n  when 1\n\
    \    0\n  when 2\n    2\n  when 3\n    0\n  when 4\n    fib4(4-1) + fib4(4-2)\
    \ + fib4(4-3) + fib4(4-4) + fib4(4)\n  end\nend", "  case\n    when n <= 2 then\
    \ n\n    when n <= 3 then 0\n    when n <= 4 then n\n    else fib4(n - 1) + fib4(n\
    \ - 2) + fib4(n - 3) + fib4(n - 4)\n  end\nend", "    if n < 0\n        return\
    \ -1\n    if n == 0\n        return 0\n    if n == 1\n        return 1\n    return\
    \ fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)", "  if n==0 or n==1 or\
    \ n==2 or n==3 or n==4 then\n    return n\n  else\n    fib4(fibo(n-1))+fib4(fibo(n-2))+fib4(fibo(n-3))+fib4(fibo(n-4))\n\
    \  end\nend\nfib4(5)\nfib4(6)\nfib4(7)\nfib4(8)\nfib4(9)\nfib4(10)\nfib4(11)\n\
    fib4(12)\nfib4(13)\nfib4(14)\nfib4(15)\nfib4(16)\nfib4(17)\nfib4(18)\nfib4(19)\n\
    fib4(20)\nfib4(21)\nfib4(22)\nfib4(23)\nfib4(24)\nfib4(25)\nfib4(26)\nfib4(27)\n\
    fib4(28)\nfib4(29)\nfib4(30)\nfib4(31)\nfib4(32)\nfib4(33)\nfib4(34)\nfib4(35)\n\
    fib4(36)\nfib4(37)\nfib4(38)\nfib4(39)\nfib4(40)\nfib4(41)\nfib4(42)\nfib4(43)\n\
    fib4(44)\nfib4(45)\nfib4(46)\nfib4(47)\nfib4(48)\nfib4(49)\nfib4(50)\nfib4(51)\n\
    fib4(52)\nfib4(53)\nfib4(54)\nfib4(55)\nfib4(56)\nfib4(57)\nfib4(58)\nfib4(59)\n\
    fib4(60)\nfib4(61)\nfib4(62)\nfib4(63)\nfib4(64)\nfib4(65)\nfib4(66)\nfib4(67)\n\
    fib4(68)\nfib4(69)\nfib4(70)\nfib4(71)\nfib4(72)\nfib4(73)\nfib4(74)\nfib4(75)\n\
    fib4(76)\nfib4(77)\nfib4(78)\nfib4(79)\nfib4(80)\nfib4(81)\nfib4(82)\nfib4(83)\n\
    fib4(84)\nfib4(85)\nfib4(86)\nfib4(87)\nfib4(88)\nfib4(89)\nfib4(90)\nfib4(91)\n\
    fib4(92)\nfib4(93)\nfib4(94)\nfib4(95)\nfib4(96)\nfib4(97)\nfib4(98)\nfib4(99)\n\
    fib4(100)\nfib4(", "  a,b = 0, 1\n  if n == 0 then a\n  else if n == 1 then b\n\
    \  else fib4(n-2) + fib4(n-3) + fib4(n-4) + fib4(n-5)\nend", "  a,b,c,d = 0,1,1,0\n\
    \  while n > 0\n    a,b,c,d = b,c,d,a+b+c+d+a+b+c+d\n    n -= 1\n  return a\n\
    </cell>\n<text>\nWrite a function that generates the Fibonacci numbers for numbers\
    \ up to 1,000,000 and for numbers up to 1,000,000,000\n(Hint - you can use a while\
    \ loop and the modulo operator to solve this problem)", "    puts \"fib4(#{n})\
    \ called\"\n    if n <= 0\n       return 0\n    else \n       return fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4)\n    end\nend\nfib4(5)", "  case n\n  when\
    \ 0 then 0\n  when 1 then 0\n  when 2 then 2\n  when 3 then 0\n  else fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4)\n  end\nend\nputs fib4(5) # 4\nputs fib4(6)\
    \ # 8\nputs fib4(7) # 14\n</cell>\n<cell>", "  fib4 = Fib4.new(:start => 0, :stop\
    \ => 4, :step => 1)\n  fib4.to_a[n-1]\nend\nFib4.new\n</cell>\n<cell>", "  return\
    \ n == 0 ? 0 : n == 1 ? 1 : fib4(n-2) + fib4(n-3)\nend\n</cell>\n<code language=julia-1.5>\n\
    @time fib4(1)\n</cell>\n<code language=julia-1.5>\n@time fib4(10)\n</cell>\n<code\
    \ language=julia-1.5>\n@time fib4(100)\n</cell>\n<code language=julia-1.5>\n@time\
    \ fib4(1000)\n</cell>\n<code language=julia-1.5>\n@time fib4(10000)\n</cell>\n\
    <code language=julia-1.5>\n@time fib4(100000)\n</cell>\n<code language=julia-1.5>\n\
    @time fib4(1000000)\n</cell>\n<code language=julia-1.5>\n@time fib4(10000000)\n\
    </cell>\n<code language=julia-1.5>\n@time fib4(100000000)\n</cell>\n<code language=julia-1.5>\n\
    @time fib4(1000000000)\n</cell>\n<code language=julia-1.5>\n@time fib4(10000000000)\n\
    </cell>\n<code language=julia-1.5>\n@time fib4(100000000000)\n</cell>\n<code language=julia-1.5>\n\
    @time fib4(1000000000000)\n</cell>\n<code language=julia-1.5>\n@time fib4(10000000000000)\n\
    </cell>\n<code language=julia-1.5>\n@time fib4(100000000000000)\n</cell>\n<code\
    \ language=julia-1.5>\n@time fib4(1000000000000000)\n</cell>\n<code language=julia-1.5>\n\
    @time fib4(10000000000000000)\n</cell>\n<code language=julia-1.5>\n@time fib4(100000000000000000)\n\
    </cell>\n<code language=julia-1.5>\n@time fib4(1000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\n@time fib4(10000000000000000000)\n</cell>\n<code language=julia-1.5>\n\
    @time fib4(100000000000000000000)\n</cell>\n<code language=julia-1.5>\n@time fib4(1000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\n@time fib4(10000000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\n@time fib4(100000000000000000000000)\n</cell>\n<code\
    \ language=julia-1.5>\n@time fib4(1000000000000000000000000)\n</cell>\n<code language=julia-1.5>\n\
    @time fib4(10000000000000000000000000)\n</cell>\n<code language=julia-1.5>\n@time\
    \ fib4(100000000000000000000000000)\n</cell>\n<code language=julia-1.5>", "  if\
    \ n <= 2\n    return 0\n  else\n    fib4 = fib4(n - 1) + fib4(n - 2) + fib4(n\
    \ - 3) + fib4(n - 4)\n  end\nend", "    if n <= 4\n        return n\n    elsif(n-4\
    \ < 0)\n        return 0\n    else\n        return fib4(n-4) + fib4(n-3) + fib4(n-2)\
    \ + fib4(n-1)", "  i = 1\n  while i <= n\n    i = i * 4\n  return\nend", "  fib4.memo[n]\
    \ = fib4.memo[n-1] + fib4.memo[n-2] + fib4.memo[n-3] +fib4.memo[n-4]\n  return\
    \ fib4.memo[n]\nfib4.memo = [1,0,0,1]\nfib4(5)\nfib4(6)\nfib4(7)\nfib4(8)\nfib4(9)\n\
    fib4(10)\nfib4(11)\nfib4(12)\nfib4(13)\nfib4(14)\nfib4(15)\nfib4(16)\nfib4(17)\n\
    fib4(18)\nfib4(19)\nfib4(20)\nfib4(21)\nfib4(22)\nfib4(23)\nfib4(24)\nfib4(25)\n\
    fib4(26)\nfib4(27)\nfib4(28)\nfib4(29)\nfib4(30)\nfib4(31)\nfib4(32)\nfib4(33)\n\
    fib4(34)\nfib4(35)\nfib4(36)\nfib4(37)\nfib4(38)\nfib4(39)\nfib4(40)\nfib4(41)\n\
    fib4(42)\nfib4(43)\nfib4(44)\nfib4(45)\nfib4(46)\nfib4(47)\nfib4(48)\nfib4(49)\n\
    fib4(50)\nfib4(51)\nfib4(52)\nfib4(53)\nfib4(54)\nfib4(55)\nfib4(56)\nfib4(57)\n\
    fib4(58)\nfib4(59)\nfib4(60)\nfib4(61)\nfib4(62)\nfib4(63)\nfib4(64)\nfib4(65)\n\
    fib4(66)\nfib4(67)\nfib4(68)\nfib4(69)\nfib4(70)\nfib4(71)\nfib4(72)\nfib4(73)\n\
    fib4(74)\nfib4(75)\nfib4(76)\nfib4(77)\nfib4(78)\nfib4(79)\nfib4(80)\nfib4(81)\n\
    fib4(82)\nfib4(83)\nfib4(84)\nfib4(85)\nfib4(86)\nfib4(87)\nfib4(88)\nfib4(89)\n\
    fib4(90)\nfib4(91)\nfib4(92)\nfib4(93)\nfib4(94)\nfib4(95)\nfib4(96)\nfib4(97)\n\
    fib4(98)\nfib4(99)\nfib4(100)\nfib4(101)\nfib4(102)\nfib4(103)\nfib", "  a, b\
    \ = 0, 1\n  while n > 0\n    a, b = b, a + b\n    n -= 1\n  end\n  a\nend", "\t\
    a = b = 1\n\twhile a < n\n\t\ta, b = b, a + b\n\tend\n\treturn b\nend\n</cell>\n\
    <code language=julia-0.4>", "  if(n == 0)\n    0\n  elsif(n == 1)\n    1\n  elsif(n\
    \ == 2)\n    2\n  elsif(n == 3)\n    3\n  else\n    n * fib4(n - 2) + fib4(n -\
    \ 3) + fib4(n - 4)\nend\n</cell>\n<cell>", "  memo = {}\n  fib4(n) = memo[n] if\
    \ memo[n] else memo[n] = fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4) if n <=\
    \ 4 else fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n  memo\nend\nfib4(5)\n\
    fib4(6)\nfib4(7)", "  if n < 0\n    raise(ArgumentError, 'fib4 expects an integer\
    \ >= 0.')\n  else\n    return fib4_aux(0, n, 1)", "  fib4 = n\n  until fib4 <=\
    \ 4\n    fib4 = fib4 - 1\n  end\n  return fib4\nend", "  if n <= 0\n    0\n  elsif\
    \ n <= 4\n    0\n  elsif n > 4\n    fib4(n - 4) + fib4(n - 3) + fib4(n - 2) +\
    \ fib4(n - 1)\n  else\n    fib4(n - 4) + fib4(n - 3) + fib4(n - 2) + fib4(n -\
    \ 1)\nend\nfib4(4)\n</cell>\n<text>\nFibonacci number - Problem 5\nWrite a function\
    \ that takes in 1 parameter, the number $n$, and returns the $n$th fibonacci number.",
  "  case n when 0..0 then 0\n  when 0..1 then 0\n  when 0..2 then 2\n  when 0..3\
    \ then 0\n  else fib4(4) + fib4(5) + fib4(6) + fib4(7) + fib4(8)\nend", "  if\
    \ n < 4\n    return n\n  else\n    return fib4(n - 1) + fib4(n - 2) + fib4(n -\
    \ 3) + fib4(n - 4)", "    # base case\n    if n <= 0\n        return 0\n    \n\
    \    # recursive case\n    fib4_rec(n, 4, 0, 1)", "  return 0 if n == 0 else (fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4))\nend", "  case n < 4\n  then return n\n\
    \  else return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4) end\nend\n</cell>\n\
    <text>\nThe fibbonacci numbers grow quickly and the fibbonacci sequences become\
    \ quite interesting.  The Fibonacci numbers grow very quickly and grow to infinity.\
    \  You can see this fact by calculating the nth Fibonacci number for various values\
    \ of n.  As n grows to infinity, the Fibonacci number sequence converges.", " \
    \ if n == 0\n    fib4_seq[0]\n  elsif n == 1\n    fib4_seq[1]\n  elsif n == 2\n\
    \    fib4_seq[2]\n  elsif n == 3\n    fib4_seq[3]\n  elsif n == 4\n    fib4_seq[4]\n\
    \  elsif n == 5\n    fib4_seq[4]\n  elsif n == 6\n    fib4_seq[5]\n  elsif n ==\
    \ 7\n    fib4_seq[6]\n  elsif n == 8\n    fib4_seq[6]\n  elsif n == 9\n    fib4_seq[7]\n\
    \  elsif n == 10\n    fib4_seq[7]\n  elsif n == 11\n    fib4_seq[8]\n  elsif n\
    \ == 12\n    fib4_seq[9]\n  elsif n == 13\n    fib4_seq[10]\n  elsif n == 14\n\
    \    fib4_seq[10]\n  elsif n == 15\n    fib4_seq[11]\n  elsif n == 16\n    fib4_seq[12]\n\
    \  elsif n == 17\n    fib4_seq[13]\n  elsif n == 18\n    fib4_seq[14]\n  elsif\
    \ n == 19\n    fib4_seq[15]\n  elsif n == 20\n    fib4_seq[16]\n  elsif n == 21\n\
    \    fib4_seq[17]\n  elsif n == 22\n    fib4_seq[18]\n  elsif n == 23\n    fib4_seq[19]\n\
    \  elsif n == 24\n    fib4_seq[20]\n  elsif n == 25\n    fib4_seq[21]\n  elsif\
    \ n == 26\n    fib4_seq[22]\n  elsif n == 27\n    fib4_seq[23]\n  elsif n == 28\n\
    \    fib4_seq[24]\n  elsif n == 29\n    fib4_seq[25]\n  elsif n == 30\n    fib4_seq[26]\n\
    \  elsif n == 31\n    fib4_seq[27]\n  elsif n == 32\n    fib4_seq[28]\n  elsif\
    \ n == 33\n    fib4_seq[29]\n  elsif n == 34\n    fib4_seq[30]\n  elsif n == 35\n\
    \    fib4_seq[31]\n  ", "  if n<0\n    puts \"fib4 numbers only defined for n\
    \ >= 0\"\n    return -1\n  fib4 = 1\n  fib5 = fib4\n  fib6 = fib4\n  fib7 = fib4\n\
    \  fib8 = fib4\n  fib9 = fib4\n  fib10 = fib4\n  fib11 = fib4\n  fib12 = fib4\n\
    \  fib13 = fib4\n  fib14 = fib4\n  fib15 = fib4\n  fib16 = fib4\n  fib17 = fib4\n\
    \  fib18 = fib4\n  fib19 = fib4\n  fib20 = fib4\n  fib21 = fib4\n  fib22 = fib4\n\
    \  fib23 = fib4\n  fib24 = fib4\n  fib25 = fib4\n  fib26 = fib4\n  fib27 = fib4\n\
    \  fib28 = fib4\n  fib29 = fib4\n  fib30 = fib4\n  fib31 = fib4\n  fib32 = fib4\n\
    \  fib33 = fib4\n  fib34 = fib4\n  fib35 = fib4\n  fib36 = fib4\n  fib37 = fib4\n\
    \  fib38 = fib4\n  fib39 = fib4\n  fib40 = fib4\n  fib41 = fib4\n  fib42 = fib4\n\
    \  fib43 = fib4\n  fib44 = fib4\n  fib45 = fib4\n  fib46 = fib4\n  fib47 = fib4\n\
    \  fib48 = fib4\n  fib49 = fib4\n  fib50 = fib4\n  fib51 = fib4\n  fib52 = fib4\n\
    \  fib53 = fib4\n  fib54 = fib4\n  fib55 = fib4\n  fib56 = fib4\n  fib57 = fib4\n\
    \  fib58 = fib4\n  fib59 = fib4\n  fib60 = fib4\n  fib61 = fib4\n  fib62 = fib4\n\
    \  fib63 = fib4\n  fib64 = fib4\n  fib65 = fib4\n  fib66 = fib4\n  fib67 = fib4\n\
    \  fib68 = fib4\n  fib69 = fib4\n  fib70 = fib4\n  fib71 = fib4\n  fib72 = fib4\n\
    \  fib73 = fib4\n  fib74 = fib4\n  fib75 = ", "  if n < 1 then\n    0\n  else\n\
    \    fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4) end", "\treturn ((n-1)*(n-2)*(n-3)*(n-4))\
    \ if n <= 4 else 0\nfib4(5)\nfib4(6)\nfib4(7)\nfib4(8)\nfib4(9)\nfib4(10)\nfib4(11)\n\
    fib4(12)\nfib4(13)\nfib4(14)\nfib4(15)\nfib4(16)\nfib4(17)\nfib4(18)\nfib4(19)\n\
    fib4(20)\nfib4(21)\nfib4(22)\nfib4(23)\nfib4(24)\nfib4(25)\nfib4(26)\nfib4(27)\n\
    fib4(28)\nfib4(29)\nfib4(30)\nfib4(31)\nfib4(32)\nfib4(33)\nfib4(34)\nfib4(35)\n\
    fib4(36)\nfib4(37)\nfib4(38)\nfib4(39)\nfib4(40)\nfib4(41)\nfib4(42)\nfib4(43)\n\
    fib4(44)\nfib4(45)\nfib4(46)\nfib4(47)\nfib4(48)\nfib4(49)\nfib4(50)\nfib4(51)\n\
    fib4(52)\nfib4(53)\nfib4(54)\nfib4(55)\nfib4(56)\nfib4(57)\nfib4(58)\nfib4(59)\n\
    fib4(60)\nfib4(61)\nfib4(62)\nfib4(63)\nfib4(64)\nfib4(65)\nfib4(66)\nfib4(67)\n\
    fib4(68)\nfib4(69)\nfib4(70)\nfib4(71)\nfib4(72)\nfib4(73)\nfib4(74)\nfib4(75)\n\
    fib4(76)\nfib4(77)\nfib4(78)\nfib4(79)\nfib4(80)\nfib4(81)\nfib4(82)\nfib4(83)\n\
    fib4(84)\nfib4(85)\nfib4(86)\nfib4(87)\nfib4(88)\nfib4(89)\nfib4(90)\nfib4(91)\n\
    fib4(92)\nfib4(93)\nfib4(94)\nfib4(95)\nfib4(96)\nfib4(97)\nfib4(98)\nfib4(99)\n\
    fib4(100)\nfib4(101)\nfib4(102)\nfib4(103)\nfib4(104)\nfib4(105)\nfib4(106)\n\
    fib4(107)\nfib4(108)\nfib4(", "    fib = []\n    if n <= 1:\n        fib.append(0)\n\
    \        fib.append(0)\n        return fib[n]\n    elif n <= 3:\n        fib.append(0)\n\
    \        fib.append(0)\n        fib.append(2)\n        return fib[n]\n    else:\n\
    \        fib.append(0)\n        fib.append(0)\n        fib.append(0)\n       \
    \ fib.append(2)\n        fib.append(3)\n        fib.append(0)\n        fib.append(1)\n\
    \        fib.append(3)\n        fib.append(5)\n        fib.append(3)\n       \
    \ fib.append(7)\n        fib.append(8)\n        fib.append(4)\n        fib.append(7)\n\
    \        fib.append(10)\n        fib.append(9)\n        fib.append(10)\n     \
    \   fib.append(8)\n        fib.append(8)\n        fib.append(4)\n        return\
    \ fib[n]\n</cell>\n<cell>", "  if n == 0\n    return 0\n  if n == 1\n    return\
    \ 0\n  if n == 2\n    return 2\n  if n == 3\n    return 0\n  if n == 4\n    return\
    \ 0\n  return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4) + fib4(n-5)", "  if\
    \ n <= 3\n    0\n  else\n    fib4(n - 4) + fib4(n - 3) + fib4(n - 2) + fib4(n\
    \ - 1)", "  return(n) if n <= 3 else fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\
    \ + fib4(n-5)\nend\n</cell>\n<text>\nTest", "  if n == 0\n  then 0\n  else fib4(n\
    \ - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\nend", "    num = n\n    while\
    \ num != 0 and num != 1:\n        if num%2 == 0:\n            num = num/2\n  \
    \      else:\n            num = (num-1)/2\n    return num", "  if n == 0\n   \
    \ 0\n  elsif n == 1\n    1\n  elsif n == 2\n    2\n  elsif n == 3\n    0\n  elsif\
    \ n == 4\n    0\n  elsif n == 5\n    4\n  elsif n == 6\n    8\n  elsif n == 7\n\
    \    14\n  elsif n == 8\n    8\n  elsif n == 9\n    6\n  elsif n == 10\n    4\n\
    \  elsif n == 11\n    6\n  elsif n == 12\n    6\n  elsif n == 13\n    10\n  elsif\
    \ n == 14\n    16\n  else\n    n\n  end\nend", "  if n <= 1\n    n\n  elsif n\
    \ == 2\n    2\n  elsif n == 3\n    0\n  else\n    (fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4))\n  end \nend\n</cell>\n<cell>", "  if n <= 4\n    0\n  else\n \
    \   fib4(n - 4) + fib4(n - 3) + fib4(n - 2) + fib4(n - 1)\nend", "    fib4_res\
    \ = fib(n - 1)\n    fib4_res2 = fib(n - 2)\n    fib4_res3 = fib(n - 3)\n    fib4_res4\
    \ = fib(n - 4)\n    return fib4_res4 + fib4_res3 + fib4_res2 + fib4_res", "  if\
    \ n <= 0\n    0\n  elsif n <= 4\n    0\n  elsif n <= 7\n    2\n  else\n    fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4)\nend", '  return 0 if n < 4 else (1 if n
    < 6 else (2 if n < 9 else 3 if n < 12 else fib4(n-4) + fib4(n-3) + fib4(n-2) +
    fib4(n-1))))', "  result = 0\n  if n == 0\n    result = 0\n  elsif n == 1\n  \
    \  result = 1\n  elsif n == 2\n    result = 2\n  elsif n == 3\n    result = 1\n\
    \  elsif n == 4\n    result = 3\n  else\n    result = fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4)\n  end\n  result\nend", "  if n == 0\n    0\n  elsif n\
    \ == 1\n    1\n  elsif n == 2\n    2\n  elsif n == 3\n    0\n  else\n    fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4)\nend", "    fib4 = 0\n    fib4 = fib4 +\
    \ fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\n    return fib4", " \
    \ case n\n  when 0 then 0\n  when 1 then 0\n  when 2 then 2\n  when 3 then 0\n\
    \  when n then fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n  end\nend", " \
    \ \n    fib4_n = fib3(n)\n    fib4_n1 = fib3(n-1)\n    fib4_n2 = fib3(n-2)\n \
    \   fib4_n3 = fib3(n-3)\n    fib4_n4 = fib3(n-4)\n    \n    if n<0 then\n    \
    \  return fib4_n\n    end\n    \n    if n==0 then\n      return 0\n    end\n \
    \   \n    if n==1 then\n      return fib4_n1\n    end\n    \n    if n==2 then\n\
    \      return fib4_n2\n    end\n    \n    if n==3 then\n      return fib4_n3\n\
    \    end\n    \n    if n==4 then\n      return fib4_n4\n    end\n    \n    \n\
    end", "  if n == 0\n    fib4[0]\n  else if n == 1\n    fib4[1]\n  else if n ==\
    \ 2\n    fib4[2]\n  else if n == 3\n    fib4[3]\n  else if n == 4\n    fib4[4]\n\
    \  else if n == 5\n    fib4[5] \n  else if n == 6\n    fib4[6]\n  else if n ==\
    \ 7\n    fib4[7]\n  else if n == 8\n    fib4[8]\n  else if n == 9\n    fib4[9]\n\
    \  else\n    fib4[n-1] + fib4[n-2] + fib4[n-3] + fib4[n-4]", "  a = 1\n  b = 2\n\
    \  while n >= 0\n    a, b = b, a+b\n    n = n - 1\n  end\n  a\nend", "  case n\n\
    \  when 0...1\n    0\n  when 2...3\n    2\n  when 4...7\n    0\n  when 8...11\n\
    \    2\n  else\n    fib4(n-1)+fib4(n-2)+fib4(n-3)+fib4(n-4)\n  end\nend", "  a\
    \ = 1\n  b = 2\n  c = 2\n  for i in (1..n-1)\n  \ta = b\n  \tb = c\n  \tc = a\
    \ + b\n  end\n  a\nend", "  return 0 if (n<1) or n==1\n  return fib4(n-1) + fib4(n-2)\
    \ + fib4(n-3) + fib4(n-4)\nprint fib4(5)\nprint fib4(6)\nprint fib4(7)\n</cell>\n\
    <cell>", "    fib4 = 0\n    while fib4 < n \n        fib4 += 1\n    return fib4\n\
    </cell>\n<cell>", "  fib_seq = 0\n  \n  for i in 1..n\n    fib_seq += fib_seq\n\
    \  end\n  return fib_seq\nend", "  if n == 0\n    0\n  elsif n == 1\n    1\n \
    \ elsif n == 2\n    2\n  elsif n == 3\n    0\n  else\n    fib4(n-1) + fib4(n-2)\
    \ + fib4(n-3) + fib4(n-4)\nend", "  sum = 0\n  for i in 1...n\n    sum = sum +\
    \ i\n    return sum\nend\n</cell>\n<text>\nQuestion 3: Write a function that takes\
    \ two lists and returns a list of pairs of lists such that the first element of\
    \ each pair is the sum of the first elements of its argument lists and the second\
    \ element is the sum of the second elements of its argument lists.\nFor example:",
  "  memo = Array.new(4) { |i| Array.new(4) } # memo[i][j] = jth fib4 number\n  memo[0][0]\
    \ = 0\n  memo[1][0] = 1\n  memo[2][0] = 1\n  memo[3][0] = 1\n  memo[0][1] = 0\n\
    \  memo[1][1] = fib2(1,n,memo)\n  memo[2][1] = fib2(2,n,memo)\n  memo[3][1] =\
    \ fib2(3,n,memo)\n  memo[0][2] = fib2(1,n,memo)\n  memo[1][2] = fib2(2,n,memo)\n\
    \  memo[2][2] = fib2(3,n,memo)\n  memo[3][2] = fib2(4,n,memo)\n  memo[0][3] =\
    \ fib2(1,n,memo)\n  memo[1][3] = fib2(2,n,memo)\n  memo[2][3] = fib2(3,n,memo)\n\
    \  memo[3][3] = fib2(4,n,memo)\n  return memo[n][3]\nend", '  return 0 if n ==
    0 else fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)', "  if n==0\n  \
    \  0\n  elsif n==1\n    1\n  elsif n==2\n    2\n  elsif n==3\n    0\n  elsif n>3\n\
    \    fib4(n-1)+fib4(n-2)+fib4(n-3)+fib4(n-4)\n  end\nend", "  p =  n <= 4\n  v\
    \ = 1\n  while p && n > 0\n    p = n % 4 == 0\n    n = n/4\n    v = v * v + n\n\
    \  v\nend", "  return if n == 0 then 0 else if n == 1 then 0 else fib4(n-1) +\
    \ fib4(n-2) + fib4(n-3) + fib4(n-4)\nend", "  if n < 4\n    1\n  elsif n < 7\n\
    \    2\n  elsif n < 12\n    3\n  else\n    fib4(n-4) + fib4(n-5) + fib4(n-6) +\
    \ fib4(n-7)", "  result = 0\n  for i in 0...n\n    result += (fib(n-1) + fib(n-2)\
    \ + fib(n-3) + fib(n-4))\n  end\n  result\nend", "  begin\n    if n == 0 then\
    \ \n      0\n    elsif n == 1 then \n      1\n    elsif n == 2 then \n      2\n\
    \    elsif n == 3 then \n      0\n    else \n      fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4)\n  end\nend", "  (0...n).inject(0) {|sum, a| sum + fib4(a)}\nend",
  "\treturn @fib4(n-4)+@fib4(n-3)+@fib4(n-2)+@fib4(n-1)\nend", "    fib4_number =\
    \ 0\n    while fib4_number <= n:\n        fib4_number = fib4_number + fib4_number\n\
    \    return fib4_number\n</cell>\n<cell>", "\tfib_seq =\n\tfib4(n-1) + fib4(n-2)\
    \ + fib4(n-3) + fib4(n-4)\n\treturn fib_seq\nprint fib4(5)\nprint fib4(6)\nprint\
    \ fib4(7)\n</cell>\n<text>\nProblem 7: Fibonacci numbers\nThe Fibonacci numbers\
    \ are a sequence of integers starting with the following:\n0, 1, 1, 2, 3, 5, 8,\
    \ 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 10946,\
    \ 17711, 28657, 46368, 75025, 121393, 196418, 317811, 514229, 832040, 1346269,\
    \ 2178309, 3524578, 5702887, 9227465 \nThe first 46 terms would therefore be 0,\
    \ 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181,\
    \ 6765, 10946. Note that the first two terms in the sequence both begin with 0,\
    \ which is the first term of the Fibonacci series.\nThe term immediately following\
    \ the last term in the sequence is 1, and the final term is thus 8.\nThe term\
    \ immediately preceding the second last term in the sequence is 8, which is the\
    \ first term of the Fibonacci series that is immediately preceded by 3.\nThe term\
    \ immediately preceding the third last term in the sequence is 13, which is the\
    \ second term of the Fibonacci series that is immediately preceeded by 3.\nFind\
    \ the nth term in the Fibonacci series.\nFor example, if the input were 3, the\
    \ function should return the third term in the Fibonacci sequence. If it was 6,\
    \ the function should return the sixth term in the sequence. If it was 10, the\
    \ function should return the tenth term in the sequence.", "  if n == 0\n    puts\
    \ \"0\"\n  elsif n == 1\n    puts \"0\"\n  elsif n == 2\n    puts \"2\"\n  elsif\
    \ n == 3\n    puts \"0\"\n  elsif n == 4\n    puts \"0\"\n  else\n    puts fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).to_s\n  end\nend", '  raise NotImplementedError',
  "  if n == 0\n    0 \n  elsif n == 1\n    1\n  elsif n == 2\n    2\n  elsif n ==\
    \ 3\n    0\n  else\n    fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4) \nend",
  "  0\n  1\n  2\n  3\n  4\n  fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\nend",
  "  puts \"fib4(#{n}) -> #{fib4(n-1)+fib4(n-2)+fib4(n-3)+fib4(n-4)}\"\nend", "  \
    \  if n == 0\n        return n\n    return fib4(n-1) + fib4(n-2) + fib4(n-3) +\
    \ fib4(n-4)", "    # your code here\n    return 0\n</cell>\n<cell>", "  if n ==\
    \ 0\n    0\n  elsif n == 1\n    1\n  elsif n == 2\n    2\n  elsif n == 3\n   \
    \ 0\n  elsif n == 4\n    4\n  elsif n == 5\n    8\n  elsif n == 6\n    8\n  elsif\
    \ n == 7\n    14\n  elsif n == 8\n    14\n  elsif n == 9\n    15\n  elsif n ==\
    \ 10\n    15\n  elsif n == 11\n    21\n  elsif n == 12\n    21\n  elsif n == 13\n\
    \    34\n  elsif n == 14\n    34\n  elsif n == 15\n    55\n  elsif n == 16\n \
    \   55\n  elsif n == 17\n    89\n  elsif n == 18\n    89\n  elsif n == 19\n  \
    \  144\n  elsif n == 20\n    144\n  elsif n == 21\n    233\n  elsif n == 22\n\
    \    233\n  elsif n == 23\n    377\n  elsif n == 24\n    377\n  elsif n == 25\n\
    \    610\n  elsif n == 26\n    610\n  elsif n == 27\n    987\n  elsif n == 28\n\
    \    987\n  elsif n == 29\n    1597\n  elsif n == 30\n    1597\n  elsif n == 31\n\
    \    2584\n  elsif n == 32\n    2584\n  elsif n == 33\n    4181\n  elsif n ==\
    \ 34\n    4181\n  elsif n == 35\n    6765\n  elsif n == 36\n    6765\n  elsif\
    \ n == 37\n    10946\n  elsif n == 38\n    10946\n  elsif n == 39\n    17711\n\
    \  elsif n == 40\n    17711\n  elsif n == 41\n    28657\n  elsif n == 42\n   \
    \ 28657\n  elsif n == 43\n    46140\n  elsif n == 44\n    46140\n  elsif n ==\
    \ 45\n    75025\n  elsif n == 46\n    75025\n  elsif n == 47\n    121393\n  elsif\
    \ n == 48\n    121393\n  elsif ", "    if n == 0\n        return 0\n    if n ==\
    \ 1\n        return 1\n    if n == 2\n        return 2\n    if n == 3\n      \
    \  return 0\n    return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)",
  "  if n<0\n    0\n  elsif n==0\n    1\n  elsif n==1\n    1\n  elsif n==2\n    2\n\
    \  elsif n==3\n    0\n  elsif n==4\n    0\n  elsif n==5\n    4\n  elsif n==6\n\
    \    8\n  elsif n==7\n    14\n  end\nend", "    if n <= 0\n        0\n    else\n\
    \        fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\nend\n</cell>\n\
    <text>\nExercise: Let's try to write out our fib4 function as code using recursion.\
    \  To do this let's use some pseudocode from earlier, and we'll use Ruby syntax,\
    \ which you'll see if you scroll to the right of this cell.", "  fib4 = [0]\n\
    \  fib4.push n\n  fib4 = fib4.pop fib4.pop + fib4.pop + fib4.pop + fib4.pop +\
    \ fib4.pop\n  return fib4\nend\n</cell>\n<cell>", "  fib4 = [0]\n  fib4[0] = fib4[0]+fib4[1]+fib4[2]+fib4[3]\n\
    \  fib4[1] = fib4[0]\n  fib4[2] = fib4[0]\n  fib4[3] = fib4[0]\n  fib4[4] = fib4[0]+fib4[1]\n\
    \  fib4[n] = fib4[n-1]+fib4[n-2]+fib4[n-3]+fib4[n-4]\n  fib4\nend\n</cell>\n<code\
    \ language=julia-1.5>", "  case n\n    when 0\n      0\n    when 1\n      0\n\
    \    when 2\n      2\n    when 3\n      0\n    when n\n      fib4(n-1) + fib4(n-2)\
    \ + fib4(n-3) + fib4(n-4)\n  end\nend", '  return n if n < 5 else fib4(n - 4)
    + fib4(n - 3) + fib4(n - 2) + fib4(n - 1)', "  if(n == 0) then return 0\n  if(n\
    \ == 1) then return 0\n  if(n == 2) then return 2\n  if(n == 3) then return 0\n\
    \  if(n == 4) then return 0\n  if(n == 5) then return 4\n  if(n == 6) then return\
    \ 8\n  if(n == 7) then return 14\n  fib4(n-1)+fib4(n-2)+fib4(n-3)+fib4(n-4)\n\
    end\nfib4(5)\n</cell>\n<text>\nPractice with Fibonacci Number Recursion\nPractice\
    \ with Fibonacci Number Recursion.", "  a = fib4(n - 1) #fib4(n - 1) is fib4(n\
    \ - 2) and so on\n  b = fib4(n - 2)\n  c = fib4(n - 3)\n  d = fib4(n - 4)\n  return\
    \ a + b + c + d\nend", "  result = 1\n  for i in 0...n\n    result = result +\
    \ fib4(i-1) + fib4(i-2) + fib4(i-3) + fib4(i-4)\n  end\n  result\nend", "  if\
    \ n == 0\n    return 0\n  if n == 1\n    return 0\n  if n == 2\n    return 2\n\
    \  if n == 3\n    return 0\n  if n == 4\n    return 0\n  return fib4(n-1) + fib4(n-2)\
    \ + fib4(n-3) + fib4(n-4) + fib4(n-5)\n</cell>\n<cell>", "    puts \"Recursion\
    \ is slower and less efficient than the Fibbonacci sequence.\" if (n>499) then\
    \ return nil\n    fib, fib2, fib3, fib4 = 1, 1, 2, 3\n    puts \"Calculating fib4,\
    \ fib3(#{fib}), fib2(#{fib2}), fib4(#{fib4}).\" if (n>0) then puts fib4(n-1) +\
    \ fib4(n-2) + fib4(n-3) + fib4(n-4) end\n    return fib4\nend\nfib4(4)\nfib4(5)\n\
    fib4(6)\nfib4(7)\nfib4(8)\nfib4(9)\nfib4(10)\nfib4(11)\nfib4(12)\nfib4(13)\nfib4(14)\n\
    fib4(15)\nfib4(16)\nfib4(17)\nfib4(18)\nfib4(19)\nfib4(20)\nfib4(21)\nfib4(22)\n\
    fib4(23)\nfib4(24)\nfib4(25)\nfib4(26)\nfib4(27)\nfib4(28)\nfib4(29)\nfib4(30)\n\
    fib4(31)\nfib4(32)\nfib4(33)\nfib4(34)\nfib4(35)\nfib4(36)\nfib4(37)\nfib4(38)\n\
    fib4(39)\nfib4(40)\nfib4(41)\nfib4(42)\nfib4(43)\nfib4(44)\nfib4(45)\nfib4(46)\n\
    fib4(47)\nfib4(48)\nfib4(49)\nfib4(50)\nfib4(51)\nfib4(52)\nfib4(53)\nfib4(54)\n\
    fib4(55)\nfib4(56)\nfib4(57)\nfib4(58)\nfib4(59)\nfib4(60)\nfib4(61)\nfib4(62)\n\
    fib4(63)\nfib4(64)\nfib4(65)\nfib4(66)\nfib4(67)\nfib4(68)\nfib4(69)\nfib4(70)\n\
    fib4(71)\nfib4(72)\nfib4(73)\nfib4(74)\nfib4(75)\nfib4(76)\nfib4(77)\nfib4(78)\n\
    fib4(79)\nfib4(80)\nfib4(81)\nfib4(82)\nfib4(83)\nfib4(84)\nfib4(85)\nfib4(86)\n\
    fib4(87)\nfib4(88)\nfib4(89)\nfib4(90)\nfib4(91)\n", "\tputs \"fib4 #{n} : #{n}\
    \ + #{n} + #{n} + #{n}\" # or just print it\n\tFib4.push n\n\treturn\nend", " \
    \ if n < 4\n    n\n  else\n    (fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n\
    \ - 4)).to_s\nend\n</cell>\n<text>\nfib5", "\tfib4 = 0\n\tif n == 0\n\t\tfib4\
    \ = 0\n\telsif n == 1\n\t\tfib4 = 1\n\telsif n == 2\n\t\tfib4 = 2\n\telsif n ==\
    \ 3\n\t\tfib4 = 0\n\telse\n\t\tfib4 = fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n\
    \tend\n\treturn fib4\nend", "  if n < 0\n    return 0\n  if n == 0\n    return\
    \ 0\n  if n == 1\n    return 1\n  return fib4(n - 1) + fib4(n - 2) + fib4(n -\
    \ 3) + fib4(n - 4)\n</cell>\n<cell>\nfib4(0)\n</cell>\n<cell>\nfib4(1)\n</cell>\n\
    <cell>\nfib4(2)\n</cell>\n<cell>\nfib4(3)\n</cell>\n<cell>\nfib4(4)\n</cell>\n\
    <cell>\nfib4(5)\n</cell>\n<cell>\nfib4(6)\n</cell>\n<cell>\nfib4(7)\n</cell>\n\
    <text>\nPart 5: Recursion with lists and tuples", "  if n == 0\n    0\n  elsif\
    \ n == 1\n    0\n  elsif n == 2\n    2\n  elsif n == 3\n    0\n  elsif n == 4\n\
    \    0\n  elsif n == 5\n    4\n  elsif n == 6\n    8\n  elsif n == 7\n    14\n\
    \  else\n    fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)", "  # Write\
    \ your code! Your code should be identical to the one in the instructions.\n \
    \ if n <= 4\n    return 0\n  if n <= 8\n    return fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4)\n  return fib4(n-5) + fib4(n-6) + fib4(n-7) + fib4(n-8)\nfib4(5)\n\
    fib4(6)\nfib4(7)\nfib4(8)\nfib4(9)\nfib4(10)\nfib4(11)\nfib4(12)\nfib4(13)\nfib4(14)\n\
    fib4(15)\nfib4(16)\nfib4(17)\nfib4(18)\nfib4(19)\nfib4(20)\nfib4(21)\nfib4(22)\n\
    fib4(23)\nfib4(24)\nfib4(25)\nfib4(26)\nfib4(27)\nfib4(28)\nfib4(29)\nfib4(30)\n\
    fib4(31)\nfib4(32)\nfib4(33)\nfib4(34)\nfib4(35)\nfib4(36)\nfib4(37)\nfib4(38)\n\
    fib4(39)\nfib4(40)\nfib4(41)\nfib4(42)\nfib4(43)\nfib4(44)\nfib4(45)\nfib4(46)\n\
    fib4(47)\nfib4(48)\nfib4(49)\nfib4(50)\nfib4(51)\nfib4(52)\nfib4(53)\nfib4(54)\n\
    fib4(55)\nfib4(56)\nfib4(57)\nfib4(58)\nfib4(59)\nfib4(60)\nfib4(61)\nfib4(62)\n\
    fib4(63)\nfib4(64)\nfib4(65)\nfib4(66)\nfib4(67)\nfib4(68)\nfib4(69)\nfib4(70)\n\
    fib4(71)\nfib4(72)\nfib4(73)\nfib4(74)\nfib4(75)\nfib4(76)\nfib4(77)\nfib4(78)\n\
    fib4(79)\nfib4(80)\nfib4(81)\nfib4(82)\nfib4(83)\nfib4(84)\nfib4(85)\nfib4(86)\n\
    fib4(87)\nfib4(88)\nfib4(89)\nfib4(90)\nfib4(91)\nfib4(92)\nfib4(93)\nfib4(94)\n\
    fib4(95)\nfib4(96)\nfib4(97)\nfib4(98)\n", "\tresult = 0\n\t\n\tif n == 0 or n\
    \ == 4\n\t\tresult = 0\n\telse\n\t\tresult = fib4(n - 1) + fib4(n - 2) + fib4(n\
    \ - 3) + fib4(n - 4)\n\t\n\tfib4(n - 1)\n\tfib4(n - 2)\n\tfib4(n - 3)\n\tfib4(n\
    \ - 4)\n\t\n\tresult\nend\n</cell>\n<cell>\nfib4(5)\n</cell>\n<text>\nFibonacci\
    \ Number - Problem 5\nA permutation is an array of indices (positions) where each\
    \ index i can change to any index j where 0 < j \u2264 i.  For example, a permutation\
    \ with three indices might look like [2 1 3]. Describe an efficient algorithm\
    \ to find the nth permutation of the digits 1, 2, 3, ..., n.  Since the answer\
    \ may be very large, return it modulo 109 + 7.", "  fib = Array.new\n  if n <=\
    \ 0\n    fib[0] = 0\n  elsif n <= 1\n    fib[1] = 0\n  elsif n <= 2\n    fib[2]\
    \ = 0\n  elsif n <= 3\n    fib[3] = 0\n  elsif n <= 4\n    fib[4] = 0\n  else\n\
    \    fib[n] = fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n  end\n  fib\nend",
  "  fib4 = 1\n  fib5 = n\n  while fib5 > 0\n    fib4 = fib4 + fib5\n    fib5 = fib5\
    \ - 1\n  end\n  return fib4\nend", "    fib4 = 0\n    if n < 0\n        return\
    \ fib4\n    fib4 = 0\n    if n < 2\n        fib4 = n\n    elif n < 4\n       \
    \ fib4 = fib4\n    elif n < 6\n        fib4 = fib4 + fib4\n    elif n < 8\n  \
    \      fib4 = fib4 + fib4\n    else # n < 10\n        fib4 = fib4 + fib4\n   \
    \ return fib4", "  fib4_helper(0, n, 1)\nend", "  if n<0\n    return 0\n  elsif\
    \ n==0\n    return 0\n  elsif n==1\n    return 0\n  elsif n==2\n    return 2\n\
    \  elsif n==3\n    return 0\n  elsif n==4\n    return 4\n  elsif n==5\n    return\
    \ 0\n  elsif n==6\n    return 8\n  elsif n==7\n    return 14", "  if n == 0\n\
    \    0\n  elsif n == 1\n    0\n  elsif n == 2\n    2\n  elsif n == 3\n    0\n\
    \  elsif n == 4\n    0\n  else\n    fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n\
    end", "\treturn 0 if n < 0 else fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\
    \ \n\t", "    if n == 0 then return 0\n    else if n == 1 then return 0\n    else\
    \ if n == 2 then return 2\n    else if n == 3 then return 0\n    else return fib4(n\
    \ - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\nend\n</cell>\n<text>\nProblem\
    \ 7\nGiven a binary search tree and a node in that tree, return True/False depending\
    \ on whether or not the tree is a binary search tree with only one node and the\
    \ node being either a direct or indirect successor of the given node.  In other\
    \ words, a binary search tree is a BST if there exists a node v that satisfies\
    \ the following conditions:", "    if n < 4\n        fib4_cache[n]\n    else\n\
    \        fib4_cache[n] = fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\n\
    \    return fib4_cache[n]", "    fib4_num = 0\n    if n <= 1\n        fib4_num\
    \ = 0\n    elsif n < 4\n        fib4_num = n\n    elsif n < 7\n        fib4_num\
    \ = fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\n    end\nend\n</cell>\n\
    <cell>", "  if n <= 4\n    fib4(n)\n  else\n    fib4(n-4) + fib4(n-3) + fib4(n-2)\
    \ + fib4(n-1)\n  end\nend\n</cell>\n<code language=julia-1.5>", "  count = 0\n\
    \  if n <= 4\n    return n\n  while n > 0\n    count += 1\n    n -= 1\n  end\n\
    \  return count\nend\n</cell>\n<text>\nTask 7\nProblem 1\nWrite a function to\
    \ compute the sum of the first n positive integers. Add this function to your\
    \ script. HINT: Recall that sum is a mathematical operation that returns the sum\
    \ of an iterable object.", '    return n%4 + fib4(n-4)', "    fib4_value = 0\n\
    \    fib4_number = 1\n    fib4_number2 = 1\n    fib4_number3 = 1\n    fib4_number4\
    \ = 1\n    \n    if n <= 1:\n        fib4_value = 0\n    elif n <= 3:\n      \
    \  fib4_value = 1\n    elif n <= 5:\n        fib4_value = 2\n    elif n <= 7:\n\
    \        fib4_value = 3\n    else:\n        fib4_value = fib4_value + fib4_number\
    \ + fib4_number2 + fib4_number3 + fib4_number4\n        fib4_number = fib4_number2\n\
    \        fib4_number2 = fib4_number3\n        fib4_number3 = fib4_number4\n  \
    \      fib4_number4 = fib4_value\n    return fib4_value", "  if n == 0\n  0\n\
    \  elsif n == 1\n  1\n  elsif n == 2\n  2\n  elsif n == 3\n  0\n  elsif n == 4\n\
    \  1\n  elsif n == 5\n  1\n  elsif n == 6\n  2\n  elsif n == 7\n  0\n  elsif n\
    \ == 8\n  0\n  elsif n == 9\n  1\n  elsif n == 10\n  2\n  elsif n == 11\n  0\n\
    \  elsif n == 12\n  1\n  elsif n == 13\n  0\n  elsif n == 14\n  1\n  elsif n ==\
    \ 15\n  2\n  elsif n == 16\n  0\n  elsif n == 17\n  1\n  elsif n == 18\n  2\n\
    \  elsif n == 19\n  1\n  elsif n == 20\n  0\n  elsif n == 21\n  0\n  elsif n ==\
    \ 22\n  1\n  elsif n == 23\n  2\n  elsif n == 24\n  1\n  elsif n == 25\n  3\n\
    \  elsif n == 26\n  2\n  elsif n == 27\n  3\n  elsif n == 28\n  2\n  elsif n ==\
    \ 29\n  3\n  elsif n == 30\n  3\n  elsif n == 31\n  4\n  elsif n == 32\n  3\n\
    \  elsif n == 33\n  4\n  elsif n == 34\n  5\n  elsif n == 35\n  4\n  elsif n ==\
    \ 36\n  5\n  elsif n == 37\n  6\n  elsif n == 38\n  5\n  elsif n == 39\n  6\n\
    \  elsif n == 40\n  5\n  elsif n == 41\n  6\n  elsif n == 42\n  7\n  elsif n ==\
    \ 43\n  6\n  elsif n == 44\n  7\n  elsif n == 45\n  8\n  elsif n == 46\n  7\n\
    \  elsif n == 47\n  8\n  elsif n == 48\n  9\n  elsif n == 49\n  8\n  elsif n ==\
    \ 50\n  9\n  elsif ", "  if n==0 or n==1 then\n    return 0\n  else\n    return\
    \ fib4(4) + fib4(3) + fib4(2) + fib4(1)\n  end\nend", "  if n == 0\n    Fib4 =\
    \ 0\n  else if n == 1\n    Fib4 = 0\n  else if n == 2\n    Fib4 = 2\n  else if\
    \ n == 3\n    Fib4 = 0\n  else if n == 4\n    Fib4 = 0\n  else if n == 5\n   \
    \ Fib4 = 4\n  else if n == 6\n    Fib4 = 8\n  else if n == 7\n    Fib4 = 14\n\
    \  else\n    Fib4 = Fib4(n-1) + Fib4(n-2) + Fib4(n-3) + Fib4(n-4)\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
