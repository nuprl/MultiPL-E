name: HumanEval_63_fibfib
language: rb
prompt: "# The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
  \ that's defined as follows:\n# fibfib(0) == 0\n# fibfib(1) == 0\n# fibfib(2) ==\
  \ 1\n# fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n# Please write a function\
  \ to efficiently compute the n-th element of the fibfib number sequence.\n# >>>\
  \ fibfib(1)\n# 0\n# >>> fibfib(5)\n# 4\n# >>> fibfib(8)\n# 24\ndef fibfib(n)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fibfib\n\
  \    candidate = method(:fibfib)\n    assert_equal(1, candidate.call(2))\n    assert_equal(0,\
  \ candidate.call(1))\n    assert_equal(4, candidate.call(5))\n    assert_equal(24,\
  \ candidate.call(8))\n    assert_equal(81, candidate.call(10))\n    assert_equal(274,\
  \ candidate.call(12))\n    assert_equal(927, candidate.call(14))\n  end\nend\n"
completions: ["   if n <= 0\n     return 0\n   else\n     return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n   end\nend", "    return (n**2) if n < 3 else fibfib(n-1) +\
    \ fibfib(n-2) + fibfib(n-3)\nend\n</cell>\n<code language=julia-1.3>\nfibfib(8)\n\
    </cell>\n<code language=julia-1.3>", "\tans = 0\n\twhile n > 1 do\n\t\tans = ans\
    \ + n\n\t\tn = n - 2\n\tend\n\treturn ans\nend", "  FibFib = 0\n  if n==0\n  \
    \  FibFib == 0\n  elsif n==1\n    FibFib == 0\n  elsif n==2\n    FibFib == 1\n\
    \  elsif n>2 and n<=12\n    FibFib + fibfib(n-2) + fibfib(n-3)\n  elsif n>12\n\
    \    FibFib + fibfib(n-12) + fibfib(n-12) + fibfib(n-12)\n  else\n    FibFib\n\
    \  end\nend\nFibFib=fibfib(100)\n</cell>\n<text>\nThe recursive function fibfib\
    \ is called n times while iterating over n from 0 to 12 instead of 0 to 100. Let's\
    \ try it out on the Fibbonacci sequence for n=20:", "  fibfib = 0\n  fibfib +=\
    \ fibfib(n-1) if n > 1 else 0\n  fibfib += fibfib(n-2) if n > 2 else 1\n  fibfib\
    \ += fibfib(n-3) if n > 3 else fibfib(n-3)\nend", "  fibfib = 0.\n  if n == 1\n\
    \    fibfib = 0\n  elsif n == 2\n    fibfib = 1\n  elsif n == 3\n    fibfib =\
    \ 1\n  elsif n == 4\n    fibfib = 1\n  elsif n == 5\n    fibfib = 1\n  elsif n\
    \ == 6\n    fibfib = 1\n  elsif n == 7\n    fibfib = 1\n  elsif n == 8\n    fibfib\
    \ = 1\n  elsif n == 9\n    fibfib = 1\n  elsif n == 10\n    fibfib = 1\n  elsif\
    \ n == 11\n    fibfib = 1\n  elsif n == 12\n    fibfib = 1\n  elsif n == 13\n\
    \    fibfib = 1\n  elsif n == 14\n    fibfib = 1\n  elsif n == 15\n    fibfib\
    \ = 1\n  elsif n == 16\n    fibfib = 1\n  elsif n == 17\n    fibfib = 1\n  elsif\
    \ n == 18\n    fibfib = 1\n  elsif n == 19\n    fibfib = 1\n  elsif n == 20\n\
    \    fibfib = 1\n  elsif n == 21\n    fibfib = 1\n  elsif n == 22\n    fibfib\
    \ = 1\n  elsif n == 23\n    fibfib = 1\n  elsif n == 24\n    fibfib = 1\n  elsif\
    \ n == 25\n    fibfib = 1\n  elsif n == 26\n    fibfib = 1\n  elsif n == 27\n\
    \    fibfib = 1\n  elsif n == 28\n    fibfib = 1\n  elsif n == 29\n    fibfib\
    \ = 1\n  elsif n == 30\n    fibfib = 1\n  elsif n == 31\n    fibfib = 1\n  elsif\
    \ n == 32\n    fibfib = 1\n  elsif n == 33\n    fibfib = 1\n  elsif n == 34\n\
    \    fibfib = 1\n  elsif n == 35\n    fibfib = 1\n  elsif n == 36\n    fibfib\
    \ = 1\n  elsif n == 37\n    fibfib = 1\n  elsif n == 38\n    fibfib = 1\n  elsif\
    \ n == 39\n    fibfib = 1\n  elsif n == 40\n    fibfib = 1\n  elsif n == 41\n\
    \    fibfib = 1\n  elsif n == 42\n    fibfib = 1\n  elsif n == ", "\tresult =\
    \ 0\n\tif n == 0 then\n\t\tresult = 0\n\telseif n == 1 then\n\t\tresult = 0\n\t\
    elseif n == 2 then\n\t\tresult = 1\n\telse\n\t\tresult = fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n\tend\n\treturn result\nend", "  if(n == 0)\n    FibFib = 0\n\
    \  else\n    FibFib = FibFib + FibFib - fibfib(n-1) + fibfib(n-2)\n  end\n  return\
    \ FibFib\nend\nfibfib(1)\nfibfib(5)\nfibfib(8)\n</cell>\n<cell>", "    memo =\
    \ [0]*n\n    memo[0] = memo[1] = 1\n    i = 2\n    while i < n\n        memo[i]\
    \ = memo[i-1] + memo[i-2]\n        i = i+1\n    return memo[n]", "  a = 0\n  b\
    \ = 1\n  while a < n\n    a += 1\n    b = b + a\n  end\n  a\nend", "  if n<=0\
    \ then return 0\n  else return fibfib(n-1)+fibfib(n-2)+fibfib(n-3)\nend", "  #\
    \ Return the nth element of the fibbonacci sequence.\n  return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\nend\n</cell>\n<cell>", "\tfibfib = []\n\tfibfib[0] = 0\n\tfibfib[1]\
    \ = 0\n\tfibfib[2] = 1\n\tfibfib[n-1] = fibfib[n-2] + fibfib[n-3]\n\treturn fibfib[n-1]\n\
    </cell>\n<cell>", "  (0..n)[-2..-1].inject(0) {|sum, num| sum + fibfib(num-1)}\n\
    end\n</cell>\n<code language=julia-0.4>\n@time fibfib(1)\n</cell>\n<text>\nProblem\
    \ 4b", "  if n == 0\n    0\n  elsif n == 1\n    1\n  elsif n == 2\n    1\n  elsif\
    \ n == 3\n    2\n  elsif n >= 4\n    fibfib(n-3) + fibfib(n-2) + fibfib(n-1)\n\
    \  else\n    n\nend\n</cell>\n<code language=julia-1.3>", "  if n == 0 then return\
    \ 0\n  if n == 1 then return 1\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    end\n</cell>\n<code language=julia-1.6>\n@time fibfib(1)\n</cell>\n<code language=julia-1.6>\n\
    @time fibfib(5)\n</cell>\n<code language=julia-1.6>\n@time fibfib(8)\n</cell>\n\
    <code language=julia-1.6>", "    if n == 0\n        return 0\n    elif n == 1\n\
    \        return 0\n    elif n == 2\n        return 1\n    elif n > 2\n       \
    \ return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    else:\n        print('fibfib:\
    \ n must be positive.')\n        ", "    fibfib_list = []\n    fibfib_list.append(0)\n\
    \    fibfib_list.append(0)\n    fibfib_list.append(1)\n    if n <= 3: fibfib_list.append(1)\n\
    \    if n <= 2: fibfib_list.append(0)\n    if n <= 1: fibfib_list.append(0)\n\
    \    for x in fibfib_list:\n        xx = x + fibfib_list[x-1]\n    return xx\n\
    </cell>\n<cell>", "  memo = Array.new(n+1)\n  memo[0] = 0\n  memo[1] = 0\n  memo[2]\
    \ = 1\n  memo[n] = 1\n  for i in (1..n).step(5)\n    memo[i] = memo[i-2] + memo[i-3]\
    \ + memo[i-4]\n  end\n  memo[n]\nend\nprint fibfib(n) # => 24\n</code>\n<|/ a\
    \ |>\n<| a dscore=4 tags=ruby,fibonacci,algorithm |>\nThe following solution works\
    \ for me:\n<code>", "    fibnum = 0\n    if n < 2\n        fibnum = 0\n    elif\
    \ n < 9\n        fibnum = 0\n    elif n < 15\n        fibnum = 1\n    elif n <\
    \ 23\n        fibnum = 1\n    else # n <= 30\n        fibnum = 2\n    while n\
    \ > fibnum\n        fibnum = fibnum + fibnum\n    return fibnum\n</cell>\n<cell>\n\
    fibfib(15)\n</cell>\n<text>\nPart 4: Recursive Functions\nFunctions call themselves\
    \ within themselves. For example, fibfib() calls itself before returning. In Python,\
    \ the convention is for recursive functions to have a special keyword called \"\
    recursive\". The keyword \"recursive\" begins the function definition with a \"\
    def\" keyword, followed by a function name, and any number of comma-separated\
    \ parameters within parentheses.", "    if n<=1\n        fibfib(n)\n    else\n\
    \        fibfib(n-1)+fibfib(n-2)+fibfib(n-3)\n    end\nend\n</cell>\n<text>\n\
    Problem 7\nCompute and print the square of all the numbers from 1 to 100 which\
    \ are divisible by 3 and 5.", "  if n <= 1\n    FibFibNumber = 0\n  else\n   \
    \ FibFibNumber = fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n  end\n  return FibFibNumber\n\
    end\n</cell>\n<cell>\n%%solution\nfibfib(1)\n</cell>\n<cell>\n%%solution\nfibfib(5)\n\
    </cell>\n<cell>\n%%solution\nfibfib(8)\n</cell>\n<text>\nRewrite fibfib in Julia\n\
    The Fibonacci sequence is a sequence of integers defined by the equation\n$$\\\
    begin{equation}\nF_0 = 0,\nF_1 = 1,\nF_n = F(n-1) + F(n-2), F_{n+1} = F_{n}\n\\\
    end{equation}$$\nwhere $F_n$ is the n'th term of the sequence.", "  if n < 0\n\
    \    n *= -1\n  end\n  if n == 0\n    return 0\n  else\n    fibfib(n-1)\n  end\n\
    end", "  return n if n <= 1 else fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\nend\n\
    </cell>\n<cell>", "  return 0 if (n <= 0) || n == 1 \n  else fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\nend", "  return 1 if n == 0 else fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3)\nend\n</cell>\n<code language=julia-0.6>\nfibfib(1)\n</cell>\n<code\
    \ language=julia-0.6>\nfibfib(5)\n</cell>\n<code language=julia-0.6>\nfibfib(8)\n\
    </cell>\n<code language=julia-0.6>", "  if n == 0\n    0\n  elsif n == 1\n   \
    \ 1\n  elsif n == 2\n    1\n  elsif n == 3\n    2\n  elsif n == 4\n    3\n  elsif\
    \ n == 5\n    6\n  elsif n == 6\n    8\n  elsif n == 7\n    13\n  elsif n == 8\n\
    \    21\n  elsif n == 9\n    34\n  elsif n == 10\n    55\n  elsif n == 11\n  \
    \  89\n  elsif n == 12\n    144\n  elsif n == 13\n    233\n  elsif n == 14\n \
    \   376\n  elsif n == 15\n    610\n  elsif n == 16\n    987\n  elsif n == 17\n\
    \    1597\n  elsif n == 18\n    2584\n  elsif n == 19\n    4181\n  elsif n ==\
    \ 20\n    6765\n  elsif n == 21\n    10946\n  elsif n == 22\n    17711\n  elsif\
    \ n == 23\n    28657\n  elsif n == 24\n    46368\n  elsif n == 25\n    75025\n\
    \  elsif n == 26\n    121393\n  elsif n == 27\n    196418\n  elsif n == 28\n \
    \   317811\n  elsif n == 29\n    514229\n  elsif n == 30\n    832040\n  elsif\
    \ n == 31\n    1346269\n  elsif n == 32\n    2178309\n  elsif n == 33\n    3524578\n\
    \  elsif n == 34\n    5574357\n  elsif n == 35\n    8577951\n  elsif n == 36\n\
    \    13049697\n  elsif n == 37\n    21113497\n  elsif n == 38\n    34153951\n\
    \  elsif n == 39\n    5371021\n  elsif n == 40\n    8626757\n  elsif n == 41\n\
    \    13786571\n  elsif n == 42\n    21726229\n  elsif n == 43\n    35286459\n\
    \  elsif n == 44\n    55705368\n  elsif n == 45\n    85776571\n", "  return fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3)\nend", "\tfibonacci = 1\n\tcount = 0\n\twhile count\
    \ < n\n\t\tfibonacci = fibonacci + fibfib(n-count)\n\t\tcount += 1\n\treturn fibonacci",
  "  if n==0 or n==1\n    return n\n  else\n    return fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3)\nend\nprint fibfib(3)", "  if n == 0\n    fibfib[0] = 0\n    fibfib[1]\
    \ = 0\n    fibfib[2] = 1\n  else if n == 1\n    fibfib[0] = 0\n    fibfib[1] =\
    \ 1\n    fibfib[2] = 1\n  else if n == 2\n    fibfib[0] = 0\n    fibfib[1] = 1\n\
    \    fibfib[2] = 1\n  else\n    fibfib[0] = fibfib(n-1) + fibfib(n-2)\n    fibfib[1]\
    \ = fibfib[0]\n    fibfib[2] = fibfib[0] + fibfib[1]\n  end\n  return fibfib[n]\n\
    end", "\tn==0?0:n==1?1:fibfib(n-1)+fibfib(n-2)+fibfib(n-3)\nend", "  return fibfib_cache[n]\
    \ if n in fibfib_cache else fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\nfibfib_cache\
    \ = {}\nfibfib(1)\nfibfib(5)\nfibfib(8)\nfibfib(1000)\nfibfib(-10)\nfibfib(-10001)\n\
    fibfib(-10002)\nfibfib(-10003)\nfibfib(-10004)\nfibfib(-10005)\nfibfib(-10006)\n\
    fibfib(-10007)\nfibfib(-10008)\nfibfib(-10009)\nfibfib(-10010)\nfibfib(-10011)\n\
    fibfib(-10012)\nfibfib(-10013)\nfibfib(-10014)\nfibfib(-10015)\nfibfib(-10016)\n\
    fibfib(-10017)\nfibfib(-10018)\nfibfib(-10019)\nfibfib(-10020)\nfibfib(-10021)\n\
    fibfib(-10022)\nfibfib(-10023)\nfibfib(-10024)\nfibfib(-10025)\nfibfib(-10026)\n\
    fibfib(-10027)\nfibfib(-10028)\nfibfib(-10029)\nfibfib(-10030)\nfibfib(-10031)\n\
    fibfib(-10032)\nfibfib(-10033)\nfibfib(-10034)\nfibfib(-10035)\nfibfib(-10036)\n\
    fibfib(-10037)\nfibfib(-10038)\nfibfib(-10039)\nfibfib(-10040)\nfibfib(-10041)\n\
    fibfib(-10042)\nfibfib(-10043)\nfibfib(-10044)\nfibfib(-10045)\nfibfib(-10046)\n\
    fibfib(-10047)\nfibfib(-10048)\nfibfib(-10049)\nfibfib(-10050)\nfibfib(-10051)\n\
    fibfib(-10052)\nfibfib(-10053)\nfibfib(-10054)\nfibfib(-10055)\nfibfib(-10056)\n\
    fibfib(-10057)\nfibfib(-10058)\nfibfib(-10059)\nfibfib(-10060)\nfibfib(-10061)\n\
    fibfib(-10062)\nfibfib(-10063)\nfibfib(-10064)\nfibfib(-10065)\nfibfib(-10066)\n\
    fibfib(-10067)\nfibfib(-10068)\nfibfib(-100", "  fibfib = [0,1,1,2,3,5,8,13,21,34,55,89,144,233,377,610,987,1597,2584,4181,6765,10946,17711,28657,46368,75025,121393,196418,317811,514229,832040,1346269,2178309,3524578]\n\
    \  if n<1\n    fibfib[0]\n  else\n    fibfib[n]\n  end\nend\n</code></pre>\n<pre\
    \ class=\"ruby\"><code># Write a function to generate a Fibbonacci series up to\
    \ n using the following formula:", "    sum = 0\n    if n == 0\n        sum =\
    \ 0\n    elif n == 1\n        sum = 1\n    else\n        sum = (fibfib(n-1) +\
    \ fibfib(n-2) + fibfib(n-3))\n    return sum\n</cell>\n<cell>", "  if n <= 0\n\
    \    fibfib(0)\n  elsif n == 1\n    fibfib(1)\n  elsif n == 2\n    fibfib(2)\n\
    \  else\n    fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)\n  end\nend\n</cell>\n\
    <cell>", "  return 0 if (n == 0)\n  return 1 if (n == 1)\n  fibfib(n - 1) + fibfib(n\
    \ - 2) + fibfib(n - 3)\nend", end, "  if n == 0\n    0\n  elsif n == 1\n    1\n\
    \  else\n    fib(n - 1) + fib(n - 2) + fib(n - 3)\nend\n</cell>\n<text>\nProblem\
    \ 3: Longest common prefix of words\nWrite a program to find the longest common\
    \ prefix of two words as follows.\nGiven two strings str1 and str2, find the longest\
    \ common prefix of str1 and str2, inclusive.\nIf str1 or str2 is empty, return\
    \ an empty string.\nIf str1 or str2 is longer than one character, return an empty\
    \ string.\nReturn an empty string if there is no common prefix between str1 and\
    \ str2.\nFor example,\nstr1 = \"aabbcc\"\nstr2 = \"aabc\"\nReturn an empty string\
    \ for common prefix of str1 and str2 = \"a\".\nNote\nPlease do not use any built-in\
    \ string methods or variables. You should use the for loop or while loop only.",
  "  # Your code here\n  return 0\nend", "  return 1 if n == 0 else fibfib(n-1) +\
    \ fibfib(n-2) + fibfib(n-3)\n</code>\nSolution 2\n<code>", end, "  if n < 0\n\
    \    return -1\n  \n  if n == 0\n    return 0\n  \n  if n == 1\n    return 0\n\
    \  \n  if n == 2\n    return 1\n  \n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n\
    \ - 3)", "  fibbonacci n.times.inject(0){|sum, num| sum + fibnum(num)}\nend",
  "    if n < 0\n        return 0\n    elif n == 0\n        return 0\n    elif n ==\
    \ 1\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    </cell>\n<text>\nPart B\nNow we get to the heart of the question: Given a large\
    \ list of integers, how can we determine whether it's even or odd?", "  return\
    \ n if n == 0 else fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\nend\n</cell>\n<code\
    \ language=julia-1.3>\n@time fibfib(1)\n</cell>\n<code language=julia-1.3>\n@time\
    \ fibfib(1)\n</cell>\n<text>\nAs a final step, write a function to calculate the\
    \ sum of all the numbers in the Fibonacci sequence from 0 to n (inclusive).\n\
    You may assume that n is positive (although it's okay to assume that the sum of\
    \ the Fibonacci numbers is at least 1).", "  return 0 if n < 2 else fibfib(n-1)\
    \ + fibfib(n-2)\nend", "  return n==0 or n==1 or fibfib(n-1) + fibfib(n-2)\nend",
  "  if n <= 1\n    return 0\n  end\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    end\n</cell>\n<text>\nQuestion 6\nWrite a function that accepts a string and returns\
    \ the number of words in the string.", "  if n == 0\n    0\n  elsif n == 1\n \
    \   1\n  elsif n == 2\n    1\n  elsif n <= 3\n    fibfib(n-1) + fibfib(n-2)\n\
    \  else\n    fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n  end\nend", "  # Add your\
    \ code below!\n  sum = 0\n  for j in 1:n\n    sum = sum + j\n  end\n  return sum\n\
    end\n</cell>\n<text>\nQuestion: Write a function to find the nth fibonacci number\
    \ in the Fibonacci number sequence.", "\ta = 1\n\tb = 1\n\twhile a < n\n\t\ta,b\
    \ = b,a+b\n\treturn b\nprint fibfib(1)\nprint fibfib(5)\nprint fibfib(8)\n</cell>\n\
    <cell>", "\tfib = 0\n\ta = n\n\tb = n-1\n\twhile b > 0 do\n\t\tfib = fib + a\n\
    \t\ta = b\n\t\tb = b-1\n\tend\n\treturn fib\nend", "  if n == 0\n    0 \n  elsif\
    \ n == 1\n    0\n  elsif n == 2\n    1\n  else\n    fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n  end\nend\n</cell>\n<text>\nThe Fibonacci sequence is defined\
    \ by the following formula \n$$f(n)=\\begin{cases} 0, & \\text{if } n = 0\\\n\
    1, & \\text{if } n = 1\\\nf(n-1)+f(n-2), & \\text{otherwise}\\end{cases}$$\nand\
    \ can be computed recursively using the following Ruby code:", "  raise \"Not\
    \ implemented\"\nend", "  fib = [0]*n\n  fib.each do |i|\n    fib[i] = (i<2?0:fib[i-1]+fib[i-2])\n\
    \  end\n  return fib[n]\nend", "  fibfib = [0,1,1]\n  fibfib[1] = 0\n  fibfib[2]\
    \ = fibfib[1] + fibfib[0]\n  while n < fibfib.length\n    fibfib[n] = fibfib[n-1]\
    \ + fibfib[n-2] + fibfib[n-3]\n    n = n-1\n  end\n  fibfib[n]\nend", "  # Your\
    \ code here\n  if(n==0)\n    return 0\n  if(n==1)\n    return 0\n  if(n==2)\n\
    \    return 1\n  if(n==3)\n    return 0\n  return fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3)\n</cell>\n<text>\nProblem 4\nThe Fibonacci sequence is defined by\
    \ the formula:\nFn =  \u2211i=0 to n-1  fibonacci(i)\nwhere each function computes\
    \ the value of the ith terms of the Fibonacci sequence and\n\u2211 is a prefix\
    \ operator.\nWrite a Python program to compute the nth term of the Fibonacci sequence\
    \ modulo 1000000007.\nPrint the result modulo 1000000007.", "  return 0\n  ",
  "  if n == 0\n    0\n  elsif n == 1\n    0\n  elsif n == 2\n    1\n  elsif n ==\
    \ 3\n    1\n  elsif n == 4\n    2\n  elsif n == 5\n    3\n  elsif n == 6\n   \
    \ 5\n  elsif n == 7\n    8\n  elsif n == 8\n    13\n  elsif n == 9\n    21\n \
    \ elsif n == 10\n    34\n  elsif n == 11\n    55\n  elsif n == 12\n    89\n  elsif\
    \ n == 13\n    144\n  elsif n == 14\n    233\n  elsif n == 15\n    376\n  elsif\
    \ n == 16\n    610\n  elsif n == 17\n    987\n  elsif n == 18\n    1597\n  elsif\
    \ n == 19\n    2584\n  elsif n == 20\n    4186\n  else\n    fibfib(n - 1) + fibfib(n\
    \ - 2) + fibfib(n - 3)\nend", "  if n == 0\n    0\n  elsif n == 1\n    1\n  elsif\
    \ n == 2\n    1\n  elsif n > 2\n    fibfib(n-2) + fibfib(n-3)\n  end\nend\nputs\
    \ fibfib(9) # => 13\nputs fibfib(7) # => 21\nputs fibfib(0)", "  fib = 0\n  if\
    \ n <= 0\n    0\n  else\n    fibfib(n-1)+ fibfib(n-2)+ fibfib(n-3)\n  end\nend",
  "  raise NotImplementedError\nend\n</cell>\n<code language=julia-1.5>", "  return\
    \ (n>1) ? fibfib(n-1) + fibfib(n-2) + fibfib(n-3) : 0\nend", "    if n == 0\n\
    \        0\n    elif n == 1\n        0\n    else if n == 2\n        1\n    else\
    \ \n        fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\nend", "  fib = 1.0;\n  fibfib\
    \ = 1\n  if n > 0\n    fib = fibfib + fibfib(n-1)\n    fibfib = fib + (fibfib(n-2))\n\
    \    fibfib = fib + (fibfib(n-3))\n  end\n  fibfib\nend\n</code>\n<|/ a dscore=1\
    \ tags=ruby,ruby-on-rails |>\n<| a tags=ruby,ruby-on-rails |>\nYou can make use\
    \ of the fact that Ruby has a \"range\" method:\n<code>\n(2..10).to_a", "  if\
    \ n <= 0\n    return 0\n  else\n    fibfib(n-1)+fibfib(n-2)+fibfib(n-3)\n  end\n\
    end\n</cell>\n<cell>", "\tsum = 0\n\t\n\tif n == 0\n\t\tsum = 0\n\telsif n ==\
    \ 1\n\t\tsum = 0\n\telsif n == 2\n\t\tsum = 1\n\telse\n\t\tsum = fibfib(n-1) +\
    \ fibfib(n-2) + fibfib(n-3)\n\t\n\treturn sum\n\t", "    fib = 0\n    fib = 1\n\
    \    fib = 1\n    if n == 0\n        return 0\n    if n == 1\n        return 1\n\
    \    if n == 2\n        return 1\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)",
  "  return 0 if n == 0 then 0 else if n == 1 then 1 else fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\nend\n</cell>\n<cell>\nfibfib(2)\n</cell>\n<cell>", "  fibfib\
    \ = (n-2) * (n-3) + fib(n-1) + fib(n+1)\n  return fibfib\n</code>\n<|/ a dscore=0\
    \ |>\n<| a tags=python,recursion dscore=0 |>\nHere is my solution, very simple\
    \ to understand and even with memoization works:\n<code>", "\treturn 0 if n ==\
    \ 0 else fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\nend", "    if n <= 0\n     \
    \   0\n    else \n        fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n</code>\n<|/\
    \ a dscore=1 |>\n<| a dscore=1 |>\n<code>", "    if n == 0\n        return 0\n\
    \    if n == 1\n        return 0\n    if n == 2\n        return 1\n    if n ==\
    \ 3\n        return 2\n    if n == 4\n        return 3\n    return fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3)", "  \n  if n == 0\n    0\n  elsif n == 1\n    1\n\
    \  elsif n == 2\n    1\n  elsif n >  3\n    fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    \  else\n    fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    fibfib(n-3) + fibfib(n-2)\n\
    \    fibfib(n-1) + fibfib(n-2)\n  end\nend", "\treturn 0 if n<0 else fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3)", "  \n  # Return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\
    \ when n is between 0 and 3\n  return n if n <= 3 && fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3) == n else nil\nend", "  result = 1\n  i = 1\n  while i <= n\n\
    \    i += 1\n    result = result + i\n  end\n  result\nend", "\tif n == 0\n\t\t\
    return 0\n\tend\n\tif n == 1\n\t\treturn 0\n\tend\n\tif n == 2\n\t\treturn 1\n\
    \tend\n\treturn fibfib(n-1) + fibfib(n-2) + fibfib(n-3)", "  if n == 0\n    0\n\
    \  elsif n == 1\n    1\n  elsif n == 2\n    1\n  elsif n <= 2\n    1\n  else\n\
    \    fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n  end\nend\n</cell>\n<cell>\n%load\
    \ test_fibfib\n</cell>\n<text>\nTask: Write a function that returns the fibonacci\
    \ sequence up to $n$ terms. \nThe Fibonacci number sequence is defined as:", " \
    \ if n == 0\n    0\n  elsif n == 1\n    1\n  elsif n == 2\n    1\n  elsif n <=\
    \ 3\n    2\n  else\n    fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n  end\nend\n\
    </cell>\n<cell>", "  if n==0\n    0\n  elsif n==1\n    1\n  elsif n==2\n    1\n\
    \  elsif n==3\n    2\n  elsif n<3\n    fibfib(n-1)+fibfib(n-2)+fibfib(n-3)\n \
    \ else\n    fibfib(n-2)+fibfib(n-3)\n  end\nend\n</cell>\n<text>\nThe fibfib number\
    \ sequence is a closed form so you don't need to worry about an infinite loop\
    \ or an infinite series. We will compute the nth fibonacci number much like how\
    \ we would compute the nth Fibonacci number in terms of F(n) = fibfib(n), where\
    \ F(n) = fibfib(n) can be computed by an analytical formula at any point.", " \
    \ if n == 0\n    0\n  elsif n == 1\n    1\n  elsif n == 2\n    1\n  elsif n >\
    \ 2\n    fibfib(n-2) + fibfib(n-3)\n  end\nend\n</cell>\n<cell>", "\treturn fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3)\nend", "  if n == 0\n  \treturn 0\n  if n == 1\n\
    \  \treturn 0\n  if n == 2\n  \treturn 1\n  return fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3)", "  if n<=0\n    0\n  elsif n==1\n    0\n  elsif n==2\n    1\n\
    \  else\n    fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\nend\n</cell>\n<cell>\n@assert\
    \ fibfib(0) == 0\n@assert fibfib(1) == 0\n@assert fibfib(2) == 1\n@assert fibfib(n)\
    \ == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n</cell>\n<text>\nPart III. Fizzbuzz\n\
    FizzBuzz is a popular game of number theory where a player tries to guess what\
    \ number is being faced to them.  In FizzBuzz, a player tries to divide the number\
    \ $n$ into three parts of equal sum.  If the player has $n$ left, they divide\
    \ $n$ up into three parts of equal sums.  If the player has $3n$ left, they divide\
    \ $n$ up into three parts of equal sums.  And so on.  An example of a $3n$ divided\
    \ number is $3n-1$.  Here are some examples:", "  if n == 0\n    0\n  elsif n\
    \ == 1\n    1\n  elsif n == 2\n    1\n  elsif n >= 4\n    fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n  else\n    fibfib(n-1) + fibfib(n-2)\n  end\nend", "\tif n ==\
    \ 0\n\t\t0\n\telsif n == 1\n\t\t0\n\telsif n == 2\n\t\t1\n\telsif n == 3\n\t\t\
    1\n\telsif n == 4\n\t\t2\n\telsif n == 5\n\t\t3\n\telsif n == 6\n\t\t5\n\telsif\
    \ n == 7\n\t\t8\n\telsif n == 8\n\t\t13\n\telsif n == 9\n\t\t21\n\telsif n ==\
    \ 10\n\t\t34\n\telsif n == 11\n\t\t55\n\telsif n == 12\n\t\t89\n\telsif n == 13\n\
    \t\t144\n\telsif n == 14\n\t\t233\n\telsif n == 15\n\t\t377\n\telsif n == 16\n\
    \t\t610\n\telsif n == 17\n\t\t987\n\telsif n == 18\n\t\t1597\n\telsif n == 19\n\
    \t\t2584\n\telsif n == 20\n\t\t4181\n\telsif n == 21\n\t\t6765\n\telsif n == 22\n\
    \t\t10946\n\telsif n == 23\n\t\t17711\n\telsif n == 24\n\t\t28657\n\telsif n ==\
    \ 25\n\t\t46368\n\telsif n == 26\n\t\t75025\n\telsif n == 27\n\t\t121393\n\telsif\
    \ n == 28\n\t\t196418\n\telsif n == 29\n\t\t317811\n\telsif n == 30\n\t\t514229\n\
    \telsif n == 31\n\t\t832040\n\telsif n == 32\n\t\t1346269\n\telsif n == 33\n\t\
    \t2178309\n\telsif n == 34\n\t\t3524578\n\telsif n == 35\n\t\t5702887\n\telsif\
    \ n == 36\n\t\t9227465\n\telsif n == 37\n\t\t14930352\n\telsif n == 38\n\t\t24157817\n\
    \telsif n == 39\n\t\t39088169\n\telsif n == 40\n\t\t59878657\n\telsif n == 41\n\
    \t\t113065060\n\telsif n == 42\n\t\t177203802\n\telsif n == 43\n\t\t286267289\n\
    \telsif n == 44\n\t\t463677047\n\telsif n == 45\n\t\t7", "  if n < 0\n    n =\
    \ 0\n  elsif n <= 1\n    n = 0\n  elsif n > 1\n    n = fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n  else\n    n\n  end\nend", end, "  if n == 0\n    fibfib ==\
    \ 0\n  elsif n == 1\n    fibfib == 1\n  elsif n == 2\n    fibfib == 1\n  elsif\
    \ n == 3\n    fibfib == 1 + 1 + 1\n  elsif n == 4\n    fibfib == 1 + 1\n  elsif\
    \ n == 5\n    fibfib == 1 + 1 + 1 + 1\n  elsif n == 6\n    fibfib == 1 + 1 + 1\n\
    \  elsif n == 7\n    fibfib == 1 + 1 + 1 + 1\n  elsif n == 8\n    fibfib == 1\
    \ + 1 + 1 + 1 + 1\n  elsif n == 9\n    fibfib == 1 + 1 + 1 + 1\n  elsif n == 10\n\
    \    fibfib == 1 + 1 + 1\n  elsif n == 11\n    fibfib == 1 + 1 + 1\n  elsif n\
    \ == 12\n    fibfib == 1 + 1\n  elsif n == 13\n    fibfib == 1 + 1\n  elsif n\
    \ == 14\n    fibfib == 1 + 1 + 1\n  elsif n == 15\n    fibfib == 1 + 1 + 1 + 1\n\
    \  elsif n == 16\n    fibfib == 1 + 1 + 1\n  elsif n == 17\n    fibfib == 1 +\
    \ 1 + 1 + 1\n  elsif n == 18\n    fibfib == 1 + 1 + 1 + 1\n  elsif n == 19\n \
    \   fibfib == 1 + 1 + 1\n  elsif n == 20\n    fibfib == 1 + 1\n  elsif n == 21\n\
    \    fibfib == 1 + 1 + 1\n  elsif n == 22\n    fibfib == 1 + 1 + 1 + 1\n  elsif\
    \ n == 23\n    fibfib == 1 + 1 + 1 + 1\n  elsif n == 24\n    fibfib == 1\n  else\n\
    \    fibfib == fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n  end\nend", "  fibfib_array\
    \ = Array.new(n+1) # Preallocate space\n  fibfib_array[0] = 0 # Fill the array\
    \ with zeros.\n  fibfib_array[1] = 0\n  fibfib_array[2] = 1 # The Fibbonacci sequence\
    \ is 1, so we'll start from 3.\n  fibfib(n) do |i| \n    fibfib_array[i+3] = fibfib_array[i+2]\
    \ + fibfib_array[i]\n  end\nend\nfibfib(3)", "    if n < 0\n        return -1\n\
    \    else if n == 0\n        return 0\n    else if n == 1\n        return 1\n\
    \    else if n == 2\n        return 1\n    else\n        return fibfib(n-1) +\
    \ fibfib(n-2) + fibfib(n-3)", "    \n    # Base case\n    if n < 0 then\n    \
    \    fibfib(0)\n    else\n        fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n  \
    \  end\nend\n</cell>\n<text>\nProblem 3\nWrite a function that accepts a number\
    \ n as its argument and prints the sum of the numbers from 0 to n.  For example,\
    \ \nprint_sum_to(3)  should print 6, and print_sum_to(51) should print 160.",
  "  return n if (n < 2) else fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\nend", "\treturn\
    \ 0 if n < 3 then n else fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\nend\nprintln(fibfib(1))\
    \ # 0\nprintln(fibfib(5)) # 4\nprintln(fibfib(8)) # 24", "    if n == 0\n    \
    \    return 0\n    if n == 1\n        return 1\n    return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)", "    if n < 1\n        0\n    elsif n < 3\n        0\n    elsif\
    \ n == 1\n        0\n    elsif n == 2\n        1\n    else\n        fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3)\n    end\nend", "  if n < 0 then return nil\n  fibfibs\
    \ = Array.new(n)\n  fibfibs[0] = 0\n  fibfibs[1] = 0\n  fibfibs[2] = 1\n  for\
    \ i in 3..(n-1) do\n    fibfibs[i] = fibfibs[i-1] + fibfibs[i-2] + fibfibs[i-3]\n\
    \  end\n  fibfibs[n]\nend", "  n<0?\n  fibfib(n+1) - fibfib(n-2) - fibfib(n-3)\n\
    end", '  return 0 if n == 0 else fibfib(n-1) + fibfib(n-2) + fibfib(n-3)', " \
    \ return 0 unless n\n  return 1 if n == 0\n  return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\nend\n</cell>\n<cell>", "    a, b = 0, 1\n    while b < n\n  \
    \      a, b = b, a+b\n    end\n    a\nend", "  0\nend # end of fibfib", "  fibfibs\
    \ = [0,1]\n  while fibfibs.size < n\n    fibfibs << fibfibs.last + fibfibs.last\
    \ + fibfibs.last\n  end\n  fibfibs[n-1]\nend", '    return fibfib(n-1) + fibfib(n-2)
    + fibfib(n-3)', "    return 0 if n == 0 or n == 1 else fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n    ", "    if n == 0\n        return 0\n    if n == 1\n    \
    \    return 1\n    if n == 2\n        return 1\n    if n == 3\n        return\
    \ 2\n    if n == 4\n        return 1\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    </cell>\n<cell>", "  if n <= 0\n    0\n  elsif n <= 2\n    1\n  else\n    fibfib(n-2)\
    \ + fibfib(n-1)\n  end\nend\n</cell>\n<text>\nCongratulations, you just wrote\
    \ the Fibonacci sequence!  You now know a lot about recursion, and you really\
    \ want to apply recursion to problems such as fibonacci sequence generation and\
    \ fibonacci sequence generation.  So how do we do it?  Let's start by defining\
    \ a function called fib_iter that will compute the fibonacci sequence one number\
    \ at a time.", "  if n == 0\n    fibfib0 = 0\n  elsif n == 1\n    fibfib1 = 1\n\
    \  elsif n == 2\n    fibfib2 = 1\n  elsif n >= 3\n    fibfib3 = fibfib2(fibfib1\n\
    \                     + fibfib0)\n  end\n  fibfib3\nend", "  fibfib = [0,1]\n\
    \  fibfib[n] = [fibfib[n-1], fibfib[n-2] + fibfib[n-3]]\n  fibfib[n]\nend", " \
    \ # Your code here\n  result = 0\n  counter = 2\n  while counter < n:\n    result\
    \ += counter\n    counter += 1\n  return result\n</cell>\n<cell>", "\treturn fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3)", "    a, b = 0, 1\n    while b < n\n        a,\
    \ b = b, a+b\n    return a", "  return 0 if n == 0 else fibfib(n-1) + fibfib(n-2)+fibfib(n-3)\n\
    end", "  if n == 0 or n == 1\n    return n\n  else\n    fibfib(n - 1) + fibfib(n\
    \ - 2)\n  end\nend\n</cell>\n<cell>", "    if n == 0 or n == 1:\n        return\
    \ n\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)", "   \
    \ n <= 0 ? 0 : 1\n    fibfib = (n % 2 == 0 ? 0 : (fibfib((n-2) % 5) + fibfib((n-3)\
    \ % 5)))\n    return fibfib\nend\n</cell>\n<code language=julia-0.5>", "  if n\
    \ <= 3\n    fibfib(n) = n\n  else\n    fibfib(n) = fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3)\n  end\n  return fibfib(n)\nend\n</cell>\n<cell>", "  a,b=[],[]\n\
    \  1.upto(n) { |i| a.push(i) ; b.push(i) }\n  (a.length-2)\nend", "  return 0\
    \ if n < 0 else\n    1 if n == 0 else\n    fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    end", "    if n == 0\n        0\n    elsif n == 1\n        0\n    elsif n == 2\n\
    \        1\n    elsif n > 2\n        fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    \    end\nend\n</cell>\n<text>\nProblem 3: Refactoring Recursive Fibonacci\nA\
    \ more efficient solution is given below", "  if n <= 0\n    0\n  elsif n == 1\n\
    \    0\n  elsif n == 2\n    1\n  else\n    fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    \  end\nend", "  return n==0 or n==1 or fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    end\n</cell>\n<cell>", "    if n<=0\n        n==0\n        return n\n    if n==1\n\
    \        return 0\n    if n==2\n        return 1\n    if n==3\n        return\
    \ 1\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n        ", "  if n <\
    \ 2\n    0\n  else\n    fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\nend\n</code></pre>",
  "  i = 1\n  fib = 1\n  while i <= n\n    fib += fibfib(i)\n    i += 1\n  end\n \
    \ fibfib(n)\nend", "    return 0 if n < 2 else fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    end\n</cell>\n<code language=julia-0.4>", "\tsum = fib(n-1) + fib(n-2) + fib(n-3)\n\
    \tif sum > 100\n\t\treturn sum\n\telse\n\t\treturn sum\n\t\t", "  if n < 0\n \
    \   raise 'n must be >= 0'\n  if n == 2\n    0\n  else\n    fibfib(n-1) + fibfib(n-2)\n\
    end", "  (0...n).inject(0) { |s, i| s + fibfib(i) }\nend", "\tfibfib = Array.new(n,\
    \ nil)\n\tfibfib[0] = 0\n\tfibfib[1] = 0\n\tfibfib[2] = 1\n\tfibfib(n-1).push(fibfib(n-2)\
    \ + fibfib(n-3))\n\treturn fibfib[n-1]\nend\n</cell>\n<text>\nThe following cell\
    \ tests the fibfib function you just created.", "  if n <= 1\n    fibfib(n) =\
    \ n\n  else\n    fibfib(n) = fibfib(n-1) + fibfib(n-2)\n  end\nend", "  return\
    \ n if n <= 2 else fibfib(n-1) + fibfib(n-2)\nend", '    return 0', "  if n<0\n\
    \    raise \"fibfib not defined for negative numbers\"\n  elsif n==0\n    return\
    \ 0\n  elsif n==1\n    return 0\n  elsif n==2\n    return 1\n  else\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3)", "  # Fill in the code below\n  if\
    \ n <= 1 \n  0\n  else\n    fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n  end\nend",
  "  return 0 if (n < 2)\n  fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\nend\n</cell>\n\
    <text>\nQuestion 1", end, "    sum = 1 # initializing the sum value\n    for i\
    \ = 2 # starting with fibfib(0)\n        sum = sum + i\n        if n == sum:\n\
    \            return i\n    return -1", "  fib = 0\n  fib = 1\n  fib = fib + fibfib(n-1)\n\
    \  return fibfib(n)", "  fibfib_cache[n]\nend", "  a = 0\n  b = a\n  while b <=\
    \ n\n    b = a + b\n    a = a + b\n  end\n  return a\nend", "    if n == 0\n \
    \       0\n    elsif n == 1\n        0\n    elsif n == 2\n        1\n    else\n\
    \        fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\nend\n</cell>\n<text>\nSolution\n\
    There are many ways to solve this problem.  Here are some different solutions:",
  end, "  (0..(n-1)).inject(:+).to_a.first\nend\n</code>\n<|/ a |>\n<| c |>\nI think\
    \ you meant `fibfib(n)` instead of `fibonacci(n)`? Your code doesn't have it.\n\
    <|/ c |>\n<| c |>\nYou're right, I was using an old version of the code. Fixed\
    \ now.\n<|/ c |>\n<| a dscore=0 |>\nThe following function does exactly that:\n\
    <code>", "  return 0 if n < 3 else fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n \
    \ # Your code here\nend", "  sum = 0\n  i = 2\n  while i < n\n    sum = sum +\
    \ i\n    i = i + 2\n  end\n  return sum\nend", "    a, b = 0, 1\n    while n !=\
    \ 0\n        a, b = b, a+b\n        n -= 1\n    return a", "  a, b = 0, 1\n  while\
    \ n > 0\n    a, b = b, a+b\n    n -= 1\n  end\n  a\nend\n</cell>\n<code language=julia-1.3>\n\
    @time fibfib(1e7);\n</cell>\n<code language=julia-1.3>\n@time fibfib1(1e7);\n\
    </cell>\n<code language=julia-1.3>\n@time fibfib2(1e7);\n</cell>\n<code language=julia-1.3>\n\
    @time fibfib3(1e7);\n</cell>\n<text>\nExercise 2.3: Write a function to compute\
    \ the nth element of the Fibonacci sequence recursively", "    if n==1\n     \
    \   return 0\n    return fibfib(n-1)+fibfib(n-2)+fibfib(n-3)\n</cell>\n<cell>\n\
    fibfib(1)\n</cell>\n<cell>\nfibfib(5)\n</cell>\n<cell>\nfibfib(8)\n</cell>\n<text>\n\
    Exercise\nWrite a function that takes in a filename and returns the extension\
    \ of the file as a string.", "  fibfib = [0 for i in range(n+1)]\n  fibfib[0]\
    \ = 0\n  fibfib[1] = 1\n  fibfib[2] = 1\n  fibfib[3] = 0", "\ta, b = 0, 1\n\t\
    while n != 0\n\t\ta, b = b, a+b\n\t\tn -= 1\n\tend\n\tb\nend", "  if n == 0 ||\
    \ n == 1 then\n    return 0\n  else\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    \  end\nend", "  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\nend", "  \n \
    \ fibfibs = [0, 1]\n  \n  for i in (0...n)\n    fibfibs.push(fibfibs[fibfibs.length-1]\
    \ + fibfibs[fibfibs.length-2])\n    \n  return fibfibs[n]", "    a, b = 0, 1\n\
    \    while n != 0\n        a, b = b, a + b\n        n -= 1\n    return a\nprint\
    \ fibfib(1)\nprint fibfib(5)\nprint fibfib(8)\n</cell>\n<cell>", "  if n == 0\n\
    \    0\n  elsif n == 1\n    1\n  elsif n == 2\n    1\n  elsif n >= 3\n    fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3)\n  else\n    fibfib(n-3)\n  end\nend\n</cell>\n\
    <cell>\nfibfib(1)\nfibfib(5)\nfibfib(8)\nfibfib(9)\nfibfib(-10)\nfibfib(-11)\n\
    fibfib(-12)\nfibfib(-13) \n</cell>\n<cell>", "  if n==0\n    fibfib=0\n  elsif\
    \ n==1\n    fibfib=0\n  elsif n==2\n    fibfib=1\n  elsif n>2\n    fibfib=fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3)\n  end\n  return fibfib\nend\nputs fibfib(5)", " \
    \ return (n>2) ? fibfib(n-1) + fibfib(n-2) + fibfib(n-3) : n\nend", "  a, b =\
    \ 0, 1\n  until n <= a * a + b * b + c\n    a, b = b, a+b+c\n    n -= 1\n  n\n\
    end\n</cell>\n<cell>", "    if n == 0\n        return 0\n    if n == 1\n     \
    \   return 1\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)", "    if n <=\
    \ 0\n        return 0\n    if n == 2\n        return 1\n    return fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3)", " \n\t# code your solution here", "  return 0\
    \ if n == 0 else fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\nend", "  # BEGIN Question\
    \ 3\n  if n < 0 then\n    fibfib(n + 3)\n  else if n == 0 then\n    0\n  else\n\
    \    fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n  end\n  # END Question 3\nend\n\
    </cell>\n<cell>", "  a, b = 0, 1\n  while n != 0\n    a, b = b, a+b\n    n -=\
    \ 1\n  end\n  return a\nend", "  if n <= 1\n    FibFibNumber\n  else\n    fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3)\n  end\nend", "  if n < 2\n    0\n  else\n    fib(n\
    \ - 1) + fib(n - 2) + fib(n - 3)\n  end\nend", "  fibfib_memo = {n}\n  fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3)\nend", "  num = 0\n  while n != num\n    num = (num\
    \ ** 2 + n) /2\n  end\n  return num\nend", "  fib = 1\n  for i in 0 .. n-1\n \
    \   fib += fibfib(i-1)\n  end\n  fib\nend\n</cell>\n<cell>", "    fibfib = [0,1]\n\
    \    fibfib[n] = fibfib[n-1] + fibfib[n-2] + fibfib[n-3]\n    return fibfib[n]",
  "\tif n <= 2\n\t\t0\n\telse\n\t\tfibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\tend\n\
    end", "  raise NotImplementedError(\"please fill this in\")\nend", "    if n ==\
    \ 0\n        0\n    elif n == 1\n        0\n    else \n        fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n    ", "  fibfib1 = 0\n  fibfib2 = 1\n  fibfib3 = 0\n  for i\
    \ in 1..n\n    fibfib3 = fibfib2 + fibfib3\n    fibfib2 = fibfib1\n    fibfib1\
    \ = fibfib3\n  end\n  return fibfib3\nend", "\tfib = 0\n\tif n == 0\n\t\tfib =\
    \ 0\n\telsif n == 1\n\t\tfib = 1\n\telsif n == 2\n\t\tfib = 1\n\telsif n == 3\n\
    \t\tfib = 1\n\telsif n == 4\n\t\tfib = 3\n\telsif n == 5\n\t\tfib = 3\n\telsif\
    \ n == 6\n\t\tfib = 3\n\telsif n == 7\n\t\tfib = 3\n\telsif n == 8\n\t\tfib =\
    \ 3\n\telsif n == 9\n\t\tfib = 7\n\telsif n == 10\n\t\tfib = 7\n\telsif n == 11\n\
    \t\tfib = 7\n\telsif n == 12\n\t\tfib = 11\n\telsif n == 13\n\t\tfib = 11\n\t\
    elsif n == 14\n\t\tfib = 11\n\telsif n == 15\n\t\tfib = 11\n\telsif n == 16\n\t\
    \tfib = 13\n\telsif n == 17\n\t\tfib = 13\n\telsif n == 18\n\t\tfib = 13\n\telsif\
    \ n == 19\n\t\tfib = 13\n\telsif n == 20\n\t\tfib = 15\n\telsif n == 21\n\t\t\
    fib = 15\n\telsif n == 22\n\t\tfib = 15\n\telsif n == 23\n\t\tfib = 15\n\telsif\
    \ n == 24\n\t\tfib = 17\n\telsif n == 25\n\t\tfib = 17\n\telsif n == 26\n\t\t\
    fib = 17\n\telsif n == 27\n\t\tfib = 17\n\telsif n == 28\n\t\tfib = 19\n\telsif\
    \ n == 29\n\t\tfib = 19\n\telsif n == 30\n\t\tfib = 19\n\telsif n == 31\n\t\t\
    fib = 19\n\telsif n == 32\n\t\tfib = 21\n\telsif n == 33\n\t\tfib = 21\n\telsif\
    \ n == 34\n\t\tfib = 21\n\telsif n == 35\n\t\tfib = 21\n\telsif n == 36\n\t\t\
    fib = 23\n\telsif n == 37\n\t\tfib = 23\n\telsif n == 38\n\t\tfib = 23\n\telsif\
    \ n == 39\n\t\tfib = 23\n\telsif n == 40\n\t\tfib = 23\n\telsif n == 41\n\t\t\
    fib = 25\n\telsif n == 42\n\t\tfib = 25\n\telsi", "  # Your code here\n  if n==0\n\
    \    0\n  elsif n==1\n    0\n  elsif n==2\n    1\n  elsif n==3\n    1\n  elsif\
    \ n<3\n    fibfib(n-2) + fibfib(n-3)\n  else\n    fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3)\n  end\nend\n</cell>\n<text>\nIf you feel confident that your implementation\
    \ is correct, test it against the following numbers before submitting your assignment:",
  "  \n  # Only use positive integers for fibfib\n  if n <= 0\n    return 0\n  end\n\
    \  \n  # Only use positive integers for fibfib\n  if n == 1\n    return 0\n  end\n\
    \  \n  # Only use positive integers for fibfib\n  if n == 2\n    return 1\n  end\n\
    \  \n  # Only use positive integers for fibfib\n  if n == 3\n    return 1\n  end\n\
    \  \n  # Use recursion\n  if n % 2 == 0\n    return fibfib(n-2) + fibfib(n-3)\n\
    \  else\n    return fibfib(n-1) + fibfib(n-2)\n  end\n  \nend\n</cell>\n<cell>",
  "\tresult = 0\n\tresult = result + fibfib(n-1)\n\tresult = result + fibfib(n-2)\n\
    \tresult = result + fibfib(n-3)\n\treturn result\n\t\t", "  return n==0 ? 0 :\
    \ fibfib(n-1) + fibfib(n-2)+fibfib(n-3)\nend", "  0\nend\n</cell>\n<cell>", " \
    \ if n <= 0\n    fibfib = 0\n  elsif n == 1\n    fibfib = 1\n  elsif n == 2\n\
    \    fibfib = 0\n  else\n    fibfib = (fibfib(n-1) + fibfib(n-2) + fibfib(n-3))\n\
    end", "  # Your code here\n  fib = 0\n  fib1 = 1\n  fib2 = 1\n  fib3 = 1\n  fib4\
    \ = fib\n  fib5 = fib1\n  fib6 = fib2\n  fib7 = fib3\n  fib8 = fib4\n  if n==1:\n\
    \    fibfib(n)\n  else:\n    fibfib(n-1)\n    fibfib(n-2)\n    fibfib(n-3)\n \
    \   fib = fib1+fib2+fib3\n    fib1 = fib4\n    fib2 = fib5\n    fib3 = fib6\n\
    \    fib4 = fib7\n    fib5 = fib8\n    fibfib(n)", "    \n    if n == 0 then 0\n\
    \    if n == 1 then 0\n    if n == 2 then 1\n    if n == 3 then 1\n    if n ==\
    \ 4 then 1\n    if n == 5 then 1\n    if n == 6 then 2\n    if n == 7 then 2\n\
    \    if n == 8 then 3\n    if n == 9 then 3\n    if n == 10 then 5\n    if n ==\
    \ 11 then 5\n    if n == 12 then 7\n    if n == 13 then 7\n    if n == 14 then\
    \ 11\n    if n == 15 then 11\n    if n == 16 then 13\n    if n == 17 then 13\n\
    \    if n == 18 then 17\n    if n == 19 then 17\n    if n == 20 then 19\n    if\
    \ n == 21 then 19\n    if n == 22 then 21\n    if n == 23 then 21\n    if n ==\
    \ 24 then 23\n    if n == 25 then 23\n    if n == 26 then 25\n    if n == 27 then\
    \ 25\n    if n == 28 then 27\n    if n == 29 then 27\n    if n == 30 then 29\n\
    \    if n == 31 then 29\n    if n == 32 then 31\n    if n == 33 then 31\n    if\
    \ n == 34 then 33\n    if n == 35 then 33\n    if n == 36 then 35\n    if n ==\
    \ 37 then 35\n    if n == 38 then 37\n    if n == 39 then 37\n    if n == 40 then\
    \ 39\n    if n == 41 then 39\n    if n == 42 then 41\n    if n == 43 then 41\n\
    \    if n == 44 then 43\n    if n == 45 then 43\n    if n == 46 then 45\n    if\
    \ n == 47 then 45\n    if n == 48 then 47\n    if n == 49 then 47\n    if n ==\
    \ 50 then 49\n    if n == 51 then 49\n    if n == 52 then 51\n    if n == 53 then\
    \ 51\n    if n == 54 then 53\n    if n == 55 then 53\n    if n == 56 then 55\n\
    \    if n == 57 then 55\n    if n == 58 then 57\n    if n == 59 then 57\n    if\
    \ n == 60 then 59\n    if n == 61 then 59\n    if n == 62 then 61\n    if n ==\
    \ 63 then 61\n    if n == 64 then 63\n    if n == 65 then 63\n    if n == 66 then\
    \ 65\n    if n == 67 then 65\n    if n == 68 then 67\n    if n == 69 then 67\n\
    \    if n == 70 then 69\n    if n == 71 then 69\n    if n == 72 then 71\n    if\
    \ n == 73 then 71\n    if n == 74 then 73\n    if n == 75 then 73\n    if n ==\
    \ 76 then 75\n    if n == 77 then 75\n    if n == 78 ", "  if n<=0\n    0\n  elsif\
    \ n==1\n    0\n  elsif n==2\n    1\n  elsif n>2\n    fibfib(n-1) + fibfib(n-2)\n\
    \  end\nend\n</cell>\n<cell>\nfibfib(2)\n</cell>\n<cell>", "    puts \"fibfib(#{n})\
    \ = \" + fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\nend", "\tif n == 0\n\t\t0\n\t\
    elsif n == 1\n\t\t0\n\telsif n == 2\n\t\t1\n\telsif n > 0\n\t\tfibfib(n - 1) +\
    \ fibfib(n - 2) + fibfib(n - 3)\n\tend\nend", "    # ...\nend\n</cell>\n<code\
    \ language=julia-1.5>\nfibfib(1)\n</cell>\n<code language=julia-1.5>\nfibfib(5)\n\
    </cell>\n<code language=julia-1.5>\nfibfib(8)\n</cell>\n<text>\nExercise: Problem\
    \ 7\nWrite a function that returns the nth number in the Fibonacci sequence and\
    \ print it on a new line.", "  num = 0\n  while num < n do\n    num = num + num\n\
    \  end\n  return num\nend", "  if n<=0\n    fibfib(n+1)=0\n  else\n    fibfib(n+1)=fibfib(n-1)+fibfib(n-2)\n\
    \  end\n  return fibfib(n+1)\nend", "  if n == 0\n    0\n  elsif n == 1\n    1\n\
    \  elsif n == 2\n    1\n  elsif n == 3\n    2\n  elsif n > 3\n    fibfib(n-3)\
    \ + fibfib(n-2) + fibfib(n-1)\n  end\nend\n</cell>\n<cell>", "    a, b = 0, 1\n\
    \    while b < n\n        a, b = b, a + b\n    end\n    a\nend\n</code>\n<|/ a\
    \ tags=ruby dscore=0 |>\n<| a tags=ruby |>\n<code>\nfib = (1..100000).to_a", " \
    \ if n<2\n    return 0\n  else\n    return fibfib(n-2) + fibfib(n-3)\n  ", " \
    \ fib = 0\n  fib = (fibfib(n-1) + fibfib(n-2) + fibfib(n-3))\n  return fib\n</cell>\n\
    <text>\nProblem 9: Fibonacci Numbers\nThe Fibonacci numbers are the numbers in\
    \ the following sequence, where the value at each step is:", "    a,b = 2,1\n\
    \    while a <= n do\n        print(a,b)\n        a,b = b,a+b\n    end\nend",
  end, "  nFib = 0\n  fibfib(nFib+1)\nend", "  fibonacci = Array.new(n)\n  fibonacci[0]\
    \ = 0\n  fibonacci[1] = 0\n  fibonacci[2] = 1\n  2.upto(n-1) do |i|\n    fibonacci[i]\
    \ = fibonacci[i-2] + fibonacci[i-3]\n  end\n  fibonacci[n]\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
