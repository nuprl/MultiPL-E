name: HumanEval_157_right_angle_triangle
language: rb
prompt: "# Given the lengths of the three sides of a triangle. Return True if the\
  \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
  \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n#\
  \ Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1, 2,\
  \ 3) == False\ndef right_angle_triangle(a, b, c)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
  \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
  \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
  \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
  \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
  \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
  \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
  \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
  \ 2, 10))\n  end\nend\n"
completions: ["\tb_sq = b ^ a\n\ta_sq = a ^ c\n\tc_sq = c ^ a\n\tc_sq = c ^ b\n\t\n\
    \tside_squares = [b_sq, a_sq, c_sq]\n\t\n\tif side_squares.include?(1)\n\t\treturn\
    \ true\n\telsif side_squares.include?(2)\n\t\treturn false\n\telsif side_squares.include?(3)\n\
    \t\treturn true\n\tend\nend", "  return (a**2 + b**2 == c**2) && (b**2 >= a**2\
    \ + c**2) && \n         (a**2 + b**2 >= c**2 + b**2)\nend\n</cell>\n<code language=julia-0.6>",
  "  (c-a).abs <= (b-c).abs and (c-a).abs <= (b+c).abs\nend", "  return (a**2 + b**2\
    \ >= c**2) and (a != b and b != c and abs(math.degrees(math.atan2(c-b, a-b)) -\
    \ 90) <= 180)\nend", "  return ((b**2-4*a*c) **0.5 == 0 and\n          ((b-2*a)\
    \ **0.5 == 0 or\n           (b-2*a) **0.5 == (2*b-2*a)))\n    ", "  \n  if((a\
    \ + b > c) && (a + c > b) && (b + c > a))\n    return true\n  return false", " \
    \ (a + b + c) == (a + c) - (b + c)\nend\n</cell>\n<code language=julia-1.0>",
  "  \n  return b * b - 4 * a * c == 1\nend", "  is_right_angle = a**2 + b**2 - c**2\
    \ > 0\n  \n  if is_right_angle\n    (a**2+b**2-c**2).odd?\n  end\nend", "  return\
    \ ((b**2) - (4*a*c)) < 0\nend", "  return ( a*b*c>0 and b*c>a and c>a**2 )\nend\n\
    </cell>\n<code language=julia-1.5>", "  a == b or a == c or b == c\nend", "  l1\
    \ = Math.sqrt( ((a+b)*(a+b)) + ((b+c)*(b+c)) )\n  l2 = Math.sqrt( ((a+c)*(a+c))\
    \ + ((c+b)*(c+b)) )\n  \n  if Math.abs(l1) > Math.abs(l2)\n    return true\n \
    \ else\n    return false\n  end\nend", "    ab=(a**2+b**2)**0.5\n    ac=(c**2+a**2)**0.5\n\
    \    bc=(b**2+c**2)**0.5\n    if(ab==ac and ab==bc)\n        return True\n   \
    \ elif(a>b and a>c)\n        return False\n    elif(b>c and b>a)\n        return\
    \ False\n    elif(ab>bc and ab>ac)\n        return True\n    else:\n        return\
    \ False", "    if a == b and a == c or a == c and b == c\n        return true\n\
    \    else\n        return false\n    end\nend", "  if( (a + b >= c) && (a + c\
    \ >= b) && (b + c >= a) )\n    return true\n  else\n    return false\nend", " \
    \ b_length, c_length = b, c\n  return ((b_length <= a_length and a_length <= c_length)\n\
    \      or (b_length <= c_length and c_length <= a_length)\n      or (a_length\
    \ <= b_length and b_length <= c_length))\nend", "    return ((a + b > c) and (b\
    \ + c > a) and (a + c > b)) or ((a == b or b == c or a == c) and (b != c and c\
    \ != a and b != a and a != c))\nend", "    right_1 = (b - c) * (180 / pi)\n  \
    \  right_2 = (b + c) * (180 / pi)\n    right_3 = sqrt(a**2 + b**2 + c**2 - a**2\
    \ - b**2 - c**2)\n    if right_1 == right_2 or (right_1 == 0 and right_2 == 0\
    \ and right_3 == 0):\n        return True\n    else:\n        return False\n</cell>\n\
    <cell>", "  return (a**2 + b**2 >= c**2 + a**2 and b**2 + c**2 >= a**2 and c**2\
    \ + a**2 >= b**2)\nend\n</cell>\n<code language=julia-1.5>\nright_angle_triangle(3,\
    \ 4, 5)\n</cell>\n<code language=julia-1.5>\nright_angle_triangle(1, 2, 3)\n</cell>\n\
    <text>\nNow that we have defined a function that determines whether a given triangle\
    \ is right-angled, we can implement a function that determines whether a given\
    \ line segment intersects a given triangle. The function should take as arguments\
    \ a line segment, a triangle defined by three sides, and its normal vector.",
  "\treturn (b**2+c**2 - (a**2)*(c - b)) < 0\nend", "  return (a * b * c) == (a ==\
    \ b or a == c or b == c) or abs(a - b) == abs(b - c)\nend\n</cell>\n<code language=julia-0.4>\n\
    @assert right_angle_triangle(3, 2, 4) == true\n@assert right_angle_triangle(4,\
    \ 3, 2) == false\n@assert right_angle_triangle(3, 4, 5) == true\n@assert right_angle_triangle(1,\
    \ 2, 3) == false\n</cell>\n<text>\n11.5 Quadratic Formula", "  if a == 0 # no\
    \ triangle is possible\n    return b == 0\n  return (b**2 + a*c - c**2) ** 0.5\
    \ <= 0\n  ", "  return (b * b) == (math.sqrt((c*c - a*a) * (b*b - a*a)))\nend",
  "    triangle_sides = a + b + c\n    if triangle_sides % 2 == 0 or triangle_sides\
    \ == 0 or triangle_sides == 1:\n        return True\n    else:\n        return\
    \ False", "  (a * b) >= (c * b)\nend", "  return((a * b) % 180 == (180 * a * b)\
    \ % 180 and\n          (90 - (a + b + c) % 180) == (90 - (a + c - b) % 180))",
  "  if a == 0 and b == 0 and c == 0\n    true\n  else if a == b\n    true\n  else\
    \ if a == c\n    true\n  else\n    false\n  end\nend", "  return (a==b and b==c\
    \ and abs(a-b)==abs(b-c)) or (a==b and b==c or a==c and b==c)\nend\n</cell>\n\
    <code language=julia-1.0>", "  return (a + b > c and a + c > b and b + c > a)\n\
    end", "    return (b ** 2) - (4 * a * c) >= 0\nend", "    return a==b and b==c\
    \ and (a!=c and a!=b and b!=c)\nend", "  if a < b < c\n    return a > b\n  elsif\
    \ b < c < a\n    return b > c\n  elsif c < b < a\n    return c > a\n  else\n \
    \   return false\n  end\nend\n</code>\n<|/ a tags=ruby,math,trigonometry |>\n\
    <| c |>\nHi if this or any answer has solved your question please consider [accepting\
    \ it](http://meta.stackexchange.com/q/5234/179419) by clicking the check-mark.\
    \ This indicates to the wider community that you've found a solution and gives\
    \ some reputation to both the answerer and yourself. There is no obligation to\
    \ do this.\n<|/ c |>\n<| a tags=ruby,math,trigonometry |>\nThe general way to\
    \ go about solving this question is to start by solving the equation for x and\
    \ solve for y. Once you've figured out how to solve the equation for x and y,\
    \ it's easy to solve the equation for y and plug that into your original equation.\n\
    The trick is to find a function that will map your three vertices into the plane\
    \ described by the equation. You can't just plug the function into your equation,\
    \ because it's not a unique mapping, so you'll have to write some code that checks\
    \ which function you're using.\nOne way to do this is by finding the angle of\
    \ the vector between the vectors p3-p1 and p2-p3. In other words, p1-p3 will map\
    \ into the vector from p1 to p3. Find the angle of this vector and you'll find\
    \ out which function you're using.\nOnce you figure out which function you're\
    \ using, it's pretty simple to code it in Ruby. Here's one way that works:\n<code>",
  "    if a + b > c\n        a + b\n        c + (a - b)\n        a + b - c\n     \
    \   a + b + c\n        b - c\n        return false\n    end\nend\n</code>\n<|/\
    \ a dscore=0 |>\n<| c |>\nI understand all that, but I can't figure out how to\
    \ do it. Please help!\n<|/ c |>\n<| c |>\nOkay, so I fixed the code so it works,\
    \ but its not returning the correct answer. Can you help?\n<|/ c |>\n<| c |>\n\
    If you fix your code that would be great. But right now it wont help anybody else.\
    \ Not even your teacher. If you cant figure it out then ask a specific question\
    \ or give us more information. No one is going to write this code for you. You\
    \ will just have to figure out how to do it yourself. Just some thoughts. \nIf\
    \ you dont know what the algorithm is i would recommend doing some research on\
    \ how to find the area of a triangle. http://en.wikipedia.org/wiki/Area_of_a_triangle\n\
    <|/ c |>\n<| c |>\nI understand the algorithm but I keep getting some weird output.\
    \ Like if I try to find the area of triangle 4, 5 and 7, it returns 45. I don't\
    \ know why.\n<|/ c |>\n<| c |>\nMy guess is your logic is wrong. Your logic is\
    \ correct for finding if the sides are right angled or 90 degrees. So if your\
    \ logic is correct then your logic is wrong.\n<|/ c |>\n<| a dscore=0 |>\nI came\
    \ here looking for a Ruby solution. I found this one from another SO post:\n<code>",
  "  right_side = (b * b) + (c * c)\n  triangle_side = (a * a) + (b * b)\n  triangle_side_root\
    \ = math.sqrt(triangle_side)\n  if triangle_side > 0 and triangle_side == right_side\
    \ and triangle_side == triangle_side_root\n    true\n  elsif triangle_side ==\
    \ 0\n    false\n  elsif triangle_side_root > 0 and right_side == 0\n    true\n\
    \  elsif triangle_side_root > 0 and right_side != 0\n    false\n  end\nend\n  ",
  "  (c-a)**2 + (b-a)**2 <= (c+b)**2\nend", "  return (b**2 + c**2 - a**2) < 0\nend\n\
    </cell>\n<code language=julia-1.5>\n@assert right_angle_triangle(3, 4, 5) == true\n\
    @assert right_angle_triangle(1, 2, 3) == false\n</cell>\n<text>\n11.5 Challenge\
    \ Solution", "  ((a <= b) and (b <= c) and ((b - a)*(c - b) <= 0))\nend", "\t\
    return (a == b and c == a) or (a == c and a == b) or (a == b and c == c)\nend",
  "  ab = abs(a-b)\n  ac = abs(a-c)\n  bc = abs(b-c)\n  return ((ab*bc == ac) or \n\
    \           (ab*ac == bc))\nend\n  ", "  right_angle = a * b + c * a + c * b -\
    \ a * b * c\n  right_angle < 0 ||\n    (right_angle == 0 && a * b > 0 && b * c\
    \ > 0)\nend\n</cell>\n<code language=julia-1.4>", "  d = (b - a) * (c - b)\n \
    \ e = Math.sqrt((b - a) * (b + c) - ((a - b) * (c - b))) #Pythagoras\n  return\
    \ d == e or d > e\nend\n</code>\nIt passes all the tests, but doesn't pass all\
    \ of them.\n<|/ q |>\n<| c |>\nYou cannot compute any meaningful metric in an\
    \ interval `[0,1]`, because it doesn't have real numbers. Your interval is too\
    \ small. Instead of measuring the distance from `[0,1]`, measure the distance\
    \ from your desired point: `p = (x0,y0)` => `dist = hypot(x0-x1,y0-y1)`.\n<|/\
    \ c |>\n<| c |>\nDo you have a specific metric that you're trying to minimize?\
    \ Perhaps that's your real problem. If so, please add that to the question. Even\
    \ better, give us some concrete examples showing the type of test data you're\
    \ trying to minimize.\n<|/ c |>\n<| c |>\nYou might want to read this: https://meta.stackoverflow.com/questions/334822/how-do-i-ask-and-answer-homework-questions\n\
    <|/ c |>\n<| a dscore=0 |>\nAs the comments say, this is not a good use case for\
    \ minimizing a function. But if you really want to minimize it, your algorithm\
    \ has a bug:\n<code>", "  return ( a**2 + b**2 == c**2 ) or ( 90 == (b**2 + c**2\
    \ - a**2) )\nend\n</cell>\n<code language=julia-0.5>\nright_angle_triangle(2,\
    \ 3, 4)\n</cell>\n<code language=julia-0.5>\nright_angle_triangle(3, 4, 5)\n</cell>\n\
    <text>\nThe sum of the squares of the first ten natural numbers is,\n$$1^2 + 2^2\
    \ + ... + 10^2 = 385$$\nThe square of the sum of the first ten natural numbers\
    \ is,\n$$(1 + 2 + ... + 10)^2 = 55^2 = 3025$$\nHence the difference between the\
    \ sum of the squares of the first ten\nnumbers and the square of the sum is $3025\
    \ \u2212 385 = 2640$.", "  b = b - a\n  c = c - a\n  s = (b ** 2) - (4 * (c **\
    \ 2))\n  u = (b ** 2) + (4 * (c ** 2))\n  if u != 0\n    s = (s / u)\n    if s\
    \ > 0\n      return True\n    else \n      return False\n  else \n    return True\n\
    end\n</code>\n<|/ a |>\n<| c |>\nI believe you meant `b - a` and `c - a` not `b\
    \ - c` and `c - b`\n<|/ c |>\n<| c |>\nThank you for pointing that out. I fixed\
    \ it!\n<|/ c |>\n<| a dscore=1 |>\n<code>", "  # Write your code here.\n  return\
    \ (((c-a)*(c-b)) - ((b-a)*(c-a)))/(2*a)==0 and (((c-b)*(c-a))-( (a-b)*(c-a)))/(2*a)==0\
    \ and (((b-a)*(c-a))-( (c-b)*(b-a)))/(2*a)==0 and (((b-c)*(b-a))-( (c-b)*(c-a)))/(2*a)==0\
    \ and (((b-c)*(c-a))-( (c-b)*(c-b)))/(2*a)==0 and (((b-a)*(c-b))-( (c-b)*(c-a)))/(2*a)==0\
    \ and (((b-a)*(c-a))-( (c-b)*(c-b)))/(2*a)==0 and (((c-a)*(c-b))-( (a-b)*(c-a)))/(2*a)==0\
    \ and (((c-b)*(c-a))-( (a-b)*(c-b)))/(2*a)==0 and (((c-a)*(c-a))-( (a-b)*(c-b)))/(2*a)==0\
    \ and (((c-b)*(c-a))-( (b-a)*(c-b)))/(2*a)==0 and (((c-a)*(c-b))-( (b-a)*(c-a)))/(2*a)==0\
    \ and (((c-b)*(c-a))-( (b-a)*(c-b)))/(2*a)==0 and (((b-c)*(b-a))-( (c-b)*(c-a)))/(2*a)==0\
    \ and (((b-c)*(c-a))-( (c-b)*(c-b)))/(2*a)==0 and (((b-a)*(c-b))-( (c-b)*(c-a)))/(2*a)==0\
    \ and (((b-a)*(c-a))-( (c-b)*(c-b)))/(2*a)==0 and (((c-a)*(c-b))-( (b-a)*(c-a)))/(2*a)==0\
    \ and (((c-b)*(c-a))-( (b-a)*(c-b)))/(2*a)==0 and (((c-a)*(c-a))-( (b-a)*(c-b)))/(2*a)==0\
    \ and (((c-b)*(c-a))-( (b-a)*(c-b)))/(2*a)==0\nend", "    triangle_sides = [a,\
    \ b, c]\n    triangle_sides.sort\n    \n    return triangle_sides[1] == triangle_sides[2]\n\
    end", "\treturn (b**2+c**2-a**2)**.5 == 0.0\nend\n</cell>\n<text>\nProblem 4",
  "    abs = math.fabs(a * b)\n    ac = math.fabs(c * b)\n    if abs < ac:\n     \
    \   return False\n    else:\n        return True\n        ", '  return (b - a)
    > (c-a) ', "  if b > c\n    c, b = b, c\n  end\n  \n  return (b == c and is_right_angle(a,\
    \ b, c))\nend", "   if a * b * c == 0 \n      return false\n   else \n      return\
    \ true\nend", "    # Your code here\n    if a + b <= c or b + c <= a or c + a\
    \ <= b\n        return true\n    else\n        return false\n    end\nend", " \
    \ return (a * b * c) == ((a * b) * c) or ((a + b) * c) == ((a + b) * c) or \\\n\
    \         ((a - b) * c) == ((a - b) * c)\nend", "  return (b ** 2 + c ** 2 - (a\
    \ ** 2) ** 2) == 0 \nend", "  sides = [a, b, c]\n  \n  # check if all sides are\
    \ positive\n  sum = sides.inject(:+) \n  return sides.all? { |s| s > 0 } if sum\
    \ == 0\n  \n  # check if all sides are equal\n  return sides.uniq.size == 1\n\
    end", "  sides = [a, b, c]\n  lengths = []\n  \n  # For each side of the triangle\n\
    \  side_a.each_with_index do |side, index|\n    # Add the length of each side\
    \ to the total sides \n    lengths[index] = side.length\n  end", "  d = b*b-a*c\n\
    \  return(d>0)\nend", "  a1 = b ** 2 - 4 * a * c \n  b1 = 2 * b * c \n  c1 = a\
    \ ** 2 - 4 * b * c \n  return ((b1 * b - 4 * a * c1) ** 2 - (a1 * a - 4 * b *\
    \ c1) ** 2) > 0\nend", "    ab = a * b\n    cb = c * b\n    ac = a * c\n    acb\
    \ = ac * b\n    return (ab + cb - acb) > 0\nend\n</cell>\n<code language=julia-1.5>\n\
    right_angle_triangle(3, 4, 5)\n</cell>\n<code language=julia-1.5>\nright_angle_triangle(1,\
    \ 2, 3)\n</cell>\n<code language=julia-1.5>", "  is_right_triangle = (a * b >=\
    \ c * b)\n  is_right_triangle_positive = (b >= 0)\n  return is_right_triangle\
    \ and is_right_triangle_positive\nend", "  if a + b > c or b + c > a or c + a\
    \ > b\n    return false\n  else\n    return true\nend", "    ab = a + b\n    bc\
    \ = b + c\n    ca = c + a\n    if ab == bc or bc ==ca or ca == ab\n        return\
    \ true\n    else\n        return false\n    end\nend", "  d = (a + b + c).to_f\n\
    \  return (d*(a + b)) > (a + c)\nend", "  x = (a*a + b*b - c*c - b*b)/(2*b*c)\n\
    \  return ((b*b*c + c*c*a - a*a*b) > 0)\nend", "  (a + b > c) || (a + c > b) ||\
    \ (b + c > a)\nend\n</cell>\n<text>\nProblem 3\nWrite a function that checks if\
    \ a triangle is equilateral or not.\nA triangle is equilateral if all three sides\
    \ are equal. It has four sides a, b, c, and is equilateral if \nthe sides are\
    \ equal and they are equal. If the sides are not equal then it is not equilateral.",
  "  if b == c and ((a + b >= c) or (a + c >= b) or (b + c >= a))\n    true\n  else\n\
    \    false\n  end\nend\n</cell>\n<cell>", "  x = ((b*b) - (4*a*c))/(2*a)\n  if\
    \ x == 0\n    return false\n  y = ((b*b) - (4*a*x))/(2*a)\n  if y == 0\n    return\
    \ false\n  if x <= 0 && y > 0\n    return true\n  if x <= 0 && y < 0\n    return\
    \ true\n  if x >= 0 && y > 0\n    return true\n  if x >= 0 && y < 0\n    return\
    \ false\n  return false\nend\n</code>\nNow that the triangle is defined, you can\
    \ simply define the function is_right_triangle. \n<code>", "  puts a, b, and c\
    \ if a * c + b * a == c * b\n  puts a, b, and c if a * c + b * b == c * a\n  puts\
    \ a, b, and c if a * c + b * a == c * b\n  puts a, b, and c if a * c + b * b ==\
    \ c * a\n  puts a, b, and c if a * c + b * a == c * b\n  puts a, b, and c if a\
    \ * c + b * b == c * a\n  puts a, b, and c if a * c + b * a == c * b\n  puts a,\
    \ b, and c if a * c + b * b == c * a\n  puts a, b, and c if a * c + b * a == c\
    \ * b\n  puts a, b, and c if a * c + b * b == c * a\n  puts a, b, and c if a *\
    \ c + b * a == c * b\n  puts a, b, and c if a * c + b * b == c * a\n  puts a,\
    \ b, and c if a * c + b * a == c * b\n  puts a, b, and c if a * c + b * b == c\
    \ * a\n  puts a, b, and c if a * c + b * a == c * b\n  puts a, b, and c if a *\
    \ c + b * b == c * a\n  puts a, b, and c if a * c + b * a == c * b\n  puts a,\
    \ b, and c if a * c + b * b == c * a\n  puts a, b, and c if a * c + b * a == c\
    \ * b\n  puts a, b, and c if a * c + b * b == c * a\n  puts a, b, and c if a *\
    \ c + b * a == c * b\n  puts a, b, and c if a * c + b * b == c * a\n  puts a,\
    \ b, and c if a * c + b * a == c * b\n  puts a, b, and c if a * c + b * b == c\
    \ * a\n  puts a, b, and c if a * c + b * a == c * b\n  puts a, b, and c if a *\
    \ c + b * b == c * a\n  puts a, b, and c if a * c + b * a == c * b\n  puts a,\
    \ b, and c if a * c + b * b == c * a\n  puts a, b, and c if a * c + b * a == c\
    \ * b\n  puts a, b, and c if a * c + b * b == c * a\n  puts a, b, and c if a *\
    \ c + b * a == c * b\n  puts a, b, and c if a * c + b * b == c * a\n  puts a,\
    \ b, and c if a * c + b * a == c * b\n  puts a, b, and c if a * c + b * b == c\
    \ * a\n  ", "  triangle_sides = [a, b, c]\n  count = 0\n  for i in triangle_sides\n\
    \    if i == 0\n      return true\n    elsif i == 3\n      return false\n    end\n\
    \    count += 1\n  end\nend\n</code>\n<|/ a tags=ruby dscore=0 |>\n<| a |>\nHere's\
    \ my solution with recursion:\n<code>", "    a, b, c = abs(a), abs(b), abs(c)\n\
    \    if a == 0 or b == 0 or c == 0\n        return false\n    if (b > c) \n  \
    \      return (c-a <= b - c) or (a-c <= b - a)\n    if (c > a)\n        return\
    \ (b-a <= c-b) or (a-b <= c-a)\n    # c = a + b\n    # c = a - b\n    return (b\
    \ - c) > 0\nend\n</code>\n<|/ a |>\n<| a dscore=1 |>\n<code>", "  (a + b > c)\
    \ == (a + c > b)\nend\n</cell>\n<code language=julia-1.0>", "  if a + b + c <=\
    \ 1\n    return false\n  else\n    return (Math.sqrt(a * a + b * b + c * c) >\
    \ math.pi/2)\nend", "  right_triangle = b <= a <= c\n  left_triangle = a <= b\
    \ <= c\n  right_angle = a <= b or b <= c or c <= a\n  left_angle = a <= b or b\
    \ <= c or c <= a\n  return right_triangle and left_triangle and right_angle and\
    \ left_angle\nend", "  (c-a)**2 + (b-a)**2 == (b+c)**2\nend", "  right_angle =\
    \ (a + b >= c) && (a + c >= b) && (b + c >= a)\n  return right_angle\nend", " \
    \   (c-a)*(c-a) + (c-b)*(c-b) == (c-c)*(c-c)\nend", "  return ((a + b > c) and\
    \ (a - b > c) and (a + c > b) and (a - c > b))\nend", "  ra = a/b\n  rb = c/b\n\
    \  rc = b\n  \n  # If the three sides are the same, the triangle is a right-angled\
    \ triangle.\n  return ra == rb == rc\nend", "    \n    return (a * 180 > b * 180\
    \ and b * 180 > c * 180)\n    ", "  # BEGIN Question 1\n  # Write code here\n\
    \  sides = [a, b, c]\n  \n  for i in sides\n    if i > (side ** (1/3))\n     \
    \ break\n  \n  return True\n  # END Question 1\n  \n  # BEGIN Question 2\n  #\
    \ Write code here\n  sides = [a, b, c]\n  \n  for i in sides\n    if i != (side\
    \ ** (1/3))\n      break\n  \n  return False\n  # END Question 2\n  \n  # BEGIN\
    \ Question 3\n  # Write code here\n  sides = [a, b, c]\n  \n  return sides[0]\
    \ == sides[1] == sides[2]\n  # END Question 3\n  \n  # BEGIN Question 4\n  # Write\
    \ code here\n  sides = [a, b, c]\n  \n  return (sides[0] + sides[1] + sides[2])\
    \ == (sides[0] ** 2 + sides[1] ** 2 + sides[2] ** 2)\n  # END Question 4\n  \n\
    \  # BEGIN Question 5\n  # Write code here\n  sides = [a, b, c]\n  \n  return\
    \ ((sides[0] ** 2 + sides[1] ** 2) + (sides[2] ** 2 + sides[3] ** 2)) == (sides[0]\
    \ + sides[1] + sides[2])\n  # END Question 5\n  \n  # BEGIN Question 6\n  # Write\
    \ code here\n  sides = [a, b, c]\n  \n  return ((sides[0] ** 2 + sides[1] ** 2)\
    \ + (sides[2] ** 2 + sides[3] ** 2)) == (sides[0] ** 2 + sides[2] ** 2 + sides[3]\
    \ ** 2)\n  # END Question 6\n  \n  # BEGIN Question 7\n  # Write code here\n \
    \ sides = [a, b, c]\n  \n  return ((sides[0] ** 2 + sides[1] ** 2) + (sides[2]\
    \ ** 2 + sides[3] ** 2)) == (sides[1] ** 2 + sides[2] ** 2 + sides[3] ** 2)\n\
    \  # END Question 7\n  \n  # BEGIN Question 8\n  # Write code here\n  sides =\
    \ [a, b, c]\n  \n  return ((sides[0] ** 2 + sides[1] ** 2) + (sides[2] ** 2 +\
    \ sides[3] ** 2)) == (sides[0] ** 2 + sides[2] ** 2 + sides[1] ** 2)\n  # END\
    \ Question 8\n  \n  # BEGIN Question 9\n  # Write code here\n  sides = [a, b,\
    \ c]\n  \n  return ((sides[0] ** 2 + sides[1] ** 2) + (sides[2] ** 2 + sides[3]\
    \ ** 2)) == (sides[2] ** 2 + sides[3] ** 2 + sides[0] ** 2)\n  # END Question\
    \ 9\n  \n  # BEGIN Question 10\n  # Write code here\n  sides = [a, b, c]\n  \n\
    \  return ((sides[0] ** 2 + sides[1] ** 2) + (sides[2]", "  triangle_lengths =\
    \ [a, b, c]\n  triangle_length_set = triangle_lengths.to_set\n  if triangle_length_set.size\
    \ == 3 # only three sides form a right angle triangle\n    triangle_1 = triangle_length_set\n\
    \    triangle_2 = triangle_length_set.reverse\n    triangle_3 = triangle_length_set.reverse\
    \ + triangle_length_set\n    triangle_length_set.each do |length|\n      if length\
    \ < 90 # if length of a triangle is less than 90 degree\n        triangle_1 =\
    \ triangle_1 + triangle_2\n        triangle_2 = triangle_1 + triangle_3\n    \
    \    triangle_3 = triangle_1 + triangle_3\n      end\n    end\n    if triangle_1[1]\
    \ + triangle_2[2] > triangle_1[2] + triangle_2[1]\n      return true\n    else\n\
    \      return false\n    end\n  end\nend\n</code>\nOutput:\n<code>\nright_angle_triangle(3,\
    \ 4, 5)\n=> true\nright_angle_triangle(1, 2, 3)\n=> false\n</code>\n<|/ a tags=ruby,math,algorithm\
    \ |>\n<| c |>\nWhat is the complexity of the code? I see `O(n)` here, is this\
    \ `O(n)` as well ? I am asking because I am trying to solve this problem on LeetCode\
    \ and it is not accepting my code. Maybe I should consider using another approach?\n\
    <|/ c |>\n<| c |>\nI guess it is O(n) only. See the [link](https://stackoverflow.com/questions/18608788/how-do-i-determine-if-a-given-number-of-sides-is-a-right-triangle/18608997?noredirect=1#18608997)\
    \ I provided for a discussion on a similar problem\n<|/ c |>\n<| c |>\nPlease\
    \ do not post answers consisting of only a link to another SO question, even if\
    \ that question is related.\n<|/ c |>\n<| a dscore=1 |>\n<code>", "    if abs(b-a)\
    \ >= abs(c-b) and abs(c-b) >= abs(a-c) then\n        return true\n    else\n \
    \       return false\n    end\nend", "    \n    difference = (a * 2) - (b * 3)\
    \ + (c * 2)\n    return difference < 0\n    ", "  return (b ** 2) + (c ** 2) -\
    \ (a ** 2) - (a * b) - (b * c) >= 0\nend\n</cell>\n<code language=julia-0.5>\n\
    right_angle_triangle(1, 2, 3)\n</cell>\n<code language=julia-0.5>", "  if a +\
    \ b >= c or a + c >= b or b + c >= a\n    return false\n  end\n  return true\n\
    end", "  if a + b > c or c + b > a or a + c > b or b + c > a\n    false\n  end\n\
    end\n</code>\nSolution 2:\nUsing a double for loop and a variable:\n<code>", " \
    \ d = 3 - 2*a*b\n  e = a*b*b - d*c\n  f = b*b*c - a*a*c\n  return e == 0 and f\
    \ == 0 or d >= 0\nend", "    # Write your code here.\n    return ((a > b and b\
    \ > c) or (a > c and c > b) or (b > a and c > a))", "\t\n\ta = abs(a)\n\tb = abs(b)\n\
    \tc = abs(c)\n\t\n\tif b > a\n\t\treturn False\n\tend\n\t\n\tif c > b\n\t\treturn\
    \ False\n\tend\n\t\n\tif a == 0 and b == 0 and c == 0\n\t\treturn False\n\tend\n\
    \t\n\tif a != 0 and b == 0 and c == 0 \n\t\treturn False\n\tend\n\t\n\tif a !=\
    \ 0 and c != 0 and b != 0\n\t\treturn False\n\tend\n\t\n\tif a == 0 and b != 0\
    \ and c != 0\n\t\treturn False\n\tend\n\t\n\tif a == 0 and b != 0 and c == 0\n\
    \t\treturn False\n\tend\n\t\n\tif a != 0 and b != 0 and c == 0 \n\t\treturn False\n\
    \tend\n\t\n\tif a != 0 and c != 0 and b == 0\n\t\treturn False\n\tend\n\t\n\t\
    if a == 0 and c != 0 and b != 0\n\t\treturn False\n\tend\n\t\n\tif a != 0 and\
    \ b == 0 and c == 0 \n\t\treturn False\n\tend\n\t\n\tif a == 0 and b == 0 and\
    \ c == 0 \n\t\treturn False\n\tend\n\t\n\tif a != 0 and c != 0 and b == 0\n\t\t\
    return False\n\tend\n\t\n\tif a != 0 and b == 0 and c != 0 \n\t\treturn False\n\
    \tend\n\t\n\tif a != 0 and c != 0 and b != 0 \n\t\treturn False\n\tend\n\t\n\t\
    if a == 0 and b != 0 and c != 0\n\t\treturn False\n\tend\n\t\n\tif a == 0 and\
    \ b != 0 and c == 0\n\t\treturn False\n\tend\n\t\n\tif a != 0 and b != 0 and c\
    \ == 0 \n\t\treturn False\n\tend\n\t\n\tif a != 0 and c != 0 and b == 0\n\t\t\
    return False\n\tend\n\t\n\tif a != 0 and c != 0 and b != 0 \n\t\treturn False\n\
    \tend\n\t\n\tif a == 0 and c != 0 and b != 0\n\t\treturn False\n\tend\n\t\n\t\
    if a != 0 and b == 0 and c == 0 \n\t\treturn False\n\tend\n\t\n\tif a == 0 and\
    \ b != 0 and c == 0 \n\t\treturn False\n\tend\n\t\n\tif a != 0 and c != 0 and\
    \ b == 0\n\t\treturn False\n\tend\n\t\n\tif a != 0 and b == 0 and c != 0 \n\t\t\
    return False\n\tend\n\t\n\tif a != 0 and c != 0 and b != 0 \n\t\treturn False\n\
    \tend\n\t\n\tif a == 0 and b != 0 and c != 0\n\t\treturn False\n\tend\n\t\n\t\
    if a == 0 and b != 0 and c == 0\n\t\treturn False\n\tend\n\t", "  \n  if b==c\
    \ and a==c then\n    return true\n  end\n  \n  if a==b or b==c or a == c then\n\
    \    return false\n  end\n  \n  ab = abs(b-a)\n  bc = abs(c-b)\n  ac = abs(c-a)\n\
    \  \n  if a>b and a>c then\n    if b > c then\n      return true\n    else\n \
    \     return false\n    end\n  else\n    if b>c then\n      return false\n   \
    \ else\n      if c > a then\n        return true\n      else\n        return false\n\
    \      end\n    end\n  end\n  \n  if ab > bc and ab > ac then\n    return true\n\
    \  else\n    return false\n  end\nend\n</code>\n<|/ a |>\n<| a tags=java,ruby,c,math,algorithm\
    \ |>\nI wrote a solution in Java. Here is the Ruby implementation.\n<code>", " \
    \   right_angle = (abs(b**2 - 4*a*c)) % abs(2*a)\n    return ((b == 0 and abs(c)\
    \ == abs(a))\n                or (b != 0 and right_angle <= 180))\nend\n</code>\n\
    <|/ a dscore=2 |>\n<| a dscore=2 |>\nHere is another solution using trig functions:\n\
    <code>", "  return (((a*b + c*c - b*c) >= 0) and \n          (b*b - a*a - c*c\
    \ >= 0)) \nend", "  # Write your code here\n  sideA = a - b\n  sideB = c - b\n\
    \  sideC = c - a\n  \n  triangle_sides = [sideA, sideB, sideC]\n  triangle_sides.each\
    \ do |side|\n    if side > 90 \n      return false\n    end\n  end\n  return true\n\
    end\n</cell>\n<cell>\nputs right_angle_triangle(3, 4, 5)\n</cell>\n<cell>\nputs\
    \ right_angle_triangle(1, 2, 3)\n</cell>\n<cell>\nputs right_angle_triangle(3,\
    \ 2, 1)\n</cell>\n<cell>\nputs right_angle_triangle(3, 4, 3)\n</cell>\n<cell>\n\
    puts right_angle_triangle(3, 4, 5)\n</cell>\n<cell>", "    \n    # Write your\
    \ code here.", "  triangle_length = a + b + c\n  return triangle_length / float(3)\
    \ == b / float(3)\nend", "  ab = a - b\n  ac = c - a\n  abc = ab * ac\n  return\
    \ ab == abc and ac == 0\nend", "  return ((b*b + c*c - a*a)/(2*a*c))>0\nend",
  "  return (((b ** 2) + (c ** 2)) ** (1/2)).eql?(a + b + c)\nend", "    # Write your\
    \ solution here.\n    tri = (a + b + c)/2\n    sides = (a, b, c)\n    return tri\
    \ == sum(sides) + min(sides)\nend", "  # Write your code here.\n  if a == 0 and\
    \ b == 0 and c == 0 then\n    return True\n  else\n    if a == b and  a == c then\n\
    \      return True\n    elsif a == c and  a == b then\n      return True\n   \
    \ elsif b == c and  b == a then\n      return True\n    elsif b == c and  b ==\
    \ a then\n      return True\n    elsif c == b and  c == a then\n      return True\n\
    \    elsif c == c and  c == a then\n      return True\n    elsif a == a and  a\
    \ == b then\n      return True\n    elsif a == b and  a == c then\n      return\
    \ True\n    elsif a == c and  a == b then\n      return True\n    elsif b == c\
    \ and  b == a then\n      return True\n    elsif b == c and  b == a then\n   \
    \   return True\n    elsif c == b and  c == a then\n      return True\n    elsif\
    \ c == c and  c == a then\n      return True\n    else false\n  end\nend", " \
    \ return (b*b + c*c - (a*a))/(2.0*a*c)\nend\n</cell>\n<code language=julia-0.6>\n\
    @time right_angle_triangle(3, 4, 5)\n</cell>\n<code language=julia-0.6>", "  (c-a).abs\
    \ == 0\n  (c-b).abs == 0\n  (c-c).abs == 0\n  ( (b**2).to_s + a**2.to_s + c**2.to_s\
    \ ).to_f == (a+b+c).to_f\nend", "    if a == 0 and b == 0 and c == 0\n       \
    \ return true\n    end", "  a**2+b**2 == c**2\nend", "    ab = a-b\n    ac = a-c\n\
    \    bc = b-c\n    return ab == bc or ab == ac or bc == ac\nend", "  return b**2+c**2>(a**2+b**2)\n\
    end", "  if a * b > c * a or b * c > a * b \n    puts \"Your triangle is not right\
    \ angle.\"\n  else\n    puts \"Your triangle is right angle.\"\n  end\nend", " \
    \ return ( a == b and b == c or a == c and b == c )\nend", "    \n    triangle_sides\
    \ = [a, b, c]\n    \n    total = 0\n    for angle in triangle_sides\n        total\
    \ += angle\n    \n    \n    return True if total == (180 - b + c) else False",
  "  d = (a + b + c) / 2.0\n  e = b - c\n  f = (a * b) / 2.0\n  g = math.sqrt(a*a\
    \ + b*b + c*c)\n  return d == e and d != 0 and e == f and g > 0\nend", "  r1 =\
    \ a*b*c\n  r2 = b*b*c\n  r3 = c*c*c\n  r = r1 + r2 + r3\n  return (r == r1)\n\
    end\n</cell>\n<code language=julia-1.0>", "  return (a*a + b*b + c*c <= 1 + 4*a\
    \ + 4*b + 4*c)\nend", "  sides = [a, b, c]\n  total = 0\n  for i in sides\n  \
    \  total += i\n  end\n  return total % 180 == 0\nend\n</code>\n<|/ a tags=ruby,triangle\
    \ |>\n<| c |>\nI like your solution, but the method should return true or false\
    \ rather than true or 1. Your solution should return false for a right-angled\
    \ triangle with a length of 1. Your method should return true for a right-angled\
    \ triangle with a length of 3.\n<|/ c |>\n<| c |>\nYes, you're right. I just realised\
    \ this after posting my answer. I edited my answer to fix this.\n<|/ c |>\n<|\
    \ a tags=ruby,triangle |>\nThis should work for you\n<code>", "    if a == 0 and\
    \ b > 0 and c > 0 then\n        if ((a + b) > c and (b - c) > 0) then\n      \
    \      if b - c > a then\n                return true\n            else\n    \
    \            return false\n            end if\n        else\n            if b\
    \ + c > a then\n                return true\n            else\n              \
    \  return false\n            end if\n        end if\n    else if a > 0 and b >\
    \ 0 and c > 0 then\n        if ((a - b) > c and (b + c) > 0) then\n          \
    \  if b - c > a then\n                return true\n            else\n        \
    \        return false\n            end if\n        else\n            if b + c\
    \ > a then\n                return true\n            else\n                return\
    \ false\n            end if\n        end if\n    end if\n    return false\nend\
    \ function\n</code>\n<|/ a tags=java,if-statement,loops,boolean |>\n<| c |>\n\
    Thank you for your response. I will give this a shot when I get home from work.\
    \ As far as I know, this is Java so there shouldn't be any problems with the language.\
    \ Sorry if I made you think this was C but I have been coding in C and Java for\
    \ over a decade. Thank you for your help, though. I appreciate it.\n<|/ c |>\n\
    <| c |>\nI see no reason why this shouldn't work with java. It works perfectly\
    \ for me. \nI did have to add an extra closing `end` at the end of the program\n\
    <|/ c |>\n<| c |>\nWhen I try to run this program it is giving me an error \"\
    unexpected token: 'end'\" on the line with the if statement. Did you run your\
    \ program exactly as I wrote it? Also, where did you get the \"rightSide\" function\
    \ from? Thank you!\n<|/ c |>\n<| c |>\nI wrote that in Java before my time and\
    \ didn't test it on any Java version (I didn't have to). The function right side\
    \ I got from Wikipedia https://en.wikipedia.org/wiki/Triangle#Determining_the_right_side_of_a_triangle\
    \ I guess that's a typo\n<|/ c |>\n<| c |>\nI believe you that it is because I\
    \ typed it in without proper indentation. I did copy and paste the code you provided\
    \ and it works now. I appreciate your help and I appreciate your time with this.\
    \ Thank you!\n<|/ c |>\n<| a |>\nHere's a more readable solution:\n<code>\npublic\
    \ class Triangle {\n    private final double a;\n    private final double b;\n\
    \    private final double c;\n    private final double sideLength;", "  # Write\
    \ your code here.\n  return ( b < c and a > c )\nend", "  ab = (b ** 2) - (a **\
    \ 2)\n  bc = (c ** 2) - (b ** 2)\n  \n  if ab == 0 # no hypotenuse means right\
    \ angle\n    return true\n  \n  ac = (c ** 2) - (a ** 2)\n  \n  if ac == 0 # no\
    \ adjacent hypotenuse\n    return false\n  \n  r2 = ab / ac # get hypotenuse ratio\n\
    \  \n  if r2 == -1 # triangles are right angled if hypotenuse ratio is -1\n  \
    \  return true\n  \n  if r2 > 1 # triangles are right angled if hypotenuse ratio\
    \ is greater than 1\n    return false\n  \n  r3 = 1 / r2 # get adjacent hypotenuse\
    \ ratio\n  \n  if r3 > 1 # triangles are right angled if adjacent hypotenuse ratio\
    \ is greater than 1\n    return false\n  return true\nend", "  return (b^c^a^(c+b+a))%100\
    \ == 0\nend\n</cell>\n<code language=julia-1.0>\nright_angle_triangle(3, 4, 5)\n\
    </cell>\n<code language=julia-1.0>\nright_angle_triangle(1, 2, 3)\n</cell>\n<code\
    \ language=julia-1.0>", "  return (b ** 2) - (4 * a * c) > 0 or (b ** 2) - (4\
    \ * a * c) < 0\nend", "    \n    # Write your code here.\n    \n    a_side, b_side,\
    \ c_side = a, b, c\n    ab_sinc = b_side * a_side\n    bc_sinc = c_side * b_side\n\
    \    ca_sinc = a_side * c_side\n    \n    ab_cos = ab_sinc / math.sqrt(((ab_sinc**2)\
    \ + (bc_sinc**2) + (ca_sinc**2))**0.5)\n    bc_cos = bc_sinc / math.sqrt(((ab_sinc**2)\
    \ + (bc_sinc**2) + (ca_sinc**2))**0.5)\n    ca_cos = ca_sinc / math.sqrt(((ab_sinc**2)\
    \ + (bc_sinc**2) + (ca_sinc**2))**0.5)", "    # Write your code here.\n    if\
    \ b == c or a == c or b == c\n        return true\n    else\n        return false\n\
    \    end\nend\n</code>\n<|/ a tags=ruby |>\n<| a |>\nAn other solution:\n<code>",
  "  return (b**2 + c**2 <= (a**2 + b**2))\nend", "  return (b**2 + c**2 == a**2 +\
    \ b**2) or (a**2 + c**2 == b**2 + a**2)\nend\n</cell>\n<code language=julia-1.3>",
  "    (a, b, c) == (a < b, b < c, c < a) or \\\n                 (a == b and b ==\
    \ c and a == c)\nend", "  return (b**2 + c**2 - (a**2 + b**2) * (a * c + b * c)\
    \ > 0)\nend", "  if a == b and c == a\n    return true\n  if a == b and c == b\n\
    \    return true\n  if a == b and c == c\n    return true\n  if a == c or b ==\
    \ c or c == c\n    return false\n  if a == b or a == c or b == c\n    return false\n\
    \  if a != b and a != c and b != c\n    return false\n  return true\nend", " \
    \   ab = a * b\n    ac = a * c\n    bc = b * c\n    return ((ab <= ac and bc >=\
    \ ab) or (bc <= ac and ab >= bc))", "  ab, bc, ac = a + b + c, b + c, c + a\n\
    \  return ((ab < bc + ac) and (bc < ac + ab)) or ((ab > bc + ac) and (bc > ac\
    \ + ab))\nend", "\tif b <= a or c <= b\n\t\treturn false\n\telse\n\t\tif b >=\
    \ c then\n\t\t\tif b - a > c - b then\n\t\t\t\treturn true\n\t\t\telse\n\t\t\t\
    \treturn false\n\t\t\tend\n\t\telse\n\t\t\tif c - b > a - c then\n\t\t\t\treturn\
    \ true\n\t\t\telse\n\t\t\t\treturn false\n\t\t\tend\n\t\tend\n\tend\nend", "\t\
    sides = [a, b, c]\n\tfor i in 0...3\n\t\tif sides[i]*sides[i+1] <= 0 || sides[i]*sides[i+2]\
    \ <= 0\n\t\t\treturn false\n\ttrue\nend\n</cell>\n<cell>", "  \n  # TODO: raise\
    \ a helpful error message if the input sides do not form a right angled triangle\n\
    \  # a <= b and b <= c\n  # a >= b and b >= c\n  \n  # TODO: return the result\n\
    \  true\nend", "  (lengthA - b) * (c - a) = lengthA * lengthB * lengthC\n  if\
    \ lengthA > lengthC\n    (lengthA - c) * (b - a) = lengthA * lengthC * lengthB\n\
    \  else\n    (lengthC - a) * (b - c) = lengthC * lengthA * lengthB\n  if lengthA\
    \ > lengthB\n    (lengthA - b) * (c - a) = lengthA * lengthC * lengthB\n  else\n\
    \    (lengthB - c) * (a - b) = lengthB * lengthC * lengthA\n  return a > b and\
    \ a > c\nend\n</cell>\n<code language=julia-0.5>", "  # Write your solution here.\n\
    \  return a*b*c+b*c*a+c*a*b == 0\nend", "  if a * b > c * a + b * c \n    puts\
    \ \"NO\"\n  else \n    puts \"YES\"\n  end\nend", "  puts \"#{a}###{b}####{c}\"\
    \n  puts \"#{a}###{c}####{b}\"\n  puts \"#{b}####{c}###{a}\"\n  puts \"#{b}####{a}###{c}\"\
    \n  puts \"#{c}###{a}####{b}\"\n  puts \"#{c}###{b}####{a}\"\nend", "  if a*a\
    \ + b*b == c*c\n    (a+b+c) == 90\n  else\n    False\n  end\nend", "    rad =\
    \ math.acos((float(a*a + b*b + c*c)/2) / (2*a*b))\n    if rad > 1.57 or rad <\
    \ -1.57\n        return false\n    return true\nend\n</cell>\n<code language=julia-0.5>",
  "  return ((b*b - 4*a*c) <= 0) or (((b*b - 4*a*c) >= 0) and (((b*b + 4*a*c)/(2*a))\
    \ >= 0))\nend", "\treturn (a * a + b * b == c * c and\n\t\ta * a + c * c == a\
    \ * b * b and\n\t\tb * b - a * a == 0)\nend", "  return (c-a)*(c-a)*(a-b)*(a-b)\
    \ == b*b*b*c\nend", "  return (b ** 2 + c ** 2) ** 0.5 <= (a * b + c) ** 0.5\n\
    end\n</cell>\n<code language=julia-1.5>", "  (a, b, c) == (b, c) or (b, c, a)\n\
    \  return (b ** 2 + c ** 2) - (a ** 2) - (c ** 2) == 0\nend", "  ( a == b or a\
    \ == c or b == c ) ? true : false\nend", "  ab=a-b\n  bc=c-b\n  ac=a-c\n  return\
    \ ab==bc==ac\nend\n</cell>\n<code language=julia-0.5>\nright_angle_triangle(3,\
    \ 4, 5)\n</cell>\n<code language=julia-0.5>\nright_angle_triangle(1, 2, 3)\n</cell>\n\
    <code language=julia-0.5>", "  (a * b * c) == (a + b + c) * (a + b + c) * 0.5\n\
    end", "  if a + b > c\n    if a + c > b\n      if b + c > a\n        return true\n\
    \      end\n    end\n  end\n  return false\nend", "  ab = b - a\n  ac = c - a\n\
    \  \n  abc = ab*ac\n  \n  return ((abc >= 0) and (abc <= 180))\nend", "  if a\
    \ == c or a == b or b == c\n    return false\n  if a > c and b > c\n    return\
    \ true\n  if a > b and b > c\n    return false\n  if a > b and c > b\n    return\
    \ true\n  if b > a and c > a\n    return false\nend\n</code>\n<|/ a tags=ruby\
    \ |>\n<| c |>\nthanks for answering! but i dont understand what to do. can you\
    \ please explain to me what to do?\n<|/ c |>\n<| c |>\nOh so you did this on paper\
    \ beforehand and now you are stuck? Well, okay then, sorry I didn't know you did\
    \ this on paper. I'll try to help you out!\n<|/ c |>\n<| c |>\nokay, thanks. I've\
    \ got the idea. I've never learnt ruby before.\n<|/ c |>\n<| c |>\n: It might\
    \ help to consider a triangle to be the sum of three sides, and any two of the\
    \ three sides being a right angle. The right angle is when any two of the sides\
    \ is either both greater than or both smaller than the third, or both equal to\
    \ or both less than the third. So, if your triangle has three sides of length\
    \ a, b, c, the triangle has three sides of length a, b, or c, (any of which is\
    \ not a right angle).\n<|/ c |>\n<| c |>\n: Thanks for that. I was looking at\
    \ it like that in my head. I updated my answer to include this new interpretation.\n\
    <|/ c |>\n<| a tags=ruby |>\n<code>", "  puts \"Calculating right angled triangle...\"\
    \n  \n  # Use of ternary operator. \n  # Triangle is either right angle or 90\
    \ degree.\n  # \"a == b or a == c or b == c\" returns true if all three sides\
    \ are equal\n  triangle_angle_is_right_angle = a == b || a == c || b == c\n  \n\
    \  if triangle_angle_is_right_angle\n    puts \"Right-angled triangle is formed\"\
    \n  else\n    puts \"Not a right-angled triangle\"\n  end\nend", "  return b ==\
    \ (c-a) or c == (a-b)\nend\n</cell>\n<code language=julia-1.5>", "    return a\
    \ == b or a == c or b == c or is_right_angled_triangle(a, b, c)\nend\n</cell>\n\
    <code language=julia-1.0>", "  if a * b > c * b \n    \n    true\n  else\n   \
    \ false\n  end\nend\n</code>\n<|/ q dscore=0 |>\n<| c |>\n`if a * b > c * b `\
    \ will always be true. `if a * b < c * b` will be true if one angle is less than\
    \ the other and both angles are the same or both are the same and both angles\
    \ are greater than the other. `if a * b < c * b && a != c` will be true if both\
    \ angles are the same and one angle is greater than the other. `if a * b < c *\
    \ b or a == c` will be true if the both angles are the same or the angles are\
    \ both greater than the other.\n<|/ c |>\n<| c |>\nWhat is the test case that\
    \ fails?\n<|/ c |>\n<| c |>\nI assume you're trying to see if a triangle is right.\
    \ Is that correct? Your code looks to me like it's just testing if the two sides\
    \ are equal. If you want to check if either is greater than the other, you need\
    \ to use `<` instead of `>`\n<|/ c |>\n<| c |>\nYour code checks whether the three\
    \ sides are equal, or if one side is greater than the other. Did you mean to check\
    \ if either of them is greater than the other?\n<|/ c |>\n<| c |>\nYes that's\
    \ right, the test case fails, when given the same numbers for a, b, and c as in\
    \ the example above\n<|/ c |>\n<| a tags=ruby dscore=1 |>\nYou could write it\
    \ like this (using the method definition from your question):\n<code>", "\tab_d\
    \ = b * b - 4 * a * c\n\ta_cb = a - 2 * b * c\n\tab_c = ab_c / 2\n\treturn ab_c\
    \ == 0 and ab_d == 0 and a_cb >= 0\nend", "  if b > a > c or b > c > a\n  then\
    \ return false\n  else return true\nend", "\tabc = (a**2+b**2+c**2)**0.5\n\treturn\
    \ ((abc-((a+b+c)/2)**2)**0.5 < 1)\nend", "  ab = abs(b - a)\n  ac = abs(c - a)\n\
    \  \n  if ab < ac then return true\n  if ac < ab then return false\n  \n  return\
    \ true\nend", "  (((b - a) * (c - b)) > 0)\nend", "  \n  side1 = abs(a) + abs(b)\
    \ + abs(c)\n  side2 = abs(a) * abs(b) * abs(c)\n  \n  return side1 == side2 or\
    \ side2 == side1 or side1 == side2\nend\n</cell>\n<code language=julia-1.5>",
  "    if a <= 0 or b <= 0 or c <= 0\n        false\n    elsif a + b <= c or b + c\
    \ <= a or a + c <= b\n        false\n    else\n        a = (a * 3) / 2\n     \
    \   b = (b * 3) / 2\n        c = (c * 3) / 2\n        \n        if ((a + b) >\
    \ c) and ((b + c) > a) and ((a + c) > b)\n            true\n        else\n   \
    \         false\n        end\n    end\nend\n</cell>\n<cell>", "  ab = [a, b]\n\
    \  ac = [a, c]\n  bc = [b, b, c]\n  abc, bcc = ab.product(ac), bc.product(bc)\n\
    \  return abc.count(0) == 3\nend", "  if b < a <= c\n  then return True\n  else\
    \ return False\n  end\nend", "  if a > b and a > c or b > c and b > a or c > a\
    \ and c > b\n    puts True\n  else\n    puts False\n  end\nend\n</code>\n<|/ a\
    \ dscore=0 tags=ruby,ruby-on-rails,ruby-on-rails-4 |>\n<| a dscore=0 tags=ruby,ruby-on-rails,ruby-on-rails-4\
    \ |>\nThis should work as long as the three sides are different:\n<code>", " \
    \ if abs(a * b - c * c) == 0 \n    return a == b or a == c\n  else\n    return\
    \ false\n  end\nend", "  ab, bc, ac = a + b, b + c, c + a\n  ac, ab, bc = ac -\
    \ ab, bc - ab, ac - bc\n  if ab % 2 == 0 and bc % 2 == 0 and ac % 2 == 0 and bc\
    \ % 2 == 0 and a != 0 and b != 0 and c != 0 and a != c and b != c and c != a\n\
    \    return true\n  else\n    return false\n  end\nend\n</code>\n<|/ a tags=ruby\
    \ |>\n<| a |>\nHere is one using recursion:\n<code>", "  ab = abs(a-b)\n  ac =\
    \ abs(a-c)\n  bc = abs(b-c)\n  acb = ab*bc\n  acc = ac*ac\n  return acb == ac*(b+c)\
    \ and acb == (b*a-c*b)/ab", "   return (a <= b <= c) or (a == b || a == c || b\
    \ == c)\nend\n</code>\nI believe that this is the most intuitive solution to the\
    \ question I asked. The code I have above is a different solution to the same\
    \ problem as below. It was suggested to me that this is the same as my first solution\
    \ above:\n<code>", "\treturn (b**2 - 4*a*c) >= 0\nend", "  # Write your code here.\n\
    \  if a * b > c * a\n    puts \"#{a} * #{b} == #{c} * #{a}\"\n  elsif a * b <\
    \ c * a\n    puts \"#{a} * #{b} == #{c} * #{b}\"\n  else\n    puts \"#{a} * #{b}\
    \ == #{c} * #{b}\"\n  end\nend", "  if a == b or c == b then\n    return true\n\
    \  else\n    return false\n  end\nend", "    if b**2 + a*c < c**2 + b*a\n    \t\
    return true\n    end\n    return false\nend", "  ab = abs(b - a)\n  ac = abs(c\
    \ - a)\n  return ab + ac == ab \nend\n</code>\n<|/ a dscore=2 |>\n<| a dscore=2\
    \ |>\n<code>", "  ab, ac, ad = a*a, b*c, c*d\n  ac = ac + (ab/ab-ad/ad)\n  d =\
    \ ab*ad\n  e = (a*a + b*b - c*c - d*d)**0.5\n  return e>0\nend", "  # Write your\
    \ code here.\n  return ((a == b) & (b == c)) or ((a == c) & (b == c)) or ((b ==\
    \ c) & (a == c))", "    \n    a1, b1, c1 = a % c, b % c, c % c\n    \n    if a1\
    \ * b2 != c1:\n        return True\n    return False\n    ", "  if a == 0 and\
    \ b == 0 and c == 0\n    true\n  else\n    if a == 0 and b > 0 and c > 0\n   \
    \   false\n    elsif b == 0 and c > 0 and a > 0\n      false\n    elsif a > 0\
    \ and b > 0 and c > 0\n      true\n    else\n      false\n    end\n  end\nend\n\
    </code>\nAnd now for the meat!\n<code>", "  if a == 0 and b == 0 and c == 0 then\n\
    \      return true\n  end\n  return false\nend", "\treturn ((a*b + b*c - c*b -\
    \ a*c) / 2.0).abs < 0.001\nend", "  ab = sqrt (a * b + c * 2)\n  ac = sqrt (a\
    \ * c + b * 2)\n  cb = sqrt (c * b + a * 2)\n  ab_cb = sqrt (ab * cb)\n  a_cb\
    \ = sqrt (a * cb)\n  a_cb_ab = sqrt (a * cb * a)\n  ac_cb_ab = sqrt (ac * cb *\
    \ ab)\n  a = ab / ab_cb\n  b = ac / ac_cb_ab\n  c = cb / ab_cb\n  return (a *\
    \ b * c <= 1) or (b * c * a <= 1)", "  # Write your code here.\n  \n  if( (b >\
    \ c) and (b > a) ):\n    return True\n  elif( (c > b) and (c > a) ):\n    return\
    \ True\n  elif( (b > c) and (c > a) ):\n    return True\n  elif( (c > b) and (b\
    \ > a) ):\n    return True\n  else:\n    return False\n  \n  \n  ", "  # Get the\
    \ midpoint of the three sides\n  x = (a + b + c) / 2\n  \n  # Determine the distance\
    \ of the midpoint from each other side\n  delta_x = (b - a)\n  delta_y = (c -\
    \ b)\n  \n  # Check if delta x and delta y are equal. If not, then not a right\
    \ angled triangle\n  return delta_x and delta_y", "  b_is_right_angled = b > c\
    \ if b <= c else (b >= c) # If b greater than c, it's right angled.\n  a_is_right_angled\
    \ = (a - b) * (c - b) > 0 # If a is greater than b, it's right angled.\n  c_is_right_angled\
    \ = (c - b) * (a - b) > 0 # If c is greater than b, it's right angled.", "   \
    \ side1 = (a + b + c) / 2\n    side2 = (b + c + a) / 2\n    side3 = (a + b + c)\
    \ / 2\n    if side1 == side2 or side2 == side3 or side1 == side3\n        return\
    \ true\n    end\n    return false\nend", "    \n    angles = []\n    \n    # Calculate\
    \ the angles\n    angles.append(math.atan(float(c / b)))\n    angles.append(math.atan(float(a\
    \ / c)))\n    angles.append(math.atan(float(a / b)))\n    \n    # Compare with\
    \ the right angles\n    if angles[0] == angles[1] and angles[0] == angles[2]:\n\
    \        return True\n    else:\n        return False", "\treturn (a**2 + b**2\
    \ <= c**2) and\n\t\t((abs(a + b - c) == 90 or abs(a - b - c) == 90) and\n\t\t\
    abs(a - (a + b)) <= 90 and\n\t\tabs(a - (a + b)) <= 90 and\n\t\tabs(b - (a + b))\
    \ <= 90 and\n\t\tabs(b - (a + b)) <= 90 and\n\t\tabs(c - (a + b)) <= 90 and\n\t\
    \tabs(c - (a + b)) <= 90 and\n\t\tabs(a + (b + c) - c) <= 90 and\n\t\tabs(a -\
    \ (b + c)) <= 90 and\n\t\tabs(a - (b + c)) <= 90 and\n\t\tabs(b - (b + c)) <=\
    \ 90 and\n\t\tabs(b - (b + c)) <= 90 and\n\t\tabs(c - (b + c)) <= 90 and\n\t\t\
    abs(c - (b + c)) <= 90 and\n\t\tabs(a + (c + b) - b) <= 90 and\n\t\tabs(a - (c\
    \ + b)) <= 90 and\n\t\tabs(a - (c + b)) <= 90 and\n\t\tabs(b - (c + b)) <= 90\
    \ and\n\t\tabs(b - (c + b)) <= 90 and\n\t\tabs(c - (c + b)) <= 90 and\n\t\tabs(c\
    \ - (c + b)) <= 90)\nend", "    \n    tri_area = (a*b + c*b + a*c - b*c)\n   \
    \ if tri_area % 2 == 1 then return False\n    else return True\nend", "  return\
    \ (b + c == sqrt(a**2 + b**2))\nend", "  a == b or a == c or b == c or a + b >\
    \ c + b or a + c > b + c or b + c > a + c\nend\n</code>\n<|/ a tags=ruby |>\n\
    <| c |>\n`(a, b, c) == (a + b, c + b, a + c)` would be true for any `a,b,c` where\
    \ `(a + b, c + b, a + c)` equals `(a + b, c + b, a + c)`.\n<|/ c |>\n<| c |>\n\
    Oh yeah, I guess I should mention that it's an assumption.\n<|/ c |>\n<| c |>\n\
    Your assumption is wrong about `==` returning `true` when two things are equal,\
    \ so I doubt your method will work correctly.  Try it: `right_angle_triangle(1,\
    \ 1, 1)`.\n<|/ c |>\n<| a dscore=3 tags=ruby |>\nYou could just check whether\
    \ the hypotenuse of the triangle is greater than the sum of its sides or less\
    \ than the sum of its sides, and then decide whether a right angle or a right\
    \ triangle:\n<code>", "  # Write your code here.\n  d = b * c - a * c\n  if d\
    \ == 0 and a == b and c == a:\n    return True\n  elif d > 0 and a == b or d <\
    \ 0 and a == c or d > 0 and b == c or d < 0 and b == a:\n    return True\n  else:\n\
    \    return False\n</cell>\n<text>\nThe following cell contains some test cases\
    \ for your right_angle_triangle function", "  return (((b**2) + (c**2) - (a**2))/2)*((a**2)\
    \ + (b**2) - (c**2))==0\nend", "  ab = b**2 + a**2 - c**2 \n  ac = a**2 + c**2\n\
    \  bc = b**2 + c**2\n  \n  if ((ab == 0) or (ac == 0) or (bc == 0)) \n    puts\
    \ ('No right angle triangle in the given 3 sides')\n    puts ('Please check if\
    \ all inputs are valid')\n    return false\n  end\n  \n  abc = ab**2 + ac**2 -\
    \ bc**2\n  \n  if abc < 0\n    puts ('No right angle triangle in the given 3 sides')\n\
    \    puts ('Please check if all inputs are valid')\n    return false\n  end\n\
    \  \n  return true\nend", "  ab = a - b\n  ac = c - a\n  if ab == 0\n    true\n\
    \  elsif ac == 0\n    false\n  else\n    (a > b) && (c > a) && (c > b) ? true\
    \ : false\n  end\nend", "    sides_length = sqrt(a**2 + b**2 + c**2)\n    if sides_length\
    \ <= 1.0 or sides_length == 0.0:\n        return False\n    diff = a / sides_length\n\
    \    diff_b = diff * b\n    diff_2 = diff * diff\n    diff_3 = diff * diff_2\n\
    \    diff_ab = diff_b + diff_3\n    diff_bc = diff_b - diff_3\n    diff_cb = diff_c\
    \  - diff_b\n    diff_ac = diff_2 - diff_c\n    \n    return diff_ac <= 0.0 and\
    \ diff_bc <= 0.0 and diff_cb <= 0.0", "    ab = abs(b - a)\n    ac = abs(c - a)\n\
    \    bc = abs(b - c)\n    return ab == bc and ac == bc\nend\n</code>\n<|/ a dscore=1\
    \ |>\n<| a dscore=1 tags=ruby |>\nI used the below code to find whether a triangle\
    \ is right angled or not and it works fine for me. Hope it will help you also.\n\
    <code>", "  return (b ** 2 + c ** 2) - (4 * a * c) < (b ** 2 + c ** 2)\nend\n\
    </cell>\n<code language=julia-1.0>", "  sides = [a, b, c]\n  nsides = len(sides)\n\
    \  return (nsides == 3) and (sides[0]+sides[1]+sides[2] == sides[3] or sides[2]+sides[3]\
    \ == sides[0] or sides[0]+sides[3] == sides[1])\nend\n</cell>\n<code language=julia-1.0>",
  "  r1 = (a + b) * (b + c) * (c + a) <= 0\n  r2 = (a + b) * (b + c) * (a + c) <=\
    \ 0\n  r3 = (a + b) * (c + b) * (b + c) <= 0\n  return r1 or r2 or r3\nend", " \
    \ a**2 + b**2 <= c**2\nend", "  return (b ** 2 + c ** 2) - (a ** 2) - (c ** 2)\
    \ > 0\nend", "  \n  tri = [a, b, c]\n  \n  # First check for an equilateral triangle\n\
    \  for i in tri\n    if i == tri.max\n      return true\n  end\n  \n  # If no\
    \ equilateral triangle exists return false\n  return false\nend\n</cell>\n<code\
    \ language=julia-0.6>", "  puts \"#{a}, #{b}, #{c}\"\n  if a*a + b*b == c*c &&\
    \ a*a + c*c > b*b\n    return true\n  else\n    return false\n  end\nend", " \
    \   # Write your code here\n    return a*b*c==(abs(c-b)+abs(c-a))*b\n    "]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
