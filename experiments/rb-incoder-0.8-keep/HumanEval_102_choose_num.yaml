name: HumanEval_102_choose_num
language: rb
prompt: "# This function takes two positive numbers x and y and returns the\n# biggest\
  \ even integer number that is in the range [x, y] inclusive. If \n# there's no such\
  \ number, then the function should return -1.\n# For example:\n# choose_num(12,\
  \ 15) = 14\n# choose_num(13, 12) = -1\ndef choose_num(x, y)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_choose_num\n\
  \    candidate = method(:choose_num)\n    assert_equal(14, candidate.call(12, 15))\n\
  \    assert_equal(-1, candidate.call(13, 12))\n    assert_equal(12354, candidate.call(33,\
  \ 12354))\n    assert_equal(-1, candidate.call(5234, 5233))\n    assert_equal(28,\
  \ candidate.call(6, 29))\n    assert_equal(-1, candidate.call(27, 10))\n    assert_equal(-1,\
  \ candidate.call(7, 7))\n    assert_equal(546, candidate.call(546, 546))\n  end\n\
  end\n"
completions: ["  return x.to_i * (y.to_i - 1) - (x.to_i + y.to_i).to_f / (x.to_i +\
    \ y.to_i).to_f\nend\n</code>\n<|/ a tags=math,ruby,ruby-on-rails,algorithm,performance\
    \ dscore=2 |>\n<| a tags=math,ruby,ruby-on-rails,algorithm,performance dscore=1\
    \ |>\nThis is O(N + M) solution, where N is number of digits in first number and\
    \ M is number of digits in second number\n<code>", "  return y if x % 2 == 0 &&\
    \ y % 2 == 0 || -1 if x < 0 || y <= 0\n  (a..b).each {|x| (a..b).each {|y| return\
    \ y if x % 2 == 0 && y % 2 == 0 || -1 if x < 0 || y <= 0 if x >= y}}\nend", " \
    \ result = 0\n  while x < y do\n    result += 1\n    if result > y\n      return\
    \ -1\n    result *= 2\n    x+=1\n  end\n  return result\nend", "    \n    # Find\
    \ the difference between x and y \n    difference = y - x", "  max = -1\n  while\
    \ x < y do\n    max = x + max\n    x = x + 2\n  end\n  return max\nend", "  n\
    \ = x + y\n  while true\n    (x += 1; y -= 1) if y > x\n    return n if n <= max\n\
    \    return -1\n  end\nend\n</code>\nThis works because choose_num is O(1) and\
    \ O(logN) where N is the larger number given to choose_num.  \nHere's a performance\
    \ test showing O(logN) vs O(N):\n<code>\nrequire 'benchmark'", "  if y >= x\n\
    \    return -1\n  if x == y\n    return 0\n  \n  if x%2 == 0 and y%2 == 1\n  \
    \  return y\n  if x%2 == 1 and y%2 == 0\n    return x\n  \n  if x%2 == 1 and y%2\
    \ == 1\n    return choose_num(x + 1, y)\n  \n  if x%2 == 0 and y%2 == 0\n    return\
    \ choose_num(x - 1, y)\nend", "    if x < 0 or y <= 0\n        return -1\n   \
    \ else\n        return y if x % 2 == 0 \n                else\n              \
    \      x if y % 2 == 0\n                end\n    end\nend\n</cell>\n<cell>\nchoose_num(6,\
    \ 8)\n</cell>\n<cell>\nchoose_num(7, 8)\n</cell>\n<cell>\nchoose_num(7, 3)\n</cell>\n\
    <cell>", "    return y if x % y == 0 and x % 2 == 0 or y % x == 0 and y % 2 ==\
    \ 0 else -1\nend\n    ", "\treturn BigNum.new(x.to_i + y.to_i).greatest\nend",
  "\tz = x.to_i * 10 + y.to_i\n\tz.step(10) # this step operation makes the loop run\
    \ 10 times\n\treturn z.to_i\nend", "  if x == y\n    return -1\n  x_even = x %\
    \ 2 == 0\n  y_even = y % 2 == 0\n  if x_even && y_even\n    return x if x >= y\
    \ else y\n  else\n    return x if x_even else y\n  end\nend\n</code>\n<|/ a dscore=0\
    \ |>\n<| a dscore=0 |>\nUsing Ruby Enumerable#each_cons allows you to generate\
    \ an infinite sequence of numbers by incrementing the same number by two each\
    \ time. Then, Enumerable#min, Enumerable#max can be used to find the min/max of\
    \ the resulting sequence, allowing us to determine the numbers involved.\nThe\
    \ main benefit of this method is that Ruby will run this as a lazy sequence. For\
    \ example, if I try to find the min/max of a lazy sequence containing only 1 million\
    \ numbers, it will only try to calculate the min/max when it is asked to do so.\
    \ So it will be much quicker at run time, especially for larger inputs.\n<code>\n\
    numbers = (0..1_000_000).each_cons(2).to_a", "  if x > y\n    if x % 2 == 0\n\
    \      x -= 1\n    end\n    elsif y % 2 == 0\n      y -= 1\n    else\n      x\
    \ -= 1\n      y -= 1\n    end\n  end\n  if y == 0\n    return x\n  elsif y ==\
    \ x\n    return -1\n  else\n    return ((x % y) + y) % y\n  end\nend", "  biggest\
    \ = -1\n  until biggest\n    biggest = x + y # +1 means [x, y] inclusive\n   \
    \ x, y = y, x % y # this part is not 100% sure, just guessing.\n    biggest =\
    \ biggest == x and biggest or biggest\n  end\n  biggest\nend", "  return -1 if\
    \ x > y || x % 2 == 0 && y % 2 == 0 || y % 2 == 0 && x % 2 == 0 || x > y && x\
    \ % 2 == 0 && y % 2 != 0 || x > y && y % 2 != 0\n  \n  # This code solves the\
    \ problem...\n  even = 1\n  odd = 0\n  while even < x\n    even = even + 2\n \
    \ end\n  while odd < y\n    odd = odd + 2\n  end\n  even = even.to_i\n  odd =\
    \ odd.to_i", "  x = x.to_i\n  y = y.to_i\n  return x.to_i + y.to_i if ((x % 2\
    \ == 0) and (y % 2 == 0)) \n  else -1\nend", "    return nil if x > y\n    (x,\
    \ y) = (y, x) if x < y\n    loop do\n        break unless x > y\n        y = rand(y)\n\
    \    end\n    x\nend", "  if x <= y \n    then return x\n  else \n    then return\
    \ y\n  end\nend\n</code>\n<|/ q tags=ruby,if-statement dscore=0 |>\n<| c |>\n\
    You don't need to define a `choose_num` method, Ruby already has this functionality;\
    \ it's called `min` as in `Math.min(a, b)`\n<|/ c |>\n<| c |>\nYou're very confused\
    \ about how Ruby works. You're trying to write a function in Ruby, but you're\
    \ trying to use Python. You're also trying to use a `for` loop to iterate over\
    \ an array, but you're trying to use a `while` loop to iterate over an array.\n\
    <|/ c |>\n<| c |>\nI do not understand your comment. The question is \"How can\
    \ I use an if statement in a while loop?\"\n<|/ c |>\n<| c |>\nI'm sure the comment\
    \ made my question a lot more confusing. I'm not asking you guys to do my homework\
    \ though.\n<|/ c |>\n<| c |>\nThe `if` statement is in the wrong place; you need\
    \ to have it inside the `while` loop, after you've checked the condition in the\
    \ `if` statement. Also as others have pointed out, you cannot call a method on\
    \ a class like you are doing. Ruby does not have operator overloading, so the\
    \ way you wrote `<=` makes it behave like Ruby's `<=>` operator, which is used\
    \ to implement sorting in Ruby arrays.\n<|/ c |>\n<| a dscore=0 |>\nRuby is awesome.\
    \ Ruby lets you write functional code in a very natural way. Here's how I would\
    \ write this:\n<code>", "  num = 1\n  while (x > 0 && y > 0)\n    if ((x % 2)\
    \ == 0)\n      num = num * x\n    num = num * y\n    x = x - 1\n    y = y - 1\n\
    \  return num if num > 0 else -1\nend\n</code>\nThe function choose_num is given\
    \ below. I've tested it against your test cases and it seems to work correctly.\n\
    <code>", "  (x<y) ? return x : (y<x) ? return y : -1\nend", "  if x <= y\n   \
    \ return x\n  end\n  if y <= x\n    return y\n  end\n  if x == 0\n    return -1\n\
    \  end\n  if y == 0\n    return -1\n  end\n  if x % 2 == 0\n    return choose_num(x\
    \ % x + 1, y)\n  end\n  if y % 2 == 0\n    return choose_num(x, y % y + 1)\n \
    \ end\n  return choose_num(x % x + 1, y % y + 1)\nend", "  if x == y or x < y\
    \ \n    return -1\n  else\n    begin\n      result = 1\n      while result ==\
    \ x or result == y\n        result = result * 2\n      end\n      result\n   \
    \ rescue\n      nil\n    end\n  end\nend\n</code>\n<|/ a tags=ruby |>\n<| c |>\n\
    It might be helpful to explain the code a bit. Like why `return -1` at the end\
    \ of the function.\n<|/ c |>\n<| c |>\nI agree with. Why would you use `begin`\
    \ when you are not using the block, and why would you use `rescue` when you are\
    \ not using the exception? Why are you putting a block in a conditional? Why are\
    \ you using `rescue` when you are not using the exception?\n<|/ c |>\n<| c |>\n\
    I added an explanation to the code above.\n<|/ c |>\n<| c |>\nThank you, I've\
    \ understood it a lot better now.\n<|/ c |>\n<| c |>\nThanks a lot this was really\
    \ helpful.\n<|/ c |>\n<| a dscore=1 tags=ruby |>\nA more functional approach is\
    \ to use Ruby's map and reduce:\n<code>\nchoose_num(12, 15)\n=> 14", "  # Your\
    \ code goes here\nend", "  if((x < y) && (x != 0))\n    num = x\n  elsif ((x >\
    \ y) && (x != 0))\n    num = y\n  else\n    num = x\n  end\n  while(true)\n  \
    \  if((num > y) && (num % 2 == 0))\n      num = num / 2\n    elsif ((num < y)\
    \ && (num % 2 == 0))\n      num = num * 2\n    else\n      break\n    end\n  end\n\
    \  return num\nend", "  i = 1\n  while i <= y do\n    # Here we check if the current\
    \ number is even (even numbers are even)\n    if i % 2 == 0\n      # We then return\
    \ the number\n      return i\n    i += 1\n  end\n  # If there is no even number\
    \ in range [x, y], then we return the number -1.\n  return -1\nend\n</code>\n\
    <|/ a dscore=1 |>\n<| a tags=ruby,arrays dscore=1 |>\nThis code will return the\
    \ smallest number in a range that is even. You can change the range variable with\
    \ the numbers you want.\n<code>", "  if x > y\n    max = x\n  elsif x < y\n  \
    \  max = y\n  else # x == y\n    max = x\n  end\n  while max == max\n    max =\
    \ (min + max) / 2\n  end\n  return max\nend", "  while x <= y do\n    num = num\
    \ + 1 if x % 2 == 0 else num - 1\n    x += 1\n  end\n  return num if num > y else\
    \ -1\nend\n</cell>\n<cell>\nchoose_num(12, 15)\n</cell>\n<cell>", "  num = (x\
    \ + y)/2 \n  odd = num % 2\n  if odd\n    return num\n  else\n    x, y = num/2,\
    \ x\n    return choose_num(x, y)\n  end\nend", "  x.upto(y) { |x| return x if\
    \ is_even?(x); return -1 }\nend\n</code>\nThe is_even? function is given as a\
    \ simple exercise in the book. It basically checks if an input number is even\
    \ (meaning if it's divisible by 2, 3, 4, or 5, which all numbers other than 2\
    \ are divisible by 2). So, we just need to check if x is even, like this:\n<code>",
  "  max_num = -1\n  for i in (0...x+1)\n    if y >= 0 \n      break if x % i == 0\n\
    \      max_num = i if x > max_num || (x == max_num && y % i == 0)\n    end\n \
    \ end\n  return max_num\nend\n</code>\n<|/ a dscore=0 tags=ruby,ruby-on-rails\
    \ |>\n<| c |>\nHi Marcin, thanks for your response. I would love to try this out,\
    \ but I'm unsure how to apply it to a range. Would you be so kind as to give me\
    \ an example of how I can use this with choose_num?\n<|/ c |>\n<| c |>\nNo worries,\
    \ I tried to modify your choose_num method to make it work for ranges, but it\
    \ isn't perfect and doesn't work in certain cases. Let me know if you can find\
    \ it useful for your problems and I would be glad to see what you come up with.\
    \ By the way, I don't have the time to figure out how to make it work for range\
    \ with your example, so I wrote a completely different version that works on integers\
    \ and floats (with floats you can use the method I wrote in my answer though).\
    \ Good luck!\n<|/ c |>\n<| a dscore=0 |>\nIf you need a function that will find\
    \ the largest even number within a range of numbers (including negative numbers),\
    \ try this function. It will find the largest even number within the range of\
    \ numbers given to the function.\n<code>", "  m = -1\n  \n  # Loop through and\
    \ find the biggest even number in the range.\n  for i in 1...y\n    if x % 2 ==\
    \ 0 && y % 2 == 0 && m == -1\n      m = i\n    end\n  end\n  \n  return m\nend",
  "  range = (x - y).abs # abs() converts negative integers to positive\n  range.downto(0)\
    \ do |i|\n    if (i).even? then return i \n  end \n  nil\nend", "  max_num = -1\n\
    \  while x > 0 and y > 0\n    if x % 2 == 0 and y % 2 == 0 and x + y > max_num\n\
    \      max_num = x + y\n    end\n    x, y = x >> 1, y >> 1\n  end\n  return max_num\n\
    end\np choose_num(16, 9) # => 16\np choose_num(17, 12) # => 15\np choose_num(19,\
    \ 14) # => 18", "  if x > y\n    x, y = y, x\n  end\n  while x <= y\n    # Find\
    \ the smallest even number in range [x, y]\n    tmp = x + (y - (x % y)) / 2\n\
    \    # Return if number is even\n    if tmp % 2 == 0\n      return tmp\n    #\
    \ Move x one step to find next even number\n    x += 1\n  end\n  \n  return -1\n\
    end\n</cell>\n<cell>\nchoose_num(11, 12)\n</cell>\n<text>\nHow to use this function\n\
    Now that you've written your choose_num function, you can use the cell below to\
    \ call your new function and test it on some test cases. Note that you only need\
    \ to run the cell once to test how your function works.", "  if x <= 0 or y <=\
    \ 0\n    return -1\n  x_even = (x..y).map { |i| i % 2 == 0 }\n  x_odd = (x..y).map\
    \ { |i| i % 2 == 1 }\n  x_even.empty? ? x_odd.first : -1\nend", "    return ((x\
    \ + y - 1) // 2 + 1) if (x + y - 1) % 2 == 0 else -1\nend", "    num = nil\n \
    \   \n    # If the smallest number is less than the one we want, return -1\n \
    \   # \n    if x < y\n        num = -1\n        return\n    end\n    \n    # If\
    \ the largest number is more than the one we want, return -1\n    # \n    if x\
    \ > y\n        num = -1\n        return\n    end\n    \n    # If the two numbers\
    \ are equal, return x since we want the smallest\n    # number in the range [x,\
    \ y]\n    \n    if x == y\n        num = x\n        return\n    end\n    \n  \
    \  # If the numbers are the same, find the largest number in the range\n    #\
    \ [x, y], then divide both x and the largest number by 2, and then\n    # add\
    \ them together\n    \n    largest_num = choose_num(x, y)\n    \n    if largest_num\
    \ != nil\n        num = x / 2 + largest_num\n    else\n        num = -1\n    end\n\
    \    \n    return\nend", "  case x > y\n    when true\n      result = -1\n   \
    \ when false\n      result = x\n  end\n  case result <= y\n    when true\n   \
    \   result = -1\n    when false\n      result = result\n  end\nend", "  even =\
    \ 1\n  even2 = 1\n  x = x.to_i\n  y = y.to_i\n  while x <= y\n    even = (even\
    \ + even2)\n    even2 = even*2\n    if even2 == x\n      return even\n    x +=\
    \ 1\n  end\n  return -1\nend\n</cell>\n<code language=julia-0.6>\nchoose_num(12,\
    \ 15) = 14\nchoose_num(13, 12) = -1\n</cell>\n<text>\n\U0001F4DA Task: What is\
    \ the result of choose_num(13, 12)?", "  r = nil\n  x = Math.min(x, y)\n  y =\
    \ Math.max(x, y)\n  r = nil\n  until r\n    r =\n      if x == 0\n        -1\n\
    \      elsif y <= 0\n        -1\n      else\n        x / y\n      end\n  end\n\
    \  r\nend", "  if x < y then\n    x, y = y, x\n  end\n  x = x - 1\n  y = y - 1\n\
    \  while y >= 0 and x > 0\n    if y % 2 == 0 then\n      y = y / 2\n    else\n\
    \      x = x - 1\n      y = y - 1\n    end\n  end\n  return x\nend\n</cell>\n\
    <code language=julia-1.0>\nchoose_num(15, 12) # => 14\nchoose_num(15, 13) # =>\
    \ 14\nchoose_num(17, 12) # => 12\nchoose_num(20, 15) # => 7\nchoose_num(20, 15)\
    \ # => 7\nchoose_num(19, 15) # => -1\nchoose_num(29, 20) # => 8\nchoose_num(29,\
    \ 20) # => 8\nchoose_num(31, 20) # => -1\nchoose_num(15, 28) # => -1\n</cell>\n\
    <code language=julia-1.0>", "  ((x > y) and (x % 2 == 0)) or ((x < y) and (x %\
    \ 2 == 1))\nend", "  biggest_even = -1\n  \n  for i in [x, y]\n    if i >=  0\
    \ \n      and i <=  9\n      and biggest_even < i\n      and biggest_even != -1\n\
    \    end\n    if biggest_even == -1\n      biggest_even = i\n    end\n  end\n\
    \  biggest_even\nend\nchoose_num(9, 12) # => 14\nchoose_num(0, 0) # => -1\nchoose_num(1,\
    \ 1) # => 1\nchoose_num(9, 9) # => -1\nchoose_num(10, 9) # => 10\nchoose_num(10,\
    \ 0) # => -1", "  (x + (y - x) / 2)\nend\n</cell>\n<text>\nNow we can run the\
    \ function on the two ranges, from 12 to 15, to find the answer.", "  if x >=\
    \ y and x < 2* y\n    return x \n  elsif y >= x and y < 2* x\n    return y\n \
    \ elsif x < 0 and x > -y and y < 2* x\n    return -y \n  elsif x > 0 and x < y\
    \ and y < 2* x\n    return -y\n  elsif x < 0 and x > -y and y > -x and y < 2*\
    \ x\n    return -y\n  elsif x > 0 and x < y and y > -x and y < 2* x\n    return\
    \ -y\n  else\n    return -1\n  end\nend", "    # Add your code here\n    return\
    \ -1\nend\n</code>\nThe second problem is that you haven't defined the function\
    \ correctly, and so Ruby assumes that it must be a global function as indicated\
    \ by the error message (NameError: undefined local variable or method 'choose_num'\
    \ for main:Object).\n<code>", "    \n    min = x\n    max = y\n    \n    while\
    \ min <= max\n        \n        if min % 2 == 0 and max % 2 == 0 \n        \n\
    \            if min + max % 2 == 0 \n            \n                return min\
    \ \n            \n            else\n            \n                return -1\n\
    \            \n        \n        end \n        \n        else \n        \n   \
    \         if min < max \n                \n                min = min + 1\n   \
    \             \n            else \n            \n                max = max - 1\
    \ \n            \n            end \n        \n        end \n    \n    end \n \
    \   \n    \nend", "    biggest_even = -1\n    biggest_odd = -1\n    \n    if x\
    \ >= y or y > x + 1 or x < -1:\n        return -1\n    \n    if x % 2 != 0 or\
    \ y % 2 != 0:\n        biggest_even = x + (y - x)\n        biggest_odd = y\n \
    \   else:\n        biggest_even = x\n        biggest_odd = y\n        \n    if\
    \ biggest_even > biggest_odd:\n        return biggest_even\n    else:\n      \
    \  return biggest_odd\n</cell>\n<text>\nNow let's test the function by giving\
    \ examples:", "  x += 1\n  y -= 1\n  puts \"The biggest even number is #{x}\"\
    \ if x > y\n  puts \"The biggest even number is #{y}\" if x < y\n  if x > y\n\
    \    x\n  elsif x < y\n    y\n  else\n    -1\n  end\nend", '  biggest = y', '    return
    nil if x < 0 || y < 0', "  x = x.to_i\n  y = y.to_i\n  return x if x >= y || y\
    \ == -1 || y > x/2 ? x : y\nend\n</code>\n<|/ a dscore=4 tags=ruby |>\n<| a dscore=4\
    \ tags=ruby |>\n<code>", "  return x.max(x) if x.between?(y, 0) && y > 0 && y\
    \ <= x.max && x.even? && x.max % 2 == 0 && x.min % 2 == 0 \n  \n  # The above\
    \ code also works with positive odd integers, and returns \n  # -1 if there is\
    \ no such integer.\n  x.min(x) if x.between?(0, y) && y > 0 && y <= x.max && x.even?\
    \ && x.min % 2 == 0 && x.max % 2 == 0 \nend\n</cell>\n<code language=julia-1.5>\n\
    @time choose_num(10000, 100000) |> println\n</cell>\n<code language=julia-1.5>\n\
    @time choose_num(100, 1000) |> println\n</cell>\n<code language=julia-1.5>\n@time\
    \ choose_num(100, 10000) |> println\n</cell>\n<code language=julia-1.5>", "  largest_even\
    \ = -1\n  for i in [x, y - 1]\n    if i % 2\n      return i\n    end\n    if i\
    \ > largest_even\n      largest_even = i\n    end\n  end\n  return largest_even\n\
    end", "  x.upto(y, 2) do |i|\n    if i.even?\n      return i if i > y\n    end\n\
    \  end\n  return -1\nend\n</code>\n<|/ a dscore=1 tags=ruby,algorithm |>\n<| c\
    \ |>\nThe \"even?\" method is unfortunately not in Ruby.  Ruby doesn't have anything\
    \ as nice as that, so you're left with manually checking the remainder.  It's\
    \ an easy mistake to make if you are not careful; I made that mistake recently.\n\
    <|/ c |>\n<| a dscore=1 |>\n<code>", "  if x > y\n    x, y = y, x\n    \n  for\
    \ i in (x..y)\n    if i & 1\n      return i\n  return -1\nend", "    begin\n \
    \       num = (x + (y - x) / 2).floor\n    end while num < x || num > y\n    return\
    \ num\nend\n</code>\nNow we only have to call that function and get our answer.\n\
    <code>\nchoose_num(12,15)", "  if x > y\n    x, y = y, x\n  end\n  for i in 1..y-1\n\
    \    if x % i == 0 && y % i == 0\n      x = x/i\n      y = y/i\n      return i\n\
    \    end\n  end\n  return -1\nend\n</code>\nThe algorithm above should take care\
    \ of the edge case where x and y are both even numbers, where the function should\
    \ return one number: x + y. I also added a check to make sure that x and y are\
    \ both integers, so the function can be called with other types as arguments.\n\
    Hope this helps!\n<|/ a tags=ruby dscore=0 |>\n<| c |>\nI don't see any reason\
    \ to downvote this answer. Your solution is elegant and efficient. The downvoters\
    \ might have been a little harsh because they thought this was a homework question,\
    \ but I don't think that's true. I think this solution answers the question correctly.\n\
    <|/ c |>\n<| c |>\nIt *is* a homework question, although the question is phrased\
    \ poorly. I think this solution actually answers the question - although I agree\
    \ that my code would be more elegant if it were written using a while loop and\
    \ `break` rather than a for loop. I suppose it also answers the question with\
    \ some caveats: it doesn't answer the question of how to solve the problem when\
    \ the numbers are negative. Also, your code returns the wrong answer when `x ==\
    \ y`.\n<|/ c |>\n<| c |>\nI agree with that - I think your answer is the best\
    \ answer. The only thing I would make is to use a while loop rather than a for\
    \ loop and a break condition. The while loop will give you a better time complexity\
    \ of O(n) rather than O(n^2) (which for a larger n makes the complexity a lot\
    \ more predictable).\n<|/ c |>\n<| c |>\nIt is an excellent answer, but I would\
    \ suggest you change `for x in 1..y-1` to `while y > 0`. Using a for loop with\
    \ range is faster than the while loop. Also your while loop doesn't look correct:\
    \ it should be `while y > 0`.\n<|/ c |>\n<| c |>\nThanks for the tip, I've edited\
    \ the answer to include that.\n<|/ c |>\n<| a tags=ruby |>\n<code>", "  a = b\
    \ = 1\n  while a <= y do\n    if a % 2 == 0 then\n      a = a + 1\n    else\n\
    \      b = b + 1\n    end\n  end\n  return b if b <= x\n  return -1\nend", " \
    \ x = Math.floor_div(x, y)\n  y = Math.floor_div(x + 1, y)\n  if Math.div(x +\
    \ 1, y) == Math.div(x + 2, y) - 1 then\n    return x\n  else\n    return -1\n\
    \  end\nend\n</cell>\n<text>\nLet's check that the function works properly:",
  "  return y if (x % 2 == 0 && y % 2 == 0) || (x % 2 == 0 && y % 2 == 1 && x > y)\
    \ ? y : -1\nend", "  num = 2\n  while x > num and x < y\n    num += 1\n  end\n\
    \  num\nend\n</cell>\n<cell>", "  return nil if x < 0 or y < 0 \n  \n  return\
    \ -1 if y == x\n  \n  even = 1\n  odd = 0\n  \n  while even <= y do\n    if even\
    \ % 2 == 0\n      even = even + 1\n    else\n      odd = odd + 1\n    end\n  end\n\
    \  \n  return odd if even > y\n  \n  return even if even < x\nend", "  if x >\
    \ y\n    temp = x\n    x = y\n    y = temp\n  end", "  if x > y\n    return x\n\
    \  elsif x < y\n    return y\n  elsif x == y\n    return x\n  end", "  if x >\
    \ y\n    x, y = [y, x]\n  end\n  return -1 if x == 0 || x == y || y == 0\n  mid\
    \ = (x + y) >> 1\n  if mid >= 2\n    choose_num(x, mid)\n  else\n    choose_num(mid,\
    \ y)\n  end\nend\n</code>\nThe reason is that choose_num(3, 9) is still called\
    \ even though it can be avoided. Because of the recursion, the function must be\
    \ called with the biggest possible numbers in their place. \nBut choose_num(3,\
    \ 9) is actually still called with the biggest possible numbers even though it's\
    \ unnecessary as the next biggest even number is already in the range [3, 9] so\
    \ there's no need to call it anymore.\n<|/ a dscore=3 tags=algorithm,ruby |>\n\
    <| c |>\nAs a side note, I don't think that you should always put `return` statements\
    \ before the line that makes the next recursive call. Most languages require you\
    \ to put `return` in a line right after a recursive call. Perhaps Ruby is different?\n\
    <|/ c |>\n<| c |>\nYes, Ruby requires `return` to be put on a line after a recursive\
    \ call (I'm speaking specifically of Ruby 1.8.0), but not every recursive call\
    \ is followed by `return`.\n<|/ c |>\n<| c |>\nWhat if `x > y`? How would you\
    \ handle that?\n<|/ c |>\n<| c |>\nIf x and y are equal, just return -1. That\
    \ will cause choose_num(12, 12) to exit without doing anything. Otherwise, we\
    \ must find the middle number and do choose_num(x, mid) first, then choose_num(mid,\
    \ y) and return the result. If x is bigger than y, we must return -1, because\
    \ choose_num(y, x) will never be called.\n<|/ c |>\n<| c |>\nI mean if you have\
    \ a range: [0, n] and the number you're looking for is n itself. How would you\
    \ handle this?\n<|/ c |>\n<| a dscore=3 |>\nFor anyone who is interested in Ruby\
    \ implementation, here it is!\n<code>", "    range1 = (x - 1)\n    range2 = (y+1)\n\
    \    \n    if x % 2 == 0 and y % 2 == 0:\n        if x <= y:\n            if range2\
    \ <= range1:\n                return range2\n            else:\n             \
    \   return range1\n        else:\n            if range1 <= range2:\n         \
    \       return range1\n            else:\n                return range2\n    elif\
    \ x % 2 != 0:\n        if y % 2 == 0:\n            if range1 <= range2:\n    \
    \            return range1\n            else:\n                return range2\n\
    \        else:\n            if range2 <= range1:\n                return range2\n\
    \            else:\n                return range1\n    elif y % 2 != 0:\n    \
    \    if range1 <= range2:\n            return range1\n        else:\n        \
    \    return range2\n    else:\n        if range1 <= range2:\n            return\
    \ range1\n        else:\n            return range2", "  if x <= y\n    return\
    \ y\n  elsif x >= y \n    return x\n  else\n    return -1\n  end\nend", "  x =\
    \ x.to_i\n  y = y.to_i\n  if x < y\n    x, y = y, x\n  end\n  while x > 0\n  \
    \  return 0 if y == 0\n    x = x - 2\n    y = y - 1\n  end\n  return -1\nend",
  "    \n    range_size = y - x + 1 # Range size\n    \n    # Initialize an empty\
    \ array of size range_size\n    nums = [0 for _ in range(range_size)] ", "  x\
    \ = Integer(x)\n  y = Integer(y)\n  if x != 0 && y != 0\n    return x.zero? :\
    \ y.zero? ? x : y # both are zero\n  else\n    return if x > 0\n      -1  if y\
    \ > 0\n      1\n    else\n      1\n    end\n  end\nend", '  result = -1', "  if\
    \ x > y\n    return choose_num(y, x)\n  elsif x == y\n    return y\n  elsif x\
    \ > y and x % 2 != 0\n    return choose_num(x-1, y)\n  else\n    return choose_num(x,\
    \ y-1)\n  end\nend\n</code>\n<|/ a |>\n<| a dscore=0 |>\n<code>", "  return x\
    \ if x < y ? nil : (x > y ? x : y)\nend", "    evens = Array.new\n    evens.push\
    \ x\n    evens.push y\n    evens.uniq.each do |x|\n      evens.each do |y|\n \
    \       if x % y == 0\n          return x\n        end\n      end\n    end\n \
    \   return -1\nend", "  return x if x > y ? x : y if y > x ? y : -1\nend", " \
    \   return -1\nend", "  biggest = -1\n  biggest_even = 0\n  \n  for i in 0...x\n\
    \    \n    if y > i\n      break\n    \n    if i % 2 != 0\n      biggest_even\
    \ = i\n    else\n      if biggest < i\n        biggest = i\n      end\n    end\n\
    \  end", "    if x > y\n        return -1\n    \n    while x < y\n        x +=\
    \ 1\n    \n    return x\n</cell>\n<text>\nThe function above is called a loop!",
  "  x = x.to_i\n  y = y.to_i\n  \n  if x >= y \n  then -1\n  else \n    if x == 0\
    \ \n    then -1\n    else \n      z = (x + (y - x)).floor\n      z.to_i\n    end\n\
    \  end\nend", "  \n  # If the first number is bigger than the second, then \n\
    \  # there's no even number that can be in the range [x, y].\n  case \n    when\
    \ x > y\n      return -1\n    \n    # If the first number equals the second number\n\
    \    when x == y\n      return x", "    \n    even = 0\n    odd = 1\n    \n  \
    \  # Check if x is smaller than y\n    if x < y:\n        smaller = x\n      \
    \  greater = y\n    else:\n        smaller = y\n        greater = x\n    \n  \
    \  # Loop until x == y\n    while smaller != greater or even != 0:\n        \n\
    \        # Check if x is even\n        if even != 0:\n            \n         \
    \   # If x is even, then y is even as well. \n            if even % 2 == 0:\n\
    \                even = even + 1\n            else:\n                even = 0\n\
    \                \n            if even >= greater and even <= smaller:\n     \
    \           return even\n            else:\n                return -1\n      \
    \      \n        # Check if x is odd\n        if odd != 0:\n            \n   \
    \         # If x is odd, then y is odd as well. \n            if odd % 2 != 0:\n\
    \                odd = odd + 1\n            else:\n                even = 0\n\
    \                \n            if odd >= greater and odd <= smaller:\n       \
    \         return odd\n            else:\n                return -1\n         \
    \   \n        # Check if x is larger than y\n        if smaller < greater:\n \
    \           smaller = smaller + 1\n        else:\n            greater = larger\
    \ + 1\n            \n    # If x is equal to y\n    if even == 0 and odd != 0:\n\
    \        return odd\n    elif even == 0 and odd == 0:\n        return -1\n   \
    \ \n    return -1", "    nums = [x, y]\n    while x > 0 and y > 0\n        if\
    \ nums.include?(x / y)\n            x = nums.shift\n            y = nums.shift\n\
    \            nums << y\n        end\n        x -= 1\n        y -= 1\n        nums\
    \ << y\n    end\n    return nums.last if nums.include?(x)\n    return -1\nend",
  "  arr = [x, y]\n  arr.map {|a| a * 2 if a % 2 == 0}\n  max_num = arr.reduce(:<)\n\
    \  \n  if max_num == 0\n    return -1\n  end\n  \n  max_num / 2\nend", "  return\
    \ x - 1 if ((x % 2 == 0) && (y % 2 == 0)) || ((x % 2 == 1) && (y % 2 == 1)) ||\
    \ (x % 2 == y % 2)\nend", "  n = x if x > y else y\n  for i in 1...n\n    if i\
    \ % 2 == 0 && (x / i) % 2 == 0 && (y / i) % 2 == 0\n      return i\n  end\n  return\
    \ -1\nend", "  if x < y \n    x, y = y, x\n  i = x\n  while i <= y\n    i += 1\n\
    \    return i if i % 2 != 0\n  else\n    return -1\n  end\nend\n</code>\n<|/ a\
    \ |>\n<| a |>\n<code>", "  (x || y || x == y || x > y) ? x : -1\nend\n</code>\n\
    A function like this should be easy to implement.  Then you can do the following:\n\
    <code>\nputs choose_num(12, 15)", "  biggest = y \n  for i in x .. y \n    if\
    \ i % 2 == 0 \n      return i \n    else \n      biggest = i\n  return biggest\n\
    end", "  if x % 2 == 0 and y % 2 == 0\n    x = y\n  end\n  \n  result = -1\n \
    \ if x > y then\n    while x > 0 do\n      result = x % 2 + result\n      x /=\
    \ 2\n    end\n  end\n  \n  if x < y then\n    while x < y do\n      result = y\
    \ % 2 + result\n      y /= 2\n    end\n  end\n  \n  return result\nend\n</cell>\n\
    <text>\nTest your function with the two example numbers 12 & 13:", "  x = Math.ceil(x)\n\
    \  y = Math.ceil(y)\n  for i in 2..(x - 1)\n    if i % 2 == 0 && i <= y\n    \
    \  return i\n  end\n  -1\nend", "  biggest_even_num = 0\n  for i in (x .. y)\n\
    \    unless big_num_to_even_num(i) \n      return -1\n    elsif big_num_to_even_num(i)\
    \ > biggest_even_num\n      biggest_even_num = big_num_to_even_num(i)\n    end\n\
    \  end\n  return biggest_even_num\nend", "  return -1 if x || y < x\n  x  = x\
    \ - 1\n  y  = y - 1\n  while x > 0\n    x,y = x & y, x + y\n    x -= 1\n  end\n\
    \  \n  if y == 0\n    return x - 1\n  elsif y == 1\n    return x + y\n  else\n\
    \    return x\n  end\nend", "  return -1 if x > y \n  return 1 if (x < y) and\
    \ ((x % 2) == 0) \n  (x % 2) + (y % 2)\nend\n</code>\n<|/ a tags=ruby |>\n<| a\
    \ dscore=0 tags=ruby |>\nI figured it out just now from my exam paper using ruby\n\
    <code>", "    temp1 = x % 2\n    temp2 = y % 2\n    if temp1 == 0 and temp2 ==\
    \ 0\n      return x\n    else if temp1 == 0 and temp2 != 0\n      return -1\n\
    \    else if temp1 == 1 and temp2 != 0\n      return y\n    else if temp1 == 1\
    \ and temp2 == 0\n      return -1\n    else if temp1 == 1 and temp2 == 1\n   \
    \   return -1\n    else if temp1 != 0 and temp2 == 0\n      return y\n    else\
    \ if temp1 != 0 and temp2 == 1\n      return x\n    else if temp1 != 0 and temp2\
    \ != 1\n      return -1\n    end\nend\n</code>\n<|/ a dscore=2 tags=ruby,algorithm\
    \ |>\n<| a |>\nA Ruby implementation using recursion.\n<code>", "  \n  even =\
    \ (x % 2) == 0\n  \n  if even\n    if x > y\n      return x\n    else\n      return\
    \ y\n    end\n  else\n    if x > y\n      return y\n    else\n      return x\n\
    \    end\n  end\nend\nputs choose_num(12, 15)\nputs choose_num(13, 12)\nputs choose_num(14,\
    \ 10)", "  x = x.to_i\n  y = y.to_i\n  if x > y\n    return -1\n  elsif x == y\n\
    \    return x if x % 2 == 0 # even\n    return x + 1 # odd\n  end\n  \n  even\
    \ = (x + 1) - (x - 1)\n  odd = (x + 1) - (y - 1)\n  if even.to_i >= y.to_i &&\
    \ even.to_i <= x.to_i\n    return even.to_i\n  elsif odd.to_i >= y.to_i && odd.to_i\
    \ <= x.to_i\n    return odd.to_i\n  end\n  return -1\nend", "    if y > x\n  \
    \      return -1\n    if x == 0\n        return 0\n    \n    mid = x + (y//2)\n\
    \    if mid % 2 == 0\n        return mid\n    if mid % 2 != 0\n        return\
    \ choose_num(mid, y)\nend", "  max_number = nil\n  \n  # Find the biggest even\
    \ number between x and y\n  for i in (1..x)\n    if i%2 == 0 && i > 0\n      max_number\
    \ = i\n    end\n  end\n  \n  # If there's no even number between x and y, then\
    \ max_number\n  # equals x or y.\n  if max_number.nil?\n    return x if x > y\n\
    \    return y\n  end\n  \n  # If the biggest even number between x and y is less\
    \ than or equal \n  # to y, then max_number equals y. If it's bigger than y, then\
    \ \n  # max_number equals x.\n  if max_number <= y\n    return y\n  else\n   \
    \ return x\n  end\nend\n</cell>\n<cell>", "  while x < y do\n    z = x + (y -\
    \ x) / 2\n    x += 1\n    y -= 1\n    if z - x % 2 != z %2\n      return z - 1\n\
    \    end\n  end\n  -1\nend", "  num = nil\n  if y > x\n    num = x\n  elsif x\
    \ > y\n    num = y\n  else\n    puts \"Sorry! There's no even number between #{x}\
    \ and #{y}\"\n  end\n  return num\nend", "    \n    # Write your code below!\n\
    \    \n    bigger_even = nil\n    if x >y\n        if x % 2==0\n            bigger_even\
    \ = x\n        else\n            bigger_even = y\n        end\n    else\n    \
    \    if y % 2 == 0\n            bigger_even = y\n        else\n            bigger_even\
    \ = x\n        end\n    end\n    \n    return bigger_even\nend\n</cell>\n<cell>",
  '  evens = []', "  if x==y\n    return -1\n  else\n    i = 2\n    while i<=x\n \
    \     if i%2==0 && y%2==0\n        return i\n      end\n      i += 1\n    end\n\
    \  end\nend\n</code>\nAs you can see, I added an if statement, which would return\
    \ a -1 if there's no even number, and I also made sure that y is not bigger than\
    \ x.\nNow we can just add the two numbers together and check to see if the result\
    \ is even or not.\n<code>", "    if x >= y\n        return -1\n    \n    # x is\
    \ greater than y, so divide x by 2 to get the first even number\n    # and add\
    \ 1 to x to get the second even number\n    z = x // 2\n    w = x + 1\n    \n\
    \    while w <= y\n        if z <= w\n            return w\n        w += 2\n \
    \       \n        # Increase z by 2 to get the next even number in the range\n\
    \        z = z + 2\n    end\n    \n    return -1\nend", "    range = (x - y).abs\n\
    \    range_to_search = range\n    range_to_search += range.ceil\n    \n    evens\
    \ = [4, 6, 8, 10]\n    if range_to_search % 2 != 0 then\n        range_to_search\
    \ += range.ceil\n    \n    unless evens.include?(range_to_search) then\n     \
    \   range_to_search = -1\n    end\n    \n    return range_to_search\nend", " \
    \ small = y\n  big = x\n  while (big - small) > 2\n    big = big + 2\n    if (big\
    \ > y)\n      big = y\n    end\n  end\n  return big\nend", "    smaller = y\n\
    \    bigger = x\n    while smaller != bigger\n        bigger = smaller\n     \
    \   smaller = bigger - smaller\n        if smaller < 0\n            smaller +=\
    \ y\n        if smaller < y\n            smaller += y\n        if smaller > y\n\
    \            smaller += y\n        if bigger > x\n            bigger += y\n  \
    \      bigger += y\n    end\n    return smaller\nend\n</code>\n<|/ a |>\n<| c\
    \ |>\nthanks for your effort and time on this one . i tested it but still it gives\
    \ me the same result as i stated above. i will try and make my problem a bit more\
    \ clear to you.\n<|/ c |>\n<| c |>\nI edited my answer after you updated your\
    \ question. Now it gives the correct result.\n<|/ c |>\n<| c |>\nthank you for\
    \ that one .. i am still trying to understand how and why it works. i guess i\
    \ need to read up on the math. i will read up on it . and thank you once again\
    \ for your help\n<|/ c |>\n<| c |>\nI added a link to Wikipedia with some more\
    \ information about the algorithm, since your question was a bit difficult to\
    \ understand.\n<|/ c |>\n<| a tags=ruby-on-rails-4,ruby-on-rails,ruby |>\nThis\
    \ is a common problem that is solved with the floor function, see here:\n<code>",
  "  while x <= y\n    mid = (x + y) /2\n    if mid * mid == x\n      return mid\n\
    \    return choose_num(mid, y)\n  while y > x\n    mid = (y + x) / 2\n    if mid\
    \ * mid == y\n      return mid\n    return choose_num(x, y)\nend", "    return\
    \ y if x == y || x > y ? x : y\nend\n</code>\n<|/ a dscore=3 |>\n<| a tags=ruby\
    \ |>\nThe most elegant ruby answer I've seen so far:\n<code>", "  (x>y) and return\
    \ -1 or return x+1\nend", "  if x <= y \n    choose_num(x + 1, y)\n  elsif y <=\
    \ x\n    choose_num(x, y + 1)\n  else\n    x == y\n  end\nend\n</code>\n<|/ a\
    \ tags=ruby,algorithm,ruby-on-rails,function dscore=1 |>\n<| c |>\nThanks for\
    \ your help, I've been trying to understand how it works so I can implement it\
    \ into my Rails app. It helps me understand how it works. I appreciate the help.\n\
    <|/ c |>\n<| a dscore=1 |>\nThis can be done pretty simple in Ruby:\n<code>",
  "  even = true\n  while x < y\n    if even\n      even = false\n    else\n     \
    \ even = true\n    end\n    x = x + 1\n  end\n  return x\nend", "  if x >= y and\
    \ x < y # if x > y then x is the bigger one\n    return x\n  else\n    return\
    \ y\n  end\nend", "  return x * (y - x + 1) / (x - y) + 1\nend", "  biggest =\
    \ y\n  biggest_index = y\n  \n  # The loop will continue until we've found a number\
    \ larger than y and we \n  # haven't found a number larger than x yet.\n  # \n\
    \  for i in (2..x)\n    if biggest < i and biggest_index > i\n      biggest =\
    \ i\n      biggest_index = i\n    end\n  end\n  \n  biggest\nend", "  (x<y) ?\
    \ return -1 : (y<x) ? return -1 : (y==x) ? return y : (x > y) ? choose_num(x,\
    \ y-x) : choose_num(y, x-y)\nend\n</code>\n<|/ q tags=ruby,python,algorithm |>\n\
    <| c |>\nThis seems like a good fit for [Code Review](http://codereview.stackexchange.com/).\n\
    <|/ c |>\n<| c |>\nThis question appears to be off-topic because it is asking\
    \ about reviewing a piece of code. This should be posted on [Code Review](http://codereview.stackexchange.com/)\n\
    <|/ c |>\n<| c |>\nOkay I will do that. Thanks for the heads up!\n<|/ c |>\n<|\
    \ c |>\nYou can learn more about [Code Review](http://codereview.stackexchange.com/)\
    \ in the [Help Center](http://codereview.stackexchange.com/help).\n<|/ c |>\n\
    <| c |>\nOkay I have posted it there. I was wondering if it was going to be moved\
    \ there but I did not see an option. Is it okay now?\n<|/ c |>\n<| a tags=ruby,python,algorithm\
    \ |>\nRuby:\n<code>", "  if x < y\n    x, y = y, x\n    \n  evens = [num for num\
    \ in (1..(x+1)).step(2) if num % 2 == 0]\n  if evens.empty?\n    return -1\n \
    \ \n  if y <= evens.max\n    return evens.max\n  \n  evens.each do |num|\n   \
    \ next if num <= y\n    break\n  end\n  \n  return num\nend\n</code>\nNow we have\
    \ a function that returns you the biggest even integer number that is in the range\
    \ [x, y] inclusive.\nNow lets test our function:\n<code>\nchoose_num(12, 15) #=>\
    \ 14\nchoose_num(13, 12) #=> -1\n</code>\n<|/ a |>\n<| c |>\nNice. `choose_num`\
    \ also works on [non-negative ranges](https://en.wikipedia.org/wiki/Choose-and-compare_problem).\
    \ `choose_num(12, 15)` returns `14`, but `choose_num(12, 17)` returns `-1`. It\
    \ would be nice if you could explain the role of `step 2`.\n<|/ c |>\n<| c |>\n\
    You're right I've misread the question, thanks for the correction. I will try\
    \ to fix the code so I can use it with negative numbers aswell.\n<|/ c |>\n<|\
    \ c |>\nIt's not a bug, it's expected behavior. `step 2` means \"step by two\"\
    . In this case the method will return `y` if the first value of `evens` is greater\
    \ than `y`.\n<|/ c |>\n<| c |>\nAh I see. Thanks for pointing that out! I have\
    \ edited the answer accordingly. I didn't think about the non-negative ranges\
    \ but it makes sense now\n<|/ c |>\n<| a |>\nYou can use the built-in method .max\
    \ on the Array, like so:\n<code>", "  if x < y\n    x, y = y, x\n  end\n  \n \
    \ count = 0\n  while x <= y\n    if x % 2 == 0 and y % 2 == 0\n      count +=\
    \ 1\n      x /= 2\n      y /= 2\n    else\n      if y % 2 == 0\n        y /= 2\n\
    \      else\n        x /= 2\n      end\n    end\n  end\n  \n  return count if\
    \ count > 0\n  return -1\nend\n</cell>\n<code language=julia-1.0>", "  return\
    \ Math.max(x.even? ? x : y, x.odd? ? x : y, y.even? ? y : x, y.odd? ? y : x)\n\
    end\n</cell>\n<code language=julia-1.0>\nchoose_num(12, 15)\n</cell>\n<code language=julia-1.0>\n\
    choose_num(12, 0)\n</cell>\n<code language=julia-1.0>\nchoose_num(12, 1)\n</cell>\n\
    <code language=julia-1.0>\nchoose_num(12, 2)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes two positive numbers x and y and returns the smallest\n\
    odd integer number that is in the range [x, y] inclusive. If there's no such number,\
    \ then \nthe function should return -1.", "  even = false\n  result = 0\n  for\
    \ i in 0...x\n    if even?\n      if i % 2 == 0\n        result = i\n        break\n\
    \      end\n    else\n      if i % 2 == 0\n        even = true\n        break\n\
    \      end\n    end\n  end\n  if result >= y\n    return -1\n  end\n  return result\n\
    end\n</code>\n<|/ a tags=ruby |>\n<| c |>\nHow would you go about writing a case\
    \ insensitive method?\n<|/ c |>\n<| c |>\nI do not understand what do you mean?\n\
    <|/ c |>\n<| c |>\nI was referring to a case insensitive method that would take\
    \ a string as its parameter and return -1 if the string is not even, otherwise\
    \ it would return the integer value of the string\n<|/ c |>\n<| c |>\nThe answer\
    \ by `Natsui Tadano` is exactly what I was looking for. Thanks.\n<|/ c |>\n<|\
    \ a dscore=2 |>\nI think this is more clear and efficient than other solutions:\n\
    <code>", "    if x != y && x > y\n        min = x\n        max = y\n    else\n\
    \        min = y\n        max = x\n    end\n    while min != max\n        mid\
    \ = min + (max - min) / 2\n        if mid%2 == 0\n            min = mid\n    \
    \    else\n            max = mid\n        end\n    end\n    if min == max\n  \
    \      min\n    else\n        -1\n    end\nend", "    puts(\"please enter two\
    \ positive numbers: \")\n    first = Integer(gets.chomp)\n    second = Integer(gets.chomp)\n\
    \    if x <= y && x > 0 && y > 0 && first > 0 && second > 0\n        puts(\"the\
    \ largest even integer number is: \")\n        puts((first + second).modulo(2).to_s)\n\
    \    else\n        puts(\"invalid input.\")\n    end\nend", "    smallest = ((x-1)*(x-2)*(x-3))\n\
    \    largest = ((y-1)*(y-2)*(y-3))\n    count = 0\n    even = 0\n    for i in\
    \ largest:\n        if i%2 == 0: \n            even = even + 1\n    if even ==\
    \ largest:\n        return even\n    else:\n        return -1", "  (((x+y)/2)..(Math.sqrt(x*x+y*y)))\n\
    \  .find {|i| i%2 == 0 && i%4 != 0 }\nend\n</code>\n<|/ a dscore=2 |>\n<| c |>\n\
    The code works fine if you  have integers only. You cannot use Float for this.\
    \ So, for example, the code in the post is not working with Floats:\nchoose_num(1.25,\
    \ 1.25) = nil\n<|/ c |>\n<| c |>\nThanks for that. I fixed my code.\n<|/ c |>\n\
    <| a dscore=0 |>\n<code>", "\treturn x if x % 2 == 0 and  y % 2 == 0 else y\n\
    end", "  raise ArgumentError.new(\"The range must be in ascending order.\")\n\
    end", "    puts \"The largest even number in the range [#{x}, #{y}] inclusive\
    \ is:\"\n    puts \"#{x}\"\n    puts \"#{y}\"\n    puts \"#{choose_num(x, y)}\"\
    \n    puts \"-\" * 80\n    puts \"#{x} + #{y} = #{choose_num(x, y)}\"\nend\n</code>\n\
    Here's an example of how it would run. I've added some more comments and used\
    \ puts statements so you can see what it's doing.\n<code>\n$ ruby test.rb\nThe\
    \ largest even number in the range [12, 15] inclusive is:\n12\n15\n12 + 15 = 24\n\
    --------------------\nThe largest even number in the range [13, 12] inclusive\
    \ is:\n13\n12\n13 + 12 = 25\n--------------------\nThe largest even number in\
    \ the range [10, 10] inclusive is:\n10\n10\n10 + 10 = 20\n--------------------\n\
    The largest even number in the range [5, 8] inclusive is:\n5\n8\n5 + 8 = 12\n\
    --------------------\nThe largest even number in the range [13, 12] inclusive\
    \ is:\n13\n12\n13 + 12 = 25\n--------------------\nThe largest even number in\
    \ the range [13, 12] inclusive is:\n13\n12\n13 + 12 = 25\n--------------------\n\
    The largest even number in the range [13, 12] inclusive is:\n13\n12\n13 + 12 =\
    \ 25\n--------------------\nThe largest even number in the range [12, 15] inclusive\
    \ is:\n12\n15\n12 + 15 = 24\n--------------------\nThe largest even number in\
    \ the range [12, 15] inclusive is:\n12\n15\n12 + 15 = 24\n--------------------\n\
    The largest even number in the range [12, 15] inclusive is:\n12\n15\n12 + 15 =\
    \ 24\n--------------------\nThe largest even number in the range [12, 15] inclusive\
    \ is:\n12\n15\n12 + 15 = 24\n--------------------\nThe largest even number in\
    \ the range [12, 15] inclusive is:\n12\n15\n12 + 15 = 24\n--------------------\n\
    The largest even number in the range [12, 15] inclusive is:\n12\n15\n12 + 15 =\
    \ 24\n--------------------\nThe largest even number in the range [12, 15] inclusive\
    \ is:\n12\n15\n12 + 15 = 24\n--------------------\nThe largest even number in\
    \ the range [12, 15] inclusive is:\n12\n15\n12 + 15 = 24\n--------------------\n\
    The largest even number in the ", "  i = 2\n  while i <= y do\n    num = x * i\n\
    \    i += 2\n    return num if num % 2 == 0 and (x || y) == i || num % 2 == 1\
    \ end\n  end\n  -1\nend", "  if x > y\n    x, y = y, x\n  \n  i = 0\n  while i\
    \ < x\n    i += 2\n    y += 2\n  \n  while y < x\n    y -= 2\n    x += 2\n  \n\
    \  return x\nend", "\treturn x.to_i * y.to_i + y.to_i % x.to_i\nend", "  max_even\
    \ = 0\n  \n  while x <= y\n    num = x + (y - x) / 2\n    if num.even?\n     \
    \ max_even = num\n      break\n      \n    x = x + 1\n    \n  max_even + 1\nend",
  "\treturn ((x if x % 2 == 0 else -1) + y) if x && y && x != -1 && y != -1 && (x\
    \ != -1 && y != -1) && ((x < y) ? x < y : y < x) end\nend", "  num = nil\n  while\
    \ true\n    num = rand(x..y)\n    return num if num >= x && num <= y\n  end\n\
    end\n</code>\nAnd this is the testing script:\n<code>\nrequire 'minitest/autorun'",
  "  case x when 0 then -1 when y then -1\n  else x if y then x / y\n  else -1 if\
    \ x < y then x else y\n  end\nend", "  x = (x >= 0 ? x : (x - 1))\n  y = (y >=\
    \ 0 ? y : (y - 1))\n  z = (x + y) / 2\n  z = z.modulo(2)\n  \n  if z == 0 && x\
    \ > 0\n    return choose_num(x, y - 1)\n  elsif z == 0 && (x == 0 || y == 0)\n\
    \    return -1\n  elsif z > 0 && x < y\n    return choose_num(x + 1, y)\n  else\n\
    \    return choose_num(x, y - 1)\n  end\nend\nputs choose_num(12, 15)", "    even\
    \ = x - y\n    even = even / 2\n    odd = (x + y) / 2\n    odd = odd / 2\n   \
    \ if even > odd then odd else even\nend", "  # Write your code here\n  \n  x =\
    \ x.to_i\n  y = y.to_i\n  if x > y\n    if x % 2 == 0\n      x -= 1\n      return\
    \ x\n    else \n      x += 1\n      return x\n  else \n    if y % 2 == 0\n   \
    \   y -= 1\n      return y\n    else \n      y += 1\n      return y\n  return\
    \ -1\nend\n</cell>\n<cell>\nchoose_num(15, 12)\n</cell>\n<text>\nQuestion 8\n\
    For the following array, let arr be an array of numbers.", "  num = -1\n  if x\
    \ > y\n    num = (x - y) - (y - x)\n  else\n    num = (x - y) - (x - y)\n  end\n\
    \  num = num.abs % 2 != 0\n  num ? num : -1\nend", "    \n    # Set the first\
    \ number to the minimum value.\n    first = x\n    # Set the second number to\
    \ the maximum value.\n    second = y", "  if x > y\n    x, y = y, x\n  end\n \
    \ \n  ((x % 2) == 0) ? ((y % 2) != 0) : ((y % 2) == 0)\n    ? x - y\n    : y -\
    \ x\nend", "  return -1 if (x-y) % 2 != 0 && (x-y) % 3 != 0\n  return (x+y) /\
    \ 2 if (x-y) % 2 == 0 && (x-y) % 3 == 0\nend\n</cell>\n<code language=julia-1.4>\n\
    choose_num(12, 15)\n</cell>\n<text>\nExercise 2\nWrite a function that given a\
    \ positive integer n, returns an array of strings describing \nthe square root\
    \ of n. One string should contain the integer part, the string \"to\" \nshould\
    \ be followed by the decimal part and the other should contain the fractional\
    \ \npart.", "  return y if x >= y || x <= -1 || x >= y || x <= -1 || x >= y ||\
    \ x <= -1\n  return -1\nend", "  min = x\n  max = y\n  while min < max\n    max\
    \ = max + 2\n    if nums[min] % 2 == 0 and nums[max] % 2 == 0\n      min = max\
    \ + 1\n    end\n  end\n  return min\nend", "  x = x.to_i\n  y = y.to_i\n  if x\
    \ >= y\n    x, y = [y, x]\n  even = x % 2 == 0\n  if even\n    x = x // 2\n  else\n\
    \    x = x + (y % 2)\n  end\n  while x < y && x > 0 do\n    x += 1\n    even =\
    \ x % 2 == 0\n    if even\n      x = x // 2\n    else\n      x = x + (y % 2)\n\
    \    end\n  end\n  return x if even == false\n  return -1\nend", "  \n  big_even\
    \ = 1\n  \n  if x > y\n    big_even = x\n    x\n  else\n    big_even = y\n   \
    \ y\n  end\n  \n  while (big_even - 1 <= x) do\n    big_even += 1\n  end \n  \n\
    \  while (big_even - 1 <= y) do\n    big_even += 1\n  end \n  \n  big_even\nend\n\
    </cell>\n<code language=julia-1.5>\nchoose_num(12, 15)\n</cell>\n<text>\nWrite\
    \ a function that takes a positive integer and returns the largest odd number\
    \ that is in the range [x, y] inclusive. If there's no such number, then the function\
    \ should return -1.", "    smallest = x\n    largest = y\n    \n    while(smallest\
    \ != largest and smallest % 2 == 0 and largest % 2 == 0):\n        if (smallest\
    \ < largest):\n            smallest = smallest + 1\n        else: \n         \
    \   largest = largest - 1\n            \n    \n    if smallest > largest:\n  \
    \      smallest = largest\n        \n    return smallest\n</cell>\n<cell>\nchoose_num(10,\
    \ 2)\n</cell>\n<cell>\nchoose_num(9, 8)\n</cell>\n<cell>\nchoose_num(7, 12)\n\
    </cell>\n<cell>\nchoose_num(100, 200)\n</cell>\n<cell>\nchoose_num(100, 200)\n\
    </cell>\n<text>\nThe range() function\nThe range() function is a generator function\
    \ which produces a sequence of numbers starting from start (inclusive) to end\
    \ (exclusive) without actually producing a list object. The output of this function\
    \ will be a sequence object rather than a list.", "  # Your code here\n  return\
    \ -1\nend", "  while x > y\n    x, y = y, x\n  end", "    if x <= y \n       \
    \ x += 1\n    \n    evens = 1 \n    while x <= y \n        if x % 2 == 0 \n  \
    \          evens += 1\n        x += 1\n        \n    \n    if evens % 2 == 1 \n\
    \        return y\n    \n    if evens == 0 \n        return -1\n    \n    \nend",
  '  return -1 if (x < 0 || y < 0)', "    biggest = x if y > x else y\n    return\
    \ biggest if biggest > 0 and biggest % 2 == 0 else -1\nend\n</code>\n<|/ a tags=ruby\
    \ dscore=0 |>\n<| c |>\nThis doesn't answer the question.\n<|/ c |>\n<| c |>\n\
    The question was how to get `12` and `13` as output. I suppose you misunderstood\
    \ me then.\n<|/ c |>\n<| c |>\nOops, you're right - I misunderstood.\n<|/ c |>\n\
    <| a dscore=0 tags=ruby |>\n<code>", "  if x > y \n    a, b = y, x\n  else\n \
    \   a, b = x, y\n  end\n  \n  while b <= a \n    # Keep on reducing the two numbers,\
    \ until we get down to 0.\n    # Then we'll know that the number is in the range.\n\
    \    \n    # Keep track of which number we had already chosen.\n    \n    # If\
    \ the number we had already chosen was even,\n    # then we'll only reduce by\
    \ 1\n    \n    # If the number we had already chosen was odd,\n    # then we'll\
    \ only reduce by 2\n    \n    # If the number we had already chosen was prime,\n\
    \    # then we'll only reduce by 3, etc, until we get down to 0.\n    if a % b\
    \ == 0 \n      a += 2\n    elsif b % a == 0 \n      b += 2\n    elsif b % 3 ==\
    \ 0\n      b += 2\n    end\n  \n  end\n  \n  a\nend", "  if x > y \n    return\
    \ -1\n  return x + (y-x) / 2.0\nend", "    evens = []\n    odds = []\n    \n \
    \   if x % 2 == 0:\n        evens.append(x)\n        \n    if y % 2 == 0:\n  \
    \      evens.append(y)\n        \n    for n in evens:\n        if (n > y) & (n\
    \ < x):\n            return n\n        \n    for n in odds:\n        if (n > y)\
    \ & (n < x):\n            return n\n        \n    return -1", "  (x..y).each do\
    \ |x|\n    if x % 2 == 0 && y % 2 == 0\n      return x if (x % 2) == (y % 2)\n\
    \    end\n  end\n  -1\nend\n</code>\n<|/ a dscore=3 |>\n<| a tags=ruby,ruby-on-rails,erb\
    \ |>\n<code>", "  if x > y \n  then return y\n  else return x\nend", "  max_even\
    \ = -1\n  \n  for i in 1..y\n    if x%i == 0\n      max_even = i\n      break\n\
    \    end\n  end\n  \n  if max_even == -1\n    return -1\n  else\n    return max_even\n\
    \  end\nend\n</cell>\n<cell>\nchoose_num(12, 15)\n</cell>\n<cell>\nchoose_num(13,\
    \ 12)\n</cell>\n<cell>\nchoose_num(13, 13)\n</cell>\n<text>\nThe range() function\n\
    There are three ways to create ranges in Ruby", "  return -1 if x < y || (x ==\
    \ y && x > 0)\n  y = y - 1\n  i = 1\n  while i <= y do\n    if (i % 2) == 0\n\
    \      return i\n    i = i + 2\n  end\nend\n</cell>\n<cell>\nchoose_num(12, 15)\n\
    </cell>\n<cell>\nchoose_num(13, 12)\n</cell>\n<cell>\nchoose_num(13, 13)\n</cell>\n\
    <text>\nFunctions within functions are called nested functions.\nHere is a function\
    \ that squares its input.", "  return x if x > y || x < 0 || y < 0 || x < y ?\
    \ -1 : (x|y)&(x|y)-1\nend", "  \n  beginning_number = x - 1\n  end_number = x\
    \ + 1", "    if x <= y then\n        if x % 2 =0 then\n            return x\n\
    \        else\n            return -1\n        end\n    elsif y <= x then\n   \
    \     if y % 2 =0 then\n            return y\n        else\n            return\
    \ -1\n        end\n    else\n        return -1\n    end\nend", "  nums = Array.new\n\
    \  nums[0] = 0\n  nums[1] = 1\n  nums[2] = 2\n  nums[3] = 3\n  nums[4] = 4\n \
    \ nums[5] = 5\n  nums[6] = 6\n  nums[7] = 7\n  nums[8] = 8\n  nums[9] = 9\n  nums[10]=\
    \ 10\n  nums[11]= 11\n  nums[12]= 12\n  nums[13]= 13\n  nums[14]= 14\n  nums[15]=\
    \ 15\n  nums[16]= 16\n  nums[17]= 17\n  nums[18]= 18\n  nums[19]= 19\n  nums[20]=\
    \ 20\n  nums[21]= 21\n  nums[22]= 22\n  nums[23]= 23\n  nums[24]= 24\n  nums[25]=\
    \ 25\n  nums[26]= 26\n  nums[27]= 27\n  nums[28]= 28\n  nums[29]= 29\n  nums[30]=\
    \ 30\n  nums[31]= 31\n  nums[32]= 32\n  nums[33]= 33\n  nums[34]= 34\n  nums[35]=\
    \ 35\n  nums[36]= 36\n  nums[37]= 37\n  nums[38]= 38\n  nums[39]= 39\n  nums[40]=\
    \ 40\n  nums[41]= 41\n  nums[42]= 42\n  nums[43]= 43\n  nums[44]= 44\n  nums[45]=\
    \ 45\n  nums[46]= 46\n  nums[47]= 47\n  nums[48]= 48\n  nums[49]= 49\n  nums[50]=\
    \ 50\n  nums[51]= 51\n  nums[52]= 52\n  nums[53]= 53\n  nums[54]= 54\n  nums[55]=\
    \ 55\n  nums[56]= 56\n  nums[57]= 57\n  nums[58]= 58\n  nums[59]= 59\n  nums[60]=\
    \ 60\n  nums[61]= 61\n  nums[62]= 62\n  nums[63]= 63\n  nums[64]= 64\n  nums[65]",
  "    smallest, largest = x, y\n    if x != y\n        smallest, largest = y, x\n\
    \        x, y = smallest, largest\n    end\n    smaller, larger = x, y\n    while\
    \ smaller < larger\n        smaller += 2\n        if smaller > largest\n     \
    \       largest = smaller - 1\n        end\n    end\n    return largest if larger\
    \ >= x\n    return -1\nend\n</cell>\n<code language=julia-1.6>", "  smallest_num\
    \ = Math.min_num(x, y)\n  greatest_num = Math.max_num(x, y)\n  return smallest_num\
    \ if smallest_num == greatest_num else -1\nend\n</code>\n<|/ a |>\n<| c |>\nYou\
    \ should never put code in your answer that isn't directly related to your question.\n\
    <|/ c |>\n<| a dscore=2 |>\nHere is an approach that works without recursion or\
    \ loops\n<code>", "    \n    # Check to see if the numbers are equal\n    if x\
    \ == y\n        return -1\n    \n    # If the numbers are not equal\n    num =\
    \ 0\n    \n    \n    # Loop through all the odd numbers from x to y\n    # and\
    \ check to see whether they are in the range\n    # [x, y].\n    while x <= y\
    \ do\n        \n        # Check if the number is even\n        if x % 2 != 0\n\
    \            num += x\n            \n        # Move to the next number\n     \
    \   x += 1\n        \n    # Return the largest even number in the range\n    return\
    \ num\n    ", "    \n    if x != y\n        return -1 if (x == y-1) else (x+y)\
    \ if (x < y) else (x-y)\n    else\n        return x\n    end\nend\n</cell>\n<text>\n\
    1.6 Question 2 - What is the largest possible number that can be divided by all\
    \ the numbers between 1 and 10 (both included)?", "    # Initialize the biggest\
    \ even number to the first number in the range.\n    biggest_even = x if x % 2\
    \ == 0 else y\n    # Iterate over all numbers in the range, and check if they\
    \ are even.\n    # As soon as one number is even, the biggest even number is set\
    \ to that \n    # number.\n    x.upto(y, 2) do |num|\n        if num % 2 == 0\n\
    \            biggest_even = num if num > biggest_even\n        end\n    end\n\
    \    return biggest_even\nend", "  for i in (2..(y + 1)) # the range goes from\
    \ 2 to y + 1\n    if x % i == 0 && (x /= i) \n      return i\n  -1\nend\n</cell>\n\
    <cell>", "    temp1 = 0\n    temp2 = 0\n    i = 0\n    even = 0\n    odd = 0\n\
    \    \n    while i <= x:\n        temp1 = temp1 + i\n        i += 1\n        even\
    \ = (temp1 % 2)\n        i += 1\n        odd = (temp1 % 2)\n        if even %\
    \ 2 == 0:\n            return even\n        else:\n            return odd\n  \
    \  \n    if temp2 > y:\n        return -1\n    ", "    even = 1 if x % 2 == 0\
    \ else 0\n    odd = 1 if y % 2 == 0 else 0\n    if x > y:\n        x, y = y, x\n\
    \    return y if x > y and x % 2 == even and y % 2 == odd else -1\nend", "   \
    \ return x if x > y else y\nend", "    if x < y && x % 2 == 0 && y < x && y %\
    \ 2 == 0\n        return x\n    elsif x < y && x % 2 == 0 && y > x && y % 2 ==\
    \ 1\n        return y\n    elsif x > y && x % 2 == 1 && y < x && y % 2 == 0\n\
    \        return y\n    else\n        return -1\n    end\nend", "    biggest =\
    \ -2\n    evens = []\n    odds = []\n    for i in range (x, y):\n        if i\
    \ % 2 == 0:\n            evens.append(i)\n        else:\n            odds.append(i)\n\
    \    for i in evens:\n        if i > biggest:\n            biggest = i\n    for\
    \ i in odds:\n        if i < biggest:\n            biggest = i\n    if biggest\
    \ == -2:\n        return -1\n    else:\n        return biggest", "  if x > y\n\
    \    x, y = y, x\n  end", "  return x > y ? x : y\nend", "  ((y <= x) != (x %\
    \ y)).each {|x| return -1}\n  ((y <= x) != (y % x)).each {|y| return -1}\n  ((x\
    \ <= y) != (y % x)).each {|x| return -1}\n  x\nend\n</code>\n<|/ a |>\n<| a tags=ruby,ruby-on-rails\
    \ |>\n<code>", "  i = 1\n  while i <= y do\n    if (x % i == 0 && y % i == 0)\
    \ then\n      return i\n    i += 1\n  end\n  return -1\nend", "  return x.to_s.to_i\
    \ + y.to_s.to_i\nend", "    puts \"The smallest even number less than or equal\
    \ to #{x} is #{((2 * x)..(x * (2 + 1))).find {|e| e % 2 == 0}}.\"\n    puts \"\
    The biggest even number less than or equal to #{y} is #{((2 * y)..(y * (2 + 1))).find\
    \ {|e| e % 2 == 0}}\"\nend", "  x = x.to_i\n  y = y.to_i\n  while y > 0\n    if\
    \ x % 2 == 0\n      x /= 2\n      y -= 1\n    else\n      x /= 2\n    end\n  end\n\
    \  return -1  if x == 0\n  return x\nend", "  return x if (x < y) && x % 2 ==\
    \ 0 && (y % 2 == 0 || y % x == 0) else -1\nend\n</code>\n<|/ a dscore=0 |>\n<|\
    \ c |>\nIt would be best if you'd explain the code as well.\n<|/ c |>\n<| c |>\n\
    Hey, I did add some comments, please read them and I hope it helps you.\n<|/ c\
    \ |>\n<| c |>\nThanks for the code. Could you please explain the logic behind\
    \ the code? It's difficult to understand.\n<|/ c |>\n<| c |>\nI just added some\
    \ comments, I hope it's clear.\n<|/ c |>\n<| a tags=ruby,ruby-on-rails,ruby-on-rails-4\
    \ |>\nHere's another solution\n<code>", "  ((x > 0) != (y > 0)) ? return (x +\
    \ y) : -1\n  ((x == 0) && (y == 0)) ? return 1 : -1\n  ((x == 0) && (y == 0))\
    \ ? return x : -1\n  ((x > 0) != (y == 0)) ? return (x + 1) : -1\n  ((x == 0)\
    \ && (y > 0)) ? return x : -1\n  ((x > 0) != (y == 0)) ? return (y + 1) : -1\n\
    \  ((x == 0) && (y > 0)) ? return y : -1\n  ((x == 0) && (y < 0)) ? return x :\
    \ -1\n  ((x > 0) != (y < 0)) ? return (x - 1) : -1\n  ((x > 0) != (y < 0)) ? return\
    \ (y - 1) : -1\n  ((x > 0) != (y < 0)) ? return (x - 1) : -1\n  ((x == 0) && (y\
    \ < 0)) ? return x : -1\n  ((x == 0) && (y < 0)) ? return y : -1\n  ((x == 0)\
    \ && (y < 0)) ? return x + y : -1\n  ((x == 0) && (y < 0)) ? return y - y : -1\n\
    \  ((x == 0) && (y < 0)) ? return y + y : -1\n  ((x == 0) && (y < 0)) ? return\
    \ x - y : -1\n  ((x == 0) && (y < 0)) ? return y - y : -1\n  ((x == 0) && (y <\
    \ 0)) ? return y + y : -1\n  ((x == 0) && (y < 0)) ? return x + y : -1\n  ((x\
    \ == 0) && (y < 0)) ? return x - y : -1\n  ((x == 0) && (y < 0)) ? return y +\
    \ y : -1\n  ((x == 0) && (y < 0)) ? return x - y : -1\n  ((x == 0) && (y < 0))\
    \ ? return y + y : -1\n  ((x == 0) && (y < 0)) ? return x + y : -1\n  ((x == 0)\
    \ && (y < 0)) ? return x - y : -1\n  ((x == 0) && (y < 0)) ? return y + y : -1\n\
    \  ((x == 0) && (y < 0)) ? return x + y : -1\n  ((x == 0) && (y < 0)) ? return\
    \ x - y : -1\n  ((x == 0) && (y < 0)) ? return y + y : -1\n  ((x == 0) && (y <\
    \ 0)) ? return x + y : -1\n  ((x == 0) && (y < 0)) ? return x - y : -1\n  ((x\
    \ == 0) && (y < 0)) ? return y + y : -1\n  ((x == 0) && (y < 0)) ? return x +\
    \ y : -1\n  ((x == 0) && (y < 0)) ? return x - y : -1\n  ((x == 0) && (y < 0))\
    \ ? return y + y : -1\n  ((x == 0) && (y < 0)) ? return x + y : -1\n  ((x == 0)\
    \ && (y < 0)) ? return x - y : -1\n  ((x == 0", "  i = 1\n  while i < x && i <\
    \ y\n    if i % 2 == 0\n      i += 1\n    else\n      x = x - i\n      i = i +\
    \ 1\n    end\n  end\n  if i == y\n    return i\n  else\n    return -1\n  end\n\
    end", "  if x <= y then return -1\n  \n  biggest_so_far = nil\n  \n  for x in\
    \ 1..y\n    if biggest_so_far == nil or biggest_so_far + x <= x\n      biggest_so_far\
    \ = x\n    end\n  end\n  \n  for x in 2..x\n    if biggest_so_far == nil or biggest_so_far\
    \ + x != biggest_so_far and biggest_so_far + x <= x\n      biggest_so_far = x\n\
    \    end\n  end\n  \n  return biggest_so_far\nend", "  \n  x.to_i.upto(y, step:\
    \ 1).find { |i| i.even? }\nend", "    return ((x % 2 == 0) & (y % 2 == 0))\nend\n\
    </cell>\n<text>\nLet's test our code:", "\t\n\teven = 1\n\todd = 1\n\t\n\twhile\
    \ even <= x and odd <= y\n\t\tif x % 2 == 0 and y % 2 == 0\n\t\t\treturn -1\n\t\
    \telse\n\t\t\tif x % 2 == 0\n\t\t\t\teven = even + 1\n\t\t\telse\n\t\t\t\todd\
    \ = odd + 1 \n\t\tend\n\tend\n\tif x == even\n\t\treturn x\n\telse\n\t\treturn\
    \ y\n\tend\nend", "  if x > y \n    x, y = y, x\n    \n  a = x.to_i\n  b = y.to_i\n\
    \  \n  while a <= b\n    # If the number has exactly one digit, it must be odd.\n\
    \    return -1 if a == 10 else a\n    a = a.succ\n    b = b.succ\n  end\n  \n\
    \  while a >= b\n    # If the number has exactly two digits, it must be even.\n\
    \    return -1 if a == 10 else a\n    a = a.succ\n    b = b.succ\n  end\n  \n\
    \  return a if a == b \n  return -1\nend", "  return x if y > x || y <= 0\n  \n\
    \  # Return -1 in case it can't find the number.\n  return y if x < y || x <=\
    \ 0\nend\n</cell>\n<cell>\nchoose_num(11, 11)\n</cell>\n<text>\nQuestion 7: Write\
    \ a method sum_of_digits that takes a positive integer (n) and returns the sum\
    \ of the digits of the number in reverse order.\nExamples:", "    even = (x %\
    \ 2 == 0) and (y % 2 == 0)\n    if even\n        even = x + y\n        even =\
    \ even % 2\n    end\n    \n    if even == 1\n        return x\n    end\n    \n\
    \    if even == 2\n        return y\n    end\n    \n    even = (x % 2 == 0) and\
    \ (y % 2 == 0)\n    even = even + 1\n    even = even % 2\n    return even\nend",
  "    evens = 0\n    odds = 0", "  if((x > y or x < 0) or (y < 0) or x == y)\n  \
    \  return -1\n  else\n    mid = (x + y) / 2\n    left = choose_num(x, y)\n   \
    \ right = choose_num(mid, y)\n    if left == -1\n      left = 0\n    if right\
    \ == -1\n      right = 0\n    if left > right\n      left, right = right, left\n\
    \    return mid + (left * 2)", "    return -1 if x < y\n    \n    x.times do |i|\n\
    \        return i if i.even?\n    end if y == 0\n    \n    x.downto(0) do |i|\n\
    \        return i if i.even?\n    end if y == 0\n    \n    x.upto(y-1) do |i|\n\
    \        return i if i.even?\n    end if y == 0\n    \n    return -1\nend\n</cell>\n\
    <cell>\nchoose_num(4,8)\n</cell>\n<cell>", "  (x .. y).each do |x|\n    if (x\
    \ % 2 == 0)\n      puts x\n      return x\n    end\n  end\n  return -1\nend",
  "    even = x % 2\n    greater = y", "    i = x\n    j = y\n    while i > 0 and\
    \ j >=0\n        if i % 2 == 0 and j % 2 == 0\n            return i\n        i\
    \ = i / 2\n        j = j / 2\n    return -1", "  ((x >= y or y < 0) ? -1 : (y\
    \ >= x ? x : (x > y ? x : y)))\nend\n</cell>\n<code language=julia-1.5>\nchoose_num(12,\
    \ 15)\n</cell>\n<code language=julia-1.5>\nchoose_num(13, 12)\n</cell>\n<text>\n\
    Recall that in Julia, the if expression takes the form of an if condition, followed\
    \ by a colon, followed by an expression.", "    if x <= y\n        x\n    else\n\
    \        y\n    end\nend\n</cell>\n<code language=julia-0.5>", "  \n  # Initialize\
    \ a variable to hold the result\n  result = 0"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
