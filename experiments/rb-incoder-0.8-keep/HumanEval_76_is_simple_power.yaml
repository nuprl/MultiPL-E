name: HumanEval_76_is_simple_power
language: rb
prompt: "# Your task is to write a function that returns true if a number x is a simple\n\
  # power of n and false in other cases.\n# x is a simple power of n if n**int=x\n\
  # For example:\n# is_simple_power(1, 4) => true\n# is_simple_power(2, 2) => true\n\
  # is_simple_power(8, 2) => true\n# is_simple_power(3, 2) => false\n# is_simple_power(3,\
  \ 1) => false\n# is_simple_power(5, 3) => false\ndef is_simple_power(x, n)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_is_simple_power\n\
  \    candidate = method(:is_simple_power)\n    assert_equal(true, candidate.call(16,\
  \ 2))\n    assert_equal(false, candidate.call(143214, 16))\n    assert_equal(true,\
  \ candidate.call(4, 2))\n    assert_equal(true, candidate.call(9, 3))\n    assert_equal(true,\
  \ candidate.call(16, 4))\n    assert_equal(false, candidate.call(24, 2))\n    assert_equal(false,\
  \ candidate.call(128, 4))\n    assert_equal(false, candidate.call(12, 6))\n    assert_equal(true,\
  \ candidate.call(1, 1))\n    assert_equal(true, candidate.call(1, 12))\n  end\n\
  end\n"
completions: []
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
