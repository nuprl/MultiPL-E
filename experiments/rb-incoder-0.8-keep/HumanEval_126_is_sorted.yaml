name: HumanEval_126_is_sorted
language: rb
prompt: "# Given a list of numbers, return whether or not they are sorted\n# in ascending\
  \ order. If list has more than 1 duplicate of the same\n# number, return False.\
  \ Assume no negative numbers and only integers.\n# Examples\n# is_sorted([5]) \u279E\
  \ True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1, 3, 2, 4, 5]) \u279E\
  \ False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1, 2, 3, 4, 5,\
  \ 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n# is_sorted([1,\
  \ 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\ndef\
  \ is_sorted(lst)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_is_sorted\n\
  \    candidate = method(:is_sorted)\n    assert_equal(true, candidate.call([5]))\n\
  \    assert_equal(true, candidate.call([1, 2, 3, 4, 5]))\n    assert_equal(false,\
  \ candidate.call([1, 3, 2, 4, 5]))\n    assert_equal(true, candidate.call([1, 2,\
  \ 3, 4, 5, 6]))\n    assert_equal(true, candidate.call([1, 2, 3, 4, 5, 6, 7]))\n\
  \    assert_equal(false, candidate.call([1, 3, 2, 4, 5, 6, 7]))\n    assert_equal(true,\
  \ candidate.call([]))\n    assert_equal(true, candidate.call([1]))\n    assert_equal(false,\
  \ candidate.call([3, 2, 1]))\n    assert_equal(false, candidate.call([1, 2, 2, 2,\
  \ 3, 4]))\n    assert_equal(false, candidate.call([1, 2, 3, 3, 3, 4]))\n    assert_equal(true,\
  \ candidate.call([1, 2, 2, 3, 3, 4]))\n    assert_equal(true, candidate.call([1,\
  \ 2, 3, 4]))\n  end\nend\n"
completions: []
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
