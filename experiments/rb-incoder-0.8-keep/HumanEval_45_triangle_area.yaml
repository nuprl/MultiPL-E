name: HumanEval_45_triangle_area
language: rb
prompt: "# Given length of a side and high return area for a triangle.\n# >>> triangle_area(5,\
  \ 3)\n# 7.5\ndef triangle_area(a, h)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_triangle_area\n\
  \    candidate = method(:triangle_area)\n    assert_equal(7.5, candidate.call(5,\
  \ 3))\n    assert_equal(2.0, candidate.call(2, 2))\n    assert_equal(40.0, candidate.call(10,\
  \ 8))\n  end\nend\n"
completions: ["  s = (1/2)*a**h\n  s.to_f\nend", "  a *= h\n  b = h * 3\n  c = (h\
    \ * 2) * (3 / 2)\n  return (a * b * c)/2\nend", "  (a*(h-a))\nend", "  (a*a +\
    \ h*h)/2\nend", "  a^2 + h^2 - a\nend\n</cell>\n<cell>", "  if h == 0\n    return\
    \ 0\n  return (a**2) * ((2*h)**2) * (1/4 * (3-a+h))\nend", "  a = (a**0.5).floor\n\
    \  h = (h**0.5).floor\n  s = (a + h) * 0.5\n  a2 = a*a\n  h2 = h*h\n  c1 = (a\
    \ + h)*h\n  c2 = (a + h)*h2\n  c3 = (2*a)*h\n  s = (a + h)*(c1 + c2 + c3)\n  s2\
    \ = s*(s - a) + a\n  s = (s - s2)/(a - h)\n  s = (s + a)/(a - h)\n  s = (a2 -\
    \ s)*(s2 - a) + a\n  s = (s + a)/(a - h)\n  return s\nend", "  return a * h /\
    \ 2\nend\n</code>\n<|/ a tags=ruby,python |>\n<| c |>\nThat's really a pretty\
    \ good explanation of what it means to have a module with one or two constants,\
    \ though. Very cool.\n<|/ c |>\n<| c |>\nI really liked your approach of putting\
    \ all of the code in a single module. I'm still going to have to go through all\
    \ of these explanations just to get my head around it. I'm also having a hard\
    \ time finding good resources for Ruby or Python tutorials since my experience\
    \ is limited to C and Java.\n<|/ c |>\n<| c |>\nIt seems that you have a lot more\
    \ Python than I do. I love the syntax though. My brain hurts when I try to write\
    \ Java without having to read Python. :)\n<|/ c |>\n<| a |>\nI thought I'd share\
    \ my little bit of knowledge on Python since it's what I'm learning right now\
    \ and maybe some of you will find this useful. I am a novice in Python and this\
    \ is my first question on Stack Overflow but I'm proud of it! I hope you will\
    \ like it and find it helpful.\nTo my understanding, there are two ways to define\
    \ constants in Python:\n<code>", "  h = Float(h / 2)\n  area = 0.0\n  (2*a*(h+a)).times\
    \ do |i|\n    area += 0.5\n    area += (i-h)**2 \n  end\n  area\nend\n</code>\n\
    Now we can define a function that takes an array of n points as an argument and\
    \ returns a list of the angles between them and a list of the total areas of those\
    \ angles:\n<code>", "  (( (h / 2.0) * (b - a) ) - ( (a / 2.0) * (h - b) ))\nend",
  "  return (a+h)*(a-h)\nend", "  (a * (h/2)**2) + (a * h) * (h/2 - math.sqrt(h**2\
    \ + a**2))\nend", "  ( a*h-a*h+2*a*(1-h) ) / (2*a**2-(1-h)**2)\nend", "  return\
    \ (a*h)/2\nend\n</cell>\n<code language=julia-1.5>", "  s = 0.0;\n  for x in range(-a,\
    \ a+h)\n    s += 1.0/((a*x)**2 + (a*x)**2 + (a*x)**2);\n  s/=3;\n  s;\nend", " \
    \ (b,d) = (2*a, h) - h/3\n  (c,e) = (a, 2*h)\n  f = 2*h*h/3\n  (z,x) = ([1,2]\
    \ + [a] + [b] + [a][b] +\n           [c][c] + [b][d] + [c][d] + [d][d])\n  return\
    \ x*(d-y) + z*(d-e)\nend", "  (a**2) * (2*h) / (((h**2)*h) - (2*a**2))\nend\n\
    </cell>\n<cell>", "  ((b*h)/2)**0.5\nend", "  (a*h)/2\nend", "  \nend", "  return\
    \ (a * (h ** 2)) / (4 * (3 * a))\nend", "  (a**2) * Math.sqrt(h) / 2\nend\n</cell>\n\
    <cell>", "\treturn (a*(h*h+a*a)*(1/4.0-2*a*h*(a*h)/3))\nend", "  l = ((2 * (h\
    \ ** 2)) + (3 * (a ** 2)) + (a ** 3))\n  area = l / 2\n  return area\nend", " \
    \ if a == 0 or h == 0 or a == h\n    0\n  else\n    (a * a) - (h * h) / 2\n  end\n\
    end", "  if a == h\n    return 0.125 * (a + b) / 2\n  else\n    return 0.5 * ((a\
    \ + b) * (b - h))\nend", "  a = (a+h)/2\n  (a**2 - (sqrt(a**2)*a)).floor/a\nend",
  "  h2 = h2power(h/2) * h2power(h/2*(-2/3+a/3))\n  h3 = h2power(h/2) * h2power(h/2*(2/3+a/3))\n\
    \  h4 = h2power(h/2 * -a/3)\n  area = ((h2*h2)+h3*h3+h4*h4)*(a+2)/2\n  return\
    \ area\nend", "  s = (h*h)/2\n  return s*((s/2)*((s-a)/2 + (s/2)*(a/2 - s)) +\
    \ 2*s/(a*(s-a))) - a*(a*h/2-a*s/2)\nend", "  (a * h) / 2\nend", "  s = (a + b\
    \ + c)/2\n  area = s * s\n  return s * h / 2\nend", "  return (h**2) * (a**(3/2))\n\
    end", "  (a*a)/2 + h*h/2\nend", "  (a**2 +(h/2)**2)**0.5\nend", "\tarea_1 = (h*h)/2\n\
    \tarea_2 = (a*a)/2\n\tarea_3 = area_1 + (area_2 - area_1)*(a+a)/2\n\treturn area_3\n\
    end", "\treturn a**2 / h**2\nend", "  (a * b) / Math.sqrt(a * a + h * h)\nend\n\
    </cell>\n<text>\nProblem 8 (Solution)", "  h = h / 2\n  a2 = (a * a) - (h * a)\
    \ + h\n  a = (a * a) - (a2 * h) + a2\n  return a\nend", "  # Write your code here.\n\
    \  return (a**2 - h**2) / (2 * a)\nend", "    (a2, b2, c2) = sides\n    return\
    \ a*(h*b2)*(h*c2)/(a2*b2)\n</code>\n<|/ a |>\n<| c |>\nThis code works perfectly!\
    \ Thanks so much! The one thing I am confused about is what '@property' does.\
    \ Can you provide an explanation of how to use that here?\n<|/ c |>\n<| c |>\n\
    That simply makes the function look like an attribute. See the [`@property`](http://docs.python.org/2/library/functions.html#property)\
    \ documentation for more details.\n<|/ c |>\n<| a dscore=3 tags=python,algorithm\
    \ |>\nYou can compute the area of a triangle by computing the area of each side\
    \ of the triangle and summing up the areas.  The formula for area of a triangle\
    \ is here: http://www.mathsisfun.com/geometry/triangle-area.html\nFor computing\
    \ the area of each side of a triangle, the formula is given here: http://www.mathsisfun.com/geometry/sides-area-triangle.html\n\
    <code>", "  ((a + h) / 2).sqrt() * ((a + h) / 2).sqrt()\nend", "  s = math.sqrt(a\
    \ * a + (h-1) * (h - 1) * 0.5) * 0.5;\n  return s\nend", "  (a*h)/2\nend", " \
    \ (a * (h ** 2)) / 2\nend", "  return a**0.5*(h**2)\nend", "  (a*a+h*h-a*h).round/(2*a).round\n\
    end\n</cell>\n<cell>", "  return (a * (b * (h / 3) - a * b) / 2)\nend\n</cell>\n\
    <text>\nNext, let's implement the function for finding the circumference of a\
    \ triangle using the formula $C = a  h$. Then, let's apply that to a couple test\
    \ cases:", "  (1.0 / 3.0) * Math::sqrt(Math::sqrt(Math::square(a) + Math::square(h))\
    \ / 2.0)\nend", "  s = 0.0;\n  for i in 0...a do\n    s += a\n  end\n  s /= 3.0;\n\
    \  for i in 0...h do\n    s -= a\n  end\n  s\nend", "    s = (a + h) * (h - a)\
    \ / 2\n    return math.sqrt(s)", "    tri = (((2 * a) + (2 * h)) / 3, ((h * (1\
    \ - 2)) + (2 * a)) / 3)\n    return tri[0] / tri[1]\nend", "  a *= a\n  h *= h\n\
    \  return (a * h) / (0.5 * math.sqrt(a * a + h * h))\nend", "  ( a + b ) * ( b\
    \ + c ) * ( c + d )\nend", "  (a**2)*(h**2)\nend", "  return (a * h) / 2.0 / math.pi\n\
    end", '  return 3.1415926535897932*(0.5*h*(a*(a+h)-2*a*h))**0.5', "  (a*h)/2.0\n\
    end", "  (a*h) / 2\nend", "  (a+b+c+d+e)**2 / 4\nend", "  ((b*h)/a)**0.5\nend\n\
    </code>\nNow we can put it all together and create a recursive function to calculate\
    \ the area of any triangle that passes through three points:\n<code>", "  (a**2)\
    \ * (h/2)**3\nend", "  (a**2) + (h**2) - (a*h) / 2\nend\n</cell>\n<code language=julia-0.4>",
  "  (a**2) * (h**2) * (h-a/2) / (a*h**2)\nend", "  (a * b * Math.sqrt(3 * a * b -\
    \ Math.pow(a, 2))) / Math.sqrt(a * b)\nend", "  raise NotImplementedError\nend\n\
    </cell>\n<code language=julia-1.5>", "  raise NotImplementedError\nend", "\treturn\
    \ a * (h / 2)\nend", "  return ((a/2)**2 + (h/2)**2)**0.5\nend", "\ttri = (a +\
    \ h) / 2\n\treturn tri * (tri - 1) * (h - a) / 2\nend", "  s = (a + h) / 2\n \
    \ area_triangle = (s*(s - a))\n  return area_triangle\nend", "  a = Float(a);\
    \ h = Float(h)\n  return Float.sqrt(Float.sqrt(Float.pow(a, 2)) / Float.pow(h\
    \ * h, 2))\nend", "\treturn a * (math.sqrt(h / 2.0)) * (math.sqrt(3.0) - ((h /\
    \ 2.0) / 3.0)) * (3.0 - 2.0 * ((h / 2.0) / 3.0)) ** (1.0 / 3.0)", "  # Initialize\
    \ triangle. Set it to sides of triangle and higher.\n  triang = []\n  triang.push\
    \ a\n  triang.push h\n  triang.push h", "  if h < 3 or h > 5\n    raise ArgumentError,\
    \ \"must be 3, 4, or 5\"\n  end", "  a = (a**0.5) * (h**0.5) \n  a1 = a * a \n\
    \  h1 = h * h\n  h2 = h * h\n  a2 = a1 * h1\n  \n  area_tri = (a + h) * (a1 +\
    \ h1) * (a2 + h2)\n  return area_tri", "\treturn a*(h/2)-(h/2)*((a/2)**2)\nend",
  "  return a * (math.sqrt(3) / 2) * h\nend", "  (a * (h / 2)) / 2\nend\n</cell>\n\
    <text>\nIntersection of a triangle with rectangle", "  ((s * s) + (2 * s * h)\
    \ + (h * h)) * ((s / 2) ** 2)\nend", "  s = a * ( h / 2 )\n  print s\n  return\
    \ s\nend", "  m = (2 * a * h) / (3.14 * (h * h + 2 * h * a))\n  (Math.sqrt(m)\
    \ / a).round\nend\n</cell>\n<code language=julia-1.5>\nfunction triangle_area(a,\
    \ b::Int)\n  (a * a * Math.sqrt(3) / Math.sqrt(a + b * b) - (a + b) * Math.sqrt(3))\
    \ / (Math.sqrt(a) * Math.sqrt(b) * Math.sqrt(3)).round\nend\n</cell>\n<code language=julia-1.5>\n\
    triangle_area(5, 3)\n</cell>\n<code language=julia-1.5>", "  (a * (h / 2)) **\
    \ 2 / (4 * 3.14 * Math::PI)\nend", "    s = (a + b + h) / 2\n    return s * s\n\
    end", "  (a * b) / (sqrt(a * a + h * h))\nend", "  h = h - a\n  a = a * (1.0 /\
    \ 6.0)\n  s = (h * h * 3) / 2\n  area = s * s\n  area += a\n  return area\nend",
  "  s = 0.5*(a*a + h*h) - a*h\n  if s < 0\n    raise 'Not a triangle'\n  s\nend",
  "  s = (a + b + c) / 2\n  area = if s >= 0 then s / a * h else 0\n  return area\n\
    end", "  if h < 0\n    0\n  elsif h == 0\n    a * 0.5\n  else\n    (a * (h + 1)\
    \ + a * (h - 1 - a) * (h + 1 - a)) / 2\n  end\nend\n</cell>\n<code language=julia-0.6>",
  "  (a**2) + ((2 * b) * h) - h\nend", "  return a * (sqrt(3)*h - sqrt(3)*h/3 - 3*a*h/6)\n\
    end", "    area_of_triangle = math.acos((a**2 / h**2))\n    area_of_triangle =\
    \ area_of_triangle * 2\n    area_of_triangle = area_of_triangle * 4\n    area_of_triangle\
    \ = area_of_triangle / 2\n    area_of_triangle = area_of_triangle / 3\n    area_of_triangle\
    \ = area_of_triangle * a\n    area_of_triangle = area_of_triangle / h\n    area_of_triangle\
    \ = area_of_triangle / 5\n    return area_of_triangle", "  a2 = a*a\n  h2 = h*h\n\
    \  det = a2 + h2 - 2.0*a*h\n  return det/(a+h)\nend\n</cell>\n<code language=julia-1.5>",
  "  return a * ((h / 2) * (h / 2))\nend", '  return a**2 / 4 + h * h / 2', "  # Calculate\
    \ area of a triangle with base a, height h.\n  return (a * h) / 2\nend", "  triangle_area\
    \ = (a**2) + (3*h**2)\n  triangle_area = 1/(2*3.14)*triangle_area\n  return triangle_area\n\
    end", "  (a**2 - ((h**2)+4)*h)/2\nend\n</cell>\n<cell>", '  return a**2 / h**2',
  "  area_tri = a * (math.sqrt(3 * h / 4) - a + math.sqrt((a * a + h * a) * h / 4))\
    \ * 2 / 3\n  area_tri = area_tri / 2\n  area_tri\nend", "  return ((a / 2) * h)\
    \ + ((h / 2) * a)\nend\n</code>\nThe main method now reads:\n<code>", "    s =\
    \ (a + b) / 2\n    t = (c + d) / 2\n    return math.sqrt(s ** 2 + t ** 2) - math.sqrt(s\
    \ * t + a * h)\n</code>\n<|/ a dscore=0 |>\n<| a |>\nHere is my solution, with\
    \ explanation in comments.\n<code>\nimport math", "  raise NotImplementedError\n\
    end", "  (a * a * 2) + (h * h * 2)\nend", "  return (a**2 - h**2)/2\nend\n</cell>\n\
    <text>\nNow we can call triangle_area() to calculate the area of a triangle:",
  "  return a**3/(3*h*h-a*a)\nend", "  (0.5 * (h ** 2) * (1 + a ** 2)).sqrt\nend",
  "    s = (a + b + c) / 2.0\n    t = (a + b + h) / 2.0\n    return s * t\n</code>\n\
    <|/ a tags=python,algorithm |>\n<| c |>\nThank you for your help. I understand\
    \ now that my problem was with the formula I was using.\n<|/ c |>\n<| a dscore=1\
    \ |>\nJust a quick note, you're using Python, so you can use math module.\n<code>\n\
    >>> import math\n>>> def triangle_area(a,b,c):\n...     return math.sqrt(a **\
    \ 2 + b ** 2 + c ** 2)\n... \n>>> triangle_area(4,3,5)\n5.0\n>>> triangle_area(5,4,3)\n\
    5.0\n>>> triangle_area(5,3,4)\n5.0\n>>> \n</code>\n<|/ a tags=python,algorithm\
    \ |>\n<| a |>\nYou can use math.sqrt:\n<code>", "  (a*h)/2\nend", "  s = (a +\
    \ b) / 2.0\n  area = s * (s* (h + s) / 2.0 + h* (a + s) / 2.0)\n  return area\n\
    end", "  (a+h)*(a+h+2.0) * (a+h+2.0+h)\nend", "  (h**3)*(1/2*a + 3/4)\nend", " \
    \ area_of_side = a * b / 4\n  area_of_side = area_of_side + a * (b * (3 - a))\
    \ / 6\n  area_of_side * h / 12\nend\n</code>\n<|/ a dscore=1 tags=ruby,ruby-on-rails,rubygems,ruby-on-rails-3\
    \ |>\n<| c |>\nWhat if I only want to calculate area from 3 sides? I dont have\
    \ \"b\" value\n<|/ c |>\n<| a tags=ruby,ruby-on-rails,rubygems,ruby-on-rails-3\
    \ dscore=0 |>\nYou could do it this way:\n<code>\nrequire 'mathn'", "  h**2 /\
    \ 4 * (3 - (4/a)**3)\nend", "  (h - a + 1) * 0.5\nend", "  return (2 * (a - h))\
    \ * (h * (a - h))\nend", "  h1 = (h - a - 1) / 2\n  h2 = h - a\n  \n  area_tri\
    \ = (h1 * h2) * (a + 1)\n  \n  return area_tri\nend", "  t = (a+b+c)/2\n  s =\
    \ (sqrt(b*b+c*c) - (a-b)**2) / (2*h)\n  h = abs(h) - s\n  a = (a*h-b*h+c*h+d*h)/(2*h)\n\
    \  s = (sqrt(a*a+b*b+c*c-d*d) - a**2) / (2*h)\n  h = abs(h) - s\n  a = (a*h-b*h+c*h+d*h)/(2*h)\n\
    \  return a\nend", "  ((a*h)/2.0).round\nend", "  area_tri = 0\n  if a <= 0\n\
    \    area_tri = 0\n  elsif h < 0\n    area_tri = triangle_area(a + h, h)\n  elsif\
    \ a < h\n    area_tri = triangle_area(a, h - a)\n  end\n  area_tri * 0.5\nend",
  "  return a * h / 2\nend\n</cell>\n<code language=julia-1.3>", "  s = (a + h) *\
    \ (b + h)\n  s = (s + a) * h / 2\n  s = (s + b) * h / 2\n  s = s * h / 4\n  return\
    \ s\nend", '  return (a**2 / h**2) - ((a + h)**2 / 4 * (a + h - b + 1))', "\t\
    return a * (h / 3) * (h / 3)\nend", "  return (a * a * h) / 2.0;\nend\n</code>\n\
    The above method of calculating area is straight forward, we only have to remember\
    \ that area of a triangle is equal to base of the triangle + height of the triangle\
    \ / 2. So our area function is almost identical to area_of_rectangle method. I\
    \ just wanted to show the power of having area method and I didn't want to write\
    \ area_of_rectangle method.\nNow let's look at other area functions:\n<code>",
  "  a**2 - h**2 / (2*3.14)\nend\n</cell>\n<cell>\ntriangle_area(5, 3)\n</cell>\n\
    <text>\nProblem 3", "  ((2*a**3)/h - 2*a*h**2 + 6*a*h + 2*h**2)/4\nend", "  (h**2)\
    \ * ((2 * a + h) / h) * ((2 * a + h) / h)\nend", "\tarea_a = a * 0.5\n\tarea_h\
    \ = (h * 0.5) ** 2\n\treturn area_a + area_h", "  return 1/6 * (a**3 - a*h + h**3)\n\
    end\n</cell>\n<text>\nWe can now calculate the area of any triangle in terms of\
    \ its base and height.", "\treturn (a / 2) * (((h) / 2) * h) - ((h / a) * a) *\
    \ (((h) / 2) * h) + a\nend", "  return (a**2) * (h/2)**2\nend\n</cell>\n<code\
    \ language=julia-1.0>", "  return (a**2) * ((3/2) * (h**2)) + (a * (4/3)) * h\n\
    end", "\t(h * h + a * a) / 2\nend", "  ((b*h)/(a+b+c+d))\nend\n</cell>\n<code\
    \ language=julia-1.0>", "  return (a**2 - h**2) / (2 * a)\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@assert triangle_area(1, 2) == 0.5\n@assert triangle_area(3,\
    \ 4) == 0.75\n@assert triangle_area(5, 3) == 7.5\n</cell>\n<text>\nNext we define\
    \ our own Point type.", '    return (a * h) / 2', "    ( a*h ) / ( sqrt(a) * sqrt(h)\
    \ )\nend", "  area = (a * a) - (h*h)\n  area = Math.sqrt(area)\n  return area\n\
    end", "    area_a = (4 * h * h) / 2\n    area_b = (3 * h ** 2) * (a ** 2)\n  \
    \  area_c = (a ** 2) * (3 * h ** 2) + (a ** 2) * h\n    area_total = area_a +\
    \ area_b - area_c\n    return area_total", "  # Define side of triangle and length\
    \ of sides.\n  s = a * math.sqrt(1.0 / 3)\n  area = s * (a + h) * (s - h)\n  \n\
    \  return area\nend", "  b = ((4*h) + (4*sqrt(3*(a**3)/(h**3))))**(1/2)\n  c =\
    \ 2*sqrt(3*a*h/(h**2))\n  area_triangle = a + b + c\n  return area_triangle\n\
    end\n</cell>\n<text>\nQuestion 3.2. Write a function that returns area of a right\
    \ triangle. Your function should take three numbers (lengths of two sides of a\
    \ triangle) and return area of a right triangle.", "  ( 2 * ( a + h ) - ( a +\
    \ h ) * ( 2 * h + a ) )\nend", "  (1 / 2) * math.sqrt(\n    (a * (b + c) + d *\
    \ (e - f))\n    * (a * (b + h) + d * (f - e))\n    * (a * (e - h) + d * (f - c))\n\
    \    * (b * (e - h) + e * (f - c))\n    * (b * (f - e) + f * (f - c))\n  )\nend",
  "  # initialize base variables\n  s = 0.0 # base area\n  t = 0.0 # base perimeter\n\
    \  c = 0.0 # base convex hull area", "  if a < 3 or h < 3\n    puts \"At least\
    \ 2 sides are required.\"\n    return 0\n  elsif h < 2*a\n    puts \"Third side\
    \ must be greater than twice the first side.\"\n    return 0\n  end\n  (a*(h/2)).floor\n\
    end", "  return a * ((2 * a * h) / 3) - ((h / 2) * ((2 * a * (h - 2)) / 3))\n\
    end\n</code>\nThe next step is calculating the area of a triangle which is going\
    \ to be equal to the sum of the triangle areas of the side lengths.\n<code>",
  "  return a * (math.sqrt(1 - ( h / a )**2 ) )\n</cell>\n<cell>", "  (a**2)*(h**2)\n\
    end", "\th = h / 2\n\treturn (math.sqrt(3.0) * (a - h) + a * math.sqrt(3.0) /\
    \ 2.0) / (a + h)\nend", '  return (a*h)/2', "  (a^2)*(h/2)^2\nend", "  a**2 -\
    \ h**2\nend", "  area_a = (a / 2) * math.tan(Math::PI / 3 * (a / 2))\n  area_b\
    \ = (h / 2) * math.tan(Math::PI / 3 * (h / 2))\n  area_c = (area_b - area_a)\n\
    \  return area_c\nend\n</code>\n<|/ a |>\n<| a tags=ruby,math |>\nHere is a general\
    \ formula to calculate the area of a triangle given its sides:\n<code>", "\ttriangle_area_formula\
    \ = a*a*h/6\n\treturn triangle_area_formula\nend", "  (1.0/2.0) * a * (h/3.0)\n\
    end", "  (a**2 - h**2)/2\nend\n</cell>\n<text>\nA triangle is a right triangle\
    \ when its hypotenuse is equal to its hypotenuse squared, a triangle is a left\
    \ triangle when its hypotenuse is less than its hypotenuse squared, and an equilateral\
    \ triangle is one with equal hypotenuses and opposite sides. A right triangle\
    \ has a right-angled triangle.", "  a0 = (a**2) - (h**2)\n  a1 = 2*a*h\n  a2 =\
    \ (a**2 + h**2)\n  (a/2) * (a0/a1) * (a2/a0)\nend", "  s = h * h\n  h = a * h\n\
    \  a = s * a / (s + h)\n  return a\nend", "  area_of_triangle = (a/3)*(h/3)\n\
    \  return area_of_triangle\nend", "  (a+h)*(a-h)\nend", "    return math.sqrt((b*b)/(h*h)\
    \ - (a*a)/(2*b) ) / b\n</cell>\n<cell>\ntriangle_area(5, 3)\n</cell>\n<cell>\n\
    triangle_area(3, 5)\n</cell>\n<cell>\ntriangle_area(3, 3)\n</cell>\n<cell>\ntriangle_area(1,\
    \ 1)\n</cell>\n<cell>\ntriangle_area(1, 0)\n</cell>\n<cell>\ntriangle_area(0,\
    \ 0)\n</cell>\n<cell>\ntriangle_area(9, 1)\n</cell>\n<cell>\ntriangle_area(12,\
    \ 5)\n</cell>\n<cell>\ntriangle_area(12, 9)\n</cell>\n<cell>\ntriangle_area(9,\
    \ 12)\n</cell>\n<cell>\ntriangle_area(12, 12)\n</cell>\n<cell>", "  return a**2\
    \ / float(h**2) + (a**2 * a * h) / float(6 * (h**2))\nend\n</cell>\n<code language=julia-1.5>",
  "  return (a * (h ** 2))/((2*a) + h)\nend", "  return a * (a * (h + h) - 2.0 * (h\
    \ + h)) * math.pi / 6.0\nend", "    \n    area = a * ((2 * h - 2 * a + 1) / 2)\
    \ / h\n    return area\n</cell>\n<text>\nExercise\nLet's create some shapes to\
    \ play with.", "  return a * (math.sqrt(1 + (h / 2) / a))\nend", "  area_a = ((h\
    \ / 2) * (b - a))\n  area_b = (2 * b * h)\n  area_c = ((b - a) * (h / 2))\n  return\
    \ area_a + area_b + area_c\nend", "  area_of_triangle = (a + h) * (h + h)\n  area_of_triangle\
    \ * (h + h)/2\nend\n</cell>\n<cell>", "  (a * a * (h/6) + ((a * h/6) * (h/6))\
    \ / 2)\nend", "  (0.5 * b * h) * Math.sqrt(a * a * (h + h))\nend\n</code>\n<|/\
    \ a dscore=0 tags=ruby |>\n<| c |>\nThanks for your answer. Can you give an explanation\
    \ of your code and how it works?\n<|/ c |>\n<| a tags=ruby |>\nHere is a shorter\
    \ version with Ruby's power operators (**). It's still not perfect since it assumes\
    \ that height and width are greater than 1. But it might be useful:\n<code>",
  "\treturn a * h * h / 2\nend", "  # Calculate area of triangle with base length\
    \ and height\n  s = (a + h) / 2.0\n  return s*(s - a) * (s - h)\nend", "\treturn\
    \ (a**2 + h**2)/2\nend", "  a = a * 0.5\n  h = h * 0.5\n  return 0.25 * a * h\
    \ * (1 - Math.cos(Math.PI * a) + Math.cos(Math.PI * h))\nend", "  return (a**2\
    \ + h**2)**.5\nend", "  s*(h*h) - a*a*h\nend", "  s = (3. * a * a) + (3. * h *\
    \ h) - 4.\n  return s / 2.\nend", "  (a * h * h) / 2\nend", "  a = (2*a*h)/Math.sqrt(3*a**2+h**2)\
    \ \n  return(a*2)\nend", "    \n    # Calculate area of a triangle of side length\
    \ a, b with given height.\n    return a*h/2.0\n</cell>\n<text>\nWe can verify\
    \ this by comparing the results of our function with the expected values.", " \
    \ if a * h <= 0 or a * h > 9\n    puts \"Please re-enter the length of a side\"\
    \n    return\n  else \n    return ((a*h)/2)*((1/2)*(a*h)-(a/2)*(a*h/2))\n  end\n\
    end", '  return 2.0*a*(h/2.0) - h*(a/6.0)', "  ((h**2) * a) / 2.0\nend\n</cell>\n\
    <code language=julia-0.5>\n@time triangle_area(10000, 100)\n</cell>\n<code language=julia-0.5>\n\
    @time triangle_area(10000, 100)\n</cell>\n<text>\nExercise 6", "  (h-a) * (h-(a+2))\
    \ / ((a+1)**2 - (a+2)**2)\nend", "  (a * h) / 2\nend\n</cell>\n<cell>", "    return\
    \ a * (0.5 * math.sqrt(3.0) * h / 2)\n</cell>\n<cell>", "    (a**2.0 + h**2.0)**(1.0/2.0)\
    \ \nend", "    return (a*h)/2\n</cell>\n<cell>\ntriangle_area(5, 3)\n</cell>\n\
    <cell>", "  triangle_area = 0.5 * h * a\n  return(triangle_area)\nend\n</cell>\n\
    <code language=julia-1.0>", "  (2 * a * b) / ((2 * a) + h)\nend\n</cell>\n<code\
    \ language=julia-1.0>", "\tarea_tri = (1/2)*h*h*a\n\treturn area_tri\nend\n</cell>\n\
    <code language=julia-1.5>", "  h = h / 2\n  \n  if a > h\n    puts \"A triangle\
    \ area is bigger than the half of it's height\"\n  elsif h > a \n    puts \"A\
    \ triangle area is bigger than the half of it's width\"\n  elsif a == h\n    puts\
    \ \"A triangle is a square\"\n  else\n    puts \"A triangle is of area #{(a*h)/2}.\"\
    \n  end\nend", "    square_side = sqrt(a * a + h * h)\n    area = square_side\
    \ * a / 2\n    return area", "  # Assign some arbitrary value to the base variable\n\
    \  base = 10\n  # The third value is the area of a triangle with a base length\
    \ of 5\n  area = a * base * base * (2 * h) / 2\n  # Return the value of area\n\
    \  return area\n</cell>\n<cell>", "  ((2*a)*(h/2)**2) + ((2*h*a)/2)**2\nend",
  "  a *= 2.0\n  b = 3.0 * (h / 2.0)\n  c = 3.0 * (h * a)\n  d = 1.0 * (h - a)\n \
    \ e = (b - a) * Math.sqrt((a - c) * (a + c) * (b - d) * (b + d))\n  return e\n\
    end", "  (a*(h/2)**2 - a*h + h/2)*sqrt(1/(a-1/2))\nend", "  (a * h) / 2\nend",
  "  (a+b+c) / 2.0 * (h*h+a*a-b*b)\nend", '  return a * ((2 * b + h) / 3) - ((a +
    b) * math.sqrt(3) / 2)']
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
