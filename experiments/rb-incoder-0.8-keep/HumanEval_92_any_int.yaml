name: HumanEval_92_any_int
language: rb
prompt: "# Create a function that takes 3 numbers.\n# Returns true if one of the numbers\
  \ is equal to the sum of the other two, and all numbers are integers.\n# Returns\
  \ false in any other cases.\n# Examples\n# any_int(5, 2, 7) \u279E True\n# any_int(3,\
  \ 2, 2) \u279E False\n# any_int(3, -2, 1) \u279E True\n# any_int(3.6, -2.2, 2) \u279E\
  \ False\ndef any_int(x, y, z)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_any_int\n\
  \    candidate = method(:any_int)\n    assert_equal(true, candidate.call(2, 3, 1))\n\
  \    assert_equal(false, candidate.call(2.5, 2, 3))\n    assert_equal(false, candidate.call(1.5,\
  \ 5, 3.5))\n    assert_equal(false, candidate.call(2, 6, 2))\n    assert_equal(true,\
  \ candidate.call(4, 2, 2))\n    assert_equal(false, candidate.call(2.2, 2.2, 2.2))\n\
  \    assert_equal(true, candidate.call(-4, 6, 2))\n    assert_equal(true, candidate.call(2,\
  \ 1, 1))\n    assert_equal(true, candidate.call(3, 4, 7))\n    assert_equal(false,\
  \ candidate.call(3.0, 4, 7))\n  end\nend\n"
completions: ["  x == y + z && x.kind_of? Integer and y.kind_of? Integer && z.kind_of?\
    \ Integer\nend", "  x = Integer(x)\n  y = Integer(y)\n  z = Integer(z)\n  return\
    \ x === y || x === z || y === z || x === y.to_i || x === z.to_i || y === z.to_i\n\
    end", "    any_int = false\n    if x < y && x < z && y < z\n        any_int =\
    \ true \n    else \n        any_int = false\n    end\nend", "    any_int_x = (x.kind_of?(Integer)\
    \ or x.kind_of?(Fixnum))\n    any_int_y = (y.kind_of?(Integer) or y.kind_of?(Fixnum))\n\
    \    any_int_z = (z.kind_of?(Integer) or z.kind_of?(Fixnum))\n    return any_int_x\
    \ && any_int_y && any_int_z\nend", "  if x % y == 0 || y % z == 0 || z % x ==\
    \ 0 then\n    return True\n  end\n  return false\nend", "  if x.is_a?(Fixnum)\
    \ and y.is_a?(Fixnum) and z.is_a?(Fixnum)\n    x != 0 || y != 0 || z != 0\n  else\n\
    \    false\n  end\nend", "  if x.is_a? Integer\n  elsif y.is_a? Integer\n  elsif\
    \ z.is_a? Integer\n  else\n    false\n  end", "  return !( ((x+y) == z) or ((x-y)\
    \ == z) or ((x-z) == y) or ((y+z) == x) )\nend", "  int_1 = Integer(x)\n  int_2\
    \ = Integer(y)\n  int_3 = Integer(z)\n  sum = int_1 + int_2 + int_3\n  if (int_1.to_s\
    \ == sum.to_s) || (int_2.to_s == sum.to_s) || (int_3.to_s == sum.to_s)\n    return\
    \ True\n  else\n    return False\nend", "    z = z.to_i\n    x -= z\n    y -=\
    \ z\n    \n    puts \"x = #{x}\"\n    puts \"y = #{y}\"\n    puts \"z = #{z}\"\
    \n    puts \"(x-z) = #{(x-z)}\"\n    puts \"(y-z) = #{(y-z)}\"\n    \n    puts\
    \ \"((x-z)*(y-z)) = #{((x-z)*(y-z))}\"\n    puts \"((x-z)+(y+z)) = #{((x-z)+(y+z))}\"\
    \n    puts \"(x+y) = #{(x+y)}\"\n    \n    puts \"(x-y) = #{(x-y)}\"\n    puts\
    \ \"(x-z) = #{(x-z)}\"\n    puts \"(x+z) = #{(x+z)}\"\n    puts \"(y+z) = #{(y+z)}\"\
    \n    \n    if ((x-z)*(y-z) == ((x-z)+(y+z))) then return true else return false\
    \ end\nend\n</code>\n<|/ a tags=ruby |>\n<| c |>\n`any_int(5, 2, 7)`  is returning\
    \ true, which is not correct!\n<|/ c |>\n<| c |>\nThanks for the heads-up! I have\
    \ fixed the bug\n<|/ c |>\n<| c |>\nI disagree that \"every valid solution can\
    \ be solved with another level of indirection\".  I doubt that.  See my answer\
    \ for a solution that uses no indirection.\n<|/ c |>\n<| a tags=ruby dscore=1\
    \ |>\n<code>", "    any_of_x, any_of_y = true, true\n    any_of_z, any_of_z =\
    \ true, true\n    if x.to_i == y && y.to_i == z\n        return true\n    else\n\
    \        return false\n    end\nend", "  if x == y or x == z\n    true\n  else\n\
    \    false\n  end\nend", "  return true unless x.kind_of?(Integer) && y.kind_of?(Integer)\
    \ && z.kind_of?(Integer)\n  x.to_i + y.to_i + z.to_i == x.to_i + y.to_i + z.to_i\n\
    end", "    x.to_i == y || x.to_i == z || y.to_i == z\nend", "  # Your code here.\n\
    \  true\nend", "  return x == y || x == z || y == z\nend", "  if x.to_i == x.to_i\
    \ && x.to_i == y.to_i && x.to_i == z.to_i\n    return true\n  else\n    return\
    \ false\n  end\nend", "  x == y || x == z\nend", "  begin\n    return true if\
    \ x == y || x == z || y == z || x == (x + y)\n  rescue TypeError\n    return false\n\
    \  end\nend", "  (x + y + z == (x + y) + z) && (x.to_i == y.to_i) && (x.to_i ==\
    \ z.to_i)\nend", "  x == y or x == z or y == z\nend", "  if x.is_a? Integer &&\
    \ y.is_a? Integer && z.is_a? Integer\n    (x + y + z) == x.to_i + y.to_i + z.to_i\n\
    \  else\n    false\n  end\nend", "    \n    if x.to_i == y.to_i and x.to_i ==\
    \ z.to_i\n        true\n    else\n        false\n    end\nend", "    any_integer?(x,\
    \ y)\n    any_integer?(z, x)\nend\n    ", "  (x == y) == (z == 0)\nend", "  x\
    \ == y || x == z || y == z\nend", "  return (( x == y )) and (( x == z )) and\
    \ (( y == z ))\nend", "  return ((x || y || z) == x && x.to_i == y.to_i && y.to_i\
    \ == z.to_i) || \n    ((x || y || z) == y && y.to_i == z.to_i && z.to_i == x.to_i)\
    \ || \n    ((x || y || z) == z && z.to_i == x.to_i && x.to_i == y.to_i)\nend",
  "  x.to_i > y.to_i || x.to_i < 0 || y.to_i > z.to_i || y.to_i < 0 || z.to_i > x.to_i\
    \ || z.to_i < 0\nend", "  # TODO: Implement this function\n  return false\nend",
  "  return ((x.is_a?Fixnum || x.is_a?Bignum) && (y.is_a?Fixnum || y.is_a?Bignum)\
    \ && (z.is_a?Fixnum || z.is_a?Bignum)) &&\n  (x.to_i == y.to_i + z.to_i) && (x.to_s\
    \ == z.to_s)\nend", "  case !x.is_a? Integer\n  case !y.is_a? Integer\n  case\
    \ !z.is_a? Integer\n    false\n  else\n    x + y == z\n  end\nend", "  case x.kind_of?(Integer)\
    \ && y.kind_of?(Integer) && z.kind_of?(Integer)\n  when true then x==y || x==z\
    \ || y==z\n  when false then false\n  end\nend\n</code>\n<|/ a tags=ruby,ruby-on-rails\
    \ dscore=1 |>\n<| c |>\n`Integer` doesn't have a `kind_of?` method. `instance_of?`\
    \ does.\n<|/ c |>\n<| c |>\nIt's worth noting that `Object#kind_of?` will respond\
    \ to `instance_of?` as well as `respond_to?` so the OP may prefer `respond_to?(:kind_of?)\
    \ && respond_to?(:instance_of?) && kind_of?(Integer)`\n<|/ c |>\n<| c |>\nYou\
    \ are right. I was thinking about `kind_of?` and I did not notice that I forgot\
    \ about `instance_of?`. Thanks for the comment.\n<|/ c |>\n<| a dscore=1 |>\n\
    Asking \"How many numbers are equal to my sum\" is more like asking \"Do my sum\
    \ have three numbers?\"\nYou can make that more succinct by writing it like this\n\
    <code>", "  return x >= y && y >= z && x % y == 0 && y % z == 0\nend", "  return\
    \ (x == y) || (y == z) || (z == x)\nend", "  any_int = (x != y and x != z and\
    \ y != z)\nend", "  ((x - y).abs == (x + y).abs) && x.to_i == y.to_i && z.to_i\
    \ == x.to_i ? true : false\nend\n</pre>\n</div>\n</div>\n</div>\n</div>\n</div>\n\
    <div id=\"footer\">\n<div id=\"footer-text\">\nLast updated 2019-02-26 19:31:11\
    \ UTC\n</div>\n</div>\n</body>\n</html>\n<|/ file ext=.html |>\n<| c |>\nThis\
    \ is awesome and so cool that I should check out ruby on rails again.  I just\
    \ started playing around with rails last night.\n<|/ c |>\n<| c |>\nI did an update\
    \ on [this website](http://techportal.in/blog/wp-content/uploads/2013/09/Ruby-on-Rails-4-Cover-Letter.pdf),\
    \ hopefully that helps you get started.\n<|/ c |>\n<| a tags=ruby-on-rails,ruby,ruby-on-rails-4\
    \ |>\nFor a Rails beginner (as I am), I'd recommend this book and it's corresponding\
    \ tutorial.  They walk you through step by step through the process of developing\
    \ a web application, which is extremely useful for beginners.\nAlso, there are\
    \ RailsApps tutorials that will get you started right away.  I found a great one\
    \ here that helped me a lot: http://www.railstutorial.org/book/beginning#cha-converging.\n\
    <|/ a dscore=0 |>\n<| c |>\nThanks for the recommendations, but the book didn't\
    \ really cover Rails 4.  The tutorial on railstutorial.org was extremely helpful.\n\
    <|/ c |>\n<| a tags=ruby-on-rails,ruby,ruby-on-rails-4 |>\nI came across this\
    \ question looking for a similar solution. I found it really helpful for me to\
    \ write this small gem which simplifies some common rails syntax. It also takes\
    \ care of all the validation and model creation for you as well. You can find\
    \ it here\n<|/ a dscore=0 |>\n<| a tags=ruby-on-rails,ruby,ruby-on-rails-4 |>\n\
    For a Rails beginner, I recommend this book and it's corresponding tutorial.\n\
    They walk you through step by step through the process of developing a web application,\
    \ which is extremely useful for beginners.\nAlso, there are RailsApps tutorials\
    \ that will get you started right away.  I found a great one here that helped\
    \ me a lot: railstutorial.org\n<|/ a dscore=0 |>\n<| c ", "  (x == y) && (x !=\
    \ z)\nend\n</cell>\n<cell>", "  if x.is_a? Integer and y.is_a? Integer and z.is_a?\
    \ Integer\n    return true if x + y == z\n    false\n  else\n    false\n  end\n\
    end\n</code>\n<|/ a dscore=1 |>\n<| c |>\nWhat about `any_int([Integer], [Integer],\
    \ [Integer])`? It should return `true`.\n<|/ c |>\n<| c |>\nGood point. I've added\
    \ it into the solution, thanks. I did this in Ruby 2.7 - I didn't have it at all\
    \ before that. Not sure if it was added in 3.0 that changed the behavior, but\
    \ I guess not.\n<|/ c |>\n<| c |>\nAh, I see. Thanks for the explanation and solution.\
    \ Great answer!\n<|/ c |>\n<| a dscore=0 tags=ruby,ruby-on-rails |>\nHere's my\
    \ take:\n<code>", "    x, y, z = x.to_i, y.to_i, z.to_i\n    (x+y+z).to_i == x+y+z\n\
    end", "  if x == y or x == z or y == z\n    return true\n  else\n    return false\n\
    end", "  xs = x.to_i\n  ys = y.to_i\n  zs = z.to_i\n  xs.length == ys.length &&\
    \ xs.length == zs.length && xs.all? {|e| ys.include? e} && ys.all? {|e| zs.include?\
    \ e}\nend\n</cell>\n<cell>", "  x.to_i == y.to_i && x.to_i == z.to_i\nend", " \
    \ x == y || x == z || y == z\nend", "  return x || y || z\nend", "  return x.to_i\
    \ == y.to_i && z.to_i == x.to_i\nend\n</cell>\n<text>\n4.6. How many numbers in\
    \ an array are even?", "  if x > y\n    if y > z\n      return true\n    end\n\
    \  end\n  return false\nend", "  return x || y || z\nend", "    any_in_integer\
    \ == true or x == y or x == z or y == z\nend", "    if x.to_i == y.to_i or y.to_i\
    \ == z.to_i or x.to_i == z.to_i\n        return true\n    return false\n    end\n\
    end\n</code>\n<|/ a tags=ruby,arrays,math |>\n<| c |>\n\"If all the numbers are\
    \ integers\"\n<|/ c |>\n<| c |>\nThe asker wants true if any of the numbers is\
    \ equal to the sum of the other two.\n<|/ c |>\n<| c |>\n`any_int` returns `true`\
    \ or `false`. `any_int(5, 2, 7)` returns `true`.\n<|/ c |>\n<| a |>\nYou can use\
    \ the reduce function to create a Hash object containing the sum of each number:\n\
    <code>\nmy_array.map { |e| e.to_i }.inject(Hash.new(0)) { |h, v| h[v] += v }\n\
    </code>\n<|/ a tags=ruby,arrays,math dscore=0 |>\n<| c |>\n`reduce(Hash.new(0))\
    \ { |h, v| h[v] += v }` is not a Ruby 1.8.7 feature but a Ruby 1.8.6 feature.\n\
    <|/ c |>\n<| c |>\nThe asker wants true if any of the numbers is equal to the\
    \ sum of the other two.\n<|/ c |>\n<| c |>\nYou are correct, I was misled by `any_int`\n\
    <|/ c |>\n<| c |>\nI edited my question, my mistake.\n<|/ c |>\n<| c |>\nNo problem,\
    \ the edit should fix your problem\n<|/ c |>\n<| a |>\n<code>", "  # Return True\
    \ if any of the three numbers is a sum of each other.\n  # Return False if none\
    \ of the three numbers is a sum of each other.\n  x_is_sum = x.to_f == (x + y).to_f\n\
    \  y_is_sum = y.to_f == (y + z).to_f\n  z_is_sum = (x + y + z).to_f == (x + y\
    \ + z + x).to_f\n  any_sum = x_is_sum or y_is_sum or z_is_sum\n  any_int = (any_sum\
    \ and x.to_i == y.to_i and y.to_i == z.to_i and z.to_i == (x + y + z).to_i) or\
    \ (any_sum and x.to_i == y.to_i and y.to_i == (x + y).to_i and z.to_i == z.to_i)\n\
    end", "    any_int = false # Initialize to false\n    if x == y\n        if x\
    \ == z\n            any_int = true # All three are equal\n        end\n    end\n\
    \    return any_int\nend", "  x = x.to_i\n  y = y.to_i\n  z = z.to_i\n  return\
    \ x % z == y % z\nend", "  x == z + y || y == z + x || x == z - y || y == z -\
    \ x\nend\n</cell>\n<text>\nQ: What are the numbers in the list [10, 5, 15, 3,\
    \ 10, 1, 5, 7, 4, 12, 2] that have no repeating digits?", "  return ((Integer(x)\
    \ + Integer(y)) == Integer(z)) and\n    (is_integer(x) or is_integer(y)) and\n\
    \    (is_integer(x) or is_integer(y))\nend", "  if ((x.class == Fixnum) && (y.class\
    \ == Fixnum) && (z.class == Fixnum))\n      return (x != 0) || (y != 0) || (z\
    \ != 0)\n  else\n      return false\nend", "  if x.to_i == y && y.to_i == z &&\
    \ x.to_i != z.to_i\n    true\n  else\n    false\n  end\nend\nany_int 5\nany_int\
    \ 3\nany_int 2\nany_int 3\nany_int 2\nany_int 3.6\nany_int -2.2\nany_int 2", " \
    \ (x == y) || (x == z) || (y == z)\nend", "  any_int = (x == y || x == z) && x.to_i\
    \ == y.to_i && y.to_i == z.to_i\nend\n</code>\nNow, we can use that function by\
    \ asking Ruby to call it three times:\n<code>", "    return (x == y or x == z\
    \ or y == z) and x.to_i == y.to_i and x.to_i == z.to_i\nend", "  x.to_i.to_s ==\
    \ y.to_i.to_s && y.to_i.to_s == z.to_i.to_s\nend", "  if x.to_i == y.to_i && x.to_i\
    \ == z.to_i\n    true\n  else\n    false\n  end\nend\n</code>\n<|/ a tags=ruby,arrays\
    \ |>\n<| c |>\nAh, I just realized, this doesn't work if any of the numbers are\
    \ negative or zero.  I forgot to include that in my original post.\n<|/ c |>\n\
    <| c |>\nYou mean in general? You can just use an `if` statement: `if (x.to_i\
    \ + y.to_i + z.to_i).to_i == sum.to_i`\n<|/ c |>\n<| c |>\nWhat I mean is, I wrote\
    \ a function that tests these conditions:\n`def all_int(x, y, z) \n  if x.to_i\
    \ != 0 && y.to_i != 0 && z.to_i != 0\n    if x.to_i == y.to_i && y.to_i == z.to_i\n\
    \      return true\n    else\n      return false\n    end\n  else\n    return\
    \ false\n  end\nend`\n<|/ c |>\n<| c |>\n`x.to_i` returns `0` if you pass it `-3`\n\
    <|/ c |>\n<| c |>\nOh, yes, I realized that right after I posted.  So I guess\
    \ I'll just add that check to the function.  Thanks for the help!\n<|/ c |>\n\
    <| a |>\n<code>\n[1,2,3,4,5].all? {|x| x == 3}\n</code>\n<|/ a dscore=5 tags=ruby,arrays\
    \ |>\n<| c |>\nIt would only return true if all numbers in array is equal to `3`,\
    \ which is incorrect.\n<|/ c |>\n<| c |>\nYes, but that's not what he's asking.\
    \ He wants his function to return true when any numbers are equal to `3` regardless\
    \ of their sign\n<|/ c |>\n<| c |>\nIt's not clear to me what he wants, but if\
    \ you want it to return true if any combination of numbers equals 3, then yeah's\
    \ solution will work\n<|/ c |>\n<| c |>\nHe specifically said \"all numbers are\
    \ integers\", so that's what my solution returns.\n<|/ c |>\n<| a |>\n<code>",
  "  x == y || x == z && y == z\nend", "  x == y || x == z || y == z\nend", "  x <=\
    \ y && y <= z && is_integer(x) && is_integer(y) && is_integer(z)\nend", "  x.to_i\
    \ == y.to_i\n  &&\n  y.to_i == z.to_i\n  &&\n  x.to_i.to_s == y.to_i.to_s\nend\n\
    </cell>\n<cell>", "  x = x.to_i\n  y = y.to_i\n  z = z.to_i\n  return x == 4 ||\
    \ y == 4 || z == 4 || x == y || x == z || y == z || (x && y && z) ? true : false\n\
    end", "  if x.is_a? Integer and y.is_a? Integer and z.is_a? Integer\n    x + (y\
    \ == z ? x : y)\n  elsif x.is_a? Float\n    x.to_s + y.to_s + z.to_s\n  elsif\
    \ y.is_a? Float\n    x.to_s + y.to_s + z.to_s\n  elsif z.is_a? Float\n    x.to_s\
    \ + y.to_s + z.to_s\n  else\n    false\n  end\nend\n</code>\n<|/ a tags=arrays,ruby\
    \ dscore=1 |>\n<| c |>\nThank you for your answer, but I want it to return false\
    \ in all other cases.\n<|/ c |>\n<| c |>\nThis code is returning false when it\
    \ should return true in all cases.\n<|/ c |>\n<| c |>\nI didn't want to give the\
    \ answer straight away, because I wanted to give the OP some pointers. He could\
    \ probably just copy paste, and understand it themselves. But I did give him some\
    \ pointers, and he should try to understand them. I'm going to give you some pointers\
    \ :)\n<|/ c |>\n<| c |>\nIf you're going to give pointers, you should at least\
    \ explain your code. That way, the OP can learn from it and apply it to other\
    \ situations.\n<|/ c |>\n<| c |>\nThank you for the help. I understand it now.\
    \ But I'm still not understanding why my code isn't working. I don't understand\
    \ what's wrong with it.\n<|/ c |>\n<| a |>\nThe problem is in your each_cons method.\
    \ You are saying:\n<code>\n def each_cons(start, length = 1)\n   [start,length].each\
    \ {|n| yield * n}\n end\n</code>\nThe problem is when you pass in an array, you\
    \ are actually passing an array to the method each_cons, since you are calling\
    \ the method like this:\n<code>\neach_cons(array)\n</code>\nBut then you are calling\
    \ each with only one parameter, length. length should be an integer.\nTry passing\
    \ in an array like so: each_cons(array, 4)\n<|/ a tags=arrays,ruby dscore=0 |>\n\
    <| a |>\nYou could do it like this:\n<code>", "  if x==y || x==z || y==z\n   \
    \ # check if all are integers\n    if x =~ /[+-]?\\d+\\.?\\d*/\n      return true\
    \ if y =~ /[+-]?\\d+\\.?\\d*/\n      else\n        return false\n    end\n  else\n\
    \    return false\n  end\nend\n</code>\n<|/ a tags=ruby,arrays dscore=3 |>\n<|\
    \ a tags=ruby,arrays |>\nHow about this?\n<code>", "  int_x = Integer(x)\n  int_y\
    \ = Integer(y)\n  int_z = Integer(z)\n  if int_x.to_i == int_y.to_i and int_y.to_i\
    \ == int_z.to_i\n    return true\n  else \n    return false\nend", "    if x %\
    \ y == 0\n        true if z % x == 0\n        true if z % y == 0\n        false\n\
    \    else\n        false\n    end\nend", "  if x.class == Integer && y.class ==\
    \ Integer && z.class == Integer\n    x + y == z\n  elsif x.class == Integer &&\
    \ z.class == Integer\n    x.+y == z\n  elsif y.class == Integer && z.class ==\
    \ Integer\n    y.+x == z\n  elsif z.class == Integer\n    x + y == z\n  else\n\
    \    false\n  end\nend", "  return true if x.to_i == y.to_i && y.to_i == z.to_i\n\
    \  false\nend", "  if x.is_a?(Integer) && y.is_a?(Integer) && z.is_a?(Integer)\n\
    \    x + y + z == 0 || x + y == 0 || x + z == 0\n  else\n    false\n  end\nend",
  "  x == y || x == z || y == z\nend", "  return x % y == z && x % y == 0\nend", " \
    \ if x.to_i == z.to_i\n    if y.to_i == z.to_i\n      return true\n    end\n \
    \ end\n  return false\nend", "  return x && y && z && (x.to_i == y.to_i && z.to_i\
    \ == x.to_i) && x.to_i == z.to_i\nend", "  if x.to_i == y.to_i and y.to_i == z.to_i\n\
    \    true\n  else\n    false\n  end\nend\n</pre>\n<p>\nWhen we test the code,\
    \ we see the last line of the method body was our condition. Our condition is\
    \ true if the first two numbers are equal, and false otherwise.\n</p>", "  x ==\
    \ y || x == z || y == z\nend", "  return (((x == y) || is_integer(x)) && (is_integer(y)\
    \ || is_integer(z)))\nend", "    if x == y || y == z || x == z\n        return\
    \ true\n    return false\nend\n</cell>\n<cell>", "    x >= y && y >= z &&\n  \
    \  x.to_i == y.to_i && y.to_i == z.to_i &&\n    x.is_a?(Fixnum) && x.is_a?(Fixnum)\
    \ && x.is_a?(Fixnum)\nend", "  return x == y || y == z\nend", "  if x.is_a? Integer\
    \ and y.is_a? Integer and z.is_a? Integer\n    return !(x != y and x != z and\
    \ y != z)\n  end\n  return false\nend", "  return ((x || y) && (x || z)) || ((y\
    \ || z) && (x || y))\nend", "  x == y || y == z || x == z\nend", "  if x.class\
    \ == Fixnum && y.class == Fixnum && z.class == Fixnum\n    (x == y || x == z)\
    \ && x.class == Fixnum\n  else\n    false\n  end\nend", "  any_int = x != y &&\
    \ y != z && x && y && z && x.to_i == y.to_i && y.to_i == z.to_i\nend", "    !((x.is_a?Float)\
    \ && y.is_a?Float) && z.to_i === x.to_i + y.to_i\nend", "  if x.is_a? Fixnum &&\
    \ y.is_a? Fixnum && z.is_a? Fixnum\n    if x == y + z\n      true\n    else\n\
    \      false\n    end\n  else\n    false\n  end\nend\n</cell>\n<cell>", "  x ==\
    \ y || x == z || y == z\nend", "  x_int, y_int, z_int = x.to_i, y.to_i, z.to_i\n\
    \  return x_int + y_int + z_int == (x+y+z)\nend", "  x > 0\n  y > 0\n  z > 0\n\
    \  return (((x+y+z).to_i == x.to_i) or ((x+y+z).to_i == y.to_i) or ((x+y+z).to_i\
    \ == z.to_i)).any?\nend", "  return true if x + (y + z) == x*y\n  return false\
    \ if x != y != z\n  return true if x.to_i != y.to_i != z.to_i\n  return false\
    \ unless x.to_i.is_a? Integer && y.to_i.is_a? Integer && z.to_i.is_a? Integer\n\
    end", "    unless x.class == Fixnum or y.class == Fixnum or z.class == Fixnum\n\
    \        return \"The arguments must be integers\"\n    end\n    x + y == z\n\
    end\n</cell>\n<text>\nLet's run this test on our any_int function:", "  int_x\
    \ = Integer(x)\n  int_y = Integer(y)\n  int_z = Integer(z)\n  return int_x.eql?\
    \ int_y + int_z && int_x.eql? int_y + int_z && int_x.eql? int_y + int_z && int_x.eql?\
    \ int_y + int_z\nend", "    x || y || z\n    x - y == 0 || x - z == 0\nend\nputs\
    \ any_int(5, 2, 7) ? 'yes' : 'no'\nputs any_int(3, 2, 2) ? 'yes' : 'no'\nputs\
    \ any_int(3, -2, 1) ? 'yes' : 'no'\nputs any_int(3.6, -2.2, 2) ? 'yes' : 'no'\n\
    </code>\n<|/ a |>\n<| a |>\nAnother way to do this is to check if all three numbers\
    \ are integers, and then check if they are all different. An even simpler way\
    \ is to only check if all three are integers and all positive, since all negative\
    \ integers are positive. Since all integers are positive, we can just check if\
    \ all integers are negative.\n<code>", "  x = x.to_i\n  y = y.to_i\n  z = z.to_i\n\
    \  return x && y && z && x + y + z == x.to_i + y.to_i + z.to_i\nend", "  return\
    \ z == x || z == y || z == x + y\nend\n</cell>\n<cell>", "    (x == y || x ==\
    \ z) && (x % 1 == 0 && y % 1 == 0 && z % 1 == 0)\nend\n</cell>\n<cell>", "  if\
    \ x > y && x > z\n    true\n  elsif y > x && y > z\n    true\n  elsif z > x &&\
    \ z > y\n    true\n  else\n    false\n  end\nend", "  x == y + z && x.to_i ==\
    \ y.to_i && x.to_i == z.to_i && x.to_i.to_i == z.to_i\nend\n</cell>\n<cell>",
  "    any_int = (x != nil ) & (y != nil ) & (z != nil)\n    return any_int & (x.to_i()\
    \ == y.to_i() | x.to_i() == z.to_i())\nend", "  x = Math.round(x)\n  y = Math.round(y)\n\
    \  z = Math.round(z)\n  if x==y || x==z || y==z\n    return true\n  end\n  if\
    \ x > y || y > z || z > x\n    return false\n  end\nend", "    any_int_sum = (x\
    \ + y + z) == ((x != 0) * y + z) + x\n    any_int_number = (x.is_a?Integer and\
    \ y.is_a?Integer and z.is_a?Integer)\n    return any_int_sum and any_int_number\n\
    end", "    any_int = false\n    if y == z && x.is_a?(Integer) && y.is_a?(Integer)\n\
    \        any_int = true\n    end\nend", "  if x.to_i == y.to_i and x.to_i == z.to_i\n\
    \    return true\n  else\n    return false\n  end\nend\n</cell>\n<cell>", "  x\
    \ == y || x == z || y == z\nend", "  return true\nend\n  ", "  return x || y ||\
    \ z && x.is_a?(Integer) && y.is_a?(Integer) && z.is_a?(Integer) && x + y + z ==\
    \ 0 || false \nend", "  x == y || x == z || y == z\nend\n</cell>\n<text>\n6. Write\
    \ a function called all_int(x,y,z) that takes 3 numbers and returns true if they\
    \ all are integers, and false otherwise.\nExamples: all_int(5, 2, 7) \u279E True\n\
    all_int(3, 2, 2) \u279E False\nall_int(3.6, -2.2, 2) \u279E True", "  true if\
    \ x == y || x == z || y == z\nend", "  return x.to_i == y || y.to_i == z\nend",
  "  # Implement this function\n  puts \"#{x}, #{y}, #{z}\"\n  puts \"#{x} + #{y}\
    \ = #{x+y}\"\n  puts \"#{x} + #{z} = #{x+z}\"\n  puts \"#{y} + #{z} = #{y+z}\"\
    \n  puts \"#{x} + #{y} = #{x+y}\"\n  puts \"#{x} + #{z} = #{x+z}\"\n  puts \"\
    #{y} + #{z} = #{y+z}\"\n  puts \"#{x} + #{y} = #{x+y}\"\n  puts \"#{x} + #{z}\
    \ = #{x+z}\"\n  puts \"#{y} + #{z} = #{y+z}\"\n  puts \"#{x} + #{y} = #{x+y}\"\
    \n  puts \"#{x} + #{z} = #{x+z}\"\n  puts \"#{y} + #{z} = #{y+z}\"\n  puts \"\
    #{x} + #{y} = #{x+y}\"\n  puts \"#{x} + #{z} = #{x+z}\"\n  puts \"#{y} + #{z}\
    \ = #{y+z}\"\n  puts \"#{x} + #{y} = #{x+y}\"\n  puts \"#{x} + #{z} = #{x+z}\"\
    \n  puts \"#{y} + #{z} = #{y+z}\"\n  puts \"#{x} + #{y} = #{x+y}\"\n  puts \"\
    #{x} + #{z} = #{x+z}\"\n  puts \"#{y} + #{z} = #{y+z}\"\n  puts \"#{x} + #{y}\
    \ = #{x+y}\"\n  puts \"#{x} + #{z} = #{x+z}\"\n  puts \"#{y} + #{z} = #{y+z}\"\
    \n  puts \"#{x} + #{y} = #{x+y}\"\n  puts \"#{x} + #{z} = #{x+z}\"\n  puts \"\
    #{y} + #{z} = #{y+z}\"\n  puts \"#{x} + #{y} = #{x+y}\"\n  puts \"#{x} + #{z}\
    \ = #{x+z}\"\n  puts \"#{y} + #{z} = #{y+z}\"\n  puts \"#{x} + #{y} = #{x+y}\"\
    \n  puts \"#{x} + #{z} = #{x+z}\"\n  puts \"#{y} + #{z} = #{y+z}\"", "  x % 1\
    \ == 0 && y % 1 == 0 && z % 1 == 0 &&\n  x.is_a?Integer &&\n  y.is_a?Integer &&\n\
    \  z.is_a?Integer\nend\n</cell>\n<cell>", "    x != y && x != z && y != z && x.is_a?Integer\
    \ and y.is_a?Integer and z.is_a?Integer\nend", "  return ((x + y == z) or\n  \
    \        (x <= y and y <= z and x != 0 and y != 0 and z != 0 and x + y == z))\n\
    end", "  if x.is_a? Integer\n  and y.is_a? Integer\n  and z.is_a? Integer\n  and\
    \ x + y == z\n  and x + y == (x + y)\n  and x + y == (x + y)\n  return true\n\
    \  else return false\nend\n</cell>\n<code language=julia-1.6>", "  any_int_count\
    \ = 0\n  any_int_count = (x == y) or (y == z) or (x == z)\n  return any_int_count\n\
    end\n</cell>\n<text>\n2.3 Test your function with some of these examples", " \
    \ return x == y || x == z && y == z\nend\n</cell>\n<code language=julia-1.5>",
  "    x.to_i == y.to_i\n    x.to_i == z.to_i\nend", "  if ((x..z).include?(x + y))\
    \ || ((x..z).include?(x + z)) || ((y..z).include?(y + z)) || ((x..z).include?(y\
    \ - z))\n    true\n  else\n    false\n  end\nend", "  ((x < y and y < z) or x\
    \ < z) and is_integer(x) or is_integer(y) or is_integer(z)\nend", "    any_int\
    \ = true if x != y && x != z && y != z && x.to_i == y.to_i && y.to_i == z.to_i\n\
    \    any_int = false if any_int && x.to_i != y.to_i && y.to_i != z.to_i\n    any_int\
    \ = false if any_int && x.to_i > y.to_i && y.to_i > z.to_i\n    return any_int\n\
    end", "  any_int?(x, y, z) ? (x + y + z == 0) : true\nend", "  x = x.to_i if x.is_a?\
    \ Numeric\n  y = y.to_i if y.is_a? Numeric\n  z = z.to_i if z.is_a? Numeric\n\
    \  return(((x+y) > z) && ((x > 0) && (y > 0) && (z > 0)))\nend", "  a = x.to_i\n\
    \  b = y.to_i\n  c = z.to_i\n  return a.nil? || b.nil? || c.nil? ? false : a ==\
    \ b || a == c || b == c || a == z && b == z || a == z && c == z || b == z && c\
    \ == z\nend", "  (\n    (x.to_i == y.to_i) &&\n    (y.to_i == z.to_i) &&\n   \
    \ (x.to_i.to_i == z.to_i.to_i)\n  )\nend", "  case x && y && z\n  when true\n\
    \    true\n  when false\n    false\n  else\n    (x + y + z == 0 || x + y - z ==\
    \ 0 || x + z == 0 || y + z == 0 || x - z == 0 || y - z == 0 || z == 0)\nend",
  "    x.to_s == y.to_s && y.to_s == z.to_s && x.to_i.to_s == y.to_i.to_s && z.to_i.to_s\
    \ == y.to_i.to_s\nend", "    if x == z + y and x + y == z\n        true\n    else\n\
    \        false\n    end\nend\n</cell>\n<cell>", "  return ((x && y) || (x && z)\
    \ || (y && z)) && x.is_a? Integer && y.is_a? Integer && z.is_a? Integer\nend",
  "  return x >= y && y >= z && x.is_a? Integer && y.is_a? Integer && z.is_a? Integer\
    \ && x + y == z\nend\n</cell>\n<code language=julia-1.5>", "  return x || y ||\
    \ z\nend", "  if x.kind_of? Numeric\n    (x+y).kind_of? Numeric\n    (y+z).kind_of?\
    \ Numeric\n  elsif x.kind_of? Float\n    (x.+y).kind_of? Numeric\n    (y.+z).kind_of?\
    \ Numeric\n  elsif y.kind_of? Float\n    (x.+y).kind_of? Numeric\n    (z.+x).kind_of?\
    \ Numeric\n  elsif z.kind_of? Float\n    (x.+y).kind_of? Numeric\n    (z.+x).kind_of?\
    \ Numeric\n  else\n    false\n  end\nend", "  case (x != Float(y) || y != Float(z)\
    \ || Float(x) != Float(z))\n    when true\n      true\n    when false\n      false\n\
    \  end\nend", "  if ((x >= 0) || (y >= 0) || (z >= 0)) && x.is_integer && y.is_integer\
    \ && z.is_integer\n    x + y + z == all_three(x, y, z)\n  else\n    false\n  end\n\
    end", "  x = x.to_i\n  y = y.to_i\n  z = z.to_i\n  return x == y || x == z ||\
    \ y == z\nend", "  return (x == y || x == z) || (y == z && x == y && x != 0) ||\
    \ (x == 0 && y == 0)\nend", "  if x.is_a?(Integer) && y.is_a?(Integer) && z.is_a?(Integer)\
    \ &&\n    x.to_i + y.to_i + z.to_i == z.to_i + y.to_i + x.to_i\n  else\n    false\n\
    \  end\nend", "  any_int = ((x || y || z) && (x.is_a? Integer && y.is_a? Integer\
    \ && z.is_a? Integer))\n  return any_int\nend\n</code>\n<|/ a tags=ruby-on-rails,ruby,syntax\
    \ |>\n<| c |>\nI realize I'm late to this party, but this seems like a good solution\
    \ to me.\n<|/ c |>\n<| a |>\nIn a case like this, I'd probably write a small method\
    \ that would return the sum of the three numbers. Something like this:\n<code>",
  "  if x % y == 0 || y % z == 0 || z % x == 0\n    return true\n  else\n    return\
    \ false\n  end\nend", "  if x != y and y != z and x != z\n    return true\n  else\
    \ false\nend", "  if x.kind_of? Integer && y.kind_of? Integer && z.kind_of? Integer\n\
    \    x.nil? || y.nil? || z.nil? ? false : x.to_i == y.to_i + z.to_i\n  else\n\
    \    false\n  end\nend", "  case (x.is_a?Numeric, y.is_a?Numeric, z.is_a?Numeric)\n\
    \  when true\n    return true if x.to_i + y.to_i + z.to_i == x.to_i + y.to_i +\
    \ z.to_i\n    return false if x.to_i - y.to_i or y.to_i - z.to_i\n  end\nend",
  "    if x.to_i == y.to_i\n        if z.to_i == x.to_i\n            return true\n\
    \        end\n    end\n    return false\nend\n</code>\n<|/ a dscore=0 tags=arrays,ruby,integer\
    \ |>\n<| a dscore=0 |>\n<code>", "  return ((x % z) == ((y + z) % z)) and ((x\
    \ % z) == ((y - z) % z))\nend", "  x = x.to_i\n  y = y.to_i\n  z = z.to_i\n  x\
    \ >= 0 && y >= 0 && z >= 0\n  x % y == 0 || y % z == 0 || z % x == 0\nend", " \
    \ return ((x || y || z) == (x+y+z))\nend", "  # TODO: implement this function\n\
    end", "  if x.nil? or y.nil? or z.nil?\n    return false\n  elsif x.zero? and\
    \ y.zero? and z.zero?\n    return true\n  elsif x.zero? or y.zero? or z.zero?\n\
    \    return false\n  else\n    return false if x.zero? and y.zero? and z.zero?\n\
    \    return true if x.zero? or y.zero? or z.zero?\n    return true if x.zero?\
    \ and y.zero? or z.zero?\n    return true if x.zero? and y.zero? and z.zero?\n\
    \    return false if x.zero? and y.zero? and z.zero?\n    return true if x.zero?\
    \ or y.zero? and z.zero?\n    return true if x.zero? or y.zero? or z.zero?\n \
    \   return true if x.zero? or y.zero? and z.zero?\n    return false if x.zero?\
    \ and y.zero? and z.zero?\n    return true if x.zero? or y.zero? or z.zero?\n\
    \    return true if x.zero? or y.zero? and z.zero?\n    return true if x.zero?\
    \ and y.zero? or z.zero?\n    return false if x.zero? and y.zero? and z.zero?\n\
    \    return true if x.zero? or y.zero? or z.zero?\n    return true if x.zero?\
    \ or y.zero? and z.zero?\n    return true if x.zero? or y.zero? or z.zero?\n \
    \   return true if x.zero? and y.zero? or z.zero?\n    return true if x.zero?\
    \ or y.zero? or z.zero?\n    return true if x.zero? or y.zero? and z.zero?\n \
    \   return true if x.zero? or y.zero? and z.zero?\n    return true if x.zero?\
    \ and y.zero? or z.zero?\n    return true if x.zero? or y.zero? or z.zero?\n \
    \   return true if x.zero? or y.zero? and z.zero?\n    return true if x.zero?\
    \ or y.zero? and z.zero?\n    return true if x.zero? and y.zero? or z.zero?\n\
    \    return true if x.zero? or y.zero? or z.zero?\n    return true if x.zero?\
    \ or y.zero? and z.zero?\n    return true if x.zero? and y.zero? or z.zero?\n\
    \    return true if x.zero? or y.zero? or z.zero?\n    return true if x.zero?\
    \ or y.zero? and z.zero?\n    return true if x.zero? or y.zero? and z.zero?\n\
    \    return true if x.zero? and y.zero? or z.zero?\n    return true if x.", " \
    \ if x.is_a? Integer\n    y.is_a? Integer\n    z.is_a? Integer\n  end\n  \n  if\
    \ y.is_a? Integer\n    x.is_a? Integer\n  else\n    false\n  end\n  \n  if z.is_a?\
    \ Integer\n    x.is_a? Integer\n  else\n    false\n  end\n  \n  if x.to_i == y.to_i\n\
    \    if y.to_i == z.to_i\n      true\n    else\n      false\n    end\n  else\n\
    \    false\n  end\nend\n</code>\nWe used an if statement to determine what to\
    \ do depending on the inputs. \nThe second function uses is_a? to determine if\
    \ the inputs are integers, and then converts them to integers if they are.\n<|/\
    \ a tags=ruby dscore=0 |>\n<| a |>\nHow about this?\n<code>", "  if x.class ==\
    \ Integer && y.class == Integer && z.class == Integer\n    x.to_i + y.to_i + z.to_i\
    \ == x.to_i + y.to_i + z.to_i\n  else\n    false\n  end\nend", "    any_int =\
    \ (x + y + z).to_i > 0\nend\n</cell>\n<code language=julia-1.2>", "  return ((x\
    \ >= y && y >= z) ||\n          (x == y && y == z) ||\n          (x == z && y\
    \ == x));\nend", "    if x == y || y == z\n        true\n    else\n        false\n\
    \    end\nend", "    if x == y && y == z && z.is_integer?\n        return true\n\
    \    else\n        return false\n    end\nend", "    if x + y == z\n        true\n\
    \    else\n        false\n    end\nend\n</cell>\n<code language=julia-1.5>\nfunction\
    \ any_int(x, y, z)\n    if isa(x::Integer, y::Integer, z::Integer)\n        true\n\
    \    else\n        false\n    end\nend\n</cell>\n<code language=julia-1.5>", " \
    \ x == y || x == z || y == z\nend", "  if x.is_a? Integer\n    y = y + z\n  elsif\
    \ y.is_a? Integer\n    x = x + z\n  end\n  x == y or x == -y or y == -z\nend",
  "    z = z.to_i\n    return x.to_i == x + y || x.to_i == x - y || x.to_i == x -\
    \ z || x.to_i == x + z\nend", "  if x.is_a? Integer and y.is_a? Integer and z.is_a?\
    \ Integer then\n    true\n  else\n    false\n  end\nend", "    if x.to_i == y.to_i\
    \ and x.to_i == z.to_i\n        true\n    elsif x.to_i == z.to_i || y.to_i ==\
    \ z.to_i\n        true\n    else\n        false\n    end\nend", "  return ((x\
    \ >= y && x <= z) && (y >= x && y <= z) && (z >= x && z <= y))\nend", "  x_is_integer\
    \ = is_integer(x)\n  y_is_integer = is_integer(y)\n  z_is_integer = is_integer(z)",
  "  x == y || x == z || y == z\nend", "  x.to_i() == y.to_i() ||\n  y.to_i() == z.to_i()\n\
    end\n</code>\nThe next part is the same as before.\n<code>", "  x == y or x ==\
    \ z or y == z\nend\n</cell>\n<code language=julia-1.4>", "  if x == y || x ==\
    \ z\n    return true\n  else\n    return false\n  end\nend", "  return !(x.is_a?(Integer)\
    \ and y.is_a?(Integer) and z.is_a?(Integer)) or x.to_i + y.to_i + z.to_i == x.to_i\
    \ + y.to_i + z.to_i\nend\n</code>\n<|/ a tags=ruby |>\n<| c |>\nThis assumes that\
    \ the three numbers are always `Integer`s -- that may not be the case, and in\
    \ that case your program should return `nil`, rather than `true` or `false` based\
    \ on which of the three numbers is the largest.\n<|/ c |>\n<| a |>\n<code>\nrequire\
    \ 'bigdecimal'", "  if x.to_i == x.to_i && y.to_i == y.to_i && z.to_i == z.to_i\
    \ && x.is_a? Integer\n    true\n  else\n    false\n  end\nend", "  return true\
    \ if x == y + z && x.to_i == y.to_i && x.to_i == z.to_i && y.to_i && z.to_i\n\
    \  false\nend", "    int_x = x.to_i\n    int_y = y.to_i\n    int_z = z.to_i\n\
    \    return int_x + int_y + int_z == int_x*int_y*int_z\nend\n</code>\n<|/ a tags=ruby,if-statement\
    \ |>\n<| c |>\nYour `any_int` could be replaced by `Math.prod`, `Math.sum`, `&.==`,\
    \ `&.~`, `&.and?` and `&.or?`.\n<|/ c |>\n<| c |>\nAlso, your first line could\
    \ be written `int_x = x.to_i`\n<|/ c |>\n<| a tags=ruby,if-statement dscore=0\
    \ |>\nThis isn't an answer, just some suggestions for doing this without nesting\
    \ too much logic:\n<code>", "    return ((x + y == z) | (x + y != z) | (x + y\
    \ != z) | (x + y != z))\nend", "  x == y && y == z && x % 1 == 0 && y % 1 == 0\
    \ && z % 1 == 0 && (x + y + z).is_integer\nend\n</cell>\n<code language=julia-1.0>",
  "  xy = x + y\n  yz = y + z\n  zx = z + x\n  any_int?(x, y, z) || any_int?(xy, yz,\
    \ zx) # || = or\nend", "  if x==y or x==z\n    return true\n  else\n    return\
    \ false\nend\n</cell>\n<cell>", "    x % y == 0 or x % z == 0 or y % z == 0 or\
    \ (x % z == 0 and y % z == 0)\nend", "  if x.to_i == y.to_i\n    return true\n\
    \  else\n    return false\n  end\nend", "    puts \"x: #{x}\"\n    puts \"y: #{y}\"\
    \n    puts \"z: #{z}\"\n    puts \"x % 2 == 0: #{x % 2 == 0}\"\n    puts \"y %\
    \ 2 == 0: #{y % 2 == 0}\"\n    puts \"z % 2 == 0: #{z % 2 == 0}\"\n    return\
    \ ((x % 2 == 0) || (y % 2 == 0) || (z % 2 == 0)) && (x.to_i == y.to_i) && (x.to_i\
    \ == z.to_i)\nend\n</code>\nBut we still need to implement the function that actually\
    \ does the work. Let's do this:\n<code>", '  any_false = false # Default return
    value', "  result = true if x.to_i == y.to_i && y.to_i == z.to_i && x.to_i !=\
    \ 0 || x.to_i != y.to_i && y.to_i != z.to_i && x.to_i != 0 || x.to_i != y.to_i\
    \ && y.to_i != z.to_i && x.to_i != 0 && y.to_i != 0 && z.to_i != 0\n  return result\n\
    end\n</pre>\n<p><strong>Question 3</strong></p>\n<pre><strong>Ruby</strong>",
  "  x = x.to_i\n  y = y.to_i\n  z = z.to_i\n  return ((x || y) || (x && y && z))\n\
    end", "  return ((x || y) && (x && y && z))\nend", "    return x == y or x ==\
    \ z or y == z\nend\n</cell>\n<cell>\n@assert any_int(5, 2, 7) == True\n@assert\
    \ any_int(3, 2, 2) == False\n@assert any_int(3, -2, 1) == True\n@assert any_int(3.6,\
    \ -2.2, 2) == False\n</cell>\n<text>\nQuestion 13. Write a function that takes\
    \ an integer n, and returns an integer $n!$. You may use the ! operator to compute\
    \ this value. The function should work for any positive integer or 0 as the input\
    \ value. For n == 0, it should return 1.", "  if x == y and y == z\n    true\n\
    \  else\n    false\n  end\nend\n</code>\n<|/ a dscore=0 tags=ruby |>\n<| a dscore=0\
    \ |>\n<code>\n[1,2,3].max_by(3).all?{|x| x.to_i.to_s == x.to_s}\n</code>\n<|/\
    \ a tags=ruby |>\n<| a dscore=0 |>\n<code>", "  any_int = 0\n  any_int = 0\n \
    \ any_int = 0\n  any_int = 0\n  any_int = 0\n  if x.to_i == y.to_i and x.to_i\
    \ == z.to_i then\n    return true\n  elsif x.to_i != y.to_i and x.to_i != z.to_i\
    \ then\n    return false\n  elsif y.to_i != z.to_i then\n    return false\n  else\n\
    \    return true\n  end\nend", "  # Write your code here.\n  return true\nend\n\
    </cell>\n<code language=julia-1.0>", "  if Integer(x)+Integer(y)+Integer(z)!=z\
    \ ||x==y || x==z\n    true\n  else\n    false\n  end\nend", "    \n    # Write\
    \ your code here\n    \nend\n</cell>\n<cell>", "  xx = x.to_i\n  yy = y.to_i\n\
    \  zz = z.to_i\n  return ((xx != yy && xx != zz) && (xx != zz && yy != zz))\n\
    end", "  return true if x >= y && x >= z && y >= z && x.to_i <= y.to_i && x.to_i\
    \ <= z.to_i && y.to_i <= z.to_i\n  false\nend", "  x==y || x==z || y==z\nend",
  "  return ((x && y) || (y && z) || x == z)\nend\nputs(any_int(5, 2, 7))", "    any_of_the_numbers\
    \ = [x, y, z]\n    any_of_the_numbers.each do |num|\n        return true if num.to_i\
    \ < 0 || num.to_i > 3\n    end\n    return false\nend", "    x >= y and x >= z\
    \ and y >= z and x <= y + z\nend", "  return x.to_i == y.to_i && y.to_i == z.to_i\n\
    end", "  if x != 0 && y != 0 && z != 0\n  then\n    if x == 2 && y == z\n    then\n\
    \      return true\n    end\n  end\n  return false\nend", "  if x && y && z\n\
    \    a + b + c == a * b * c\n  end\nend\n</code>\n<|/ a dscore=2 |>\n<| a tags=ruby\
    \ |>\nThe most elegant way I found to do this, without using an if statement or\
    \ a ternary operator, is to use a case statement:\n<code>"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
