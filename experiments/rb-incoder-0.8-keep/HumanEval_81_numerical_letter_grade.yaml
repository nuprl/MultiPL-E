name: HumanEval_81_numerical_letter_grade
language: rb
prompt: "# It is the last week of the semester and the teacher has to give the grades\n\
  # to students. The teacher has been making her own algorithm for grading.\n# The\
  \ only problem is, she has lost the code she used for grading.\n# She has given\
  \ you a list of GPAs for some students and you have to write \n# a function that\
  \ can output a list of letter grades using the following table:\n# GPA       | \
  \   Letter grade\n# 4.0                A+\n# > 3.7                A \n# > 3.3  \
  \              A- \n# > 3.0                B+\n# > 2.7                B \n# > 2.3\
  \                B-\n# > 2.0                C+\n# > 1.7                C\n# > 1.3\
  \                C-\n# > 1.0                D+ \n# > 0.7                D \n# >\
  \ 0.0                D-\n# 0.0                E\n# Example:\n# grade_equation([4.0,\
  \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\ndef numerical_letter_grade(grades)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_numerical_letter_grade\n\
  \    candidate = method(:numerical_letter_grade)\n    assert_equal([\"A+\", \"B\"\
  , \"C-\", \"C\", \"A-\"], candidate.call([4.0, 3, 1.7, 2, 3.5]))\n    assert_equal([\"\
  D+\"], candidate.call([1.2]))\n    assert_equal([\"D-\"], candidate.call([0.5]))\n\
  \    assert_equal([\"E\"], candidate.call([0.0]))\n    assert_equal([\"D\", \"D-\"\
  , \"C-\", \"B\", \"B+\"], candidate.call([1.0, 0.3, 1.5, 2.8, 3.3]))\n    assert_equal([\"\
  E\", \"D-\"], candidate.call([0.0, 0.7]))\n  end\nend\n"
completions: ["  return grades.map { |x|\n    if x > 2.7\n      'B+'\n    elsif x\
    \ > 2.3\n      'B'\n    elsif x > 2.1\n      'B-'\n    elsif x > 1.7\n      'C'\n\
    \    elsif x > 1.3\n      'C-'\n    elsif x > 1.0\n      'C'\n    elsif x > 0.7\n\
    \      'C'\n    elsif x > 0.0\n      'D'\n    elsif x > 0.0\n      'D-'\n    elsif\
    \ x > 0.0\n      'D+'\n    elsif x > 0.0\n      'E'\n    else\n      'F'\n   \
    \ end\n  }\nend", "    grades.sort()\n    grades.reverse()", "  # write your code\
    \ here\n  # your code goes here\n  # your code goes here\n  # your code goes here\n\
    \  # your code goes here\n  # your code goes here\n  # your code goes here\n \
    \ # your code goes here\n  # your code goes here\n  # your code goes here\n  #\
    \ your code goes here\n  # your code goes here\n  # your code goes here\n  # your\
    \ code goes here\n  # your code goes here\n  # your code goes here\n  # your code\
    \ goes here\n  # your code goes here\n  # your code goes here\n  # your code goes\
    \ here\n  # your code goes here\n  # your code goes here\n  # your code goes here\n\
    \  # your code goes here\n  # your code goes here\n  # your code goes here\n \
    \ # your code goes here\n  # your code goes here\n  # your code goes here\n  #\
    \ your code goes here\n  # your code goes here\n  # your code goes here\n  # your\
    \ code goes here\n  # your code goes here\n  # your code goes here\n  # your code\
    \ goes here\n  # your code goes here\n  # your code goes here\n  # your code goes\
    \ here\n  # your code goes here\n  # your code goes here\n  # your code goes here\n\
    \  # your code goes here\n  # your code goes here\n  # your code goes here\n \
    \ # your code goes here\n  # your code goes here\n  # your code goes here\n  #\
    \ your code goes here\n  # your code goes here\n  # your code goes here\n  # your\
    \ code goes here\n  # your code goes here\n  # your code goes here\n  # your code\
    \ goes here\n  # your code goes here\n  # your code goes here\n  # your code goes\
    \ here\n  # your code goes here\n  # your code goes here\n  # your code goes here\n\
    \  # your code goes here\n  # your code goes here\n  # your code goes here\n \
    \ # your code goes here\n  # your code goes here\n  # your code goes here\n  #\
    \ your code goes here\n  # your code goes here\n  # your code goes here\n  # your\
    \ code goes here\n  # your code goes here\n  # your code goes here\n  # your code\
    \ goes here\n  # your code goes here\n  # your code goes here\n  # your code goes\
    \ here\n  # your code goes here\n  # your code goes here\n  # your code goes here\n\
    \  # your code goes here\n  # your code goes here\n  # your code goes here\n \
    \ # your code goes here\n  # your code goes here\n  # your code goes here\n  #\
    \ your code goes here\n  # your code goes here\n  # your code goes here\n  # your\
    \ code goes here\n  # your code goes here\n  # your code goes here\n  # your code\
    \ goes here\n  # your code goes here\n  # your code goes here\n  # your code goes\
    \ here\n  # your code goes here\n  # your code goes here\n  # your code goes here\n\
    \  # your code goes here\n  # your code goes here\n  # your code goes here\n \
    \ # your code ", "  grades.each_with_index do |grade, index|\n    if grade < 3.5\
    \ then return \"D\"\n    elsif grade < 4 then return \"C-\"\n    elsif grade <\
    \ 4.5 then return \"C\"\n    elsif grade < 5 then return \"B-\"\n    elsif grade\
    \ < 5.5 then return \"B\"\n    elsif grade < 6 then return \"A-\"\n    elsif grade\
    \ < 6.5 then return \"A\"\n    elsif grade < 7 then return \"A+\"\n    elsif grade\
    \ < 7.5 then return \"A\"\n    elsif grade < 8 then return \"B+\"\n    elsif grade\
    \ < 8.5 then return \"B\"\n    elsif grade < 9 then return \"B-\"\n    elsif grade\
    \ < 9.5 then return \"B\"\n    elsif grade < 10 then return \"C+\"\n    elsif\
    \ grade < 10.5 then return \"C\"\n    elsif grade < 11 then return \"C-\"\n  \
    \  elsif grade < 11.5 then return \"C\"\n    elsif grade < 12 then return \"D+\"\
    \n    elsif grade < 12.5 then return \"D\"\n    elsif grade < 13 then return \"\
    D-\"\n    elsif grade < 13.5 then return \"D\"\n    elsif grade < 14 then return\
    \ \"E\"\n  end\nend", "    grades\nend", "    grade_array = []\n    sum_of_grades\
    \ = grade_array[0]\n    for i in grade_array\n        if sum_of_grades <= i\n\
    \            grade_array << i\n        else \n            grade_array << \"B+\"\
    \ if sum_of_grades > i\n            grade_array << \"B-\" if sum_of_grades < i\n\
    \            grade_array << \"D-\" if sum_of_grades == i\n            grade_array\
    \ << i\n            sum_of_grades = grade_array[0]\n        end \n    end \n \
    \   grade_array\nend \n</code>\nIt would be nice if I could write the whole thing\
    \ in one function, except for the letters and grade array part, but I don't know\
    \ how to do that.\n<|/ q tags=ruby,arrays,ruby-on-rails,loops |>\n<| c |>\nPlease\
    \ read \"[ask]\" including the linked pages and \"[mcve](https://stackoverflow.com/help/minimal-reproducible-example)\"\
    . We need to see the minimum code that demonstrates the problem you're having.\
    \ We shouldn't have to re-type that out from scratch to test it. And, more importantly,\
    \ we need to see the minimum code that demonstrates the problem you're having\
    \ along with the desired result. Without that we're just wasting our time trying\
    \ to help you.\n<|/ c |>\n<| c |>\nI did edit the question. Please let me know\
    \ if you need something else to make it more clear.\n<|/ c |>\n<| c |>\nIt would\
    \ be nice if you could provide a sample input and output. Even if we do this,\
    \ we'd still have to know what you mean by \"I have this list and I want a function\
    \ to output the letter grades\".\n<|/ c |>\n<| c |>\nYour question still needs\
    \ clarification. Please read \"[ask]\". Specifically, the part about \"[mcve](https://stackoverflow.com/help/minimal-reproducible-example)\"\
    . It's very important and also important. Please also follow the links in the\
    \ \"duplicate\" that were posted in your earlier questions.\n<|/ c |>\n<| c |>\n\
    I added an example of the output that I want, but I didn't know how to explain\
    \ it.\n<|/ c |>\n<| a tags=ruby,arrays,ruby-on-rails,loops |>\nAs you said, you\
    \ haven't tried much. So, I'm going to give you a skeleton code so you get an\
    \ idea of what you can do to get what you want\n<code>", "  grades.each do |grade|\n\
    \    puts ((grade - 3.0).floor.to_s + \" \" if grade > 3.0 && grade != 0.0\n \
    \            || (grade - 2.3).floor.to_s + \"+ \" if grade > 2.3 && grade != 0.0\n\
    \             || (grade - 1.7).floor.to_s + \"-\" if grade > 1.7 && grade != 0.0\n\
    \             || (grade - 1.0).floor.to_s + \"   \" if grade > 1.0 && grade !=\
    \ 0.0\n             || (grade - 0.7).floor.to_s + \"   \" if grade > 0.7 && grade\
    \ != 0.0\n             || (grade - 0.3).floor.to_s + \"  \" if grade > 0.3 &&\
    \ grade != 0.0\n             || (grade - 0.0).floor.to_s + \"   \" if grade >\
    \ 0.0)\n  end\nend", "  grades.each do |g|\n    if g > 3.7\n      g = (g - 3.7).round(1)\n\
    \      lettergrade = 'A+'\n    elsif g > 3.3\n      g = (g - 3.3).round(1)\n \
    \     lettergrade = 'A'\n    elsif g > 3.0\n      g = (g - 3.0).round(1)\n   \
    \   lettergrade = 'B+'\n    elsif g > 2.7\n      g = (g - 2.7).round(1)\n    \
    \  lettergrade = 'B'\n    elsif g > 2.3\n      g = (g - 2.3).round(1)\n      lettergrade\
    \ = 'B-'\n    elsif g > 2.0\n      g = (g - 2.0).round(1)\n      lettergrade =\
    \ 'C+'\n    elsif g > 1.7\n      g = (g - 1.7).round(1)\n      lettergrade = 'C'\n\
    \    elsif g > 1.3\n      g = (g - 1.3).round(1)\n      lettergrade = 'C-'\n \
    \   elsif g > 1.0\n      g = (g - 1.0).round(1)\n      lettergrade = 'D+'\n  \
    \  elsif g > 0.7\n      g = (g - 0.7).round(1)\n      lettergrade = 'D'\n    elsif\
    \ g > 0.0\n      g = (g - 0.0).round(1)\n      lettergrade = 'D-'\n    else\n\
    \      lettergrade = 'E'\n    end\n  end\n  lettergrade\nend", "  grades.sort.reverse!\n\
    \  letter_grades = []\n  i = grades.length - 1\n  while i >= 0\n    if grades[i]\
    \ >= 4\n      letter_grades.push(['A+'])\n    elsif grades[i] >= 3.7\n      letter_grades.push(['A'])\n\
    \    elsif grades[i] >= 3.3\n      letter_grades.push(['A-'])\n    elsif grades[i]\
    \ >= 3.0\n      letter_grades.push(['B+'])\n    elsif grades[i] >= 2.7\n     \
    \ letter_grades.push(['B'])\n    elsif grades[i] >= 2.3\n      letter_grades.push(['B-'])\n\
    \    elsif grades[i] >= 2.0\n      letter_grades.push(['C+'])\n    elsif grades[i]\
    \ >= 1.7\n      letter_grades.push(['C'])\n    elsif grades[i] >= 1.3\n      letter_grades.push(['C-'])\n\
    \    elsif grades[i] >= 1.0\n      letter_grades.push(['D+'])\n    elsif grades[i]\
    \ >= 0.7\n      letter_grades.push(['D'])\n    elsif grades[i] >= 0.0\n      letter_grades.push(['D-'])\n\
    \    elsif grades[i] == 0.0\n      letter_grades.push(['E'])\n    elsif grades[i]\
    \ >= -0.1\n      letter_grades.push(['F'])\n    else\n      letter_grades.push(['ERROR'])\n\
    \    end\n    i -= 1\n  end\n  letter_grades.reverse!\n  letter_grades.join\n\
    end\n</cell>\n<text>\nTask 3\nWrite a function that takes three arguments, an\
    \ integer, a float and a boolean.\nThe function should do the following:", " \
    \ letters = \"ABCDEF\"\n  grades.sort.reverse!\n  grades.map! {|grade| grade if\
    \ grade >= 0 && grade < 6}\n  grades.compact!\n  grades.uniq!\n  grades.compact.map!\
    \ {|grade| letters[grade.to_i - 1] }\n  grades.compact!\n  grades.map! {|grade|\
    \ grade >= 3 ? \"D+\" : grade == 2 ? \"D\" : grade == 1 ? \"D-\" : \"E\" }\n \
    \ grades.sort.reverse!\n  return grades\nend", "    grade = grades.shift\n   \
    \ letter_grades = ['A+', 'B', 'C-', 'C', 'D-', 'E',]\n    return letter_grades[grade]\n\
    end\n</code>\n<|/ a tags=ruby,algorithm |>\n<| a tags=ruby,algorithm dscore=0\
    \ |>\nThis is what I have managed to come up with so far, and I hope it will be\
    \ of help to someone. Basically, I first created a hash table, where the keys\
    \ are the names of classes and the values are the corresponding grades for those\
    \ classes. Then I converted the hash table to an array, and I took the values\
    \ from the array and put them into a hash table, where the keys are the classes\
    \ and the values are the grade letters associated with those classes. Then I converted\
    \ the hash table to a string, and returned the string. Here is the code I wrote\
    \ so far:\n<code>", "  grades.inject([]) do |grade_list, grade|\n    grade_list.concat([grade])\
    \ if grade >= 4.0 && grade < 3.7\n    grade_list.concat([grade]) if grade >= 3.3\
    \ && grade < 3.0\n    grade_list.concat([grade]) if grade >= 2.7 && grade < 2.3\n\
    \    grade_list.concat([grade]) if grade >= 2.0 && grade < 1.7\n    grade_list.concat([grade])\
    \ if grade >= 1.7 && grade < 1.0\n    grade_list.concat([grade]) if grade >= 0.7\
    \ && grade < 0.0\n  end\nend", "  grades.each do |grade|\n  case grade\n  when\
    \ 0...1\n    'D-'\n  when 1...2\n    'D'\n  when 2...3\n    'C-'\n  when 3...4\n\
    \    'C'\n  when 4...5\n    'B-'\n  when 5...6\n    'B'\n  when 6...7\n    'B+'\n\
    \  when 7...8\n    'A+'\n  when 8...9\n    'A'\n  when 9...10\n    'A'\n  when\
    \ 10...11\n    'A-'\n  when 11...12\n    'A'\n  else\n    'E'\n  end\n  end\n\
    end", "    grades = grades.to_a\n    grades = grades.map{|x| x.to_f}\n    # Find\
    \ the grades\n    grades = grades.reject{|x| x == 0}\n    grades.sort!\n    grades\
    \ = grades.reverse\n    grades.each_index {|i|\n        if grades[i] > 4.0 ||\
    \ grades[i] < 0.0\n            grades[i] = 0.0\n        end\n    }\n    # Find\
    \ the grades letter\n    grades = grades.map{|x| lettergrade(x)}\n    grades =\
    \ grades.join(\"-\")\nend\n</code>\n<|/ a tags=ruby |>\n<| c |>\nThis doesn't\
    \ handle the grade being negative.\n<|/ c |>\n<| a dscore=3 |>\nA quick solution,\
    \ although I doubt it is very efficient, would be to do the following:\n<code>",
  "  grades.each_with_index { |grade, index|\n    if grade < 4.0\n      'F'\n    elsif\
    \ grade > 3.7\n      'D'\n    elsif grade > 3.3\n      'D-'\n    elsif grade >\
    \ 3.0\n      'D+'\n    elsif grade > 2.7\n      'C'\n    elsif grade > 2.3\n \
    \     'C-'\n    elsif grade > 2.0\n      'C+'\n    elsif grade > 1.7\n      'B'\n\
    \    elsif grade > 1.3\n      'B-'\n    elsif grade > 1.0\n      'B+'\n    elsif\
    \ grade > 0.7\n      'A'\n    elsif grade > 0.0\n      'A+'\n    else\n      'E'\n\
    \    end\n  }\nend", "  # Grade cannot be negative\n  grades = grades.select {\
    \ |x| x >= 0 }\n  \n  # Calculate the average\n  avg = grades.reduce(:+) / grades.count\n\
    \  \n  # Return grades based on the average\n  grades.map do |grade|\n    if grade\
    \ >= avg\n      \"A+\"\n    elsif grade >= avg - 2.3\n      \"A\"\n    elsif grade\
    \ >= avg - 1.7\n      \"A-\"\n    elsif grade >= avg - 1.0\n      \"B+\"\n   \
    \ elsif grade >= avg - 0.7\n      \"B\"\n    elsif grade >= avg - 0.3\n      \"\
    B-\"\n    elsif grade >= avg - 0.0\n      \"C+\"\n    elsif grade >= avg - 0.0\n\
    \      \"C\"\n    elsif grade >= avg - 0.0\n      \"C-\"\n    elsif grade >= avg\
    \ - 0.0\n      \"D+\"\n    elsif grade >= avg - 0.0\n      \"D\"\n    elsif grade\
    \ >= avg - 0.0\n      \"D-\"\n    else\n      \"E\"\n    end\n  end\nend", " \
    \ # Write your code here\n  result = []\n  if grades.empty?\n    result\n  else\n\
    \    grades.each_with_index do |grade, index|\n      if index < grades.size -\
    \ 1\n        if grade < grades[index + 1]\n          result.push(\"A+\")\n   \
    \     elsif grade > grades[index + 1]\n          result.push(\"D-\")\n       \
    \ else\n          result.push(\"D\")\n        end\n      else\n        if grade\
    \ < grades[0]\n          result.push(\"E\")\n        else\n          result.push(\"\
    D\")\n        end\n      end\n    end\n  end\n  result\nend", "  grade_numbers\
    \ = [4.0, 3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0]\n  letter_grades = []\n\
    \  grades.each_with_index do |grade, index|\n    if grade > grade_numbers[index\
    \ - 1]\n      letter_grades[index] = 'A+'\n    elsif grade > grade_numbers[index]\n\
    \      letter_grades[index] = 'A'\n    elsif grade > grade_numbers[index + 1]\n\
    \      letter_grades[index] = 'A-'\n    else\n      letter_grades[index] = 'B+'\n\
    \    end\n  end\n  letter_grades.join(', ')\nend\n</code>\n<|/ a dscore=1 tags=ruby,arrays,algorithm,performance\
    \ |>\n<| c |>\nThis doesn't seem to be any better than the original (though it\
    \ might be marginally better than the original). In particular, it doesn't seem\
    \ to have anything to do with grades being input as strings.\n<|/ c |>\n<| c |>\n\
    This doesn't seem to do what the question asked.\n<|/ c |>\n<| c |>\nI used this\
    \ code and it was fine, but i would change 'letter_grades[index] = 'A+' to  'letter_grades[index]\
    \ =' since you don't have any letters you want to get but just numbers\n<|/ c\
    \ |>\n<| a tags=ruby,arrays,algorithm,performance |>\nThe most efficient way would\
    \ be to just reverse your existing solution, and use a binary search to find the\
    \ best grade. But since we're looking for a solution that is O(n), it seems like\
    \ the best thing to do is just loop through the entire array, but instead of checking\
    \ every grade individually, check if it's better to just loop through the grades\
    \ in the reverse order (lowest to highest), e.g.:\n<code>", "  grades = Array(grades).sort\n\
    \  grades.map! { |g| g > 0 ? g : -g}.compact!\n  grades.map! { |g| g < 0 ? g :\
    \ +g}.compact!\n  grades.map! { |g| g == 0 ? g : g == 1 ? \"+\" : \"-\"}.compact!\n\
    \  grades\nend", "  grades.sort! # First make sure that the list is sorted\n \
    \ grades = grades[0..-2] # First remove the grades for the last student\n  grades.shift\
    \  # Remove the first value\n  grades.shift # Remove the first value\n  grades\
    \ = grades[0..-2] # Remove the first value\n  grades = grades[0..-2] # Remove\
    \ the first value\n  grades = grades[0..-2] # Remove the first value\n  grades\
    \ = grades[0..-2] # Remove the first value\n  grades = grades[0..-2] # Remove\
    \ the first value\n  grades = grades[0..-2] # Remove the first value\n  grades\
    \ = grades[0..-2] # Remove the first value\n  grades = grades[0..-2] # Remove\
    \ the first value\n  grades = grades[0..-2] # Remove the first value\n  grades\
    \ = grades[0..-2] # Remove the first value\n  grades = grades[0..-2] # Remove\
    \ the first value\n  grades = grades[0..-2] # Remove the first value\n  grades\
    \ = grades[0..-2] # Remove the first value\n  grades = grades[0..-2] # Remove\
    \ the first value\n  grades = grades[0..-2] # Remove the first value\n  grades\
    \ = grades[0..-2] # Remove the first value\n  grades = grades[0..-2] # Remove\
    \ the first value\n  grades = grades[0..-2] # Remove the first value\n  grades\
    \ = grades[0..-2] # Remove the first value\n  grades = grades[0..-2] # Remove\
    \ the first value\n  grades = grades[0..-2] # Remove the first value\n  grades\
    \ = grades[0..-2] # Remove the first value\n  grades = grades[0..-2] # Remove\
    \ the first value\n  grades = grades[0..-2] # Remove the first value\n  grades\
    \ = grades[0..-2] # Remove the first value\n  grades = grades[0..-2] # Remove\
    \ the first value\n  grades = grades[0..-2] # Remove the first value\n  grades\
    \ = grades[0..-2] # Remove the first value\n  grades = grades[0..-2] # Remove\
    \ the first value\n  grades = grades[0..-2] # Remove the first value\n  grades\
    \ = grades[0..-2] # Remove the first value\n  grades = grades[0..-2] # Remove\
    \ the first value\n  grades = grades[0..-2] # Remove the first value\n  grades\
    \ = grades[0..-2] # Remove the first value\n  grades = grades[0..-2] # Remove\
    \ the first value\n  grades = grades[0..-2] # Remove the first ", "    grades\
    \ = grades.sort\n    grades.reverse!\n    grades.reverse!\n    grades.reverse!\n\
    \    grades.reverse!\n    grades.reverse!\n    grades.reverse!\n    grades.reverse!\n\
    \    grades.reverse!\n    grades.reverse!\n    grades.reverse!\n    grades.reverse!\n\
    \    grades.reverse!\n    grades.reverse!\n    grades.reverse!\n    grades.reverse!\n\
    \    grades.reverse!\n    grades.reverse!\n    grades.reverse!\n    grades.reverse!\n\
    \    grades.reverse!\n    grades.reverse!\n    grades.reverse!\n    grades.reverse!\n\
    \    grades.reverse!\n    grades.reverse!\n    grades.reverse!\n    grades.reverse!\n\
    \    grades.reverse!\n    grades.reverse!\n    grades.reverse!\n    grades.reverse!\n\
    \    grades.reverse!\n    grades.reverse!\n    grades.reverse!\n    grades.reverse!\n\
    \    grades.reverse!\n    grades.reverse!\n    grades.reverse!\n    grades.reverse!\n\
    \    grades.reverse!\n    grades.reverse!\n    grades.reverse!\n    grades.reverse!\n\
    \    grades.reverse!\n    grades.reverse!\n    grades.reverse!\n    grades.reverse!\n\
    \    grades.reverse!\n    grades.reverse!\n    grades.reverse!\n    grades.reverse!\n\
    \    grades.reverse!\n    grades.reverse!\n    grades.reverse!\n    grades.reverse!\n\
    \    grades.reverse!\n    grades.reverse!\n    grades.reverse!\n    grades.reverse!\n\
    \    grades.reverse!\n    grades.reverse!\n    grades.reverse!\n    grades.reverse!\n\
    \    grades.reverse!\n    grades.reverse!\n    grades.reverse!\n    grades.reverse!\n\
    \    grades.reverse!\n    grades.reverse!\n    grades.reverse!\n    grades.reverse!\n\
    \    grades.reverse!\n    grades.reverse!\n    grades.reverse!\n    grades.reverse!\n\
    \    grades.reverse!\n    grades.reverse!\n    grades.reverse!\n    grades.reverse!\n\
    \    grades.reverse!\n    grades.reverse!\n    grades.reverse!\n    grades.reverse!\n\
    \    grades.reverse!\n    ", "  grades.each do |grade|\n    unless grade > 4.0\
    \ && grade < 5.0\n      puts \"Invalid grade #{grade.to_f}!\"\n      return\n\
    \    end\n    grade = grade.to_f\n    case grade < 4.0\n    when true\n      puts\
    \ \"Invalid grade #{grade.to_f}!\"\n      return\n    when 3.7\n      puts \"\
    Invalid grade #{grade.to_f}!\"\n      return\n    when 3.3\n      puts \"Invalid\
    \ grade #{grade.to_f}!\"\n      return\n    when 3.0\n      puts \"Invalid grade\
    \ #{grade.to_f}!\"\n      return\n    when 2.7\n      puts \"Invalid grade #{grade.to_f}!\"\
    \n      return\n    when 2.3\n      puts \"Invalid grade #{grade.to_f}!\"\n  \
    \    return\n    when 2.0\n      puts \"Invalid grade #{grade.to_f}!\"\n     \
    \ return\n    when 1.7\n      puts \"Invalid grade #{grade.to_f}!\"\n      return\n\
    \    when 1.3\n      puts \"Invalid grade #{grade.to_f}!\"\n      return\n   \
    \ when 1.0\n      puts \"Invalid grade #{grade.to_f}!\"\n      return\n    when\
    \ 0.7\n      puts \"Invalid grade #{grade.to_f}!\"\n      return\n    when 0.0\n\
    \      puts \"Invalid grade #{grade.to_f}!\"\n      return\n    end\n  end\n \
    \ grades.each do |grade|\n    grade = grade.to_f\n    case grade < 3.0\n    when\
    \ true\n      puts \"Invalid grade #{grade.to_f}!\"\n      return\n    when 2.7\n\
    \      puts \"Invalid grade #{grade.to_f}!\"\n      return\n    when 2.3\n   \
    \   puts \"Invalid grade #{grade.to_f}!\"\n      return\n    when 2.0\n      puts\
    \ \"Invalid grade #{grade.to_f}!\"\n      return\n    when 1.7\n      puts \"\
    Invalid grade #{grade.to_f}!\"\n      return\n    when 1.3\n      puts \"Invalid\
    \ grade #{grade.to_f}!\"\n      return\n    when 1.0\n      puts \"Invalid grade\
    \ #{grade.to_f}!\"\n      return\n    when 0.7\n      puts \"Invalid grade #{grade.to_f}!\"\
    \n      return\n    when 0.0\n      puts \"", "  letters=[]\n  grades.each do\
    \ |grade|\n    if grade > 3.0 && grade <= 3.7\n      letters.push('C')\n    elsif\
    \ grade > 3.3 && grade <= 3.7\n      letters.push('B-')\n    elsif grade > 2.7\
    \ && grade <= 3.3\n      letters.push('B')\n    elsif grade > 2.3 && grade <=\
    \ 2.7\n      letters.push('B-')\n    elsif grade > 1.7 && grade <= 2.3\n     \
    \ letters.push('C')\n    elsif grade > 1.3 && grade <= 1.7\n      letters.push('C-')\n\
    \    elsif grade > 1.0 && grade <= 1.3\n      letters.push('C')\n    elsif grade\
    \ > 0.7 && grade <= 1.0\n      letters.push('C')\n    elsif grade > 0.0 && grade\
    \ <= 0.7\n      letters.push('D')\n    elsif grade > 0.0 &&  grade < 0.1\n   \
    \   letters.push('D-')\n    else\n      letters.push('D+')\n    end\n  end\n \
    \ letters.join('+')\nend", "  grades, letters = grades.to_a, []\n  g_index = 0.step(0..grades.length-1)\n\
    \  g_index = g_index.to_s\n  g_index = g_index.split('.').map(&:to_i)\n  g_index.each_with_index\
    \ do |grade, index|\n    letter.push(\"A+\".include?(grade) ? index : \"\") \n\
    \  end\n  letters.join('')\nend\n</code>\n<|/ a |>\n<| c |>\nI feel like I should\
    \ also note that I wrote this as I was writing it, and it might not be the most\
    \ efficient solution, but I thought it'd be fun to write, so I went ahead and\
    \ posted it. If you found it useful, please upvote and select my answer as the\
    \ correct answer!\n<|/ c |>\n<| c |>\nThanks for your answer, I appreciate it!\
    \ I tried implementing it and it works well. Although I did have to tweak a few\
    \ things because of your answer, but that's my fault. Thanks again!\n<|/ c |>\n\
    <| a tags=ruby |>\nIf grades.to_a is the array of grades you want to grade, then\
    \ you can use the following code to get a list of the letter grades:\n<code>\n\
    grades.sort.each_with_index.map { |grade, index| index == grades.index(grade)\
    \ ? \"C\" : index == grades.index(grade)-1 ? \"B\" : index == grades.index(grade)-2\
    \ ? \"A+\" : index == grades.index(grade)-3 ? \"A-\" : index == grades.index(grade)-4\
    \ ? \"B-\" : index == grades.index(grade)-5 ? \"B-\" : index == grades.index(grade)-6\
    \ ? \"B-\" : index == grades.index(grade)-7 ? \"B-\" : index == grades.index(grade)-8\
    \ ? \"B-\" : index == grades.index(grade)-9 ? \"B-\" : index == grades.index(grade)-10\
    \ ? \"B-\" : index == grades.index(grade)-11 ? \"B-\" : index == grades.index(grade)-12\
    \ ? \"B-\" : index == grades.index(grade)-13 ? \"B-\" : index == grades.index(grade)-14\
    \ ? \"B-\" : index == grades.index(grade)-15 ? \"B-\" : index == grades.index(grade)-16\
    \ ? \"B-\" : index == grades.index(grade)-17 ? \"B-\" : index == grades.index(grade)-18\
    \ ? \"B-\" : index == grades.index(grade)-19 ? \"B-\" : index == grades.index(grade)-20\
    \ ? \"B-\" : index == grades.index(grade)-21 ? \"B-\" : index == grades.index(grade)-22\
    \ ? \"B-\" : index == ", "    # Your code here\n    return letter_grade(grades[0],\
    \ grades[1], grades[2])", "\tgrades = grades.map {|g| g > 0.0 ? '+' : g > 0.7\
    \ ? 'D' : g > 0.3 ? 'C-' : g > 0.1 ? 'B-' : g > 0.07 ? 'B+' : g > 0.03 ? 'A-'\
    \ : g > 0.0 ? 'A+' : 'E'}\nend\n</code>\nNow, we can try the grade function as\
    \ follows:\n<code>\ngrades = grade_equation([4.0, 3, 1.7, 2, 3.5])\ngrades.inspect",
  "  # TODO: implement a function that takes a list of grades and outputs a list of\
    \ letters\n  # Example:\n  # grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+',\
    \ 'B', 'C-', 'C', 'A-']\nend", "  grades = grades.sort\n  grades.reverse!\n  grades.each_with_index\
    \ do |grade, index|\n    next_grade = grades[index + 1]\n    return grade if next_grade\
    \ > grade\n    return grades[grades.index(grade, index)]\n  end\nend", "    grades\
    \ = (grades - (grades % 1)) / 1\n    grades.times { |grade| grades -= 1 }\n  \
    \  (grades.to_s.include?('-') ? 'D-' : 'D') + (grades > 0 ? '+' : '') + (grades\
    \ < 0 ? '-' : '')\nend", "  # Your code here\n  lettergrade = \"E\"\n  for i in\
    \ range(len(grades)):\n    numerical = grades[i]\n    if (numerical > 4):\n  \
    \    lettergrade = lettergrade + \"A+\"\n    elif (numerical > 3.7):\n      lettergrade\
    \ = lettergrade + \"A\"\n    elif (numerical > 3.3):\n      lettergrade = lettergrade\
    \ + \"A-\"\n    elif (numerical > 3):\n      lettergrade = lettergrade + \"B+\"\
    \n    elif (numerical > 2.7):\n      lettergrade = lettergrade + \"B\"\n    elif\
    \ (numerical > 2.3):\n      lettergrade = lettergrade + \"B-\"\n    elif (numerical\
    \ > 2):\n      lettergrade = lettergrade + \"C+\"\n    elif (numerical > 1.7):\n\
    \      lettergrade = lettergrade + \"C\"\n    elif (numerical > 1.3):\n      lettergrade\
    \ = lettergrade + \"C-\"\n    elif (numerical > 1):\n      lettergrade = lettergrade\
    \ + \"D+\"\n    elif (numerical > 0.7):\n      lettergrade = lettergrade + \"\
    D\"\n    elif (numerical > 0):\n      lettergrade = lettergrade + \"D-\"\n   \
    \ else:\n      lettergrade = lettergrade + \"E\"\n  return lettergrade", "  return\
    \ letterGrade(grades, 0)\nend", "  return grades.map do |grade|\n    if grade\
    \ >= 4.0\n      'A+'\n    elsif grade > 3.7\n      'A'\n    elsif grade > 3.3\n\
    \      'A-'\n    elsif grade > 3.0\n      'B+'\n    elsif grade > 2.7\n      'B'\n\
    \    elsif grade > 2.3\n      'B-'\n    elsif grade > 2.0\n      'C+'\n    elsif\
    \ grade > 1.7\n      'C'\n    elsif grade > 1.3\n      'C-'\n    elsif grade >\
    \ 1.0\n      'D+'\n    elsif grade > 0.7\n      'D'\n    elsif grade > 0.0\n \
    \     'D-'\n    elsif grade >= 0.0\n      'E'\n    else\n      'E'\n    end\n\
    \  end\nend\n</code>\nI tried to make this a little more pythonic, although I\
    \ left out the letters because I couldn't tell whether those were supposed to\
    \ be A, B, etc.\n<|/ a tags=python,loops dscore=0 |>\n<| c |>\nThanks for your\
    \ answer! Unfortunately the output needs to be a list as specified in the question.\
    \ I've edited the question to reflect this.\n<|/ c |>\n<| c |>\nHmm, I see. Your\
    \ code already has a list output in the numerical_letter_grade function, so I\
    \ edited the answer to show how to turn it back into a string list.\n<|/ c |>\n\
    <| c |>\nThat's great. Your solution looks much more elegant than what I came\
    \ up with. I've got another question: How would you write the solution so that,\
    \ if there were no GPAs for a student, it would output 'E'?\n<|/ c |>\n<| c |>\n\
    I edited my code again to have a case for no GPAs. I hope you don't mind.\n<|/\
    \ c |>\n<| a tags=python,loops |>\nYou can use list comprehension to simplify\
    \ the code. \n<code>", "    # your code here\nend\n</code>\n<|/ a dscore=1 |>\n\
    <| c |>\nThanks for that! I'm getting an error \"unexpected end\" on line 25\n\
    <|/ c |>\n<| c |>\nOops I didn't finish the code by copy and paste. Now I added\
    \ a line at the end.\n<|/ c |>\n<| c |>\nI'm having trouble following your code.\
    \ I don't really understand what's going on and I'm not familiar with enumerate\
    \ yet. Sorry if these are stupid questions but I'm very new to programming and\
    \ trying to learn.\n<|/ c |>\n<| c |>\nOkay I think I figured it out for the most\
    \ part. Just one last question. I'm getting an error for the 'grades_as_nums'\
    \ line that says \"undefined method 'to_i' for [4.0, 3, 1.7, 2, 3.5]\" Does anyone\
    \ know what this means?\n<|/ c |>\n<| c |>\nI just edited my answer with the solution\
    \ you were asking for. Since I started programming Ruby a few weeks ago I didn't\
    \ know that `Array#to_i` existed until I read your question. So I used it on the\
    \ array of strings like so: `grades_as_nums.map(&:to_i)`. It essentially converts\
    \ an array of strings to an array of integers.\n<|/ c |>\n<| a |>\n<code>\ngrades\
    \ = [\"4.0\", \"3.7\", \"3.3\", \"3.0\", \"2.7\", \"2.3\", \"2.0\", \"1.7\", \"\
    1.3\", \"1.0\", \"0.7\", \"0.0\"]", "  grades.map! {|x| x/10}\n  grades.sort!\n\
    \  grades.reverse!\n  grades.each do |x|\n    if x > 0 && x < 4\n      puts \"\
    A+\"\n    elsif x > 3.7 && x < 4.3\n      puts \"A\"\n    elsif x > 3.3 && x <\
    \ 3.7\n      puts \"A-\"\n    elsif x > 2.7 && x < 3.3\n      puts \"B+\"\n  \
    \  elsif x > 2.3 && x < 2.7\n      puts \"B\"\n    elsif x > 1.9 && x < 2.3\n\
    \      puts \"B-\"\n    elsif x > 1.7 && x < 1.9\n      puts \"C+\"\n    elsif\
    \ x > 1.3 && x < 1.7\n      puts \"C\"\n    elsif x > 0.9 && x < 1.3\n      puts\
    \ \"C-\"\n    elsif x > 0.7 && x < 0.9\n      puts \"D+\"\n    elsif x > 0.3 &&\
    \ x < 0.7\n      puts \"D\"\n    elsif x > 0.0\n      puts \"D-\"\n    else\n\
    \      puts \"E\"\n    end\n  end\nend\n</code>\n<|/ a |>\n<| c |>\nThanks for\
    \ the reply, but I cant seem to work out how to apply this to the assignment.\
    \ I dont understand the part where you define letterGrade, I'm guessing its something\
    \ to do with the gpas and grades, I just dont know how to use it with the function\
    \ I already have.\n<|/ c |>\n<| a tags=ruby |>\nI wrote a method that converts\
    \ GPA to letter and I used the method you wrote for grading students. The method\
    \ was this:\n<code>", "    grades_copy = grades.copy()\n    grades_copy.reverse!\n\
    \    # Write your code below!\n    grades_copy.each_with_index do |grade,index|\n\
    \        grades_copy[index] = grade * 3\n    end\n    grades_copy.each do |grade|\n\
    \        if grade < 0\n            grades_copy.delete(grade)\n        else\n \
    \           grades_copy.delete(grade)\n        end\n    end\n    grades_copy.each\
    \ do |grade|\n        grades_copy.delete(grade)\n    end\n    grades_copy.each\
    \ do |grade|\n        grades_copy.delete(grade)\n    end\n    grades_copy.each\
    \ do |grade|\n        grades_copy.delete(grade)\n    end\n    grades_copy.each\
    \ do |grade|\n        grades_copy.delete(grade)\n    end\n    grades_copy.each\
    \ do |grade|\n        grades_copy.delete(grade)\n    end\n    grades_copy.each\
    \ do |grade|\n        grades_copy.delete(grade)\n    end\n    grades_copy.each\
    \ do |grade|\n        grades_copy.delete(grade)\n    end\n    grades_copy.each\
    \ do |grade|\n        grades_copy.delete(grade)\n    end\n    grades_copy.each\
    \ do |grade|\n        grades_copy.delete(grade)\n    end\n    grades_copy.each\
    \ do |grade|\n        grades_copy.delete(grade)\n    end\n    grades_copy.each\
    \ do |grade|\n        grades_copy.delete(grade)\n    end\n    grades_copy.each\
    \ do |grade|\n        grades_copy.delete(grade)\n    end\n    grades_copy.each\
    \ do |grade|\n        grades_copy.delete(grade)\n    end\n    grades_copy.each\
    \ do |grade|\n        grades_copy.delete(grade)\n    end\n    grades_copy.each\
    \ do |grade|\n        grades_copy.delete(grade)\n    end\n    grades_copy.each\
    \ do |grade|\n        grades_copy.delete(grade)\n    end\n    grades_copy.each\
    \ do |grade|\n        grades_copy.delete(grade)\n    end\n    grades_copy.each\
    \ do |grade|\n        grades_copy.delete(grade)\n    end\n    grades_copy.each\
    \ do |grade|\n        grades_copy.delete(grade)\n    end\n    grades_copy.each\
    \ do |grade|\n        grades_copy.delete(grade)\n    end\n    grades_copy.each\
    \ do |grade|\n        grades_copy.delete(grade)\n    end\n    grades_copy.each\
    \ do |grade|\n        grades_copy.delete(grade)\n    end\n    grades_copy.each\
    \ do |grade|\n", "  # your code goes here\nend\n</code>\n<|/ a dscore=1 tags=ruby\
    \ |>\n<| a dscore=0 |>\nI believe that this is the solution that you are looking\
    \ for:\n<code>", "    # Write your code here\n    return letter grades", "  grades.reverse.sort!\n\
    \  grades.each do |i|\n    if i >= 3.0 && i <= 5.0 \n      grade = i + \"+\"\n\
    \    elsif i >= 4.0 && i <= 6.0 \n      grade = i + \"-\"\n    elsif i >= 3.0\
    \ && i <= 5.0 \n      grade = i + \"+\"\n    elsif i >= 3.0 && i <= 5.0 \n   \
    \   grade = i + \"+\"\n    else\n      grade = i + \"-\"\n    end\n  end\n  grade.reverse\n\
    end\n</code>\n<|/ q |>\n<| a tags=ruby dscore=2 |>\nI figured out my own answer!\
    \ \nHere is what I did:\n<code>", "  grades.sort!\n  grades.reverse!", "    grades\
    \ = grades.inject({}) {|h,v| h[v] = ((v==0) ? 0 : (v<3.0) ? ('A'+(v-3.0).to_s)\
    \ : (v<2.7) ? ('A'+v) :\n    (v<2.3) ? ('B'+(v-2.7).to_s) : (v<1.7) ? ('B'+v)\
    \ : \n    (v<1.3) ? ('C'+(v-1.7).to_s) : (v<1.0) ? ('C'+v) :\n    ('D'+(v-1.0).to_s));\
    \ }\n    grades.values.sort.map { |i| grades[i] }\nend", "    grades.each_with_index\
    \ { |grade, i| grades[i] = grade.to_i }\n    grades.sort_by { |grade| grade }.last(8).map(&:last).flatten.map\
    \ do |g| \n        g < 4.0 ? 'A+' : g >= 3.7 ? 'A' : g >= 3.3 ? 'A-' : g >= 3.0\
    \ ? 'B+' : \n          g >= 2.7 ? 'B' : g >= 2.3 ? 'B-' : g >= 2.0 ? 'C+' : g\
    \ >= 1.7 ? 'C' : \n          g >= 1.3 ? 'C-' : g >= 1.0 ? 'D+' : g >= 0.7 ? 'D'\
    \ : g >= 0.0 ? 'D-' : 'E'\n      end\nend\n</code>\n<|/ a dscore=0 |>\n<| c |>\n\
    Thanks for your reply. I was trying to solve this problem for 3 days, but could\
    \ not do it using while loop. Now it is working with while loop. Thanks a lot.\n\
    <|/ c |>\n<| c |>\nThe teacher should really have tried hard to come up with a\
    \ solution without using the while loop, and also explained what she did wrong.\n\
    <|/ c |>\n<| c |>\nThanks for your reply. I was trying to solve this problem for\
    \ 3 days, but could not do it using while loop. Now it is working with while loop.\
    \ Thanks a lot.\n<|/ c |>\n<| c |>\nGlad to know it helped.\n<|/ c |>\n<| a |>\n\
    This is a little late to the party, but I thought I might share a solution I came\
    \ up with. I'm sure there are more elegant ways to do this (I've been writing\
    \ in Ruby for quite some time, and a lot of my experience has been with imperative\
    \ languages like Python and C++). I also found it a good exercise to learn how\
    \ to use Ruby's enumerable functions. You can see the code below, and if someone\
    \ comes up with more efficient ways of solving the problem, I'm definitely interested.\
    \ \n<code>", "  grades, summed = grades.dup, 0\n  grades.each do |x|\n    summed\
    \ += x\n    if summed > 5.0 \n      grades.clear\n      summed = 5.0\n    elsif\
    \ summed == 5.0\n      grades.clear\n      summed = 0.0\n    end\n  end\n  grades\n\
    end\n</code>\n<|/ q dscore=0 tags=ruby |>\n<| c |>\nPlease read \"[mcve]\". When\
    \ asking about code that produces an error, you should include the error and the\
    \ line of code that produces it. The shortest code necessary to reproduce your\
    \ problem is typically only a couple of lines. That said, I suspect that the error\
    \ is that you are trying to call `to_s` on an `Array` when what you should be\
    \ doing is mapping each number to a string. Also, using `each_with_index` will\
    \ let you skip the loop for certain indices.\n<|/ c |>\n<| c |>\nWhat is your\
    \ question? Do you understand what the error is trying to tell you? Have you tried\
    \ debugging your code to see why it's doing what it's doing? Have you read [the\
    \ documentation for `Array#to_s`](https://ruby-doc.org/core-2.7.1/Array.html#method-i-to_s)?\n\
    <|/ c |>\n<| c |>\nThe [docs](https://ruby-doc.org/core-2.7.1/Array.html#method-i-to_s)\
    \ say \"If no block is given, the elements themselves are returned.\". The problem\
    \ is probably that `grades.map` returns an array of the grades instead of a string.\n\
    <|/ c |>\n<| c |>\nYou want `grades.map { |grade| letter_grade_from_gpa }`.\n\
    <|/ c |>\n<| c |>\nThe teacher has given you a list of GPAs for some students\
    \ and you have to write a function that can output a list of letter grades using\
    \ the following table:\nGPA          |    Letter grade\n4.0          |    A+\n\
    >3.7          |    A\n>3.3          |    A-\n>3.0          |    B+\n>2.7     \
    \     |    B\n>2.3          |    B-\n>2.0          |    C+\n>1.7          |  \
    \  C\n>1.3          |    C-\n>1.0          |    D+\n>0.7          |    D\n>0.0\
    \          |    D-\n0.0          |    E\n<|/ c |>\n<| a tags=ruby |>\nThe teacher\
    \ has given you a list of GPAs for some students and you have to write a function\
    \ that can output a list of letter grades using the following table:\nGP", " \
    \ # Your code here\n  return letter_grade\nend\n</code>\n<|/ a dscore=0 |>\n<|\
    \ c |>\nThanks so much! I will try this!\n<|/ c |>\n<| a tags=ruby |>\n<code>",
  "  grades.sort!\n  grades.each_with_index do |grade, index|\n    grade = grade.to_f\n\
    \    grade > 0 ? \"#{grade}+\" : \"#{grade}\"\n  end\nend", "  grades.sort()\n\
    \  grades = grades[1..-1] # Remove first and last elements\n  grades.uniq! # remove\
    \ duplicate grades\n  grades.each do |grade|\n    case grade\n    when 0..1 then\
    \ grade = \"0.0\"\n    when 1..4 then grade = ('A'..'D').to_a.sample.to_s\n  \
    \  when 5..8 then grade = ('B'..'C').to_a.sample.to_s\n    when 9..10 then grade\
    \ = ('A'..'C').to_a.sample.to_s\n    else grade = ('A'..'C').to_a.sample.to_s\n\
    \    end\n  end\n  grades\nend", "  # TODO: Write your code here.\n  return grades\n\
    end\n</code>\n<|/ q |>\n<| c |>\nI wonder if the problem has anything to do with\
    \ the fact that `grades` should be an array. `println` says it's an array (because\
    \ of the square brackets), but I don't see how that would affect anything else.\n\
    <|/ c |>\n<| c |>\nI agree with, and would like to add: your `numerical_letter_grade`\
    \ function returns an array with the letter grades of each element of `grades`\
    \ -- but the return statement ends with `end`. It should probably be `end.join`.\n\
    <|/ c |>\n<| c |>\nI don't see that this is your actual code, because your function\
    \ doesn't have a return statement at all. You've got a bunch of print statements\
    \ inside the function which also won't work, and you're trying to call that function\
    \ without assigning it to anything. Have you defined a function yet? If not, your\
    \ function is going to be a syntax error. I'm also pretty sure your indentation\
    \ is all wrong, but I'm not sure how that happened.\n<|/ c |>\n<| a dscore=0 tags=ruby,arrays,methods,loops\
    \ |>\nI suggest you to split your problem into small parts. Let's start with a\
    \ simple function like this one:\n<code>", "  grades.map {|n| n}.sort.each_cons(2).map\
    \ {|x,y| x.to_i==y.to_i ? \"A+\" :\n    x.to_i==1 ? x.to_s + \"A\" :\n    x.to_i==2\
    \ ? x.to_s + \"A-\" :\n    y.to_i==1 ? y.to_s + \"B+\" :\n    y.to_i==2 ? y.to_s\
    \ + \"B\" :\n    y.to_i==3 ? y.to_s + \"B-\" :\n    y.to_i==4 ? y.to_s + \"C+\"\
    \ :\n    y.to_i==5 ? y.to_s + \"C\" :\n    y.to_i==6 ? y.to_s + \"C-\" :\n   \
    \ y.to_i==7 ? y.to_s + \"D+\" :\n    y.to_i==8 ? y.to_s + \"D\" :\n    y.to_i==9\
    \ ? y.to_s + \"D-\" :\n    y.to_i==0 ? \"D\" : nil }.compact\nend", "  grades.sort_by\
    \ { |x| x.to_f }.reverse.map { |g| grades[g] }\nend", "  grades.each { |grade|\
    \ \n    if grade >= 4.0\n      puts \"A+\"\n    elsif grade >= 3.7\n      puts\
    \ \"A\"\n    elsif grade >= 3.3\n      puts \"A-\"\n    elsif grade >= 3.0\n \
    \     puts \"B+\"\n    elsif grade >= 2.7\n      puts \"B\"\n    elsif grade >=\
    \ 2.3\n      puts \"B-\"\n    elsif grade >= 2.0\n      puts \"C+\"\n    elsif\
    \ grade >= 1.7\n      puts \"C\"\n    elsif grade >= 1.3\n      puts \"C-\"\n\
    \    elsif grade >= 1.0\n      puts \"D+\"\n    elsif grade >= 0.7\n      puts\
    \ \"D\"\n    elsif grade >= 0.0\n      puts \"D-\"\n    else\n      puts \"E\"\
    \n    end\n  }\nend\n</code>\n<|/ a |>\n<| c |>\nThanks for your reply, but I\
    \ can't seem to get your code to work? I have updated my code in the original\
    \ post with the updated function but I am not getting the correct output?\n<|/\
    \ c |>\n<| c |>\nI updated my answer so that it works. Hope it helps.\n<|/ c |>\n\
    <| a dscore=0 |>\nThis question is too broad, but this may help get you started.\n\
    <code>", "  # Your code goes here\nend\n</pre>\n<p>Think about how you might write\
    \ a similar method using loops.</p>\n<p><em>Remember</em> that <code>letter</code>\
    \ is a method so you can call it like any other method. For example, you can do\
    \ this:</p>\n<pre>\ngrades = [4.0, 3, 1.7, 2, 3.5]\ngrades.each { |grade| puts\
    \ numerical_letter_grade(grade) }\n</pre>\n<p>To get you started, here's a sample\
    \ implementation of <code>grade_equation</code>:</p>\n<pre>", "  # TODO: write\
    \ your function\nend\n</cell>\n<cell>", '    # Solution code here', "  # TODO:\
    \ return the numerical grade\nend", "  grades.each_with_index do |gpa, index|\n\
    \    gpa_comparison = gpa.to_f - 4.0\n    letter_grade = ('A' + gpa_comparison\
    \ < 3.7).to_s + '+'\n    letter_grade = ('A' + gpa_comparison >= 3.7).to_s + '-'\n\
    \    letter_grade = ('B' + gpa_comparison < 3.3).to_s + '+'\n    letter_grade\
    \ = ('B' + gpa_comparison >= 3.3).to_s + '-'\n    letter_grade = ('C' + gpa_comparison\
    \ < 3.0).to_s + '+'\n    letter_grade = ('C' + gpa_comparison >= 3.0).to_s + '-'\n\
    \    letter_grade = ('D' + gpa_comparison < 2.7).to_s + '+'\n    letter_grade\
    \ = ('D' + gpa_comparison >= 2.7).to_s + '-'\n    letter_grade = ('E').to_s +\
    \ '-'\n    letter_grade = letter_grade.gsub('+', '-')\n    grades[index] = letter_grade\n\
    \  end\n  return grades\nend\nputs \"\\nThe GPAs are: \" + students_gpa.to_s.chomp\
    \ + \"\\n\"\ngrades = numerical_letter_grade(students_gpa)\nputs \"\\nThe letter\
    \ grades are: \" + grades.to_s.chomp + \"\\n\"\n</code>\n<|/ a |>\n<| c |>\nHey,\
    \ thanks! I never thought about using if statements. But I feel like this is way\
    \ too complicated for what I need to do. I just have to compare the average of\
    \ the grades and output the letter grade. I'm going to play around with your code\
    \ a little bit. Thanks again!\n<|/ c |>\n<| a dscore=0 |>\nThis is an example\
    \ using if statements (not very elegant though).\n<code>", "  grades.reverse\n\
    \  grades.each_with_index do |g,i|\n    grade = i - 1\n    grades.reverse!\n \
    \   grades.reverse!\n    grades.reverse!\n    grades.reverse!\n  end\n  grades.reverse!\n\
    \  grades.reverse!\n  grades.reverse!\n  grades.reverse!\n  grades.reverse!\n\
    \  grades.reverse!\n  grades.reverse!\n  grades.reverse!\n  grades.reverse!\n\
    \  grades.reverse!\n  grades.reverse!\n  grades.reverse!\n  grades.reverse!\n\
    \  grades.reverse!\n  grades.reverse!\n  grades.reverse!\n  grades.reverse!\n\
    \  grades.reverse!\n  grades.reverse!\n  grades.reverse!\n  grades.reverse!\n\
    \  grades.reverse!\n  grades.reverse!\n  grades.reverse!\n  grades.reverse!\n\
    \  grades.reverse!\n  grades.reverse!\n  grades.reverse!\n  grades.reverse!\n\
    \  grades.reverse!\n  grades.reverse!\n  grades.reverse!\n  grades.reverse!\n\
    \  grades.reverse!\n  grades.reverse!\n  grades.reverse!\n  grades.reverse!\n\
    \  grades.reverse!\n  grades.reverse!\n  grades.reverse!\n  grades.reverse!\n\
    \  grades.reverse!\n  grades.reverse!\n  grades.reverse!\n  grades.reverse!\n\
    \  grades.reverse!\n  grades.reverse!\n  grades.reverse!\n  grades.reverse!\n\
    \  grades.reverse!\n  grades.reverse!\n  grades.reverse!\n  grades.reverse!\n\
    \  grades.reverse!\n  grades.reverse!\n  grades.reverse!\n  grades.reverse!\n\
    \  grades.reverse!\n  grades.reverse!\n  grades.reverse!\n  grades.reverse!\n\
    \  grades.reverse!\n  grades.reverse!\n  grades.reverse!\n  grades.reverse!\n\
    \  grades.reverse!\n  grades.reverse!\n  grades.reverse!\n  grades.reverse!\n\
    \  grades.reverse!\n  grades.reverse!\n  grades.reverse!\n  grades.reverse!\n\
    \  grades.reverse!\n  grades.reverse!\n  grades.reverse!\n  grades.reverse!\n\
    \  ", "  (0..grades.count).map do |i|\n    grade = grades[i]\n    case grade\n\
    \    when 0 then 'E'\n    when 2.0 then 'D+'\n    when 2.3 then 'D'\n    when\
    \ 2.7 then 'D-'\n    when 3.0 then 'C+'\n    when 3.3 then 'C'\n    when 3.7 then\
    \ 'C-'\n    when 4.0 then 'B+'\n    when 4.3 then 'B'\n    when 4.7 then 'B-'\n\
    \    when > 4.7 then 'B+'\n    when > 4.3 then 'B'\n    when > 4.0 then 'A+'\n\
    \    when > 3.7 then 'A'\n    when > 3.3 then 'A-'\n    when > 3.0 then 'A-'\n\
    \    else raise \"Invalid grade: #{grade}\"\n    end\n  end.join(',')\nend", " \
    \ grades = grades.sort\n  grades.shift\n  letters = []\n  last_gpa =  grades[0]\n\
    \  last_grade = ''\n  while grades.any?\n    gpa = grades.shift\n    grade = last_grade\
    \ if gpa==last_gpa else 'C'\n    letters.unshift(grade)\n    if gpa > last_gpa\n\
    \      letters.unshift ('A+')\n      last_grade = grade\n    else\n      letters.unshift\
    \ (grade)\n    end\n    last_gpa = gpa\n  end\n  letters.unshift(last_grade) if\
    \ last_gpa > 0.0\n  letters\nend\n</code>\n<|/ q dscore=0 |>\n<| c |>\nWhat about\
    \ you try it yourself? It's not that complicated code, and you should be able\
    \ to write a working solution.\n<|/ c |>\n<| a tags=arrays,ruby |>\n<code>", " \
    \ result = []\n  for i in grades\n    if i > 3.0 && i <= 2.7\n      result.push('A+')\n\
    \    elsif i > 2.7 && i <= 2.3\n      result.push('A')\n    elsif i > 2.3 && i\
    \ <= 2.0\n      result.push('A-')\n    elsif i > 2.0 && i <= 1.7\n      result.push('B+')\n\
    \    elsif i > 1.7 && i <= 1.3\n      result.push('B')\n    elsif i > 1.3 && i\
    \ <= 1.0\n      result.push('B-')\n    elsif i > 1.0 && i <= 0.7\n      result.push('C+')\n\
    \    elsif i > 0.7 && i <= 0.3\n      result.push('C')\n    elsif i > 0.3 && i\
    \ <= 0.0\n      result.push('C-')\n    elsif i == 0.0\n      result.push('E')\n\
    \    end\n  end\n  result\nend", "  # Your code here\nend\n</cell>\n<text>\nQ3:\
    \ Write a function that takes a list of GPAs as input and returns a list of letter\
    \ grades using the following table:\nGPA       |    Letter grade\n4.0        \
    \        A+\n> 3.7                A \n> 3.3                A- \n> 3.0        \
    \        B+\n> 2.7                B \n> 2.3                B-\n> 2.0         \
    \       C+\n> 1.7                C\n> 1.3                C-\n> 1.0           \
    \     D+ \n> 0.7                D \n> 0.0                D-\n0.0             \
    \   E\nExample:\ngrade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C',\
    \ 'A-']\nHint: You can use the map function.", '  letter_grades = []', "  result\
    \ = []\n  grades.each do |grade|\n    grade = grade.to_f\n    result.push(GPA_LETTERS[grade]\
    \ ||= \"E\") if grade > 0.0\n  end\n  return result\nend\n</code>\n<|/ a dscore=0\
    \ |>\n<| c |>\nHow should I convert this into ruby class?\n<|/ c |>\n<| c |>\n\
    It does not work when I convert it to a ruby class. I converted it to ruby class\
    \ like that:", "  letter_grades = []\n  gpa = grades.first # 4.0 => 4.0\n  gpa_score\
    \ = grades.last # 3.5 => 3.5\n  gpa_score += 1.0 # 3.5 => 4.0\n  gpa_score -=\
    \ 2.0 # 3.5 => 3.4\n  gpa_score += 2.0 # 3.5 => 3.3\n  gpa_score -= 3.0 # 3.5\
    \ => 2.7\n  gpa_score += 3.0 # 3.5 => 2.3\n  gpa_score -= 3.7 # 3.5 => 2.0\n \
    \ gpa_score += 3.7 # 3.5 => 1.7\n  gpa_score -= 4.0 # 3.5 => 1.0\n  gpa_score\
    \ += 4.0 # 3.5 => 0.7\n  gpa_score -= 5.0 # 3.5 => 0.6\n  gpa_score += 5.0 # 3.5\
    \ => 0.5\n  gpa_score -= 6.0 # 3.5 => 0.4\n  gpa_score += 6.0 # 3.5 => 0.3\n \
    \ gpa_score -= 7.0 # 3.5 => 0.2\n  gpa_score += 7.0 # 3.5 => 0.1\n  gpa_score\
    \ -= 8.0 # 3.5 => 0.0\n  gpa_score += 8.0 # 3.5 => 0.0\n  gpa_score -= 9.0 # 3.5\
    \ => -0.0\n  gpa_score += 9.0 # 3.5 => -0.0\n  gpa_score -= 9.8 # 3.5 => -0.1\n\
    \  gpa_score += 9.8 # 3.5 => -0.1\n  gpa_score -= 10.0 # 3.5 => -0.2\n  gpa_score\
    \ += 10.0 # 3.5 => -0.2\n  gpa_score -= 10.0 # 3.5 => -0.3\n  gpa_score += 10.0\
    \ # 3.5 => -0.3\n  gpa_score -= 10.0 # 3.5 => -0.4\n  gpa_score += 10.0 # 3.5\
    \ => -0.4\n  gpa_score -= 10.0 # 3.5 => -0.5\n  gpa_score += 10.0 # 3.5 => -0.5\n\
    \  gpa_score -= 10.0 # 3.5 => -0.6\n  gpa_score += 10.0 # 3.5 => -0.6\n  gpa_score\
    \ -= 10.0 # 3.5 => -0.7\n  gpa_score += 10.0 # 3.5 => -0.7\n  gpa_score -= 10.0\
    \ # 3.5 => -0.8\n  gpa_score += 10.0 # 3.5 => -0.8\n  gpa_score -= 10.0 # 3.5\
    \ => ", "  grades.sort!\n  grades.reverse!\n  \n  # First step is to find which\
    \ grade is higher\n  # We will use this to sort grades in reverse order\n  higher_grade\
    \ = grades.max", "  grades.sort! # Sort the array in ascending order\n  grades.reverse!\
    \ # Reverse the order for descending grades\n  grades.shift # Shift the first\
    \ value to the end\n  grades.uniq! # Get rid of duplicates\n  grades.each do |grade|\n\
    \    if grade >= 4.0\n      grade = 'A+'\n    elsif grade >= 3.7\n      grade\
    \ = 'A'\n    elsif grade >= 3.3\n      grade = 'A-'\n    elsif grade >= 3.0\n\
    \      grade = 'B+'\n    elsif grade >= 2.7\n      grade = 'B'\n    elsif grade\
    \ >= 2.3\n      grade = 'B-'\n    elsif grade >= 2.0\n      grade = 'C+'\n   \
    \ elsif grade >= 1.7\n      grade = 'C'\n    elsif grade >= 1.3\n      grade =\
    \ 'C-'\n    elsif grade >= 1.0\n      grade = 'D+'\n    elsif grade >= 0.7\n \
    \     grade = 'D'\n    elsif grade >= 0.0\n      grade = 'D-'\n    elsif grade\
    \ == 0.0\n      grade = 'E'\n    else\n      puts \"Invalid GPA: #{grade}\"\n\
    \    end\n  end\n  return grades\nend\n</code>\n<|/ a tags=ruby,arrays |>\n<|\
    \ c |>\nWhile this answer is probably correct and useful, it is preferred if you\
    \ include some explanation along with it to explain how it helps to solve the\
    \ problem. This becomes especially useful in the future, if there is a change\
    \ (possibly unrelated) that causes it to stop working and users need to understand\
    \ how it once worked.\n<|/ c |>\n<| c |>\nPlease explain what is the purpose of\
    \ the `shift` call. I'm sure there are more concise ways to achieve the desired\
    \ result.\n<|/ c |>\n<| c |>\n`shift` removes the first element from the array,\
    \ and returns the removed value. So it shifts the first element from the array\
    \ to the end.\n<|/ c |>\n<| a |>\nThis was fun to write, but here's a more readable\
    \ version\n<code>", "  grades.map!{ |x| if x < 3.7\n                 'A+'\n  \
    \             elsif x > 3.7 && x < 3.3\n                 'A'\n               elsif\
    \ x > 3.3 && x < 3.0\n                 'A-'\n               elsif x > 3.0 && x\
    \ < 2.7\n                 'B+'\n               elsif x > 2.7 && x < 2.3\n    \
    \             'B'\n               elsif x > 2.3 && x < 2.0\n                 'B-'\n\
    \               elsif x > 2.0 && x < 1.7\n                 'C+'\n            \
    \   elsif x > 1.7 && x < 1.3\n                 'C'\n               elsif x > 1.3\
    \ && x < 1.0\n                 'C-'\n               elsif x > 1.0 && x < 0.7\n\
    \                 'D+'\n               elsif x > 0.7 && x < 0.0\n            \
    \     'D'\n               else\n                 'D-'\n               end\n  \
    \           end\n  grades.map!{ |x| x.to_s\n             end\n  grades.map!{ |x|\
    \ x.chop.to_s\n             end\n  grades.map!{ |x| x.reverse.to_s\n         \
    \    end\n  grades.map!{ |x| x.upcase\n             end\n  grades\nend\n</cell>\n\
    <cell>", "  grades, final_grades = grades.sort_by!{|x| x}\n  final_grades.reverse.collect{|x|\
    \ x > 0.7 ? 'A+' : (x > 0.3 ? 'A-' : (x > 0.1 ? 'B+': (x > 0 ? 'B': (x > -0.7\
    \ ? 'B-' : (x > -0.3 ? 'C+': (x > -0.1 ? 'C': (x > 0 ? 'C-' : (x > -0.7 ? 'D+'\
    \ : (x > -0.3 ? 'D': (x > -0.1 ? 'D-' : (x > 0 ? 'E': 'F'))))))))))\nend", " \
    \   # your code here\n    grades = grades.sort!\n    grades = grades.reverse!\n\
    \    grades.each do |g|\n       if g < 3.3 || g > 3.0\n          grades.delete(g)\n\
    \       end\n    end\n    grades = grades.sort!.reverse!\n    grades = grades.uniq!\n\
    \    return grades.join('')\nend", "  grades = [float(x) for grade in grades for\
    \ x in grade]\n  letterGrade = [\"E\"] * len(grades)", "  grades.sort!\n  grades.reverse!\n\
    \  grades.each do |grade|\n    grade = grade.to_f\n    if grade < 3.5\n      grade\
    \ = \"D-\"\n    elsif grade < 3.1\n      grade = \"C-\"\n    elsif grade < 3\n\
    \      grade = \"B-\"\n    elsif grade < 2.7\n      grade = \"B-\"\n    elsif\
    \ grade < 2.3\n      grade = \"B+\"\n    elsif grade < 2.0\n      grade = \"B\"\
    \n    elsif grade < 1.7\n      grade = \"A-\"\n    elsif grade < 1.3\n      grade\
    \ = \"A-\"\n    elsif grade < 1.0\n      grade = \"A+\"\n    elsif grade < 0.7\n\
    \      grade = \"A\"\n    elsif grade < 0.0\n      grade = \"E\"\n    else\n \
    \     grade = \"A+\"\n    end\n    grade\n  end\nend", "  grades.reverse\n  grades.each\
    \ do |grade|\n    grade = (grade * 10).round\n    index = grade / 10\n    index\
    \ = index - 1\n    if index > 0\n      letter_grade = ('A' + index*10).downcase\n\
    \    elsif index == 0\n      letter_grade = 'A'\n    elsif index < 0\n      letter_grade\
    \ = 'D-' + index*10\n    else\n      letter_grade = 'D'\n    end\n    grades.delete(grade)\n\
    \    grades.push(letter_grade)\n  end\n  grades.reverse\nend\n</code>\n<|/ a tags=ruby,arrays\
    \ |>\n<| c |>\nThis doesn't work. It just gives me the wrong result. The grade\
    \ formula is wrong, but this doesn't fix it.\n<|/ c |>\n<| c |>\nI'm sorry it\
    \ didn't fix it. It doesn't give me the correct result. Perhaps I am missing something.\n\
    <|/ c |>\n<| c |>\nAre you saying that the grade formula isn't right? If so, I'd\
    \ say that you should consider changing it.  Or are you saying that the code doesn't\
    \ work at all?\n<|/ c |>\n<| c |>\nI meant that your code doesn't fix the wrong\
    \ grade formula as you wrote it. I don't know why but it doesn't work. I'm sure\
    \ it is something stupid, but it just doesn't work.\n<|/ c |>\n<| c |>\nI've edited\
    \ my original answer to include a working example. Let me know if this works for\
    \ you. Thanks!\n<|/ c |>\n<| a |>\nI guess I would use a hash for the letter grade\
    \ conversion:\n<code>", "\tgrades.sort()\n\tgrades.reverse()", "\tgrades_converted\
    \ = []\n\tfor i in grades\n\t\tgrades_converted.push(i*1.0);\n\t\tgrades_converted.push(i*1.3);\n\
    \t\tgrades_converted.push(i*1.7);\n\t\tgrades_converted.push(i*2.0);\n\t\tgrades_converted.push(i*2.3);\n\
    \t\tgrades_converted.push(i*2.7);\n\t\tgrades_converted.push(i*3.0);\n\t\tgrades_converted.push(i*3.3);\n\
    \t\tgrades_converted.push(i*3.7);\n\t\tgrades_converted.push(i*4.0);\n\t\tgrades_converted.push(i*4.3);\n\
    \t\tgrades_converted.push(i*4.7);\n\t\tgrades_converted.push(i*5.0);\n\tend\n\t\
    grades_converted.push(0.0)\n\tgrades_converted.push(3.0)\n\tgrades_converted.push(4.0)\n\
    \tgrades_converted.push(5.0)\n\tgrades_converted.push(6.0)\n\tgrades_converted.push(7.0)\n\
    \tgrades_converted.push(8.0)\n\tgrades_converted.push(9.0)\n\tgrades_converted.push(10.0)\n\
    \tgrades_converted.push(11.0)\n\tgrades_converted.push(12.0)\n\tgrades_converted.push(13.0)\n\
    \tgrades_converted.push(14.0)\n\tgrades_converted.push(15.0)\n\tgrades_converted.push(16.0)\n\
    \tgrades_converted.push(17.0)\n\tgrades_converted.push(18.0)\n\tgrades_converted.push(19.0)\n\
    \tgrades_converted.push(20.0)\n\tgrades_converted.push(21.0)\n\tgrades_converted.push(22.0)\n\
    \tgrades_converted.push(23.0)\n\tgrades_converted.push(24.0)\n\tgrades_converted.push(25.0)\n\
    \tgrades_converted.push(26.0)\n\tgrades_converted.push(27.0)\n\tgrades_converted.push(28.0)\n\
    \tgrades_converted.push(29.0)\n\tgrades_converted.push(30.0)\n\tgrades_converted.push(31.0)\n\
    \tgrades_converted.push(32.0)\n\tgrades_converted.push(33.0)\n\tgrades_converted.push(34.0)\n\
    \tgrades_converted.push(35.0)\n\tgrades_converted.push(36.0)\n\tgrades_converted.push(37.0)\n\
    \tgrades_converted.push(38.0)\n\tgrades_converted.push(39.0)\n\tgrades_converted.push(40.0)\n\
    \tgrade", "    grades = grade_equations(grades)\n    grades = grades.sort_by!{|i|\
    \ i}\n    grades.reverse!\n    grades.inject([]){|res,g|\n        l = g[0].to_s\n\
    \        l1 = g[1].to_s\n        l2 = g[2].to_s\n        l3 = g[3].to_s\n    \
    \    l4 = g[4].to_s\n        res << %Q{[\"#{l}+\", \"#{l1}-\", \"#{l2}+\", \"\
    #{l3}\", \"#{l4}-\"]}.join(' ')\n    }\nend", "  grades.uniq.sort.each_with_index\
    \ do |grade, index|\n    next if grade == 0\n    grade, index = grade, index\n\
    \    grade >= 2.0 ? 'A+' : (grade >= 1.7 ? 'A' : (grade >= 1.3 ? 'A-' : \n   \
    \            (grade >= 1.0 ? 'B+' : grade >= 0.7 ? 'B' : grade >= 0.3 ? 'B-' :\
    \ (grade >= 0.1 ? 'C+' : \n               grade >= 0.1 ? 'C' : grade >= 0.0 ?\
    \ 'C-' : grade >= 0.0 ? 'E' : \n               '0')))\n  end\nend\n</code>\n<|/\
    \ a tags=ruby dscore=1 |>\n<| a tags=ruby |>\nMy solution in Ruby. I find this\
    \ solution to be the most readable but I'm sure it can be done in less lines.\n\
    <code>", "  grades.map {|g| g >= 3.0 ? \"A+\" : g >= 2.7 ? \"B\" : g >= 2.3 ?\
    \ \"B\" : g >= 2.0 ? \"C\" : g >= 1.7 ? \"C\" : g >= 1.3 ? \"C\" : g >= 1.0 ?\
    \ \"D+\" : g >= 0.7 ? \"D\" : g >= 0.3 ? \"D\" : g >= 0.0 ? \"D-\" : g >= 0.0\
    \ ? \"E\" : g > 0 ? \"F\" : g > 0.0 ? \"F-\" : nil}.compact\nend", "  # Your code\
    \ goes here\nend\n</cell>\n<cell>", "  grades.inject([]) do |list, number|\n \
    \   grade = number.to_s.rjust(2)\n    if grade.to_i > 0\n      list << [\"A+\"\
    , \"A \", \"A-\", \"B+\", \"B \", \"B-\", \"C+\", \"C \", \"C-\", \"D+\", \"D\
    \ \", \"D-\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\", \"K\", \"L\", \"M\", \"\
    N\", \"O\", \"P\", \"Q\", \"R\", \"S\", \"T\", \"U\", \"V\", \"W\", \"X\", \"\
    Y\", \"Z\"][grade.to_i - 1]\n    elsif grade.to_i < 0\n      list << [\"E\", \"\
    F\", \"G\", \"H\", \"I\", \"J\", \"K\", \"L\", \"M\", \"N\", \"O\", \"P\", \"\
    Q\", \"R\", \"S\", \"T\", \"U\", \"V\", \"W\", \"X\", \"Y\", \"Z\"][grade.to_i]\
    \ + \".\"\n    elsif grade.to_i == 0\n      list << \"E.\"\n    end\n  end\nend\n\
    </code>\n<|/ a dscore=0 tags=ruby,arrays,string |>\n<| c |>\nWhile this code may\
    \ answer the question, providing additional context regarding why and/or how this\
    \ code answers the question improves its long-term value.\n<|/ c |>\n<| c |>\n\
    Can you please explain your answer in more detail? Why does the block given to\
    \ `inject` have a `[]` after it? Why does `grades.inject` not have a `[]` after\
    \ it?\n<|/ c |>\n<| a tags=ruby,arrays,string |>\nThe accepted answer has so many\
    \ nested if/else statements and is just too long.  Here's a much more readable\
    \ version:\n<code>", "    grades = map(float, grades)\n    gpas = map(float, grades)\n\
    \    letter_grades = []\n    count = 0\n    while count < len(grades):\n     \
    \   temp = grades[count]\n        if temp < gpas[count]:\n            letter_grades.append('D-')\n\
    \        elif temp > gpas[count]:\n            letter_grades.append('D+')\n  \
    \      else:\n            if temp == gpas[count]:\n                if temp < 3:\n\
    \                    letter_grades.append('C+')\n                elif temp < 5:\n\
    \                    letter_grades.append('C')\n                elif temp < 7:\n\
    \                    letter_grades.append('B-')\n                else:\n     \
    \               letter_grades.append('B')\n            else:\n               \
    \ if temp < 3:\n                    letter_grades.append('B-')\n             \
    \   elif temp < 5:\n                    letter_grades.append('B')\n          \
    \      elif temp < 7:\n                    letter_grades.append('A+')\n      \
    \          else:\n                    letter_grades.append('A')\n        count\
    \ += 1\n    return letter_grades", "  grades.inject([]) do |grades, grade|\n \
    \   if grade >= 4.0\n      grades << \"A+\"\n    elsif grade > 3.7\n      grades\
    \ << \"A\"\n    elsif grade > 3.3\n      grades << \"A-\"\n    elsif grade > 3.0\n\
    \      grades << \"B+\"\n    elsif grade > 2.7\n      grades << \"B\"\n    elsif\
    \ grade > 2.3\n      grades << \"B-\"\n    elsif grade > 2.0\n      grades <<\
    \ \"C+\"\n    elsif grade > 1.7\n      grades << \"C\"\n    elsif grade > 1.3\n\
    \      grades << \"C-\"\n    elsif grade > 1.0\n      grades << \"D+\"\n    elsif\
    \ grade > 0.7\n      grades << \"D\"\n    elsif grade > 0.0\n      grades << \"\
    D-\"\n    else\n      grades << \"E\"\n    end\n  end\nend", "    # write your\
    \ code here\n    grades.each do |grade|\n        puts \"#{grade}\"\n    end\n\
    end\n</code>\nNow that we have the function we need, all we have to do is call\
    \ it.\n<code>\ngrades_equation([4.0, 3, 1.7, 2, 3.5])\n</code>\n<|/ a dscore=1\
    \ |>\n<| c |>\nYou don't need an array. Just a loop with `<` and `>`\n<|/ c |>\n\
    <| c |>\n`[...]` makes an array of grades and then passes it to `grade_equation`.\
    \ It's basically just doing the exact same thing. I was trying to show a more\
    \ direct method.\n<|/ c |>\n<| c |>\nYes, but the OP didn't ask how to get the\
    \ letters instead of numbers. Also, your code doesn't return an array.\n<|/ c\
    \ |>\n<| c |>\nThe asker says \"the grade equation is: A+ if GPA > 3.0 and A-\
    \ if GPA <= 3.0 (like in the example). So if GPA is between 3.0 and 3.6 it needs\
    \ to be A - if GPA is between 3.7 and 3.9 it needs to be B and so on\". That is\
    \ exactly what this does. If you want it to return an array then it can be easily\
    \ modified.\n<|/ c |>\n<| c |>\nI missed the part where you said the teacher has\
    \ given you the code. Sorry. Yes, this would be the simplest solution. My only\
    \ suggestion would be to break out the printing part into a separate function\
    \ so you only have to call it once.\n<|/ c |>\n<| a tags=ruby,arrays |>\nThis\
    \ should do the trick:\n<code>", "  grades.inject([]) { |memo, grade| memo <<\
    \ grade_letter if grade_gpa(grade) <= 3.3 }\nend\n</code>\n<|/ a dscore=3 |>\n\
    <| c |>\nI like this solution as it solves the problem without having to modify\
    \ too much of the original code, but I don't understand how it works. Can you\
    \ explain a little how it works? I understand the first part, but I don't understand\
    \ how it works and what the hash tables look like.\n<|/ c |>\n<| c |>\nA hash\
    \ table is a data structure that consists of two parts: a hashtable and the hash\
    \ function, which turns keys into keys. The hash function is designed to produce\
    \ a unique number for every key, which is then stored in the hashtable. A hash\
    \ table is built using the `[]` method, which creates a new empty hashtable and\
    \ calls a method on that hashtable (`inject`) with an anonymous function. That\
    \ method takes the accumulator that was passed in as a parameter and uses it to\
    \ build the new accumulator by calling the passed block and adding the new value\
    \ to the accumulator. I'll add some more explanation.\n<|/ c |>\n<| a dscore=2\
    \ |>\nI'd be inclined to use each_cons(2) to divide up the list into pairs.  That\
    \ gives you two elements that you can feed into a simple case statement to produce\
    \ your grading function.  So I'd write the code something like this:\n<code>",
  "    grades_sum = 0.0\n    for grade in grades\n        grades_sum += grade\n  \
    \  end\n    if grades_sum > 4.0\n        grades_sum -= 4.0\n    elsif grades_sum\
    \ > 3.0\n        grades_sum -= 3.0\n    elsif grades_sum > 2.0\n        grades_sum\
    \ -= 2.0\n    elsif grades_sum > 1.7\n        grades_sum -= 1.7\n    elsif grades_sum\
    \ > 1.0\n        grades_sum -= 1.0\n    end\n    grades_sum -= 0.0\n    grades_sum\
    \ /= 4.0\n    grades_sum.floor\nend\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThe\
    \ teacher has also given me the list of students and their GPAs, and I need to\
    \ output a list of letter grades using the grades table given above. Not sure\
    \ how to adapt your function to use this table\n<|/ c |>\n<| a dscore=2 |>\n<code>",
  "  grades.each do |gpa|\n    grade = gpa > 4.0 ? \"A+\" : (gpa > 3.7 ? \"A\" : (gpa\
    \ > 3.3 ? \"A- \" : (gpa > 3.0 ? \"B+\" : (gpa > 2.7 ? \"B\" : gpa > 2.3 ? \"\
    B-\" : (gpa > 2.0 ? \"C+\" : \"C\") : (gpa > 1.7 ? \"C\" : (gpa > 1.3 ? \"C-\"\
    \ : (gpa > 1.0 ? \"D+\" : (gpa > 0.7 ? \"D\" : \"D-\")))))\n  end\nend", "  grades.each\
    \ do |grade|\n    if grade < 4\n      letter_grade = 'A+'\n    elsif grade > 4.0\
    \ && grade < 4.7\n      letter_grade = 'A'\n    elsif grade > 3.7 && grade < 4.3\n\
    \      letter_grade = 'A-'\n    elsif grade > 3.3 && grade < 3\n      letter_grade\
    \ = 'B+'\n    elsif grade > 2.7 && grade < 2.3\n      letter_grade = 'B'\n   \
    \ elsif grade > 2.3 && grade < 2\n      letter_grade = 'B-'\n    elsif grade >\
    \ 2 && grade < 1.7\n      letter_grade = 'C+'\n    elsif grade > 1.7 && grade\
    \ < 1.3\n      letter_grade = 'C'\n    elsif grade > 1.3 && grade < 1\n      letter_grade\
    \ = 'C-'\n    elsif grade < 1\n      letter_grade = 'D+'\n    elsif grade < 0.7\n\
    \      letter_grade = 'D'\n    else\n      letter_grade = 'D-'\n    end\n  end\n\
    \  return letter_grade\nend\n</code>\nI hope this helps you understand the question\
    \ better. If there is still any confusion I will gladly answer it for you.\n<|/\
    \ a dscore=0 |>\n<| c |>\nThank you for trying to help.  I did try your solution\
    \ but unfortunately it just threw me an 'undefined method <' for #<Array:0x007f9cbc02dac0>\
    \ error.  I looked over my code many times and I still can't figure out where\
    \ I'm going wrong.  I may need to take an additional look at my code as I can't\
    \ seem to find any logical errors.\n<|/ c |>\n<| c |>\nCan you please post the\
    \ entire error message?\n<|/ c |>\n<| c |>\nSorry, this is my first post.  I'll\
    \ post it in a moment with more information.\n<|/ c |>\n<| c |>\nSorry, this is\
    \ the full error message.\n<|/ c |>\n<| c |>\nThank you for posting the whole\
    \ error message with its stacktrace. Could you also post the entire `grade_equation`\
    \ function? I'm wondering if you maybe changed something in that function since\
    \ you posted your question.\n<|/ c |>\n<| a tags=arrays,ruby |>\nThis was one\
    \ of my projects when I started Ruby last week. You could have a look at it and\
    \ see if it ", "  grades = grade_equations(grades)\n  letter_grades = []\n  total_sum\
    \ = 0.0 # this is the sum of all grades added together\n  for grade in grades\n\
    \  total_sum += grade\n  if total_sum >= 4.0\n    letter_grades.push('A+')\n \
    \ elsif total_sum >= 3.6\n    letter_grades.push('A')\n  elsif total_sum >= 3.2\n\
    \    letter_grades.push('A-')\n  elsif total_sum >= 3.0\n    letter_grades.push('B+')\n\
    \  elsif total_sum >= 2.6\n    letter_grades.push('B')\n  elsif total_sum >= 2.2\n\
    \    letter_grades.push('B-')\n  elsif total_sum >= 2.0\n    letter_grades.push('C+')\n\
    \  elsif total_sum >= 1.7\n    letter_grades.push('C')\n  elsif total_sum >= 1.3\n\
    \    letter_grades.push('C-')\n  elsif total_sum >= 1.0\n    letter_grades.push('D+')\n\
    \  elsif total_sum >= 0.7\n    letter_grades.push('D')\n  elsif total_sum >= 0.0\n\
    \    letter_grades.push('D-')\n  else\n    letter_grades.push('E')\n  end\n  return\
    \ letter_grades\nend\n</code>\n<|/ a |>\n<| c |>\nThe question says that it must\
    \ be an `else` clause, and not an `end` clause :)\n<|/ c |>\n<| c |>\nHaha, I\
    \ was about to post this exact same answer, and while I was writing this, I noticed\
    \ that the `else` clause is actually inside the `if` clause for 3.2\n<|/ c |>\n\
    <| c |>\noh, wow, that's embarrassing\n<|/ c |>\n<| a dscore=0 tags=ruby |>\n\
    Here's a more concise solution.\n<code>", "  grades\nend\n</code>\n<|/ a |>\n\
    <| c |>\n`grades` is already an array, no need to assign it to a different variable.\n\
    <|/ c |>\n<| c |>\nYeah I just added that line for readability. But thanks I will\
    \ edit it out\n<|/ c |>\n<| a tags=ruby,arrays,ruby-on-rails |>\nI guess you could\
    \ try this code:\n<code>", "    grades = grades[0...-1]\n    gpa = grades.inject{|sum,e|\
    \ sum + e }\n    grades.map {|e| GPA_MAP.find {|k,v| v == gpa}.first }.compact\n\
    end\n</cell>\n<text>\nThe code above is what you will need to complete the following\
    \ questions:", "    letter_grade = ''\n    i = 0\n    while i < grades.count \n\
    \        letter_grade = letter_grade + '+ '+ (grades[i]/(grades[i] + grades[i+1]))*100\
    \ \n        i = i + 2\n    return letter_grade", "  grades_rounded = [round(i,\
    \ 1) for i in grades]\n  return grades_rounded + ['E']\nend", "    grades_as_string\
    \ = grades.join(\",\")\n    result = grades_as_string.gsub(/\\+|\\-|\\s/) do |x|\n\
    \      x.to_i.abs.round\n    end.map {|x| [\"+\", \"A-\", \"B+\", \"B-\", \"C+\"\
    , \"C-\", \"D+\", \"D\", \"D-\", \"E\"].select {|y| y.start_with?(x.to_s)}.first\
    \ }\n    result\nend", "  (0..100).map{|x| 100 * x/grades.length}.reverse.each_with_index{|x,i|\
    \ puts \"#{x}: #{(i+4).chr}\"}\nend\n</code>\n<|/ a tags=ruby |>\n<| a tags=ruby\
    \ dscore=2 |>\nJust for the sake of being more Ruby-ish, here is some code that\
    \ does what you are looking for:\n<code>", "  grades.sort.reverse\n  grades.each_with_index\
    \ do |grade, index|\n    grade >= grades[index - 1] ? 'A+' : grade >= grades[index\
    \ - 2] ? 'A-' : \n      grade >= grades[index - 3] ? 'B+' : grade >= grades[index\
    \ - 4] ? 'B-' : \n      grade >= grades[index - 5] ? 'C+' : grade >= grades[index\
    \ - 6] ? 'C-' : \n      grade >= grades[index - 7] ? 'D+' : grade >= grades[index\
    \ - 8] ? 'D-' : \n      grade >= grades[index - 9] ? 'D' : grade >= grades[index\
    \ - 10] ? 'E' : ''\n  end\nend", "  raise \"Not implemented yet\"\nend", "   \
    \ grades.each do |g|\n        if g >= 4.0\n            result = 'A+'\n       \
    \ elsif g > 3.0 && g < 4.7\n            result = 'A'\n        elsif g > 3.0 &&\
    \ g < 4.3\n            result = 'A-'\n        elsif g > 2.0 && g < 3.7\n     \
    \       result = 'B+'\n        elsif g > 2.0 && g < 3.3\n            result =\
    \ 'B'\n        elsif g > 1.7 && g < 2.0\n            result = 'B-'\n        elsif\
    \ g > 1.3 && g < 1.7\n            result = 'C+'\n        elsif g > 1.0 && g <\
    \ 1.3\n            result = 'C'\n        elsif g > 0.7 && g < 1.0\n          \
    \  result = 'C-'\n        elsif g > 0.0 && g < 0.7\n            result = 'D+'\n\
    \        elsif g > 0.0 && !g < 0.0\n            result = 'D'\n        else\n \
    \           result = 'D-'\n        end\n        puts result\n    end\nend", " \
    \ grades.inject([]) do |grades_sorted, grade|\n    if grade >= 4.0 && grade <=\
    \ 4.7 then\n      grades_sorted << ['A+']\n    elsif grade > 4.7 && grade <= 5\
    \ then\n      grades_sorted << ['A']\n    elsif grade > 4.3 && grade <= 5 then\n\
    \      grades_sorted << ['A+']\n    elsif grade > 4.0 && grade <= 4.3 then\n \
    \     grades_sorted << ['A']\n    elsif grade > 3.7 && grade <= 3.9 then\n   \
    \   grades_sorted << ['A']\n    elsif grade > 3.3 && grade <= 3.7 then\n     \
    \ grades_sorted << ['A']\n    elsif grade > 3.0 && grade <= 3.3 then\n      grades_sorted\
    \ << ['A']\n    elsif grade > 2.7 && grade <= 3.9 then\n      grades_sorted <<\
    \ ['A']\n    elsif grade > 2.3 && grade <= 2.7 then\n      grades_sorted << ['A']\n\
    \    elsif grade > 2.0 && grade <= 2.3 then\n      grades_sorted << ['A']\n  \
    \  elsif grade > 1.7 && grade <= 3.9 then\n      grades_sorted << ['A']\n    elsif\
    \ grade > 1.3 && grade <= 1.7 then\n      grades_sorted << ['A']\n    elsif grade\
    \ > 1.0 then\n      grades_sorted << ['A']\n    elsif grade > 0.7 then\n     \
    \ grades_sorted << ['A']\n    elsif grade > 0.3 then\n      grades_sorted << ['B']\n\
    \    elsif grade > 0.1 then\n      grades_sorted << ['B']\n    elsif grade > 0.0\
    \ then\n      grades_sorted << ['B']\n    elsif grade == 0.0 then\n      grades_sorted\
    \ << ['B']\n    elsif grade < 0.0 then\n      grades_sorted << ['B']\n    end\n\
    \  end\nend\n</code>\n<|/ a dscore=0 tags=ruby |>\n<| c |>\nThank you, you are\
    \ so helpful. I was able to figure it out myself.\n<|/ c |>\n<| a dscore=0 |>\n\
    <code>", "    grades_sorted = sorted(grades)\n    grades_length = len(grades)\n\
    \    \n    grades_index = grades_length - 1\n    \n    letters = \"\"\n    while\
    \ grades_index >= 0:\n        if grades[grades_index] > grades[grades_index +\
    \ 1]:\n            grades_index -= 1\n            letters = letters + \"-\"\n\
    \        else:\n            grades_index -= 1\n            letters = letters +\
    \ \"+\"\n    \n    if grades_index == -1:\n        letters = letters + \"E\"\n\
    \    \n    return letters", "  return grade_equation([g for g in grades])\nend",
  "    grades_length = grades.length\n    grades_sum = 0\n    sum_of_negatives = 0\
    \ \n    for i in grades\n        grades_sum += i\n        if grades_sum < 0\n\
    \            sum_of_negatives += i\n            grades_sum = 0\n        grades_length\
    \ -= 1\n    grades_average = grades_sum / grades_length\n    for i in grades\n\
    \        grades_length -= 1\n    grades_average = (grades_sum / grades_length)\
    \ if (grades_length > 0) else 0\n    if grades_average < -1\n        grades_average\
    \ = -1\n    grades_length = grades.length\n    for i in grades\n        grades_length\
    \ -= 1\n    grades_average = (grades_sum / grades_length) if (grades_length >\
    \ 0) else 0\n    if grades_average > 1\n        grades_average = 1\n    grades_length\
    \ = grades.length\n    grades_average = (grades_sum / grades_length) if (grades_length\
    \ > 0) else 0\n    if grades_average < 1\n        grades_average = 1\n    grades_length\
    \ = grades.length\n    grades_average = (grades_sum / grades_length) if (grades_length\
    \ > 0) else 0\n    if grades_average > 0\n        grades_average = 1\n    for\
    \ i in grades\n        grades_sum += i\n    grades_average = grades_sum / grades_length\n\
    \    if grades_average >= 0\n        return grades\n    else\n        return grades.join('')",
  "    grades.sort { |a, b| b <=> a }\n    letters = []\n    grades.each do |num|\n\
    \        diff = grades.count { |x| x == num }\n        if diff == 1\n        \
    \    letters.unshift \"#{num}\"\n        elsif diff > 1\n            if num >=\
    \ 3.3\n                letters.unshift \"#{num}\"\n            else\n        \
    \        if num >= 2.3\n                    letters.unshift \"#{num}\"\n     \
    \           else\n                    if num >= 1.1\n                        letters.unshift\
    \ \"#{num}\"\n                    else\n                        if num >= 0.7\n\
    \                            letters.unshift \"#{num}\"\n                    \
    \    else\n                            letters.unshift \"#{num}\"\n          \
    \                  letters.unshift \"A\"\n                        end\n      \
    \              end\n                end\n            end\n        else\n     \
    \       letters.unshift \"#{num}\"\n        end\n    end\n    return letters.join(\"\
    -\")\nend\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't work for grades greater\
    \ than 2.3 because it uses the `grades.count { |x| x == num }` method, which compares\
    \ every value in the array against the given value, so it's possible for the count\
    \ to equal more than one.\n<|/ c |>\n<| a |>\nHere's my solution. It's kind of\
    \ \"Pythonic\" using map and reduce:\n<code>", "  # Your code here\nend\n</code>\n\
    Hint: Use an enumerator to iterate over the grades. \nUse a hash table to store\
    \ letters that will give you O(1) lookup time instead of O(n). \nUse a for loop\
    \ to iterate over the elements in the array.\nUse a while loop to iterate over\
    \ the elements in the array until you reach the end of the array.\n<|/ a tags=ruby,algorithm,arrays\
    \ |>\n<| c |>\nI dislike the solution presented here for reasons others have already\
    \ stated. I'd rather see a hash of the letters and values that would make it easier\
    \ to grab the letter grades.\n<|/ c |>\n<| c |>\nI like your solution because\
    \ it is intuitive and easy to understand.  However, I am not familiar with enumerators.\
    \  I read a lot about them, but I am still a little confused.  Can you explain\
    \ what you mean by an enumerator?\n<|/ c |>\n<| c |>\nAn Enumerator is a Ruby\
    \ object. You can think of it as a pointer to a place in memory. It is like a\
    \ pointer to a location in a book where you can find the next page of text and\
    \ get the text for that page. It works like a pointer in other languages. So if\
    \ someone has a book written to let you understand how a book is laid out, an\
    \ Enumerator lets you iterate through its pages. It's a really cool concept. Check\
    \ out [this link](http://apidock.com/ruby/Enumerator) for more info.\n<|/ c |>\n\
    <| c |>\nThis solution still uses O(n^2) space and O(n) time.\n<|/ c |>\n<| a\
    \ dscore=0 tags=ruby,algorithm,arrays |>\nIf you have a large array and you want\
    \ to find average of some elements in it, you can do it like this:\n<code>", " \
    \ grade = grades[grades.index(max(grades))]\n  if grade <= 4.0 then return 'A+'\n\
    \  elsif grade > 4.0 and grade <= 3.7 then return 'A'\n  elsif grade > 3.7 and\
    \ grade <= 3.3 then return 'A-'\n  elsif grade > 3.3 and grade <= 3.0 then return\
    \ 'B+'\n  elsif grade > 3.0 and grade <= 2.7 then return 'B'\n  elsif grade >\
    \ 2.7 and grade <= 2.3 then return 'B-'\n  elsif grade > 2.3 and grade <= 2.0\
    \ then return 'C+'\n  elsif grade > 2.0 and grade <= 1.7 then return 'C'\n  elsif\
    \ grade > 1.7 and grade <= 1.3 then return 'C-'\n  elsif grade > 1.3 and grade\
    \ <= 1.0 then return 'D+'\n  elsif grade > 1.0 and grade <= 0.7 then return 'D'\n\
    \  elsif grade > 0.7 and grade <= 0.0 then return 'D-'\n  else return 'E'\nend\n\
    </cell>\n<cell>", "  grades.map!(&:to_i)\n  grades.sort!\n  grades.uniq!\n  grades.reverse!\n\
    \  grades.uniq!\n  grades.reverse!\n  grades.uniq!\n  grades.reverse!\n  grades.uniq!\n\
    \  grades.reverse!\n  grades.uniq!\n  grades.reverse!\n  grades.uniq!\n  grades.reverse!\n\
    \  grades.uniq!\n  grades.reverse!\n  grades.uniq!\n  grades.reverse!\n  grades.uniq!\n\
    \  grades.reverse!\n  grades.uniq!\n  grades.reverse!\n  grades.uniq!\n  grades.reverse!\n\
    \  grades.uniq!\n  grades.reverse!\n  grades.uniq!\n  grades.reverse!\n  grades.uniq!\n\
    \  grades.reverse!\n  grades.uniq!\n  grades.reverse!\n  grades.uniq!\n  grades.reverse!\n\
    \  grades.uniq!\n  grades.reverse!\n  grades.uniq!\n  grades.reverse!\n  grades.uniq!\n\
    \  grades.reverse!\n  grades.uniq!\n  grades.reverse!\n  grades.uniq!\n  grades.reverse!\n\
    \  grades.uniq!\n  grades.reverse!\n  grades.uniq!\n  grades.reverse!\n  grades.uniq!\n\
    \  grades.reverse!\n  grades.uniq!\n  grades.reverse!\n  grades.uniq!\n  grades.reverse!\n\
    \  grades.uniq!\n  grades.reverse!\n  grades.uniq!\n  grades.reverse!\n  grades.uniq!\n\
    \  grades.reverse!\n  grades.uniq!\n  grades.reverse!\n  grades.uniq!\n  grades.reverse!\n\
    \  grades.uniq!\n  grades.reverse!\n  grades.uniq!\n  grades.reverse!\n  grades.uniq!\n\
    \  grades.reverse!\n  grades.uniq!\n  grades.reverse!\n  grades.uniq!\n  grades.reverse!\n\
    \  grades.uniq!\n  grades.reverse!\n  grades.uniq!\n  grades.reverse!\n  grades.uniq!\n\
    \  grades.reverse!\n  grades.uniq!\n  grades.reverse!\n  grades.uniq!\n  grades.reverse!\n\
    \  grades.uniq", "    grades.sort.reverse!\n    \n    grades.each_with_index do\
    \ |grade, index|\n        if index == grades.size - 1\n            grades << \"\
    E\"\n            break\n        end\n        if grade > grades[index + 1] \n \
    \           grades << \"B-\"\n        elsif grade > grades[index]\n          \
    \  grades << \"B-\"\n        elsif grade < grades[index + 1]\n            grades\
    \ << \"A-\"\n        elsif grade < grades[index]\n            grades << \"A-\"\
    \n        else\n            grades << \"A+\"\n        end\n    end\n    grades\n\
    end", "    grades.map! {|g| g<0 ? 'E' : g<3.0 ? 'D-' : 'B-' if g>3.0 else g>3.7\
    \ ? 'B-' : 'A-' if g>3.3 ? 'B-' : 'A-' if g>3.0 ? 'B-' : 'A-' if g>2.7 ? 'B-'\
    \ : 'A-' if g>2.3 ? 'B-' : 'A-' if g>2.0 ? 'B-' : 'A-' if g>1.7 ? 'B-' : 'A-'\
    \ if g>1.3 ? 'B-' : 'A-' if g>1.0 ? 'B-' : 'A-' if g>0.7 ? 'B-' : 'A-' if g>0.0\
    \ ? 'B-' : 'A-'}\n    grades.compact!\n    grades.uniq!\n    grades\nend\n</code>\n\
    <|/ a |>\n<| a dscore=3 |>\n<code>", "end\n</cell>\n<text>\nPart 2: Linear Algebra",
  "  grades.each do |grade|\n    if (grade >= 4.0 && grade <= 5.0) ||\n       (grade\
    \ >= 3.0 && grade <= 4.0) ||\n       (grade >= 2.0 && grade <= 3.0) ||\n     \
    \  (grade >= 1.0 && grade <= 2.0) ||\n       (grade >= 0.7) \n      puts \"#{grade}+\"\
    ;\n    elsif (grade > 3.0)\n      puts \"#{grade}\";\n    elsif (grade > 2.7)\n\
    \      puts \"#{grade}\";\n    elsif (grade > 2.0)\n      puts \"#{grade}\";\n\
    \    elsif (grade > 1.7)\n      puts \"#{grade}\";\n    elsif (grade > 1.0)\n\
    \      puts \"#{grade}\";\n    elsif (grade > 0.0)\n      puts \"#{grade}\";\n\
    \    else\n      puts \"#{grade}\";\n    end\n  end\nend\n</code>\nSo the grading\
    \ for 4.0 was fine, for 2.7 and 2.3, it didn't work, for 3.0 and 3.3, it was fine,\
    \ for 3.7 and 3.0, it didn't work, for 3.3 and 2.7, it didn't work, for 2.0, it\
    \ didn't work, for 1.7 and 1.0, it didn't work, for 0.7 and 0.0, it didn't work,\
    \ and it didn't work for 0.5 because grade <= 0.5 was false. \nNow you can see\
    \ why you were confused. The number 4 was graded fine because it was an exact\
    \ match. The number 3.3 was graded fine because there was a > 3.0 and the number\
    \ 3.7 was graded fine because there was a > 3.0.\nSo you need to check whether\
    \ the grade is less than or equal to the minimum grade and greater than or equal\
    \ to the maximum grade (inclusive). So you need to check grade >= min and grade\
    \ <= max rather than just grade >= min and grade < max.\n<code>", "    grades.map!{|g|\
    \ if g < 0 then 0.0\n    elsif g > 0 then g\n    else 0.0 end}\n    grades.sort!\n\
    \    grades.reverse!\n    grades.unshift(0.0)\n    grades.map!{|g| g > 0 ? 'A+'\
    \ : (g < 0 ? 'A' : 'A-')}\n    grades.map!{|g| g > 0 ? 'B+' : (g < 0 ? 'B' : 'B-')}\n\
    \    grades.map!{|g| g > 0 ? 'C+' : (g < 0 ? 'C' : 'C-')}\n    grades.map!{|g|\
    \ g > 0 ? 'D+' : (g < 0 ? 'D' : 'D-')}\n    grades.map!{|g| g > 0 ? 'D' : (g <\
    \ 0 ? 'D-' : 'E')}\n    grades.map!{|g| g > 0 ? 'F' : (g < 0 ? 'D-' : 'E')}\n\
    \    grades.map!{|g| g > 0 ? 'F' : (g < 0 ? 'D-' : 'E')}\n    grades.map!{|g|\
    \ g > 0 ? 'F' : (g < 0 ? 'D-' : 'E')}\nend\n</code>\n<|/ a |>\n<| a tags=ruby,algorithm\
    \ |>\n<code>", "    grade_table = [\n        [\"4.0\", \"A+\"], \n        [\"\
    3.7\", \"A\"], \n        [\"3.3\", \"A-\"],\n        [\"3.0\", \"B+\"], \n   \
    \     [\"2.7\", \"B\"], \n        [\"2.3\", \"B-\"], \n        [\"2.0\", \"C+\"\
    ], \n        [\"1.7\", \"C\"], \n        [\"1.3\", \"C-\"], \n        [\"1.0\"\
    , \"D+\"], \n        [\"0.7\", \"D\"], \n        [\"0.0\", \"D-\"], \n       \
    \ [\"0.0\", \"E\"]\n    ]\n    grades = grades.map{|g| g.to_f}\n    result = grade_table.map\
    \ do |row|\n        grades.map(&:to_s).each do |grade|\n            grade = grade.to_f\n\
    \            if grade >= row[0] && grade <= row[1]\n                return row[2]\n\
    \            end\n        end\n    end\n    return []\nend", "    grades_to_letters\
    \ = {\n        4.0: 'A+',\n        3.7: 'A',\n        3.3: 'A- ',\n        3.0:\
    \ 'B+',\n        2.7: 'B',\n        2.3: 'B-',\n        2.0: 'C+',\n        1.7:\
    \ 'C',\n        1.3: 'C-',\n        1.0: 'D+ ',\n        0.7: 'D',\n        0.0:\
    \ 'D-',\n        0.0: 'E'\n    }\n    return grades.map { |g| grades_to_letters[g]\
    \ }.uniq\nend", "  grades = grades.sort\n  grades.reverse\n  result = ''\n  \n\
    \  grades.each do |grade|\n    grade = grade + 0\n    result += 'A+' if (grade\
    \ < 3.5) && (grade > 0)\n    result += 'A' if (grade >= 3.5) && (grade < 4)\n\
    \    result += 'A-' if (grade > 3.5) && (grade < 3)\n    result += 'B+' if (grade\
    \ >= 4) && (grade < 4.7)\n    result += 'B' if (grade >= 4.7) && (grade < 4.3)\n\
    \    result += 'B-' if (grade > 4.7) && (grade < 4.0)\n    result += 'C+' if (grade\
    \ >= 4.3) && (grade < 4.7)\n    result += 'C' if (grade >= 4.7) && (grade < 4.3)\n\
    \    result += 'C-' if (grade > 4.7) && (grade < 4.0)\n    result += 'D+' if (grade\
    \ >= 4.0) && (grade < 4.7)\n    result += 'D' if (grade >= 4.7) && (grade < 4.3)\n\
    \    result += 'D-' if (grade > 4.7) && (grade < 4.0)\n    result += 'E' if (grade\
    \ >= 4.0) && (grade < 4.7)\n  end\n  result\nend", "  if grades.length < 4\n \
    \   return 'D'\n  elsif grades.length < 6\n    return 'B'\n  elsif grades.length\
    \ < 8\n    return 'A'\n  end", "  grades\nend", "  grades.map!{|g| g < 0 ? g +\
    \ 0.1 : g }\n  grades.sort!\n  grades.map!{|g| g < 0 ? g * 10 : g}\n  grades.map!{|g|\
    \ g == 0 ? \"D-\" : (g / 10.to_f*10).to_s + \" \" + ((100-g).to_f/10.0).to_s +\
    \ ['F'].last}\n  grades.map {|g| g == \"D\" ? g : g[0] + g[1]}\nend\n</code>\n\
    <|/ a tags=ruby,algorithm,ruby-on-rails |>\n<| c |>\nWelcome to Stack Overflow!\
    \ Thanks for posting your answer! Please be sure to read the [FAQ on Self-Promotion](http://stackoverflow.com/faq#promotion)\
    \ carefully. Also note that it is *required* that you post a disclaimer every\
    \ time you link to your own site/product.\n<|/ c |>\n<| c |>\nI made a mistake\
    \ in the code above. The correct solution is now in the edit history. But I fixed\
    \ it shortly after I posted my answer.\n<|/ c |>\n<| a dscore=0 |>\nIf you want\
    \ something simple, try this approach:\n<code>", "  grades.map do |g|\n    letter_grade\
    \ = case g\n    when 0..1 then 'F'\n    when 2 then 'D+'\n    when 3 then 'D-'\n\
    \    when 4 then 'C+'\n    when 5 then 'C'\n    when 6 then 'C-'\n    when 7 then\
    \ 'B+'\n    when 8 then 'B'\n    when 9 then 'B-'\n    when 10 then 'A+'\n   \
    \ when 11 then 'A'\n    when 12 then 'A-'\n    when 13 then 'F'\n    else 'E'\n\
    \    end\n  letter_grade\n  end\nend\n</code>\n<|/ a dscore=1 tags=ruby,ruby-on-rails\
    \ |>\n<| c |>\nthanks for your response. i've edited my original post to include\
    \ my new attempt at a solution\n<|/ c |>\n<| a dscore=1 |>\nJust a suggestion:\
    \ you can use '#inject' for your purpose. For example:\n<code>", "  grades.each\
    \ do |grade|\n    if grade >= 4.0\n      puts \"#{grade}\" + \"A+\"\n    elsif\
    \ grade > 3.7\n      puts \"#{grade}\" + \"A\"\n    elsif grade > 3.3\n      puts\
    \ \"#{grade}\" + \"A-\"\n    elsif grade > 3.0\n      puts \"#{grade}\" + \"B+\"\
    \n    elsif grade > 2.7\n      puts \"#{grade}\" + \"B\"\n    elsif grade > 2.3\n\
    \      puts \"#{grade}\" + \"B-\"\n    elsif grade > 2.0\n      puts \"#{grade}\"\
    \ + \"C+\"\n    elsif grade > 1.7\n      puts \"#{grade}\" + \"C\"\n    elsif\
    \ grade > 1.3\n      puts \"#{grade}\" + \"C-\"\n    elsif grade > 1.0\n     \
    \ puts \"#{grade}\" + \"D+\"\n    elsif grade > 0.7\n      puts \"#{grade}\" +\
    \ \"D\"\n    elsif grade > 0.0\n      puts \"#{grade}\" + \"D-\"\n    else\n \
    \     puts \"#{grade}\" + \"E\"\n    end\n  end\nend", "    # your code here\n\
    \    grades = grade_equation()\n    #print(grades)\n    return grades\n    #raise\
    \ NotImplementedError()\n    \n</cell>\n<cell>\nprint(numerical_letter_grade(4.0))\n\
    print(numerical_letter_grade(3.7))\nprint(numerical_letter_grade(3.3))\nprint(numerical_letter_grade(3.0))\n\
    print(numerical_letter_grade(2.7))\nprint(numerical_letter_grade(2.3))\nprint(numerical_letter_grade(2.0))\n\
    print(numerical_letter_grade(1.7))\nprint(numerical_letter_grade(1.3))\nprint(numerical_letter_grade(1.0))\n\
    print(numerical_letter_grade(0.7))\nprint(numerical_letter_grade(0.0))\nprint(numerical_letter_grade([4.0,\
    \ 3, 1.7, 2, 3.5]))\n</cell>\n<text>\nQuestion 4: Implement the function print_letter_grades\
    \ to print a table of letter grades. The table should contain the GPAs for each\
    \ student and the letter grades for students who got a higher or equal grade than\
    \ 3.5", "    grades = grade_equation(grades)\n    grades = grades.chars\n    grades.map!(&:to_f)\n\
    \    grades.sort!\n    grades.reverse!\n    grades.map { |g| letter_grades[g]\
    \ }.join(\"\")\nend", "  grades.map do |grade|\n    case grade\n    when 0\n \
    \     'E'\n    when 1\n      'D+'\n    when 2\n      'D'\n    when 3\n      'D-'\n\
    \    when 4\n      'C+'\n    when 5\n      'C'\n    when 6\n      'C-'\n    when\
    \ 7\n      'B+'\n    when 8\n      'B'\n    when 9\n      'B-'\n    when 10\n\
    \      'A+'\n    when 11\n      'A'\n    when 12\n      'A-'\n    when 13\n  \
    \    'F'\n    when 14\n      'F+'\n    when 15\n      'F'\n    else\n      'Error'\n\
    \    end\n  end\nend", "    # Return an empty list if there are no valid grades\n\
    \    return grades.select{|x| x >= 0.0 }.reduce(:+).to_a.map{|x| x.to_s.upcase\
    \ }.compact\nend", "    grades_string = \"\"\n    i = 0\n    while i < grades.length\n\
    \        if grades[i] > 4.0 and grades[i-1] < 3.7\n            grades_string +=\
    \ \"A+\"\n        elsif grades[i] > 3.7 and grades[i-1] > 3.3\n            grades_string\
    \ += \"A\"\n        elsif grades[i] > 3.3 and grades[i-1] > 3.0\n            grades_string\
    \ += \"A-\"\n        elsif grades[i] > 3.0 and grades[i-1] > 2.7\n           \
    \ grades_string += \"B+\"\n        elsif grades[i] > 2.7 and grades[i-1] > 2.3\n\
    \            grades_string += \"B\"\n        elsif grades[i] > 2.3 and grades[i-1]\
    \ > 2.0\n            grades_string += \"B-\"\n        elsif grades[i] > 2.0 and\
    \ grades[i-1] > 1.7\n            grades_string += \"C+\"\n        elsif grades[i]\
    \ > 1.7 and grades[i-1] > 1.3\n            grades_string += \"C\"\n        elsif\
    \ grades[i] > 1.3 and grades[i-1] > 1.0\n            grades_string += \"C-\"\n\
    \        elsif grades[i] > 1.0 and grades[i-1] > 0.7\n            grades_string\
    \ += \"D+\"\n        elsif grades[i] > 0.7 and grades[i-1] > 0.0\n           \
    \ grades_string += \"D\"\n        elsif grades[i] > 0.0 \n            grades_string\
    \ += \"D-\"\n        elsif grades[i] > 0.0 \n            grades_string += \"E\"\
    \n        i += 1\n    end\n    grades_string.chop!\nend\n</code>\n<|/ a |>\n<|\
    \ c |>\nI got this error `undefined method `length' for nil:NilClass`\n<|/ c |>\n\
    <| c |>\nIt means you have a nil object passed to this function. You can debug\
    \ it with Pry. For example, `Pry.stop(grades)` right before `while i < grades.length`.\
    \ This will stop execution after a breakpoint is hit. You can then use `Pry.current_scope.local_variables`\
    \ to see what is passed into this function.\n<|/ c |>\n<| c |>\nWhen I added `Pry.stop(grades)`\
    \ right before `while i < grades.length` I got this error `NoMethodError: undefined\
    \ method `length' for nil:NilClass`\n<|/ c |>\n<| c |>\nOh, you're passing in\
    \ a nil object instead of a list into your function. Use `Pry.stop(grades)` right\
    \ before `grades = grades.split`\n<|/ c |>\n<|", "    grades.each_with_index do\
    \ |g,i|\n        if g.gpa>0\n            if g.gpa>3.7\n                grades[i]=\"\
    A+\"\n            elsif g.gpa>3.3\n                grades[i]=\"A\"\n         \
    \   elsif g.gpa>3.0\n                grades[i]=\"B+\"\n            elsif g.gpa>2.7\n\
    \                grades[i]=\"B\"\n            elsif g.gpa>2.3\n              \
    \  grades[i]=\"B-\"\n            elsif g.gpa>2.0\n                grades[i]=\"\
    C+\"\n            elsif g.gpa>1.7\n                grades[i]=\"C\"\n         \
    \   elsif g.gpa>1.3\n                grades[i]=\"C-\"\n            elsif g.gpa>1.0\n\
    \                grades[i]=\"D+\"\n            elsif g.gpa>0.7\n             \
    \   grades[i]=\"D\"\n            elsif g.gpa>0.0\n                grades[i]=\"\
    D-\"\n            else \n                grades[i]=\"E\"\n            end\n  \
    \      else\n            grades[i]=\"E\"\n        end\n    end\nend\n</code>\n\
    <|/ a tags=ruby,arrays,ruby-on-rails |>\n<| c |>\nJust a minor nit, but you could\
    \ also use something like `grades.map do |g| g.gpa > 0 ? 'A+' : (g.gpa > 3.7 ?\
    \ 'A' : (...` if you want.\n<|/ c |>\n<| a tags=ruby,arrays,ruby-on-rails |>\n\
    A couple of tips:", "    grades.map!{|g| g < 0 ? g * -1 : g}\n    gpa_sum = grades.sum\n\
    \    gpa_sum = gpa_sum.zero? ? 'E' : gpa_sum\n    gpa_sum.gsub(/(\\d{1,4})(?=(?:\\\
    D*\\d){3})/, \"\\\\1,\")\nend\n</code>\nA more efficient implementation would\
    \ use a hash to store letter grades and then compare the hash values to the grade\
    \ values rather than comparing each individual value.\n<|/ a tags=ruby |>\n<|\
    \ c |>\nThank you for the solution. This code was intended to be as basic as possible.\
    \ I apologize that I did not clarify this in my original post.\n<|/ c |>\n<| c\
    \ |>\n, no worries. I hope you like my solution and that it helps.\n<|/ c |>\n\
    <| a tags=ruby |>\nHere are some simple ways to calculate a grade from grade points.\
    \ All of them are simple enough that it shouldn't be difficult to modify them\
    \ for your specific situation. \n<code>", "  grades.each_with_index { |grade,\
    \ index| \n    grade_letter = case grade\n                 when 0..1 then 'D+'\n\
    \                 when 2..3 then 'D'\n                 when 4..5 then 'C'\n  \
    \               when 6..7 then 'C'\n                 when 8..9 then 'C'\n    \
    \             when 10..11 then 'C'\n                 when 12..13 then 'B+'\n \
    \                when 14..15 then 'B'\n                 when 16..17 then 'B'\n\
    \                 when 18..19 then 'B'\n                 when 20..21 then 'B'\n\
    \                 when 22..23 then 'B'\n                 when 24..25 then 'B-'\n\
    \                 when 26..27 then 'B-'\n                 when 28..29 then 'B-'\n\
    \                 when 30..31 then 'B-'\n                 when 32..33 then 'B-'\n\
    \                 when 34..35 then 'B-'\n                 when 36..37 then 'B-'\n\
    \                 when 38..39 then 'B-'\n                 when 40..45 then 'B-'\n\
    \                 when 46..47 then 'B-'\n                 when 48..49 then 'B-'\n\
    \                 when 50..55 then 'B-'\n                 when 56..57 then 'B-'\n\
    \                 when 58..59 then 'B-'\n                 when 60..69 then 'B-'\n\
    \                 when 70..79 then 'B-'\n                 when 80..89 then 'B-'\n\
    \                 when 90..99 then 'B-'\n                 when 100..109 then 'B-'\n\
    \                 when 110..119 then 'B-'\n                 when 120..129 then\
    \ 'B-'\n                 when 130..139 then 'B-'\n                 when 140..149\
    \ then 'B-'\n                 when 150..159 then 'B-'\n                 when 160..169\
    \ then 'B-'\n                 when 170..179 then 'B-'\n                 when 180..189\
    \ then 'B-'\n                 when 190..199 then 'B-'\n                 when 200..209\
    \ then 'B-'\n                 when 210..220 then 'B-'\n                 when 221..222\
    \ then 'B-'\n                 when 223..226 then 'B-'\n                 when 227..229\
    \ then 'B-'", "    grades.sort.reverse!\n    grades.map!(&:round)\n    grades.map!{|grade|\
    \ if grade < 3.0 then 'A+'\n    elsif grade < 3.7 then 'A'\n    elsif grade <\
    \ 3.3 then 'A-'\n    elsif grade < 3.0 then 'B+'\n    elsif grade < 2.7 then 'B'\n\
    \    elsif grade < 2.3 then 'B-'\n    elsif grade < 2.0 then 'C+'\n    elsif grade\
    \ < 1.7 then 'C'\n    elsif grade < 1.3 then 'C-'\n    elsif grade < 1.0 then\
    \ 'D+'\n    elsif grade < 0.7 then 'D'\n    elsif grade < 0.0 then 'D-'\n    elsif\
    \ grade < 0.0 then 'E'\n    end\nend", "  return []\nend", "  grades.map! {|g|\
    \ g.to_f}\n  grades.sort_by! {|g| g}\n  grades.reverse!\n  grades.each {|g| break\
    \ if g > 0 }\n  grades.each {|g| break if g < 0 }\n  grades.each {|g| grades.delete_at(g)\
    \ }\n  grades.reverse!\n  grades.each {|g| grades.push g.to_s(:db) }\n  grades.map\
    \ {|g| g.upcase }\nend\n</code>\n<|/ a tags=ruby dscore=2 |>\n<| a |>\nI came\
    \ up with this solution:\n<code>", "  # TODO: implement this function\n  raise\
    \ NotImplementedError(\"Student must write the function.\")\nend\n</code>\n<|/\
    \ a dscore=0 tags=ruby,math,arrays,algorithm |>\n<| c |>\n\"Students could also\
    \ use an array\"\_\u2013 what? Are you suggesting that the input should be an\
    \ array or an array-like object (such as a hash)?\n<|/ c |>\n<| c |>\nOk, I got\
    \ it now, I didn't read the question carefully enough. Anyway, you got my vote\
    \ for good effort, just misread the question.\n<|/ c |>\n<| a dscore=0 |>\nI wrote\
    \ a solution using recursion.\n<code>\ngrades = [\n  [4.0, 3, 1.7, 2, 3.5] ,\n\
    \  [4.0, 3, 1.7, 2, 3.5]\n]", "    # Your code here!\n    grade_equation = (4.0<grades<3.7).map{|n|\
    \ 'A+'}\n    grade_equation = (3.0<grades<3.3).map{|n| 'A'}\n    grade_equation\
    \ = (3.0<grades<2.9).map{|n| 'A-'}\n    grade_equation = (3.0<grades<2.9).map{|n|\
    \ 'B+'}\n    grade_equation = (3.0<grades<2.7).map{|n| 'B'}\n    grade_equation\
    \ = (3.0<grades<2.3).map{|n| 'B-'}\n    grade_equation = (2.0<grades<1.7).map{|n|\
    \ 'C+'}\n    grade_equation = (2.0<grades<1.4).map{|n| 'C'}\n    grade_equation\
    \ = (2.0<grades<1.0).map{|n| 'C-'}\n    grade_equation = (2.0<grades<0.7).map{|n|\
    \ 'D+'}\n    grade_equation = (2.0<grades<0.4).map{|n| 'D'}\n    grade_equation\
    \ = (2.0<grades<0.0).map{|n| 'D-'}\n    grade_equation = (grades==0.0)\n    grade_equation\n\
    end\n</code>\n<|/ a tags=ruby |>\n<| a |>\nHere is a simple solution that might\
    \ help. Note that I haven't tested the code. Try it out and let me know how it\
    \ works. \n<code>", "  grades.sort!\n  grades.reverse!", "  return grades.reduce(lambda\
    \ x,y: x + [\"A-\",\"B-\",\"C-\",\"D-\",\"D\",\"E\",\"F\",\"G-\",\"G\",\"A-\"\
    ][y-1],[]).join(\" \")\nend", "    grades_copy = grades.clone\n    grades_copy.sort!\
    \ # Sort grades in descending order\n    letter_grades = []\n    total = grades.reduce(:+)\
    \ # total of all grades\n    grades_copy.reverse_each do |grade|\n        if grade\
    \ == 0\n            letter_grades << \"D-\" # D is the last letter grade\n   \
    \         grades_copy.pop # Remove last grade\n        else\n            letter_grades\
    \ << ((grade/total)*100).to_i.to_s + \"+\" # Calculate percentage\n        end\n\
    \    end\n    letter_grades.reverse!\n    letter_grades << \"E\" if grades.empty?\n\
    \    letter_grades\nend", "    grades = grades[1..-1].select { |g| g % 1 != 0\
    \ }\n    grades = grades.map { |g| g }\n    grades.map! {|g| g - 3.0 } # Convert\
    \ to positive numbers\n    grades.map! {|g| g > 3.0 ? g - 3.0 : g }\n    grades.map!\
    \ {|g| g > 3.0 ? g + 1.0 : g + 0.5 }\n    grades.map! {|g| g + 0.0 } # Convert\
    \ to strings\n    grades.map! {|g| g =~ /^\\d\\d?$/ ? \"D-\" : g }\n    grades.map!\
    \ {|g| g =~ /^\\d\\d?$/ ? \"D+\" : g }\n    grades.map! {|g| g =~ /^\\d\\d?$/\
    \ ? \"C-\" : g }\n    grades.map! {|g| g =~ /^\\d\\d?$/ ? \"C+\" : g }\n    grades.map!\
    \ {|g| g =~ /^\\d\\d?$/ ? \"B-\" : g }\n    grades.map! {|g| g =~ /^\\d\\d?$/\
    \ ? \"B+\" : g }\n    grades.map! {|g| g =~ /^\\d\\d?$/ ? \"A-\" : g }\n    grades.map!\
    \ {|g| g =~ /^\\d\\d?$/ ? \"A+\" : g }\n    grades.map! {|g| g =~ /^\\d\\d?$/\
    \ ? \"A-\" : g }\n    grades.map! {|g| g =~ /^\\d\\d?$/ ? \"A-\" : g }\n    grades.map!\
    \ {|g| g =~ /^\\d\\d?$/ ? \"A-\" : g }\n    grades.map! {|g| g =~ /^\\d\\d?$/\
    \ ? \"A-\" : g }\n    grades.map! {|g| g =~ /^\\d\\d?$/ ? \"A-\" : g }\n    grades.map!\
    \ {|g| g =~ /^\\d\\d?$/ ? \"A-\" : g }\n    grades.map! {|g| g =~ /^\\d\\d?$/\
    \ ? \"A-\" : g }\n    grades.map! {|g| g =~ /^\\d\\d?$/ ? \"A-\" : g }\n    grades.map!\
    \ {|g| g =~ /^\\d\\d?$/ ? \"A-\" : g }\n    grades.", "  # Write your code below\n\
    \  result = []\n  for i in grades\n    if i <= 3.5\n      if i >= 3.0 and i <=\
    \ 2.7\n        result.push \"C+\"\n      elsif i >= 2.7 and i <= 2.3\n       \
    \ result.push \"B+\"\n      elsif i >= 2.3 and i <= 1.9\n        result.push \"\
    B\"\n      elsif i >= 1.9 and i <= 1.7\n        result.push \"B-\"\n      elsif\
    \ i >= 1.7 and i <= 1.3\n        result.push \"B\"\n      elsif i >= 1.3 and i\
    \ <= 1.0\n        result.push \"B-\"\n      elsif i >= 1.0 and i <= 0.7\n    \
    \    result.push \"C\"\n      elsif i >= 0.7 and i <= 0.3\n        result.push\
    \ \"C-\"\n      elsif i >= 0.2 and i <= 0.0\n        result.push \"D+\"\n    \
    \  elsif i >= 0 and i <= -0.1\n        result.push \"D\"\n      elsif i < -0.1\
    \ and i < -0.2\n        result.push \"D-\"\n      elsif i < -0.2 and i < -0.3\n\
    \        result.push \"D-\"\n      elsif i < -0.3 and i < -0.4\n        result.push\
    \ \"D-\"\n      elsif i < -0.4 and i < -0.5\n        result.push \"D-\"\n    \
    \  elsif i < -0.5\n        result.push \"D\"\n      end\n    elsif i > 3.5\n \
    \     if i >= 3.0 and i <= 2.7\n        result.push \"C+\"\n      elsif i >= 2.7\
    \ and i <= 2.3\n        result.push \"B+\"\n      elsif i >= 2.3 and i <= 1.9\n\
    \        result.push \"B\"\n      elsif i >= 1.9 and i <= 1.7\n        result.push\
    \ \"B-\"\n      elsif i >= 1.7 and i <= 1.3\n        result.push \"B\"\n     \
    \ elsif i >= 1.3 and i <= 1.0\n        result.push \"B-\"\n      elsif i >= 1.0\
    \ and i <= 0.7\n        result.push \"C\"\n      elsif i >= 0.7 and i <= 0.3\n\
    \        result.push \"C-\"\n      elsif i >= 0.2 and i <= 0.0\n        result.push\
    \ \"D+\"\n      elsif i >= 0 and i <= -0.1\n        result.push \"D\"\n      elsif\
    \ i < -0.1 and i < -0.2\n        result.push \"D-\"\n      elsif i < -0.2 and\
    \ i < -0.3\n        result.push \"D-\"\n      elsif i < -0.3 and i < -0.4\n  \
    \      result.push \"D-\"\n      elsif i < -0.4 and i < -0.5\n        result.push\
    \ \"D-\"\n      elsif i < -0.5\n        result.push \"D\"\n      end", "    letters\
    \ = []\n    # Iterate over the list of grades and compute letter grade for each\
    \ one.\n    grades.each do |grade|\n        letters << letters[grade - 4]\n  \
    \  end\n    letters.uniq!\n    letters\nend\n</code>\n<|/ a dscore=2 |>\n<| c\
    \ |>\nOk, I just need to figure out the math and then I can use your code. Thanks!\n\
    <|/ c |>\n<| c |>\nSo after some tinkering, I have added the math that I need,\
    \ please take a look. Thanks\n<|/ c |>\n<| a |>\n<code>", "  if grades.is_a? Array\n\
    \    gpa = grades.inject(0){|sum, el| sum + el }\n    grades.sort!\n    grades.each\
    \ do |x|\n      result = []\n      while x > 0.0\n        result += [\"A\",\"\
    B\",\"C\",\"D\",\"E\"][x % 5]\n        x = x / 5.0\n      end\n      result.unshift(result.join)\n\
    \    end\n  end\n  grades\nend", "  grades_copy = []\n  grades_copy.push(grades[0])\n\
    \  grades_copy.push(grades[1])\n  grades_copy.push(grades[2])\n  grades_copy.push(grades[3])\n\
    \  grades_copy.push(grades[4])", "    grades = grades.map(&:to_f)\n    \n    letter_grades\
    \ = []\n    grades.each do |grade|\n        if grade < 4.7\n            letter_grades.push\
    \ ('A+',)\n        elsif grade > 4.7\n            letter_grades.push ('A',)\n\
    \        elsif grade > 3.7\n            letter_grades.push ('A-')\n        elsif\
    \ grade > 3.3\n            letter_grades.push ('B+')\n        elsif grade > 2.7\n\
    \            letter_grades.push ('B')\n        elsif grade > 2.3\n           \
    \ letter_grades.push ('B-')\n        elsif grade > 2.0\n            letter_grades.push\
    \ ('C+')\n        elsif grade > 1.7\n            letter_grades.push ('C')\n  \
    \      elsif grade > 1.3\n            letter_grades.push ('C-')\n        elsif\
    \ grade > 1.0\n            letter_grades.push ('D+')\n        elsif grade > 0.7\n\
    \            letter_grades.push ('D')\n        elsif grade > 0.0\n           \
    \ letter_grades.push ('D-')\n        elsif grade == 0.0\n            letter_grades.push\
    \ ('E')\n        end\n    end\n    return letter_grades.flatten\nend", "  if grades.all?\
    \ { |x| x.to_f < 1.0 }\n    \"D\"\n  elsif grades.all? { |x| x.to_f > 1.2 }\n\
    \    \"F\"\n  elsif grades.all? { |x| x.to_f > 1.7 }\n    \"C\"\n  elsif grades.all?\
    \ { |x| x.to_f > 2.3 }\n    \"B\"\n  elsif grades.all? { |x| x.to_f > 3.0 }\n\
    \    \"A+\"\n  elsif grades.all? { |x| x.to_f > 3.3 }\n    \"A-\"\n  elsif grades.all?\
    \ { |x| x.to_f > 3.7 }\n    \"A\"\n  else\n    \"E\"\n  end\nend", end, "  return\
    \ grades.map do |x| \n    grade = x.to_i\n    grade = grade / 4.0\n    case grade\n\
    \    when 0 then 'E'\n    when 1 then 'D+'\n    when 2 then 'D-'\n    when 3 then\
    \ 'C+'\n    when 4 then 'C'\n    when 5 then 'B+'\n    when 6 then 'B'\n    when\
    \ 7 then 'A-'\n    when 8 then 'A'\n    when 9 then 'A+'\n    else x.to_s.split('.').map\
    \ {|e| e.to_i}.inject(:+) \n    end\n  end\nend", "# Write your code below!\n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n", "  return grades.map{|x| \n    if x <= 3.7 then\n\
    \      \"A+\"\n    elsif x >= 3.8 then\n      \"A\"\n    elsif x >= 3.3 then\n\
    \      \"A-\"\n    elsif x >= 3.0 then\n      \"B+\"\n    elsif x >= 2.7 then\n\
    \      \"B\"\n    elsif x >= 2.3 then\n      \"B-\"\n    elsif x >= 2.0 then\n\
    \      \"C+\"\n    elsif x >= 1.7 then\n      \"C\"\n    elsif x >= 1.3 then\n\
    \      \"C-\"\n    elsif x >= 1.0 then\n      \"D+\"\n    elsif x >= 0.7 then\n\
    \      \"D\"\n    elsif x >= 0.0 then\n      \"D-\"\n    else\n      \"E\"\n \
    \   end\n  }\nend\n</code>\n<|/ a tags=ruby |>\n<| a dscore=1 tags=ruby |>\nHere\
    \ is another approach using Array#transpose:\n<code>\ngrades = [4,3,1.7,2,3.5]\n\
    grades.sort!", "    # Write your code here.\n    array = []\n    for grade in\
    \ grades\n        array.push([grade.to_s, grades.index{|x| x > grade}])\n    array.each_index\
    \ do |i|\n        if array[i][1] < array[i+1][1]\n            array[i].push(array[i+1][0])\n\
    \            array.delete_at(array[i+1][1])\n        end\n    end\n    array.each_index\
    \ do |i|\n        array[i].push 'D'\n    end\n    array.length.times do\n    \
    \    array.delete_at(0)\n    end\n    return array\nend", "  grades.each {|grade|\
    \ grade -= grades.min }\n  grades.max { |a, b| a <=> b }\nend", "\tletter_grade\
    \ = String.new\n\tfor i in 0..grades.length\n\t\tindex = grades.index(i)\n\t\t\
    index = index - 1\n\t\tnum = (i + 1)/grades.length\n\t\tletter_grade << ['D','C','B','A','A-','B+','B-','C+','C-','D+','D','D-','E'].at(num.to_s)\n\
    \tend\n\treturn letter_grade\nend", "    grades = grades.map {|g| g.to_f}\n  \
    \  grades.each do |grade|\n        if grade > 3.6 && grade < 4.0 \n          \
    \  grade = 'A+'\n        elsif grade > 3.2 && grade < 3.7 \n            grade\
    \ = 'A'\n        elsif grade > 3.0 && grade < 3.3 \n            grade = 'A-'\n\
    \        elsif grade > 2.7 && grade < 3.0 \n            grade = 'B+'\n       \
    \ elsif grade > 2.3 && grade < 2.7 \n            grade = 'B'\n        elsif grade\
    \ > 2.0 && grade < 2.3 \n            grade = 'B-'\n        elsif grade > 1.7 &&\
    \ grade < 2.0 \n            grade = 'C+'\n        elsif grade > 1.3 && grade <\
    \ 1.7 \n            grade = 'C'\n        elsif grade > 1.0 && grade < 1.3 \n \
    \           grade = 'C-'\n        elsif grade > 0.7 && grade < 1.0 \n        \
    \    grade = 'D+'\n        elsif grade > 0.0 && grade < 0.7 \n            grade\
    \ = 'D'\n        else\n            grade = 'D-'\n        end\n    end\n    return\
    \ grade\nend\n</code>\n<|/ a tags=algorithm,ruby dscore=0 |>\n<| c |>\nThank you\
    \ for taking the time to write a detailed response. I understand most of it, but\
    \ how would I go about solving this problem without using recursion?\n<|/ c |>\n\
    <| c |>\nHow about using a stack?  Or just use a loop and a conditional?  Or use\
    \ recursion?  Or the more complex `until`?\n<|/ c |>\n<| a tags=algorithm,ruby\
    \ |>\nThis should work\n<code>", "    # Write your code here.\n    return []",
  "  grades.each do |grade|\n    if (grade >= 4.0) && (grade <= 4.5)\n      result\
    \ = 'A+'\n    elsif (grade >= 3.7) && (grade <= 3.9)\n      result = 'A'\n   \
    \ elsif (grade >= 3.3) && (grade <= 3.5)\n      result = 'A-'\n    elsif (grade\
    \ >= 3.0) && (grade <= 3.3)\n      result = 'B+'\n    elsif (grade >= 2.7) &&\
    \ (grade <= 2.9)\n      result = 'B'\n    elsif (grade >= 2.3) && (grade <= 2.5)\n\
    \      result = 'B-'\n    elsif (grade >= 2.0) && (grade <= 2.1)\n      result\
    \ = 'C+'\n    elsif (grade >= 1.7) && (grade <= 1.9)\n      result = 'C'\n   \
    \ elsif (grade >= 1.3) && (grade <= 1.5)\n      result = 'C-'\n    elsif (grade\
    \ >= 1.0) && (grade <= 1.1)\n      result = 'D+'\n    elsif (grade >= 0.7) &&\
    \ (grade <= 0.9)\n      result = 'D'\n    else\n      result = 'D-'\n    end\n\
    \  end\n  return result\nend", "  grades.sort.reverse!\n  result = ''\n  prev_gpa\
    \ = grades.shift\n  gpa =\nend", "  # TODO: Your code here\nend", "  gpa_sum,\
    \ letter_grades = 0.0, []\n  gpa_sum += grades[0]\n  letter_grades.concat ['A+',\
    \ 'B', 'C-', 'C', 'A-']\n  gpa_sum += grades[1]\n  letter_grades.concat ['B+',\
    \ 'A-', 'B', 'C-', 'C']\n  gpa_sum += grades[2]\n  letter_grades.concat ['B+',\
    \ 'A-', 'B', 'C-', 'C']\n  gpa_sum += grades[3]\n  letter_grades.concat ['C+',\
    \ 'A-', 'B', 'C-', 'C']\n  gpa_sum += grades[4]\n  letter_grades.concat ['C+',\
    \ 'A-', 'B', 'C-', 'C']\n  gpa_sum += grades[5]\n  letter_grades.concat ['A-',\
    \ 'B+', 'C-', 'C', 'A-']\n  gpa_sum += grades[6]\n  letter_grades.concat ['A-',\
    \ 'B+', 'C-', 'C', 'A-']\n  gpa_sum += grades[7]\n  letter_grades.concat ['A-',\
    \ 'B+', 'C-', 'C', 'A-']\n  gpa_sum += grades[8]\n  letter_grades.concat ['A-',\
    \ 'B+', 'C-', 'C', 'A-']\n  letter_grades.concat ['A-', 'B+', 'C-', 'C', 'A-']\n\
    \  letter_grades.concat ['A-', 'B+', 'C-', 'C', 'A-']\n  gpa_sum += grades[9]\n\
    \  letter_grades.concat ['A-', 'B+', 'C-', 'C', 'A-']\n  gpa_sum += grades[10]\n\
    \  letter_grades.concat ['A-', 'B+', 'C-', 'C', 'A-']\n  gpa_sum += grades[11]\n\
    \  letter_grades.concat ['A-', 'B+', 'C-', 'C', 'A-']\n  gpa_sum += grades[12]\n\
    \  letter_grades.concat ['A-', 'B+', 'C-', 'C', 'A-']\n  letter_grades.concat\
    \ ['A-', 'B+', 'C-', 'C', 'A-']\n  gpa_sum += grades[13]\n  letter_grades.concat\
    \ ['A-', 'B+', 'C-', 'C', 'A-']\n  gpa_sum += grades[14]\n  letter_grades.concat\
    \ ['A-', 'B+', 'C-', 'C', 'A-']\n  gpa_sum += grades[15]\n  letter_grades.concat\
    \ ['A-', 'B+', 'C-', 'C', 'A-']\n  gpa_sum += grades[16]\n  letter_grades.concat\
    \ ['A-', 'B+', 'C-', 'C', 'A-']\n  gpa_sum += grades[17]\n  letter_grades.concat\
    \ ['A-', 'B+', 'C-', 'C', 'A-", "    grades_copy = [float(grade) for grade in\
    \ grades]\n    grades_copy.sort\n    grades_copy.each_with_index { |grade, i|\
    \ \n       if i < grades_copy.count-1\n           grades_copy[i + 1] = grades_copy[i]\n\
    \           grades_copy[i] = 0\n       end\n    }\n    grades_copy.sort { |a,b|\
    \ a <=> b }\n    grades_copy = grades_copy.map(&:to_s).sort\n    grades_copy.each\
    \ { |grade| puts grade.upcase }\nend", "  grade_array = []\n  \n  grade_array.push(grade_grade(grades[0]))\n\
    \  grade_array.push(grade_grade(grades[1]))\n  grade_array.push(grade_grade(grades[2]))\n\
    \  grade_array.push(grade_grade(grades[3]))\n  grade_array.push(grade_grade(grades[4]))\n\
    \  grade_array.push(grade_grade(grades[5]))\n  grade_array.push(grade_grade(grades[6]))\n\
    \  grade_array.push(grade_grade(grades[7]))\n  grade_array.push(grade_grade(grades[8]))\n\
    \  grade_array.push(grade_grade(grades[9]))\n  grade_array.push(grade_grade(grades[10]))\n\
    \  grade_array.push(grade_grade(grades[11]))\n  grade_array.push(grade_grade(grades[12]))\n\
    \  grade_array.push(grade_grade(grades[13]))\n  grade_array.push(grade_grade(grades[14]))\n\
    \  grade_array.push(grade_grade(grades[15]))", "  grades.reject! { |x| x % 1 ==\
    \ 0 }\n  grades.sort!\n  grades.reverse!\n  grades.each { |x| x /= 1.00 }\n  grades.each\
    \ { |x| x = x.to_s }\n  grades.map! {|x| x.gsub!(/[a-z]/) { |y| ['A','B','C','D','E'][y.ord-1]\
    \ } }\n  grades.join(', ')\nend", "  grades.each do |grade|\n    if grade >= 4.0\n\
    \      'A+'\n    elsif grade >= 3.7\n      'A'\n    elsif grade >= 3.3\n     \
    \ 'A'\n    elsif grade >= 3.0\n      'B+'\n    elsif grade >= 2.7\n      'B'\n\
    \    elsif grade >= 2.3\n      'B'\n    elsif grade >= 2.0\n      'C+'\n    elsif\
    \ grade >= 1.7\n      'C'\n    elsif grade >= 1.3\n      'C'\n    elsif grade\
    \ >= 1.0\n      'D+'\n    elsif grade >= 0.7\n      'D'\n    elsif grade >= 0.0\n\
    \      'D'\n    else\n      'E'\n    end\n  end\nend\n</cell>\n<code language=conda-root-py>",
  "  grades.sort!\n  grades.reverse!\n  grades.each do |g|\n    if g >= 4.0 && g <=\
    \ 5.9\n      grades.delete_at(0)\n      grades.delete_at(0)\n    elsif g >= 3.7\
    \ && g <= 4.9\n      grades.delete_at(1)\n      grades.delete_at(0)\n    elsif\
    \ g >= 3.3 && g <= 4.9\n      grades.delete_at(2)\n      grades.delete_at(1)\n\
    \    elsif g >= 3.0 && g <= 4.9\n      grades.delete_at(3)\n      grades.delete_at(2)\n\
    \    elsif g >= 2.7 && g <= 5.9\n      grades.delete_at(4)\n      grades.delete_at(3)\n\
    \    elsif g >= 2.3 && g <= 5.9\n      grades.delete_at(5)\n      grades.delete_at(4)\n\
    \    elsif g >= 2.0 || g <= 4.9\n      grades.delete_at(6)\n      grades.delete_at(5)\n\
    \    end\n  end\n  grades\nend", "  return grade_equation(grades).map {|i| letter_grades[i]\
    \ }\nend\n</code>\nThe function letter_grade returns the letter grade from the\
    \ above table. The grade_equation returns the GPAs of the students as a list of\
    \ numbers.\n<code>", "  grades.sort(&:abs)\n  grades.delete_if{|x| x < 0}\n  grades.delete_if{|x|\
    \ x > 100}\n  grades.delete_if{|x| x == 0}\n  grades.delete_if{|x| x < 0}\n  grades.delete_if{|x|\
    \ x > 100}\n  grades.delete_if{|x| x == 0}\n  grades.delete_if{|x| x < 0}\n  grades.delete_if{|x|\
    \ x > 100}\n  grades.delete_if{|x| x == 0}\n  grades.delete_if{|x| x < 0}\n  grades.delete_if{|x|\
    \ x > 100}\n  grades.delete_if{|x| x == 0}\n  grades.delete_if{|x| x < 0}\n  grades.delete_if{|x|\
    \ x > 100}\n  grades.delete_if{|x| x == 0}\n  grades.delete_if{|x| x < 0}\n  grades.delete_if{|x|\
    \ x > 100}\n  grades.delete_if{|x| x == 0}\n  grades.delete_if{|x| x < 0}\n  grades.delete_if{|x|\
    \ x > 100}\n  grades.delete_if{|x| x == 0}\n  grades.delete_if{|x| x < 0}\n  grades.delete_if{|x|\
    \ x > 100}\n  grades.delete_if{|x| x == 0}\n  grades.delete_if{|x| x < 0}\n  grades.delete_if{|x|\
    \ x > 100}\n  grades.delete_if{|x| x == 0}\n  grades.delete_if{|x| x < 0}\n  grades.delete_if{|x|\
    \ x > 100}\n  grades.delete_if{|x| x == 0}\n  grades.delete_if{|x| x < 0}\n  grades.delete_if{|x|\
    \ x > 100}\n  grades.delete_if{|x| x == 0}\n  grades.delete_if{|x| x < 0}\n  grades.delete_if{|x|\
    \ x > 100}\n  grades.delete_if{|x| x == 0}\n  grades.delete_if{|x| x < 0}\n  grades.delete_if{|x|\
    \ x > 100}\n  grades.delete_if{|x| x == 0}\n  grades.delete_if{|x| x < 0}\n  grades.delete_if{|x|\
    \ x > 100", "    grades = grades.map { |i| i + 0.0 }\n    grades.max\n    grades.min\n\
    \    grades.reject { |i| i < 0.0 }\nend\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0\
    \ tags=ruby |>\n<code>", "  grades.sort!\n  grades.unshift(0)\n  grades.shift\n\
    \  grades.each do |num|\n    case num\n      when 0 < num < 4\n        return\
    \ \"A+\", num\n      when 4 < num < 7\n        return \"A\", num - 4\n      when\
    \ 7 < num < 9\n        return \"A-\", num - 7\n      when 9 < num < 11\n     \
    \   return \"B+\", num - 9\n      when 11 < num < 13\n        return \"B\", num\
    \ - 11\n      when 13 < num < 16\n        return \"B-\", num - 13\n      when\
    \ 15 < num < 19\n        return \"C+\", num - 15\n      when 19 < num < 22\n \
    \       return \"C\", num - 19\n      when 22 < num < 24\n        return \"C-\"\
    , num - 22\n      when 23 < num < 27\n        return \"D+\", num - 23\n      when\
    \ 27 < num < 30\n        return \"D\", num - 27\n      when 30 < num < 32\n  \
    \      return \"D-\", num - 30\n      when 32 < num\n        return \"E\", num\
    \ - 32\n    end\n  end\nend\n</code>\nOutput:\n<code>\nnumerical_letter_grade([4.0,\
    \ 3, 1.7, 2, 3.5]) #=>\n[[\"A+\", 4.0], [\"A\", 3], [\"A-\", 1.7], [\"B+\", 2],\
    \ [\"B\", 1], [\"B-\", 1.5], [\"C+\", 0.5], [\"C\", 0], [\"C-\", -0.1], [\"D+\"\
    , -0.5], [\"D\", -1], [\"D-\", -0.5], [\"E\", 0]]\n</code>\n<|/ a |>\n<| c |>\n\
    I am not understanding your code\n<|/ c |>\n<| c |>\n`each_cons` takes an array\
    \ of n items and splits it into chunks of n items. So `[4.0, 3, 1.7, 2, 3.5].each_cons(2)\
    \ #=> [[4.0], [3, 1.7], [2], [3.5]]`. When we call `#sort` on this, the first\
    \ item is compared with the second, so \"4.0\" comes before \"3\". `grades.unshift(0)`\
    \ appends `0` to `grades`. Similarly, `grades.shift` removes the first element\
    \ of `grades`, which is the value `\"4.0\"`. The `grades.each do |num|` is iterating\
    \ over the array produced by `grades.each_cons(2)`.\n<|/ c |>\n<| a dscore=0 |>\n\
    We can solve this problem with two methods. The first method simply converts the\
    \ grades into percentages and rounds them to the nearest whole number", "    #\
    \ Your code here\n    return grades\n</cell>\n<cell>\nassert numerical_letter_grade([4.0,\
    \ 3, 1.7, 2, 3.5]) == ['A+', 'B', 'C-', 'C', 'A-']\n</cell>\n<cell>", "  letter_grades\
    \ = []\n  \n  grades.each do |grade|\n    letter_grade = \"\"\n    grade = grade\
    \ * 5\n    grade = grade / 4\n    \n    if grade < 3.3\n      letter_grade <<\
    \ \">3.3\"\n    elsif grade < 3.7\n      letter_grade << \">3.7\"\n    elsif grade\
    \ < 4.0 \n      letter_grade << \">4.0\"\n    elsif grade < 4.3\n      letter_grade\
    \ << \">4.3\"\n    elsif grade < 4.7\n      letter_grade << \">4.7\"\n    elsif\
    \ grade < 5.0\n      letter_grade << \">5.0\"\n    elsif grade < 5.3\n      letter_grade\
    \ << \">5.3\"\n    elsif grade < 5.7\n      letter_grade << \">5.7\"\n    elsif\
    \ grade < 6.0\n      letter_grade << \">6.0\"\n    elsif grade < 6.3\n      letter_grade\
    \ << \">6.3\"\n    elsif grade < 6.7\n      letter_grade << \">6.7\"\n    elsif\
    \ grade < 7.0\n      letter_grade << \">7.0\"\n    elsif grade < 7.3\n      letter_grade\
    \ << \">7.3\"\n    elsif grade < 7.7\n      letter_grade << \">7.7\"\n    elsif\
    \ grade < 8.0\n      letter_grade << \">8.0\"\n    elsif grade < 8.3\n      letter_grade\
    \ << \">8.3\"\n    elsif grade < 8.7\n      letter_grade << \">8.7\"\n    elsif\
    \ grade < 9.0\n      letter_grade << \">9.0\"\n    elsif grade < 9.3\n      letter_grade\
    \ << \">9.3\"\n    elsif grade < 9.7\n      letter_grade << \">9.7\"\n    elsif\
    \ grade < 10.0\n      letter_grade << \">10.0\"\n    elsif grade < 10.3\n    \
    \  letter_grade << \">10.3\"\n    elsif grade < 10.7\n      letter_grade << \"\
    >10.7\"\n    elsif grade < 11.0\n      letter_grade << \">11.0\"\n    elsif grade\
    \ < 11.3\n      letter_grade ", "  result = []\n  grades.each do |x|\n    if x\
    \ > 0 && x < 10\n      result << x\n    elsif x > 9 && x < 20\n      result <<\
    \ 'A'\n    elsif x > 19 && x < 30\n      result << 'A-'\n    elsif x > 29 && x\
    \ < 40\n      result << 'B+'\n    elsif x > 39 && x < 50\n      result << 'B'\n\
    \    elsif x > 49 && x < 60\n      result << 'B-'\n    elsif x > 59 && x < 70\n\
    \      result << 'C+'\n    elsif x > 69 && x < 80\n      result << 'C'\n    elsif\
    \ x > 79 && x < 90\n      result << 'C-'\n    elsif x > 99 && x < 100\n      result\
    \ << 'D+'\n    elsif x > 100\n      result << 'D'\n    else\n      result << 'D-'\n\
    \    end\n  end\n  result\nend\n</code>\nI hope this helped you!\n<|/ a |>\n<|\
    \ c |>\nThe `grade_equation` function does not work as intended. `grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5])` returns `['A+', 'B', 'C-', 'C', 'A-']` which isn't the correct\
    \ answer for the grading problem described in the question. Having said that,\
    \ I'm sure the OP will come back to this question and accept the answer.\n<|/\
    \ c |>\n<| c |>\nThe function does work as intended, though it's not obvious from\
    \ the description. The function returns `['A+', 'B', 'C-', 'C', 'A-']`, which\
    \ is the correct answer according to the given table. The problem description\
    \ says that the grading has to be done with `grade_equation([4.0, 3, 1.7, 2, 3.5])`\
    \ and that the output is `['A+', 'B', 'C-', 'C', 'A-']`. I hope I did not misunderstand\
    \ the problem.\n<|/ c |>\n<| c |>\nYou're right. The `grade_equation([4.0, 3,\
    \ 1.7, 2, 3.5])` returns `['A+', 'B', 'C-', 'C', 'A-']` which isn't the correct\
    \ answer according to the given table. I misunderstood the problem. I thought\
    \ the problem was that the grading has to be done with `grade_equation([4.0, 3,\
    \ 1.7, 2, 3.5])` and that the output is `['A+', 'B', 'C-', 'C', 'A-']`. This seems\
    \ to be the problem OP was having. Perhaps the OP could clarify the problem?\n\
    <|/ c |>\n<| c |>\nOh thanks, ", "  grades.reduce(:+).sort.inject(\"\") do |acc,\
    \ x|\n    case x\n    when 1.7.1\n      acc += \"C\"\n    when 2.7\n      acc\
    \ += \"B\"\n    when 3.7\n      acc += \"A\"\n    when 3.3\n      acc += \"B-\"\
    \n    when 3.0\n      acc += \"B+\"\n    when 2.3\n      acc += \"B-\"\n    when\
    \ 2.0\n      acc += \"C+\"\n    when 1.7\n      acc += \"C\"\n    when 1.3\n \
    \     acc += \"C-\"\n    when 1.0\n      acc += \"D+\"\n    when 0.7\n      acc\
    \ += \"D\"\n    when 0.0\n      acc += \"D-\"\n    when 0\n      acc += \"E\"\n\
    \    end\n    acc\n  end\nend\n</code>\n<|/ a dscore=3 |>\n<| a |>\nI came up\
    \ with this solution:\n<code>", "  grades = grades.map(&:to_f) #convert each grade\
    \ to a float\n  grades.each do |grade|\n    puts grade > 3.0 ? \"A+\" : (grade\
    \ < 3.0 ? \"A-\" : \"B-\")\n  end\nend\n</code>\n<|/ a |>\n<| c |>\nAwesome thank\
    \ you so much! So I understand this line - grades.map {|n| n.to_f}, but what is\
    \ the purpose of the .map(&:to_f) in the grade_equation function?\n<|/ c |>\n\
    <| c |>\n`to_f` is a method on the `Float` class. `map` passes each element in\
    \ the array to a method (the block I defined). In this case, the method returns\
    \ the numeric grade (as a float `Float` object).\n<|/ c |>\n<| c |>\n`to_f` converts\
    \ `String`s to `Float`s. `grades.map(&:to_f)` takes the array `grades`, passes\
    \ each element to the method `to_f`, and returns an array of floats\n<|/ c |>\n\
    <| c |>\nThe `.map(&:to_f)` converts the grade to an integer.  Without the `.map(&:to_f)`\
    \ each grade is converted to a `Fixnum` which is a superset of `Float` so you\
    \ get fractional grades instead of whole numbers.\n<|/ c |>\n<| c |>\nAwesome\
    \ thank you so much! So I understand this line - grades.map {|n| n.to_f}, but\
    \ what is the purpose of the .map(&:to_f) in the grade_equation function?\n<|/\
    \ c |>\n<| a dscore=0 |>\nAs the other answers explained, there are a couple of\
    \ ways to do it, but I like that you can also use the ternary operator.  So here's\
    \ my solution:\n<code>", "    letter_grades = []\n    grades.each do |grade|\n\
    \      if grade > 0 && grade < 3.7\n        letter_grades << \"A+\"\n      elsif\
    \ grade > 3.7 && grade < 3.3\n        letter_grades << \"A\"\n      elsif grade\
    \ > 3.3 && grade < 3.0\n        letter_grades << \"A-\"\n      elsif grade > 3.0\
    \ && grade < 2.7\n        letter_grades << \"B+\"\n      elsif grade > 2.7 &&\
    \ grade < 2.3\n        letter_grades << \"B\"\n      elsif grade > 2.3 && grade\
    \ < 2.0\n        letter_grades << \"B-\"\n      elsif grade > 2.0 && grade < 1.7\n\
    \        letter_grades << \"C+\"\n      elsif grade > 1.7 && grade < 1.3\n   \
    \     letter_grades << \"C\"\n      elsif grade > 1.3 && grade < 1.0\n       \
    \ letter_grades << \"C-\"\n      elsif grade > 1.0 && grade < 0.7\n        letter_grades\
    \ << \"D+\"\n      elsif grade > 0.7 && grade < 0.0\n        letter_grades <<\
    \ \"D\"\n      else\n        letter_grades << \"D-\"\n      end\n    end\n   \
    \ letter_grades\nend", "  grades_average = grade_average(grades)\n  letters =\
    \ []\n  \n  if grades_average >= 4.0 && grades_average <= 4.7\n    letters.push(\"\
    A+\")\n  elsif grades_average >= 3.7 && grades_average <= 4.3\n    letters.push(\"\
    A\")\n  elsif grades_average >= 3.3 && grades_average <= 3.7\n    letters.push(\"\
    A+\")\n  elsif grades_average >= 3.0 && grades_average <= 3.3\n    letters.push(\"\
    A\")\n  elsif grades_average >= 2.7 && grades_average <= 3.0\n    letters.push(\"\
    A+\")\n  elsif grades_average >= 2.3 && grades_average <= 2.7\n    letters.push(\"\
    A\")\n  elsif grades_average >= 2.0 && grades_average <= 2.3\n    letters.push(\"\
    A\")\n  elsif grades_average >= 1.7 && grades_average <= 2.0\n    letters.push(\"\
    A+\")\n  elsif grades_average >= 1.3 && grades_average <= 1.7\n    letters.push(\"\
    A\")\n  elsif grades_average >= 1.0 && grades_average <= 1.3\n    letters.push(\"\
    A\")\n  elsif grades_average >= 0.7 && grades_average <= 1.0\n    letters.push(\"\
    A+\")\n  else\n    letters.push(\"D\")\n  end\n  \n  letters.sort.reverse!\n \
    \ \n  letters.each {|i| puts i }\n  puts \"\\n\"\nend\n</code>\n<|/ a |>\n<| a\
    \ dscore=0 |>\nI think this is what your looking for:\n<code>", "  grades_sorted_by_gpa\
    \ = grades.sort\n  letter_grades = []\n  i = 0\n  while i < grades_sorted_by_gpa.length\n\
    \    if grades_sorted_by_gpa[i][0] == 4.0\n      letter_grades.push(['A+'])\n\
    \    elsif grades_sorted_by_gpa[i][0] > 3.7 && grades_sorted_by_gpa[i][0] < 3.3\n\
    \      letter_grades.push(['A'])\n    elsif grades_sorted_by_gpa[i][0] > 3.3 &&\
    \ grades_sorted_by_gpa[i][0] < 3.0\n      letter_grades.push(['A-'])\n    elsif\
    \ grades_sorted_by_gpa[i][0] > 3.0 && grades_sorted_by_gpa[i][0] < 2.7\n     \
    \ letter_grades.push(['B+'])\n    elsif grades_sorted_by_gpa[i][0] > 2.7 && grades_sorted_by_gpa[i][0]\
    \ < 2.3\n      letter_grades.push(['B'])\n    elsif grades_sorted_by_gpa[i][0]\
    \ > 2.3 && grades_sorted_by_gpa[i][0] < 2.0\n      letter_grades.push(['B-'])\n\
    \    elsif grades_sorted_by_gpa[i][0] > 2.0 && grades_sorted_by_gpa[i][0] < 1.7\n\
    \      letter_grades.push(['C+'])\n    elsif grades_sorted_by_gpa[i][0] > 1.7\
    \ && grades_sorted_by_gpa[i][0] < 1.3\n      letter_grades.push(['C'])\n    elsif\
    \ grades_sorted_by_gpa[i][0] > 1.3 && grades_sorted_by_gpa[i][0] < 1.0\n     \
    \ letter_grades.push(['C-'])\n    elsif grades_sorted_by_gpa[i][0] > 1.0 && grades_sorted_by_gpa[i][0]\
    \ < 0.7\n      letter_grades.push(['D+'])\n    elsif grades_sorted_by_gpa[i][0]\
    \ > 0.7 && grades_sorted_by_gpa[i][0] < 0.0\n      letter_grades.push(['D'])\n\
    \    elsif grades_sorted_by_gpa[i][0] == 0.0\n      letter_grades.push(['D-'])\n\
    \    else grades_sorted_by_gpa[i][0] == 0.0\n      letter_grades.push(['E'])\n\
    \    i += 1\n  end\n  return letter_grades\nend", "  grades.sort {|a, b| a.to_f\
    \ <=> b.to_f}\n  grades.reverse\n  grades = grades.map {|a| a.to_i}\n  grades.uniq.each\
    \ do |g|\n    break if grades.count {|i| i == g} == 1 # only return one letter\
    \ grade per GPA\n    grades.delete_at(grades.index{|i| i == g})\n  end\n  grades.uniq.map\
    \ {|a| 'A' if a < 3.0 && a.to_f < 4.0 else 'B' if a < 3.7 && a.to_f >= 3.7 else\
    \ 'C' if a < 3.3 && a.to_f >= 3.3 else 'D' if a < 3.0 && a.to_f >= 3.0 else 'F'}\n\
    end", "    return grade_equation\n</cell>\n<cell>", "  grades.map!(&:to_f) # Convert\
    \ to float because we want decimal grades\n  grades.sort!\n  grades.reverse!\n\
    \  grades.map!(&:ceil)\n  grades.each_cons(2).with_index do |n, i|\n    grades[i]\
    \ = (n.first + n.last).floor/3.0\n  end\n  grades.map do |grade|\n    if grade\
    \ < 4\n      'A+'\n    elsif grade < 4.5\n      'A'\n    elsif grade < 5\n   \
    \   'A-'\n    elsif grade < 5.5\n      'B+'\n    elsif grade < 6\n      'B'\n\
    \    elsif grade < 6.5\n      'B-'\n    elsif grade < 7\n      'C+'\n    elsif\
    \ grade < 7.5\n      'C'\n    elsif grade < 8\n      'C-'\n    elsif grade < 8.5\n\
    \      'D+'\n    elsif grade < 9\n      'D'\n    elsif grade < 9.5\n      'D-'\n\
    \    elsif grade < 10\n      'E'\n    else\n      'F'\n    end\n  end\nend\n</code>\n\
    <|/ a dscore=1 |>\n<| a |>\nHere's how you might do it:\n<code>", "  # TODO: Your\
    \ code here\n  return grades\nend\n</cell>\n<text>\nLet's try it out and see what\
    \ we get:", "    grades_as_string = \"\"\n    grades_as_string << '['\n    \n\
    \    grades.each_with_index do |grade, index|\n      if index == grades.size-1\n\
    \        grades_as_string << grade << ']'\n      else\n        grades_as_string\
    \ << \"#{grade}+\"\n      end\n    end\n    grades_as_string\n  end\n    \n  #\
    \ Write a function that takes a letter grade as string and returns the \n  # corresponding\
    \ numerical grade as an integer.\n  def letter_grade(grade)\n    grade_grade =\
    \ 0\n    if grade == \"A+\" then\n      grade_grade = 4\n    elsif grade == \"\
    A\" then\n      grade_grade = 3\n    elsif grade == \"A-\" then\n      grade_grade\
    \ = 3\n    elsif grade == \"B+\" then\n      grade_grade = 2\n    elsif grade\
    \ == \"B\" then\n      grade_grade = 2\n    elsif grade == \"B-\" then\n     \
    \ grade_grade = 2\n    elsif grade == \"C+\" then\n      grade_grade = 1\n   \
    \ elsif grade == \"C\" then\n      grade_grade = 1\n    elsif grade == \"C-\"\
    \ then\n      grade_grade = 1\n    elsif grade == \"D+\" then\n      grade_grade\
    \ = 0\n    elsif grade == \"D\" then\n      grade_grade = 0\n    elsif grade ==\
    \ \"D-\" then\n      grade_grade = 0\n    elsif grade == \"E\" then\n      grade_grade\
    \ = 0\n    else\n      puts \"Invalid input\"\n    end\n    grade_grade\n  end\n\
    \  \n  # Define a function that will calculate the letter grade for a list of\
    \ grades.\n  def grade_equation(grades)\n    letterGrades = Array.new\n    letterGrades\
    \ << letter_grade(grades.first)\n    grades = grades[1..grades.size-1]\n    \n\
    \    grades.each do |grade|\n      letterGrades << letter_grade(grade)\n    end\n\
    \    \n    letterGrades\n  end\nend", "    grades_string = []\n    grades.each\
    \ do |gpa|\n        if gpa > 0 && gpa <= 4\n            grades_string << 'A+'\n\
    \        elsif gpa > 4 && gpa <= 4.7\n            grades_string << 'A'\n     \
    \   elsif gpa > 4.7 && gpa <= 5\n            grades_string << 'A-'\n        elsif\
    \ gpa > 5 && gpa <= 5.3\n            grades_string << 'B+'\n        elsif gpa\
    \ > 5.3 && gpa <= 5.7\n            grades_string << 'B'\n        elsif gpa > 5.7\
    \ && gpa <= 6\n            grades_string << 'B-'\n        elsif gpa > 6 && gpa\
    \ <= 6.3\n            grades_string << 'C+'\n        elsif gpa > 6.3 && gpa <=\
    \ 6.7\n            grades_string << 'C'\n        elsif gpa > 6.7 && gpa <= 7\n\
    \            grades_string << 'C-'\n        elsif gpa > 7 && gpa <= 7.3\n    \
    \        grades_string << 'D+'\n        elsif gpa > 7.3 && gpa <= 7.7\n      \
    \      grades_string << 'D'\n        elsif gpa > 7.7 && gpa <= 8\n           \
    \ grades_string << 'D-'\n        elsif gpa > 8 && gpa <= 8.3\n            grades_string\
    \ << 'E'\n        else\n            grades_string << 'D'\n        end\n    end\n\
    \    grades_string\nend", "    grade = grades[0]\n    grades.shift\n    result\
    \ = \"\"\n    until grades.empty?\n        diff = grade - grades[0]\n        diff\
    \ = diff * grades.length\n        grade = grades.shift\n        result += \"#{diff}\"\
    \n        if grades.length < 2\n            result += \"+\"\n        elsif diff\
    \ < 0 and diff > -3\n            result += \"-\"\n        elsif diff < -3\n  \
    \          result += \"+\"\n        end\n    end\n    return result\nend", " \
    \ grades.sort(&:to_f) # Make sure the list is in numerical order.\n  grades.reject!(&:zero?)\
    \ # Remove all zero grades\n  grades.reverse! # From largest to smallest\n  grades.first(nil).each\
    \ do |x|\n    return x.to_s + \" \" if x.to_s != \"0\"\n  end\n  grades[0] = \"\
    0\"\n  grades.join(\" \")\nend\n</code>\n<|/ a dscore=3 |>\n<| c |>\nThis is really\
    \ helpful\n<|/ c |>\n<| c |>\nWhat does `reverse!` do exactly?\n<|/ c |>\n<| c\
    \ |>\n`reverse!` reverses the array in place (mutates as opposed to creating a\
    \ new array). See [Array#reverse](https://ruby-doc.org/core-2.5.3/Array.html#method-i-reverse)\n\
    <|/ c |>\n<| a |>\nI didn't want to do too much of it, since the answers were\
    \ very good and were the most concise I could find without using too much code.\n\
    My answer is almost a straight port of the code from the accepted answer, but\
    \ with some slight modifications.\nThe main differences are:", "  grades.map!\
    \ {|x| x.to_f}\n  grades.each {|x| x.abs }\n  grades.uniq!\n  grades.sort!\n \
    \ grades.reverse!\n  grades.reverse_each{|x| x.abs}\n  grades.map! {|x| x.to_s.scan(/./).join('+')\
    \ }\n  grades.compact!\n  grades.map! {|x| x.to_s.gsub('+',' ') }\n  grades.map!\
    \ {|x| x.to_s.gsub('A',\"A+\") }\n  grades.map! {|x| x.to_s.gsub('A+',\"A\") }\n\
    \  grades.map! {|x| x.to_s.gsub('A+','A') }\n  grades.map! {|x| x.to_s.gsub('A','A-')\
    \ }\n  grades.map! {|x| x.to_s.gsub('A+','A-') }\n  grades.map! {|x| x.to_s.gsub('B',\"\
    B+\") }\n  grades.map! {|x| x.to_s.gsub('B+',\"B\") }\n  grades.map! {|x| x.to_s.gsub('B+',\"\
    B\") }\n  grades.map! {|x| x.to_s.gsub('B','B-') }\n  grades.map! {|x| x.to_s.gsub('B+','B-')\
    \ }\n  grades.map! {|x| x.to_s.gsub('C',\"C+\") }\n  grades.map! {|x| x.to_s.gsub('C+',\"\
    C\") }\n  grades.map! {|x| x.to_s.gsub('C+',\"C\") }\n  grades.map! {|x| x.to_s.gsub('C','C-')\
    \ }\n  grades.map! {|x| x.to_s.gsub('C+','C-') }\n  grades.map! {|x| x.to_s.gsub('D',\"\
    D+\") }\n  grades.map! {|x| x.to_s.gsub('D+',\"D\") }\n  grades.map! {|x| x.to_s.gsub('D+',\"\
    D\") }\n  grades.map! {|x| x.to_s.", "  grades.map!{|x|x>=0 && x<=4?'A+' :\n \
    \           x>=5&&x<=7?'A-' :\n            x>=6&&x<=3?'B+' :\n            x>=4&&x<=2?'B-'\
    \ :\n            x>=3&&x<=7?'C+' :\n            x>=7&&x<=6?'C-' :\n          \
    \  x>=5&&x<=1?'D+' :\n            x>=6&&x<=4?'D' :\n            x>=4&&x<=3?'D-'\
    \ :\n            'E'}\n  grades\nend", "  grades.each do |g|\n    grade_letter\
    \ = GPA_TO_LETTER[g]\n    grades.include?(g) ? grade_letter = \"E\" : grade_letter\n\
    \    puts grade_letter\n  end\nend", "    grades = grades.to_f\n    grades_sum\
    \ = 0\n    grades_array = []\n    \n    grades_sum += grades\n    \n    if grades\
    \ < 3 \n        grades_array[0] = 'A+'\n    \n    elsif grades < 6 \n        grades_array[0]\
    \ = 'A-'\n        \n    elsif grades < 9\n        grades_array[0] = 'B+'\n   \
    \     \n    elsif grades < 12\n        grades_array[0] = 'B-'\n        \n    elsif\
    \ grades < 15\n        grades_array[0] = 'C+'\n        \n    elsif grades < 18\n\
    \        grades_array[0] = 'C'\n        \n    elsif grades < 20\n        grades_array[0]\
    \ = 'C-'\n        \n    elsif grades < 24\n        grades_array[0] = 'D+'\n  \
    \      \n    elsif grades < 27\n        grades_array[0] = 'D'\n        \n    elsif\
    \ grades < 30\n        grades_array[0] = 'D-'\n        \n    elsif grades < 33\n\
    \        grades_array[0] = 'E'\n        \n    else grades_array[0] = 'F'\n   \
    \     \n    grades_array.push(*grades_sum.to_s)\n    grades_array\nend\n    ",
  "  # Get the GPAs for each student \n  gpas_for_students = grade_equations(grades)\n\
    \  # Create a list to hold the grade letters \n  letter_grades = []\n  # Loop\
    \ through each student's GPA\n  for gpa in gpas_for_students\n    # Print the\
    \ GPA \n    print(gpa)\n    # Get the letter grade \n    letter_grade = letter_grade(gpa)\n\
    \    # Print the letter grade \n    print(letter_grade)\n    # Add the letter\
    \ grade to the list \n    letter_grades.append(letter_grade)\n  # Return the list\
    \ of letter grades \n  return letter_grades", "  grades.sort.reverse\n  \n  grades_letter_grades\
    \ = []\n  \n  grades.each do |grade|\n    if grade >= 4.0\n      grades_letter_grades\
    \ << 'A+'\n    elsif grade >= 3.0\n      grades_letter_grades << 'A'\n    elsif\
    \ grade >= 3.0\n      grades_letter_grades << 'A-'\n    elsif grade >= 3.0\n \
    \     grades_letter_grades << 'B+'\n    elsif grade >= 3.0\n      grades_letter_grades\
    \ << 'B'\n    elsif grade >= 3.0\n      grades_letter_grades << 'B-'\n    elsif\
    \ grade >= 3.0\n      grades_letter_grades << 'C+'\n    elsif grade >= 3.0\n \
    \     grades_letter_grades << 'C'\n    elsif grade >= 3.0\n      grades_letter_grades\
    \ << 'C-'\n    elsif grade >= 3.0\n      grades_letter_grades << 'D+'\n    elsif\
    \ grade >= 3.0\n      grades_letter_grades << 'D'\n    elsif grade >= 3.0\n  \
    \    grades_letter_grades << 'D-'\n    elsif grade >= 0.0\n      grades_letter_grades\
    \ << 'E'\n    end\n  end\n  grades_letter_grades.reverse\nend", "    grades_sorted\
    \ = sorted(grades)\n    letter_grades = []\n    temp_sum = 0\n    for grade in\
    \ grades_sorted\n        temp_sum += grade\n        if temp_sum <= 4.5\n     \
    \       letter_grade = \"A+\"\n        elsif temp_sum > 4.5 and temp_sum < 5.5\n\
    \            letter_grade = \"A-\"\n        elsif temp_sum >= 5.5\n          \
    \  letter_grade = \"B+\"\n        elsif temp_sum > 5.5 and temp_sum < 6.5\n  \
    \          letter_grade = \"B\"\n        elsif temp_sum >= 6.5\n            letter_grade\
    \ = \"B-\"\n        elsif temp_sum >= 7.0\n            letter_grade = \"C+\"\n\
    \        elsif temp_sum > 7.0\n            letter_grade = \"C\"\n        elsif\
    \ temp_sum >= 7.5\n            letter_grade = \"C-\"\n        elsif temp_sum >=\
    \ 8.5\n            letter_grade = \"D+\"\n        elsif temp_sum >= 9.0\n    \
    \        letter_grade = \"D\"\n        elsif temp_sum >= 9.5\n            letter_grade\
    \ = \"D-\"\n        else\n            letter_grade = \"E\"\n        end\n    \
    \    letter_grades << letter_grade\n        temp_sum = 0\n    end\n    letter_grades\n\
    end", "  gpas = grade_equation\n  grades.sort()\n  sorted_gpas = grade_equation(gpas)\n\
    \  sorted_gpas.each_index do |i|\n    if gpas[i] > sorted_gpas.last\n      sorted_gpas.last.each_char\
    \ do |letter|\n        puts \"#{letter}\"\n      end\n      puts\n    end\n  end\n\
    end", "  letter_grades = []\n  GPAs.each do |gpa|\n    if gpa >= 3.7 && gpa <\
    \ 4.0\n      letter_grades.push('C')\n    elsif gpa >= 3.0 && gpa < 3.7\n    \
    \  letter_grades.push('B')\n    elsif gpa >= 2.7 && gpa < 3.0\n      letter_grades.push('A-')\n\
    \    elsif gpa >= 2.3 && gpa < 2.7\n      letter_grades.push('A+')\n    elsif\
    \ gpa >= 1.7 && gpa < 2.3\n      letter_grades.push('A')\n    elsif gpa >= 1.3\
    \ && gpa < 1.7\n      letter_grades.push('B-')\n    elsif gpa >= 1.0 && gpa <\
    \ 1.3\n      letter_grades.push('B+')\n    elsif gpa >= 0.7 && gpa < 1.0\n   \
    \   letter_grades.push('C+')\n    elsif gpa >= 0.0 && gpa < 0.7\n      letter_grades.push('C')\n\
    \    elsif gpa < 0.0\n      letter_grades.push('E')\n    end\n  end\n  return\
    \ letter_grades.join('')\nend", "  letter = \"\"\n  last_gpa, last_letter_grade\
    \ = grades.last\n  grades.reverse_each.with_index do |gpa, i|\n    if gpa > last_gpa\n\
    \      letter << \"+\"\n      last_letter_grade ||= \"E\"\n    end\n    if gpa\
    \ > last_gpa\n      letter << \"-\"\n      last_letter_grade ||= \"E\"\n    end\n\
    \    letter << gpa_to_letter[gpa] || last_letter_grade\n    last_gpa = gpa\n \
    \ end\n  letter << last_letter_grade || \"E\"\nend\n</code>\n<|/ a |>\n<| c |>\n\
    I'm confused about this: What is the purpose of the `reverse_each` method?\n<|/\
    \ c |>\n<| c |>\nthe reverse_each is just an iterator that keeps track of the\
    \ indexes, and the gpa values are stored in the variable gpa. \nSo, after the\
    \ loop ends, the index i will point to the gpa value of the last element\n<|/\
    \ c |>\n<| c |>\nThis is awesome! Thanks! I haven't gotten to using reverse_each\
    \ yet. I'll have to read up on it, but this certainly works great for what I need!\n\
    <|/ c |>\n<| a dscore=0 |>\nI believe the below is the solution to this particular\
    \ problem (I tested this against your test cases and it passed.)  I think it might\
    \ be helpful to show you the logic behind this rather than providing a solution.\
    \  It could also help to show you how to make your own solution.\n<code>", " \
    \   grades.sort()\n    grades.reverse()\n    letter_grades = []\n    \n    for\
    \ grade in grades\n        if grade > 3.0 then\n            letter_grades << 'B+'\n\
    \        else\n            if grade > 2.7 then\n                letter_grades\
    \ << 'B'\n            else\n                if grade > 2.3 then\n            \
    \        letter_grades << 'B-' \n                else\n                    if\
    \ grade > 2.0 then\n                        letter_grades << 'C+'\n          \
    \          else\n                        if grade > 1.7 then\n               \
    \             letter_grades << 'C'\n                        else\n           \
    \                 if grade > 1.3 then\n                                letter_grades\
    \ << 'C-' \n                            else\n                               \
    \ if grade > 1.0 then\n                                    letter_grades << 'D+'\n\
    \                                else\n                                    if\
    \ grade > 0.7 then\n                                        letter_grades << 'D'\n\
    \                                    else\n                                  \
    \      if grade > 0.3 then\n                                            letter_grades\
    \ << 'D-'\n                                        else\n                    \
    \                        letter_grades << 'E'\n            end\n        end\n\
    \    end\n    letter_grades.reverse!\nend", "  grades.each_index do |i|\n    grade\
    \ = grades[i]\n    min = grades.min\n    max = grades.max\n    if grade >= min\
    \ && grade < max then\n      if grade >= 4.0 then\n        grades[i] = 'A+'\n\
    \      elsif grade >= 3.7 then\n        grades[i] = 'A'\n      elsif grade >=\
    \ 3.3 then\n        grades[i] = 'A-'\n      elsif grade >= 3.0 then\n        grades[i]\
    \ = 'B+'\n      elsif grade >= 2.7 then\n        grades[i] = 'B'\n      elsif\
    \ grade >= 2.3 then\n        grades[i] = 'B-'\n      elsif grade >= 2.0 then\n\
    \        grades[i] = 'C+'\n      elsif grade >= 1.7 then\n        grades[i] =\
    \ 'C'\n      elsif grade >= 1.3 then\n        grades[i] = 'C-'\n      elsif grade\
    \ >= 1.0 then\n        grades[i] = 'D+'\n      elsif grade >= 0.7 then\n     \
    \   grades[i] = 'D'\n      elsif grade >= 0.0 then\n        grades[i] = 'D-'\n\
    \      else\n        grades[i] = 'E'\n      end\n    end\n  end\n  grades\nend",
  "    grades.sort()\n    gpa = grades.pop\n    letter = grades.pop.chr\n    letter_grades\
    \ = []\n    if gpa < 4.0\n        letter_grades << \"A+\"\n    elsif gpa < 3.7\n\
    \        letter_grades << \"A\"\n    elsif gpa < 3.3\n        letter_grades <<\
    \ \"A-\"\n    elsif gpa < 3.0\n        letter_grades << \"B+\"\n    elsif gpa\
    \ < 2.7\n        letter_grades << \"B\"\n    elsif gpa < 2.3\n        letter_grades\
    \ << \"B-\"\n    elsif gpa < 2.0\n        letter_grades << \"C+\"\n    elsif gpa\
    \ < 1.7\n        letter_grades << \"C\"\n    elsif gpa < 1.3\n        letter_grades\
    \ << \"C-\"\n    elsif gpa < 1.0\n        letter_grades << \"D+\"\n    elsif gpa\
    \ < 0.7\n        letter_grades << \"D\"\n    elsif gpa < 0.0\n        letter_grades\
    \ << \"D-\"\n    elsif gpa >= 0.0\n        letter_grades << \"E\"\n    end\n \
    \   return letter_grades\nend\n</cell>\n<cell>", "  return grades.inject([]) {\
    \ |a,v| a << letter_grade(v) }\nend", "    grades = grades.sort\n    grades.reverse!\n\
    \    grades.insert(0, 0)\n    return grades.map do |grade|\n        case grade\n\
    \        when 0...1.8 then 'E'\n        when 1.9...2.4 then 'D+'\n        when\
    \ 2.5...3.0 then 'D'\n        when 3.1...3.8 then 'C-'\n        when 3.9...4.4\
    \ then 'C'\n        when 4.5...5.0 then 'B-'\n        when 5.1...5.8 then 'B'\n\
    \        when 5.9...6.4 then 'A+'\n        when 6.5...7.0 then 'A'\n        when\
    \ 7.1...7.8 then 'A-'\n        when 7.9...8.4 then 'A'\n        when 8.5...9.0\
    \ then 'B+'\n        when 9.1...9.8 then 'B'\n        when 9.9...10.4 then 'B'\n\
    \        when 10.5...11.0 then 'C+'\n        when 11.1...11.8 then 'C'\n     \
    \   when 11.9...12.4 then 'C'\n        when 12.5...13.0 then 'C-'\n        when\
    \ 13.1...13.8 then 'C'\n        when 13.9...14.4 then 'C'\n        when 14.5...15.0\
    \ then 'D+'\n        when 15.1...15.8 then 'D'\n        when 15.9...16.4 then\
    \ 'D'\n        when 16.5...17.0 then 'D-'\n        when 17.1...17.8 then 'D'\n\
    \        when 17.9...18.4 then 'D'\n        when 18.5...19.0 then 'E'\n      \
    \  else ''\n        end\n    end.join\nend\n</code>\n<|/ a tags=ruby,algorithm,ruby-on-rails,math\
    \ |>\n<| a |>\nOne of the main features of grading is that the grades tend to\
    \ be symmetrical.  Hence you can apply the formula for a symmetrical grade to\
    \ solve for general grade values:\nGrade = (grade + grade - 1) / 2 * 100\nOr,\
    \ if you want the grade value to be more readable, you can do this:\n<code>",
  "# Write your function here.\n  grades.sort.reverse!\n  grades_sum = 0\n  grades_count\
    \ = 0\n  gpa = 0", "  \n  grades = grades.map{|x| x.to_f}\n  \n  grades.each_index\
    \ do |index|\n    grades[index] = grades[index].abs\n  end\n  \n  grades.uniq!\n\
    \  \n  grades.each_index do |index|\n    grades[index] = grades[index].to_i\n\
    \  end\n  \n  grades = grades.sort", "    # your code here\nend\n</cell>\n<code\
    \ language=julia-1.4>", "  letter_grades = []\n  final_grade = grades.pop()\n\
    \  \n  for i in grades\n    letter_grades[i] = grades[i] / final_grade * 100\n\
    \    \n  letter_grades.sort_by!{|x| x}\n  letter_grades.reverse!\n  letter_grades\n\
    end", "  result = []\n  \n  grades.each do |grade|\n    \n    next if grade ==\
    \ 0.0 # Don't print grades below 0.0\n    \n    if grade >= 4.0\n      result.push\
    \ 'A+'\n    elsif grade >= 3.7\n      result.push 'A'\n    elsif grade >= 3.3\n\
    \      result.push 'A-'\n    elsif grade >= 3.0\n      result.push 'B+'\n    elsif\
    \ grade >= 2.7\n      result.push 'B'\n    elsif grade >= 2.3\n      result.push\
    \ 'B-'\n    elsif grade >= 2.0\n      result.push 'C+'\n    elsif grade >= 1.7\n\
    \      result.push 'C'\n    elsif grade >= 1.3\n      result.push 'C-'\n    elsif\
    \ grade >= 1.0\n      result.push 'D+'\n    elsif grade >= 0.7\n      result.push\
    \ 'D'\n    else\n      result.push 'D-'\n    end\n  end\n  \n  result\nend", '  grades.sort!',
  "  grades.each_with_index do |grade, index|\n    grades[index] = grade * 3 / 4\n\
    \    grades.delete_at(index + 1)\n  end", "  grades.each do |grade|\n    if grade\
    \ < 0\n      letter = \"D\"\n    elsif grade >= 0 && grade < 1.7\n      letter\
    \ = \"C-\"\n    elsif grade >= 1.7 && grade < 2.3\n      letter = \"C\"\n    elsif\
    \ grade >= 2.3 && grade < 2.9\n      letter = \"B-\"\n    elsif grade >= 2.9 &&\
    \ grade < 3.5\n      letter = \"B\"\n    elsif grade >= 3.5 && grade < 4.0\n \
    \     letter = \"A+\"\n    elsif grade >= 4.0 && grade < 4.7\n      letter = \"\
    A\"\n    elsif grade >= 4.7 && grade < 5.3\n      letter = \"A-\"\n    elsif grade\
    \ >= 5.3 && grade < 5.9\n      letter = \"A\"\n    elsif grade >= 5.9 && grade\
    \ < 6.5\n      letter = \"B+\"\n    elsif grade >= 6.5 && grade < 7.0\n      letter\
    \ = \"B\"\n    elsif grade >= 7.0 && grade < 7.7\n      letter = \"B-\"\n    elsif\
    \ grade >= 7.7 && grade < 8.3\n      letter = \"B\"\n    elsif grade >= 8.3 &&\
    \ grade < 8.9\n      letter = \"C+\"\n    elsif grade >= 8.9 && grade < 9.5\n\
    \      letter = \"C\"\n    elsif grade >= 9.5 && grade < 10.0\n      letter =\
    \ \"C-\"\n    elsif grade >= 10.0 && grade < 10.7\n      letter = \"C\"\n    elsif\
    \ grade >= 10.7 && grade < 11.3\n      letter = \"D+\"\n    elsif grade >= 11.3\
    \ && grade < 11.9\n      letter = \"D\"\n    elsif grade >= 11.9 && grade < 12.5\n\
    \      letter = \"D-\"\n    elsif grade >= 12.5 && grade < 13.0\n      letter\
    \ = \"D\"\n    elsif grade >= 13.0 && grade < 13.7\n      letter = \"E\"\n   \
    \ elsif grade >= 13.7 && grade < 14.3\n      letter = \"E\"\n    elsif grade >=\
    \ 14.3\n      letter = \"E\"\n    end\n  end\n", "end\n</cell>\n<text>\nReturn\
    \ to the top"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
